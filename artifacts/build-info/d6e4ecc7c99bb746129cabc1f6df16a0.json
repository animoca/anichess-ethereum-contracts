{"id":"d6e4ecc7c99bb746129cabc1f6df16a0","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/burn/OrbsBurnPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title OrbsBurnPool Contract\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n */\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\n    using MerkleProof for bytes32[];\n\n    /// @notice The denominator for the multiplier.\n    uint256 internal constant _DENOMINATOR = 10_000;\n\n    /// @notice The token ID of RoC for setting the token multiplier.\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\n\n    /// @notice The token weights for calculating Ash.\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\n\n    /// @notice The Riddle Of Chaos multiplier.\n    uint256 public constant ROC_MULTIPLIER = 2;\n\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\n    IERC1155Burnable public immutable ORB_OF_POWER;\n\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\n    IERC1155Burnable public immutable MISSING_ORB;\n\n    /// @notice The initial time of the contract.\n    uint256 public immutable INITIAL_TIME;\n\n    /// @notice The duration of each cycle.\n    uint256 public immutable CYCLE_DURATION;\n\n    /// @notice The maximum cycle.\n    uint256 public immutable MAX_CYCLE;\n\n    /// @notice The Merkle root for setting the puzzleMultiplier.\n    bytes32 public immutable MERKLE_ROOT;\n\n    /// @notice The total amount of ASH generated in each cycle.\n    mapping(uint256 => uint256) public totalAshPerCycle;\n\n    /// @notice The total amount of ASH generated by each user in each cycle.\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\n\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\n    mapping(address => uint256) public orbMultipliers;\n\n    /// @notice Event emitted when ASH are generated.\n    event GenerateAsh(\n        address indexed burner,\n        uint256 indexed cycle,\n        uint256[] ids,\n        uint256[] values,\n        uint256 ash,\n        uint256 totalAsh,\n        uint256 orbMultiplier\n    );\n\n    /// @notice Event emitted when the multiplier info is updated.\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the token is not approved.\n    error InvalidTokenAddress(address token);\n\n    /// @notice Error thrown when the token amount is invalid.\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\n    error AlreadySetROCMultiplier(address wallet);\n\n    /// @notice Error thrown when the proof is invalid.\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\n\n    /// @notice Error thrown when the cycle duration is invalid.\n    error ZeroCycleDuration();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error ZeroMaxCycle();\n\n    /**\n     * @notice Constructor for the OrbsBurnPool contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n     * @param forwarderRegistry The forwarder registry contract.\n     * @dev Throws if the cycle duration is zero.\n     * @dev Throws if the max cycle is zero.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) {\n        INITIAL_TIME = initialTime;\n\n        if (cycleDuration == 0) {\n            revert ZeroCycleDuration();\n        }\n        CYCLE_DURATION = cycleDuration;\n\n        if (maxCycle == 0) {\n            revert ZeroMaxCycle();\n        }\n        MAX_CYCLE = maxCycle;\n        MERKLE_ROOT = merkleRoot;\n        ORB_OF_POWER = orbOfPower;\n        MISSING_ORB = missingOrb;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Get the current cycle.\n     * @return cycle The current cycle.\n     */\n    function currentCycle() public view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n    /**\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n     * @param from The wallet address.\n     * @param id The token ID.\n     * @param value The token value.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     * @dev Throws if the token multiplier has already been set.\n     */\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\n        if (msg.sender != address(MISSING_ORB)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n        if (id != MISSING_ORB_TOKEN_ID) {\n            revert InvalidTokenId(msg.sender, id);\n        }\n\n        if (value != 1) {\n            revert InvalidTokenValue(msg.sender, id, value);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 curOrbMultiplier = orbMultipliers[from];\n        if (uint128(curOrbMultiplier) > 0) {\n            revert AlreadySetROCMultiplier(from);\n        }\n\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\n\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\n        if (data.length > 0) {\n            if ((curOrbMultiplier >> 128) == 0) {\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\n                }\n\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\n            }\n        }\n        orbMultipliers[from] = newOrbMultiplier;\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @notice Burn the tokens and calculate the ash.\n     * @param from The wallet address.\n     * @param ids The token IDs to burn.\n     * @param values The amount of tokens to burn.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        if (msg.sender != address(ORB_OF_POWER)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\n\n        uint256 ashGenerated = 0;\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (values[i] == 0) {\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\n            }\n\n            if (ids[i] == 1) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\n            } else if (ids[i] == 2) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\n            } else if (ids[i] == 3) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\n            } else if (ids[i] == 4) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\n            } else if (ids[i] == 5) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\n            } else if (ids[i] == 6) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\n            } else if (ids[i] == 7) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\n            } else {\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\n            }\n        }\n\n        address userAddr = from;\n\n        // boost the total ash based on the orbMultipliers\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\n\n        if (data.length > 0) {\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n            if ((curOrbMultiplier >> 128) == 0) {\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\n                }\n\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\n                curOrbMultiplier = newOrbMultiplier;\n                orbMultipliers[userAddr] = newOrbMultiplier;\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\n            }\n\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n        } else {\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\n            if (puzzleGameMultiplierNumerator > 0) {\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n            }\n        }\n\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\n        if (rocMultiplier > 0) {\n            ashGenerated *= rocMultiplier;\n        }\n\n        // update the user status\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\n        // update the pool status\n        totalAshPerCycle[cycle] += ashGenerated;\n\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"},"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title ERC1155 Claim Window Merkle Claim Contract\n * @dev This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract ERC1155ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    /// @notice The claim window struct.\n    struct ClaimWindow {\n        bytes32 merkleRoot;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /// @notice The ERC1155Mintable reward contract.\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n\n    /// @notice The token id to be claimed.\n    uint256 public immutable TOKEN_ID;\n\n    /// @notice The total number of tokens that can be minted in this contract.\n    uint256 public immutable MINT_SUPPLY;\n\n    /// @notice The total number of tokens that have been claimed.\n    uint256 public noOfTokensClaimed;\n\n    /// @notice Mapping from the epoch ID to the claim window.\n    mapping(bytes32 => ClaimWindow) public claimWindows;\n\n    /// @notice Mapping from leafhash to the claim status.\n    mapping(bytes32 => bool) public claimStatus;\n\n    /// @notice Event emitted when a payout is claimed.\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\n\n    /// @notice Event emitted when a claim window is set.\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\n\n    /// @notice Error thrown when the payout has already been claimed.\n    error AlreadyClaimed(bytes32 epochId, address recipient);\n\n    /// @notice Error thrown when the proof provided for the claim is invalid.\n    error InvalidProof(bytes32 epochId, address recipient);\n\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\n\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\n    error ExceededMintSupply();\n\n    /// @notice Error thrown when the epoch ID already exists.\n    error EpochIdAlreadyExists(bytes32 epochId);\n\n    /// @notice Error thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    /// @notice Error thrown when the claim window is invalid.\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\n\n    /**\n     * @notice Constructor for the ERC1155ClaimWindowMerkleClaim contract.\n     * @param tokenId The token id to be claimed.\n     * @param mintSupply The total number of tokens that can be minted in this contract.\n     * @param rewardContract The ERC1155Mintable reward contract interface.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        uint256 tokenId,\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        TOKEN_ID = tokenId;\n        MINT_SUPPLY = mintSupply;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Sets the merkle root for a specific epoch with start and end time.\n     * @dev Reverts if the _msgSender() is not the owner.\n     * @dev Reverts if the epoch ID has already been set.\n     * @dev Emits a SetEpochMerkleRoot event.\n     * @param epochId The epoch ID for the claim.\n     * @param merkleRoot The Merkle root of the claim.\n     * @param startTime The start time of the claim window.\n     * @param endTime The end time of the claim window.\n     */\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        if (startTime >= endTime || endTime <= block.timestamp) {\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\n        }\n\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\n            revert EpochIdAlreadyExists(epochId);\n        }\n\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\n\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\n    }\n\n    /**\n     * @notice Claims the payout for a specific epoch.\n     * @param epochId The epoch ID for the claim.\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The recipient of the payout.\n     * @dev Throws if the claim window has not been set.\n     * @dev Throws if the claim window is closed or has not yet opened.\n     * @dev Throws if the proof provided for the claim is invalid.\n     * @dev Throws if the payout has already been claimed.\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\n     */\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\n        ClaimWindow storage claimWindow = claimWindows[epochId];\n        bytes32 merkleRoot = claimWindow.merkleRoot;\n        if (merkleRoot == bytes32(0)) {\n            revert EpochIdNotExists(epochId);\n        }\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\n            revert OutOfClaimWindow(epochId, block.timestamp);\n        }\n\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\n\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\n\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\n            revert ExceededMintSupply();\n        }\n\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\n        claimStatus[leaf] = true;\n\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \"\");\n\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\n    }\n}\n"},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {OrbsBurnPool} from \"../../burn/OrbsBurnPool.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\n\ncontract OrbsBurnPoolMock is OrbsBurnPool {\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb,\n        IForwarderRegistry forwarderRegistry\n    ) OrbsBurnPool(initialTime, cycleDuration, maxCycle, merkleRoot, orbOfPower, missingOrb, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ERC1155ClaimWindowMerkleClaim} from \"../../merkleClaim/ERC1155ClaimWindowMerkleClaim.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract ERC1155ClaimWindowMerkleClaimMock is ERC1155ClaimWindowMerkleClaim {\n    constructor(\n        uint256 tokenId,\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ERC1155ClaimWindowMerkleClaim(tokenId, mintSupply, rewardContract, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,1293,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1293],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":1294,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1293,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,1293,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1283,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1271],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[812],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":1272,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":813,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1271,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$812_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":811,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":959,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC2771":[713],"IForwarderRegistry":[727]},"id":582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":728,"src":"58:71:11","symbolAliases":[{"foreign":{"id":535,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":714,"src":"130:51:11","symbolAliases":[{"foreign":{"id":537,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":702,"src":"182:85:11","symbolAliases":[{"foreign":{"id":539,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":542,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"575:28:11"},"id":543,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":544,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"605:8:11"},"id":545,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":581,"linearizedBaseContracts":[581,713,701],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":554,"nodeType":"Block","src":"720:2:11","statements":[]},"id":555,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":551,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":552,"kind":"baseConstructorSpecifier","modifierName":{"id":550,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":555,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":547,"nodeType":"UserDefinedTypeName","pathNode":{"id":546,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"632:18:11"},"referencedDeclaration":727,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":581,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":563,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":561,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":560,"id":562,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":564,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"780:18:11"},"referencedDeclaration":727,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":581,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[712],"body":{"id":579,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":575,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":571,"id":578,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":580,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":580,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":569,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":581,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":582,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[756],"ForwarderRegistryContextBase":[701],"IForwarderRegistry":[727]},"id":702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":583,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":728,"src":"58:74:12","symbolAliases":[{"foreign":{"id":584,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":757,"src":"133:67:12","symbolAliases":[{"foreign":{"id":586,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":701,"linearizedBaseContracts":[701],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":591,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":701,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":590,"nodeType":"UserDefinedTypeName","pathNode":{"id":589,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"498:18:12"},"referencedDeclaration":727,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":597,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":598,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":600,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":602,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":602,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":593,"nodeType":"UserDefinedTypeName","pathNode":{"id":592,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"574:18:12"},"referencedDeclaration":727,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":701,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"846:683:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":610,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":613,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":623,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":622,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":619,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":621,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":651,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":629,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":626,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":634,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":637,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":647,"nodeType":"IfStatement","src":"1346:149:12","trueBody":{"id":646,"nodeType":"Block","src":"1457:38:12","statements":[{"expression":{"id":644,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1478:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":645,"nodeType":"Return","src":"1471:13:12"}]}},{"expression":{"expression":{"id":648,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":650,"nodeType":"Return","src":"1505:17:12"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":701,"src":"784:745:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":699,"nodeType":"Block","src":"1710:668:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":658,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":660,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:12","memberName":"data","nodeType":"MemberAccess","src":"1938:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:12","memberName":"length","nodeType":"MemberAccess","src":"1938:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":673,"nodeType":"IfStatement","src":"1907:93:12","trueBody":{"id":672,"nodeType":"Block","src":"1960:40:12","statements":[{"expression":{"expression":{"id":669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:12","memberName":"data","nodeType":"MemberAccess","src":"1981:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":671,"nodeType":"Return","src":"1974:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":678,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2183:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:12","typeDescriptions":{}}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":683,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2247:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"2247:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":681,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2207:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"2207:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"2157:189:12","trueBody":{"id":694,"nodeType":"Block","src":"2289:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":690,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2310:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":755,"src":"2310:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":693,"nodeType":"Return","src":"2303:32:12"}]}},{"expression":{"expression":{"id":696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:12","memberName":"data","nodeType":"MemberAccess","src":"2363:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":698,"nodeType":"Return","src":"2356:15:12"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"1535:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":700,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:12","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"1660:2:12"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1694:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":655,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:12"},"scope":701,"src":"1643:735:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":702,"src":"445:1935:12","usedErrors":[],"usedEvents":[]}],"src":"32:2349:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[713]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":703,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":713,"linearizedBaseContracts":[713],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":712,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":712,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":712,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":713,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[727]},"id":728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"58:143:14","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":727,"linearizedBaseContracts":[727],"name":"IForwarderRegistry","nameLocation":"211:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"236:314:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:14","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"sender","nameLocation":"592:6:14","nodeType":"VariableDeclaration","scope":726,"src":"584:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:14","nodeType":"VariableDeclaration","scope":726,"src":"600:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:14"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:14","nodeType":"VariableDeclaration","scope":726,"src":"642:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:14"},"scope":727,"src":"555:104:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":728,"src":"201:460:14","usedErrors":[],"usedEvents":[]}],"src":"32:630:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":729,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":756,"linearizedBaseContracts":[756],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":737,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":734,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":736,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":738,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":756,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"679:89:15","statements":[{"id":753,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":744,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":743,"id":752,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":755,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":741,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":756,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":757,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":765,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":765,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":765,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765],"ProxyInitialization":[812],"StorageSlot":[1353]},"id":813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":766,"src":"58:92:17","symbolAliases":[{"foreign":{"id":768,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":1354,"src":"151:74:17","symbolAliases":[{"foreign":{"id":770,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":812,"linearizedBaseContracts":[812],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":810,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":810,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1308,"src":"745:23:17"},"referencedDeclaration":1308,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":789,"initialValue":{"arguments":[{"id":787,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":785,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1353,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1353_$","typeString":"type(library StorageSlot)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1352,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1308_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":810,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"expression":{"id":792,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1307,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":796,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":803,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":799,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":800,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":798,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":802,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":804,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1307,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":807,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":809,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":811,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":811,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":812,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":813,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[847],"IERC1155TokenReceiver":[941],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":814,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":942,"src":"58:77:18","symbolAliases":[{"foreign":{"id":815,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"66:21:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":533,"src":"136:104:18","symbolAliases":[{"foreign":{"id":817,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"144:25:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":415,"src":"241:80:18","symbolAliases":[{"foreign":{"id":819,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"249:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":822,"name":"IERC1155TokenReceiver","nameLocations":["541:21:18"],"nodeType":"IdentifierPath","referencedDeclaration":941,"src":"541:21:18"},"id":823,"nodeType":"InheritanceSpecifier","src":"541:21:18"},{"baseName":{"id":824,"name":"InterfaceDetection","nameLocations":["564:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"564:18:18"},"id":825,"nodeType":"InheritanceSpecifier","src":"564:18:18"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"323:176:18","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":847,"linearizedBaseContracts":[847,414,431,941],"name":"ERC1155TokenReceiver","nameLocation":"517:20:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":829,"libraryName":{"id":826,"name":"InterfaceDetectionStorage","nameLocations":["595:25:18"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"595:25:18"},"nodeType":"UsingForDirective","src":"589:69:18","typeName":{"id":828,"nodeType":"UserDefinedTypeName","pathNode":{"id":827,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:18","651:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"625:32:18"},"referencedDeclaration":442,"src":"625:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":845,"nodeType":"Block","src":"770:120:18","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":839,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"842:21:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$941_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$941_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":838,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$941","typeString":"type(contract IERC1155TokenReceiver)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":833,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"780:25:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"780:32:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:18","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"780:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"780:103:18"}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"664:87:18","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":846,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[],"src":"767:2:18"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"770:0:18"},"scope":847,"src":"756:134:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":848,"src":"499:393:18","usedErrors":[419],"usedEvents":[]}],"src":"32:861:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[873]},"id":874,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":849,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"59:196:19","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":873,"linearizedBaseContracts":[873],"name":"IERC1155Burnable","nameLocation":"265:16:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"288:391:19","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":860,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:19","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"from","nameLocation":"710:4:19","nodeType":"VariableDeclaration","scope":860,"src":"702:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"id","nameLocation":"724:2:19","nodeType":"VariableDeclaration","scope":860,"src":"716:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":854,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"value","nameLocation":"736:5:19","nodeType":"VariableDeclaration","scope":860,"src":"728:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:19"},"returnParameters":{"id":859,"nodeType":"ParameterList","parameters":[],"src":"751:0:19"},"scope":873,"src":"684:68:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":861,"nodeType":"StructuredDocumentation","src":"758:478:19","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":872,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:19","nodeType":"FunctionDefinition","parameters":{"id":870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":863,"mutability":"mutable","name":"from","nameLocation":"1272:4:19","nodeType":"VariableDeclaration","scope":872,"src":"1264:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":862,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":866,"mutability":"mutable","name":"ids","nameLocation":"1297:3:19","nodeType":"VariableDeclaration","scope":872,"src":"1278:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":864,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":865,"nodeType":"ArrayTypeName","src":"1278:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"values","nameLocation":"1321:6:19","nodeType":"VariableDeclaration","scope":872,"src":"1302:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":867,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":868,"nodeType":"ArrayTypeName","src":"1302:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:19"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[],"src":"1337:0:19"},"scope":873,"src":"1241:97:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":874,"src":"255:1085:19","usedErrors":[],"usedEvents":[]}],"src":"33:1308:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[903]},"id":904,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":875,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":876,"nodeType":"StructuredDocumentation","src":"59:196:20","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":903,"linearizedBaseContracts":[903],"name":"IERC1155Mintable","nameLocation":"265:16:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"288:550:20","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":888,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"852:8:20","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":879,"mutability":"mutable","name":"to","nameLocation":"869:2:20","nodeType":"VariableDeclaration","scope":888,"src":"861:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":878,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":881,"mutability":"mutable","name":"id","nameLocation":"881:2:20","nodeType":"VariableDeclaration","scope":888,"src":"873:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":880,"name":"uint256","nodeType":"ElementaryTypeName","src":"873:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":883,"mutability":"mutable","name":"value","nameLocation":"893:5:20","nodeType":"VariableDeclaration","scope":888,"src":"885:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":882,"name":"uint256","nodeType":"ElementaryTypeName","src":"885:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"data","nameLocation":"915:4:20","nodeType":"VariableDeclaration","scope":888,"src":"900:19:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":884,"name":"bytes","nodeType":"ElementaryTypeName","src":"900:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"860:60:20"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[],"src":"929:0:20"},"scope":903,"src":"843:87:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"936:644:20","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":902,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1594:13:20","nodeType":"FunctionDefinition","parameters":{"id":900,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"to","nameLocation":"1616:2:20","nodeType":"VariableDeclaration","scope":902,"src":"1608:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"1608:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":894,"mutability":"mutable","name":"ids","nameLocation":"1639:3:20","nodeType":"VariableDeclaration","scope":902,"src":"1620:22:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":892,"name":"uint256","nodeType":"ElementaryTypeName","src":"1620:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":893,"nodeType":"ArrayTypeName","src":"1620:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":897,"mutability":"mutable","name":"values","nameLocation":"1663:6:20","nodeType":"VariableDeclaration","scope":902,"src":"1644:25:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"1644:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":896,"nodeType":"ArrayTypeName","src":"1644:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":899,"mutability":"mutable","name":"data","nameLocation":"1686:4:20","nodeType":"VariableDeclaration","scope":902,"src":"1671:19:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":898,"name":"bytes","nodeType":"ElementaryTypeName","src":"1671:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1607:84:20"},"returnParameters":{"id":901,"nodeType":"ParameterList","parameters":[],"src":"1700:0:20"},"scope":903,"src":"1585:116:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":904,"src":"255:1448:20","usedErrors":[],"usedEvents":[]}],"src":"33:1671:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[941]},"id":942,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":905,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":906,"nodeType":"StructuredDocumentation","src":"58:284:21","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":941,"linearizedBaseContracts":[941],"name":"IERC1155TokenReceiver","nameLocation":"352:21:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":907,"nodeType":"StructuredDocumentation","src":"380:914:21","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":922,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:21","nodeType":"FunctionDefinition","parameters":{"id":918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":909,"mutability":"mutable","name":"operator","nameLocation":"1334:8:21","nodeType":"VariableDeclaration","scope":922,"src":"1326:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":908,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":911,"mutability":"mutable","name":"from","nameLocation":"1352:4:21","nodeType":"VariableDeclaration","scope":922,"src":"1344:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"id","nameLocation":"1366:2:21","nodeType":"VariableDeclaration","scope":922,"src":"1358:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":912,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"value","nameLocation":"1378:5:21","nodeType":"VariableDeclaration","scope":922,"src":"1370:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":917,"mutability":"mutable","name":"data","nameLocation":"1400:4:21","nodeType":"VariableDeclaration","scope":922,"src":"1385:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":916,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:21"},"returnParameters":{"id":921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":920,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:21","nodeType":"VariableDeclaration","scope":922,"src":"1424:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":919,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:21"},"scope":941,"src":"1299:144:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":923,"nodeType":"StructuredDocumentation","src":"1449:1062:21","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":940,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:21","nodeType":"FunctionDefinition","parameters":{"id":936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":925,"mutability":"mutable","name":"operator","nameLocation":"2565:8:21","nodeType":"VariableDeclaration","scope":940,"src":"2557:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":924,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":927,"mutability":"mutable","name":"from","nameLocation":"2591:4:21","nodeType":"VariableDeclaration","scope":940,"src":"2583:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":926,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":930,"mutability":"mutable","name":"ids","nameLocation":"2624:3:21","nodeType":"VariableDeclaration","scope":940,"src":"2605:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":929,"nodeType":"ArrayTypeName","src":"2605:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"values","nameLocation":"2656:6:21","nodeType":"VariableDeclaration","scope":940,"src":"2637:25:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":931,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":932,"nodeType":"ArrayTypeName","src":"2637:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":935,"mutability":"mutable","name":"data","nameLocation":"2687:4:21","nodeType":"VariableDeclaration","scope":940,"src":"2672:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":934,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:21"},"returnParameters":{"id":939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:21","nodeType":"VariableDeclaration","scope":940,"src":"2716:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":937,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:21"},"scope":941,"src":"2516:219:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":942,"src":"342:2395:21","usedErrors":[],"usedEvents":[]}],"src":"32:2706:21"},"id":21},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1271]},"id":1272,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":943,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":944,"nodeType":"StructuredDocumentation","src":"126:67:22","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1271,"linearizedBaseContracts":[1271],"name":"Address","nameLocation":"202:7:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":958,"nodeType":"Block","src":"1241:254:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":952,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"1465:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:22","memberName":"code","nodeType":"MemberAccess","src":"1465:12:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":954,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:22","memberName":"length","nodeType":"MemberAccess","src":"1465:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":951,"id":957,"nodeType":"Return","src":"1458:30:22"}]},"documentation":{"id":945,"nodeType":"StructuredDocumentation","src":"216:954:22","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":959,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:22","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":947,"mutability":"mutable","name":"account","nameLocation":"1203:7:22","nodeType":"VariableDeclaration","scope":959,"src":"1195:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":946,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:22"},"returnParameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":959,"src":"1235:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":949,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:22"},"scope":1271,"src":"1175:320:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":992,"nodeType":"Block","src":"2483:241:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":970,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1271","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1271","typeString":"library Address"}],"id":969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":968,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:22","typeDescriptions":{}}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:22","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":973,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2526:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":977,"nodeType":"ExpressionStatement","src":"2493:73:22"},{"assignments":[979,null],"declarations":[{"constant":false,"id":979,"mutability":"mutable","name":"success","nameLocation":"2583:7:22","nodeType":"VariableDeclaration","scope":992,"src":"2578:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":978,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":986,"initialValue":{"arguments":[{"hexValue":"","id":984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":980,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"2596:9:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:22","memberName":"call","nodeType":"MemberAccess","src":"2596:14:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":982,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":964,"src":"2618:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:22"},{"expression":{"arguments":[{"id":988,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"2647:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":987,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":990,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":991,"nodeType":"ExpressionStatement","src":"2639:78:22"}]},"documentation":{"id":960,"nodeType":"StructuredDocumentation","src":"1501:906:22","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":993,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:22","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:22","nodeType":"VariableDeclaration","scope":993,"src":"2431:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":961,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"amount","nameLocation":"2466:6:22","nodeType":"VariableDeclaration","scope":993,"src":"2458:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":963,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:22"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[],"src":"2483:0:22"},"scope":1271,"src":"2412:312:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1010,"nodeType":"Block","src":"3555:96:22","statements":[{"expression":{"arguments":[{"id":1004,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"3594:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1005,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":998,"src":"3602:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1003,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1051,1095],"referencedDeclaration":1095,"src":"3572:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1002,"id":1009,"nodeType":"Return","src":"3565:79:22"}]},"documentation":{"id":994,"nodeType":"StructuredDocumentation","src":"2730:731:22","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1011,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:22","nodeType":"FunctionDefinition","parameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":996,"mutability":"mutable","name":"target","nameLocation":"3496:6:22","nodeType":"VariableDeclaration","scope":1011,"src":"3488:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":995,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":998,"mutability":"mutable","name":"data","nameLocation":"3517:4:22","nodeType":"VariableDeclaration","scope":1011,"src":"3504:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":997,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:22"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1011,"src":"3541:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1000,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:22"},"scope":1271,"src":"3466:185:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1030,"nodeType":"Block","src":"4020:76:22","statements":[{"expression":{"arguments":[{"id":1024,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1014,"src":"4059:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1025,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"4067:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1026,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1027,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"4076:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1023,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1051,1095],"referencedDeclaration":1095,"src":"4037:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1022,"id":1029,"nodeType":"Return","src":"4030:59:22"}]},"documentation":{"id":1012,"nodeType":"StructuredDocumentation","src":"3657:211:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1031,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:22","nodeType":"FunctionDefinition","parameters":{"id":1019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1014,"mutability":"mutable","name":"target","nameLocation":"3912:6:22","nodeType":"VariableDeclaration","scope":1031,"src":"3904:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1016,"mutability":"mutable","name":"data","nameLocation":"3941:4:22","nodeType":"VariableDeclaration","scope":1031,"src":"3928:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1015,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1018,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:22","nodeType":"VariableDeclaration","scope":1031,"src":"3955:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1017,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:22"},"returnParameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1021,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1031,"src":"4006:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1020,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:22"},"scope":1271,"src":"3873:223:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1050,"nodeType":"Block","src":"4601:111:22","statements":[{"expression":{"arguments":[{"id":1044,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"4640:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1045,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"4648:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1038,"src":"4654:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1047,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1043,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1051,1095],"referencedDeclaration":1095,"src":"4618:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1042,"id":1049,"nodeType":"Return","src":"4611:94:22"}]},"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"4102:351:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1051,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:22","nodeType":"FunctionDefinition","parameters":{"id":1039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"target","nameLocation":"4506:6:22","nodeType":"VariableDeclaration","scope":1051,"src":"4498:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1036,"mutability":"mutable","name":"data","nameLocation":"4535:4:22","nodeType":"VariableDeclaration","scope":1051,"src":"4522:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1035,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1038,"mutability":"mutable","name":"value","nameLocation":"4557:5:22","nodeType":"VariableDeclaration","scope":1051,"src":"4549:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1037,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:22"},"returnParameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1051,"src":"4587:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:22"},"scope":1271,"src":"4458:254:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1094,"nodeType":"Block","src":"5139:267:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1068,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1271","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1271","typeString":"library Address"}],"id":1067,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1066,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:22","typeDescriptions":{}}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:22","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1071,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"5182:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1065,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1075,"nodeType":"ExpressionStatement","src":"5149:81:22"},{"assignments":[1077,1079],"declarations":[{"constant":false,"id":1077,"mutability":"mutable","name":"success","nameLocation":"5246:7:22","nodeType":"VariableDeclaration","scope":1094,"src":"5241:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1076,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1079,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:22","nodeType":"VariableDeclaration","scope":1094,"src":"5255:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1078,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1086,"initialValue":{"arguments":[{"id":1084,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"5308:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1080,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"5282:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:22","memberName":"call","nodeType":"MemberAccess","src":"5282:11:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1082,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"5301:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:22"},{"expression":{"arguments":[{"id":1088,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"5357:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1089,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1077,"src":"5365:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1090,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"5374:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1091,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1060,"src":"5386:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1087,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"5330:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1064,"id":1093,"nodeType":"Return","src":"5323:76:22"}]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"4718:237:22","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1095,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:22","nodeType":"FunctionDefinition","parameters":{"id":1061,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1054,"mutability":"mutable","name":"target","nameLocation":"5008:6:22","nodeType":"VariableDeclaration","scope":1095,"src":"5000:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1053,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1056,"mutability":"mutable","name":"data","nameLocation":"5037:4:22","nodeType":"VariableDeclaration","scope":1095,"src":"5024:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1055,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1058,"mutability":"mutable","name":"value","nameLocation":"5059:5:22","nodeType":"VariableDeclaration","scope":1095,"src":"5051:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1057,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1060,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:22","nodeType":"VariableDeclaration","scope":1095,"src":"5074:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1059,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:22"},"returnParameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1063,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1095,"src":"5125:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1062,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:22"},"scope":1271,"src":"4960:446:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1111,"nodeType":"Block","src":"5683:97:22","statements":[{"expression":{"arguments":[{"id":1106,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1098,"src":"5719:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1107,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"5727:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1108,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1105,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1112,1141],"referencedDeclaration":1141,"src":"5700:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1104,"id":1110,"nodeType":"Return","src":"5693:80:22"}]},"documentation":{"id":1096,"nodeType":"StructuredDocumentation","src":"5412:166:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1112,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:22","nodeType":"FunctionDefinition","parameters":{"id":1101,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1098,"mutability":"mutable","name":"target","nameLocation":"5619:6:22","nodeType":"VariableDeclaration","scope":1112,"src":"5611:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1097,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1100,"mutability":"mutable","name":"data","nameLocation":"5640:4:22","nodeType":"VariableDeclaration","scope":1112,"src":"5627:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1099,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:22"},"returnParameters":{"id":1104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1103,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1112,"src":"5669:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1102,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:22"},"scope":1271,"src":"5583:197:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1140,"nodeType":"Block","src":"6122:168:22","statements":[{"assignments":[1125,1127],"declarations":[{"constant":false,"id":1125,"mutability":"mutable","name":"success","nameLocation":"6138:7:22","nodeType":"VariableDeclaration","scope":1140,"src":"6133:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1124,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1127,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:22","nodeType":"VariableDeclaration","scope":1140,"src":"6147:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1132,"initialValue":{"arguments":[{"id":1130,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"6192:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1128,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"6174:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:22","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:22","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:22"},{"expression":{"arguments":[{"id":1134,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"6241:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1135,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"6249:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1136,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1127,"src":"6258:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1137,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"6270:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1133,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"6214:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1123,"id":1139,"nodeType":"Return","src":"6207:76:22"}]},"documentation":{"id":1113,"nodeType":"StructuredDocumentation","src":"5786:173:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1141,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:22","nodeType":"FunctionDefinition","parameters":{"id":1120,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"target","nameLocation":"6009:6:22","nodeType":"VariableDeclaration","scope":1141,"src":"6001:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1114,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1117,"mutability":"mutable","name":"data","nameLocation":"6038:4:22","nodeType":"VariableDeclaration","scope":1141,"src":"6025:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1116,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1119,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:22","nodeType":"VariableDeclaration","scope":1141,"src":"6052:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1118,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:22"},"returnParameters":{"id":1123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1122,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1141,"src":"6108:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1121,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:22"},"scope":1271,"src":"5964:326:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1157,"nodeType":"Block","src":"6566:101:22","statements":[{"expression":{"arguments":[{"id":1152,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1144,"src":"6604:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1153,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1146,"src":"6612:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1151,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1158,1187],"referencedDeclaration":1187,"src":"6583:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1150,"id":1156,"nodeType":"Return","src":"6576:84:22"}]},"documentation":{"id":1142,"nodeType":"StructuredDocumentation","src":"6296:168:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1158,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:22","nodeType":"FunctionDefinition","parameters":{"id":1147,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1144,"mutability":"mutable","name":"target","nameLocation":"6507:6:22","nodeType":"VariableDeclaration","scope":1158,"src":"6499:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1143,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1146,"mutability":"mutable","name":"data","nameLocation":"6528:4:22","nodeType":"VariableDeclaration","scope":1158,"src":"6515:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1145,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:22"},"returnParameters":{"id":1150,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1149,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1158,"src":"6552:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1148,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:22"},"scope":1271,"src":"6469:198:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1186,"nodeType":"Block","src":"7008:170:22","statements":[{"assignments":[1171,1173],"declarations":[{"constant":false,"id":1171,"mutability":"mutable","name":"success","nameLocation":"7024:7:22","nodeType":"VariableDeclaration","scope":1186,"src":"7019:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1170,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1173,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:22","nodeType":"VariableDeclaration","scope":1186,"src":"7033:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1172,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1178,"initialValue":{"arguments":[{"id":1176,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"7080:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1174,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"7060:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:22","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:22","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:22"},{"expression":{"arguments":[{"id":1180,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1161,"src":"7129:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1181,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1171,"src":"7137:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1182,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1173,"src":"7146:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1183,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1165,"src":"7158:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1179,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"7102:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1169,"id":1185,"nodeType":"Return","src":"7095:76:22"}]},"documentation":{"id":1159,"nodeType":"StructuredDocumentation","src":"6673:175:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:22","nodeType":"FunctionDefinition","parameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"target","nameLocation":"6900:6:22","nodeType":"VariableDeclaration","scope":1187,"src":"6892:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1160,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1163,"mutability":"mutable","name":"data","nameLocation":"6929:4:22","nodeType":"VariableDeclaration","scope":1187,"src":"6916:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1162,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1165,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:22","nodeType":"VariableDeclaration","scope":1187,"src":"6943:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1164,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:22"},"returnParameters":{"id":1169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1187,"src":"6994:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1167,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:22"},"scope":1271,"src":"6853:325:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1225,"nodeType":"Block","src":"7660:434:22","statements":[{"condition":{"id":1201,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"7674:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1223,"nodeType":"Block","src":"8030:58:22","statements":[{"expression":{"arguments":[{"id":1219,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"8052:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1220,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8064:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1218,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"8044:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1222,"nodeType":"ExpressionStatement","src":"8044:33:22"}]},"id":1224,"nodeType":"IfStatement","src":"7670:418:22","trueBody":{"id":1217,"nodeType":"Block","src":"7683:341:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1202,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"7701:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:22","memberName":"length","nodeType":"MemberAccess","src":"7701:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1214,"nodeType":"IfStatement","src":"7697:286:22","trueBody":{"id":1213,"nodeType":"Block","src":"7725:258:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":1208,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1190,"src":"7927:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1207,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"7916:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1210,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1206,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1212,"nodeType":"ExpressionStatement","src":"7908:60:22"}]}},{"expression":{"id":1215,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"8003:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1200,"id":1216,"nodeType":"Return","src":"7996:17:22"}]}}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"7184:277:22","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1226,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:22","nodeType":"FunctionDefinition","parameters":{"id":1197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1190,"mutability":"mutable","name":"target","nameLocation":"7519:6:22","nodeType":"VariableDeclaration","scope":1226,"src":"7511:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1189,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1192,"mutability":"mutable","name":"success","nameLocation":"7540:7:22","nodeType":"VariableDeclaration","scope":1226,"src":"7535:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1191,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:22","nodeType":"VariableDeclaration","scope":1226,"src":"7557:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:22","nodeType":"VariableDeclaration","scope":1226,"src":"7590:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1195,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:22"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1226,"src":"7646:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1198,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:22"},"scope":1271,"src":"7466:628:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1249,"nodeType":"Block","src":"8475:135:22","statements":[{"condition":{"id":1238,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1229,"src":"8489:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1247,"nodeType":"Block","src":"8546:58:22","statements":[{"expression":{"arguments":[{"id":1243,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8568:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1244,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"8580:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1242,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"8560:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1246,"nodeType":"ExpressionStatement","src":"8560:33:22"}]},"id":1248,"nodeType":"IfStatement","src":"8485:119:22","trueBody":{"id":1241,"nodeType":"Block","src":"8498:42:22","statements":[{"expression":{"id":1239,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1231,"src":"8519:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1237,"id":1240,"nodeType":"Return","src":"8512:17:22"}]}}]},"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"8100:210:22","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1250,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:22","nodeType":"FunctionDefinition","parameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"success","nameLocation":"8355:7:22","nodeType":"VariableDeclaration","scope":1250,"src":"8350:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1228,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:22","nodeType":"VariableDeclaration","scope":1250,"src":"8372:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1230,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1233,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:22","nodeType":"VariableDeclaration","scope":1250,"src":"8405:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1232,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:22"},"returnParameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1250,"src":"8461:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1235,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:22"},"scope":1271,"src":"8315:295:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1269,"nodeType":"Block","src":"8699:457:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1260,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1257,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"8775:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:22","memberName":"length","nodeType":"MemberAccess","src":"8775:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1259,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1267,"nodeType":"Block","src":"9105:45:22","statements":[{"expression":{"arguments":[{"id":1264,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"9126:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1263,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1266,"nodeType":"ExpressionStatement","src":"9119:20:22"}]},"id":1268,"nodeType":"IfStatement","src":"8771:379:22","trueBody":{"id":1262,"nodeType":"Block","src":"8798:301:22","statements":[{"AST":{"nativeSrc":"8956:133:22","nodeType":"YulBlock","src":"8956:133:22","statements":[{"nativeSrc":"8974:40:22","nodeType":"YulVariableDeclaration","src":"8974:40:22","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:22","nodeType":"YulIdentifier","src":"9003:10:22"}],"functionName":{"name":"mload","nativeSrc":"8997:5:22","nodeType":"YulIdentifier","src":"8997:5:22"},"nativeSrc":"8997:17:22","nodeType":"YulFunctionCall","src":"8997:17:22"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:22","nodeType":"YulTypedName","src":"8978:15:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:22","nodeType":"YulLiteral","src":"9042:2:22","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:22","nodeType":"YulIdentifier","src":"9046:10:22"}],"functionName":{"name":"add","nativeSrc":"9038:3:22","nodeType":"YulIdentifier","src":"9038:3:22"},"nativeSrc":"9038:19:22","nodeType":"YulFunctionCall","src":"9038:19:22"},{"name":"returndata_size","nativeSrc":"9059:15:22","nodeType":"YulIdentifier","src":"9059:15:22"}],"functionName":{"name":"revert","nativeSrc":"9031:6:22","nodeType":"YulIdentifier","src":"9031:6:22"},"nativeSrc":"9031:44:22","nodeType":"YulFunctionCall","src":"9031:44:22"},"nativeSrc":"9031:44:22","nodeType":"YulExpressionStatement","src":"9031:44:22"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1252,"isOffset":false,"isSlot":false,"src":"9003:10:22","valueSize":1},{"declaration":1252,"isOffset":false,"isSlot":false,"src":"9046:10:22","valueSize":1}],"id":1261,"nodeType":"InlineAssembly","src":"8947:142:22"}]}}]},"id":1270,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:22","nodeType":"FunctionDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:22","nodeType":"VariableDeclaration","scope":1270,"src":"8633:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1251,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:22","nodeType":"VariableDeclaration","scope":1270,"src":"8658:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1253,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:22"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[],"src":"8699:0:22"},"scope":1271,"src":"8616:540:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1272,"src":"194:8964:22","usedErrors":[],"usedEvents":[]}],"src":"101:9058:22"},"id":22},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1293]},"id":1294,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1273,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:23"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"111:496:23","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1293,"linearizedBaseContracts":[1293],"name":"Context","nameLocation":"626:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1282,"nodeType":"Block","src":"702:34:23","statements":[{"expression":{"expression":{"id":1279,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:23","memberName":"sender","nodeType":"MemberAccess","src":"719:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1278,"id":1281,"nodeType":"Return","src":"712:17:23"}]},"id":1283,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:23","nodeType":"FunctionDefinition","parameters":{"id":1275,"nodeType":"ParameterList","parameters":[],"src":"659:2:23"},"returnParameters":{"id":1278,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1277,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1283,"src":"693:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1276,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:23"},"scope":1293,"src":"640:96:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1291,"nodeType":"Block","src":"809:32:23","statements":[{"expression":{"expression":{"id":1288,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:23","memberName":"data","nodeType":"MemberAccess","src":"826:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1287,"id":1290,"nodeType":"Return","src":"819:15:23"}]},"id":1292,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:23","nodeType":"FunctionDefinition","parameters":{"id":1284,"nodeType":"ParameterList","parameters":[],"src":"759:2:23"},"returnParameters":{"id":1287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1286,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1292,"src":"793:14:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1285,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:23"},"scope":1293,"src":"742:99:23","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1294,"src":"608:235:23","usedErrors":[],"usedEvents":[]}],"src":"86:758:23"},"id":23},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1353]},"id":1354,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1295,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"130:1148:24","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1353,"linearizedBaseContracts":[1353],"name":"StorageSlot","nameLocation":"1287:11:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1299,"members":[{"constant":false,"id":1298,"mutability":"mutable","name":"value","nameLocation":"1342:5:24","nodeType":"VariableDeclaration","scope":1299,"src":"1334:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1297,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:24","nodeType":"StructDefinition","scope":1353,"src":"1305:49:24","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1302,"members":[{"constant":false,"id":1301,"mutability":"mutable","name":"value","nameLocation":"1394:5:24","nodeType":"VariableDeclaration","scope":1302,"src":"1389:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1300,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:24","nodeType":"StructDefinition","scope":1353,"src":"1360:46:24","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1305,"members":[{"constant":false,"id":1304,"mutability":"mutable","name":"value","nameLocation":"1449:5:24","nodeType":"VariableDeclaration","scope":1305,"src":"1441:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1303,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:24","nodeType":"StructDefinition","scope":1353,"src":"1412:49:24","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1308,"members":[{"constant":false,"id":1307,"mutability":"mutable","name":"value","nameLocation":"1504:5:24","nodeType":"VariableDeclaration","scope":1308,"src":"1496:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1306,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:24","nodeType":"StructDefinition","scope":1353,"src":"1467:49:24","visibility":"public"},{"body":{"id":1318,"nodeType":"Block","src":"1698:106:24","statements":[{"AST":{"nativeSrc":"1760:38:24","nodeType":"YulBlock","src":"1760:38:24","statements":[{"nativeSrc":"1774:14:24","nodeType":"YulAssignment","src":"1774:14:24","value":{"name":"slot","nativeSrc":"1784:4:24","nodeType":"YulIdentifier","src":"1784:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:24","nodeType":"YulIdentifier","src":"1774:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1315,"isOffset":false,"isSlot":true,"src":"1774:6:24","suffix":"slot","valueSize":1},{"declaration":1311,"isOffset":false,"isSlot":false,"src":"1784:4:24","valueSize":1}],"id":1317,"nodeType":"InlineAssembly","src":"1751:47:24"}]},"documentation":{"id":1309,"nodeType":"StructuredDocumentation","src":"1522:87:24","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1319,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:24","nodeType":"FunctionDefinition","parameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"slot","nameLocation":"1646:4:24","nodeType":"VariableDeclaration","scope":1319,"src":"1638:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1310,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:24"},"returnParameters":{"id":1316,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1315,"mutability":"mutable","name":"r","nameLocation":"1695:1:24","nodeType":"VariableDeclaration","scope":1319,"src":"1675:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1299_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1314,"nodeType":"UserDefinedTypeName","pathNode":{"id":1313,"name":"AddressSlot","nameLocations":["1675:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1299,"src":"1675:11:24"},"referencedDeclaration":1299,"src":"1675:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1299_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:24"},"scope":1353,"src":"1614:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1329,"nodeType":"Block","src":"1986:106:24","statements":[{"AST":{"nativeSrc":"2048:38:24","nodeType":"YulBlock","src":"2048:38:24","statements":[{"nativeSrc":"2062:14:24","nodeType":"YulAssignment","src":"2062:14:24","value":{"name":"slot","nativeSrc":"2072:4:24","nodeType":"YulIdentifier","src":"2072:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:24","nodeType":"YulIdentifier","src":"2062:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1326,"isOffset":false,"isSlot":true,"src":"2062:6:24","suffix":"slot","valueSize":1},{"declaration":1322,"isOffset":false,"isSlot":false,"src":"2072:4:24","valueSize":1}],"id":1328,"nodeType":"InlineAssembly","src":"2039:47:24"}]},"documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"1810:87:24","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1330,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:24","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"slot","nameLocation":"1934:4:24","nodeType":"VariableDeclaration","scope":1330,"src":"1926:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:24"},"returnParameters":{"id":1327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"r","nameLocation":"1983:1:24","nodeType":"VariableDeclaration","scope":1330,"src":"1963:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1302_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1325,"nodeType":"UserDefinedTypeName","pathNode":{"id":1324,"name":"BooleanSlot","nameLocations":["1963:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1302,"src":"1963:11:24"},"referencedDeclaration":1302,"src":"1963:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1302_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:24"},"scope":1353,"src":"1902:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1340,"nodeType":"Block","src":"2274:106:24","statements":[{"AST":{"nativeSrc":"2336:38:24","nodeType":"YulBlock","src":"2336:38:24","statements":[{"nativeSrc":"2350:14:24","nodeType":"YulAssignment","src":"2350:14:24","value":{"name":"slot","nativeSrc":"2360:4:24","nodeType":"YulIdentifier","src":"2360:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:24","nodeType":"YulIdentifier","src":"2350:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1337,"isOffset":false,"isSlot":true,"src":"2350:6:24","suffix":"slot","valueSize":1},{"declaration":1333,"isOffset":false,"isSlot":false,"src":"2360:4:24","valueSize":1}],"id":1339,"nodeType":"InlineAssembly","src":"2327:47:24"}]},"documentation":{"id":1331,"nodeType":"StructuredDocumentation","src":"2098:87:24","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1341,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:24","nodeType":"FunctionDefinition","parameters":{"id":1334,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1333,"mutability":"mutable","name":"slot","nameLocation":"2222:4:24","nodeType":"VariableDeclaration","scope":1341,"src":"2214:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1332,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:24"},"returnParameters":{"id":1338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1337,"mutability":"mutable","name":"r","nameLocation":"2271:1:24","nodeType":"VariableDeclaration","scope":1341,"src":"2251:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1305_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1336,"nodeType":"UserDefinedTypeName","pathNode":{"id":1335,"name":"Bytes32Slot","nameLocations":["2251:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1305,"src":"2251:11:24"},"referencedDeclaration":1305,"src":"2251:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1305_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:24"},"scope":1353,"src":"2190:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1351,"nodeType":"Block","src":"2562:106:24","statements":[{"AST":{"nativeSrc":"2624:38:24","nodeType":"YulBlock","src":"2624:38:24","statements":[{"nativeSrc":"2638:14:24","nodeType":"YulAssignment","src":"2638:14:24","value":{"name":"slot","nativeSrc":"2648:4:24","nodeType":"YulIdentifier","src":"2648:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:24","nodeType":"YulIdentifier","src":"2638:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1348,"isOffset":false,"isSlot":true,"src":"2638:6:24","suffix":"slot","valueSize":1},{"declaration":1344,"isOffset":false,"isSlot":false,"src":"2648:4:24","valueSize":1}],"id":1350,"nodeType":"InlineAssembly","src":"2615:47:24"}]},"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"2386:87:24","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1352,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:24","nodeType":"FunctionDefinition","parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"slot","nameLocation":"2510:4:24","nodeType":"VariableDeclaration","scope":1352,"src":"2502:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:24"},"returnParameters":{"id":1349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1348,"mutability":"mutable","name":"r","nameLocation":"2559:1:24","nodeType":"VariableDeclaration","scope":1352,"src":"2539:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1347,"nodeType":"UserDefinedTypeName","pathNode":{"id":1346,"name":"Uint256Slot","nameLocations":["2539:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1308,"src":"2539:11:24"},"referencedDeclaration":1308,"src":"2539:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1308_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:24"},"scope":1353,"src":"2478:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1354,"src":"1279:1391:24","usedErrors":[],"usedEvents":[]}],"src":"105:2566:24"},"id":24},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1855]},"id":1856,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1355,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1356,"nodeType":"StructuredDocumentation","src":"143:658:25","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1855,"linearizedBaseContracts":[1855],"name":"MerkleProof","nameLocation":"810:11:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":1376,"nodeType":"Block","src":"1283:57:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1370,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"1313:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1371,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1364,"src":"1320:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1369,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"1300:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1373,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1362,"src":"1329:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1368,"id":1375,"nodeType":"Return","src":"1293:40:25"}]},"documentation":{"id":1357,"nodeType":"StructuredDocumentation","src":"828:323:25","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1377,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:25","nodeType":"FunctionDefinition","parameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"proof","nameLocation":"1198:5:25","nodeType":"VariableDeclaration","scope":1377,"src":"1181:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1358,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1359,"nodeType":"ArrayTypeName","src":"1181:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"root","nameLocation":"1221:4:25","nodeType":"VariableDeclaration","scope":1377,"src":"1213:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:25","nodeType":"VariableDeclaration","scope":1377,"src":"1235:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1363,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:25"},"returnParameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1377,"src":"1277:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1366,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:25"},"scope":1855,"src":"1156:184:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1397,"nodeType":"Block","src":"1578:65:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1391,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"1616:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1392,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"1623:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1390,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1595:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1394,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"1632:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1389,"id":1396,"nodeType":"Return","src":"1588:48:25"}]},"documentation":{"id":1378,"nodeType":"StructuredDocumentation","src":"1346:90:25","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:25","nodeType":"FunctionDefinition","parameters":{"id":1386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1381,"mutability":"mutable","name":"proof","nameLocation":"1493:5:25","nodeType":"VariableDeclaration","scope":1398,"src":"1474:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1379,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1380,"nodeType":"ArrayTypeName","src":"1474:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1383,"mutability":"mutable","name":"root","nameLocation":"1516:4:25","nodeType":"VariableDeclaration","scope":1398,"src":"1508:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1385,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:25","nodeType":"VariableDeclaration","scope":1398,"src":"1530:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1384,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:25"},"returnParameters":{"id":1389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"1572:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1387,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:25"},"scope":1855,"src":"1441:202:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1437,"nodeType":"Block","src":"2086:198:25","statements":[{"assignments":[1410],"declarations":[{"constant":false,"id":1410,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:25","nodeType":"VariableDeclaration","scope":1437,"src":"2096:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1409,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1412,"initialValue":{"id":1411,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"2119:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:25"},{"body":{"id":1433,"nodeType":"Block","src":"2176:73:25","statements":[{"expression":{"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1424,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2190:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1426,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2215:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1427,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"2229:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1429,"indexExpression":{"id":1428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"2235:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1425,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"2205:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1432,"nodeType":"ExpressionStatement","src":"2190:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1420,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1417,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"2153:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1418,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"2157:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:25","memberName":"length","nodeType":"MemberAccess","src":"2157:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1434,"initializationExpression":{"assignments":[1414],"declarations":[{"constant":false,"id":1414,"mutability":"mutable","name":"i","nameLocation":"2146:1:25","nodeType":"VariableDeclaration","scope":1434,"src":"2138:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1416,"initialValue":{"hexValue":"30","id":1415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:25","subExpression":{"id":1421,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"2171:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1423,"nodeType":"ExpressionStatement","src":"2171:3:25"},"nodeType":"ForStatement","src":"2133:116:25"},{"expression":{"id":1435,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"2265:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1408,"id":1436,"nodeType":"Return","src":"2258:19:25"}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"1649:340:25","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1438,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:25","nodeType":"FunctionDefinition","parameters":{"id":1405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"proof","nameLocation":"2033:5:25","nodeType":"VariableDeclaration","scope":1438,"src":"2016:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1401,"nodeType":"ArrayTypeName","src":"2016:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1404,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:25","nodeType":"VariableDeclaration","scope":1438,"src":"2040:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:25"},"returnParameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1438,"src":"2077:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:25"},"scope":1855,"src":"1994:290:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1477,"nodeType":"Block","src":"2493:198:25","statements":[{"assignments":[1450],"declarations":[{"constant":false,"id":1450,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:25","nodeType":"VariableDeclaration","scope":1477,"src":"2503:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1449,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1452,"initialValue":{"id":1451,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1444,"src":"2526:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:25"},{"body":{"id":1473,"nodeType":"Block","src":"2583:73:25","statements":[{"expression":{"id":1471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1464,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"2597:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1466,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"2622:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1467,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"2636:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1469,"indexExpression":{"id":1468,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2642:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1465,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"2612:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1472,"nodeType":"ExpressionStatement","src":"2597:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1457,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2560:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1458,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"2564:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:25","memberName":"length","nodeType":"MemberAccess","src":"2564:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1474,"initializationExpression":{"assignments":[1454],"declarations":[{"constant":false,"id":1454,"mutability":"mutable","name":"i","nameLocation":"2553:1:25","nodeType":"VariableDeclaration","scope":1474,"src":"2545:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1453,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1456,"initialValue":{"hexValue":"30","id":1455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:25","subExpression":{"id":1461,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1454,"src":"2578:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1463,"nodeType":"ExpressionStatement","src":"2578:3:25"},"nodeType":"ForStatement","src":"2540:116:25"},{"expression":{"id":1475,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1450,"src":"2672:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1448,"id":1476,"nodeType":"Return","src":"2665:19:25"}]},"documentation":{"id":1439,"nodeType":"StructuredDocumentation","src":"2290:96:25","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1478,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:25","nodeType":"FunctionDefinition","parameters":{"id":1445,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"proof","nameLocation":"2440:5:25","nodeType":"VariableDeclaration","scope":1478,"src":"2421:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1440,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1441,"nodeType":"ArrayTypeName","src":"2421:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:25","nodeType":"VariableDeclaration","scope":1478,"src":"2447:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:25"},"returnParameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1478,"src":"2484:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1446,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:25"},"scope":1855,"src":"2391:300:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1503,"nodeType":"Block","src":"3234:76:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1496,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1482,"src":"3269:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1497,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"3276:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1498,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"3288:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1495,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"3251:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1500,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"3299:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1494,"id":1502,"nodeType":"Return","src":"3244:59:25"}]},"documentation":{"id":1479,"nodeType":"StructuredDocumentation","src":"2697:350:25","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:25","nodeType":"FunctionDefinition","parameters":{"id":1491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1482,"mutability":"mutable","name":"proof","nameLocation":"3104:5:25","nodeType":"VariableDeclaration","scope":1504,"src":"3087:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1481,"nodeType":"ArrayTypeName","src":"3087:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:25","nodeType":"VariableDeclaration","scope":1504,"src":"3119:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1483,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1484,"nodeType":"ArrayTypeName","src":"3119:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1487,"mutability":"mutable","name":"root","nameLocation":"3161:4:25","nodeType":"VariableDeclaration","scope":1504,"src":"3153:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:25","nodeType":"VariableDeclaration","scope":1504,"src":"3175:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1489,"nodeType":"ArrayTypeName","src":"3175:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:25"},"returnParameters":{"id":1494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"3228:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1492,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:25"},"scope":1855,"src":"3052:258:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1529,"nodeType":"Block","src":"3715:84:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1522,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"3758:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1523,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1511,"src":"3765:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1524,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"3777:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1521,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1820,"src":"3732:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1526,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1513,"src":"3788:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1520,"id":1528,"nodeType":"Return","src":"3725:67:25"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"3316:200:25","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1530,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:25","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"proof","nameLocation":"3583:5:25","nodeType":"VariableDeclaration","scope":1530,"src":"3564:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1507,"nodeType":"ArrayTypeName","src":"3564:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1511,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:25","nodeType":"VariableDeclaration","scope":1530,"src":"3598:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1509,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1510,"nodeType":"ArrayTypeName","src":"3598:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1513,"mutability":"mutable","name":"root","nameLocation":"3642:4:25","nodeType":"VariableDeclaration","scope":1530,"src":"3634:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1512,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1516,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:25","nodeType":"VariableDeclaration","scope":1530,"src":"3656:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1514,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1515,"nodeType":"ArrayTypeName","src":"3656:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:25"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1530,"src":"3709:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1518,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:25"},"scope":1855,"src":"3521:278:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1674,"nodeType":"Block","src":"4753:1860:25","statements":[{"assignments":[1546],"declarations":[{"constant":false,"id":1546,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:25","nodeType":"VariableDeclaration","scope":1674,"src":"5136:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1549,"initialValue":{"expression":{"id":1547,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"5156:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:25","memberName":"length","nodeType":"MemberAccess","src":"5156:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:25"},{"assignments":[1551],"declarations":[{"constant":false,"id":1551,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:25","nodeType":"VariableDeclaration","scope":1674,"src":"5179:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1550,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1554,"initialValue":{"expression":{"id":1552,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"5201:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:25","memberName":"length","nodeType":"MemberAccess","src":"5201:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1556,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"5270:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1557,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"5282:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:25","memberName":"length","nodeType":"MemberAccess","src":"5282:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1560,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1562,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"5302:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1555,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1566,"nodeType":"ExpressionStatement","src":"5262:87:25"},{"assignments":[1571],"declarations":[{"constant":false,"id":1571,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:25","nodeType":"VariableDeclaration","scope":1674,"src":"5594:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1570,"nodeType":"ArrayTypeName","src":"5594:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1577,"initialValue":{"arguments":[{"id":1575,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"5634:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1572,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1573,"nodeType":"ArrayTypeName","src":"5624:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:25"},{"assignments":[1579],"declarations":[{"constant":false,"id":1579,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:25","nodeType":"VariableDeclaration","scope":1674,"src":"5656:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1578,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1581,"initialValue":{"hexValue":"30","id":1580,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:25"},{"assignments":[1583],"declarations":[{"constant":false,"id":1583,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:25","nodeType":"VariableDeclaration","scope":1674,"src":"5685:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1585,"initialValue":{"hexValue":"30","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:25"},{"assignments":[1587],"declarations":[{"constant":false,"id":1587,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:25","nodeType":"VariableDeclaration","scope":1674,"src":"5714:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1589,"initialValue":{"hexValue":"30","id":1588,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:25"},{"body":{"id":1647,"nodeType":"Block","src":"6151:258:25","statements":[{"assignments":[1601],"declarations":[{"constant":false,"id":1601,"mutability":"mutable","name":"a","nameLocation":"6173:1:25","nodeType":"VariableDeclaration","scope":1647,"src":"6165:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1614,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1602,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6177:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1603,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"6187:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1609,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6219:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1612,"indexExpression":{"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:25","subExpression":{"id":1610,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"6226:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:25","trueExpression":{"baseExpression":{"id":1605,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"6199:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1608,"indexExpression":{"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:25","subExpression":{"id":1606,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6206:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:25"},{"assignments":[1616],"declarations":[{"constant":false,"id":1616,"mutability":"mutable","name":"b","nameLocation":"6258:1:25","nodeType":"VariableDeclaration","scope":1647,"src":"6250:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1637,"initialValue":{"condition":{"baseExpression":{"id":1617,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1537,"src":"6262:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1619,"indexExpression":{"id":1618,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6273:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1632,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"6340:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1635,"indexExpression":{"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:25","subExpression":{"id":1633,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1587,"src":"6346:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:25","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1620,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6278:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1621,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"6288:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1627,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6320:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1630,"indexExpression":{"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:25","subExpression":{"id":1628,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"6327:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:25","trueExpression":{"baseExpression":{"id":1623,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"6300:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1626,"indexExpression":{"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:25","subExpression":{"id":1624,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6307:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:25"},{"expression":{"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1638,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6371:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1640,"indexExpression":{"id":1639,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6378:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1642,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"6393:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1643,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"6396:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1641,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"6383:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1646,"nodeType":"ExpressionStatement","src":"6371:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1594,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6129:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1595,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"6133:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1648,"initializationExpression":{"assignments":[1591],"declarations":[{"constant":false,"id":1591,"mutability":"mutable","name":"i","nameLocation":"6122:1:25","nodeType":"VariableDeclaration","scope":1648,"src":"6114:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1593,"initialValue":{"hexValue":"30","id":1592,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:25","subExpression":{"id":1597,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6146:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1599,"nodeType":"ExpressionStatement","src":"6146:3:25"},"nodeType":"ForStatement","src":"6109:300:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1649,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"6423:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1659,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1546,"src":"6505:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1671,"nodeType":"Block","src":"6567:40:25","statements":[{"expression":{"baseExpression":{"id":1667,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1534,"src":"6588:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1669,"indexExpression":{"hexValue":"30","id":1668,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1544,"id":1670,"nodeType":"Return","src":"6581:15:25"}]},"id":1672,"nodeType":"IfStatement","src":"6501:106:25","trueBody":{"id":1666,"nodeType":"Block","src":"6520:41:25","statements":[{"expression":{"baseExpression":{"id":1662,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1540,"src":"6541:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1664,"indexExpression":{"hexValue":"30","id":1663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1544,"id":1665,"nodeType":"Return","src":"6534:16:25"}]}},"id":1673,"nodeType":"IfStatement","src":"6419:188:25","trueBody":{"id":1658,"nodeType":"Block","src":"6440:55:25","statements":[{"expression":{"baseExpression":{"id":1652,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1571,"src":"6461:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1656,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1653,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1551,"src":"6468:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1544,"id":1657,"nodeType":"Return","src":"6454:30:25"}]}}]},"documentation":{"id":1531,"nodeType":"StructuredDocumentation","src":"3805:768:25","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1675,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:25","nodeType":"FunctionDefinition","parameters":{"id":1541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1534,"mutability":"mutable","name":"proof","nameLocation":"4631:5:25","nodeType":"VariableDeclaration","scope":1675,"src":"4614:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1532,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1533,"nodeType":"ArrayTypeName","src":"4614:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1537,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:25","nodeType":"VariableDeclaration","scope":1675,"src":"4646:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1535,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1536,"nodeType":"ArrayTypeName","src":"4646:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1540,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:25","nodeType":"VariableDeclaration","scope":1675,"src":"4680:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1539,"nodeType":"ArrayTypeName","src":"4680:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:25"},"returnParameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1543,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:25","nodeType":"VariableDeclaration","scope":1675,"src":"4733:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1542,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:25"},"scope":1855,"src":"4578:2035:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"7013:1860:25","statements":[{"assignments":[1691],"declarations":[{"constant":false,"id":1691,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:25","nodeType":"VariableDeclaration","scope":1819,"src":"7396:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1694,"initialValue":{"expression":{"id":1692,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"7416:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:25","memberName":"length","nodeType":"MemberAccess","src":"7416:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:25"},{"assignments":[1696],"declarations":[{"constant":false,"id":1696,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:25","nodeType":"VariableDeclaration","scope":1819,"src":"7439:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1699,"initialValue":{"expression":{"id":1697,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"7461:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:25","memberName":"length","nodeType":"MemberAccess","src":"7461:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1701,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"7530:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1702,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"7542:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:25","memberName":"length","nodeType":"MemberAccess","src":"7542:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1707,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"7562:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1700,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1711,"nodeType":"ExpressionStatement","src":"7522:87:25"},{"assignments":[1716],"declarations":[{"constant":false,"id":1716,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:25","nodeType":"VariableDeclaration","scope":1819,"src":"7854:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1714,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1715,"nodeType":"ArrayTypeName","src":"7854:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1722,"initialValue":{"arguments":[{"id":1720,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"7894:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1718,"nodeType":"ArrayTypeName","src":"7884:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:25"},{"assignments":[1724],"declarations":[{"constant":false,"id":1724,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:25","nodeType":"VariableDeclaration","scope":1819,"src":"7916:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1723,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1726,"initialValue":{"hexValue":"30","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:25"},{"assignments":[1728],"declarations":[{"constant":false,"id":1728,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:25","nodeType":"VariableDeclaration","scope":1819,"src":"7945:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1727,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1730,"initialValue":{"hexValue":"30","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:25"},{"assignments":[1732],"declarations":[{"constant":false,"id":1732,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:25","nodeType":"VariableDeclaration","scope":1819,"src":"7974:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1731,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1734,"initialValue":{"hexValue":"30","id":1733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:25"},{"body":{"id":1792,"nodeType":"Block","src":"8411:258:25","statements":[{"assignments":[1746],"declarations":[{"constant":false,"id":1746,"mutability":"mutable","name":"a","nameLocation":"8433:1:25","nodeType":"VariableDeclaration","scope":1792,"src":"8425:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1745,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1759,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1747,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8437:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1748,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8447:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1754,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"8479:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1757,"indexExpression":{"id":1756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:25","subExpression":{"id":1755,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"8486:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:25","trueExpression":{"baseExpression":{"id":1750,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"8459:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1753,"indexExpression":{"id":1752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:25","subExpression":{"id":1751,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8466:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:25"},{"assignments":[1761],"declarations":[{"constant":false,"id":1761,"mutability":"mutable","name":"b","nameLocation":"8518:1:25","nodeType":"VariableDeclaration","scope":1792,"src":"8510:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1760,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1782,"initialValue":{"condition":{"baseExpression":{"id":1762,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1682,"src":"8522:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1764,"indexExpression":{"id":1763,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8533:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1777,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"8600:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1780,"indexExpression":{"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:25","subExpression":{"id":1778,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"8606:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:25","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1765,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8538:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1766,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8548:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1772,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"8580:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1775,"indexExpression":{"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:25","subExpression":{"id":1773,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1728,"src":"8587:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:25","trueExpression":{"baseExpression":{"id":1768,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"8560:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1771,"indexExpression":{"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:25","subExpression":{"id":1769,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8567:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:25"},{"expression":{"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1783,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"8631:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1785,"indexExpression":{"id":1784,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8638:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1787,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"8653:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1788,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"8656:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1786,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"8643:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1791,"nodeType":"ExpressionStatement","src":"8631:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1739,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8389:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1740,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"8393:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1793,"initializationExpression":{"assignments":[1736],"declarations":[{"constant":false,"id":1736,"mutability":"mutable","name":"i","nameLocation":"8382:1:25","nodeType":"VariableDeclaration","scope":1793,"src":"8374:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1735,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1738,"initialValue":{"hexValue":"30","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:25","subExpression":{"id":1742,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8406:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"nodeType":"ExpressionStatement","src":"8406:3:25"},"nodeType":"ForStatement","src":"8369:300:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1794,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"8683:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1804,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8765:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1816,"nodeType":"Block","src":"8827:40:25","statements":[{"expression":{"baseExpression":{"id":1812,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1679,"src":"8848:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1814,"indexExpression":{"hexValue":"30","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1689,"id":1815,"nodeType":"Return","src":"8841:15:25"}]},"id":1817,"nodeType":"IfStatement","src":"8761:106:25","trueBody":{"id":1811,"nodeType":"Block","src":"8780:41:25","statements":[{"expression":{"baseExpression":{"id":1807,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1685,"src":"8801:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1809,"indexExpression":{"hexValue":"30","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1689,"id":1810,"nodeType":"Return","src":"8794:16:25"}]}},"id":1818,"nodeType":"IfStatement","src":"8679:188:25","trueBody":{"id":1803,"nodeType":"Block","src":"8700:55:25","statements":[{"expression":{"baseExpression":{"id":1797,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"8721:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1801,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1798,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"8728:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1689,"id":1802,"nodeType":"Return","src":"8714:30:25"}]}}]},"documentation":{"id":1676,"nodeType":"StructuredDocumentation","src":"6619:202:25","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:25","nodeType":"FunctionDefinition","parameters":{"id":1686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1679,"mutability":"mutable","name":"proof","nameLocation":"6889:5:25","nodeType":"VariableDeclaration","scope":1820,"src":"6870:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1677,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1678,"nodeType":"ArrayTypeName","src":"6870:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1682,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:25","nodeType":"VariableDeclaration","scope":1820,"src":"6904:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1680,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1681,"nodeType":"ArrayTypeName","src":"6904:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1685,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:25","nodeType":"VariableDeclaration","scope":1820,"src":"6940:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1683,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1684,"nodeType":"ArrayTypeName","src":"6940:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:25"},"returnParameters":{"id":1689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1688,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:25","nodeType":"VariableDeclaration","scope":1820,"src":"6993:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1687,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:25"},"scope":1855,"src":"6826:2047:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1842,"nodeType":"Block","src":"8951:75:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1829,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"8968:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1830,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"8972:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1837,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"9014:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1838,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"9017:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1836,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"8999:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:25","trueExpression":{"arguments":[{"id":1833,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1822,"src":"8991:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1834,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"8994:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1832,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"8976:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1828,"id":1841,"nodeType":"Return","src":"8961:58:25"}]},"id":1843,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:25","nodeType":"FunctionDefinition","parameters":{"id":1825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1822,"mutability":"mutable","name":"a","nameLocation":"8906:1:25","nodeType":"VariableDeclaration","scope":1843,"src":"8898:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1821,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1824,"mutability":"mutable","name":"b","nameLocation":"8917:1:25","nodeType":"VariableDeclaration","scope":1843,"src":"8909:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:25"},"returnParameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1843,"src":"8942:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:25"},"scope":1855,"src":"8879:147:25","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1853,"nodeType":"Block","src":"9115:178:25","statements":[{"AST":{"nativeSrc":"9177:110:25","nodeType":"YulBlock","src":"9177:110:25","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:25","nodeType":"YulLiteral","src":"9198:4:25","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:25","nodeType":"YulIdentifier","src":"9204:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:25","nodeType":"YulIdentifier","src":"9191:6:25"},"nativeSrc":"9191:15:25","nodeType":"YulFunctionCall","src":"9191:15:25"},"nativeSrc":"9191:15:25","nodeType":"YulExpressionStatement","src":"9191:15:25"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:25","nodeType":"YulLiteral","src":"9226:4:25","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:25","nodeType":"YulIdentifier","src":"9232:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:25","nodeType":"YulIdentifier","src":"9219:6:25"},"nativeSrc":"9219:15:25","nodeType":"YulFunctionCall","src":"9219:15:25"},"nativeSrc":"9219:15:25","nodeType":"YulExpressionStatement","src":"9219:15:25"},{"nativeSrc":"9247:30:25","nodeType":"YulAssignment","src":"9247:30:25","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:25","nodeType":"YulLiteral","src":"9266:4:25","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:25","nodeType":"YulLiteral","src":"9272:4:25","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:25","nodeType":"YulIdentifier","src":"9256:9:25"},"nativeSrc":"9256:21:25","nodeType":"YulFunctionCall","src":"9256:21:25"},"variableNames":[{"name":"value","nativeSrc":"9247:5:25","nodeType":"YulIdentifier","src":"9247:5:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1845,"isOffset":false,"isSlot":false,"src":"9204:1:25","valueSize":1},{"declaration":1847,"isOffset":false,"isSlot":false,"src":"9232:1:25","valueSize":1},{"declaration":1850,"isOffset":false,"isSlot":false,"src":"9247:5:25","valueSize":1}],"id":1852,"nodeType":"InlineAssembly","src":"9168:119:25"}]},"id":1854,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:25","nodeType":"FunctionDefinition","parameters":{"id":1848,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1845,"mutability":"mutable","name":"a","nameLocation":"9064:1:25","nodeType":"VariableDeclaration","scope":1854,"src":"9056:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1847,"mutability":"mutable","name":"b","nameLocation":"9075:1:25","nodeType":"VariableDeclaration","scope":1854,"src":"9067:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1846,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:25"},"returnParameters":{"id":1851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"value","nameLocation":"9108:5:25","nodeType":"VariableDeclaration","scope":1854,"src":"9100:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:25"},"scope":1855,"src":"9032:261:25","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1856,"src":"802:8493:25","usedErrors":[],"usedEvents":[]}],"src":"118:9178:25"},"id":25},"contracts/burn/OrbsBurnPool.sol":{"ast":{"absolutePath":"contracts/burn/OrbsBurnPool.sol","exportedSymbols":{"ERC1155TokenReceiver":[847],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155Burnable":[873],"IForwarderRegistry":[727],"MerkleProof":[1855],"OrbsBurnPool":[2707]},"id":2708,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1857,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":1859,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":848,"src":"57:114:26","symbolAliases":[{"foreign":{"id":1858,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"65:20:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":1861,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":874,"src":"172:117:26","symbolAliases":[{"foreign":{"id":1860,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"180:16:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":1863,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":582,"src":"290:115:26","symbolAliases":[{"foreign":{"id":1862,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"298:24:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":1865,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":702,"src":"406:128:26","symbolAliases":[{"foreign":{"id":1864,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"414:28:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1867,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":728,"src":"535:114:26","symbolAliases":[{"foreign":{"id":1866,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"543:18:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1869,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2708,"sourceUnit":1856,"src":"650:87:26","symbolAliases":[{"foreign":{"id":1868,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"658:11:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1871,"name":"ForwarderRegistryContext","nameLocations":["914:24:26"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"914:24:26"},"id":1872,"nodeType":"InheritanceSpecifier","src":"914:24:26"},{"baseName":{"id":1873,"name":"ERC1155TokenReceiver","nameLocations":["940:20:26"],"nodeType":"IdentifierPath","referencedDeclaration":847,"src":"940:20:26"},"id":1874,"nodeType":"InheritanceSpecifier","src":"940:20:26"}],"canonicalName":"OrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":1870,"nodeType":"StructuredDocumentation","src":"739:149:26","text":" @title OrbsBurnPool Contract\n @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned."},"fullyImplemented":true,"id":2707,"linearizedBaseContracts":[2707,847,414,431,941,581,713,701],"name":"OrbsBurnPool","nameLocation":"898:12:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1878,"libraryName":{"id":1875,"name":"MerkleProof","nameLocations":["973:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"973:11:26"},"nodeType":"UsingForDirective","src":"967:32:26","typeName":{"baseType":{"id":1876,"name":"bytes32","nodeType":"ElementaryTypeName","src":"989:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1877,"nodeType":"ArrayTypeName","src":"989:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":true,"documentation":{"id":1879,"nodeType":"StructuredDocumentation","src":"1005:47:26","text":"@notice The denominator for the multiplier."},"id":1882,"mutability":"constant","name":"_DENOMINATOR","nameLocation":"1083:12:26","nodeType":"VariableDeclaration","scope":2707,"src":"1057:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1880,"name":"uint256","nodeType":"ElementaryTypeName","src":"1057:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1098:6:26","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"internal"},{"constant":true,"documentation":{"id":1883,"nodeType":"StructuredDocumentation","src":"1111:65:26","text":"@notice The token ID of RoC for setting the token multiplier."},"functionSelector":"1de0e40b","id":1886,"mutability":"constant","name":"MISSING_ORB_TOKEN_ID","nameLocation":"1205:20:26","nodeType":"VariableDeclaration","scope":2707,"src":"1181:48:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1884,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1885,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"documentation":{"id":1887,"nodeType":"StructuredDocumentation","src":"1236:50:26","text":"@notice The token weights for calculating Ash."},"functionSelector":"0277640e","id":1890,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_1","nameLocation":"1315:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1291:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1888,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1337:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"424ab4f7","id":1893,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_2","nameLocation":"1368:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1344:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1891,"name":"uint256","nodeType":"ElementaryTypeName","src":"1344:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1892,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:1:26","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"aa918fd5","id":1896,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_3","nameLocation":"1421:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1397:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1397:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1443:1:26","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"0455645a","id":1899,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_4","nameLocation":"1474:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1450:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":1898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1496:1:26","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":true,"functionSelector":"f95d1016","id":1902,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_5","nameLocation":"1527:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1503:47:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1900,"name":"uint256","nodeType":"ElementaryTypeName","src":"1503:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39","id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1549:1:26","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"visibility":"public"},{"constant":true,"functionSelector":"3838a201","id":1905,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_6","nameLocation":"1580:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1556:48:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1556:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":1904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:2:26","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"c131754e","id":1908,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_7","nameLocation":"1634:19:26","nodeType":"VariableDeclaration","scope":2707,"src":"1610:48:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1906,"name":"uint256","nodeType":"ElementaryTypeName","src":"1610:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3136","id":1907,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1656:2:26","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"public"},{"constant":true,"documentation":{"id":1909,"nodeType":"StructuredDocumentation","src":"1665:43:26","text":"@notice The Riddle Of Chaos multiplier."},"functionSelector":"55f5b0a8","id":1912,"mutability":"constant","name":"ROC_MULTIPLIER","nameLocation":"1737:14:26","nodeType":"VariableDeclaration","scope":2707,"src":"1713:42:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1910,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1911,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1754:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":false,"documentation":{"id":1913,"nodeType":"StructuredDocumentation","src":"1762:72:26","text":"@notice The IERC1155Burnable erc1155 contracts burn to generate ASH."},"functionSelector":"28a979cf","id":1916,"mutability":"immutable","name":"ORB_OF_POWER","nameLocation":"1873:12:26","nodeType":"VariableDeclaration","scope":2707,"src":"1839:46:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":1915,"nodeType":"UserDefinedTypeName","pathNode":{"id":1914,"name":"IERC1155Burnable","nameLocations":["1839:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"1839:16:26"},"referencedDeclaration":873,"src":"1839:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1917,"nodeType":"StructuredDocumentation","src":"1892:75:26","text":"@notice The IERC1155 erc1155 contract for setting the token multiplier."},"functionSelector":"cd18a34f","id":1920,"mutability":"immutable","name":"MISSING_ORB","nameLocation":"2006:11:26","nodeType":"VariableDeclaration","scope":2707,"src":"1972:45:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":1919,"nodeType":"UserDefinedTypeName","pathNode":{"id":1918,"name":"IERC1155Burnable","nameLocations":["1972:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"1972:16:26"},"referencedDeclaration":873,"src":"1972:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1921,"nodeType":"StructuredDocumentation","src":"2024:45:26","text":"@notice The initial time of the contract."},"functionSelector":"491bde66","id":1923,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"2099:12:26","nodeType":"VariableDeclaration","scope":2707,"src":"2074:37:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1922,"name":"uint256","nodeType":"ElementaryTypeName","src":"2074:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1924,"nodeType":"StructuredDocumentation","src":"2118:39:26","text":"@notice The duration of each cycle."},"functionSelector":"cd421fbf","id":1926,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"2187:14:26","nodeType":"VariableDeclaration","scope":2707,"src":"2162:39:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1927,"nodeType":"StructuredDocumentation","src":"2208:30:26","text":"@notice The maximum cycle."},"functionSelector":"043063bc","id":1929,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"2268:9:26","nodeType":"VariableDeclaration","scope":2707,"src":"2243:34:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"2243:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1930,"nodeType":"StructuredDocumentation","src":"2284:61:26","text":"@notice The Merkle root for setting the puzzleMultiplier."},"functionSelector":"51e75e8b","id":1932,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"2375:11:26","nodeType":"VariableDeclaration","scope":2707,"src":"2350:36:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1931,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2350:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":1933,"nodeType":"StructuredDocumentation","src":"2393:60:26","text":"@notice The total amount of ASH generated in each cycle."},"functionSelector":"ab504e73","id":1937,"mutability":"mutable","name":"totalAshPerCycle","nameLocation":"2493:16:26","nodeType":"VariableDeclaration","scope":2707,"src":"2458:51:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1936,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1934,"name":"uint256","nodeType":"ElementaryTypeName","src":"2466:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2458:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1935,"name":"uint256","nodeType":"ElementaryTypeName","src":"2477:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"2516:73:26","text":"@notice The total amount of ASH generated by each user in each cycle."},"functionSelector":"4dac1c2b","id":1944,"mutability":"mutable","name":"userAshPerCycle","nameLocation":"2649:15:26","nodeType":"VariableDeclaration","scope":2707,"src":"2594:70:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":1943,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1939,"name":"uint256","nodeType":"ElementaryTypeName","src":"2602:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2594:47:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1942,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"2621:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2613:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1941,"name":"uint256","nodeType":"ElementaryTypeName","src":"2632:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"2671:135:26","text":"@notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"functionSelector":"12828b7f","id":1949,"mutability":"mutable","name":"orbMultipliers","nameLocation":"2846:14:26","nodeType":"VariableDeclaration","scope":2707,"src":"2811:49:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1948,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1946,"name":"address","nodeType":"ElementaryTypeName","src":"2819:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2811:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1947,"name":"uint256","nodeType":"ElementaryTypeName","src":"2830:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"2867:49:26","text":"@notice Event emitted when ASH are generated."},"eventSelector":"6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b","id":1968,"name":"GenerateAsh","nameLocation":"2927:11:26","nodeType":"EventDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1952,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"2964:6:26","nodeType":"VariableDeclaration","scope":1968,"src":"2948:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1951,"name":"address","nodeType":"ElementaryTypeName","src":"2948:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1954,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"2996:5:26","nodeType":"VariableDeclaration","scope":1968,"src":"2980:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1953,"name":"uint256","nodeType":"ElementaryTypeName","src":"2980:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1957,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"3021:3:26","nodeType":"VariableDeclaration","scope":1968,"src":"3011:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1955,"name":"uint256","nodeType":"ElementaryTypeName","src":"3011:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1956,"nodeType":"ArrayTypeName","src":"3011:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1960,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"3044:6:26","nodeType":"VariableDeclaration","scope":1968,"src":"3034:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1958,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1959,"nodeType":"ArrayTypeName","src":"3034:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1962,"indexed":false,"mutability":"mutable","name":"ash","nameLocation":"3068:3:26","nodeType":"VariableDeclaration","scope":1968,"src":"3060:11:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1961,"name":"uint256","nodeType":"ElementaryTypeName","src":"3060:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1964,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"3089:8:26","nodeType":"VariableDeclaration","scope":1968,"src":"3081:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1963,"name":"uint256","nodeType":"ElementaryTypeName","src":"3081:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1966,"indexed":false,"mutability":"mutable","name":"orbMultiplier","nameLocation":"3115:13:26","nodeType":"VariableDeclaration","scope":1968,"src":"3107:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2938:196:26"},"src":"2921:214:26"},{"anonymous":false,"documentation":{"id":1969,"nodeType":"StructuredDocumentation","src":"3141:62:26","text":"@notice Event emitted when the multiplier info is updated."},"eventSelector":"528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433","id":1977,"name":"UpdateOrbMultiplier","nameLocation":"3214:19:26","nodeType":"EventDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1971,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3250:9:26","nodeType":"VariableDeclaration","scope":1977,"src":"3234:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1970,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1973,"indexed":false,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"3269:16:26","nodeType":"VariableDeclaration","scope":1977,"src":"3261:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1972,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1975,"indexed":false,"mutability":"mutable","name":"updatedOrbMultiplier","nameLocation":"3295:20:26","nodeType":"VariableDeclaration","scope":1977,"src":"3287:28:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"3287:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3233:83:26"},"src":"3208:109:26"},{"documentation":{"id":1978,"nodeType":"StructuredDocumentation","src":"3323:54:26","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":1984,"name":"InvalidTokenId","nameLocation":"3388:14:26","nodeType":"ErrorDefinition","parameters":{"id":1983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1980,"mutability":"mutable","name":"token","nameLocation":"3411:5:26","nodeType":"VariableDeclaration","scope":1984,"src":"3403:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"3403:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"tokenId","nameLocation":"3426:7:26","nodeType":"VariableDeclaration","scope":1984,"src":"3418:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"3418:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3402:32:26"},"src":"3382:53:26"},{"documentation":{"id":1985,"nodeType":"StructuredDocumentation","src":"3441:56:26","text":"@notice Error thrown when the token is not approved."},"errorSelector":"73306803","id":1989,"name":"InvalidTokenAddress","nameLocation":"3508:19:26","nodeType":"ErrorDefinition","parameters":{"id":1988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1987,"mutability":"mutable","name":"token","nameLocation":"3536:5:26","nodeType":"VariableDeclaration","scope":1989,"src":"3528:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1986,"name":"address","nodeType":"ElementaryTypeName","src":"3528:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3527:15:26"},"src":"3502:41:26"},{"documentation":{"id":1990,"nodeType":"StructuredDocumentation","src":"3549:58:26","text":"@notice Error thrown when the token amount is invalid."},"errorSelector":"e1f366e9","id":1998,"name":"InvalidTokenValue","nameLocation":"3618:17:26","nodeType":"ErrorDefinition","parameters":{"id":1997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1992,"mutability":"mutable","name":"token","nameLocation":"3644:5:26","nodeType":"VariableDeclaration","scope":1998,"src":"3636:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1991,"name":"address","nodeType":"ElementaryTypeName","src":"3636:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1994,"mutability":"mutable","name":"tokenId","nameLocation":"3659:7:26","nodeType":"VariableDeclaration","scope":1998,"src":"3651:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"3651:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1996,"mutability":"mutable","name":"value","nameLocation":"3676:5:26","nodeType":"VariableDeclaration","scope":1998,"src":"3668:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1995,"name":"uint256","nodeType":"ElementaryTypeName","src":"3668:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3635:47:26"},"src":"3612:71:26"},{"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"3689:51:26","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":2003,"name":"InvalidCycle","nameLocation":"3751:12:26","nodeType":"ErrorDefinition","parameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2001,"mutability":"mutable","name":"cycle","nameLocation":"3772:5:26","nodeType":"VariableDeclaration","scope":2003,"src":"3764:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3763:15:26"},"src":"3745:34:26"},{"documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"3785:81:26","text":"@notice Error thrown when the wallet already has the ROC multiplier been set."},"errorSelector":"383b5493","id":2008,"name":"AlreadySetROCMultiplier","nameLocation":"3877:23:26","nodeType":"ErrorDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"wallet","nameLocation":"3909:6:26","nodeType":"VariableDeclaration","scope":2008,"src":"3901:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"3901:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3900:16:26"},"src":"3871:46:26"},{"documentation":{"id":2009,"nodeType":"StructuredDocumentation","src":"3923:51:26","text":"@notice Error thrown when the proof is invalid."},"errorSelector":"adbd6512","id":2015,"name":"InvalidProof","nameLocation":"3985:12:26","nodeType":"ErrorDefinition","parameters":{"id":2014,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2011,"mutability":"mutable","name":"recipient","nameLocation":"4006:9:26","nodeType":"VariableDeclaration","scope":2015,"src":"3998:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2010,"name":"address","nodeType":"ElementaryTypeName","src":"3998:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"4025:29:26","nodeType":"VariableDeclaration","scope":2015,"src":"4017:37:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"4017:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3997:58:26"},"src":"3979:77:26"},{"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"4062:60:26","text":"@notice Error thrown when the cycle duration is invalid."},"errorSelector":"b870efbd","id":2018,"name":"ZeroCycleDuration","nameLocation":"4133:17:26","nodeType":"ErrorDefinition","parameters":{"id":2017,"nodeType":"ParameterList","parameters":[],"src":"4150:2:26"},"src":"4127:26:26"},{"documentation":{"id":2019,"nodeType":"StructuredDocumentation","src":"4159:51:26","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"fcbcab36","id":2021,"name":"ZeroMaxCycle","nameLocation":"4221:12:26","nodeType":"ErrorDefinition","parameters":{"id":2020,"nodeType":"ParameterList","parameters":[],"src":"4233:2:26"},"src":"4215:21:26"},{"body":{"id":2085,"nodeType":"Block","src":"5202:376:26","statements":[{"expression":{"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2045,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"5212:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2046,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2024,"src":"5227:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2048,"nodeType":"ExpressionStatement","src":"5212:26:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2049,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"5253:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5270:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5253:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2056,"nodeType":"IfStatement","src":"5249:75:26","trueBody":{"id":2055,"nodeType":"Block","src":"5273:51:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2052,"name":"ZeroCycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"5294:17:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5294:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2054,"nodeType":"RevertStatement","src":"5287:26:26"}]}},{"expression":{"id":2059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2057,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"5333:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2058,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2026,"src":"5350:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5333:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2060,"nodeType":"ExpressionStatement","src":"5333:30:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2061,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"5378:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2062,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5390:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5378:13:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2068,"nodeType":"IfStatement","src":"5374:65:26","trueBody":{"id":2067,"nodeType":"Block","src":"5393:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2064,"name":"ZeroMaxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"5414:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5414:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2066,"nodeType":"RevertStatement","src":"5407:21:26"}]}},{"expression":{"id":2071,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2069,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"5448:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2070,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2028,"src":"5460:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5448:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2072,"nodeType":"ExpressionStatement","src":"5448:20:26"},{"expression":{"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2073,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"5478:11:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2074,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"5492:10:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5478:24:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2076,"nodeType":"ExpressionStatement","src":"5478:24:26"},{"expression":{"id":2079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2077,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"5512:12:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2078,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"5527:10:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"src":"5512:25:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"id":2080,"nodeType":"ExpressionStatement","src":"5512:25:26"},{"expression":{"id":2083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2081,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"5547:11:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2082,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"5561:10:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"src":"5547:24:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"id":2084,"nodeType":"ExpressionStatement","src":"5547:24:26"}]},"documentation":{"id":2022,"nodeType":"StructuredDocumentation","src":"4242:659:26","text":" @notice Constructor for the OrbsBurnPool contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n @param forwarderRegistry The forwarder registry contract.\n @dev Throws if the cycle duration is zero.\n @dev Throws if the max cycle is zero."},"id":2086,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2042,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2039,"src":"5183:17:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2043,"kind":"baseConstructorSpecifier","modifierName":{"id":2041,"name":"ForwarderRegistryContext","nameLocations":["5158:24:26"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"5158:24:26"},"nodeType":"ModifierInvocation","src":"5158:43:26"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"initialTime","nameLocation":"4935:11:26","nodeType":"VariableDeclaration","scope":2086,"src":"4927:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"4927:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2026,"mutability":"mutable","name":"cycleDuration","nameLocation":"4964:13:26","nodeType":"VariableDeclaration","scope":2086,"src":"4956:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2025,"name":"uint256","nodeType":"ElementaryTypeName","src":"4956:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2028,"mutability":"mutable","name":"maxCycle","nameLocation":"4995:8:26","nodeType":"VariableDeclaration","scope":2086,"src":"4987:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2027,"name":"uint256","nodeType":"ElementaryTypeName","src":"4987:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2030,"mutability":"mutable","name":"merkleRoot","nameLocation":"5021:10:26","nodeType":"VariableDeclaration","scope":2086,"src":"5013:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2029,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5013:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2033,"mutability":"mutable","name":"orbOfPower","nameLocation":"5058:10:26","nodeType":"VariableDeclaration","scope":2086,"src":"5041:27:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":2032,"nodeType":"UserDefinedTypeName","pathNode":{"id":2031,"name":"IERC1155Burnable","nameLocations":["5041:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"5041:16:26"},"referencedDeclaration":873,"src":"5041:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":2036,"mutability":"mutable","name":"missingOrb","nameLocation":"5095:10:26","nodeType":"VariableDeclaration","scope":2086,"src":"5078:27:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":2035,"nodeType":"UserDefinedTypeName","pathNode":{"id":2034,"name":"IERC1155Burnable","nameLocations":["5078:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"5078:16:26"},"referencedDeclaration":873,"src":"5078:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":2039,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"5134:17:26","nodeType":"VariableDeclaration","scope":2086,"src":"5115:36:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2038,"nodeType":"UserDefinedTypeName","pathNode":{"id":2037,"name":"IForwarderRegistry","nameLocations":["5115:18:26"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"5115:18:26"},"referencedDeclaration":727,"src":"5115:18:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"4917:240:26"},"returnParameters":{"id":2044,"nodeType":"ParameterList","parameters":[],"src":"5202:0:26"},"scope":2707,"src":"4906:672:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652],"body":{"id":2098,"nodeType":"Block","src":"5734:65:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2094,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5751:28:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5780:10:26","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"5751:39:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5751:41:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2093,"id":2097,"nodeType":"Return","src":"5744:48:26"}]},"documentation":{"id":2087,"nodeType":"StructuredDocumentation","src":"5584:44:26","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2099,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"5642:10:26","nodeType":"FunctionDefinition","overrides":{"id":2090,"nodeType":"OverrideSpecifier","overrides":[{"id":2089,"name":"ForwarderRegistryContextBase","nameLocations":["5686:28:26"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"5686:28:26"}],"src":"5677:38:26"},"parameters":{"id":2088,"nodeType":"ParameterList","parameters":[],"src":"5652:2:26"},"returnParameters":{"id":2093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2092,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2099,"src":"5725:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2091,"name":"address","nodeType":"ElementaryTypeName","src":"5725:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5724:9:26"},"scope":2707,"src":"5633:166:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700],"body":{"id":2111,"nodeType":"Block","src":"5960:63:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2107,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5977:28:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6006:8:26","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"5977:37:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2109,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5977:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2106,"id":2110,"nodeType":"Return","src":"5970:46:26"}]},"documentation":{"id":2100,"nodeType":"StructuredDocumentation","src":"5805:44:26","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2112,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"5863:8:26","nodeType":"FunctionDefinition","overrides":{"id":2103,"nodeType":"OverrideSpecifier","overrides":[{"id":2102,"name":"ForwarderRegistryContextBase","nameLocations":["5905:28:26"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"5905:28:26"}],"src":"5896:38:26"},"parameters":{"id":2101,"nodeType":"ParameterList","parameters":[],"src":"5871:2:26"},"returnParameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2112,"src":"5944:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2104,"name":"bytes","nodeType":"ElementaryTypeName","src":"5944:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5943:16:26"},"scope":2707,"src":"5854:169:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2126,"nodeType":"Block","src":"6177:73:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2118,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6195:5:26","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6201:9:26","memberName":"timestamp","nodeType":"MemberAccess","src":"6195:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2120,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"6213:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6195:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2122,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6194:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2123,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1926,"src":"6229:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6194:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2117,"id":2125,"nodeType":"Return","src":"6187:56:26"}]},"documentation":{"id":2113,"nodeType":"StructuredDocumentation","src":"6029:89:26","text":" @notice Get the current cycle.\n @return cycle The current cycle."},"functionSelector":"bab2f552","id":2127,"implemented":true,"kind":"function","modifiers":[],"name":"currentCycle","nameLocation":"6132:12:26","nodeType":"FunctionDefinition","parameters":{"id":2114,"nodeType":"ParameterList","parameters":[],"src":"6144:2:26"},"returnParameters":{"id":2117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2127,"src":"6168:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2115,"name":"uint256","nodeType":"ElementaryTypeName","src":"6168:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6167:9:26"},"scope":2707,"src":"6123:127:26","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[922],"body":{"id":2312,"nodeType":"Block","src":"7069:1497:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2144,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7083:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7087:6:26","memberName":"sender","nodeType":"MemberAccess","src":"7083:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2148,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"7105:11:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}],"id":2147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7097:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2146,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:26","typeDescriptions":{}}},"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7097:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7083:34:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2157,"nodeType":"IfStatement","src":"7079:103:26","trueBody":{"id":2156,"nodeType":"Block","src":"7119:63:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2152,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7160:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7164:6:26","memberName":"sender","nodeType":"MemberAccess","src":"7160:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2151,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"7140:19:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7140:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2155,"nodeType":"RevertStatement","src":"7133:38:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2158,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"7195:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2159,"name":"MISSING_ORB_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1886,"src":"7201:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7195:26:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2168,"nodeType":"IfStatement","src":"7191:94:26","trueBody":{"id":2167,"nodeType":"Block","src":"7223:62:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2162,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7259:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2163,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7263:6:26","memberName":"sender","nodeType":"MemberAccess","src":"7259:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2164,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"7271:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2161,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"7244:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7244:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2166,"nodeType":"RevertStatement","src":"7237:37:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"7299:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7308:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7299:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2180,"nodeType":"IfStatement","src":"7295:88:26","trueBody":{"id":2179,"nodeType":"Block","src":"7311:72:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2173,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7350:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7354:6:26","memberName":"sender","nodeType":"MemberAccess","src":"7350:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2175,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"7362:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2176,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"7366:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2172,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"7332:17:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7332:40:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2178,"nodeType":"RevertStatement","src":"7325:47:26"}]}},{"assignments":[2182],"declarations":[{"constant":false,"id":2182,"mutability":"mutable","name":"cycle","nameLocation":"7401:5:26","nodeType":"VariableDeclaration","scope":2312,"src":"7393:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2181,"name":"uint256","nodeType":"ElementaryTypeName","src":"7393:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2185,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2183,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"7409:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7409:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7393:30:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2186,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7437:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2187,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"7445:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7437:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2194,"nodeType":"IfStatement","src":"7433:74:26","trueBody":{"id":2193,"nodeType":"Block","src":"7456:51:26","statements":[{"errorCall":{"arguments":[{"id":2190,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7490:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2189,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"7477:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7477:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2192,"nodeType":"RevertStatement","src":"7470:26:26"}]}},{"assignments":[2196],"declarations":[{"constant":false,"id":2196,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"7525:16:26","nodeType":"VariableDeclaration","scope":2312,"src":"7517:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2195,"name":"uint256","nodeType":"ElementaryTypeName","src":"7517:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2200,"initialValue":{"baseExpression":{"id":2197,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"7544:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2199,"indexExpression":{"id":2198,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"7559:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7544:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7517:47:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2203,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"7586:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2202,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2201,"name":"uint128","nodeType":"ElementaryTypeName","src":"7578:7:26","typeDescriptions":{}}},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7606:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7578:29:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2212,"nodeType":"IfStatement","src":"7574:96:26","trueBody":{"id":2211,"nodeType":"Block","src":"7609:61:26","statements":[{"errorCall":{"arguments":[{"id":2208,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"7654:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2207,"name":"AlreadySetROCMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"7630:23:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7630:29:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2210,"nodeType":"RevertStatement","src":"7623:36:26"}]}},{"expression":{"arguments":[{"arguments":[{"id":2220,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7726:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}],"id":2219,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7718:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2218,"name":"address","nodeType":"ElementaryTypeName","src":"7718:7:26","typeDescriptions":{}}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7718:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2222,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2134,"src":"7733:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2223,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2136,"src":"7737:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":2214,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7697:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7701:6:26","memberName":"sender","nodeType":"MemberAccess","src":"7697:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2213,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"7680:16:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$873_$","typeString":"type(contract IERC1155Burnable)"}},"id":2216,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7680:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7709:8:26","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":860,"src":"7680:37:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":2224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7680:63:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2225,"nodeType":"ExpressionStatement","src":"7680:63:26"},{"assignments":[2227],"declarations":[{"constant":false,"id":2227,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"7762:16:26","nodeType":"VariableDeclaration","scope":2312,"src":"7754:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"7754:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2231,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2228,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"7781:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2229,"name":"ROC_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1912,"src":"7800:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7781:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7754:60:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2232,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"7828:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7833:6:26","memberName":"length","nodeType":"MemberAccess","src":"7828:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2234,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7842:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7828:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2295,"nodeType":"IfStatement","src":"7824:562:26","trueBody":{"id":2294,"nodeType":"Block","src":"7845:541:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2236,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"7864:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7884:3:26","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7864:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7863:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7892:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7863:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2293,"nodeType":"IfStatement","src":"7859:517:26","trueBody":{"id":2292,"nodeType":"Block","src":"7895:481:26","statements":[{"assignments":[2246,2248],"declarations":[{"constant":false,"id":2246,"mutability":"mutable","name":"proof","nameLocation":"7931:5:26","nodeType":"VariableDeclaration","scope":2292,"src":"7914:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2244,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7914:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2245,"nodeType":"ArrayTypeName","src":"7914:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2248,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"7946:29:26","nodeType":"VariableDeclaration","scope":2292,"src":"7938:37:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2247,"name":"uint256","nodeType":"ElementaryTypeName","src":"7938:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2259,"initialValue":{"arguments":[{"id":2251,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2138,"src":"7990:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":2253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7997:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2252,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7997:7:26","typeDescriptions":{}}},"id":2254,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"7997:9:26","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2255,"name":"uint256","nodeType":"ElementaryTypeName","src":"8008:7:26","typeDescriptions":{}}}],"id":2257,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7996:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":2249,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7979:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7983:6:26","memberName":"decode","nodeType":"MemberAccess","src":"7979:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7979:38:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7913:104:26"},{"assignments":[2261],"declarations":[{"constant":false,"id":2261,"mutability":"mutable","name":"leaf","nameLocation":"8043:4:26","nodeType":"VariableDeclaration","scope":2292,"src":"8035:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8035:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2269,"initialValue":{"arguments":[{"arguments":[{"id":2265,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"8077:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2266,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8083:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2263,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8060:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8064:12:26","memberName":"encodePacked","nodeType":"MemberAccess","src":"8060:16:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8060:53:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2262,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8050:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8050:64:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8035:79:26"},{"condition":{"id":2275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8136:32:26","subExpression":{"arguments":[{"id":2272,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"8150:11:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2273,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2261,"src":"8163:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2270,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2246,"src":"8137:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8143:6:26","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1377,"src":"8137:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8137:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2282,"nodeType":"IfStatement","src":"8132:135:26","trueBody":{"id":2281,"nodeType":"Block","src":"8170:97:26","statements":[{"errorCall":{"arguments":[{"id":2277,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"8212:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2278,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8218:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2276,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"8199:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8199:49:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2280,"nodeType":"RevertStatement","src":"8192:56:26"}]}},{"expression":{"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2283,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8285:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2284,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2248,"src":"8305:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8338:3:26","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8305:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8304:38:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2288,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8345:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8304:57:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8285:76:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2291,"nodeType":"ExpressionStatement","src":"8285:76:26"}]}}]}},{"expression":{"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2296,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"8395:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2298,"indexExpression":{"id":2297,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"8410:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8395:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2299,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8418:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8395:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2301,"nodeType":"ExpressionStatement","src":"8395:39:26"},{"eventCall":{"arguments":[{"id":2303,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2132,"src":"8469:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2304,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"8475:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2305,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"8493:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2302,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"8449:19:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8449:61:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2307,"nodeType":"EmitStatement","src":"8444:66:26"},{"expression":{"expression":{"expression":{"id":2308,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8528:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8533:17:26","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2313,"src":"8528:22:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8551:8:26","memberName":"selector","nodeType":"MemberAccess","src":"8528:31:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2143,"id":2311,"nodeType":"Return","src":"8521:38:26"}]},"documentation":{"id":2128,"nodeType":"StructuredDocumentation","src":"6256:675:26","text":" @notice Set the Orb multiplier by burning the Missing Orb token 1\n @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n @param from The wallet address.\n @param id The token ID.\n @param value The token value.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid.\n @dev Throws if the token multiplier has already been set."},"functionSelector":"f23a6e61","id":2313,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"6945:17:26","nodeType":"FunctionDefinition","overrides":{"id":2140,"nodeType":"OverrideSpecifier","overrides":[],"src":"7043:8:26"},"parameters":{"id":2139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2313,"src":"6963:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2129,"name":"address","nodeType":"ElementaryTypeName","src":"6963:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2132,"mutability":"mutable","name":"from","nameLocation":"6980:4:26","nodeType":"VariableDeclaration","scope":2313,"src":"6972:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2131,"name":"address","nodeType":"ElementaryTypeName","src":"6972:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2134,"mutability":"mutable","name":"id","nameLocation":"6994:2:26","nodeType":"VariableDeclaration","scope":2313,"src":"6986:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2133,"name":"uint256","nodeType":"ElementaryTypeName","src":"6986:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2136,"mutability":"mutable","name":"value","nameLocation":"7006:5:26","nodeType":"VariableDeclaration","scope":2313,"src":"6998:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2135,"name":"uint256","nodeType":"ElementaryTypeName","src":"6998:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2138,"mutability":"mutable","name":"data","nameLocation":"7028:4:26","nodeType":"VariableDeclaration","scope":2313,"src":"7013:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2137,"name":"bytes","nodeType":"ElementaryTypeName","src":"7013:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6962:71:26"},"returnParameters":{"id":2143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2313,"src":"7061:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2141,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7061:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7060:8:26"},"scope":2707,"src":"6936:1630:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[940],"body":{"id":2705,"nodeType":"Block","src":"9308:3245:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2332,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9322:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9326:6:26","memberName":"sender","nodeType":"MemberAccess","src":"9322:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2336,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"9344:12:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}],"id":2335,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9336:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2334,"name":"address","nodeType":"ElementaryTypeName","src":"9336:7:26","typeDescriptions":{}}},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9336:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9322:35:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2345,"nodeType":"IfStatement","src":"9318:104:26","trueBody":{"id":2344,"nodeType":"Block","src":"9359:63:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2340,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9400:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9404:6:26","memberName":"sender","nodeType":"MemberAccess","src":"9400:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2339,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"9380:19:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9380:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2343,"nodeType":"RevertStatement","src":"9373:38:26"}]}},{"assignments":[2347],"declarations":[{"constant":false,"id":2347,"mutability":"mutable","name":"cycle","nameLocation":"9440:5:26","nodeType":"VariableDeclaration","scope":2705,"src":"9432:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2346,"name":"uint256","nodeType":"ElementaryTypeName","src":"9432:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2350,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2348,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2127,"src":"9448:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9448:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9432:30:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2351,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"9476:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2352,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"9484:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9476:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2359,"nodeType":"IfStatement","src":"9472:74:26","trueBody":{"id":2358,"nodeType":"Block","src":"9495:51:26","statements":[{"errorCall":{"arguments":[{"id":2355,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"9529:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2354,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"9516:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2357,"nodeType":"RevertStatement","src":"9509:26:26"}]}},{"expression":{"arguments":[{"arguments":[{"id":2367,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9607:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}],"id":2366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9599:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2365,"name":"address","nodeType":"ElementaryTypeName","src":"9599:7:26","typeDescriptions":{}}},"id":2368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9599:13:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2369,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9614:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2370,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"9619:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":2361,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9573:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9577:6:26","memberName":"sender","nodeType":"MemberAccess","src":"9573:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2360,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"9556:16:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$873_$","typeString":"type(contract IERC1155Burnable)"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9585:13:26","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":872,"src":"9556:42:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:70:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2372,"nodeType":"ExpressionStatement","src":"9556:70:26"},{"assignments":[2374],"declarations":[{"constant":false,"id":2374,"mutability":"mutable","name":"ashGenerated","nameLocation":"9645:12:26","nodeType":"VariableDeclaration","scope":2705,"src":"9637:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2373,"name":"uint256","nodeType":"ElementaryTypeName","src":"9637:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2376,"initialValue":{"hexValue":"30","id":2375,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9660:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9637:24:26"},{"body":{"id":2529,"nodeType":"Block","src":"9712:966:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2388,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"9730:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2390,"indexExpression":{"id":2389,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9737:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9730:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9743:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9730:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2405,"nodeType":"IfStatement","src":"9726:108:26","trueBody":{"id":2404,"nodeType":"Block","src":"9746:88:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2394,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9789:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9793:6:26","memberName":"sender","nodeType":"MemberAccess","src":"9789:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2396,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9801:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2398,"indexExpression":{"id":2397,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9805:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9801:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":2399,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"9809:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2401,"indexExpression":{"id":2400,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9816:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9809:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2393,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"9771:17:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9771:48:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2403,"nodeType":"RevertStatement","src":"9764:55:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2406,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9852:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2408,"indexExpression":{"id":2407,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9856:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9852:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9862:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9852:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2421,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9957:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2423,"indexExpression":{"id":2422,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9961:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9957:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":2424,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9967:1:26","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9957:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2436,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10062:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2438,"indexExpression":{"id":2437,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10066:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10062:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":2439,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:1:26","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"10062:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2451,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10167:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2453,"indexExpression":{"id":2452,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10171:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10167:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":2454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:1:26","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10167:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2466,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10272:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2468,"indexExpression":{"id":2467,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10276:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10272:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:1:26","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"10272:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2481,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10377:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2483,"indexExpression":{"id":2482,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10381:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10377:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"36","id":2484,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10387:1:26","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"10377:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2496,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10482:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2498,"indexExpression":{"id":2497,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10486:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10482:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":2499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10492:1:26","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"10482:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2521,"nodeType":"Block","src":"10583:85:26","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2514,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"10631:12:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}],"id":2513,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10623:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"10623:7:26","typeDescriptions":{}}},"id":2515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10623:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2516,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"10646:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2518,"indexExpression":{"id":2517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10650:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10646:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2511,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1984,"src":"10608:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10608:45:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2520,"nodeType":"RevertStatement","src":"10601:52:26"}]},"id":2522,"nodeType":"IfStatement","src":"10478:190:26","trueBody":{"id":2510,"nodeType":"Block","src":"10495:82:26","statements":[{"expression":{"id":2508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2501,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"10513:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2502,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10530:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2504,"indexExpression":{"id":2503,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10537:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10530:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2505,"name":"BURN_WEIGHT_TOKEN_7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1908,"src":"10542:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10530:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2507,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10529:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10513:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2509,"nodeType":"ExpressionStatement","src":"10513:49:26"}]}},"id":2523,"nodeType":"IfStatement","src":"10373:295:26","trueBody":{"id":2495,"nodeType":"Block","src":"10390:82:26","statements":[{"expression":{"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2486,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"10408:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2487,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10425:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2489,"indexExpression":{"id":2488,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10432:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10425:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2490,"name":"BURN_WEIGHT_TOKEN_6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1905,"src":"10437:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10425:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2492,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10424:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10408:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2494,"nodeType":"ExpressionStatement","src":"10408:49:26"}]}},"id":2524,"nodeType":"IfStatement","src":"10268:400:26","trueBody":{"id":2480,"nodeType":"Block","src":"10285:82:26","statements":[{"expression":{"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2471,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"10303:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2472,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10320:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2474,"indexExpression":{"id":2473,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10327:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10320:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2475,"name":"BURN_WEIGHT_TOKEN_5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"10332:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10320:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2477,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10319:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10303:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2479,"nodeType":"ExpressionStatement","src":"10303:49:26"}]}},"id":2525,"nodeType":"IfStatement","src":"10163:505:26","trueBody":{"id":2465,"nodeType":"Block","src":"10180:82:26","statements":[{"expression":{"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2456,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"10198:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2457,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10215:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2459,"indexExpression":{"id":2458,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10222:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10215:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2460,"name":"BURN_WEIGHT_TOKEN_4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"10227:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10215:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2462,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10214:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10198:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2464,"nodeType":"ExpressionStatement","src":"10198:49:26"}]}},"id":2526,"nodeType":"IfStatement","src":"10058:610:26","trueBody":{"id":2450,"nodeType":"Block","src":"10075:82:26","statements":[{"expression":{"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2441,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"10093:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2442,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10110:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2444,"indexExpression":{"id":2443,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10117:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10110:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2445,"name":"BURN_WEIGHT_TOKEN_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1896,"src":"10122:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10110:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2447,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10109:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10093:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2449,"nodeType":"ExpressionStatement","src":"10093:49:26"}]}},"id":2527,"nodeType":"IfStatement","src":"9953:715:26","trueBody":{"id":2435,"nodeType":"Block","src":"9970:82:26","statements":[{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2426,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"9988:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2427,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"10005:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2429,"indexExpression":{"id":2428,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"10012:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10005:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2430,"name":"BURN_WEIGHT_TOKEN_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1893,"src":"10017:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2432,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10004:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9988:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"9988:49:26"}]}},"id":2528,"nodeType":"IfStatement","src":"9848:820:26","trueBody":{"id":2420,"nodeType":"Block","src":"9865:82:26","statements":[{"expression":{"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2411,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"9883:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2412,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"9900:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2414,"indexExpression":{"id":2413,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9907:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9900:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2415,"name":"BURN_WEIGHT_TOKEN_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1890,"src":"9912:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9900:31:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2417,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9899:33:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2419,"nodeType":"ExpressionStatement","src":"9883:49:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2381,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9691:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2382,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"9695:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9699:6:26","memberName":"length","nodeType":"MemberAccess","src":"9695:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9691:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2530,"initializationExpression":{"assignments":[2378],"declarations":[{"constant":false,"id":2378,"mutability":"mutable","name":"i","nameLocation":"9684:1:26","nodeType":"VariableDeclaration","scope":2530,"src":"9676:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2377,"name":"uint256","nodeType":"ElementaryTypeName","src":"9676:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2380,"initialValue":{"hexValue":"30","id":2379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9676:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9707:3:26","subExpression":{"id":2385,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"9707:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2387,"nodeType":"ExpressionStatement","src":"9707:3:26"},"nodeType":"ForStatement","src":"9671:1007:26"},{"assignments":[2532],"declarations":[{"constant":false,"id":2532,"mutability":"mutable","name":"userAddr","nameLocation":"10696:8:26","nodeType":"VariableDeclaration","scope":2705,"src":"10688:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2531,"name":"address","nodeType":"ElementaryTypeName","src":"10688:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2534,"initialValue":{"id":2533,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"10707:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10688:23:26"},{"assignments":[2536],"declarations":[{"constant":false,"id":2536,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"10789:16:26","nodeType":"VariableDeclaration","scope":2705,"src":"10781:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2535,"name":"uint256","nodeType":"ElementaryTypeName","src":"10781:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2540,"initialValue":{"baseExpression":{"id":2537,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"10808:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2539,"indexExpression":{"id":2538,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"10823:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10808:24:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10781:51:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2541,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"10847:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10852:6:26","memberName":"length","nodeType":"MemberAccess","src":"10847:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10847:15:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2649,"nodeType":"Block","src":"11716:249:26","statements":[{"assignments":[2630],"declarations":[{"constant":false,"id":2630,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"11738:29:26","nodeType":"VariableDeclaration","scope":2649,"src":"11730:37:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2629,"name":"uint256","nodeType":"ElementaryTypeName","src":"11730:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2634,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2631,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11770:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11790:3:26","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11770:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11730:63:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2635,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"11811:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11843:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11811:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2648,"nodeType":"IfStatement","src":"11807:148:26","trueBody":{"id":2647,"nodeType":"Block","src":"11846:109:26","statements":[{"expression":{"id":2645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2638,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11864:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2639,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11880:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2640,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2630,"src":"11895:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11880:44:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2642,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11879:46:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2643,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"11928:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11879:61:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11864:76:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2646,"nodeType":"ExpressionStatement","src":"11864:76:26"}]}}]},"id":2650,"nodeType":"IfStatement","src":"10843:1122:26","trueBody":{"id":2628,"nodeType":"Block","src":"10864:846:26","statements":[{"assignments":[2549,2551],"declarations":[{"constant":false,"id":2549,"mutability":"mutable","name":"proof","nameLocation":"10896:5:26","nodeType":"VariableDeclaration","scope":2628,"src":"10879:22:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2547,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10879:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2548,"nodeType":"ArrayTypeName","src":"10879:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2551,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"10911:29:26","nodeType":"VariableDeclaration","scope":2628,"src":"10903:37:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2550,"name":"uint256","nodeType":"ElementaryTypeName","src":"10903:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2562,"initialValue":{"arguments":[{"id":2554,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2326,"src":"10955:4:26","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":2556,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10962:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10962:7:26","typeDescriptions":{}}},"id":2557,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"10962:9:26","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":2559,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10973:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2558,"name":"uint256","nodeType":"ElementaryTypeName","src":"10973:7:26","typeDescriptions":{}}}],"id":2560,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10961:20:26","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":2552,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10944:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2553,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10948:6:26","memberName":"decode","nodeType":"MemberAccess","src":"10944:10:26","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10944:38:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10878:104:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2563,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11001:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11021:3:26","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11001:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2566,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11000:25:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2567,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11029:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11000:30:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2618,"nodeType":"IfStatement","src":"10996:613:26","trueBody":{"id":2617,"nodeType":"Block","src":"11032:577:26","statements":[{"assignments":[2570],"declarations":[{"constant":false,"id":2570,"mutability":"mutable","name":"leaf","nameLocation":"11058:4:26","nodeType":"VariableDeclaration","scope":2617,"src":"11050:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11050:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2578,"initialValue":{"arguments":[{"arguments":[{"id":2574,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"11092:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2575,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11102:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2572,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11075:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11079:12:26","memberName":"encodePacked","nodeType":"MemberAccess","src":"11075:16:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11075:57:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2571,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11065:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:68:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11050:83:26"},{"condition":{"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11155:32:26","subExpression":{"arguments":[{"id":2581,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"11169:11:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2582,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2570,"src":"11182:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2579,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2549,"src":"11156:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11162:6:26","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1377,"src":"11156:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11156:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2591,"nodeType":"IfStatement","src":"11151:139:26","trueBody":{"id":2590,"nodeType":"Block","src":"11189:101:26","statements":[{"errorCall":{"arguments":[{"id":2586,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"11231:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2587,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11241:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2585,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"11218:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11218:53:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2589,"nodeType":"RevertStatement","src":"11211:60:26"}]}},{"assignments":[2593],"declarations":[{"constant":false,"id":2593,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"11316:16:26","nodeType":"VariableDeclaration","scope":2617,"src":"11308:24:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2592,"name":"uint256","nodeType":"ElementaryTypeName","src":"11308:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2600,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2594,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11336:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":2595,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11369:3:26","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11336:36:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2597,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11335:38:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":2598,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11376:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11335:57:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11308:84:26"},{"expression":{"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2601,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11410:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2602,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"11429:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11410:35:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2604,"nodeType":"ExpressionStatement","src":"11410:35:26"},{"expression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2605,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1949,"src":"11463:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2607,"indexExpression":{"id":2606,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"11478:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11463:24:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2608,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"11490:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11463:43:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2610,"nodeType":"ExpressionStatement","src":"11463:43:26"},{"eventCall":{"arguments":[{"id":2612,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"11549:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2613,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"11559:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2614,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2593,"src":"11577:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2611,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1977,"src":"11529:19:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":2615,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11529:65:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2616,"nodeType":"EmitStatement","src":"11524:70:26"}]}},{"expression":{"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2619,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11623:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2620,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"11639:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2621,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2551,"src":"11654:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11639:44:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2623,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11638:46:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2624,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1882,"src":"11687:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11638:61:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11623:76:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2627,"nodeType":"ExpressionStatement","src":"11623:76:26"}]}},{"assignments":[2652],"declarations":[{"constant":false,"id":2652,"mutability":"mutable","name":"rocMultiplier","nameLocation":"11983:13:26","nodeType":"VariableDeclaration","scope":2705,"src":"11975:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2651,"name":"uint256","nodeType":"ElementaryTypeName","src":"11975:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2657,"initialValue":{"arguments":[{"id":2655,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"12007:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2654,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11999:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":2653,"name":"uint128","nodeType":"ElementaryTypeName","src":"11999:7:26","typeDescriptions":{}}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11999:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"11975:49:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2658,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"12038:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2659,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12054:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12038:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2666,"nodeType":"IfStatement","src":"12034:77:26","trueBody":{"id":2665,"nodeType":"Block","src":"12057:54:26","statements":[{"expression":{"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2661,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12071:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":2662,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2652,"src":"12087:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12071:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2664,"nodeType":"ExpressionStatement","src":"12071:29:26"}]}},{"assignments":[2668],"declarations":[{"constant":false,"id":2668,"mutability":"mutable","name":"userTotalAshPerCycle","nameLocation":"12163:20:26","nodeType":"VariableDeclaration","scope":2705,"src":"12155:28:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2667,"name":"uint256","nodeType":"ElementaryTypeName","src":"12155:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2676,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":2669,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"12186:15:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2671,"indexExpression":{"id":2670,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"12202:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12186:22:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2673,"indexExpression":{"id":2672,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"12209:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12186:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2674,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12221:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12186:47:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12155:78:26"},{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2677,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"12243:15:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2680,"indexExpression":{"id":2678,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"12259:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12243:22:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2681,"indexExpression":{"id":2679,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"12266:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12243:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2682,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"12278:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12243:55:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2684,"nodeType":"ExpressionStatement","src":"12243:55:26"},{"expression":{"id":2689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2685,"name":"totalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1937,"src":"12342:16:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2687,"indexExpression":{"id":2686,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"12359:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12342:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2688,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12369:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12342:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2690,"nodeType":"ExpressionStatement","src":"12342:39:26"},{"eventCall":{"arguments":[{"id":2692,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2532,"src":"12409:8:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2693,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2347,"src":"12419:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2694,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2321,"src":"12426:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2695,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2324,"src":"12431:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2696,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2374,"src":"12439:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2697,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2668,"src":"12453:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2698,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2536,"src":"12475:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2691,"name":"GenerateAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1968,"src":"12397:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory,uint256,uint256,uint256)"}},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12397:95:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2700,"nodeType":"EmitStatement","src":"12392:100:26"},{"expression":{"expression":{"expression":{"id":2701,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12510:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$2707","typeString":"contract OrbsBurnPool"}},"id":2702,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12515:22:26","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2706,"src":"12510:27:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":2703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12538:8:26","memberName":"selector","nodeType":"MemberAccess","src":"12510:36:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2331,"id":2704,"nodeType":"Return","src":"12503:43:26"}]},"documentation":{"id":2314,"nodeType":"StructuredDocumentation","src":"8572:523:26","text":" @notice Burn the tokens and calculate the ash.\n @param from The wallet address.\n @param ids The token IDs to burn.\n @param values The amount of tokens to burn.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid."},"functionSelector":"bc197c81","id":2706,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"9109:22:26","nodeType":"FunctionDefinition","overrides":{"id":2328,"nodeType":"OverrideSpecifier","overrides":[],"src":"9282:8:26"},"parameters":{"id":2327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2316,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"9141:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2315,"name":"address","nodeType":"ElementaryTypeName","src":"9141:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2318,"mutability":"mutable","name":"from","nameLocation":"9166:4:26","nodeType":"VariableDeclaration","scope":2706,"src":"9158:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2317,"name":"address","nodeType":"ElementaryTypeName","src":"9158:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2321,"mutability":"mutable","name":"ids","nameLocation":"9199:3:26","nodeType":"VariableDeclaration","scope":2706,"src":"9180:22:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2319,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2320,"nodeType":"ArrayTypeName","src":"9180:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2324,"mutability":"mutable","name":"values","nameLocation":"9231:6:26","nodeType":"VariableDeclaration","scope":2706,"src":"9212:25:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"9212:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2323,"nodeType":"ArrayTypeName","src":"9212:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2326,"mutability":"mutable","name":"data","nameLocation":"9262:4:26","nodeType":"VariableDeclaration","scope":2706,"src":"9247:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2325,"name":"bytes","nodeType":"ElementaryTypeName","src":"9247:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9131:141:26"},"returnParameters":{"id":2331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2706,"src":"9300:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2329,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9300:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9299:8:26"},"scope":2707,"src":"9100:3453:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2708,"src":"889:11666:26","usedErrors":[419,1984,1989,1998,2003,2008,2015,2018,2021],"usedEvents":[1968,1977]}],"src":"32:12524:26"},"id":26},"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol","exportedSymbols":{"Context":[1293],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC1155ClaimWindowMerkleClaim":[3095],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155Mintable":[903],"IForwarderRegistry":[727],"MerkleProof":[1855]},"id":3096,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2709,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2711,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":1856,"src":"57:87:27","symbolAliases":[{"foreign":{"id":2710,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"65:11:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":2713,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":904,"src":"145:117:27","symbolAliases":[{"foreign":{"id":2712,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"153:16:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2715,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":582,"src":"263:115:27","symbolAliases":[{"foreign":{"id":2714,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"271:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2717,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":33,"src":"379:101:27","symbolAliases":[{"foreign":{"id":2716,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"387:17:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2719,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":385,"src":"481:125:27","symbolAliases":[{"foreign":{"id":2718,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"489:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2721,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":702,"src":"607:128:27","symbolAliases":[{"foreign":{"id":2720,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"615:28:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":728,"src":"736:114:27","symbolAliases":[{"foreign":{"id":2722,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"744:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3096,"sourceUnit":1294,"src":"851:66:27","symbolAliases":[{"foreign":{"id":2724,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"859:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2727,"name":"ForwarderRegistryContext","nameLocations":["1225:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1225:24:27"},"id":2728,"nodeType":"InheritanceSpecifier","src":"1225:24:27"},{"baseName":{"id":2729,"name":"ContractOwnership","nameLocations":["1251:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1251:17:27"},"id":2730,"nodeType":"InheritanceSpecifier","src":"1251:17:27"}],"canonicalName":"ERC1155ClaimWindowMerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":2726,"nodeType":"StructuredDocumentation","src":"919:263:27","text":" @title ERC1155 Claim Window Merkle Claim Contract\n @dev This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":3095,"linearizedBaseContracts":[3095,32,414,431,80,1293,126,581,713,701],"name":"ERC1155ClaimWindowMerkleClaim","nameLocation":"1192:29:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2734,"libraryName":{"id":2731,"name":"ContractOwnershipStorage","nameLocations":["1281:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1281:24:27"},"nodeType":"UsingForDirective","src":"1275:67:27","typeName":{"id":2733,"nodeType":"UserDefinedTypeName","pathNode":{"id":2732,"name":"ContractOwnershipStorage.Layout","nameLocations":["1310:24:27","1335:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1310:31:27"},"referencedDeclaration":157,"src":"1310:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":2738,"libraryName":{"id":2735,"name":"MerkleProof","nameLocations":["1353:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1855,"src":"1353:11:27"},"nodeType":"UsingForDirective","src":"1347:32:27","typeName":{"baseType":{"id":2736,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1369:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2737,"nodeType":"ArrayTypeName","src":"1369:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"canonicalName":"ERC1155ClaimWindowMerkleClaim.ClaimWindow","documentation":{"id":2739,"nodeType":"StructuredDocumentation","src":"1385:36:27","text":"@notice The claim window struct."},"id":2746,"members":[{"constant":false,"id":2741,"mutability":"mutable","name":"merkleRoot","nameLocation":"1463:10:27","nodeType":"VariableDeclaration","scope":2746,"src":"1455:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2740,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1455:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2743,"mutability":"mutable","name":"startTime","nameLocation":"1491:9:27","nodeType":"VariableDeclaration","scope":2746,"src":"1483:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1483:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2745,"mutability":"mutable","name":"endTime","nameLocation":"1518:7:27","nodeType":"VariableDeclaration","scope":2746,"src":"1510:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1510:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimWindow","nameLocation":"1433:11:27","nodeType":"StructDefinition","scope":3095,"src":"1426:106:27","visibility":"public"},{"constant":false,"documentation":{"id":2747,"nodeType":"StructuredDocumentation","src":"1538:48:27","text":"@notice The ERC1155Mintable reward contract."},"functionSelector":"3a5af339","id":2750,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1625:15:27","nodeType":"VariableDeclaration","scope":3095,"src":"1591:49:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"},"typeName":{"id":2749,"nodeType":"UserDefinedTypeName","pathNode":{"id":2748,"name":"IERC1155Mintable","nameLocations":["1591:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":903,"src":"1591:16:27"},"referencedDeclaration":903,"src":"1591:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"constant":false,"documentation":{"id":2751,"nodeType":"StructuredDocumentation","src":"1647:39:27","text":"@notice The token id to be claimed."},"functionSelector":"89a89002","id":2753,"mutability":"immutable","name":"TOKEN_ID","nameLocation":"1716:8:27","nodeType":"VariableDeclaration","scope":3095,"src":"1691:33:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"1691:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2754,"nodeType":"StructuredDocumentation","src":"1731:75:27","text":"@notice The total number of tokens that can be minted in this contract."},"functionSelector":"9dfbcde8","id":2756,"mutability":"immutable","name":"MINT_SUPPLY","nameLocation":"1836:11:27","nodeType":"VariableDeclaration","scope":3095,"src":"1811:36:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2755,"name":"uint256","nodeType":"ElementaryTypeName","src":"1811:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2757,"nodeType":"StructuredDocumentation","src":"1854:62:27","text":"@notice The total number of tokens that have been claimed."},"functionSelector":"ba65912e","id":2759,"mutability":"mutable","name":"noOfTokensClaimed","nameLocation":"1936:17:27","nodeType":"VariableDeclaration","scope":3095,"src":"1921:32:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2758,"name":"uint256","nodeType":"ElementaryTypeName","src":"1921:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":2760,"nodeType":"StructuredDocumentation","src":"1960:58:27","text":"@notice Mapping from the epoch ID to the claim window."},"functionSelector":"dc45def6","id":2765,"mutability":"mutable","name":"claimWindows","nameLocation":"2062:12:27","nodeType":"VariableDeclaration","scope":3095,"src":"2023:51:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2746_storage_$","typeString":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow)"},"typeName":{"id":2764,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2761,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2031:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2023:31:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2746_storage_$","typeString":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2763,"nodeType":"UserDefinedTypeName","pathNode":{"id":2762,"name":"ClaimWindow","nameLocations":["2042:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"2042:11:27"},"referencedDeclaration":2746,"src":"2042:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2766,"nodeType":"StructuredDocumentation","src":"2081:54:27","text":"@notice Mapping from leafhash to the claim status."},"functionSelector":"e3a0ce09","id":2770,"mutability":"mutable","name":"claimStatus","nameLocation":"2172:11:27","nodeType":"VariableDeclaration","scope":3095,"src":"2140:43:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2769,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2767,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2148:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2140:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2768,"name":"bool","nodeType":"ElementaryTypeName","src":"2159:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"2190:51:27","text":"@notice Event emitted when a payout is claimed."},"eventSelector":"a68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03","id":2781,"name":"PayoutClaimed","nameLocation":"2252:13:27","nodeType":"EventDefinition","parameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2773,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2282:7:27","nodeType":"VariableDeclaration","scope":2781,"src":"2266:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2772,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2266:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2775,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2307:9:27","nodeType":"VariableDeclaration","scope":2781,"src":"2291:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2774,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2777,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"2326:2:27","nodeType":"VariableDeclaration","scope":2781,"src":"2318:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2776,"name":"uint256","nodeType":"ElementaryTypeName","src":"2318:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2779,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2338:5:27","nodeType":"VariableDeclaration","scope":2781,"src":"2330:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2778,"name":"uint256","nodeType":"ElementaryTypeName","src":"2330:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2265:79:27"},"src":"2246:99:27"},{"anonymous":false,"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"2351:53:27","text":"@notice Event emitted when a claim window is set."},"eventSelector":"91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da","id":2792,"name":"SetEpochMerkleRoot","nameLocation":"2415:18:27","nodeType":"EventDefinition","parameters":{"id":2791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2784,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2450:7:27","nodeType":"VariableDeclaration","scope":2792,"src":"2434:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2434:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2786,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"2475:10:27","nodeType":"VariableDeclaration","scope":2792,"src":"2459:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2785,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2788,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"2495:9:27","nodeType":"VariableDeclaration","scope":2792,"src":"2487:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2790,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"2514:7:27","nodeType":"VariableDeclaration","scope":2792,"src":"2506:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2789,"name":"uint256","nodeType":"ElementaryTypeName","src":"2506:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2433:89:27"},"src":"2409:114:27"},{"documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"2529:66:27","text":"@notice Error thrown when the payout has already been claimed."},"errorSelector":"a8ca238e","id":2799,"name":"AlreadyClaimed","nameLocation":"2606:14:27","nodeType":"ErrorDefinition","parameters":{"id":2798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"epochId","nameLocation":"2629:7:27","nodeType":"VariableDeclaration","scope":2799,"src":"2621:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2621:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2797,"mutability":"mutable","name":"recipient","nameLocation":"2646:9:27","nodeType":"VariableDeclaration","scope":2799,"src":"2638:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2796,"name":"address","nodeType":"ElementaryTypeName","src":"2638:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2620:36:27"},"src":"2600:57:27"},{"documentation":{"id":2800,"nodeType":"StructuredDocumentation","src":"2663:74:27","text":"@notice Error thrown when the proof provided for the claim is invalid."},"errorSelector":"a04a37c0","id":2806,"name":"InvalidProof","nameLocation":"2748:12:27","nodeType":"ErrorDefinition","parameters":{"id":2805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2802,"mutability":"mutable","name":"epochId","nameLocation":"2769:7:27","nodeType":"VariableDeclaration","scope":2806,"src":"2761:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2801,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2761:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2804,"mutability":"mutable","name":"recipient","nameLocation":"2786:9:27","nodeType":"VariableDeclaration","scope":2806,"src":"2778:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2803,"name":"address","nodeType":"ElementaryTypeName","src":"2778:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2760:36:27"},"src":"2742:55:27"},{"documentation":{"id":2807,"nodeType":"StructuredDocumentation","src":"2803:79:27","text":"@notice Error thrown when the claim window is closed or has not yet opened."},"errorSelector":"dbeb4f4d","id":2813,"name":"OutOfClaimWindow","nameLocation":"2893:16:27","nodeType":"ErrorDefinition","parameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2809,"mutability":"mutable","name":"epochId","nameLocation":"2918:7:27","nodeType":"VariableDeclaration","scope":2813,"src":"2910:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2808,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2910:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"currentTime","nameLocation":"2935:11:27","nodeType":"VariableDeclaration","scope":2813,"src":"2927:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2810,"name":"uint256","nodeType":"ElementaryTypeName","src":"2927:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2909:38:27"},"src":"2887:61:27"},{"documentation":{"id":2814,"nodeType":"StructuredDocumentation","src":"2954:83:27","text":"@notice Error thrown when the number of tokens claimed exceeds the mint supply."},"errorSelector":"192d1755","id":2816,"name":"ExceededMintSupply","nameLocation":"3048:18:27","nodeType":"ErrorDefinition","parameters":{"id":2815,"nodeType":"ParameterList","parameters":[],"src":"3066:2:27"},"src":"3042:27:27"},{"documentation":{"id":2817,"nodeType":"StructuredDocumentation","src":"3075:58:27","text":"@notice Error thrown when the epoch ID already exists."},"errorSelector":"ed10979d","id":2821,"name":"EpochIdAlreadyExists","nameLocation":"3144:20:27","nodeType":"ErrorDefinition","parameters":{"id":2820,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2819,"mutability":"mutable","name":"epochId","nameLocation":"3173:7:27","nodeType":"VariableDeclaration","scope":2821,"src":"3165:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2818,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3165:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3164:17:27"},"src":"3138:44:27"},{"documentation":{"id":2822,"nodeType":"StructuredDocumentation","src":"3188:58:27","text":"@notice Error thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":2826,"name":"EpochIdNotExists","nameLocation":"3257:16:27","nodeType":"ErrorDefinition","parameters":{"id":2825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2824,"mutability":"mutable","name":"epochId","nameLocation":"3282:7:27","nodeType":"VariableDeclaration","scope":2826,"src":"3274:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2823,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3274:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3273:17:27"},"src":"3251:40:27"},{"documentation":{"id":2827,"nodeType":"StructuredDocumentation","src":"3297:58:27","text":"@notice Error thrown when the claim window is invalid."},"errorSelector":"790c7cef","id":2835,"name":"InvalidClaimWindow","nameLocation":"3366:18:27","nodeType":"ErrorDefinition","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2829,"mutability":"mutable","name":"startTime","nameLocation":"3393:9:27","nodeType":"VariableDeclaration","scope":2835,"src":"3385:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2828,"name":"uint256","nodeType":"ElementaryTypeName","src":"3385:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2831,"mutability":"mutable","name":"endTime","nameLocation":"3412:7:27","nodeType":"VariableDeclaration","scope":2835,"src":"3404:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2830,"name":"uint256","nodeType":"ElementaryTypeName","src":"3404:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2833,"mutability":"mutable","name":"currentTime","nameLocation":"3429:11:27","nodeType":"VariableDeclaration","scope":2835,"src":"3421:19:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2832,"name":"uint256","nodeType":"ElementaryTypeName","src":"3421:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3384:57:27"},"src":"3360:82:27"},{"body":{"id":2868,"nodeType":"Block","src":"4051:111:27","statements":[{"expression":{"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2856,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"4061:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2857,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"4072:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4061:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2859,"nodeType":"ExpressionStatement","src":"4061:18:27"},{"expression":{"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2860,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"4089:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2861,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2840,"src":"4103:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4089:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2863,"nodeType":"ExpressionStatement","src":"4089:24:27"},{"expression":{"id":2866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2864,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"4123:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2865,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"4141:14:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"src":"4123:32:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"id":2867,"nodeType":"ExpressionStatement","src":"4123:32:27"}]},"documentation":{"id":2836,"nodeType":"StructuredDocumentation","src":"3448:366:27","text":" @notice Constructor for the ERC1155ClaimWindowMerkleClaim contract.\n @param tokenId The token id to be claimed.\n @param mintSupply The total number of tokens that can be minted in this contract.\n @param rewardContract The ERC1155Mintable reward contract interface.\n @param forwarderRegistry The forwarder registry contract."},"id":2869,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2849,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"4002:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2850,"kind":"baseConstructorSpecifier","modifierName":{"id":2848,"name":"ForwarderRegistryContext","nameLocations":["3977:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"3977:24:27"},"nodeType":"ModifierInvocation","src":"3977:43:27"},{"arguments":[{"expression":{"id":2852,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4039:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4043:6:27","memberName":"sender","nodeType":"MemberAccess","src":"4039:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2854,"kind":"baseConstructorSpecifier","modifierName":{"id":2851,"name":"ContractOwnership","nameLocations":["4021:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"4021:17:27"},"nodeType":"ModifierInvocation","src":"4021:29:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2838,"mutability":"mutable","name":"tokenId","nameLocation":"3848:7:27","nodeType":"VariableDeclaration","scope":2869,"src":"3840:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2837,"name":"uint256","nodeType":"ElementaryTypeName","src":"3840:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2840,"mutability":"mutable","name":"mintSupply","nameLocation":"3873:10:27","nodeType":"VariableDeclaration","scope":2869,"src":"3865:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2839,"name":"uint256","nodeType":"ElementaryTypeName","src":"3865:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"rewardContract","nameLocation":"3910:14:27","nodeType":"VariableDeclaration","scope":2869,"src":"3893:31:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"},"typeName":{"id":2842,"nodeType":"UserDefinedTypeName","pathNode":{"id":2841,"name":"IERC1155Mintable","nameLocations":["3893:16:27"],"nodeType":"IdentifierPath","referencedDeclaration":903,"src":"3893:16:27"},"referencedDeclaration":903,"src":"3893:16:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":2846,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"3953:17:27","nodeType":"VariableDeclaration","scope":2869,"src":"3934:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2845,"nodeType":"UserDefinedTypeName","pathNode":{"id":2844,"name":"IForwarderRegistry","nameLocations":["3934:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"3934:18:27"},"referencedDeclaration":727,"src":"3934:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"3830:146:27"},"returnParameters":{"id":2855,"nodeType":"ParameterList","parameters":[],"src":"4051:0:27"},"scope":3095,"src":"3819:343:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1283],"body":{"id":2882,"nodeType":"Block","src":"4327:65:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2878,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4344:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4373:10:27","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"4344:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4344:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2877,"id":2881,"nodeType":"Return","src":"4337:48:27"}]},"documentation":{"id":2870,"nodeType":"StructuredDocumentation","src":"4168:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2883,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"4226:10:27","nodeType":"FunctionDefinition","overrides":{"id":2874,"nodeType":"OverrideSpecifier","overrides":[{"id":2872,"name":"Context","nameLocations":["4270:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1293,"src":"4270:7:27"},{"id":2873,"name":"ForwarderRegistryContextBase","nameLocations":["4279:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"4279:28:27"}],"src":"4261:47:27"},"parameters":{"id":2871,"nodeType":"ParameterList","parameters":[],"src":"4236:2:27"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2883,"src":"4318:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2875,"name":"address","nodeType":"ElementaryTypeName","src":"4318:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4317:9:27"},"scope":3095,"src":"4217:175:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1292],"body":{"id":2896,"nodeType":"Block","src":"4562:63:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2892,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"4579:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4608:8:27","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"4579:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4579:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2891,"id":2895,"nodeType":"Return","src":"4572:46:27"}]},"documentation":{"id":2884,"nodeType":"StructuredDocumentation","src":"4398:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2897,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"4456:8:27","nodeType":"FunctionDefinition","overrides":{"id":2888,"nodeType":"OverrideSpecifier","overrides":[{"id":2886,"name":"Context","nameLocations":["4498:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1293,"src":"4498:7:27"},{"id":2887,"name":"ForwarderRegistryContextBase","nameLocations":["4507:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"4507:28:27"}],"src":"4489:47:27"},"parameters":{"id":2885,"nodeType":"ParameterList","parameters":[],"src":"4464:2:27"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2897,"src":"4546:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2889,"name":"bytes","nodeType":"ElementaryTypeName","src":"4546:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4545:16:27"},"scope":3095,"src":"4447:178:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2967,"nodeType":"Block","src":"5222:516:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2914,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2883],"referencedDeclaration":2883,"src":"5289:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5289:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2909,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"5232:24:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5257:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"5232:31:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5232:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2913,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5266:22:27","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"5232:56:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5232:70:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2917,"nodeType":"ExpressionStatement","src":"5232:70:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2918,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"5317:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2919,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"5330:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5317:20:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2921,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"5341:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2922,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5352:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5358:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"5352:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5341:26:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5317:50:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2934,"nodeType":"IfStatement","src":"5313:143:27","trueBody":{"id":2933,"nodeType":"Block","src":"5369:87:27","statements":[{"errorCall":{"arguments":[{"id":2927,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"5409:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2928,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"5420:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2929,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5429:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5435:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"5429:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2926,"name":"InvalidClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"5390:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256,uint256) pure"}},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5390:55:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2932,"nodeType":"RevertStatement","src":"5383:62:27"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2935,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"5470:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2746_storage_$","typeString":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2937,"indexExpression":{"id":2936,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5483:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5470:21:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"id":2938,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5492:10:27","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2741,"src":"5470:32:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2941,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5514:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5506:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2939,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5506:7:27","typeDescriptions":{}}},"id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5506:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5470:46:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2949,"nodeType":"IfStatement","src":"5466:113:27","trueBody":{"id":2948,"nodeType":"Block","src":"5518:61:27","statements":[{"errorCall":{"arguments":[{"id":2945,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5560:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2944,"name":"EpochIdAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2821,"src":"5539:20:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5539:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2947,"nodeType":"RevertStatement","src":"5532:36:27"}]}},{"expression":{"id":2958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2950,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"5589:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2746_storage_$","typeString":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2952,"indexExpression":{"id":2951,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5602:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5589:21:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2954,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5625:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2955,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"5637:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2956,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"5648:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2953,"name":"ClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"5613:11:27","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimWindow_$2746_storage_ptr_$","typeString":"type(struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage pointer)"}},"id":2957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5613:43:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_memory_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow memory"}},"src":"5589:67:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"id":2959,"nodeType":"ExpressionStatement","src":"5589:67:27"},{"eventCall":{"arguments":[{"id":2961,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5691:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2962,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2902,"src":"5700:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2963,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2904,"src":"5712:9:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2964,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"5723:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2960,"name":"SetEpochMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2792,"src":"5672:18:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256,uint256)"}},"id":2965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5672:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2966,"nodeType":"EmitStatement","src":"5667:64:27"}]},"documentation":{"id":2898,"nodeType":"StructuredDocumentation","src":"4631:476:27","text":" @notice Sets the merkle root for a specific epoch with start and end time.\n @dev Reverts if the _msgSender() is not the owner.\n @dev Reverts if the epoch ID has already been set.\n @dev Emits a SetEpochMerkleRoot event.\n @param epochId The epoch ID for the claim.\n @param merkleRoot The Merkle root of the claim.\n @param startTime The start time of the claim window.\n @param endTime The end time of the claim window."},"functionSelector":"0328a8fc","id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"setEpochMerkleRoot","nameLocation":"5121:18:27","nodeType":"FunctionDefinition","parameters":{"id":2907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2900,"mutability":"mutable","name":"epochId","nameLocation":"5148:7:27","nodeType":"VariableDeclaration","scope":2968,"src":"5140:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2899,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5140:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2902,"mutability":"mutable","name":"merkleRoot","nameLocation":"5165:10:27","nodeType":"VariableDeclaration","scope":2968,"src":"5157:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2901,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5157:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2904,"mutability":"mutable","name":"startTime","nameLocation":"5185:9:27","nodeType":"VariableDeclaration","scope":2968,"src":"5177:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2903,"name":"uint256","nodeType":"ElementaryTypeName","src":"5177:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2906,"mutability":"mutable","name":"endTime","nameLocation":"5204:7:27","nodeType":"VariableDeclaration","scope":2968,"src":"5196:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"5196:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5139:73:27"},"returnParameters":{"id":2908,"nodeType":"ParameterList","parameters":[],"src":"5222:0:27"},"scope":3095,"src":"5112:626:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3093,"nodeType":"Block","src":"6387:1010:27","statements":[{"assignments":[2981],"declarations":[{"constant":false,"id":2981,"mutability":"mutable","name":"claimWindow","nameLocation":"6417:11:27","nodeType":"VariableDeclaration","scope":3093,"src":"6397:31:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow"},"typeName":{"id":2980,"nodeType":"UserDefinedTypeName","pathNode":{"id":2979,"name":"ClaimWindow","nameLocations":["6397:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2746,"src":"6397:11:27"},"referencedDeclaration":2746,"src":"6397:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow"}},"visibility":"internal"}],"id":2985,"initialValue":{"baseExpression":{"id":2982,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"6431:12:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2746_storage_$","typeString":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2984,"indexExpression":{"id":2983,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6444:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6431:21:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6397:55:27"},{"assignments":[2987],"declarations":[{"constant":false,"id":2987,"mutability":"mutable","name":"merkleRoot","nameLocation":"6470:10:27","nodeType":"VariableDeclaration","scope":3093,"src":"6462:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2986,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6462:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2990,"initialValue":{"expression":{"id":2988,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"6483:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":2989,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6495:10:27","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2741,"src":"6483:22:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6462:43:27"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2991,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6519:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6541:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2993,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6533:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6533:7:27","typeDescriptions":{}}},"id":2995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6533:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6519:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3002,"nodeType":"IfStatement","src":"6515:87:27","trueBody":{"id":3001,"nodeType":"Block","src":"6545:57:27","statements":[{"errorCall":{"arguments":[{"id":2998,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6583:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2997,"name":"EpochIdNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2826,"src":"6566:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":2999,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6566:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3000,"nodeType":"RevertStatement","src":"6559:32:27"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3007,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3003,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6615:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6621:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"6615:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3005,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"6633:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":3006,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6645:9:27","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":2743,"src":"6633:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6615:39:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3008,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6658:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6664:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"6658:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":3010,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"6676:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2746_storage_ptr","typeString":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":3011,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6688:7:27","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":2745,"src":"6676:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6658:37:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6615:80:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3021,"nodeType":"IfStatement","src":"6611:160:27","trueBody":{"id":3020,"nodeType":"Block","src":"6697:74:27","statements":[{"errorCall":{"arguments":[{"id":3015,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6735:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":3016,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6744:5:27","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6750:9:27","memberName":"timestamp","nodeType":"MemberAccess","src":"6744:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3014,"name":"OutOfClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2813,"src":"6718:16:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) pure"}},"id":3018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6718:42:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3019,"nodeType":"RevertStatement","src":"6711:49:27"}]}},{"assignments":[3023],"declarations":[{"constant":false,"id":3023,"mutability":"mutable","name":"leaf","nameLocation":"6789:4:27","nodeType":"VariableDeclaration","scope":3093,"src":"6781:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6781:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3031,"initialValue":{"arguments":[{"arguments":[{"id":3027,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6823:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3028,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6832:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3025,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6806:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6810:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"6806:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6806:36:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3024,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6796:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6796:47:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6781:62:27"},{"condition":{"id":3037,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6857:31:27","subExpression":{"arguments":[{"id":3034,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2987,"src":"6871:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3035,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"6883:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3032,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2974,"src":"6858:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":3033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6864:6:27","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1377,"src":"6858:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6858:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3043,"nodeType":"IfStatement","src":"6853:76:27","trueBody":{"errorCall":{"arguments":[{"id":3039,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6910:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3040,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6919:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3038,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"6897:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6897:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3042,"nodeType":"RevertStatement","src":"6890:39:27"}},{"condition":{"baseExpression":{"id":3044,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"6944:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3046,"indexExpression":{"id":3045,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"6956:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6944:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3052,"nodeType":"IfStatement","src":"6940:64:27","trueBody":{"errorCall":{"arguments":[{"id":3048,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"6985:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3049,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"6994:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":3047,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2799,"src":"6970:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6970:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3051,"nodeType":"RevertStatement","src":"6963:41:27"}},{"assignments":[3054],"declarations":[{"constant":false,"id":3054,"mutability":"mutable","name":"updatedNoOfTokensClaimed","nameLocation":"7023:24:27","nodeType":"VariableDeclaration","scope":3093,"src":"7015:32:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3053,"name":"uint256","nodeType":"ElementaryTypeName","src":"7015:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3058,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3055,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"7050:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7070:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7050:21:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7015:56:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3059,"name":"updatedNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"7085:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3060,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2756,"src":"7112:11:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7085:38:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3066,"nodeType":"IfStatement","src":"7081:96:27","trueBody":{"id":3065,"nodeType":"Block","src":"7125:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3062,"name":"ExceededMintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2816,"src":"7146:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7146:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"RevertStatement","src":"7139:27:27"}]}},{"expression":{"id":3069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3067,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2759,"src":"7187:17:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3068,"name":"updatedNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3054,"src":"7207:24:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7187:44:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3070,"nodeType":"ExpressionStatement","src":"7187:44:27"},{"expression":{"id":3075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3071,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"7241:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3073,"indexExpression":{"id":3072,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3023,"src":"7253:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7241:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3074,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7261:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7241:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3076,"nodeType":"ExpressionStatement","src":"7241:24:27"},{"expression":{"arguments":[{"id":3080,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"7301:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3081,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"7312:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7322:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},{"hexValue":"","id":3083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7325:2:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3077,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2750,"src":"7276:15:27","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"id":3079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7292:8:27","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":888,"src":"7276:24:27","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":3084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3085,"nodeType":"ExpressionStatement","src":"7276:52:27"},{"eventCall":{"arguments":[{"id":3087,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2971,"src":"7358:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3088,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2976,"src":"7367:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3089,"name":"TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2753,"src":"7378:8:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":3090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7388:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":3086,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2781,"src":"7344:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256)"}},"id":3091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:46:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3092,"nodeType":"EmitStatement","src":"7339:51:27"}]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"5744:552:27","text":" @notice Claims the payout for a specific epoch.\n @param epochId The epoch ID for the claim.\n @param proof The Merkle proof for the claim.\n @param recipient The recipient of the payout.\n @dev Throws if the claim window has not been set.\n @dev Throws if the claim window is closed or has not yet opened.\n @dev Throws if the proof provided for the claim is invalid.\n @dev Throws if the payout has already been claimed.\n @dev Throws if the number of tokens claimed exceeds the mint supply."},"functionSelector":"eb02625c","id":3094,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"6310:5:27","nodeType":"FunctionDefinition","parameters":{"id":2977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"epochId","nameLocation":"6324:7:27","nodeType":"VariableDeclaration","scope":3094,"src":"6316:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2970,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6316:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2974,"mutability":"mutable","name":"proof","nameLocation":"6352:5:27","nodeType":"VariableDeclaration","scope":3094,"src":"6333:24:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2972,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6333:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2973,"nodeType":"ArrayTypeName","src":"6333:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2976,"mutability":"mutable","name":"recipient","nameLocation":"6367:9:27","nodeType":"VariableDeclaration","scope":3094,"src":"6359:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2975,"name":"address","nodeType":"ElementaryTypeName","src":"6359:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6315:62:27"},"returnParameters":{"id":2978,"nodeType":"ParameterList","parameters":[],"src":"6387:0:27"},"scope":3095,"src":"6301:1096:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3096,"src":"1183:6216:27","usedErrors":[94,419,2799,2806,2813,2816,2821,2826,2835],"usedEvents":[110,2781,2792]}],"src":"32:7368:27"},"id":27},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"ast":{"absolutePath":"contracts/mocks/burn/OrbsBurnPoolMock.sol","exportedSymbols":{"IERC1155Burnable":[873],"IForwarderRegistry":[727],"OrbsBurnPool":[2707],"OrbsBurnPoolMock":[3155]},"id":3156,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3097,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:28"},{"absolutePath":"contracts/burn/OrbsBurnPool.sol","file":"../../burn/OrbsBurnPool.sol","id":3099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3156,"sourceUnit":2708,"src":"57:57:28","symbolAliases":[{"foreign":{"id":3098,"name":"OrbsBurnPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"65:12:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3101,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3156,"sourceUnit":728,"src":"115:114:28","symbolAliases":[{"foreign":{"id":3100,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"123:18:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":3103,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3156,"sourceUnit":874,"src":"230:117:28","symbolAliases":[{"foreign":{"id":3102,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"238:16:28","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3104,"name":"OrbsBurnPool","nameLocations":["378:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":2707,"src":"378:12:28"},"id":3105,"nodeType":"InheritanceSpecifier","src":"378:12:28"}],"canonicalName":"OrbsBurnPoolMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3155,"linearizedBaseContracts":[3155,2707,847,414,431,941,581,713,701],"name":"OrbsBurnPoolMock","nameLocation":"358:16:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":3134,"nodeType":"Block","src":"755:2:28","statements":[]},"id":3135,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3125,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3107,"src":"662:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3126,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3109,"src":"675:13:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3127,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3111,"src":"690:8:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3128,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3113,"src":"700:10:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3129,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3116,"src":"712:10:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},{"id":3130,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3119,"src":"724:10:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},{"id":3131,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3122,"src":"736:17:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":3132,"kind":"baseConstructorSpecifier","modifierName":{"id":3124,"name":"OrbsBurnPool","nameLocations":["649:12:28"],"nodeType":"IdentifierPath","referencedDeclaration":2707,"src":"649:12:28"},"nodeType":"ModifierInvocation","src":"649:105:28"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"initialTime","nameLocation":"426:11:28","nodeType":"VariableDeclaration","scope":3135,"src":"418:19:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3106,"name":"uint256","nodeType":"ElementaryTypeName","src":"418:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3109,"mutability":"mutable","name":"cycleDuration","nameLocation":"455:13:28","nodeType":"VariableDeclaration","scope":3135,"src":"447:21:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3108,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3111,"mutability":"mutable","name":"maxCycle","nameLocation":"486:8:28","nodeType":"VariableDeclaration","scope":3135,"src":"478:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3110,"name":"uint256","nodeType":"ElementaryTypeName","src":"478:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3113,"mutability":"mutable","name":"merkleRoot","nameLocation":"512:10:28","nodeType":"VariableDeclaration","scope":3135,"src":"504:18:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"504:7:28","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3116,"mutability":"mutable","name":"orbOfPower","nameLocation":"549:10:28","nodeType":"VariableDeclaration","scope":3135,"src":"532:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":3115,"nodeType":"UserDefinedTypeName","pathNode":{"id":3114,"name":"IERC1155Burnable","nameLocations":["532:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"532:16:28"},"referencedDeclaration":873,"src":"532:16:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":3119,"mutability":"mutable","name":"missingOrb","nameLocation":"586:10:28","nodeType":"VariableDeclaration","scope":3135,"src":"569:27:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"},"typeName":{"id":3118,"nodeType":"UserDefinedTypeName","pathNode":{"id":3117,"name":"IERC1155Burnable","nameLocations":["569:16:28"],"nodeType":"IdentifierPath","referencedDeclaration":873,"src":"569:16:28"},"referencedDeclaration":873,"src":"569:16:28","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$873","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":3122,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"625:17:28","nodeType":"VariableDeclaration","scope":3135,"src":"606:36:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"IForwarderRegistry","nameLocations":["606:18:28"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"606:18:28"},"referencedDeclaration":727,"src":"606:18:28","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"408:240:28"},"returnParameters":{"id":3133,"nodeType":"ParameterList","parameters":[],"src":"755:0:28"},"scope":3155,"src":"397:360:28","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3143,"nodeType":"Block","src":"818:36:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3140,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2099],"referencedDeclaration":2099,"src":"835:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"835:12:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3139,"id":3142,"nodeType":"Return","src":"828:19:28"}]},"functionSelector":"d1a91ff2","id":3144,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"772:11:28","nodeType":"FunctionDefinition","parameters":{"id":3136,"nodeType":"ParameterList","parameters":[],"src":"783:2:28"},"returnParameters":{"id":3139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3138,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3144,"src":"809:7:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3137,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"808:9:28"},"scope":3155,"src":"763:91:28","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3153,"nodeType":"Block","src":"1030:34:28","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3150,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2112],"referencedDeclaration":2112,"src":"1047:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1047:10:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3149,"id":3152,"nodeType":"Return","src":"1040:17:28"}]},"documentation":{"id":3145,"nodeType":"StructuredDocumentation","src":"860:105:28","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":3154,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"979:9:28","nodeType":"FunctionDefinition","parameters":{"id":3146,"nodeType":"ParameterList","parameters":[],"src":"988:2:28"},"returnParameters":{"id":3149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3154,"src":"1014:14:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3147,"name":"bytes","nodeType":"ElementaryTypeName","src":"1014:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1013:16:28"},"scope":3155,"src":"970:94:28","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3156,"src":"349:717:28","usedErrors":[419,1984,1989,1998,2003,2008,2015,2018,2021],"usedEvents":[1968,1977]}],"src":"32:1035:28"},"id":28},"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol","exportedSymbols":{"ERC1155ClaimWindowMerkleClaim":[3095],"ERC1155ClaimWindowMerkleClaimMock":[3205],"IERC1155Mintable":[903],"IForwarderRegistry":[727]},"id":3206,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3157,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:29"},{"absolutePath":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol","file":"../../merkleClaim/ERC1155ClaimWindowMerkleClaim.sol","id":3159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3206,"sourceUnit":3096,"src":"57:98:29","symbolAliases":[{"foreign":{"id":3158,"name":"ERC1155ClaimWindowMerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3095,"src":"65:29:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":3161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3206,"sourceUnit":904,"src":"156:117:29","symbolAliases":[{"foreign":{"id":3160,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":903,"src":"164:16:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3206,"sourceUnit":728,"src":"274:114:29","symbolAliases":[{"foreign":{"id":3162,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"282:18:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3164,"name":"ERC1155ClaimWindowMerkleClaim","nameLocations":["436:29:29"],"nodeType":"IdentifierPath","referencedDeclaration":3095,"src":"436:29:29"},"id":3165,"nodeType":"InheritanceSpecifier","src":"436:29:29"}],"canonicalName":"ERC1155ClaimWindowMerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3205,"linearizedBaseContracts":[3205,3095,32,414,431,80,1293,126,581,713,701],"name":"ERC1155ClaimWindowMerkleClaimMock","nameLocation":"399:33:29","nodeType":"ContractDefinition","nodes":[{"body":{"id":3184,"nodeType":"Block","src":"716:2:29","statements":[]},"id":3185,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3178,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3167,"src":"660:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3179,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3169,"src":"669:10:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3180,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"681:14:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},{"id":3181,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3175,"src":"697:17:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":3182,"kind":"baseConstructorSpecifier","modifierName":{"id":3177,"name":"ERC1155ClaimWindowMerkleClaim","nameLocations":["630:29:29"],"nodeType":"IdentifierPath","referencedDeclaration":3095,"src":"630:29:29"},"nodeType":"ModifierInvocation","src":"630:85:29"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3176,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3167,"mutability":"mutable","name":"tokenId","nameLocation":"501:7:29","nodeType":"VariableDeclaration","scope":3185,"src":"493:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3166,"name":"uint256","nodeType":"ElementaryTypeName","src":"493:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3169,"mutability":"mutable","name":"mintSupply","nameLocation":"526:10:29","nodeType":"VariableDeclaration","scope":3185,"src":"518:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3168,"name":"uint256","nodeType":"ElementaryTypeName","src":"518:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3172,"mutability":"mutable","name":"rewardContract","nameLocation":"563:14:29","nodeType":"VariableDeclaration","scope":3185,"src":"546:31:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"},"typeName":{"id":3171,"nodeType":"UserDefinedTypeName","pathNode":{"id":3170,"name":"IERC1155Mintable","nameLocations":["546:16:29"],"nodeType":"IdentifierPath","referencedDeclaration":903,"src":"546:16:29"},"referencedDeclaration":903,"src":"546:16:29","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$903","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":3175,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"606:17:29","nodeType":"VariableDeclaration","scope":3185,"src":"587:36:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":3174,"nodeType":"UserDefinedTypeName","pathNode":{"id":3173,"name":"IForwarderRegistry","nameLocations":["587:18:29"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"587:18:29"},"referencedDeclaration":727,"src":"587:18:29","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"483:146:29"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[],"src":"716:0:29"},"scope":3205,"src":"472:246:29","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3193,"nodeType":"Block","src":"779:36:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3190,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2883],"referencedDeclaration":2883,"src":"796:10:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"796:12:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3189,"id":3192,"nodeType":"Return","src":"789:19:29"}]},"functionSelector":"d1a91ff2","id":3194,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"733:11:29","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[],"src":"744:2:29"},"returnParameters":{"id":3189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3194,"src":"770:7:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3187,"name":"address","nodeType":"ElementaryTypeName","src":"770:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"769:9:29"},"scope":3205,"src":"724:91:29","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3203,"nodeType":"Block","src":"991:34:29","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":3200,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2897],"referencedDeclaration":2897,"src":"1008:8:29","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:10:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3199,"id":3202,"nodeType":"Return","src":"1001:17:29"}]},"documentation":{"id":3195,"nodeType":"StructuredDocumentation","src":"821:105:29","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":3204,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"940:9:29","nodeType":"FunctionDefinition","parameters":{"id":3196,"nodeType":"ParameterList","parameters":[],"src":"949:2:29"},"returnParameters":{"id":3199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3204,"src":"975:14:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3197,"name":"bytes","nodeType":"ElementaryTypeName","src":"975:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"974:16:29"},"scope":3205,"src":"931:94:29","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3206,"src":"390:637:29","usedErrors":[94,419,2799,2806,2813,2816,2821,2826,2835],"usedEvents":[110,2781,2792]}],"src":"32:996:29"},"id":29}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/OrbsBurnPool.sol":{"OrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.","kind":"dev","methods":{"constructor":{"details":"Throws if the cycle duration is zero.Throws if the max cycle is zero.","params":{"cycleDuration":"The duration of each cycle.","forwarderRegistry":"The forwarder registry contract.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","merkleRoot":"The Merkle root of the Puzzle Game multiplier claim.","missingOrb":"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.","orbOfPower":"The IERC1155Burnable erc1155 contract burn to generate ASH."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"OrbsBurnPool Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2086":{"entryPoint":null,"id":2086,"parameterSlots":7,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_846":{"entryPoint":null,"id":846,"parameterSlots":0,"returnSlots":0},"@layout_531":{"entryPoint":221,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":275,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":393,"id":null,"parameterSlots":2,"returnSlots":7},"checked_sub_t_uint256":{"entryPoint":516,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":368,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1295:30","nodeType":"YulBlock","src":"0:1295:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"77:86:30","nodeType":"YulBlock","src":"77:86:30","statements":[{"body":{"nativeSrc":"141:16:30","nodeType":"YulBlock","src":"141:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:30","nodeType":"YulLiteral","src":"150:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:30","nodeType":"YulLiteral","src":"153:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:30","nodeType":"YulIdentifier","src":"143:6:30"},"nativeSrc":"143:12:30","nodeType":"YulFunctionCall","src":"143:12:30"},"nativeSrc":"143:12:30","nodeType":"YulExpressionStatement","src":"143:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:30","nodeType":"YulIdentifier","src":"100:5:30"},{"arguments":[{"name":"value","nativeSrc":"111:5:30","nodeType":"YulIdentifier","src":"111:5:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:30","nodeType":"YulLiteral","src":"126:3:30","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:30","nodeType":"YulLiteral","src":"131:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:30","nodeType":"YulIdentifier","src":"122:3:30"},"nativeSrc":"122:11:30","nodeType":"YulFunctionCall","src":"122:11:30"},{"kind":"number","nativeSrc":"135:1:30","nodeType":"YulLiteral","src":"135:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:30","nodeType":"YulIdentifier","src":"118:3:30"},"nativeSrc":"118:19:30","nodeType":"YulFunctionCall","src":"118:19:30"}],"functionName":{"name":"and","nativeSrc":"107:3:30","nodeType":"YulIdentifier","src":"107:3:30"},"nativeSrc":"107:31:30","nodeType":"YulFunctionCall","src":"107:31:30"}],"functionName":{"name":"eq","nativeSrc":"97:2:30","nodeType":"YulIdentifier","src":"97:2:30"},"nativeSrc":"97:42:30","nodeType":"YulFunctionCall","src":"97:42:30"}],"functionName":{"name":"iszero","nativeSrc":"90:6:30","nodeType":"YulIdentifier","src":"90:6:30"},"nativeSrc":"90:50:30","nodeType":"YulFunctionCall","src":"90:50:30"},"nativeSrc":"87:70:30","nodeType":"YulIf","src":"87:70:30"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:30","nodeType":"YulTypedName","src":"66:5:30","type":""}],"src":"14:149:30"},{"body":{"nativeSrc":"425:638:30","nodeType":"YulBlock","src":"425:638:30","statements":[{"body":{"nativeSrc":"472:16:30","nodeType":"YulBlock","src":"472:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"481:1:30","nodeType":"YulLiteral","src":"481:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"484:1:30","nodeType":"YulLiteral","src":"484:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"474:6:30","nodeType":"YulIdentifier","src":"474:6:30"},"nativeSrc":"474:12:30","nodeType":"YulFunctionCall","src":"474:12:30"},"nativeSrc":"474:12:30","nodeType":"YulExpressionStatement","src":"474:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"446:7:30","nodeType":"YulIdentifier","src":"446:7:30"},{"name":"headStart","nativeSrc":"455:9:30","nodeType":"YulIdentifier","src":"455:9:30"}],"functionName":{"name":"sub","nativeSrc":"442:3:30","nodeType":"YulIdentifier","src":"442:3:30"},"nativeSrc":"442:23:30","nodeType":"YulFunctionCall","src":"442:23:30"},{"kind":"number","nativeSrc":"467:3:30","nodeType":"YulLiteral","src":"467:3:30","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"438:3:30","nodeType":"YulIdentifier","src":"438:3:30"},"nativeSrc":"438:33:30","nodeType":"YulFunctionCall","src":"438:33:30"},"nativeSrc":"435:53:30","nodeType":"YulIf","src":"435:53:30"},{"nativeSrc":"497:26:30","nodeType":"YulAssignment","src":"497:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"513:9:30","nodeType":"YulIdentifier","src":"513:9:30"}],"functionName":{"name":"mload","nativeSrc":"507:5:30","nodeType":"YulIdentifier","src":"507:5:30"},"nativeSrc":"507:16:30","nodeType":"YulFunctionCall","src":"507:16:30"},"variableNames":[{"name":"value0","nativeSrc":"497:6:30","nodeType":"YulIdentifier","src":"497:6:30"}]},{"nativeSrc":"532:35:30","nodeType":"YulAssignment","src":"532:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"552:9:30","nodeType":"YulIdentifier","src":"552:9:30"},{"kind":"number","nativeSrc":"563:2:30","nodeType":"YulLiteral","src":"563:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"548:3:30","nodeType":"YulIdentifier","src":"548:3:30"},"nativeSrc":"548:18:30","nodeType":"YulFunctionCall","src":"548:18:30"}],"functionName":{"name":"mload","nativeSrc":"542:5:30","nodeType":"YulIdentifier","src":"542:5:30"},"nativeSrc":"542:25:30","nodeType":"YulFunctionCall","src":"542:25:30"},"variableNames":[{"name":"value1","nativeSrc":"532:6:30","nodeType":"YulIdentifier","src":"532:6:30"}]},{"nativeSrc":"576:35:30","nodeType":"YulAssignment","src":"576:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:30","nodeType":"YulIdentifier","src":"596:9:30"},{"kind":"number","nativeSrc":"607:2:30","nodeType":"YulLiteral","src":"607:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"592:3:30","nodeType":"YulIdentifier","src":"592:3:30"},"nativeSrc":"592:18:30","nodeType":"YulFunctionCall","src":"592:18:30"}],"functionName":{"name":"mload","nativeSrc":"586:5:30","nodeType":"YulIdentifier","src":"586:5:30"},"nativeSrc":"586:25:30","nodeType":"YulFunctionCall","src":"586:25:30"},"variableNames":[{"name":"value2","nativeSrc":"576:6:30","nodeType":"YulIdentifier","src":"576:6:30"}]},{"nativeSrc":"620:35:30","nodeType":"YulAssignment","src":"620:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"640:9:30","nodeType":"YulIdentifier","src":"640:9:30"},{"kind":"number","nativeSrc":"651:2:30","nodeType":"YulLiteral","src":"651:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"636:3:30","nodeType":"YulIdentifier","src":"636:3:30"},"nativeSrc":"636:18:30","nodeType":"YulFunctionCall","src":"636:18:30"}],"functionName":{"name":"mload","nativeSrc":"630:5:30","nodeType":"YulIdentifier","src":"630:5:30"},"nativeSrc":"630:25:30","nodeType":"YulFunctionCall","src":"630:25:30"},"variableNames":[{"name":"value3","nativeSrc":"620:6:30","nodeType":"YulIdentifier","src":"620:6:30"}]},{"nativeSrc":"664:39:30","nodeType":"YulVariableDeclaration","src":"664:39:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"687:9:30","nodeType":"YulIdentifier","src":"687:9:30"},{"kind":"number","nativeSrc":"698:3:30","nodeType":"YulLiteral","src":"698:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"683:3:30","nodeType":"YulIdentifier","src":"683:3:30"},"nativeSrc":"683:19:30","nodeType":"YulFunctionCall","src":"683:19:30"}],"functionName":{"name":"mload","nativeSrc":"677:5:30","nodeType":"YulIdentifier","src":"677:5:30"},"nativeSrc":"677:26:30","nodeType":"YulFunctionCall","src":"677:26:30"},"variables":[{"name":"value","nativeSrc":"668:5:30","nodeType":"YulTypedName","src":"668:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"755:5:30","nodeType":"YulIdentifier","src":"755:5:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"712:42:30","nodeType":"YulIdentifier","src":"712:42:30"},"nativeSrc":"712:49:30","nodeType":"YulFunctionCall","src":"712:49:30"},"nativeSrc":"712:49:30","nodeType":"YulExpressionStatement","src":"712:49:30"},{"nativeSrc":"770:15:30","nodeType":"YulAssignment","src":"770:15:30","value":{"name":"value","nativeSrc":"780:5:30","nodeType":"YulIdentifier","src":"780:5:30"},"variableNames":[{"name":"value4","nativeSrc":"770:6:30","nodeType":"YulIdentifier","src":"770:6:30"}]},{"nativeSrc":"794:41:30","nodeType":"YulVariableDeclaration","src":"794:41:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"819:9:30","nodeType":"YulIdentifier","src":"819:9:30"},{"kind":"number","nativeSrc":"830:3:30","nodeType":"YulLiteral","src":"830:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"815:3:30","nodeType":"YulIdentifier","src":"815:3:30"},"nativeSrc":"815:19:30","nodeType":"YulFunctionCall","src":"815:19:30"}],"functionName":{"name":"mload","nativeSrc":"809:5:30","nodeType":"YulIdentifier","src":"809:5:30"},"nativeSrc":"809:26:30","nodeType":"YulFunctionCall","src":"809:26:30"},"variables":[{"name":"value_1","nativeSrc":"798:7:30","nodeType":"YulTypedName","src":"798:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"887:7:30","nodeType":"YulIdentifier","src":"887:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"844:42:30","nodeType":"YulIdentifier","src":"844:42:30"},"nativeSrc":"844:51:30","nodeType":"YulFunctionCall","src":"844:51:30"},"nativeSrc":"844:51:30","nodeType":"YulExpressionStatement","src":"844:51:30"},{"nativeSrc":"904:17:30","nodeType":"YulAssignment","src":"904:17:30","value":{"name":"value_1","nativeSrc":"914:7:30","nodeType":"YulIdentifier","src":"914:7:30"},"variableNames":[{"name":"value5","nativeSrc":"904:6:30","nodeType":"YulIdentifier","src":"904:6:30"}]},{"nativeSrc":"930:41:30","nodeType":"YulVariableDeclaration","src":"930:41:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"955:9:30","nodeType":"YulIdentifier","src":"955:9:30"},{"kind":"number","nativeSrc":"966:3:30","nodeType":"YulLiteral","src":"966:3:30","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"951:3:30","nodeType":"YulIdentifier","src":"951:3:30"},"nativeSrc":"951:19:30","nodeType":"YulFunctionCall","src":"951:19:30"}],"functionName":{"name":"mload","nativeSrc":"945:5:30","nodeType":"YulIdentifier","src":"945:5:30"},"nativeSrc":"945:26:30","nodeType":"YulFunctionCall","src":"945:26:30"},"variables":[{"name":"value_2","nativeSrc":"934:7:30","nodeType":"YulTypedName","src":"934:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1023:7:30","nodeType":"YulIdentifier","src":"1023:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"980:42:30","nodeType":"YulIdentifier","src":"980:42:30"},"nativeSrc":"980:51:30","nodeType":"YulFunctionCall","src":"980:51:30"},"nativeSrc":"980:51:30","nodeType":"YulExpressionStatement","src":"980:51:30"},{"nativeSrc":"1040:17:30","nodeType":"YulAssignment","src":"1040:17:30","value":{"name":"value_2","nativeSrc":"1050:7:30","nodeType":"YulIdentifier","src":"1050:7:30"},"variableNames":[{"name":"value6","nativeSrc":"1040:6:30","nodeType":"YulIdentifier","src":"1040:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:895:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"343:9:30","nodeType":"YulTypedName","src":"343:9:30","type":""},{"name":"dataEnd","nativeSrc":"354:7:30","nodeType":"YulTypedName","src":"354:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"366:6:30","nodeType":"YulTypedName","src":"366:6:30","type":""},{"name":"value1","nativeSrc":"374:6:30","nodeType":"YulTypedName","src":"374:6:30","type":""},{"name":"value2","nativeSrc":"382:6:30","nodeType":"YulTypedName","src":"382:6:30","type":""},{"name":"value3","nativeSrc":"390:6:30","nodeType":"YulTypedName","src":"390:6:30","type":""},{"name":"value4","nativeSrc":"398:6:30","nodeType":"YulTypedName","src":"398:6:30","type":""},{"name":"value5","nativeSrc":"406:6:30","nodeType":"YulTypedName","src":"406:6:30","type":""},{"name":"value6","nativeSrc":"414:6:30","nodeType":"YulTypedName","src":"414:6:30","type":""}],"src":"168:895:30"},{"body":{"nativeSrc":"1117:176:30","nodeType":"YulBlock","src":"1117:176:30","statements":[{"nativeSrc":"1127:17:30","nodeType":"YulAssignment","src":"1127:17:30","value":{"arguments":[{"name":"x","nativeSrc":"1139:1:30","nodeType":"YulIdentifier","src":"1139:1:30"},{"name":"y","nativeSrc":"1142:1:30","nodeType":"YulIdentifier","src":"1142:1:30"}],"functionName":{"name":"sub","nativeSrc":"1135:3:30","nodeType":"YulIdentifier","src":"1135:3:30"},"nativeSrc":"1135:9:30","nodeType":"YulFunctionCall","src":"1135:9:30"},"variableNames":[{"name":"diff","nativeSrc":"1127:4:30","nodeType":"YulIdentifier","src":"1127:4:30"}]},{"body":{"nativeSrc":"1176:111:30","nodeType":"YulBlock","src":"1176:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1197:1:30","nodeType":"YulLiteral","src":"1197:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1204:3:30","nodeType":"YulLiteral","src":"1204:3:30","type":"","value":"224"},{"kind":"number","nativeSrc":"1209:10:30","nodeType":"YulLiteral","src":"1209:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1200:3:30","nodeType":"YulIdentifier","src":"1200:3:30"},"nativeSrc":"1200:20:30","nodeType":"YulFunctionCall","src":"1200:20:30"}],"functionName":{"name":"mstore","nativeSrc":"1190:6:30","nodeType":"YulIdentifier","src":"1190:6:30"},"nativeSrc":"1190:31:30","nodeType":"YulFunctionCall","src":"1190:31:30"},"nativeSrc":"1190:31:30","nodeType":"YulExpressionStatement","src":"1190:31:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1241:1:30","nodeType":"YulLiteral","src":"1241:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"1244:4:30","nodeType":"YulLiteral","src":"1244:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1234:6:30","nodeType":"YulIdentifier","src":"1234:6:30"},"nativeSrc":"1234:15:30","nodeType":"YulFunctionCall","src":"1234:15:30"},"nativeSrc":"1234:15:30","nodeType":"YulExpressionStatement","src":"1234:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1269:1:30","nodeType":"YulLiteral","src":"1269:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1272:4:30","nodeType":"YulLiteral","src":"1272:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1262:6:30","nodeType":"YulIdentifier","src":"1262:6:30"},"nativeSrc":"1262:15:30","nodeType":"YulFunctionCall","src":"1262:15:30"},"nativeSrc":"1262:15:30","nodeType":"YulExpressionStatement","src":"1262:15:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1159:4:30","nodeType":"YulIdentifier","src":"1159:4:30"},{"name":"x","nativeSrc":"1165:1:30","nodeType":"YulIdentifier","src":"1165:1:30"}],"functionName":{"name":"gt","nativeSrc":"1156:2:30","nodeType":"YulIdentifier","src":"1156:2:30"},"nativeSrc":"1156:11:30","nodeType":"YulFunctionCall","src":"1156:11:30"},"nativeSrc":"1153:134:30","nodeType":"YulIf","src":"1153:134:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"1068:225:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1099:1:30","nodeType":"YulTypedName","src":"1099:1:30","type":""},{"name":"y","nativeSrc":"1102:1:30","nodeType":"YulTypedName","src":"1102:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1108:4:30","nodeType":"YulTypedName","src":"1108:4:30","type":""}],"src":"1068:225:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        validator_revert_contract_IERC1155Burnable(value)\n        value4 := value\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value5 := value_1\n        let value_2 := mload(add(headStart, 192))\n        validator_revert_contract_IERC1155Burnable(value_2)\n        value6 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001a4638038062001a46833981016040819052620000359162000189565b6001600160a01b03811660805262000062630271189760e51b60016200005a620000dd565b919062000113565b60e087905260008690036200008a5760405163b870efbd60e01b815260040160405180910390fd5b6101008690526000859003620000b357604051637e5e559b60e11b815260040160405180910390fd5b5061012093909352610140919091526001600160a01b0390811660a0521660c05250620002269050565b6000806200010d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000204565b92915050565b600160e01b6001600160e01b031983160162000142576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146200018657600080fd5b50565b600080600080600080600060e0888a031215620001a557600080fd5b875196506020880151955060408801519450606088015193506080880151620001ce8162000170565b60a0890151909350620001e18162000170565b60c0890151909250620001f48162000170565b8091505092959891949750929550565b818103818111156200010d57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051610120516101405161177f620002c760003960008181610303015281816109c60152610f4d0152600081816101e0015281816105530152610d4e01526000818161041a01526104750152600081816102b101526104990152600081816103f30152610c5a01526000818161022f015281816104e7015261086c015260008181610278015261033d015261177f6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806351e75e8b116100e3578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610415578063f23a6e611461043c578063f95d10161461044f57600080fd5b8063bc197c81146103a2578063c131754e146103e6578063cd18a34f146103ee57600080fd5b8063aa918fd5116100bd578063aa918fd5146102a4578063ab504e731461037a578063bab2f5521461039a57600080fd5b806351e75e8b146102fe57806355f5b0a814610325578063572b6c051461032d57600080fd5b806328a979cf11610145578063424ab4f71161011f578063424ab4f7146102a4578063491bde66146102ac5780634dac1c2b146102d357600080fd5b806328a979cf1461022a5780632b4c9f16146102765780633838a2011461029c57600080fd5b80630455645a116101765780630455645a1461020257806312828b7f1461020a5780631de0e40b146101c557600080fd5b806301ffc9a71461019d5780630277640e146101c5578063043063bc146101db575b600080fd5b6101b06101ab3660046111f5565b610457565b60405190151581526020015b60405180910390f35b6101cd600181565b6040519081526020016101bc565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600581565b6101cd610218366004611260565b60026020526000908152604090205481565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b6101cd601981565b6101cd600381565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd6102e136600461127b565b600160209081526000928352604080842090915290825290205481565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600281565b6101b061033b366004611260565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cd6103883660046112a7565b60006020819052908152604090205481565b6101cd610471565b6103b56103b036600461134e565b6104cd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101bc565b6101cd601081565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6103b561044a366004611409565b610c40565b6101cd600981565b600061046b82610465611062565b90611090565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104be7f0000000000000000000000000000000000000000000000000000000000000000426114b0565b6104c891906114c3565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610545576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600061054f610471565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105ae576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105f29030908c908c908c908c90600401611549565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b505050506000805b888110156108fe5787878281811061064257610642611598565b905060200201356000036106dc57338a8a8381811061066357610663611598565b9050602002013589898481811061067c5761067c611598565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161053c565b8989828181106106ee576106ee611598565b9050602002013560010361073257600188888381811061071057610710611598565b9050602002013561072191906115c7565b61072b90836115de565b91506108f6565b89898281811061074457610744611598565b9050602002013560020361076657600388888381811061071057610710611598565b89898281811061077857610778611598565b9050602002013560030361079a57600388888381811061071057610710611598565b8989828181106107ac576107ac611598565b905060200201356004036107ce57600588888381811061071057610710611598565b8989828181106107e0576107e0611598565b9050602002013560050361080257600988888381811061071057610710611598565b89898281811061081457610814611598565b9050602002013560060361083657601988888381811061071057610710611598565b89898281811061084857610848611598565b9050602002013560070361086a57601088888381811061071057610710611598565b7f00000000000000000000000000000000000000000000000000000000000000008a8a8381811061089d5761089d611598565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161053c565b600101610628565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610ad25760008061093c888a018a611620565b91509150608083901c600003610ab2576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506109eb837f00000000000000000000000000000000000000000000000000000000000000008361116a565b610a40576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161053c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b979097179687905581518781529081018790528692917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a250505b612710610abf82876115c7565b610ac991906114c3565b94505050610af9565b608081901c8015610af757612710610aea82866115c7565b610af491906114c3565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b1f57610b1c81856115c7565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b5a9086906115de565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610baa9084906115de565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c049796959493929190611702565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610cb3576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161053c565b60018514610cf6576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161053c565b83600114610d40576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161053c565b6000610d4a610471565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610da9576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e31576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161053c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b5050506002821790508415610fd157608082901c600003610fd157600080610ece87890189611620565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610f72837f00000000000000000000000000000000000000000000000000000000000000008361116a565b610fc7576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161053c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061046b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6114b0565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110e05750600061046b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111315750600161046b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826111778584611180565b14949350505050565b600081815b84518110156111bb576111b1828683815181106111a4576111a4611598565b60200260200101516111c3565b9150600101611185565b509392505050565b60008183106111df5760008281526020849052604090206111ee565b60008381526020839052604090205b9392505050565b60006020828403121561120757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111ee57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461125b57600080fd5b919050565b60006020828403121561127257600080fd5b6111ee82611237565b6000806040838503121561128e57600080fd5b8235915061129e60208401611237565b90509250929050565b6000602082840312156112b957600080fd5b5035919050565b60008083601f8401126112d257600080fd5b50813567ffffffffffffffff8111156112ea57600080fd5b6020830191508360208260051b850101111561130557600080fd5b9250929050565b60008083601f84011261131e57600080fd5b50813567ffffffffffffffff81111561133657600080fd5b60208301915083602082850101111561130557600080fd5b60008060008060008060008060a0898b03121561136a57600080fd5b61137389611237565b975061138160208a01611237565b9650604089013567ffffffffffffffff8082111561139e57600080fd5b6113aa8c838d016112c0565b909850965060608b01359150808211156113c357600080fd5b6113cf8c838d016112c0565b909650945060808b01359150808211156113e857600080fd5b506113f58b828c0161130c565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561142257600080fd5b61142b87611237565b955061143960208801611237565b94506040870135935060608701359250608087013567ffffffffffffffff81111561146357600080fd5b61146f89828a0161130c565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046b5761046b611481565b6000826114f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561153057600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006115796060830186886114fe565b828103604084015261158c8185876114fe565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761046b5761046b611481565b8082018082111561046b5761046b611481565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561163357600080fd5b823567ffffffffffffffff8082111561164b57600080fd5b818501915085601f83011261165f57600080fd5b8135602082821115611673576116736115f1565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156116b6576116b66115f1565b6040529283528183019350848101820192898411156116d457600080fd5b948201945b838610156116f2578535855294820194938201936116d9565b9997909101359750505050505050565b60a08152600061171660a08301898b6114fe565b828103602084015261172981888a6114fe565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220b064a5050b9585e90268c9d40b032184816777bed3c72bdbc643b01f45b6363064736f6c63430008160033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A46 CODESIZE SUB DUP1 PUSH3 0x1A46 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x189 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE PUSH3 0x62 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x5A PUSH3 0xDD JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x113 JUMP JUMPDEST PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH1 0x0 DUP7 SWAP1 SUB PUSH3 0x8A JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0xB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x120 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x140 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE AND PUSH1 0xC0 MSTORE POP PUSH3 0x226 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x10D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x204 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x142 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x1A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0x1CE DUP2 PUSH3 0x170 JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x1E1 DUP2 PUSH3 0x170 JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x1F4 DUP2 PUSH3 0x170 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x10D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x177F PUSH3 0x2C7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x303 ADD MSTORE DUP2 DUP2 PUSH2 0x9C6 ADD MSTORE PUSH2 0xF4D ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E0 ADD MSTORE DUP2 DUP2 PUSH2 0x553 ADD MSTORE PUSH2 0xD4E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x41A ADD MSTORE PUSH2 0x475 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B1 ADD MSTORE PUSH2 0x499 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3F3 ADD MSTORE PUSH2 0xC5A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x22F ADD MSTORE DUP2 DUP2 PUSH2 0x4E7 ADD MSTORE PUSH2 0x86C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x278 ADD MSTORE PUSH2 0x33D ADD MSTORE PUSH2 0x177F PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH32 0x0 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x471 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x134E JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x1409 JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B DUP3 PUSH2 0x465 PUSH2 0x1062 JUMP JUMPDEST SWAP1 PUSH2 0x1090 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x4BE PUSH32 0x0 TIMESTAMP PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x5F2 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x8FE JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x642 JUMPI PUSH2 0x642 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x6DC JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x67C JUMPI PUSH2 0x67C PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x732 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0x72B SWAP1 DUP4 PUSH2 0x15DE JUMP JUMPDEST SWAP2 POP PUSH2 0x8F6 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x744 JUMPI PUSH2 0x744 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x766 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x778 JUMPI PUSH2 0x778 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x79A JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x7CE JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x802 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x836 JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x848 JUMPI PUSH2 0x848 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x86A JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x89D JUMPI PUSH2 0x89D PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x628 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP1 PUSH2 0x93C DUP9 DUP11 ADD DUP11 PUSH2 0x1620 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x9EB DUP4 PUSH32 0x0 DUP4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0xA40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL SWAP8 SWAP1 SWAP8 OR SWAP7 DUP8 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP7 SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xABF DUP3 DUP8 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0xAC9 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xAF9 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xAF7 JUMPI PUSH2 0x2710 PUSH2 0xAEA DUP3 DUP7 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0xAF4 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1C DUP2 DUP6 PUSH2 0x15C7 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB5A SWAP1 DUP7 SWAP1 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBAA SWAP1 DUP5 SWAP1 PUSH2 0x15DE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC04 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xCB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4A PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xFD1 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xFD1 JUMPI PUSH1 0x0 DUP1 PUSH2 0xECE DUP8 DUP10 ADD DUP10 PUSH2 0x1620 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xF72 DUP4 PUSH32 0x0 DUP4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0xFC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10E0 JUMPI POP PUSH1 0x0 PUSH2 0x46B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1131 JUMPI POP PUSH1 0x1 PUSH2 0x46B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1177 DUP6 DUP5 PUSH2 0x1180 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x11B1 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11A4 JUMPI PUSH2 0x11A4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11C3 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1185 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x11EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x125B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11EE DUP3 PUSH2 0x1237 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x129E PUSH1 0x20 DUP5 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1373 DUP10 PUSH2 0x1237 JUMP JUMPDEST SWAP8 POP PUSH2 0x1381 PUSH1 0x20 DUP11 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AA DUP13 DUP4 DUP14 ADD PUSH2 0x12C0 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CF DUP13 DUP4 DUP14 ADD PUSH2 0x12C0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F5 DUP12 DUP3 DUP13 ADD PUSH2 0x130C JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x142B DUP8 PUSH2 0x1237 JUMP JUMPDEST SWAP6 POP PUSH2 0x1439 PUSH1 0x20 DUP9 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146F DUP10 DUP3 DUP11 ADD PUSH2 0x130C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14F9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1579 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x14FE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x158C DUP2 DUP6 DUP8 PUSH2 0x14FE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1673 JUMPI PUSH2 0x1673 PUSH2 0x15F1 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B6 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x16D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x16F2 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x16D9 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1716 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x14FE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1729 DUP2 DUP9 DUP11 PUSH2 0x14FE JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 PUSH5 0xA5050B9585 0xE9 MUL PUSH9 0xC9D40B032184816777 0xBE 0xD3 0xC7 0x2B 0xDB 0xC6 NUMBER 0xB0 0x1F GASLIMIT 0xB6 CALLDATASIZE ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"889:11666:26:-:0;;;4906:672;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;780:103:18;-1:-1:-1;;;878:4:18;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;5212:26:26::1;::::0;;;5270:1:::1;5253:18:::0;;;5249:75:::1;;5294:19;;-1:-1:-1::0;;;5294:19:26::1;;;;;;;;;;;5249:75;5333:30;::::0;;;5390:1:::1;5378:13:::0;;;5374:65:::1;;5414:14;;-1:-1:-1::0;;;5414:14:26::1;;;;;;;;;;;5374:65;-1:-1:-1::0;5448:20:26::1;::::0;;;;5478:24:::1;::::0;;;;-1:-1:-1;;;;;5512:25:26;;::::1;;::::0;5547:24:::1;;::::0;-1:-1:-1;889:11666:26;;-1:-1:-1;889:11666:26;1705:174:10;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:10:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:30:-;-1:-1:-1;;;;;107:31:30;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:895::-;366:6;374;382;390;398;406;414;467:3;455:9;446:7;442:23;438:33;435:53;;;484:1;481;474:12;435:53;513:9;507:16;497:26;;563:2;552:9;548:18;542:25;532:35;;607:2;596:9;592:18;586:25;576:35;;651:2;640:9;636:18;630:25;620:35;;698:3;687:9;683:19;677:26;712:49;755:5;712:49;:::i;:::-;830:3;815:19;;809:26;780:5;;-1:-1:-1;844:51:30;809:26;844:51;:::i;:::-;966:3;951:19;;945:26;914:7;;-1:-1:-1;980:51:30;945:26;980:51;:::i;:::-;1050:7;1040:17;;;168:895;;;;;;;;;;:::o;1068:225::-;1135:9;;;1156:11;;;1153:134;;;1209:10;1204:3;1200:20;1197:1;1190:31;1244:4;1241:1;1234:15;1272:4;1269:1;1262:15;1068:225;889:11666:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_1890":{"entryPoint":null,"id":1890,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_1893":{"entryPoint":null,"id":1893,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_1896":{"entryPoint":null,"id":1896,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_1899":{"entryPoint":null,"id":1899,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_1902":{"entryPoint":null,"id":1902,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_1905":{"entryPoint":null,"id":1905,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_1908":{"entryPoint":null,"id":1908,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_1926":{"entryPoint":null,"id":1926,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1923":{"entryPoint":null,"id":1923,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1929":{"entryPoint":null,"id":1929,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_1932":{"entryPoint":null,"id":1932,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_1920":{"entryPoint":null,"id":1920,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_1916":{"entryPoint":null,"id":1916,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_1912":{"entryPoint":null,"id":1912,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1854":{"entryPoint":null,"id":1854,"parameterSlots":2,"returnSlots":1},"@_hashPair_1843":{"entryPoint":4547,"id":1843,"parameterSlots":2,"returnSlots":1},"@currentCycle_2127":{"entryPoint":1137,"id":2127,"parameterSlots":0,"returnSlots":1},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_531":{"entryPoint":4194,"id":531,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2706":{"entryPoint":1229,"id":2706,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2313":{"entryPoint":3136,"id":2313,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_1949":{"entryPoint":null,"id":1949,"parameterSlots":0,"returnSlots":0},"@processProof_1438":{"entryPoint":4480,"id":1438,"parameterSlots":2,"returnSlots":1},"@supportsInterface_413":{"entryPoint":1111,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":4240,"id":519,"parameterSlots":2,"returnSlots":1},"@totalAshPerCycle_1937":{"entryPoint":null,"id":1937,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_1944":{"entryPoint":null,"id":1944,"parameterSlots":0,"returnSlots":0},"@verify_1377":{"entryPoint":4458,"id":1377,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4663,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":4800,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":4876,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4704,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":4942,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":5129,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":5664,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4597,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4775,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":4731,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5374,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5449,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":5890,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5598,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5315,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5575,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5296,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":5249,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5528,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5617,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10915:30","nodeType":"YulBlock","src":"0:10915:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"83:263:30","nodeType":"YulBlock","src":"83:263:30","statements":[{"body":{"nativeSrc":"129:16:30","nodeType":"YulBlock","src":"129:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:30","nodeType":"YulLiteral","src":"138:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:30","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:30","nodeType":"YulIdentifier","src":"131:6:30"},"nativeSrc":"131:12:30","nodeType":"YulFunctionCall","src":"131:12:30"},"nativeSrc":"131:12:30","nodeType":"YulExpressionStatement","src":"131:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:30","nodeType":"YulIdentifier","src":"104:7:30"},{"name":"headStart","nativeSrc":"113:9:30","nodeType":"YulIdentifier","src":"113:9:30"}],"functionName":{"name":"sub","nativeSrc":"100:3:30","nodeType":"YulIdentifier","src":"100:3:30"},"nativeSrc":"100:23:30","nodeType":"YulFunctionCall","src":"100:23:30"},{"kind":"number","nativeSrc":"125:2:30","nodeType":"YulLiteral","src":"125:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:30","nodeType":"YulIdentifier","src":"96:3:30"},"nativeSrc":"96:32:30","nodeType":"YulFunctionCall","src":"96:32:30"},"nativeSrc":"93:52:30","nodeType":"YulIf","src":"93:52:30"},{"nativeSrc":"154:36:30","nodeType":"YulVariableDeclaration","src":"154:36:30","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:30","nodeType":"YulIdentifier","src":"180:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:30","nodeType":"YulIdentifier","src":"167:12:30"},"nativeSrc":"167:23:30","nodeType":"YulFunctionCall","src":"167:23:30"},"variables":[{"name":"value","nativeSrc":"158:5:30","nodeType":"YulTypedName","src":"158:5:30","type":""}]},{"body":{"nativeSrc":"300:16:30","nodeType":"YulBlock","src":"300:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:30","nodeType":"YulLiteral","src":"309:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:30","nodeType":"YulLiteral","src":"312:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:30","nodeType":"YulIdentifier","src":"302:6:30"},"nativeSrc":"302:12:30","nodeType":"YulFunctionCall","src":"302:12:30"},"nativeSrc":"302:12:30","nodeType":"YulExpressionStatement","src":"302:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:30","nodeType":"YulIdentifier","src":"212:5:30"},{"arguments":[{"name":"value","nativeSrc":"223:5:30","nodeType":"YulIdentifier","src":"223:5:30"},{"kind":"number","nativeSrc":"230:66:30","nodeType":"YulLiteral","src":"230:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:30","nodeType":"YulIdentifier","src":"219:3:30"},"nativeSrc":"219:78:30","nodeType":"YulFunctionCall","src":"219:78:30"}],"functionName":{"name":"eq","nativeSrc":"209:2:30","nodeType":"YulIdentifier","src":"209:2:30"},"nativeSrc":"209:89:30","nodeType":"YulFunctionCall","src":"209:89:30"}],"functionName":{"name":"iszero","nativeSrc":"202:6:30","nodeType":"YulIdentifier","src":"202:6:30"},"nativeSrc":"202:97:30","nodeType":"YulFunctionCall","src":"202:97:30"},"nativeSrc":"199:117:30","nodeType":"YulIf","src":"199:117:30"},{"nativeSrc":"325:15:30","nodeType":"YulAssignment","src":"325:15:30","value":{"name":"value","nativeSrc":"335:5:30","nodeType":"YulIdentifier","src":"335:5:30"},"variableNames":[{"name":"value0","nativeSrc":"325:6:30","nodeType":"YulIdentifier","src":"325:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:30","nodeType":"YulTypedName","src":"49:9:30","type":""},{"name":"dataEnd","nativeSrc":"60:7:30","nodeType":"YulTypedName","src":"60:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:30","nodeType":"YulTypedName","src":"72:6:30","type":""}],"src":"14:332:30"},{"body":{"nativeSrc":"446:92:30","nodeType":"YulBlock","src":"446:92:30","statements":[{"nativeSrc":"456:26:30","nodeType":"YulAssignment","src":"456:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:30","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nativeSrc":"479:2:30","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:30","nodeType":"YulIdentifier","src":"464:3:30"},"nativeSrc":"464:18:30","nodeType":"YulFunctionCall","src":"464:18:30"},"variableNames":[{"name":"tail","nativeSrc":"456:4:30","nodeType":"YulIdentifier","src":"456:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:30","nodeType":"YulIdentifier","src":"498:9:30"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:30","nodeType":"YulIdentifier","src":"523:6:30"}],"functionName":{"name":"iszero","nativeSrc":"516:6:30","nodeType":"YulIdentifier","src":"516:6:30"},"nativeSrc":"516:14:30","nodeType":"YulFunctionCall","src":"516:14:30"}],"functionName":{"name":"iszero","nativeSrc":"509:6:30","nodeType":"YulIdentifier","src":"509:6:30"},"nativeSrc":"509:22:30","nodeType":"YulFunctionCall","src":"509:22:30"}],"functionName":{"name":"mstore","nativeSrc":"491:6:30","nodeType":"YulIdentifier","src":"491:6:30"},"nativeSrc":"491:41:30","nodeType":"YulFunctionCall","src":"491:41:30"},"nativeSrc":"491:41:30","nodeType":"YulExpressionStatement","src":"491:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:30","nodeType":"YulTypedName","src":"415:9:30","type":""},{"name":"value0","nativeSrc":"426:6:30","nodeType":"YulTypedName","src":"426:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:30","nodeType":"YulTypedName","src":"437:4:30","type":""}],"src":"351:187:30"},{"body":{"nativeSrc":"644:76:30","nodeType":"YulBlock","src":"644:76:30","statements":[{"nativeSrc":"654:26:30","nodeType":"YulAssignment","src":"654:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:30","nodeType":"YulIdentifier","src":"666:9:30"},{"kind":"number","nativeSrc":"677:2:30","nodeType":"YulLiteral","src":"677:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:30","nodeType":"YulIdentifier","src":"662:3:30"},"nativeSrc":"662:18:30","nodeType":"YulFunctionCall","src":"662:18:30"},"variableNames":[{"name":"tail","nativeSrc":"654:4:30","nodeType":"YulIdentifier","src":"654:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:30","nodeType":"YulIdentifier","src":"696:9:30"},{"name":"value0","nativeSrc":"707:6:30","nodeType":"YulIdentifier","src":"707:6:30"}],"functionName":{"name":"mstore","nativeSrc":"689:6:30","nodeType":"YulIdentifier","src":"689:6:30"},"nativeSrc":"689:25:30","nodeType":"YulFunctionCall","src":"689:25:30"},"nativeSrc":"689:25:30","nodeType":"YulExpressionStatement","src":"689:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:30","nodeType":"YulTypedName","src":"613:9:30","type":""},{"name":"value0","nativeSrc":"624:6:30","nodeType":"YulTypedName","src":"624:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:30","nodeType":"YulTypedName","src":"635:4:30","type":""}],"src":"543:177:30"},{"body":{"nativeSrc":"774:147:30","nodeType":"YulBlock","src":"774:147:30","statements":[{"nativeSrc":"784:29:30","nodeType":"YulAssignment","src":"784:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:30","nodeType":"YulIdentifier","src":"806:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:30","nodeType":"YulIdentifier","src":"793:12:30"},"nativeSrc":"793:20:30","nodeType":"YulFunctionCall","src":"793:20:30"},"variableNames":[{"name":"value","nativeSrc":"784:5:30","nodeType":"YulIdentifier","src":"784:5:30"}]},{"body":{"nativeSrc":"899:16:30","nodeType":"YulBlock","src":"899:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:30","nodeType":"YulLiteral","src":"908:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:30","nodeType":"YulLiteral","src":"911:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:30","nodeType":"YulIdentifier","src":"901:6:30"},"nativeSrc":"901:12:30","nodeType":"YulFunctionCall","src":"901:12:30"},"nativeSrc":"901:12:30","nodeType":"YulExpressionStatement","src":"901:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:30","nodeType":"YulIdentifier","src":"835:5:30"},{"arguments":[{"name":"value","nativeSrc":"846:5:30","nodeType":"YulIdentifier","src":"846:5:30"},{"kind":"number","nativeSrc":"853:42:30","nodeType":"YulLiteral","src":"853:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:30","nodeType":"YulIdentifier","src":"842:3:30"},"nativeSrc":"842:54:30","nodeType":"YulFunctionCall","src":"842:54:30"}],"functionName":{"name":"eq","nativeSrc":"832:2:30","nodeType":"YulIdentifier","src":"832:2:30"},"nativeSrc":"832:65:30","nodeType":"YulFunctionCall","src":"832:65:30"}],"functionName":{"name":"iszero","nativeSrc":"825:6:30","nodeType":"YulIdentifier","src":"825:6:30"},"nativeSrc":"825:73:30","nodeType":"YulFunctionCall","src":"825:73:30"},"nativeSrc":"822:93:30","nodeType":"YulIf","src":"822:93:30"}]},"name":"abi_decode_address","nativeSrc":"725:196:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:30","nodeType":"YulTypedName","src":"753:6:30","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:30","nodeType":"YulTypedName","src":"764:5:30","type":""}],"src":"725:196:30"},{"body":{"nativeSrc":"996:116:30","nodeType":"YulBlock","src":"996:116:30","statements":[{"body":{"nativeSrc":"1042:16:30","nodeType":"YulBlock","src":"1042:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:30","nodeType":"YulLiteral","src":"1051:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:30","nodeType":"YulLiteral","src":"1054:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:30","nodeType":"YulIdentifier","src":"1044:6:30"},"nativeSrc":"1044:12:30","nodeType":"YulFunctionCall","src":"1044:12:30"},"nativeSrc":"1044:12:30","nodeType":"YulExpressionStatement","src":"1044:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:30","nodeType":"YulIdentifier","src":"1017:7:30"},{"name":"headStart","nativeSrc":"1026:9:30","nodeType":"YulIdentifier","src":"1026:9:30"}],"functionName":{"name":"sub","nativeSrc":"1013:3:30","nodeType":"YulIdentifier","src":"1013:3:30"},"nativeSrc":"1013:23:30","nodeType":"YulFunctionCall","src":"1013:23:30"},{"kind":"number","nativeSrc":"1038:2:30","nodeType":"YulLiteral","src":"1038:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:30","nodeType":"YulIdentifier","src":"1009:3:30"},"nativeSrc":"1009:32:30","nodeType":"YulFunctionCall","src":"1009:32:30"},"nativeSrc":"1006:52:30","nodeType":"YulIf","src":"1006:52:30"},{"nativeSrc":"1067:39:30","nodeType":"YulAssignment","src":"1067:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:30","nodeType":"YulIdentifier","src":"1096:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:30","nodeType":"YulIdentifier","src":"1077:18:30"},"nativeSrc":"1077:29:30","nodeType":"YulFunctionCall","src":"1077:29:30"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:30","nodeType":"YulIdentifier","src":"1067:6:30"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:30","nodeType":"YulTypedName","src":"962:9:30","type":""},{"name":"dataEnd","nativeSrc":"973:7:30","nodeType":"YulTypedName","src":"973:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:30","nodeType":"YulTypedName","src":"985:6:30","type":""}],"src":"926:186:30"},{"body":{"nativeSrc":"1242:125:30","nodeType":"YulBlock","src":"1242:125:30","statements":[{"nativeSrc":"1252:26:30","nodeType":"YulAssignment","src":"1252:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:30","nodeType":"YulIdentifier","src":"1264:9:30"},{"kind":"number","nativeSrc":"1275:2:30","nodeType":"YulLiteral","src":"1275:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:30","nodeType":"YulIdentifier","src":"1260:3:30"},"nativeSrc":"1260:18:30","nodeType":"YulFunctionCall","src":"1260:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:30","nodeType":"YulIdentifier","src":"1252:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:30","nodeType":"YulIdentifier","src":"1294:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:30","nodeType":"YulIdentifier","src":"1309:6:30"},{"kind":"number","nativeSrc":"1317:42:30","nodeType":"YulLiteral","src":"1317:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:30","nodeType":"YulIdentifier","src":"1305:3:30"},"nativeSrc":"1305:55:30","nodeType":"YulFunctionCall","src":"1305:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:30","nodeType":"YulIdentifier","src":"1287:6:30"},"nativeSrc":"1287:74:30","nodeType":"YulFunctionCall","src":"1287:74:30"},"nativeSrc":"1287:74:30","nodeType":"YulExpressionStatement","src":"1287:74:30"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed","nativeSrc":"1117:250:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:30","nodeType":"YulTypedName","src":"1211:9:30","type":""},{"name":"value0","nativeSrc":"1222:6:30","nodeType":"YulTypedName","src":"1222:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:30","nodeType":"YulTypedName","src":"1233:4:30","type":""}],"src":"1117:250:30"},{"body":{"nativeSrc":"1499:125:30","nodeType":"YulBlock","src":"1499:125:30","statements":[{"nativeSrc":"1509:26:30","nodeType":"YulAssignment","src":"1509:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1521:9:30","nodeType":"YulIdentifier","src":"1521:9:30"},{"kind":"number","nativeSrc":"1532:2:30","nodeType":"YulLiteral","src":"1532:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1517:3:30","nodeType":"YulIdentifier","src":"1517:3:30"},"nativeSrc":"1517:18:30","nodeType":"YulFunctionCall","src":"1517:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1509:4:30","nodeType":"YulIdentifier","src":"1509:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1551:9:30","nodeType":"YulIdentifier","src":"1551:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1566:6:30","nodeType":"YulIdentifier","src":"1566:6:30"},{"kind":"number","nativeSrc":"1574:42:30","nodeType":"YulLiteral","src":"1574:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:30","nodeType":"YulIdentifier","src":"1562:3:30"},"nativeSrc":"1562:55:30","nodeType":"YulFunctionCall","src":"1562:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1544:6:30","nodeType":"YulIdentifier","src":"1544:6:30"},"nativeSrc":"1544:74:30","nodeType":"YulFunctionCall","src":"1544:74:30"},"nativeSrc":"1544:74:30","nodeType":"YulExpressionStatement","src":"1544:74:30"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"1372:252:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1468:9:30","nodeType":"YulTypedName","src":"1468:9:30","type":""},{"name":"value0","nativeSrc":"1479:6:30","nodeType":"YulTypedName","src":"1479:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1490:4:30","nodeType":"YulTypedName","src":"1490:4:30","type":""}],"src":"1372:252:30"},{"body":{"nativeSrc":"1716:167:30","nodeType":"YulBlock","src":"1716:167:30","statements":[{"body":{"nativeSrc":"1762:16:30","nodeType":"YulBlock","src":"1762:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1771:1:30","nodeType":"YulLiteral","src":"1771:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1774:1:30","nodeType":"YulLiteral","src":"1774:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1764:6:30","nodeType":"YulIdentifier","src":"1764:6:30"},"nativeSrc":"1764:12:30","nodeType":"YulFunctionCall","src":"1764:12:30"},"nativeSrc":"1764:12:30","nodeType":"YulExpressionStatement","src":"1764:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1737:7:30","nodeType":"YulIdentifier","src":"1737:7:30"},{"name":"headStart","nativeSrc":"1746:9:30","nodeType":"YulIdentifier","src":"1746:9:30"}],"functionName":{"name":"sub","nativeSrc":"1733:3:30","nodeType":"YulIdentifier","src":"1733:3:30"},"nativeSrc":"1733:23:30","nodeType":"YulFunctionCall","src":"1733:23:30"},{"kind":"number","nativeSrc":"1758:2:30","nodeType":"YulLiteral","src":"1758:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1729:3:30","nodeType":"YulIdentifier","src":"1729:3:30"},"nativeSrc":"1729:32:30","nodeType":"YulFunctionCall","src":"1729:32:30"},"nativeSrc":"1726:52:30","nodeType":"YulIf","src":"1726:52:30"},{"nativeSrc":"1787:33:30","nodeType":"YulAssignment","src":"1787:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1810:9:30","nodeType":"YulIdentifier","src":"1810:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"1797:12:30","nodeType":"YulIdentifier","src":"1797:12:30"},"nativeSrc":"1797:23:30","nodeType":"YulFunctionCall","src":"1797:23:30"},"variableNames":[{"name":"value0","nativeSrc":"1787:6:30","nodeType":"YulIdentifier","src":"1787:6:30"}]},{"nativeSrc":"1829:48:30","nodeType":"YulAssignment","src":"1829:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1862:9:30","nodeType":"YulIdentifier","src":"1862:9:30"},{"kind":"number","nativeSrc":"1873:2:30","nodeType":"YulLiteral","src":"1873:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1858:3:30","nodeType":"YulIdentifier","src":"1858:3:30"},"nativeSrc":"1858:18:30","nodeType":"YulFunctionCall","src":"1858:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1839:18:30","nodeType":"YulIdentifier","src":"1839:18:30"},"nativeSrc":"1839:38:30","nodeType":"YulFunctionCall","src":"1839:38:30"},"variableNames":[{"name":"value1","nativeSrc":"1829:6:30","nodeType":"YulIdentifier","src":"1829:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"1629:254:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1674:9:30","nodeType":"YulTypedName","src":"1674:9:30","type":""},{"name":"dataEnd","nativeSrc":"1685:7:30","nodeType":"YulTypedName","src":"1685:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1697:6:30","nodeType":"YulTypedName","src":"1697:6:30","type":""},{"name":"value1","nativeSrc":"1705:6:30","nodeType":"YulTypedName","src":"1705:6:30","type":""}],"src":"1629:254:30"},{"body":{"nativeSrc":"1989:76:30","nodeType":"YulBlock","src":"1989:76:30","statements":[{"nativeSrc":"1999:26:30","nodeType":"YulAssignment","src":"1999:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2011:9:30","nodeType":"YulIdentifier","src":"2011:9:30"},{"kind":"number","nativeSrc":"2022:2:30","nodeType":"YulLiteral","src":"2022:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2007:3:30","nodeType":"YulIdentifier","src":"2007:3:30"},"nativeSrc":"2007:18:30","nodeType":"YulFunctionCall","src":"2007:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1999:4:30","nodeType":"YulIdentifier","src":"1999:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2041:9:30","nodeType":"YulIdentifier","src":"2041:9:30"},{"name":"value0","nativeSrc":"2052:6:30","nodeType":"YulIdentifier","src":"2052:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2034:6:30","nodeType":"YulIdentifier","src":"2034:6:30"},"nativeSrc":"2034:25:30","nodeType":"YulFunctionCall","src":"2034:25:30"},"nativeSrc":"2034:25:30","nodeType":"YulExpressionStatement","src":"2034:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"1888:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1958:9:30","nodeType":"YulTypedName","src":"1958:9:30","type":""},{"name":"value0","nativeSrc":"1969:6:30","nodeType":"YulTypedName","src":"1969:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1980:4:30","nodeType":"YulTypedName","src":"1980:4:30","type":""}],"src":"1888:177:30"},{"body":{"nativeSrc":"2140:110:30","nodeType":"YulBlock","src":"2140:110:30","statements":[{"body":{"nativeSrc":"2186:16:30","nodeType":"YulBlock","src":"2186:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2195:1:30","nodeType":"YulLiteral","src":"2195:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2198:1:30","nodeType":"YulLiteral","src":"2198:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2188:6:30","nodeType":"YulIdentifier","src":"2188:6:30"},"nativeSrc":"2188:12:30","nodeType":"YulFunctionCall","src":"2188:12:30"},"nativeSrc":"2188:12:30","nodeType":"YulExpressionStatement","src":"2188:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2161:7:30","nodeType":"YulIdentifier","src":"2161:7:30"},{"name":"headStart","nativeSrc":"2170:9:30","nodeType":"YulIdentifier","src":"2170:9:30"}],"functionName":{"name":"sub","nativeSrc":"2157:3:30","nodeType":"YulIdentifier","src":"2157:3:30"},"nativeSrc":"2157:23:30","nodeType":"YulFunctionCall","src":"2157:23:30"},{"kind":"number","nativeSrc":"2182:2:30","nodeType":"YulLiteral","src":"2182:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2153:3:30","nodeType":"YulIdentifier","src":"2153:3:30"},"nativeSrc":"2153:32:30","nodeType":"YulFunctionCall","src":"2153:32:30"},"nativeSrc":"2150:52:30","nodeType":"YulIf","src":"2150:52:30"},{"nativeSrc":"2211:33:30","nodeType":"YulAssignment","src":"2211:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2234:9:30","nodeType":"YulIdentifier","src":"2234:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2221:12:30","nodeType":"YulIdentifier","src":"2221:12:30"},"nativeSrc":"2221:23:30","nodeType":"YulFunctionCall","src":"2221:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2211:6:30","nodeType":"YulIdentifier","src":"2211:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2070:180:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2106:9:30","nodeType":"YulTypedName","src":"2106:9:30","type":""},{"name":"dataEnd","nativeSrc":"2117:7:30","nodeType":"YulTypedName","src":"2117:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2129:6:30","nodeType":"YulTypedName","src":"2129:6:30","type":""}],"src":"2070:180:30"},{"body":{"nativeSrc":"2339:283:30","nodeType":"YulBlock","src":"2339:283:30","statements":[{"body":{"nativeSrc":"2388:16:30","nodeType":"YulBlock","src":"2388:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2397:1:30","nodeType":"YulLiteral","src":"2397:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2400:1:30","nodeType":"YulLiteral","src":"2400:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2390:6:30","nodeType":"YulIdentifier","src":"2390:6:30"},"nativeSrc":"2390:12:30","nodeType":"YulFunctionCall","src":"2390:12:30"},"nativeSrc":"2390:12:30","nodeType":"YulExpressionStatement","src":"2390:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2367:6:30","nodeType":"YulIdentifier","src":"2367:6:30"},{"kind":"number","nativeSrc":"2375:4:30","nodeType":"YulLiteral","src":"2375:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2363:3:30","nodeType":"YulIdentifier","src":"2363:3:30"},"nativeSrc":"2363:17:30","nodeType":"YulFunctionCall","src":"2363:17:30"},{"name":"end","nativeSrc":"2382:3:30","nodeType":"YulIdentifier","src":"2382:3:30"}],"functionName":{"name":"slt","nativeSrc":"2359:3:30","nodeType":"YulIdentifier","src":"2359:3:30"},"nativeSrc":"2359:27:30","nodeType":"YulFunctionCall","src":"2359:27:30"}],"functionName":{"name":"iszero","nativeSrc":"2352:6:30","nodeType":"YulIdentifier","src":"2352:6:30"},"nativeSrc":"2352:35:30","nodeType":"YulFunctionCall","src":"2352:35:30"},"nativeSrc":"2349:55:30","nodeType":"YulIf","src":"2349:55:30"},{"nativeSrc":"2413:30:30","nodeType":"YulAssignment","src":"2413:30:30","value":{"arguments":[{"name":"offset","nativeSrc":"2436:6:30","nodeType":"YulIdentifier","src":"2436:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"2423:12:30","nodeType":"YulIdentifier","src":"2423:12:30"},"nativeSrc":"2423:20:30","nodeType":"YulFunctionCall","src":"2423:20:30"},"variableNames":[{"name":"length","nativeSrc":"2413:6:30","nodeType":"YulIdentifier","src":"2413:6:30"}]},{"body":{"nativeSrc":"2486:16:30","nodeType":"YulBlock","src":"2486:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2495:1:30","nodeType":"YulLiteral","src":"2495:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2498:1:30","nodeType":"YulLiteral","src":"2498:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2488:6:30","nodeType":"YulIdentifier","src":"2488:6:30"},"nativeSrc":"2488:12:30","nodeType":"YulFunctionCall","src":"2488:12:30"},"nativeSrc":"2488:12:30","nodeType":"YulExpressionStatement","src":"2488:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2458:6:30","nodeType":"YulIdentifier","src":"2458:6:30"},{"kind":"number","nativeSrc":"2466:18:30","nodeType":"YulLiteral","src":"2466:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2455:2:30","nodeType":"YulIdentifier","src":"2455:2:30"},"nativeSrc":"2455:30:30","nodeType":"YulFunctionCall","src":"2455:30:30"},"nativeSrc":"2452:50:30","nodeType":"YulIf","src":"2452:50:30"},{"nativeSrc":"2511:29:30","nodeType":"YulAssignment","src":"2511:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"2527:6:30","nodeType":"YulIdentifier","src":"2527:6:30"},{"kind":"number","nativeSrc":"2535:4:30","nodeType":"YulLiteral","src":"2535:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2523:3:30","nodeType":"YulIdentifier","src":"2523:3:30"},"nativeSrc":"2523:17:30","nodeType":"YulFunctionCall","src":"2523:17:30"},"variableNames":[{"name":"arrayPos","nativeSrc":"2511:8:30","nodeType":"YulIdentifier","src":"2511:8:30"}]},{"body":{"nativeSrc":"2600:16:30","nodeType":"YulBlock","src":"2600:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2609:1:30","nodeType":"YulLiteral","src":"2609:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2612:1:30","nodeType":"YulLiteral","src":"2612:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2602:6:30","nodeType":"YulIdentifier","src":"2602:6:30"},"nativeSrc":"2602:12:30","nodeType":"YulFunctionCall","src":"2602:12:30"},"nativeSrc":"2602:12:30","nodeType":"YulExpressionStatement","src":"2602:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2563:6:30","nodeType":"YulIdentifier","src":"2563:6:30"},{"arguments":[{"kind":"number","nativeSrc":"2575:1:30","nodeType":"YulLiteral","src":"2575:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"2578:6:30","nodeType":"YulIdentifier","src":"2578:6:30"}],"functionName":{"name":"shl","nativeSrc":"2571:3:30","nodeType":"YulIdentifier","src":"2571:3:30"},"nativeSrc":"2571:14:30","nodeType":"YulFunctionCall","src":"2571:14:30"}],"functionName":{"name":"add","nativeSrc":"2559:3:30","nodeType":"YulIdentifier","src":"2559:3:30"},"nativeSrc":"2559:27:30","nodeType":"YulFunctionCall","src":"2559:27:30"},{"kind":"number","nativeSrc":"2588:4:30","nodeType":"YulLiteral","src":"2588:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2555:3:30","nodeType":"YulIdentifier","src":"2555:3:30"},"nativeSrc":"2555:38:30","nodeType":"YulFunctionCall","src":"2555:38:30"},{"name":"end","nativeSrc":"2595:3:30","nodeType":"YulIdentifier","src":"2595:3:30"}],"functionName":{"name":"gt","nativeSrc":"2552:2:30","nodeType":"YulIdentifier","src":"2552:2:30"},"nativeSrc":"2552:47:30","nodeType":"YulFunctionCall","src":"2552:47:30"},"nativeSrc":"2549:67:30","nodeType":"YulIf","src":"2549:67:30"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2255:367:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2302:6:30","nodeType":"YulTypedName","src":"2302:6:30","type":""},{"name":"end","nativeSrc":"2310:3:30","nodeType":"YulTypedName","src":"2310:3:30","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2318:8:30","nodeType":"YulTypedName","src":"2318:8:30","type":""},{"name":"length","nativeSrc":"2328:6:30","nodeType":"YulTypedName","src":"2328:6:30","type":""}],"src":"2255:367:30"},{"body":{"nativeSrc":"2699:275:30","nodeType":"YulBlock","src":"2699:275:30","statements":[{"body":{"nativeSrc":"2748:16:30","nodeType":"YulBlock","src":"2748:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2757:1:30","nodeType":"YulLiteral","src":"2757:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2760:1:30","nodeType":"YulLiteral","src":"2760:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2750:6:30","nodeType":"YulIdentifier","src":"2750:6:30"},"nativeSrc":"2750:12:30","nodeType":"YulFunctionCall","src":"2750:12:30"},"nativeSrc":"2750:12:30","nodeType":"YulExpressionStatement","src":"2750:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2727:6:30","nodeType":"YulIdentifier","src":"2727:6:30"},{"kind":"number","nativeSrc":"2735:4:30","nodeType":"YulLiteral","src":"2735:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2723:3:30","nodeType":"YulIdentifier","src":"2723:3:30"},"nativeSrc":"2723:17:30","nodeType":"YulFunctionCall","src":"2723:17:30"},{"name":"end","nativeSrc":"2742:3:30","nodeType":"YulIdentifier","src":"2742:3:30"}],"functionName":{"name":"slt","nativeSrc":"2719:3:30","nodeType":"YulIdentifier","src":"2719:3:30"},"nativeSrc":"2719:27:30","nodeType":"YulFunctionCall","src":"2719:27:30"}],"functionName":{"name":"iszero","nativeSrc":"2712:6:30","nodeType":"YulIdentifier","src":"2712:6:30"},"nativeSrc":"2712:35:30","nodeType":"YulFunctionCall","src":"2712:35:30"},"nativeSrc":"2709:55:30","nodeType":"YulIf","src":"2709:55:30"},{"nativeSrc":"2773:30:30","nodeType":"YulAssignment","src":"2773:30:30","value":{"arguments":[{"name":"offset","nativeSrc":"2796:6:30","nodeType":"YulIdentifier","src":"2796:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"2783:12:30","nodeType":"YulIdentifier","src":"2783:12:30"},"nativeSrc":"2783:20:30","nodeType":"YulFunctionCall","src":"2783:20:30"},"variableNames":[{"name":"length","nativeSrc":"2773:6:30","nodeType":"YulIdentifier","src":"2773:6:30"}]},{"body":{"nativeSrc":"2846:16:30","nodeType":"YulBlock","src":"2846:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2855:1:30","nodeType":"YulLiteral","src":"2855:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2858:1:30","nodeType":"YulLiteral","src":"2858:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2848:6:30","nodeType":"YulIdentifier","src":"2848:6:30"},"nativeSrc":"2848:12:30","nodeType":"YulFunctionCall","src":"2848:12:30"},"nativeSrc":"2848:12:30","nodeType":"YulExpressionStatement","src":"2848:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2818:6:30","nodeType":"YulIdentifier","src":"2818:6:30"},{"kind":"number","nativeSrc":"2826:18:30","nodeType":"YulLiteral","src":"2826:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2815:2:30","nodeType":"YulIdentifier","src":"2815:2:30"},"nativeSrc":"2815:30:30","nodeType":"YulFunctionCall","src":"2815:30:30"},"nativeSrc":"2812:50:30","nodeType":"YulIf","src":"2812:50:30"},{"nativeSrc":"2871:29:30","nodeType":"YulAssignment","src":"2871:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"2887:6:30","nodeType":"YulIdentifier","src":"2887:6:30"},{"kind":"number","nativeSrc":"2895:4:30","nodeType":"YulLiteral","src":"2895:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2883:3:30","nodeType":"YulIdentifier","src":"2883:3:30"},"nativeSrc":"2883:17:30","nodeType":"YulFunctionCall","src":"2883:17:30"},"variableNames":[{"name":"arrayPos","nativeSrc":"2871:8:30","nodeType":"YulIdentifier","src":"2871:8:30"}]},{"body":{"nativeSrc":"2952:16:30","nodeType":"YulBlock","src":"2952:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2961:1:30","nodeType":"YulLiteral","src":"2961:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2964:1:30","nodeType":"YulLiteral","src":"2964:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2954:6:30","nodeType":"YulIdentifier","src":"2954:6:30"},"nativeSrc":"2954:12:30","nodeType":"YulFunctionCall","src":"2954:12:30"},"nativeSrc":"2954:12:30","nodeType":"YulExpressionStatement","src":"2954:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2923:6:30","nodeType":"YulIdentifier","src":"2923:6:30"},{"name":"length","nativeSrc":"2931:6:30","nodeType":"YulIdentifier","src":"2931:6:30"}],"functionName":{"name":"add","nativeSrc":"2919:3:30","nodeType":"YulIdentifier","src":"2919:3:30"},"nativeSrc":"2919:19:30","nodeType":"YulFunctionCall","src":"2919:19:30"},{"kind":"number","nativeSrc":"2940:4:30","nodeType":"YulLiteral","src":"2940:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2915:3:30","nodeType":"YulIdentifier","src":"2915:3:30"},"nativeSrc":"2915:30:30","nodeType":"YulFunctionCall","src":"2915:30:30"},{"name":"end","nativeSrc":"2947:3:30","nodeType":"YulIdentifier","src":"2947:3:30"}],"functionName":{"name":"gt","nativeSrc":"2912:2:30","nodeType":"YulIdentifier","src":"2912:2:30"},"nativeSrc":"2912:39:30","nodeType":"YulFunctionCall","src":"2912:39:30"},"nativeSrc":"2909:59:30","nodeType":"YulIf","src":"2909:59:30"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2627:347:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2662:6:30","nodeType":"YulTypedName","src":"2662:6:30","type":""},{"name":"end","nativeSrc":"2670:3:30","nodeType":"YulTypedName","src":"2670:3:30","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2678:8:30","nodeType":"YulTypedName","src":"2678:8:30","type":""},{"name":"length","nativeSrc":"2688:6:30","nodeType":"YulTypedName","src":"2688:6:30","type":""}],"src":"2627:347:30"},{"body":{"nativeSrc":"3206:983:30","nodeType":"YulBlock","src":"3206:983:30","statements":[{"body":{"nativeSrc":"3253:16:30","nodeType":"YulBlock","src":"3253:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3262:1:30","nodeType":"YulLiteral","src":"3262:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3265:1:30","nodeType":"YulLiteral","src":"3265:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3255:6:30","nodeType":"YulIdentifier","src":"3255:6:30"},"nativeSrc":"3255:12:30","nodeType":"YulFunctionCall","src":"3255:12:30"},"nativeSrc":"3255:12:30","nodeType":"YulExpressionStatement","src":"3255:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3227:7:30","nodeType":"YulIdentifier","src":"3227:7:30"},{"name":"headStart","nativeSrc":"3236:9:30","nodeType":"YulIdentifier","src":"3236:9:30"}],"functionName":{"name":"sub","nativeSrc":"3223:3:30","nodeType":"YulIdentifier","src":"3223:3:30"},"nativeSrc":"3223:23:30","nodeType":"YulFunctionCall","src":"3223:23:30"},{"kind":"number","nativeSrc":"3248:3:30","nodeType":"YulLiteral","src":"3248:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3219:3:30","nodeType":"YulIdentifier","src":"3219:3:30"},"nativeSrc":"3219:33:30","nodeType":"YulFunctionCall","src":"3219:33:30"},"nativeSrc":"3216:53:30","nodeType":"YulIf","src":"3216:53:30"},{"nativeSrc":"3278:39:30","nodeType":"YulAssignment","src":"3278:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3307:9:30","nodeType":"YulIdentifier","src":"3307:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3288:18:30","nodeType":"YulIdentifier","src":"3288:18:30"},"nativeSrc":"3288:29:30","nodeType":"YulFunctionCall","src":"3288:29:30"},"variableNames":[{"name":"value0","nativeSrc":"3278:6:30","nodeType":"YulIdentifier","src":"3278:6:30"}]},{"nativeSrc":"3326:48:30","nodeType":"YulAssignment","src":"3326:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3359:9:30","nodeType":"YulIdentifier","src":"3359:9:30"},{"kind":"number","nativeSrc":"3370:2:30","nodeType":"YulLiteral","src":"3370:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3355:3:30","nodeType":"YulIdentifier","src":"3355:3:30"},"nativeSrc":"3355:18:30","nodeType":"YulFunctionCall","src":"3355:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3336:18:30","nodeType":"YulIdentifier","src":"3336:18:30"},"nativeSrc":"3336:38:30","nodeType":"YulFunctionCall","src":"3336:38:30"},"variableNames":[{"name":"value1","nativeSrc":"3326:6:30","nodeType":"YulIdentifier","src":"3326:6:30"}]},{"nativeSrc":"3383:46:30","nodeType":"YulVariableDeclaration","src":"3383:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3414:9:30","nodeType":"YulIdentifier","src":"3414:9:30"},{"kind":"number","nativeSrc":"3425:2:30","nodeType":"YulLiteral","src":"3425:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3410:3:30","nodeType":"YulIdentifier","src":"3410:3:30"},"nativeSrc":"3410:18:30","nodeType":"YulFunctionCall","src":"3410:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"3397:12:30","nodeType":"YulIdentifier","src":"3397:12:30"},"nativeSrc":"3397:32:30","nodeType":"YulFunctionCall","src":"3397:32:30"},"variables":[{"name":"offset","nativeSrc":"3387:6:30","nodeType":"YulTypedName","src":"3387:6:30","type":""}]},{"nativeSrc":"3438:28:30","nodeType":"YulVariableDeclaration","src":"3438:28:30","value":{"kind":"number","nativeSrc":"3448:18:30","nodeType":"YulLiteral","src":"3448:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3442:2:30","nodeType":"YulTypedName","src":"3442:2:30","type":""}]},{"body":{"nativeSrc":"3493:16:30","nodeType":"YulBlock","src":"3493:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3502:1:30","nodeType":"YulLiteral","src":"3502:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3505:1:30","nodeType":"YulLiteral","src":"3505:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3495:6:30","nodeType":"YulIdentifier","src":"3495:6:30"},"nativeSrc":"3495:12:30","nodeType":"YulFunctionCall","src":"3495:12:30"},"nativeSrc":"3495:12:30","nodeType":"YulExpressionStatement","src":"3495:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3481:6:30","nodeType":"YulIdentifier","src":"3481:6:30"},{"name":"_1","nativeSrc":"3489:2:30","nodeType":"YulIdentifier","src":"3489:2:30"}],"functionName":{"name":"gt","nativeSrc":"3478:2:30","nodeType":"YulIdentifier","src":"3478:2:30"},"nativeSrc":"3478:14:30","nodeType":"YulFunctionCall","src":"3478:14:30"},"nativeSrc":"3475:34:30","nodeType":"YulIf","src":"3475:34:30"},{"nativeSrc":"3518:96:30","nodeType":"YulVariableDeclaration","src":"3518:96:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3586:9:30","nodeType":"YulIdentifier","src":"3586:9:30"},{"name":"offset","nativeSrc":"3597:6:30","nodeType":"YulIdentifier","src":"3597:6:30"}],"functionName":{"name":"add","nativeSrc":"3582:3:30","nodeType":"YulIdentifier","src":"3582:3:30"},"nativeSrc":"3582:22:30","nodeType":"YulFunctionCall","src":"3582:22:30"},{"name":"dataEnd","nativeSrc":"3606:7:30","nodeType":"YulIdentifier","src":"3606:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3544:37:30","nodeType":"YulIdentifier","src":"3544:37:30"},"nativeSrc":"3544:70:30","nodeType":"YulFunctionCall","src":"3544:70:30"},"variables":[{"name":"value2_1","nativeSrc":"3522:8:30","nodeType":"YulTypedName","src":"3522:8:30","type":""},{"name":"value3_1","nativeSrc":"3532:8:30","nodeType":"YulTypedName","src":"3532:8:30","type":""}]},{"nativeSrc":"3623:18:30","nodeType":"YulAssignment","src":"3623:18:30","value":{"name":"value2_1","nativeSrc":"3633:8:30","nodeType":"YulIdentifier","src":"3633:8:30"},"variableNames":[{"name":"value2","nativeSrc":"3623:6:30","nodeType":"YulIdentifier","src":"3623:6:30"}]},{"nativeSrc":"3650:18:30","nodeType":"YulAssignment","src":"3650:18:30","value":{"name":"value3_1","nativeSrc":"3660:8:30","nodeType":"YulIdentifier","src":"3660:8:30"},"variableNames":[{"name":"value3","nativeSrc":"3650:6:30","nodeType":"YulIdentifier","src":"3650:6:30"}]},{"nativeSrc":"3677:48:30","nodeType":"YulVariableDeclaration","src":"3677:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3710:9:30","nodeType":"YulIdentifier","src":"3710:9:30"},{"kind":"number","nativeSrc":"3721:2:30","nodeType":"YulLiteral","src":"3721:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3706:3:30","nodeType":"YulIdentifier","src":"3706:3:30"},"nativeSrc":"3706:18:30","nodeType":"YulFunctionCall","src":"3706:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"3693:12:30","nodeType":"YulIdentifier","src":"3693:12:30"},"nativeSrc":"3693:32:30","nodeType":"YulFunctionCall","src":"3693:32:30"},"variables":[{"name":"offset_1","nativeSrc":"3681:8:30","nodeType":"YulTypedName","src":"3681:8:30","type":""}]},{"body":{"nativeSrc":"3754:16:30","nodeType":"YulBlock","src":"3754:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3763:1:30","nodeType":"YulLiteral","src":"3763:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3766:1:30","nodeType":"YulLiteral","src":"3766:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3756:6:30","nodeType":"YulIdentifier","src":"3756:6:30"},"nativeSrc":"3756:12:30","nodeType":"YulFunctionCall","src":"3756:12:30"},"nativeSrc":"3756:12:30","nodeType":"YulExpressionStatement","src":"3756:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3740:8:30","nodeType":"YulIdentifier","src":"3740:8:30"},{"name":"_1","nativeSrc":"3750:2:30","nodeType":"YulIdentifier","src":"3750:2:30"}],"functionName":{"name":"gt","nativeSrc":"3737:2:30","nodeType":"YulIdentifier","src":"3737:2:30"},"nativeSrc":"3737:16:30","nodeType":"YulFunctionCall","src":"3737:16:30"},"nativeSrc":"3734:36:30","nodeType":"YulIf","src":"3734:36:30"},{"nativeSrc":"3779:98:30","nodeType":"YulVariableDeclaration","src":"3779:98:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3847:9:30","nodeType":"YulIdentifier","src":"3847:9:30"},{"name":"offset_1","nativeSrc":"3858:8:30","nodeType":"YulIdentifier","src":"3858:8:30"}],"functionName":{"name":"add","nativeSrc":"3843:3:30","nodeType":"YulIdentifier","src":"3843:3:30"},"nativeSrc":"3843:24:30","nodeType":"YulFunctionCall","src":"3843:24:30"},{"name":"dataEnd","nativeSrc":"3869:7:30","nodeType":"YulIdentifier","src":"3869:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3805:37:30","nodeType":"YulIdentifier","src":"3805:37:30"},"nativeSrc":"3805:72:30","nodeType":"YulFunctionCall","src":"3805:72:30"},"variables":[{"name":"value4_1","nativeSrc":"3783:8:30","nodeType":"YulTypedName","src":"3783:8:30","type":""},{"name":"value5_1","nativeSrc":"3793:8:30","nodeType":"YulTypedName","src":"3793:8:30","type":""}]},{"nativeSrc":"3886:18:30","nodeType":"YulAssignment","src":"3886:18:30","value":{"name":"value4_1","nativeSrc":"3896:8:30","nodeType":"YulIdentifier","src":"3896:8:30"},"variableNames":[{"name":"value4","nativeSrc":"3886:6:30","nodeType":"YulIdentifier","src":"3886:6:30"}]},{"nativeSrc":"3913:18:30","nodeType":"YulAssignment","src":"3913:18:30","value":{"name":"value5_1","nativeSrc":"3923:8:30","nodeType":"YulIdentifier","src":"3923:8:30"},"variableNames":[{"name":"value5","nativeSrc":"3913:6:30","nodeType":"YulIdentifier","src":"3913:6:30"}]},{"nativeSrc":"3940:49:30","nodeType":"YulVariableDeclaration","src":"3940:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3973:9:30","nodeType":"YulIdentifier","src":"3973:9:30"},{"kind":"number","nativeSrc":"3984:3:30","nodeType":"YulLiteral","src":"3984:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3969:3:30","nodeType":"YulIdentifier","src":"3969:3:30"},"nativeSrc":"3969:19:30","nodeType":"YulFunctionCall","src":"3969:19:30"}],"functionName":{"name":"calldataload","nativeSrc":"3956:12:30","nodeType":"YulIdentifier","src":"3956:12:30"},"nativeSrc":"3956:33:30","nodeType":"YulFunctionCall","src":"3956:33:30"},"variables":[{"name":"offset_2","nativeSrc":"3944:8:30","nodeType":"YulTypedName","src":"3944:8:30","type":""}]},{"body":{"nativeSrc":"4018:16:30","nodeType":"YulBlock","src":"4018:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4027:1:30","nodeType":"YulLiteral","src":"4027:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"4030:1:30","nodeType":"YulLiteral","src":"4030:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4020:6:30","nodeType":"YulIdentifier","src":"4020:6:30"},"nativeSrc":"4020:12:30","nodeType":"YulFunctionCall","src":"4020:12:30"},"nativeSrc":"4020:12:30","nodeType":"YulExpressionStatement","src":"4020:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4004:8:30","nodeType":"YulIdentifier","src":"4004:8:30"},{"name":"_1","nativeSrc":"4014:2:30","nodeType":"YulIdentifier","src":"4014:2:30"}],"functionName":{"name":"gt","nativeSrc":"4001:2:30","nodeType":"YulIdentifier","src":"4001:2:30"},"nativeSrc":"4001:16:30","nodeType":"YulFunctionCall","src":"4001:16:30"},"nativeSrc":"3998:36:30","nodeType":"YulIf","src":"3998:36:30"},{"nativeSrc":"4043:86:30","nodeType":"YulVariableDeclaration","src":"4043:86:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4099:9:30","nodeType":"YulIdentifier","src":"4099:9:30"},{"name":"offset_2","nativeSrc":"4110:8:30","nodeType":"YulIdentifier","src":"4110:8:30"}],"functionName":{"name":"add","nativeSrc":"4095:3:30","nodeType":"YulIdentifier","src":"4095:3:30"},"nativeSrc":"4095:24:30","nodeType":"YulFunctionCall","src":"4095:24:30"},{"name":"dataEnd","nativeSrc":"4121:7:30","nodeType":"YulIdentifier","src":"4121:7:30"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4069:25:30","nodeType":"YulIdentifier","src":"4069:25:30"},"nativeSrc":"4069:60:30","nodeType":"YulFunctionCall","src":"4069:60:30"},"variables":[{"name":"value6_1","nativeSrc":"4047:8:30","nodeType":"YulTypedName","src":"4047:8:30","type":""},{"name":"value7_1","nativeSrc":"4057:8:30","nodeType":"YulTypedName","src":"4057:8:30","type":""}]},{"nativeSrc":"4138:18:30","nodeType":"YulAssignment","src":"4138:18:30","value":{"name":"value6_1","nativeSrc":"4148:8:30","nodeType":"YulIdentifier","src":"4148:8:30"},"variableNames":[{"name":"value6","nativeSrc":"4138:6:30","nodeType":"YulIdentifier","src":"4138:6:30"}]},{"nativeSrc":"4165:18:30","nodeType":"YulAssignment","src":"4165:18:30","value":{"name":"value7_1","nativeSrc":"4175:8:30","nodeType":"YulIdentifier","src":"4175:8:30"},"variableNames":[{"name":"value7","nativeSrc":"4165:6:30","nodeType":"YulIdentifier","src":"4165:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2979:1210:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3116:9:30","nodeType":"YulTypedName","src":"3116:9:30","type":""},{"name":"dataEnd","nativeSrc":"3127:7:30","nodeType":"YulTypedName","src":"3127:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3139:6:30","nodeType":"YulTypedName","src":"3139:6:30","type":""},{"name":"value1","nativeSrc":"3147:6:30","nodeType":"YulTypedName","src":"3147:6:30","type":""},{"name":"value2","nativeSrc":"3155:6:30","nodeType":"YulTypedName","src":"3155:6:30","type":""},{"name":"value3","nativeSrc":"3163:6:30","nodeType":"YulTypedName","src":"3163:6:30","type":""},{"name":"value4","nativeSrc":"3171:6:30","nodeType":"YulTypedName","src":"3171:6:30","type":""},{"name":"value5","nativeSrc":"3179:6:30","nodeType":"YulTypedName","src":"3179:6:30","type":""},{"name":"value6","nativeSrc":"3187:6:30","nodeType":"YulTypedName","src":"3187:6:30","type":""},{"name":"value7","nativeSrc":"3195:6:30","nodeType":"YulTypedName","src":"3195:6:30","type":""}],"src":"2979:1210:30"},{"body":{"nativeSrc":"4293:149:30","nodeType":"YulBlock","src":"4293:149:30","statements":[{"nativeSrc":"4303:26:30","nodeType":"YulAssignment","src":"4303:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4315:9:30","nodeType":"YulIdentifier","src":"4315:9:30"},{"kind":"number","nativeSrc":"4326:2:30","nodeType":"YulLiteral","src":"4326:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4311:3:30","nodeType":"YulIdentifier","src":"4311:3:30"},"nativeSrc":"4311:18:30","nodeType":"YulFunctionCall","src":"4311:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4303:4:30","nodeType":"YulIdentifier","src":"4303:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4345:9:30","nodeType":"YulIdentifier","src":"4345:9:30"},{"arguments":[{"name":"value0","nativeSrc":"4360:6:30","nodeType":"YulIdentifier","src":"4360:6:30"},{"kind":"number","nativeSrc":"4368:66:30","nodeType":"YulLiteral","src":"4368:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4356:3:30","nodeType":"YulIdentifier","src":"4356:3:30"},"nativeSrc":"4356:79:30","nodeType":"YulFunctionCall","src":"4356:79:30"}],"functionName":{"name":"mstore","nativeSrc":"4338:6:30","nodeType":"YulIdentifier","src":"4338:6:30"},"nativeSrc":"4338:98:30","nodeType":"YulFunctionCall","src":"4338:98:30"},"nativeSrc":"4338:98:30","nodeType":"YulExpressionStatement","src":"4338:98:30"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4194:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4262:9:30","nodeType":"YulTypedName","src":"4262:9:30","type":""},{"name":"value0","nativeSrc":"4273:6:30","nodeType":"YulTypedName","src":"4273:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4284:4:30","nodeType":"YulTypedName","src":"4284:4:30","type":""}],"src":"4194:248:30"},{"body":{"nativeSrc":"4604:538:30","nodeType":"YulBlock","src":"4604:538:30","statements":[{"body":{"nativeSrc":"4651:16:30","nodeType":"YulBlock","src":"4651:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4660:1:30","nodeType":"YulLiteral","src":"4660:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"4663:1:30","nodeType":"YulLiteral","src":"4663:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4653:6:30","nodeType":"YulIdentifier","src":"4653:6:30"},"nativeSrc":"4653:12:30","nodeType":"YulFunctionCall","src":"4653:12:30"},"nativeSrc":"4653:12:30","nodeType":"YulExpressionStatement","src":"4653:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4625:7:30","nodeType":"YulIdentifier","src":"4625:7:30"},{"name":"headStart","nativeSrc":"4634:9:30","nodeType":"YulIdentifier","src":"4634:9:30"}],"functionName":{"name":"sub","nativeSrc":"4621:3:30","nodeType":"YulIdentifier","src":"4621:3:30"},"nativeSrc":"4621:23:30","nodeType":"YulFunctionCall","src":"4621:23:30"},{"kind":"number","nativeSrc":"4646:3:30","nodeType":"YulLiteral","src":"4646:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4617:3:30","nodeType":"YulIdentifier","src":"4617:3:30"},"nativeSrc":"4617:33:30","nodeType":"YulFunctionCall","src":"4617:33:30"},"nativeSrc":"4614:53:30","nodeType":"YulIf","src":"4614:53:30"},{"nativeSrc":"4676:39:30","nodeType":"YulAssignment","src":"4676:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4705:9:30","nodeType":"YulIdentifier","src":"4705:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4686:18:30","nodeType":"YulIdentifier","src":"4686:18:30"},"nativeSrc":"4686:29:30","nodeType":"YulFunctionCall","src":"4686:29:30"},"variableNames":[{"name":"value0","nativeSrc":"4676:6:30","nodeType":"YulIdentifier","src":"4676:6:30"}]},{"nativeSrc":"4724:48:30","nodeType":"YulAssignment","src":"4724:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4757:9:30","nodeType":"YulIdentifier","src":"4757:9:30"},{"kind":"number","nativeSrc":"4768:2:30","nodeType":"YulLiteral","src":"4768:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4753:3:30","nodeType":"YulIdentifier","src":"4753:3:30"},"nativeSrc":"4753:18:30","nodeType":"YulFunctionCall","src":"4753:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4734:18:30","nodeType":"YulIdentifier","src":"4734:18:30"},"nativeSrc":"4734:38:30","nodeType":"YulFunctionCall","src":"4734:38:30"},"variableNames":[{"name":"value1","nativeSrc":"4724:6:30","nodeType":"YulIdentifier","src":"4724:6:30"}]},{"nativeSrc":"4781:42:30","nodeType":"YulAssignment","src":"4781:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4808:9:30","nodeType":"YulIdentifier","src":"4808:9:30"},{"kind":"number","nativeSrc":"4819:2:30","nodeType":"YulLiteral","src":"4819:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4804:3:30","nodeType":"YulIdentifier","src":"4804:3:30"},"nativeSrc":"4804:18:30","nodeType":"YulFunctionCall","src":"4804:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"4791:12:30","nodeType":"YulIdentifier","src":"4791:12:30"},"nativeSrc":"4791:32:30","nodeType":"YulFunctionCall","src":"4791:32:30"},"variableNames":[{"name":"value2","nativeSrc":"4781:6:30","nodeType":"YulIdentifier","src":"4781:6:30"}]},{"nativeSrc":"4832:42:30","nodeType":"YulAssignment","src":"4832:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4859:9:30","nodeType":"YulIdentifier","src":"4859:9:30"},{"kind":"number","nativeSrc":"4870:2:30","nodeType":"YulLiteral","src":"4870:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4855:3:30","nodeType":"YulIdentifier","src":"4855:3:30"},"nativeSrc":"4855:18:30","nodeType":"YulFunctionCall","src":"4855:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"4842:12:30","nodeType":"YulIdentifier","src":"4842:12:30"},"nativeSrc":"4842:32:30","nodeType":"YulFunctionCall","src":"4842:32:30"},"variableNames":[{"name":"value3","nativeSrc":"4832:6:30","nodeType":"YulIdentifier","src":"4832:6:30"}]},{"nativeSrc":"4883:47:30","nodeType":"YulVariableDeclaration","src":"4883:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4914:9:30","nodeType":"YulIdentifier","src":"4914:9:30"},{"kind":"number","nativeSrc":"4925:3:30","nodeType":"YulLiteral","src":"4925:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4910:3:30","nodeType":"YulIdentifier","src":"4910:3:30"},"nativeSrc":"4910:19:30","nodeType":"YulFunctionCall","src":"4910:19:30"}],"functionName":{"name":"calldataload","nativeSrc":"4897:12:30","nodeType":"YulIdentifier","src":"4897:12:30"},"nativeSrc":"4897:33:30","nodeType":"YulFunctionCall","src":"4897:33:30"},"variables":[{"name":"offset","nativeSrc":"4887:6:30","nodeType":"YulTypedName","src":"4887:6:30","type":""}]},{"body":{"nativeSrc":"4973:16:30","nodeType":"YulBlock","src":"4973:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4982:1:30","nodeType":"YulLiteral","src":"4982:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"4985:1:30","nodeType":"YulLiteral","src":"4985:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4975:6:30","nodeType":"YulIdentifier","src":"4975:6:30"},"nativeSrc":"4975:12:30","nodeType":"YulFunctionCall","src":"4975:12:30"},"nativeSrc":"4975:12:30","nodeType":"YulExpressionStatement","src":"4975:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4945:6:30","nodeType":"YulIdentifier","src":"4945:6:30"},{"kind":"number","nativeSrc":"4953:18:30","nodeType":"YulLiteral","src":"4953:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4942:2:30","nodeType":"YulIdentifier","src":"4942:2:30"},"nativeSrc":"4942:30:30","nodeType":"YulFunctionCall","src":"4942:30:30"},"nativeSrc":"4939:50:30","nodeType":"YulIf","src":"4939:50:30"},{"nativeSrc":"4998:84:30","nodeType":"YulVariableDeclaration","src":"4998:84:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5054:9:30","nodeType":"YulIdentifier","src":"5054:9:30"},{"name":"offset","nativeSrc":"5065:6:30","nodeType":"YulIdentifier","src":"5065:6:30"}],"functionName":{"name":"add","nativeSrc":"5050:3:30","nodeType":"YulIdentifier","src":"5050:3:30"},"nativeSrc":"5050:22:30","nodeType":"YulFunctionCall","src":"5050:22:30"},{"name":"dataEnd","nativeSrc":"5074:7:30","nodeType":"YulIdentifier","src":"5074:7:30"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5024:25:30","nodeType":"YulIdentifier","src":"5024:25:30"},"nativeSrc":"5024:58:30","nodeType":"YulFunctionCall","src":"5024:58:30"},"variables":[{"name":"value4_1","nativeSrc":"5002:8:30","nodeType":"YulTypedName","src":"5002:8:30","type":""},{"name":"value5_1","nativeSrc":"5012:8:30","nodeType":"YulTypedName","src":"5012:8:30","type":""}]},{"nativeSrc":"5091:18:30","nodeType":"YulAssignment","src":"5091:18:30","value":{"name":"value4_1","nativeSrc":"5101:8:30","nodeType":"YulIdentifier","src":"5101:8:30"},"variableNames":[{"name":"value4","nativeSrc":"5091:6:30","nodeType":"YulIdentifier","src":"5091:6:30"}]},{"nativeSrc":"5118:18:30","nodeType":"YulAssignment","src":"5118:18:30","value":{"name":"value5_1","nativeSrc":"5128:8:30","nodeType":"YulIdentifier","src":"5128:8:30"},"variableNames":[{"name":"value5","nativeSrc":"5118:6:30","nodeType":"YulIdentifier","src":"5118:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4447:695:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4530:9:30","nodeType":"YulTypedName","src":"4530:9:30","type":""},{"name":"dataEnd","nativeSrc":"4541:7:30","nodeType":"YulTypedName","src":"4541:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4553:6:30","nodeType":"YulTypedName","src":"4553:6:30","type":""},{"name":"value1","nativeSrc":"4561:6:30","nodeType":"YulTypedName","src":"4561:6:30","type":""},{"name":"value2","nativeSrc":"4569:6:30","nodeType":"YulTypedName","src":"4569:6:30","type":""},{"name":"value3","nativeSrc":"4577:6:30","nodeType":"YulTypedName","src":"4577:6:30","type":""},{"name":"value4","nativeSrc":"4585:6:30","nodeType":"YulTypedName","src":"4585:6:30","type":""},{"name":"value5","nativeSrc":"4593:6:30","nodeType":"YulTypedName","src":"4593:6:30","type":""}],"src":"4447:695:30"},{"body":{"nativeSrc":"5179:152:30","nodeType":"YulBlock","src":"5179:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5196:1:30","nodeType":"YulLiteral","src":"5196:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5199:77:30","nodeType":"YulLiteral","src":"5199:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5189:6:30","nodeType":"YulIdentifier","src":"5189:6:30"},"nativeSrc":"5189:88:30","nodeType":"YulFunctionCall","src":"5189:88:30"},"nativeSrc":"5189:88:30","nodeType":"YulExpressionStatement","src":"5189:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5293:1:30","nodeType":"YulLiteral","src":"5293:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"5296:4:30","nodeType":"YulLiteral","src":"5296:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5286:6:30","nodeType":"YulIdentifier","src":"5286:6:30"},"nativeSrc":"5286:15:30","nodeType":"YulFunctionCall","src":"5286:15:30"},"nativeSrc":"5286:15:30","nodeType":"YulExpressionStatement","src":"5286:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5317:1:30","nodeType":"YulLiteral","src":"5317:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5320:4:30","nodeType":"YulLiteral","src":"5320:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5310:6:30","nodeType":"YulIdentifier","src":"5310:6:30"},"nativeSrc":"5310:15:30","nodeType":"YulFunctionCall","src":"5310:15:30"},"nativeSrc":"5310:15:30","nodeType":"YulExpressionStatement","src":"5310:15:30"}]},"name":"panic_error_0x11","nativeSrc":"5147:184:30","nodeType":"YulFunctionDefinition","src":"5147:184:30"},{"body":{"nativeSrc":"5385:79:30","nodeType":"YulBlock","src":"5385:79:30","statements":[{"nativeSrc":"5395:17:30","nodeType":"YulAssignment","src":"5395:17:30","value":{"arguments":[{"name":"x","nativeSrc":"5407:1:30","nodeType":"YulIdentifier","src":"5407:1:30"},{"name":"y","nativeSrc":"5410:1:30","nodeType":"YulIdentifier","src":"5410:1:30"}],"functionName":{"name":"sub","nativeSrc":"5403:3:30","nodeType":"YulIdentifier","src":"5403:3:30"},"nativeSrc":"5403:9:30","nodeType":"YulFunctionCall","src":"5403:9:30"},"variableNames":[{"name":"diff","nativeSrc":"5395:4:30","nodeType":"YulIdentifier","src":"5395:4:30"}]},{"body":{"nativeSrc":"5436:22:30","nodeType":"YulBlock","src":"5436:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5438:16:30","nodeType":"YulIdentifier","src":"5438:16:30"},"nativeSrc":"5438:18:30","nodeType":"YulFunctionCall","src":"5438:18:30"},"nativeSrc":"5438:18:30","nodeType":"YulExpressionStatement","src":"5438:18:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5427:4:30","nodeType":"YulIdentifier","src":"5427:4:30"},{"name":"x","nativeSrc":"5433:1:30","nodeType":"YulIdentifier","src":"5433:1:30"}],"functionName":{"name":"gt","nativeSrc":"5424:2:30","nodeType":"YulIdentifier","src":"5424:2:30"},"nativeSrc":"5424:11:30","nodeType":"YulFunctionCall","src":"5424:11:30"},"nativeSrc":"5421:37:30","nodeType":"YulIf","src":"5421:37:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"5336:128:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5367:1:30","nodeType":"YulTypedName","src":"5367:1:30","type":""},{"name":"y","nativeSrc":"5370:1:30","nodeType":"YulTypedName","src":"5370:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5376:4:30","nodeType":"YulTypedName","src":"5376:4:30","type":""}],"src":"5336:128:30"},{"body":{"nativeSrc":"5515:228:30","nodeType":"YulBlock","src":"5515:228:30","statements":[{"body":{"nativeSrc":"5546:168:30","nodeType":"YulBlock","src":"5546:168:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5567:1:30","nodeType":"YulLiteral","src":"5567:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5570:77:30","nodeType":"YulLiteral","src":"5570:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5560:6:30","nodeType":"YulIdentifier","src":"5560:6:30"},"nativeSrc":"5560:88:30","nodeType":"YulFunctionCall","src":"5560:88:30"},"nativeSrc":"5560:88:30","nodeType":"YulExpressionStatement","src":"5560:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5668:1:30","nodeType":"YulLiteral","src":"5668:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"5671:4:30","nodeType":"YulLiteral","src":"5671:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5661:6:30","nodeType":"YulIdentifier","src":"5661:6:30"},"nativeSrc":"5661:15:30","nodeType":"YulFunctionCall","src":"5661:15:30"},"nativeSrc":"5661:15:30","nodeType":"YulExpressionStatement","src":"5661:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5696:1:30","nodeType":"YulLiteral","src":"5696:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5699:4:30","nodeType":"YulLiteral","src":"5699:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5689:6:30","nodeType":"YulIdentifier","src":"5689:6:30"},"nativeSrc":"5689:15:30","nodeType":"YulFunctionCall","src":"5689:15:30"},"nativeSrc":"5689:15:30","nodeType":"YulExpressionStatement","src":"5689:15:30"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5535:1:30","nodeType":"YulIdentifier","src":"5535:1:30"}],"functionName":{"name":"iszero","nativeSrc":"5528:6:30","nodeType":"YulIdentifier","src":"5528:6:30"},"nativeSrc":"5528:9:30","nodeType":"YulFunctionCall","src":"5528:9:30"},"nativeSrc":"5525:189:30","nodeType":"YulIf","src":"5525:189:30"},{"nativeSrc":"5723:14:30","nodeType":"YulAssignment","src":"5723:14:30","value":{"arguments":[{"name":"x","nativeSrc":"5732:1:30","nodeType":"YulIdentifier","src":"5732:1:30"},{"name":"y","nativeSrc":"5735:1:30","nodeType":"YulIdentifier","src":"5735:1:30"}],"functionName":{"name":"div","nativeSrc":"5728:3:30","nodeType":"YulIdentifier","src":"5728:3:30"},"nativeSrc":"5728:9:30","nodeType":"YulFunctionCall","src":"5728:9:30"},"variableNames":[{"name":"r","nativeSrc":"5723:1:30","nodeType":"YulIdentifier","src":"5723:1:30"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5469:274:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5500:1:30","nodeType":"YulTypedName","src":"5500:1:30","type":""},{"name":"y","nativeSrc":"5503:1:30","nodeType":"YulTypedName","src":"5503:1:30","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5509:1:30","nodeType":"YulTypedName","src":"5509:1:30","type":""}],"src":"5469:274:30"},{"body":{"nativeSrc":"5849:125:30","nodeType":"YulBlock","src":"5849:125:30","statements":[{"nativeSrc":"5859:26:30","nodeType":"YulAssignment","src":"5859:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"5871:9:30","nodeType":"YulIdentifier","src":"5871:9:30"},{"kind":"number","nativeSrc":"5882:2:30","nodeType":"YulLiteral","src":"5882:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5867:3:30","nodeType":"YulIdentifier","src":"5867:3:30"},"nativeSrc":"5867:18:30","nodeType":"YulFunctionCall","src":"5867:18:30"},"variableNames":[{"name":"tail","nativeSrc":"5859:4:30","nodeType":"YulIdentifier","src":"5859:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5901:9:30","nodeType":"YulIdentifier","src":"5901:9:30"},{"arguments":[{"name":"value0","nativeSrc":"5916:6:30","nodeType":"YulIdentifier","src":"5916:6:30"},{"kind":"number","nativeSrc":"5924:42:30","nodeType":"YulLiteral","src":"5924:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5912:3:30","nodeType":"YulIdentifier","src":"5912:3:30"},"nativeSrc":"5912:55:30","nodeType":"YulFunctionCall","src":"5912:55:30"}],"functionName":{"name":"mstore","nativeSrc":"5894:6:30","nodeType":"YulIdentifier","src":"5894:6:30"},"nativeSrc":"5894:74:30","nodeType":"YulFunctionCall","src":"5894:74:30"},"nativeSrc":"5894:74:30","nodeType":"YulExpressionStatement","src":"5894:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5748:226:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5818:9:30","nodeType":"YulTypedName","src":"5818:9:30","type":""},{"name":"value0","nativeSrc":"5829:6:30","nodeType":"YulTypedName","src":"5829:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5840:4:30","nodeType":"YulTypedName","src":"5840:4:30","type":""}],"src":"5748:226:30"},{"body":{"nativeSrc":"6057:280:30","nodeType":"YulBlock","src":"6057:280:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6074:3:30","nodeType":"YulIdentifier","src":"6074:3:30"},{"name":"length","nativeSrc":"6079:6:30","nodeType":"YulIdentifier","src":"6079:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6067:6:30","nodeType":"YulIdentifier","src":"6067:6:30"},"nativeSrc":"6067:19:30","nodeType":"YulFunctionCall","src":"6067:19:30"},"nativeSrc":"6067:19:30","nodeType":"YulExpressionStatement","src":"6067:19:30"},{"body":{"nativeSrc":"6177:16:30","nodeType":"YulBlock","src":"6177:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6186:1:30","nodeType":"YulLiteral","src":"6186:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6189:1:30","nodeType":"YulLiteral","src":"6189:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6179:6:30","nodeType":"YulIdentifier","src":"6179:6:30"},"nativeSrc":"6179:12:30","nodeType":"YulFunctionCall","src":"6179:12:30"},"nativeSrc":"6179:12:30","nodeType":"YulExpressionStatement","src":"6179:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6101:6:30","nodeType":"YulIdentifier","src":"6101:6:30"},{"kind":"number","nativeSrc":"6109:66:30","nodeType":"YulLiteral","src":"6109:66:30","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6098:2:30","nodeType":"YulIdentifier","src":"6098:2:30"},"nativeSrc":"6098:78:30","nodeType":"YulFunctionCall","src":"6098:78:30"},"nativeSrc":"6095:98:30","nodeType":"YulIf","src":"6095:98:30"},{"nativeSrc":"6202:30:30","nodeType":"YulVariableDeclaration","src":"6202:30:30","value":{"arguments":[{"kind":"number","nativeSrc":"6222:1:30","nodeType":"YulLiteral","src":"6222:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"6225:6:30","nodeType":"YulIdentifier","src":"6225:6:30"}],"functionName":{"name":"shl","nativeSrc":"6218:3:30","nodeType":"YulIdentifier","src":"6218:3:30"},"nativeSrc":"6218:14:30","nodeType":"YulFunctionCall","src":"6218:14:30"},"variables":[{"name":"length_1","nativeSrc":"6206:8:30","nodeType":"YulTypedName","src":"6206:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6258:3:30","nodeType":"YulIdentifier","src":"6258:3:30"},{"kind":"number","nativeSrc":"6263:4:30","nodeType":"YulLiteral","src":"6263:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6254:3:30","nodeType":"YulIdentifier","src":"6254:3:30"},"nativeSrc":"6254:14:30","nodeType":"YulFunctionCall","src":"6254:14:30"},{"name":"start","nativeSrc":"6270:5:30","nodeType":"YulIdentifier","src":"6270:5:30"},{"name":"length_1","nativeSrc":"6277:8:30","nodeType":"YulIdentifier","src":"6277:8:30"}],"functionName":{"name":"calldatacopy","nativeSrc":"6241:12:30","nodeType":"YulIdentifier","src":"6241:12:30"},"nativeSrc":"6241:45:30","nodeType":"YulFunctionCall","src":"6241:45:30"},"nativeSrc":"6241:45:30","nodeType":"YulExpressionStatement","src":"6241:45:30"},{"nativeSrc":"6295:36:30","nodeType":"YulAssignment","src":"6295:36:30","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6310:3:30","nodeType":"YulIdentifier","src":"6310:3:30"},{"name":"length_1","nativeSrc":"6315:8:30","nodeType":"YulIdentifier","src":"6315:8:30"}],"functionName":{"name":"add","nativeSrc":"6306:3:30","nodeType":"YulIdentifier","src":"6306:3:30"},"nativeSrc":"6306:18:30","nodeType":"YulFunctionCall","src":"6306:18:30"},{"kind":"number","nativeSrc":"6326:4:30","nodeType":"YulLiteral","src":"6326:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6302:3:30","nodeType":"YulIdentifier","src":"6302:3:30"},"nativeSrc":"6302:29:30","nodeType":"YulFunctionCall","src":"6302:29:30"},"variableNames":[{"name":"end","nativeSrc":"6295:3:30","nodeType":"YulIdentifier","src":"6295:3:30"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5979:358:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6026:5:30","nodeType":"YulTypedName","src":"6026:5:30","type":""},{"name":"length","nativeSrc":"6033:6:30","nodeType":"YulTypedName","src":"6033:6:30","type":""},{"name":"pos","nativeSrc":"6041:3:30","nodeType":"YulTypedName","src":"6041:3:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6049:3:30","nodeType":"YulTypedName","src":"6049:3:30","type":""}],"src":"5979:358:30"},{"body":{"nativeSrc":"6619:362:30","nodeType":"YulBlock","src":"6619:362:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6636:9:30","nodeType":"YulIdentifier","src":"6636:9:30"},{"arguments":[{"name":"value0","nativeSrc":"6651:6:30","nodeType":"YulIdentifier","src":"6651:6:30"},{"kind":"number","nativeSrc":"6659:42:30","nodeType":"YulLiteral","src":"6659:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6647:3:30","nodeType":"YulIdentifier","src":"6647:3:30"},"nativeSrc":"6647:55:30","nodeType":"YulFunctionCall","src":"6647:55:30"}],"functionName":{"name":"mstore","nativeSrc":"6629:6:30","nodeType":"YulIdentifier","src":"6629:6:30"},"nativeSrc":"6629:74:30","nodeType":"YulFunctionCall","src":"6629:74:30"},"nativeSrc":"6629:74:30","nodeType":"YulExpressionStatement","src":"6629:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6723:9:30","nodeType":"YulIdentifier","src":"6723:9:30"},{"kind":"number","nativeSrc":"6734:2:30","nodeType":"YulLiteral","src":"6734:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6719:3:30","nodeType":"YulIdentifier","src":"6719:3:30"},"nativeSrc":"6719:18:30","nodeType":"YulFunctionCall","src":"6719:18:30"},{"kind":"number","nativeSrc":"6739:2:30","nodeType":"YulLiteral","src":"6739:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6712:6:30","nodeType":"YulIdentifier","src":"6712:6:30"},"nativeSrc":"6712:30:30","nodeType":"YulFunctionCall","src":"6712:30:30"},"nativeSrc":"6712:30:30","nodeType":"YulExpressionStatement","src":"6712:30:30"},{"nativeSrc":"6751:87:30","nodeType":"YulVariableDeclaration","src":"6751:87:30","value":{"arguments":[{"name":"value1","nativeSrc":"6803:6:30","nodeType":"YulIdentifier","src":"6803:6:30"},{"name":"value2","nativeSrc":"6811:6:30","nodeType":"YulIdentifier","src":"6811:6:30"},{"arguments":[{"name":"headStart","nativeSrc":"6823:9:30","nodeType":"YulIdentifier","src":"6823:9:30"},{"kind":"number","nativeSrc":"6834:2:30","nodeType":"YulLiteral","src":"6834:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6819:3:30","nodeType":"YulIdentifier","src":"6819:3:30"},"nativeSrc":"6819:18:30","nodeType":"YulFunctionCall","src":"6819:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6765:37:30","nodeType":"YulIdentifier","src":"6765:37:30"},"nativeSrc":"6765:73:30","nodeType":"YulFunctionCall","src":"6765:73:30"},"variables":[{"name":"tail_1","nativeSrc":"6755:6:30","nodeType":"YulTypedName","src":"6755:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6858:9:30","nodeType":"YulIdentifier","src":"6858:9:30"},{"kind":"number","nativeSrc":"6869:2:30","nodeType":"YulLiteral","src":"6869:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6854:3:30","nodeType":"YulIdentifier","src":"6854:3:30"},"nativeSrc":"6854:18:30","nodeType":"YulFunctionCall","src":"6854:18:30"},{"arguments":[{"name":"tail_1","nativeSrc":"6878:6:30","nodeType":"YulIdentifier","src":"6878:6:30"},{"name":"headStart","nativeSrc":"6886:9:30","nodeType":"YulIdentifier","src":"6886:9:30"}],"functionName":{"name":"sub","nativeSrc":"6874:3:30","nodeType":"YulIdentifier","src":"6874:3:30"},"nativeSrc":"6874:22:30","nodeType":"YulFunctionCall","src":"6874:22:30"}],"functionName":{"name":"mstore","nativeSrc":"6847:6:30","nodeType":"YulIdentifier","src":"6847:6:30"},"nativeSrc":"6847:50:30","nodeType":"YulFunctionCall","src":"6847:50:30"},"nativeSrc":"6847:50:30","nodeType":"YulExpressionStatement","src":"6847:50:30"},{"nativeSrc":"6906:69:30","nodeType":"YulAssignment","src":"6906:69:30","value":{"arguments":[{"name":"value3","nativeSrc":"6952:6:30","nodeType":"YulIdentifier","src":"6952:6:30"},{"name":"value4","nativeSrc":"6960:6:30","nodeType":"YulIdentifier","src":"6960:6:30"},{"name":"tail_1","nativeSrc":"6968:6:30","nodeType":"YulIdentifier","src":"6968:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6914:37:30","nodeType":"YulIdentifier","src":"6914:37:30"},"nativeSrc":"6914:61:30","nodeType":"YulFunctionCall","src":"6914:61:30"},"variableNames":[{"name":"tail","nativeSrc":"6906:4:30","nodeType":"YulIdentifier","src":"6906:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6342:639:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6556:9:30","nodeType":"YulTypedName","src":"6556:9:30","type":""},{"name":"value4","nativeSrc":"6567:6:30","nodeType":"YulTypedName","src":"6567:6:30","type":""},{"name":"value3","nativeSrc":"6575:6:30","nodeType":"YulTypedName","src":"6575:6:30","type":""},{"name":"value2","nativeSrc":"6583:6:30","nodeType":"YulTypedName","src":"6583:6:30","type":""},{"name":"value1","nativeSrc":"6591:6:30","nodeType":"YulTypedName","src":"6591:6:30","type":""},{"name":"value0","nativeSrc":"6599:6:30","nodeType":"YulTypedName","src":"6599:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6610:4:30","nodeType":"YulTypedName","src":"6610:4:30","type":""}],"src":"6342:639:30"},{"body":{"nativeSrc":"7018:152:30","nodeType":"YulBlock","src":"7018:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7035:1:30","nodeType":"YulLiteral","src":"7035:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7038:77:30","nodeType":"YulLiteral","src":"7038:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7028:6:30","nodeType":"YulIdentifier","src":"7028:6:30"},"nativeSrc":"7028:88:30","nodeType":"YulFunctionCall","src":"7028:88:30"},"nativeSrc":"7028:88:30","nodeType":"YulExpressionStatement","src":"7028:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7132:1:30","nodeType":"YulLiteral","src":"7132:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"7135:4:30","nodeType":"YulLiteral","src":"7135:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7125:6:30","nodeType":"YulIdentifier","src":"7125:6:30"},"nativeSrc":"7125:15:30","nodeType":"YulFunctionCall","src":"7125:15:30"},"nativeSrc":"7125:15:30","nodeType":"YulExpressionStatement","src":"7125:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7156:1:30","nodeType":"YulLiteral","src":"7156:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7159:4:30","nodeType":"YulLiteral","src":"7159:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7149:6:30","nodeType":"YulIdentifier","src":"7149:6:30"},"nativeSrc":"7149:15:30","nodeType":"YulFunctionCall","src":"7149:15:30"},"nativeSrc":"7149:15:30","nodeType":"YulExpressionStatement","src":"7149:15:30"}]},"name":"panic_error_0x32","nativeSrc":"6986:184:30","nodeType":"YulFunctionDefinition","src":"6986:184:30"},{"body":{"nativeSrc":"7332:211:30","nodeType":"YulBlock","src":"7332:211:30","statements":[{"nativeSrc":"7342:26:30","nodeType":"YulAssignment","src":"7342:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"7354:9:30","nodeType":"YulIdentifier","src":"7354:9:30"},{"kind":"number","nativeSrc":"7365:2:30","nodeType":"YulLiteral","src":"7365:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7350:3:30","nodeType":"YulIdentifier","src":"7350:3:30"},"nativeSrc":"7350:18:30","nodeType":"YulFunctionCall","src":"7350:18:30"},"variableNames":[{"name":"tail","nativeSrc":"7342:4:30","nodeType":"YulIdentifier","src":"7342:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7384:9:30","nodeType":"YulIdentifier","src":"7384:9:30"},{"arguments":[{"name":"value0","nativeSrc":"7399:6:30","nodeType":"YulIdentifier","src":"7399:6:30"},{"kind":"number","nativeSrc":"7407:42:30","nodeType":"YulLiteral","src":"7407:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7395:3:30","nodeType":"YulIdentifier","src":"7395:3:30"},"nativeSrc":"7395:55:30","nodeType":"YulFunctionCall","src":"7395:55:30"}],"functionName":{"name":"mstore","nativeSrc":"7377:6:30","nodeType":"YulIdentifier","src":"7377:6:30"},"nativeSrc":"7377:74:30","nodeType":"YulFunctionCall","src":"7377:74:30"},"nativeSrc":"7377:74:30","nodeType":"YulExpressionStatement","src":"7377:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7471:9:30","nodeType":"YulIdentifier","src":"7471:9:30"},{"kind":"number","nativeSrc":"7482:2:30","nodeType":"YulLiteral","src":"7482:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7467:3:30","nodeType":"YulIdentifier","src":"7467:3:30"},"nativeSrc":"7467:18:30","nodeType":"YulFunctionCall","src":"7467:18:30"},{"name":"value1","nativeSrc":"7487:6:30","nodeType":"YulIdentifier","src":"7487:6:30"}],"functionName":{"name":"mstore","nativeSrc":"7460:6:30","nodeType":"YulIdentifier","src":"7460:6:30"},"nativeSrc":"7460:34:30","nodeType":"YulFunctionCall","src":"7460:34:30"},"nativeSrc":"7460:34:30","nodeType":"YulExpressionStatement","src":"7460:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7514:9:30","nodeType":"YulIdentifier","src":"7514:9:30"},{"kind":"number","nativeSrc":"7525:2:30","nodeType":"YulLiteral","src":"7525:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7510:3:30","nodeType":"YulIdentifier","src":"7510:3:30"},"nativeSrc":"7510:18:30","nodeType":"YulFunctionCall","src":"7510:18:30"},{"name":"value2","nativeSrc":"7530:6:30","nodeType":"YulIdentifier","src":"7530:6:30"}],"functionName":{"name":"mstore","nativeSrc":"7503:6:30","nodeType":"YulIdentifier","src":"7503:6:30"},"nativeSrc":"7503:34:30","nodeType":"YulFunctionCall","src":"7503:34:30"},"nativeSrc":"7503:34:30","nodeType":"YulExpressionStatement","src":"7503:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7175:368:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7285:9:30","nodeType":"YulTypedName","src":"7285:9:30","type":""},{"name":"value2","nativeSrc":"7296:6:30","nodeType":"YulTypedName","src":"7296:6:30","type":""},{"name":"value1","nativeSrc":"7304:6:30","nodeType":"YulTypedName","src":"7304:6:30","type":""},{"name":"value0","nativeSrc":"7312:6:30","nodeType":"YulTypedName","src":"7312:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7323:4:30","nodeType":"YulTypedName","src":"7323:4:30","type":""}],"src":"7175:368:30"},{"body":{"nativeSrc":"7600:116:30","nodeType":"YulBlock","src":"7600:116:30","statements":[{"nativeSrc":"7610:20:30","nodeType":"YulAssignment","src":"7610:20:30","value":{"arguments":[{"name":"x","nativeSrc":"7625:1:30","nodeType":"YulIdentifier","src":"7625:1:30"},{"name":"y","nativeSrc":"7628:1:30","nodeType":"YulIdentifier","src":"7628:1:30"}],"functionName":{"name":"mul","nativeSrc":"7621:3:30","nodeType":"YulIdentifier","src":"7621:3:30"},"nativeSrc":"7621:9:30","nodeType":"YulFunctionCall","src":"7621:9:30"},"variableNames":[{"name":"product","nativeSrc":"7610:7:30","nodeType":"YulIdentifier","src":"7610:7:30"}]},{"body":{"nativeSrc":"7688:22:30","nodeType":"YulBlock","src":"7688:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7690:16:30","nodeType":"YulIdentifier","src":"7690:16:30"},"nativeSrc":"7690:18:30","nodeType":"YulFunctionCall","src":"7690:18:30"},"nativeSrc":"7690:18:30","nodeType":"YulExpressionStatement","src":"7690:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"7659:1:30","nodeType":"YulIdentifier","src":"7659:1:30"}],"functionName":{"name":"iszero","nativeSrc":"7652:6:30","nodeType":"YulIdentifier","src":"7652:6:30"},"nativeSrc":"7652:9:30","nodeType":"YulFunctionCall","src":"7652:9:30"},{"arguments":[{"name":"y","nativeSrc":"7666:1:30","nodeType":"YulIdentifier","src":"7666:1:30"},{"arguments":[{"name":"product","nativeSrc":"7673:7:30","nodeType":"YulIdentifier","src":"7673:7:30"},{"name":"x","nativeSrc":"7682:1:30","nodeType":"YulIdentifier","src":"7682:1:30"}],"functionName":{"name":"div","nativeSrc":"7669:3:30","nodeType":"YulIdentifier","src":"7669:3:30"},"nativeSrc":"7669:15:30","nodeType":"YulFunctionCall","src":"7669:15:30"}],"functionName":{"name":"eq","nativeSrc":"7663:2:30","nodeType":"YulIdentifier","src":"7663:2:30"},"nativeSrc":"7663:22:30","nodeType":"YulFunctionCall","src":"7663:22:30"}],"functionName":{"name":"or","nativeSrc":"7649:2:30","nodeType":"YulIdentifier","src":"7649:2:30"},"nativeSrc":"7649:37:30","nodeType":"YulFunctionCall","src":"7649:37:30"}],"functionName":{"name":"iszero","nativeSrc":"7642:6:30","nodeType":"YulIdentifier","src":"7642:6:30"},"nativeSrc":"7642:45:30","nodeType":"YulFunctionCall","src":"7642:45:30"},"nativeSrc":"7639:71:30","nodeType":"YulIf","src":"7639:71:30"}]},"name":"checked_mul_t_uint256","nativeSrc":"7548:168:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7579:1:30","nodeType":"YulTypedName","src":"7579:1:30","type":""},{"name":"y","nativeSrc":"7582:1:30","nodeType":"YulTypedName","src":"7582:1:30","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7588:7:30","nodeType":"YulTypedName","src":"7588:7:30","type":""}],"src":"7548:168:30"},{"body":{"nativeSrc":"7769:77:30","nodeType":"YulBlock","src":"7769:77:30","statements":[{"nativeSrc":"7779:16:30","nodeType":"YulAssignment","src":"7779:16:30","value":{"arguments":[{"name":"x","nativeSrc":"7790:1:30","nodeType":"YulIdentifier","src":"7790:1:30"},{"name":"y","nativeSrc":"7793:1:30","nodeType":"YulIdentifier","src":"7793:1:30"}],"functionName":{"name":"add","nativeSrc":"7786:3:30","nodeType":"YulIdentifier","src":"7786:3:30"},"nativeSrc":"7786:9:30","nodeType":"YulFunctionCall","src":"7786:9:30"},"variableNames":[{"name":"sum","nativeSrc":"7779:3:30","nodeType":"YulIdentifier","src":"7779:3:30"}]},{"body":{"nativeSrc":"7818:22:30","nodeType":"YulBlock","src":"7818:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7820:16:30","nodeType":"YulIdentifier","src":"7820:16:30"},"nativeSrc":"7820:18:30","nodeType":"YulFunctionCall","src":"7820:18:30"},"nativeSrc":"7820:18:30","nodeType":"YulExpressionStatement","src":"7820:18:30"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7810:1:30","nodeType":"YulIdentifier","src":"7810:1:30"},{"name":"sum","nativeSrc":"7813:3:30","nodeType":"YulIdentifier","src":"7813:3:30"}],"functionName":{"name":"gt","nativeSrc":"7807:2:30","nodeType":"YulIdentifier","src":"7807:2:30"},"nativeSrc":"7807:10:30","nodeType":"YulFunctionCall","src":"7807:10:30"},"nativeSrc":"7804:36:30","nodeType":"YulIf","src":"7804:36:30"}]},"name":"checked_add_t_uint256","nativeSrc":"7721:125:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7752:1:30","nodeType":"YulTypedName","src":"7752:1:30","type":""},{"name":"y","nativeSrc":"7755:1:30","nodeType":"YulTypedName","src":"7755:1:30","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7761:3:30","nodeType":"YulTypedName","src":"7761:3:30","type":""}],"src":"7721:125:30"},{"body":{"nativeSrc":"7980:168:30","nodeType":"YulBlock","src":"7980:168:30","statements":[{"nativeSrc":"7990:26:30","nodeType":"YulAssignment","src":"7990:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"8002:9:30","nodeType":"YulIdentifier","src":"8002:9:30"},{"kind":"number","nativeSrc":"8013:2:30","nodeType":"YulLiteral","src":"8013:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7998:3:30","nodeType":"YulIdentifier","src":"7998:3:30"},"nativeSrc":"7998:18:30","nodeType":"YulFunctionCall","src":"7998:18:30"},"variableNames":[{"name":"tail","nativeSrc":"7990:4:30","nodeType":"YulIdentifier","src":"7990:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8032:9:30","nodeType":"YulIdentifier","src":"8032:9:30"},{"arguments":[{"name":"value0","nativeSrc":"8047:6:30","nodeType":"YulIdentifier","src":"8047:6:30"},{"kind":"number","nativeSrc":"8055:42:30","nodeType":"YulLiteral","src":"8055:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8043:3:30","nodeType":"YulIdentifier","src":"8043:3:30"},"nativeSrc":"8043:55:30","nodeType":"YulFunctionCall","src":"8043:55:30"}],"functionName":{"name":"mstore","nativeSrc":"8025:6:30","nodeType":"YulIdentifier","src":"8025:6:30"},"nativeSrc":"8025:74:30","nodeType":"YulFunctionCall","src":"8025:74:30"},"nativeSrc":"8025:74:30","nodeType":"YulExpressionStatement","src":"8025:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8119:9:30","nodeType":"YulIdentifier","src":"8119:9:30"},{"kind":"number","nativeSrc":"8130:2:30","nodeType":"YulLiteral","src":"8130:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8115:3:30","nodeType":"YulIdentifier","src":"8115:3:30"},"nativeSrc":"8115:18:30","nodeType":"YulFunctionCall","src":"8115:18:30"},{"name":"value1","nativeSrc":"8135:6:30","nodeType":"YulIdentifier","src":"8135:6:30"}],"functionName":{"name":"mstore","nativeSrc":"8108:6:30","nodeType":"YulIdentifier","src":"8108:6:30"},"nativeSrc":"8108:34:30","nodeType":"YulFunctionCall","src":"8108:34:30"},"nativeSrc":"8108:34:30","nodeType":"YulExpressionStatement","src":"8108:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7851:297:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7941:9:30","nodeType":"YulTypedName","src":"7941:9:30","type":""},{"name":"value1","nativeSrc":"7952:6:30","nodeType":"YulTypedName","src":"7952:6:30","type":""},{"name":"value0","nativeSrc":"7960:6:30","nodeType":"YulTypedName","src":"7960:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7971:4:30","nodeType":"YulTypedName","src":"7971:4:30","type":""}],"src":"7851:297:30"},{"body":{"nativeSrc":"8185:152:30","nodeType":"YulBlock","src":"8185:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8202:1:30","nodeType":"YulLiteral","src":"8202:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8205:77:30","nodeType":"YulLiteral","src":"8205:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8195:6:30","nodeType":"YulIdentifier","src":"8195:6:30"},"nativeSrc":"8195:88:30","nodeType":"YulFunctionCall","src":"8195:88:30"},"nativeSrc":"8195:88:30","nodeType":"YulExpressionStatement","src":"8195:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8299:1:30","nodeType":"YulLiteral","src":"8299:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"8302:4:30","nodeType":"YulLiteral","src":"8302:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8292:6:30","nodeType":"YulIdentifier","src":"8292:6:30"},"nativeSrc":"8292:15:30","nodeType":"YulFunctionCall","src":"8292:15:30"},"nativeSrc":"8292:15:30","nodeType":"YulExpressionStatement","src":"8292:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8323:1:30","nodeType":"YulLiteral","src":"8323:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8326:4:30","nodeType":"YulLiteral","src":"8326:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8316:6:30","nodeType":"YulIdentifier","src":"8316:6:30"},"nativeSrc":"8316:15:30","nodeType":"YulFunctionCall","src":"8316:15:30"},"nativeSrc":"8316:15:30","nodeType":"YulExpressionStatement","src":"8316:15:30"}]},"name":"panic_error_0x41","nativeSrc":"8153:184:30","nodeType":"YulFunctionDefinition","src":"8153:184:30"},{"body":{"nativeSrc":"8454:1132:30","nodeType":"YulBlock","src":"8454:1132:30","statements":[{"body":{"nativeSrc":"8500:16:30","nodeType":"YulBlock","src":"8500:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8509:1:30","nodeType":"YulLiteral","src":"8509:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8512:1:30","nodeType":"YulLiteral","src":"8512:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8502:6:30","nodeType":"YulIdentifier","src":"8502:6:30"},"nativeSrc":"8502:12:30","nodeType":"YulFunctionCall","src":"8502:12:30"},"nativeSrc":"8502:12:30","nodeType":"YulExpressionStatement","src":"8502:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8475:7:30","nodeType":"YulIdentifier","src":"8475:7:30"},{"name":"headStart","nativeSrc":"8484:9:30","nodeType":"YulIdentifier","src":"8484:9:30"}],"functionName":{"name":"sub","nativeSrc":"8471:3:30","nodeType":"YulIdentifier","src":"8471:3:30"},"nativeSrc":"8471:23:30","nodeType":"YulFunctionCall","src":"8471:23:30"},{"kind":"number","nativeSrc":"8496:2:30","nodeType":"YulLiteral","src":"8496:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8467:3:30","nodeType":"YulIdentifier","src":"8467:3:30"},"nativeSrc":"8467:32:30","nodeType":"YulFunctionCall","src":"8467:32:30"},"nativeSrc":"8464:52:30","nodeType":"YulIf","src":"8464:52:30"},{"nativeSrc":"8525:37:30","nodeType":"YulVariableDeclaration","src":"8525:37:30","value":{"arguments":[{"name":"headStart","nativeSrc":"8552:9:30","nodeType":"YulIdentifier","src":"8552:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"8539:12:30","nodeType":"YulIdentifier","src":"8539:12:30"},"nativeSrc":"8539:23:30","nodeType":"YulFunctionCall","src":"8539:23:30"},"variables":[{"name":"offset","nativeSrc":"8529:6:30","nodeType":"YulTypedName","src":"8529:6:30","type":""}]},{"nativeSrc":"8571:28:30","nodeType":"YulVariableDeclaration","src":"8571:28:30","value":{"kind":"number","nativeSrc":"8581:18:30","nodeType":"YulLiteral","src":"8581:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8575:2:30","nodeType":"YulTypedName","src":"8575:2:30","type":""}]},{"body":{"nativeSrc":"8626:16:30","nodeType":"YulBlock","src":"8626:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8635:1:30","nodeType":"YulLiteral","src":"8635:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8638:1:30","nodeType":"YulLiteral","src":"8638:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8628:6:30","nodeType":"YulIdentifier","src":"8628:6:30"},"nativeSrc":"8628:12:30","nodeType":"YulFunctionCall","src":"8628:12:30"},"nativeSrc":"8628:12:30","nodeType":"YulExpressionStatement","src":"8628:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8614:6:30","nodeType":"YulIdentifier","src":"8614:6:30"},{"name":"_1","nativeSrc":"8622:2:30","nodeType":"YulIdentifier","src":"8622:2:30"}],"functionName":{"name":"gt","nativeSrc":"8611:2:30","nodeType":"YulIdentifier","src":"8611:2:30"},"nativeSrc":"8611:14:30","nodeType":"YulFunctionCall","src":"8611:14:30"},"nativeSrc":"8608:34:30","nodeType":"YulIf","src":"8608:34:30"},{"nativeSrc":"8651:32:30","nodeType":"YulVariableDeclaration","src":"8651:32:30","value":{"arguments":[{"name":"headStart","nativeSrc":"8665:9:30","nodeType":"YulIdentifier","src":"8665:9:30"},{"name":"offset","nativeSrc":"8676:6:30","nodeType":"YulIdentifier","src":"8676:6:30"}],"functionName":{"name":"add","nativeSrc":"8661:3:30","nodeType":"YulIdentifier","src":"8661:3:30"},"nativeSrc":"8661:22:30","nodeType":"YulFunctionCall","src":"8661:22:30"},"variables":[{"name":"_2","nativeSrc":"8655:2:30","nodeType":"YulTypedName","src":"8655:2:30","type":""}]},{"body":{"nativeSrc":"8731:16:30","nodeType":"YulBlock","src":"8731:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8740:1:30","nodeType":"YulLiteral","src":"8740:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8743:1:30","nodeType":"YulLiteral","src":"8743:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8733:6:30","nodeType":"YulIdentifier","src":"8733:6:30"},"nativeSrc":"8733:12:30","nodeType":"YulFunctionCall","src":"8733:12:30"},"nativeSrc":"8733:12:30","nodeType":"YulExpressionStatement","src":"8733:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"8710:2:30","nodeType":"YulIdentifier","src":"8710:2:30"},{"kind":"number","nativeSrc":"8714:4:30","nodeType":"YulLiteral","src":"8714:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8706:3:30","nodeType":"YulIdentifier","src":"8706:3:30"},"nativeSrc":"8706:13:30","nodeType":"YulFunctionCall","src":"8706:13:30"},{"name":"dataEnd","nativeSrc":"8721:7:30","nodeType":"YulIdentifier","src":"8721:7:30"}],"functionName":{"name":"slt","nativeSrc":"8702:3:30","nodeType":"YulIdentifier","src":"8702:3:30"},"nativeSrc":"8702:27:30","nodeType":"YulFunctionCall","src":"8702:27:30"}],"functionName":{"name":"iszero","nativeSrc":"8695:6:30","nodeType":"YulIdentifier","src":"8695:6:30"},"nativeSrc":"8695:35:30","nodeType":"YulFunctionCall","src":"8695:35:30"},"nativeSrc":"8692:55:30","nodeType":"YulIf","src":"8692:55:30"},{"nativeSrc":"8756:26:30","nodeType":"YulVariableDeclaration","src":"8756:26:30","value":{"arguments":[{"name":"_2","nativeSrc":"8779:2:30","nodeType":"YulIdentifier","src":"8779:2:30"}],"functionName":{"name":"calldataload","nativeSrc":"8766:12:30","nodeType":"YulIdentifier","src":"8766:12:30"},"nativeSrc":"8766:16:30","nodeType":"YulFunctionCall","src":"8766:16:30"},"variables":[{"name":"_3","nativeSrc":"8760:2:30","nodeType":"YulTypedName","src":"8760:2:30","type":""}]},{"nativeSrc":"8791:14:30","nodeType":"YulVariableDeclaration","src":"8791:14:30","value":{"kind":"number","nativeSrc":"8801:4:30","nodeType":"YulLiteral","src":"8801:4:30","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"8795:2:30","nodeType":"YulTypedName","src":"8795:2:30","type":""}]},{"body":{"nativeSrc":"8828:22:30","nodeType":"YulBlock","src":"8828:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8830:16:30","nodeType":"YulIdentifier","src":"8830:16:30"},"nativeSrc":"8830:18:30","nodeType":"YulFunctionCall","src":"8830:18:30"},"nativeSrc":"8830:18:30","nodeType":"YulExpressionStatement","src":"8830:18:30"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"8820:2:30","nodeType":"YulIdentifier","src":"8820:2:30"},{"name":"_1","nativeSrc":"8824:2:30","nodeType":"YulIdentifier","src":"8824:2:30"}],"functionName":{"name":"gt","nativeSrc":"8817:2:30","nodeType":"YulIdentifier","src":"8817:2:30"},"nativeSrc":"8817:10:30","nodeType":"YulFunctionCall","src":"8817:10:30"},"nativeSrc":"8814:36:30","nodeType":"YulIf","src":"8814:36:30"},{"nativeSrc":"8859:20:30","nodeType":"YulVariableDeclaration","src":"8859:20:30","value":{"arguments":[{"kind":"number","nativeSrc":"8873:1:30","nodeType":"YulLiteral","src":"8873:1:30","type":"","value":"5"},{"name":"_3","nativeSrc":"8876:2:30","nodeType":"YulIdentifier","src":"8876:2:30"}],"functionName":{"name":"shl","nativeSrc":"8869:3:30","nodeType":"YulIdentifier","src":"8869:3:30"},"nativeSrc":"8869:10:30","nodeType":"YulFunctionCall","src":"8869:10:30"},"variables":[{"name":"_5","nativeSrc":"8863:2:30","nodeType":"YulTypedName","src":"8863:2:30","type":""}]},{"nativeSrc":"8888:23:30","nodeType":"YulVariableDeclaration","src":"8888:23:30","value":{"arguments":[{"kind":"number","nativeSrc":"8908:2:30","nodeType":"YulLiteral","src":"8908:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8902:5:30","nodeType":"YulIdentifier","src":"8902:5:30"},"nativeSrc":"8902:9:30","nodeType":"YulFunctionCall","src":"8902:9:30"},"variables":[{"name":"memPtr","nativeSrc":"8892:6:30","nodeType":"YulTypedName","src":"8892:6:30","type":""}]},{"nativeSrc":"8920:115:30","nodeType":"YulVariableDeclaration","src":"8920:115:30","value":{"arguments":[{"name":"memPtr","nativeSrc":"8942:6:30","nodeType":"YulIdentifier","src":"8942:6:30"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"8958:2:30","nodeType":"YulIdentifier","src":"8958:2:30"},{"kind":"number","nativeSrc":"8962:2:30","nodeType":"YulLiteral","src":"8962:2:30","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"8954:3:30","nodeType":"YulIdentifier","src":"8954:3:30"},"nativeSrc":"8954:11:30","nodeType":"YulFunctionCall","src":"8954:11:30"},{"kind":"number","nativeSrc":"8967:66:30","nodeType":"YulLiteral","src":"8967:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"8950:3:30","nodeType":"YulIdentifier","src":"8950:3:30"},"nativeSrc":"8950:84:30","nodeType":"YulFunctionCall","src":"8950:84:30"}],"functionName":{"name":"add","nativeSrc":"8938:3:30","nodeType":"YulIdentifier","src":"8938:3:30"},"nativeSrc":"8938:97:30","nodeType":"YulFunctionCall","src":"8938:97:30"},"variables":[{"name":"newFreePtr","nativeSrc":"8924:10:30","nodeType":"YulTypedName","src":"8924:10:30","type":""}]},{"body":{"nativeSrc":"9094:22:30","nodeType":"YulBlock","src":"9094:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9096:16:30","nodeType":"YulIdentifier","src":"9096:16:30"},"nativeSrc":"9096:18:30","nodeType":"YulFunctionCall","src":"9096:18:30"},"nativeSrc":"9096:18:30","nodeType":"YulExpressionStatement","src":"9096:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9053:10:30","nodeType":"YulIdentifier","src":"9053:10:30"},{"name":"_1","nativeSrc":"9065:2:30","nodeType":"YulIdentifier","src":"9065:2:30"}],"functionName":{"name":"gt","nativeSrc":"9050:2:30","nodeType":"YulIdentifier","src":"9050:2:30"},"nativeSrc":"9050:18:30","nodeType":"YulFunctionCall","src":"9050:18:30"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9073:10:30","nodeType":"YulIdentifier","src":"9073:10:30"},{"name":"memPtr","nativeSrc":"9085:6:30","nodeType":"YulIdentifier","src":"9085:6:30"}],"functionName":{"name":"lt","nativeSrc":"9070:2:30","nodeType":"YulIdentifier","src":"9070:2:30"},"nativeSrc":"9070:22:30","nodeType":"YulFunctionCall","src":"9070:22:30"}],"functionName":{"name":"or","nativeSrc":"9047:2:30","nodeType":"YulIdentifier","src":"9047:2:30"},"nativeSrc":"9047:46:30","nodeType":"YulFunctionCall","src":"9047:46:30"},"nativeSrc":"9044:72:30","nodeType":"YulIf","src":"9044:72:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9132:2:30","nodeType":"YulLiteral","src":"9132:2:30","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9136:10:30","nodeType":"YulIdentifier","src":"9136:10:30"}],"functionName":{"name":"mstore","nativeSrc":"9125:6:30","nodeType":"YulIdentifier","src":"9125:6:30"},"nativeSrc":"9125:22:30","nodeType":"YulFunctionCall","src":"9125:22:30"},"nativeSrc":"9125:22:30","nodeType":"YulExpressionStatement","src":"9125:22:30"},{"nativeSrc":"9156:17:30","nodeType":"YulVariableDeclaration","src":"9156:17:30","value":{"name":"memPtr","nativeSrc":"9167:6:30","nodeType":"YulIdentifier","src":"9167:6:30"},"variables":[{"name":"dst","nativeSrc":"9160:3:30","nodeType":"YulTypedName","src":"9160:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9189:6:30","nodeType":"YulIdentifier","src":"9189:6:30"},{"name":"_3","nativeSrc":"9197:2:30","nodeType":"YulIdentifier","src":"9197:2:30"}],"functionName":{"name":"mstore","nativeSrc":"9182:6:30","nodeType":"YulIdentifier","src":"9182:6:30"},"nativeSrc":"9182:18:30","nodeType":"YulFunctionCall","src":"9182:18:30"},"nativeSrc":"9182:18:30","nodeType":"YulExpressionStatement","src":"9182:18:30"},{"nativeSrc":"9209:22:30","nodeType":"YulAssignment","src":"9209:22:30","value":{"arguments":[{"name":"memPtr","nativeSrc":"9220:6:30","nodeType":"YulIdentifier","src":"9220:6:30"},{"name":"_4","nativeSrc":"9228:2:30","nodeType":"YulIdentifier","src":"9228:2:30"}],"functionName":{"name":"add","nativeSrc":"9216:3:30","nodeType":"YulIdentifier","src":"9216:3:30"},"nativeSrc":"9216:15:30","nodeType":"YulFunctionCall","src":"9216:15:30"},"variableNames":[{"name":"dst","nativeSrc":"9209:3:30","nodeType":"YulIdentifier","src":"9209:3:30"}]},{"nativeSrc":"9240:34:30","nodeType":"YulVariableDeclaration","src":"9240:34:30","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9262:2:30","nodeType":"YulIdentifier","src":"9262:2:30"},{"name":"_5","nativeSrc":"9266:2:30","nodeType":"YulIdentifier","src":"9266:2:30"}],"functionName":{"name":"add","nativeSrc":"9258:3:30","nodeType":"YulIdentifier","src":"9258:3:30"},"nativeSrc":"9258:11:30","nodeType":"YulFunctionCall","src":"9258:11:30"},{"name":"_4","nativeSrc":"9271:2:30","nodeType":"YulIdentifier","src":"9271:2:30"}],"functionName":{"name":"add","nativeSrc":"9254:3:30","nodeType":"YulIdentifier","src":"9254:3:30"},"nativeSrc":"9254:20:30","nodeType":"YulFunctionCall","src":"9254:20:30"},"variables":[{"name":"srcEnd","nativeSrc":"9244:6:30","nodeType":"YulTypedName","src":"9244:6:30","type":""}]},{"body":{"nativeSrc":"9306:16:30","nodeType":"YulBlock","src":"9306:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9315:1:30","nodeType":"YulLiteral","src":"9315:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"9318:1:30","nodeType":"YulLiteral","src":"9318:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9308:6:30","nodeType":"YulIdentifier","src":"9308:6:30"},"nativeSrc":"9308:12:30","nodeType":"YulFunctionCall","src":"9308:12:30"},"nativeSrc":"9308:12:30","nodeType":"YulExpressionStatement","src":"9308:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9289:6:30","nodeType":"YulIdentifier","src":"9289:6:30"},{"name":"dataEnd","nativeSrc":"9297:7:30","nodeType":"YulIdentifier","src":"9297:7:30"}],"functionName":{"name":"gt","nativeSrc":"9286:2:30","nodeType":"YulIdentifier","src":"9286:2:30"},"nativeSrc":"9286:19:30","nodeType":"YulFunctionCall","src":"9286:19:30"},"nativeSrc":"9283:39:30","nodeType":"YulIf","src":"9283:39:30"},{"nativeSrc":"9331:22:30","nodeType":"YulVariableDeclaration","src":"9331:22:30","value":{"arguments":[{"name":"_2","nativeSrc":"9346:2:30","nodeType":"YulIdentifier","src":"9346:2:30"},{"name":"_4","nativeSrc":"9350:2:30","nodeType":"YulIdentifier","src":"9350:2:30"}],"functionName":{"name":"add","nativeSrc":"9342:3:30","nodeType":"YulIdentifier","src":"9342:3:30"},"nativeSrc":"9342:11:30","nodeType":"YulFunctionCall","src":"9342:11:30"},"variables":[{"name":"src","nativeSrc":"9335:3:30","nodeType":"YulTypedName","src":"9335:3:30","type":""}]},{"body":{"nativeSrc":"9418:86:30","nodeType":"YulBlock","src":"9418:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9439:3:30","nodeType":"YulIdentifier","src":"9439:3:30"},{"arguments":[{"name":"src","nativeSrc":"9457:3:30","nodeType":"YulIdentifier","src":"9457:3:30"}],"functionName":{"name":"calldataload","nativeSrc":"9444:12:30","nodeType":"YulIdentifier","src":"9444:12:30"},"nativeSrc":"9444:17:30","nodeType":"YulFunctionCall","src":"9444:17:30"}],"functionName":{"name":"mstore","nativeSrc":"9432:6:30","nodeType":"YulIdentifier","src":"9432:6:30"},"nativeSrc":"9432:30:30","nodeType":"YulFunctionCall","src":"9432:30:30"},"nativeSrc":"9432:30:30","nodeType":"YulExpressionStatement","src":"9432:30:30"},{"nativeSrc":"9475:19:30","nodeType":"YulAssignment","src":"9475:19:30","value":{"arguments":[{"name":"dst","nativeSrc":"9486:3:30","nodeType":"YulIdentifier","src":"9486:3:30"},{"name":"_4","nativeSrc":"9491:2:30","nodeType":"YulIdentifier","src":"9491:2:30"}],"functionName":{"name":"add","nativeSrc":"9482:3:30","nodeType":"YulIdentifier","src":"9482:3:30"},"nativeSrc":"9482:12:30","nodeType":"YulFunctionCall","src":"9482:12:30"},"variableNames":[{"name":"dst","nativeSrc":"9475:3:30","nodeType":"YulIdentifier","src":"9475:3:30"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9373:3:30","nodeType":"YulIdentifier","src":"9373:3:30"},{"name":"srcEnd","nativeSrc":"9378:6:30","nodeType":"YulIdentifier","src":"9378:6:30"}],"functionName":{"name":"lt","nativeSrc":"9370:2:30","nodeType":"YulIdentifier","src":"9370:2:30"},"nativeSrc":"9370:15:30","nodeType":"YulFunctionCall","src":"9370:15:30"},"nativeSrc":"9362:142:30","nodeType":"YulForLoop","post":{"nativeSrc":"9386:23:30","nodeType":"YulBlock","src":"9386:23:30","statements":[{"nativeSrc":"9388:19:30","nodeType":"YulAssignment","src":"9388:19:30","value":{"arguments":[{"name":"src","nativeSrc":"9399:3:30","nodeType":"YulIdentifier","src":"9399:3:30"},{"name":"_4","nativeSrc":"9404:2:30","nodeType":"YulIdentifier","src":"9404:2:30"}],"functionName":{"name":"add","nativeSrc":"9395:3:30","nodeType":"YulIdentifier","src":"9395:3:30"},"nativeSrc":"9395:12:30","nodeType":"YulFunctionCall","src":"9395:12:30"},"variableNames":[{"name":"src","nativeSrc":"9388:3:30","nodeType":"YulIdentifier","src":"9388:3:30"}]}]},"pre":{"nativeSrc":"9366:3:30","nodeType":"YulBlock","src":"9366:3:30","statements":[]},"src":"9362:142:30"},{"nativeSrc":"9513:16:30","nodeType":"YulAssignment","src":"9513:16:30","value":{"name":"memPtr","nativeSrc":"9523:6:30","nodeType":"YulIdentifier","src":"9523:6:30"},"variableNames":[{"name":"value0","nativeSrc":"9513:6:30","nodeType":"YulIdentifier","src":"9513:6:30"}]},{"nativeSrc":"9538:42:30","nodeType":"YulAssignment","src":"9538:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9565:9:30","nodeType":"YulIdentifier","src":"9565:9:30"},{"name":"_4","nativeSrc":"9576:2:30","nodeType":"YulIdentifier","src":"9576:2:30"}],"functionName":{"name":"add","nativeSrc":"9561:3:30","nodeType":"YulIdentifier","src":"9561:3:30"},"nativeSrc":"9561:18:30","nodeType":"YulFunctionCall","src":"9561:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"9548:12:30","nodeType":"YulIdentifier","src":"9548:12:30"},"nativeSrc":"9548:32:30","nodeType":"YulFunctionCall","src":"9548:32:30"},"variableNames":[{"name":"value1","nativeSrc":"9538:6:30","nodeType":"YulIdentifier","src":"9538:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8342:1244:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8412:9:30","nodeType":"YulTypedName","src":"8412:9:30","type":""},{"name":"dataEnd","nativeSrc":"8423:7:30","nodeType":"YulTypedName","src":"8423:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8435:6:30","nodeType":"YulTypedName","src":"8435:6:30","type":""},{"name":"value1","nativeSrc":"8443:6:30","nodeType":"YulTypedName","src":"8443:6:30","type":""}],"src":"8342:1244:30"},{"body":{"nativeSrc":"9738:182:30","nodeType":"YulBlock","src":"9738:182:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9755:3:30","nodeType":"YulIdentifier","src":"9755:3:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9768:2:30","nodeType":"YulLiteral","src":"9768:2:30","type":"","value":"96"},{"name":"value0","nativeSrc":"9772:6:30","nodeType":"YulIdentifier","src":"9772:6:30"}],"functionName":{"name":"shl","nativeSrc":"9764:3:30","nodeType":"YulIdentifier","src":"9764:3:30"},"nativeSrc":"9764:15:30","nodeType":"YulFunctionCall","src":"9764:15:30"},{"kind":"number","nativeSrc":"9781:66:30","nodeType":"YulLiteral","src":"9781:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"9760:3:30","nodeType":"YulIdentifier","src":"9760:3:30"},"nativeSrc":"9760:88:30","nodeType":"YulFunctionCall","src":"9760:88:30"}],"functionName":{"name":"mstore","nativeSrc":"9748:6:30","nodeType":"YulIdentifier","src":"9748:6:30"},"nativeSrc":"9748:101:30","nodeType":"YulFunctionCall","src":"9748:101:30"},"nativeSrc":"9748:101:30","nodeType":"YulExpressionStatement","src":"9748:101:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9869:3:30","nodeType":"YulIdentifier","src":"9869:3:30"},{"kind":"number","nativeSrc":"9874:2:30","nodeType":"YulLiteral","src":"9874:2:30","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"9865:3:30","nodeType":"YulIdentifier","src":"9865:3:30"},"nativeSrc":"9865:12:30","nodeType":"YulFunctionCall","src":"9865:12:30"},{"name":"value1","nativeSrc":"9879:6:30","nodeType":"YulIdentifier","src":"9879:6:30"}],"functionName":{"name":"mstore","nativeSrc":"9858:6:30","nodeType":"YulIdentifier","src":"9858:6:30"},"nativeSrc":"9858:28:30","nodeType":"YulFunctionCall","src":"9858:28:30"},"nativeSrc":"9858:28:30","nodeType":"YulExpressionStatement","src":"9858:28:30"},{"nativeSrc":"9895:19:30","nodeType":"YulAssignment","src":"9895:19:30","value":{"arguments":[{"name":"pos","nativeSrc":"9906:3:30","nodeType":"YulIdentifier","src":"9906:3:30"},{"kind":"number","nativeSrc":"9911:2:30","nodeType":"YulLiteral","src":"9911:2:30","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"9902:3:30","nodeType":"YulIdentifier","src":"9902:3:30"},"nativeSrc":"9902:12:30","nodeType":"YulFunctionCall","src":"9902:12:30"},"variableNames":[{"name":"end","nativeSrc":"9895:3:30","nodeType":"YulIdentifier","src":"9895:3:30"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9591:329:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9706:3:30","nodeType":"YulTypedName","src":"9706:3:30","type":""},{"name":"value1","nativeSrc":"9711:6:30","nodeType":"YulTypedName","src":"9711:6:30","type":""},{"name":"value0","nativeSrc":"9719:6:30","nodeType":"YulTypedName","src":"9719:6:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9730:3:30","nodeType":"YulTypedName","src":"9730:3:30","type":""}],"src":"9591:329:30"},{"body":{"nativeSrc":"10054:119:30","nodeType":"YulBlock","src":"10054:119:30","statements":[{"nativeSrc":"10064:26:30","nodeType":"YulAssignment","src":"10064:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"10076:9:30","nodeType":"YulIdentifier","src":"10076:9:30"},{"kind":"number","nativeSrc":"10087:2:30","nodeType":"YulLiteral","src":"10087:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10072:3:30","nodeType":"YulIdentifier","src":"10072:3:30"},"nativeSrc":"10072:18:30","nodeType":"YulFunctionCall","src":"10072:18:30"},"variableNames":[{"name":"tail","nativeSrc":"10064:4:30","nodeType":"YulIdentifier","src":"10064:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10106:9:30","nodeType":"YulIdentifier","src":"10106:9:30"},{"name":"value0","nativeSrc":"10117:6:30","nodeType":"YulIdentifier","src":"10117:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10099:6:30","nodeType":"YulIdentifier","src":"10099:6:30"},"nativeSrc":"10099:25:30","nodeType":"YulFunctionCall","src":"10099:25:30"},"nativeSrc":"10099:25:30","nodeType":"YulExpressionStatement","src":"10099:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10144:9:30","nodeType":"YulIdentifier","src":"10144:9:30"},{"kind":"number","nativeSrc":"10155:2:30","nodeType":"YulLiteral","src":"10155:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10140:3:30","nodeType":"YulIdentifier","src":"10140:3:30"},"nativeSrc":"10140:18:30","nodeType":"YulFunctionCall","src":"10140:18:30"},{"name":"value1","nativeSrc":"10160:6:30","nodeType":"YulIdentifier","src":"10160:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10133:6:30","nodeType":"YulIdentifier","src":"10133:6:30"},"nativeSrc":"10133:34:30","nodeType":"YulFunctionCall","src":"10133:34:30"},"nativeSrc":"10133:34:30","nodeType":"YulExpressionStatement","src":"10133:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9925:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10015:9:30","nodeType":"YulTypedName","src":"10015:9:30","type":""},{"name":"value1","nativeSrc":"10026:6:30","nodeType":"YulTypedName","src":"10026:6:30","type":""},{"name":"value0","nativeSrc":"10034:6:30","nodeType":"YulTypedName","src":"10034:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10045:4:30","nodeType":"YulTypedName","src":"10045:4:30","type":""}],"src":"9925:248:30"},{"body":{"nativeSrc":"10511:402:30","nodeType":"YulBlock","src":"10511:402:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10528:9:30","nodeType":"YulIdentifier","src":"10528:9:30"},{"kind":"number","nativeSrc":"10539:3:30","nodeType":"YulLiteral","src":"10539:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10521:6:30","nodeType":"YulIdentifier","src":"10521:6:30"},"nativeSrc":"10521:22:30","nodeType":"YulFunctionCall","src":"10521:22:30"},"nativeSrc":"10521:22:30","nodeType":"YulExpressionStatement","src":"10521:22:30"},{"nativeSrc":"10552:88:30","nodeType":"YulVariableDeclaration","src":"10552:88:30","value":{"arguments":[{"name":"value0","nativeSrc":"10604:6:30","nodeType":"YulIdentifier","src":"10604:6:30"},{"name":"value1","nativeSrc":"10612:6:30","nodeType":"YulIdentifier","src":"10612:6:30"},{"arguments":[{"name":"headStart","nativeSrc":"10624:9:30","nodeType":"YulIdentifier","src":"10624:9:30"},{"kind":"number","nativeSrc":"10635:3:30","nodeType":"YulLiteral","src":"10635:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10620:3:30","nodeType":"YulIdentifier","src":"10620:3:30"},"nativeSrc":"10620:19:30","nodeType":"YulFunctionCall","src":"10620:19:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10566:37:30","nodeType":"YulIdentifier","src":"10566:37:30"},"nativeSrc":"10566:74:30","nodeType":"YulFunctionCall","src":"10566:74:30"},"variables":[{"name":"tail_1","nativeSrc":"10556:6:30","nodeType":"YulTypedName","src":"10556:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10660:9:30","nodeType":"YulIdentifier","src":"10660:9:30"},{"kind":"number","nativeSrc":"10671:2:30","nodeType":"YulLiteral","src":"10671:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10656:3:30","nodeType":"YulIdentifier","src":"10656:3:30"},"nativeSrc":"10656:18:30","nodeType":"YulFunctionCall","src":"10656:18:30"},{"arguments":[{"name":"tail_1","nativeSrc":"10680:6:30","nodeType":"YulIdentifier","src":"10680:6:30"},{"name":"headStart","nativeSrc":"10688:9:30","nodeType":"YulIdentifier","src":"10688:9:30"}],"functionName":{"name":"sub","nativeSrc":"10676:3:30","nodeType":"YulIdentifier","src":"10676:3:30"},"nativeSrc":"10676:22:30","nodeType":"YulFunctionCall","src":"10676:22:30"}],"functionName":{"name":"mstore","nativeSrc":"10649:6:30","nodeType":"YulIdentifier","src":"10649:6:30"},"nativeSrc":"10649:50:30","nodeType":"YulFunctionCall","src":"10649:50:30"},"nativeSrc":"10649:50:30","nodeType":"YulExpressionStatement","src":"10649:50:30"},{"nativeSrc":"10708:69:30","nodeType":"YulAssignment","src":"10708:69:30","value":{"arguments":[{"name":"value2","nativeSrc":"10754:6:30","nodeType":"YulIdentifier","src":"10754:6:30"},{"name":"value3","nativeSrc":"10762:6:30","nodeType":"YulIdentifier","src":"10762:6:30"},{"name":"tail_1","nativeSrc":"10770:6:30","nodeType":"YulIdentifier","src":"10770:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10716:37:30","nodeType":"YulIdentifier","src":"10716:37:30"},"nativeSrc":"10716:61:30","nodeType":"YulFunctionCall","src":"10716:61:30"},"variableNames":[{"name":"tail","nativeSrc":"10708:4:30","nodeType":"YulIdentifier","src":"10708:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10797:9:30","nodeType":"YulIdentifier","src":"10797:9:30"},{"kind":"number","nativeSrc":"10808:2:30","nodeType":"YulLiteral","src":"10808:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10793:3:30","nodeType":"YulIdentifier","src":"10793:3:30"},"nativeSrc":"10793:18:30","nodeType":"YulFunctionCall","src":"10793:18:30"},{"name":"value4","nativeSrc":"10813:6:30","nodeType":"YulIdentifier","src":"10813:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10786:6:30","nodeType":"YulIdentifier","src":"10786:6:30"},"nativeSrc":"10786:34:30","nodeType":"YulFunctionCall","src":"10786:34:30"},"nativeSrc":"10786:34:30","nodeType":"YulExpressionStatement","src":"10786:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10840:9:30","nodeType":"YulIdentifier","src":"10840:9:30"},{"kind":"number","nativeSrc":"10851:2:30","nodeType":"YulLiteral","src":"10851:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10836:3:30","nodeType":"YulIdentifier","src":"10836:3:30"},"nativeSrc":"10836:18:30","nodeType":"YulFunctionCall","src":"10836:18:30"},{"name":"value5","nativeSrc":"10856:6:30","nodeType":"YulIdentifier","src":"10856:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10829:6:30","nodeType":"YulIdentifier","src":"10829:6:30"},"nativeSrc":"10829:34:30","nodeType":"YulFunctionCall","src":"10829:34:30"},"nativeSrc":"10829:34:30","nodeType":"YulExpressionStatement","src":"10829:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10883:9:30","nodeType":"YulIdentifier","src":"10883:9:30"},{"kind":"number","nativeSrc":"10894:3:30","nodeType":"YulLiteral","src":"10894:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10879:3:30","nodeType":"YulIdentifier","src":"10879:3:30"},"nativeSrc":"10879:19:30","nodeType":"YulFunctionCall","src":"10879:19:30"},{"name":"value6","nativeSrc":"10900:6:30","nodeType":"YulIdentifier","src":"10900:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10872:6:30","nodeType":"YulIdentifier","src":"10872:6:30"},"nativeSrc":"10872:35:30","nodeType":"YulFunctionCall","src":"10872:35:30"},"nativeSrc":"10872:35:30","nodeType":"YulExpressionStatement","src":"10872:35:30"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10178:735:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10432:9:30","nodeType":"YulTypedName","src":"10432:9:30","type":""},{"name":"value6","nativeSrc":"10443:6:30","nodeType":"YulTypedName","src":"10443:6:30","type":""},{"name":"value5","nativeSrc":"10451:6:30","nodeType":"YulTypedName","src":"10451:6:30","type":""},{"name":"value4","nativeSrc":"10459:6:30","nodeType":"YulTypedName","src":"10459:6:30","type":""},{"name":"value3","nativeSrc":"10467:6:30","nodeType":"YulTypedName","src":"10467:6:30","type":""},{"name":"value2","nativeSrc":"10475:6:30","nodeType":"YulTypedName","src":"10475:6:30","type":""},{"name":"value1","nativeSrc":"10483:6:30","nodeType":"YulTypedName","src":"10483:6:30","type":""},{"name":"value0","nativeSrc":"10491:6:30","nodeType":"YulTypedName","src":"10491:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10502:4:30","nodeType":"YulTypedName","src":"10502:4:30","type":""}],"src":"10178:735:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":632},{"length":32,"start":829}],"1916":[{"length":32,"start":559},{"length":32,"start":1255},{"length":32,"start":2156}],"1920":[{"length":32,"start":1011},{"length":32,"start":3162}],"1923":[{"length":32,"start":689},{"length":32,"start":1177}],"1926":[{"length":32,"start":1050},{"length":32,"start":1141}],"1929":[{"length":32,"start":480},{"length":32,"start":1363},{"length":32,"start":3406}],"1932":[{"length":32,"start":771},{"length":32,"start":2502},{"length":32,"start":3917}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101985760003560e01c806351e75e8b116100e3578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610415578063f23a6e611461043c578063f95d10161461044f57600080fd5b8063bc197c81146103a2578063c131754e146103e6578063cd18a34f146103ee57600080fd5b8063aa918fd5116100bd578063aa918fd5146102a4578063ab504e731461037a578063bab2f5521461039a57600080fd5b806351e75e8b146102fe57806355f5b0a814610325578063572b6c051461032d57600080fd5b806328a979cf11610145578063424ab4f71161011f578063424ab4f7146102a4578063491bde66146102ac5780634dac1c2b146102d357600080fd5b806328a979cf1461022a5780632b4c9f16146102765780633838a2011461029c57600080fd5b80630455645a116101765780630455645a1461020257806312828b7f1461020a5780631de0e40b146101c557600080fd5b806301ffc9a71461019d5780630277640e146101c5578063043063bc146101db575b600080fd5b6101b06101ab3660046111f5565b610457565b60405190151581526020015b60405180910390f35b6101cd600181565b6040519081526020016101bc565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600581565b6101cd610218366004611260565b60026020526000908152604090205481565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b6101cd601981565b6101cd600381565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd6102e136600461127b565b600160209081526000928352604080842090915290825290205481565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600281565b6101b061033b366004611260565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cd6103883660046112a7565b60006020819052908152604090205481565b6101cd610471565b6103b56103b036600461134e565b6104cd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101bc565b6101cd601081565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6103b561044a366004611409565b610c40565b6101cd600981565b600061046b82610465611062565b90611090565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104be7f0000000000000000000000000000000000000000000000000000000000000000426114b0565b6104c891906114c3565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610545576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600061054f610471565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105ae576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105f29030908c908c908c908c90600401611549565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b505050506000805b888110156108fe5787878281811061064257610642611598565b905060200201356000036106dc57338a8a8381811061066357610663611598565b9050602002013589898481811061067c5761067c611598565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161053c565b8989828181106106ee576106ee611598565b9050602002013560010361073257600188888381811061071057610710611598565b9050602002013561072191906115c7565b61072b90836115de565b91506108f6565b89898281811061074457610744611598565b9050602002013560020361076657600388888381811061071057610710611598565b89898281811061077857610778611598565b9050602002013560030361079a57600388888381811061071057610710611598565b8989828181106107ac576107ac611598565b905060200201356004036107ce57600588888381811061071057610710611598565b8989828181106107e0576107e0611598565b9050602002013560050361080257600988888381811061071057610710611598565b89898281811061081457610814611598565b9050602002013560060361083657601988888381811061071057610710611598565b89898281811061084857610848611598565b9050602002013560070361086a57601088888381811061071057610710611598565b7f00000000000000000000000000000000000000000000000000000000000000008a8a8381811061089d5761089d611598565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161053c565b600101610628565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610ad25760008061093c888a018a611620565b91509150608083901c600003610ab2576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506109eb837f00000000000000000000000000000000000000000000000000000000000000008361116a565b610a40576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161053c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b979097179687905581518781529081018790528692917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a250505b612710610abf82876115c7565b610ac991906114c3565b94505050610af9565b608081901c8015610af757612710610aea82866115c7565b610af491906114c3565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b1f57610b1c81856115c7565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b5a9086906115de565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610baa9084906115de565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c049796959493929190611702565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610cb3576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161053c565b60018514610cf6576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161053c565b83600114610d40576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161053c565b6000610d4a610471565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610da9576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e31576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161053c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e9057600080fd5b505af1158015610ea4573d6000803e3d6000fd5b5050506002821790508415610fd157608082901c600003610fd157600080610ece87890189611620565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610f72837f00000000000000000000000000000000000000000000000000000000000000008361116a565b610fc7576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161053c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061046b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6114b0565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110e05750600061046b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111315750600161046b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000826111778584611180565b14949350505050565b600081815b84518110156111bb576111b1828683815181106111a4576111a4611598565b60200260200101516111c3565b9150600101611185565b509392505050565b60008183106111df5760008281526020849052604090206111ee565b60008381526020839052604090205b9392505050565b60006020828403121561120757600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111ee57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461125b57600080fd5b919050565b60006020828403121561127257600080fd5b6111ee82611237565b6000806040838503121561128e57600080fd5b8235915061129e60208401611237565b90509250929050565b6000602082840312156112b957600080fd5b5035919050565b60008083601f8401126112d257600080fd5b50813567ffffffffffffffff8111156112ea57600080fd5b6020830191508360208260051b850101111561130557600080fd5b9250929050565b60008083601f84011261131e57600080fd5b50813567ffffffffffffffff81111561133657600080fd5b60208301915083602082850101111561130557600080fd5b60008060008060008060008060a0898b03121561136a57600080fd5b61137389611237565b975061138160208a01611237565b9650604089013567ffffffffffffffff8082111561139e57600080fd5b6113aa8c838d016112c0565b909850965060608b01359150808211156113c357600080fd5b6113cf8c838d016112c0565b909650945060808b01359150808211156113e857600080fd5b506113f58b828c0161130c565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561142257600080fd5b61142b87611237565b955061143960208801611237565b94506040870135935060608701359250608087013567ffffffffffffffff81111561146357600080fd5b61146f89828a0161130c565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046b5761046b611481565b6000826114f9577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561153057600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006115796060830186886114fe565b828103604084015261158c8185876114fe565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761046b5761046b611481565b8082018082111561046b5761046b611481565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561163357600080fd5b823567ffffffffffffffff8082111561164b57600080fd5b818501915085601f83011261165f57600080fd5b8135602082821115611673576116736115f1565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156116b6576116b66115f1565b6040529283528183019350848101820192898411156116d457600080fd5b948201945b838610156116f2578535855294820194938201936116d9565b9997909101359750505050505050565b60a08152600061171660a08301898b6114fe565b828103602084015261172981888a6114fe565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220b064a5050b9585e90268c9d40b032184816777bed3c72bdbc643b01f45b6363064736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11F5 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH32 0x0 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x127B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x1260 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A7 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x471 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x134E JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x1409 JUMP JUMPDEST PUSH2 0xC40 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B DUP3 PUSH2 0x465 PUSH2 0x1062 JUMP JUMPDEST SWAP1 PUSH2 0x1090 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x4BE PUSH32 0x0 TIMESTAMP PUSH2 0x14B0 JUMP JUMPDEST PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x5F2 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1549 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x8FE JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x642 JUMPI PUSH2 0x642 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x6DC JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x67C JUMPI PUSH2 0x67C PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x732 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0x72B SWAP1 DUP4 PUSH2 0x15DE JUMP JUMPDEST SWAP2 POP PUSH2 0x8F6 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x744 JUMPI PUSH2 0x744 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x766 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x778 JUMPI PUSH2 0x778 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x79A JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x7CE JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x802 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x836 JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x848 JUMPI PUSH2 0x848 PUSH2 0x1598 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x86A JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1598 JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x89D JUMPI PUSH2 0x89D PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x628 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xAD2 JUMPI PUSH1 0x0 DUP1 PUSH2 0x93C DUP9 DUP11 ADD DUP11 PUSH2 0x1620 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAB2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x9EB DUP4 PUSH32 0x0 DUP4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0xA40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL SWAP8 SWAP1 SWAP8 OR SWAP7 DUP8 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP7 SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xABF DUP3 DUP8 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0xAC9 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xAF9 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xAF7 JUMPI PUSH2 0x2710 PUSH2 0xAEA DUP3 DUP7 PUSH2 0x15C7 JUMP JUMPDEST PUSH2 0xAF4 SWAP2 SWAP1 PUSH2 0x14C3 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB1F JUMPI PUSH2 0xB1C DUP2 DUP6 PUSH2 0x15C7 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB5A SWAP1 DUP7 SWAP1 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBAA SWAP1 DUP5 SWAP1 PUSH2 0x15DE JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC04 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1702 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xCB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xCF6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD4A PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDA9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE31 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xFD1 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xFD1 JUMPI PUSH1 0x0 DUP1 PUSH2 0xECE DUP8 DUP10 ADD DUP10 PUSH2 0x1620 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xF72 DUP4 PUSH32 0x0 DUP4 PUSH2 0x116A JUMP JUMPDEST PUSH2 0xFC7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x14B0 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10E0 JUMPI POP PUSH1 0x0 PUSH2 0x46B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1131 JUMPI POP PUSH1 0x1 PUSH2 0x46B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1177 DUP6 DUP5 PUSH2 0x1180 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11BB JUMPI PUSH2 0x11B1 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11A4 JUMPI PUSH2 0x11A4 PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11C3 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1185 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1207 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x11EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x125B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11EE DUP3 PUSH2 0x1237 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x128E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x129E PUSH1 0x20 DUP5 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1336 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1305 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x136A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1373 DUP10 PUSH2 0x1237 JUMP JUMPDEST SWAP8 POP PUSH2 0x1381 PUSH1 0x20 DUP11 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x139E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13AA DUP13 DUP4 DUP14 ADD PUSH2 0x12C0 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CF DUP13 DUP4 DUP14 ADD PUSH2 0x12C0 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F5 DUP12 DUP3 DUP13 ADD PUSH2 0x130C JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1422 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x142B DUP8 PUSH2 0x1237 JUMP JUMPDEST SWAP6 POP PUSH2 0x1439 PUSH1 0x20 DUP9 ADD PUSH2 0x1237 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146F DUP10 DUP3 DUP11 ADD PUSH2 0x130C JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14F9 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1530 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1579 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x14FE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x158C DUP2 DUP6 DUP8 PUSH2 0x14FE JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x1481 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1633 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x164B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1673 JUMPI PUSH2 0x1673 PUSH2 0x15F1 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x16B6 JUMPI PUSH2 0x16B6 PUSH2 0x15F1 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x16D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x16F2 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x16D9 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1716 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x14FE JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1729 DUP2 DUP9 DUP11 PUSH2 0x14FE JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB0 PUSH5 0xA5050B9585 0xE9 MUL PUSH9 0xC9D40B032184816777 0xBE 0xD3 0xC7 0x2B 0xDB 0xC6 NUMBER 0xB0 0x1F GASLIMIT 0xB6 CALLDATASIZE ADDRESS PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"889:11666:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:30;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1291:47:26;;1337:1;1291:47;;;;;689:25:30;;;677:2;662:18;1291:47:26;543:177:30;2243:34:26;;;;;1450:47;;1496:1;1450:47;;2811:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1839:46;;;;;;;;1317:42:30;1305:55;;;1287:74;;1275:2;1260:18;1839:46:26;1117:250:30;728:115:11;817:19;728:115;;1556:48:26;;1602:2;1556:48;;1344:47;;1390:1;1344:47;;2074:37;;;;;2594:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2350:36;;;;;1713:42;;1754:1;1713:42;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;2458:51:26;;;;;;:::i;:::-;;;;;;;;;;;;;;;6123:127;;;:::i;9100:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4368:66:30;4356:79;;;4338:98;;4326:2;4311:18;9100:3453:26;4194:248:30;1610:48:26;;1656:2;1610:48;;1972:45;;;;;2162:39;;;;;6936:1630;;;;;;:::i;:::-;;:::i;1503:47::-;;1549:1;1503:47;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;6123:127:26:-;6168:7;6229:14;6195:30;6213:12;6195:15;:30;:::i;:::-;6194:49;;;;:::i;:::-;6187:56;;6123:127;:::o;9100:3453::-;9300:6;9322:10;:35;9344:12;9322:35;;9318:104;;9380:31;;;;;9400:10;9380:31;;;1287:74:30;1260:18;;9380:31:26;;;;;;;;9318:104;9432:13;9448:14;:12;:14::i;:::-;9432:30;;9484:9;9476:5;:17;9472:74;;;9516:19;;;;;;;;689:25:30;;;662:18;;9516:19:26;543:177:30;9472:74:26;9556:70;;;;;9573:10;;9556:42;;:70;;9607:4;;9614:3;;;;9619:6;;;;9556:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9637:20;9676:9;9671:1007;9691:14;;;9671:1007;;;9730:6;;9737:1;9730:9;;;;;;;:::i;:::-;;;;;;;9743:1;9730:14;9726:108;;9789:10;9801:3;;9805:1;9801:6;;;;;;;:::i;:::-;;;;;;;9809;;9816:1;9809:9;;;;;;;:::i;:::-;9771:48;;;;;7407:42:30;7395:55;;;9771:48:26;;;7377:74:30;7467:18;;;7460:34;;;;-1:-1:-1;9809:9:26;;;;;;7510:18:30;;;7503:34;7350:18;;9771:48:26;7175:368:30;9726:108:26;9852:3;;9856:1;9852:6;;;;;;;:::i;:::-;;;;;;;9862:1;9852:11;9848:820;;1337:1;9900:6;;9907:1;9900:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;9883:49;;;;:::i;:::-;;;9848:820;;;9957:3;;9961:1;9957:6;;;;;;;:::i;:::-;;;;;;;9967:1;9957:11;9953:715;;1390:1;10005:6;;10012:1;10005:9;;;;;;;:::i;9953:715::-;10062:3;;10066:1;10062:6;;;;;;;:::i;:::-;;;;;;;10072:1;10062:11;10058:610;;1443:1;10110:6;;10117:1;10110:9;;;;;;;:::i;10058:610::-;10167:3;;10171:1;10167:6;;;;;;;:::i;:::-;;;;;;;10177:1;10167:11;10163:505;;1496:1;10215:6;;10222:1;10215:9;;;;;;;:::i;10163:505::-;10272:3;;10276:1;10272:6;;;;;;;:::i;:::-;;;;;;;10282:1;10272:11;10268:400;;1549:1;10320:6;;10327:1;10320:9;;;;;;;:::i;10268:400::-;10377:3;;10381:1;10377:6;;;;;;;:::i;:::-;;;;;;;10387:1;10377:11;10373:295;;1602:2;10425:6;;10432:1;10425:9;;;;;;;:::i;10373:295::-;10482:3;;10486:1;10482:6;;;;;;;:::i;:::-;;;;;;;10492:1;10482:11;10478:190;;1656:2;10530:6;;10537:1;10530:9;;;;;;;:::i;10478:190::-;10631:12;10646:3;;10650:1;10646:6;;;;;;;:::i;:::-;10608:45;;;;;8055:42:30;8043:55;;;10608:45:26;;;8025:74:30;10646:6:26;;;;;;;8115:18:30;;;8108:34;-1:-1:-1;7998:18:30;;10608:45:26;7851:297:30;10478:190:26;9707:3;;9671:1007;;;-1:-1:-1;10808:24:26;;;10688:16;10808:24;;;:14;:24;;;;;;10707:4;;10847:15;;10843:1122;;10879:22;;10944:38;;;;10955:4;10944:38;:::i;:::-;10878:104;;;;11021:3;11001:16;:23;;11029:1;11000:30;10996:613;;11075:57;;9781:66:30;9768:2;9764:15;;;9760:88;11075:57:26;;;9748:101:30;9865:12;;;9858:28;;;11050:12:26;;9902::30;;11075:57:26;;;;;;;;;;;;;11065:68;;11075:57;11065:68;;;;;-1:-1:-1;11156:31:26;:5;11169:11;11065:68;11156:12;:31::i;:::-;11151:139;;11218:53;;;;;8055:42:30;8043:55;;11218:53:26;;;8025:74:30;8115:18;;;8108:34;;;7998:18;;11218:53:26;7851:297:30;11151:139:26;11463:24;;;11308;11463;;;:14;:24;;;;;;;;;11369:3;11336:36;;;11335:57;;;;11463:43;;;;11529:65;;10099:25:30;;;10140:18;;;10133:34;;;11335:57:26;;11463:24;11529:65;;10072:18:30;11529:65:26;;;;;;;11032:577;;10996:613;1098:6;11639:44;11654:29;11639:12;:44;:::i;:::-;11638:61;;;;:::i;:::-;11623:76;;10864:846;;10843:1122;;;11790:3;11770:23;;;11811:33;;11807:148;;1098:6;11880:44;11895:29;11880:12;:44;:::i;:::-;11879:61;;;;:::i;:::-;11864:76;;11807:148;11716:249;10843:1122;11975:49;;;12038:17;;12034:77;;12071:29;12087:13;12071:29;;:::i;:::-;;;12034:77;12155:28;12186:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;12221:12;;12186:47;:::i;:::-;12243:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;12342:23;;;;;;;;;:39;;12155:78;;-1:-1:-1;12369:12:26;;12342:23;;12243:22;12342:39;;12369:12;;12342:39;:::i;:::-;;;;;;;;12419:5;12409:8;12397:95;;;12426:3;;12431:6;;12439:12;12453:20;12475:16;12397:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;12510:36:26;;9100:3453;-1:-1:-1;;;;;;;;;;;;;;9100:3453:26:o;6936:1630::-;7061:6;7083:10;:34;7105:11;7083:34;;7079:103;;7140:31;;;;;7160:10;7140:31;;;1287:74:30;1260:18;;7140:31:26;1117:250:30;7079:103:26;1228:1;7195:2;:26;7191:94;;7244:30;;;;;7259:10;7244:30;;;8025:74:30;8115:18;;;8108:34;;;7998:18;;7244:30:26;7851:297:30;7191:94:26;7299:5;7308:1;7299:10;7295:88;;7332:40;;;;;7350:10;7332:40;;;7377:74:30;7467:18;;;7460:34;;;7510:18;;;7503:34;;;7350:18;;7332:40:26;7175:368:30;7295:88:26;7393:13;7409:14;:12;:14::i;:::-;7393:30;;7445:9;7437:5;:17;7433:74;;;7477:19;;;;;;;;689:25:30;;;662:18;;7477:19:26;543:177:30;7433:74:26;7544:20;;;7517:24;7544:20;;;:14;:20;;;;;;7578:29;;;;7574:96;;7630:29;;;;;1317:42:30;1305:55;;7630:29:26;;;1287:74:30;1260:18;;7630:29:26;1117:250:30;7574:96:26;7680:63;;;;;7726:4;7680:63;;;7377:74:30;7467:18;;;7460:34;;;7510:18;;;7503:34;;;7697:10:26;;7680:37;;7350:18:30;;7680:63:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1754:1:26;7781:33;;;-1:-1:-1;7828:15:26;;7824:562;;7884:3;7864:16;:23;;7892:1;7863:30;7859:517;;7914:22;;7979:38;;;;7990:4;7979:38;:::i;:::-;8060:53;;9781:66:30;9768:2;9764:15;;;9760:88;8060:53:26;;;9748:101:30;9865:12;;;9858:28;;;7913:104:26;;-1:-1:-1;7913:104:26;-1:-1:-1;8035:12:26;;9902::30;;8060:53:26;;;;;;;;;;;;;8050:64;;8060:53;8050:64;;;;;-1:-1:-1;8137:31:26;:5;8150:11;8050:64;8137:12;:31::i;:::-;8132:135;;8199:49;;;;;8055:42:30;8043:55;;8199:49:26;;;8025:74:30;8115:18;;;8108:34;;;7998:18;;8199:49:26;7851:297:30;8132:135:26;-1:-1:-1;8338:3:26;8305:36;8304:57;;;;-1:-1:-1;7859:517:26;8395:20;;;;;;;:14;:20;;;;;;;;;:39;;;8449:61;;10099:25:30;;;10140:18;;;10133:34;;;8449:61:26;;10072:18:30;8449:61:26;;;;;;;-1:-1:-1;8528:31:26;;6936:1630;-1:-1:-1;;;;;;;;;6936:1630:26:o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;1994:290::-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:25:o;14:332:30:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1629:254::-;1697:6;1705;1758:2;1746:9;1737:7;1733:23;1729:32;1726:52;;;1774:1;1771;1764:12;1726:52;1810:9;1797:23;1787:33;;1839:38;1873:2;1862:9;1858:18;1839:38;:::i;:::-;1829:48;;1629:254;;;;;:::o;2070:180::-;2129:6;2182:2;2170:9;2161:7;2157:23;2153:32;2150:52;;;2198:1;2195;2188:12;2150:52;-1:-1:-1;2221:23:30;;2070:180;-1:-1:-1;2070:180:30:o;2255:367::-;2318:8;2328:6;2382:3;2375:4;2367:6;2363:17;2359:27;2349:55;;2400:1;2397;2390:12;2349:55;-1:-1:-1;2423:20:30;;2466:18;2455:30;;2452:50;;;2498:1;2495;2488:12;2452:50;2535:4;2527:6;2523:17;2511:29;;2595:3;2588:4;2578:6;2575:1;2571:14;2563:6;2559:27;2555:38;2552:47;2549:67;;;2612:1;2609;2602:12;2549:67;2255:367;;;;;:::o;2627:347::-;2678:8;2688:6;2742:3;2735:4;2727:6;2723:17;2719:27;2709:55;;2760:1;2757;2750:12;2709:55;-1:-1:-1;2783:20:30;;2826:18;2815:30;;2812:50;;;2858:1;2855;2848:12;2812:50;2895:4;2887:6;2883:17;2871:29;;2947:3;2940:4;2931:6;2923;2919:19;2915:30;2912:39;2909:59;;;2964:1;2961;2954:12;2979:1210;3139:6;3147;3155;3163;3171;3179;3187;3195;3248:3;3236:9;3227:7;3223:23;3219:33;3216:53;;;3265:1;3262;3255:12;3216:53;3288:29;3307:9;3288:29;:::i;:::-;3278:39;;3336:38;3370:2;3359:9;3355:18;3336:38;:::i;:::-;3326:48;;3425:2;3414:9;3410:18;3397:32;3448:18;3489:2;3481:6;3478:14;3475:34;;;3505:1;3502;3495:12;3475:34;3544:70;3606:7;3597:6;3586:9;3582:22;3544:70;:::i;:::-;3633:8;;-1:-1:-1;3518:96:30;-1:-1:-1;3721:2:30;3706:18;;3693:32;;-1:-1:-1;3737:16:30;;;3734:36;;;3766:1;3763;3756:12;3734:36;3805:72;3869:7;3858:8;3847:9;3843:24;3805:72;:::i;:::-;3896:8;;-1:-1:-1;3779:98:30;-1:-1:-1;3984:3:30;3969:19;;3956:33;;-1:-1:-1;4001:16:30;;;3998:36;;;4030:1;4027;4020:12;3998:36;;4069:60;4121:7;4110:8;4099:9;4095:24;4069:60;:::i;:::-;2979:1210;;;;-1:-1:-1;2979:1210:30;;-1:-1:-1;2979:1210:30;;;;;;4148:8;-1:-1:-1;;;2979:1210:30:o;4447:695::-;4553:6;4561;4569;4577;4585;4593;4646:3;4634:9;4625:7;4621:23;4617:33;4614:53;;;4663:1;4660;4653:12;4614:53;4686:29;4705:9;4686:29;:::i;:::-;4676:39;;4734:38;4768:2;4757:9;4753:18;4734:38;:::i;:::-;4724:48;;4819:2;4808:9;4804:18;4791:32;4781:42;;4870:2;4859:9;4855:18;4842:32;4832:42;;4925:3;4914:9;4910:19;4897:33;4953:18;4945:6;4942:30;4939:50;;;4985:1;4982;4975:12;4939:50;5024:58;5074:7;5065:6;5054:9;5050:22;5024:58;:::i;:::-;4447:695;;;;-1:-1:-1;4447:695:30;;-1:-1:-1;4447:695:30;;5101:8;;4447:695;-1:-1:-1;;;4447:695:30:o;5147:184::-;5199:77;5196:1;5189:88;5296:4;5293:1;5286:15;5320:4;5317:1;5310:15;5336:128;5403:9;;;5424:11;;;5421:37;;;5438:18;;:::i;5469:274::-;5509:1;5535;5525:189;;5570:77;5567:1;5560:88;5671:4;5668:1;5661:15;5699:4;5696:1;5689:15;5525:189;-1:-1:-1;5728:9:30;;5469:274::o;5979:358::-;6079:6;6074:3;6067:19;6049:3;6109:66;6101:6;6098:78;6095:98;;;6189:1;6186;6179:12;6095:98;6225:6;6222:1;6218:14;6277:8;6270:5;6263:4;6258:3;6254:14;6241:45;6306:18;;;;6326:4;6302:29;;5979:358;-1:-1:-1;;;5979:358:30:o;6342:639::-;6659:42;6651:6;6647:55;6636:9;6629:74;6739:2;6734;6723:9;6719:18;6712:30;6610:4;6765:73;6834:2;6823:9;6819:18;6811:6;6803;6765:73;:::i;:::-;6886:9;6878:6;6874:22;6869:2;6858:9;6854:18;6847:50;6914:61;6968:6;6960;6952;6914:61;:::i;:::-;6906:69;6342:639;-1:-1:-1;;;;;;;;6342:639:30:o;6986:184::-;7038:77;7035:1;7028:88;7135:4;7132:1;7125:15;7159:4;7156:1;7149:15;7548:168;7621:9;;;7652;;7669:15;;;7663:22;;7649:37;7639:71;;7690:18;;:::i;7721:125::-;7786:9;;;7807:10;;;7804:36;;;7820:18;;:::i;8153:184::-;8205:77;8202:1;8195:88;8302:4;8299:1;8292:15;8326:4;8323:1;8316:15;8342:1244;8435:6;8443;8496:2;8484:9;8475:7;8471:23;8467:32;8464:52;;;8512:1;8509;8502:12;8464:52;8552:9;8539:23;8581:18;8622:2;8614:6;8611:14;8608:34;;;8638:1;8635;8628:12;8608:34;8676:6;8665:9;8661:22;8651:32;;8721:7;8714:4;8710:2;8706:13;8702:27;8692:55;;8743:1;8740;8733:12;8692:55;8779:2;8766:16;8801:4;8824:2;8820;8817:10;8814:36;;;8830:18;;:::i;:::-;8876:2;8873:1;8869:10;8908:2;8902:9;8967:66;8962:2;8958;8954:11;8950:84;8942:6;8938:97;9085:6;9073:10;9070:22;9065:2;9053:10;9050:18;9047:46;9044:72;;;9096:18;;:::i;:::-;9132:2;9125:22;9182:18;;;9216:15;;;;-1:-1:-1;9258:11:30;;;9254:20;;;9286:19;;;9283:39;;;9318:1;9315;9308:12;9283:39;9342:11;;;;9362:142;9378:6;9373:3;9370:15;9362:142;;;9444:17;;9432:30;;9395:12;;;;9482;;;;9362:142;;;9523:6;9561:18;;;;9548:32;;-1:-1:-1;;;;;;;8342:1244:30:o;10178:735::-;10539:3;10528:9;10521:22;10502:4;10566:74;10635:3;10624:9;10620:19;10612:6;10604;10566:74;:::i;:::-;10688:9;10680:6;10676:22;10671:2;10660:9;10656:18;10649:50;10716:61;10770:6;10762;10754;10716:61;:::i;:::-;10808:2;10793:18;;10786:34;;;;-1:-1:-1;;10851:2:30;10836:18;;10829:34;;;;10894:3;10879:19;;;10872:35;10708:69;10178:735;-1:-1:-1;;;;10178:735:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"1203000","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"264","BURN_WEIGHT_TOKEN_2()":"240","BURN_WEIGHT_TOKEN_3()":"240","BURN_WEIGHT_TOKEN_4()":"241","BURN_WEIGHT_TOKEN_5()":"283","BURN_WEIGHT_TOKEN_6()":"285","BURN_WEIGHT_TOKEN_7()":"262","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"285","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","currentCycle()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2575","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2694"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","currentCycle()":"bab2f552","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Throws if the cycle duration is zero.Throws if the max cycle is zero.\",\"params\":{\"cycleDuration\":\"The duration of each cycle.\",\"forwarderRegistry\":\"The forwarder registry contract.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"merkleRoot\":\"The Merkle root of the Puzzle Game multiplier claim.\",\"missingOrb\":\"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\",\"orbOfPower\":\"The IERC1155Burnable erc1155 contract burn to generate ASH.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"OrbsBurnPool Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"constructor\":{\"notice\":\"Constructor for the OrbsBurnPool contract.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/OrbsBurnPool.sol\":\"OrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                curOrbMultiplier = newOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x53208e9e6c2948ae797f5c6eff2ea2d81cc7c1765b3782aac5204a50d1634f73\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1937,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1944,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1949,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"constructor":{"notice":"Constructor for the OrbsBurnPool contract."},"currentCycle()":{"notice":"Get the current cycle."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}},"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol":{"ERC1155ClaimWindowMerkleClaim":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"ExceededMintSupply","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"claim(bytes32,bytes32[],address)":{"details":"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract.","mintSupply":"The total number of tokens that can be minted in this contract.","rewardContract":"The ERC1155Mintable reward contract interface.","tokenId":"The token id to be claimed."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC1155 Claim Window Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2869":{"entryPoint":null,"id":2869,"parameterSlots":4,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":172,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":118,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":295,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":343,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":461,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":541,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":436,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:994:30","nodeType":"YulBlock","src":"0:994:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"77:86:30","nodeType":"YulBlock","src":"77:86:30","statements":[{"body":{"nativeSrc":"141:16:30","nodeType":"YulBlock","src":"141:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:30","nodeType":"YulLiteral","src":"150:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:30","nodeType":"YulLiteral","src":"153:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:30","nodeType":"YulIdentifier","src":"143:6:30"},"nativeSrc":"143:12:30","nodeType":"YulFunctionCall","src":"143:12:30"},"nativeSrc":"143:12:30","nodeType":"YulExpressionStatement","src":"143:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:30","nodeType":"YulIdentifier","src":"100:5:30"},{"arguments":[{"name":"value","nativeSrc":"111:5:30","nodeType":"YulIdentifier","src":"111:5:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:30","nodeType":"YulLiteral","src":"126:3:30","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:30","nodeType":"YulLiteral","src":"131:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:30","nodeType":"YulIdentifier","src":"122:3:30"},"nativeSrc":"122:11:30","nodeType":"YulFunctionCall","src":"122:11:30"},{"kind":"number","nativeSrc":"135:1:30","nodeType":"YulLiteral","src":"135:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:30","nodeType":"YulIdentifier","src":"118:3:30"},"nativeSrc":"118:19:30","nodeType":"YulFunctionCall","src":"118:19:30"}],"functionName":{"name":"and","nativeSrc":"107:3:30","nodeType":"YulIdentifier","src":"107:3:30"},"nativeSrc":"107:31:30","nodeType":"YulFunctionCall","src":"107:31:30"}],"functionName":{"name":"eq","nativeSrc":"97:2:30","nodeType":"YulIdentifier","src":"97:2:30"},"nativeSrc":"97:42:30","nodeType":"YulFunctionCall","src":"97:42:30"}],"functionName":{"name":"iszero","nativeSrc":"90:6:30","nodeType":"YulIdentifier","src":"90:6:30"},"nativeSrc":"90:50:30","nodeType":"YulFunctionCall","src":"90:50:30"},"nativeSrc":"87:70:30","nodeType":"YulIf","src":"87:70:30"}]},"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"14:149:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:30","nodeType":"YulTypedName","src":"66:5:30","type":""}],"src":"14:149:30"},{"body":{"nativeSrc":"350:412:30","nodeType":"YulBlock","src":"350:412:30","statements":[{"body":{"nativeSrc":"397:16:30","nodeType":"YulBlock","src":"397:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"406:1:30","nodeType":"YulLiteral","src":"406:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"409:1:30","nodeType":"YulLiteral","src":"409:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"399:6:30","nodeType":"YulIdentifier","src":"399:6:30"},"nativeSrc":"399:12:30","nodeType":"YulFunctionCall","src":"399:12:30"},"nativeSrc":"399:12:30","nodeType":"YulExpressionStatement","src":"399:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"371:7:30","nodeType":"YulIdentifier","src":"371:7:30"},{"name":"headStart","nativeSrc":"380:9:30","nodeType":"YulIdentifier","src":"380:9:30"}],"functionName":{"name":"sub","nativeSrc":"367:3:30","nodeType":"YulIdentifier","src":"367:3:30"},"nativeSrc":"367:23:30","nodeType":"YulFunctionCall","src":"367:23:30"},{"kind":"number","nativeSrc":"392:3:30","nodeType":"YulLiteral","src":"392:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"363:3:30","nodeType":"YulIdentifier","src":"363:3:30"},"nativeSrc":"363:33:30","nodeType":"YulFunctionCall","src":"363:33:30"},"nativeSrc":"360:53:30","nodeType":"YulIf","src":"360:53:30"},{"nativeSrc":"422:26:30","nodeType":"YulAssignment","src":"422:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"438:9:30","nodeType":"YulIdentifier","src":"438:9:30"}],"functionName":{"name":"mload","nativeSrc":"432:5:30","nodeType":"YulIdentifier","src":"432:5:30"},"nativeSrc":"432:16:30","nodeType":"YulFunctionCall","src":"432:16:30"},"variableNames":[{"name":"value0","nativeSrc":"422:6:30","nodeType":"YulIdentifier","src":"422:6:30"}]},{"nativeSrc":"457:35:30","nodeType":"YulAssignment","src":"457:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"477:9:30","nodeType":"YulIdentifier","src":"477:9:30"},{"kind":"number","nativeSrc":"488:2:30","nodeType":"YulLiteral","src":"488:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"473:3:30","nodeType":"YulIdentifier","src":"473:3:30"},"nativeSrc":"473:18:30","nodeType":"YulFunctionCall","src":"473:18:30"}],"functionName":{"name":"mload","nativeSrc":"467:5:30","nodeType":"YulIdentifier","src":"467:5:30"},"nativeSrc":"467:25:30","nodeType":"YulFunctionCall","src":"467:25:30"},"variableNames":[{"name":"value1","nativeSrc":"457:6:30","nodeType":"YulIdentifier","src":"457:6:30"}]},{"nativeSrc":"501:38:30","nodeType":"YulVariableDeclaration","src":"501:38:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"524:9:30","nodeType":"YulIdentifier","src":"524:9:30"},{"kind":"number","nativeSrc":"535:2:30","nodeType":"YulLiteral","src":"535:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"520:3:30","nodeType":"YulIdentifier","src":"520:3:30"},"nativeSrc":"520:18:30","nodeType":"YulFunctionCall","src":"520:18:30"}],"functionName":{"name":"mload","nativeSrc":"514:5:30","nodeType":"YulIdentifier","src":"514:5:30"},"nativeSrc":"514:25:30","nodeType":"YulFunctionCall","src":"514:25:30"},"variables":[{"name":"value","nativeSrc":"505:5:30","nodeType":"YulTypedName","src":"505:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"591:5:30","nodeType":"YulIdentifier","src":"591:5:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"548:42:30","nodeType":"YulIdentifier","src":"548:42:30"},"nativeSrc":"548:49:30","nodeType":"YulFunctionCall","src":"548:49:30"},"nativeSrc":"548:49:30","nodeType":"YulExpressionStatement","src":"548:49:30"},{"nativeSrc":"606:15:30","nodeType":"YulAssignment","src":"606:15:30","value":{"name":"value","nativeSrc":"616:5:30","nodeType":"YulIdentifier","src":"616:5:30"},"variableNames":[{"name":"value2","nativeSrc":"606:6:30","nodeType":"YulIdentifier","src":"606:6:30"}]},{"nativeSrc":"630:40:30","nodeType":"YulVariableDeclaration","src":"630:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"655:9:30","nodeType":"YulIdentifier","src":"655:9:30"},{"kind":"number","nativeSrc":"666:2:30","nodeType":"YulLiteral","src":"666:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"651:3:30","nodeType":"YulIdentifier","src":"651:3:30"},"nativeSrc":"651:18:30","nodeType":"YulFunctionCall","src":"651:18:30"}],"functionName":{"name":"mload","nativeSrc":"645:5:30","nodeType":"YulIdentifier","src":"645:5:30"},"nativeSrc":"645:25:30","nodeType":"YulFunctionCall","src":"645:25:30"},"variables":[{"name":"value_1","nativeSrc":"634:7:30","nodeType":"YulTypedName","src":"634:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"722:7:30","nodeType":"YulIdentifier","src":"722:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"679:42:30","nodeType":"YulIdentifier","src":"679:42:30"},"nativeSrc":"679:51:30","nodeType":"YulFunctionCall","src":"679:51:30"},"nativeSrc":"679:51:30","nodeType":"YulExpressionStatement","src":"679:51:30"},{"nativeSrc":"739:17:30","nodeType":"YulAssignment","src":"739:17:30","value":{"name":"value_1","nativeSrc":"749:7:30","nodeType":"YulIdentifier","src":"749:7:30"},"variableNames":[{"name":"value3","nativeSrc":"739:6:30","nodeType":"YulIdentifier","src":"739:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:594:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"292:9:30","nodeType":"YulTypedName","src":"292:9:30","type":""},{"name":"dataEnd","nativeSrc":"303:7:30","nodeType":"YulTypedName","src":"303:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"315:6:30","nodeType":"YulTypedName","src":"315:6:30","type":""},{"name":"value1","nativeSrc":"323:6:30","nodeType":"YulTypedName","src":"323:6:30","type":""},{"name":"value2","nativeSrc":"331:6:30","nodeType":"YulTypedName","src":"331:6:30","type":""},{"name":"value3","nativeSrc":"339:6:30","nodeType":"YulTypedName","src":"339:6:30","type":""}],"src":"168:594:30"},{"body":{"nativeSrc":"816:176:30","nodeType":"YulBlock","src":"816:176:30","statements":[{"nativeSrc":"826:17:30","nodeType":"YulAssignment","src":"826:17:30","value":{"arguments":[{"name":"x","nativeSrc":"838:1:30","nodeType":"YulIdentifier","src":"838:1:30"},{"name":"y","nativeSrc":"841:1:30","nodeType":"YulIdentifier","src":"841:1:30"}],"functionName":{"name":"sub","nativeSrc":"834:3:30","nodeType":"YulIdentifier","src":"834:3:30"},"nativeSrc":"834:9:30","nodeType":"YulFunctionCall","src":"834:9:30"},"variableNames":[{"name":"diff","nativeSrc":"826:4:30","nodeType":"YulIdentifier","src":"826:4:30"}]},{"body":{"nativeSrc":"875:111:30","nodeType":"YulBlock","src":"875:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"896:1:30","nodeType":"YulLiteral","src":"896:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"903:3:30","nodeType":"YulLiteral","src":"903:3:30","type":"","value":"224"},{"kind":"number","nativeSrc":"908:10:30","nodeType":"YulLiteral","src":"908:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"899:3:30","nodeType":"YulIdentifier","src":"899:3:30"},"nativeSrc":"899:20:30","nodeType":"YulFunctionCall","src":"899:20:30"}],"functionName":{"name":"mstore","nativeSrc":"889:6:30","nodeType":"YulIdentifier","src":"889:6:30"},"nativeSrc":"889:31:30","nodeType":"YulFunctionCall","src":"889:31:30"},"nativeSrc":"889:31:30","nodeType":"YulExpressionStatement","src":"889:31:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"940:1:30","nodeType":"YulLiteral","src":"940:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"943:4:30","nodeType":"YulLiteral","src":"943:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"933:6:30","nodeType":"YulIdentifier","src":"933:6:30"},"nativeSrc":"933:15:30","nodeType":"YulFunctionCall","src":"933:15:30"},"nativeSrc":"933:15:30","nodeType":"YulExpressionStatement","src":"933:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"968:1:30","nodeType":"YulLiteral","src":"968:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"971:4:30","nodeType":"YulLiteral","src":"971:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"961:6:30","nodeType":"YulIdentifier","src":"961:6:30"},"nativeSrc":"961:15:30","nodeType":"YulFunctionCall","src":"961:15:30"},"nativeSrc":"961:15:30","nodeType":"YulExpressionStatement","src":"961:15:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"858:4:30","nodeType":"YulIdentifier","src":"858:4:30"},{"name":"x","nativeSrc":"864:1:30","nodeType":"YulIdentifier","src":"864:1:30"}],"functionName":{"name":"gt","nativeSrc":"855:2:30","nodeType":"YulIdentifier","src":"855:2:30"},"nativeSrc":"855:11:30","nodeType":"YulFunctionCall","src":"855:11:30"},"nativeSrc":"852:134:30","nodeType":"YulIf","src":"852:134:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"767:225:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"798:1:30","nodeType":"YulTypedName","src":"798:1:30","type":""},{"name":"y","nativeSrc":"801:1:30","nodeType":"YulTypedName","src":"801:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"807:4:30","nodeType":"YulTypedName","src":"807:4:30","type":""}],"src":"767:225:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value3 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101006040523480156200001257600080fd5b50604051620011f5380380620011f58339810160408190526200003591620001cd565b6001600160a01b0381166080523362000059816200005262000076565b90620000ac565b505060c09290925260e0526001600160a01b031660a0526200023f565b600080620000a660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200021d565b92915050565b6001600160a01b03811615620001035781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001236307f5828d60e41b60016200011b62000127565b919062000157565b5050565b600080620000a660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200021d565b600160e01b6001600160e01b031983160162000186576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001ca57600080fd5b50565b60008060008060808587031215620001e457600080fd5b84519350602085015192506040850151620001ff81620001b4565b60608601519092506200021281620001b4565b939692955090935050565b81810381811115620000a657634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610f4b620002aa6000396000818161021e015261066a0152600081816101e10152818161074401526107e101526000818161016d01526107810152600081816101230152818161019f01528181610b950152610c1d0152610f4b6000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063dc45def611610066578063dc45def614610249578063e3a0ce0914610292578063eb02625c146102b5578063f2fde38b146102c857600080fd5b80638da5cb5b146102115780639dfbcde814610219578063ba65912e1461024057600080fd5b80633a5af339116100bd5780633a5af33914610168578063572b6c051461018f57806389a89002146101dc57600080fd5b806301ffc9a7146100e45780630328a8fc1461010c5780632b4c9f1614610121575b600080fd5b6100f76100f2366004610d0e565b6102db565b60405190151581526020015b60405180910390f35b61011f61011a366004610d50565b6102f5565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100f761019d366004610dab565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b610143610432565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b61020360005481565b610277610257366004610dc6565b600160208190526000918252604090912080549181015460029091015483565b60408051938452602084019290925290820152606001610103565b6100f76102a0366004610dc6565b60026020526000908152604090205460ff1681565b61011f6102c3366004610ddf565b61045e565b61011f6102d6366004610dab565b61085a565b60006102ef826102e9610878565b906108a6565b92915050565b61030e610300610980565b61030861098a565b906109b8565b808210158061031d5750428111155b15610369576040517f790c7cef00000000000000000000000000000000000000000000000000000000815260048101839052602481018290524260448201526064015b60405180910390fd5b600084815260016020526040902054156103b2576040517fed10979d00000000000000000000000000000000000000000000000000000000815260048101859052602401610360565b604080516060810182528481526020808201858152828401858152600089815260018085529086902094518555915191840191909155516002909201919091558151848152908101839052849186917f91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da910160405180910390a350505050565b600061045961043f61098a565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60008481526001602052604090208054806104a8576040517f84f229dc00000000000000000000000000000000000000000000000000000000815260048101879052602401610360565b81600101544210806104bd5750816002015442115b156104fd576040517fdbeb4f4d00000000000000000000000000000000000000000000000000000000815260048101879052426024820152604401610360565b6000868460405160200161054092919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b60405160208183030381529060405280519060200120905061059a8282888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610a279050565b6105ef576040517fa04a37c00000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff85166024820152604401610360565b60008181526002602052604090205460ff1615610657576040517fa8ca238e0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff85166024820152604401610360565b60008054610666906001610e9e565b90507f00000000000000000000000000000000000000000000000000000000000000008111156106c2576040517f192d175500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181558281526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590517f5cfa929700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260448201929092526080606482015260848101929092527f00000000000000000000000000000000000000000000000000000000000000001690635cfa92979060a401600060405180830381600087803b1580156107c557600080fd5b505af11580156107d9573d6000803e3d6000fd5b5050604080517f000000000000000000000000000000000000000000000000000000000000000081526001602082015273ffffffffffffffffffffffffffffffffffffffff891693508b92507fa68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03910160405180910390a35050505050505050565b610875610865610980565b8261086e61098a565b9190610a3d565b50565b6000806102ef60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610eb1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108f6575060006102ef565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610947575060016102ef565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610459610b52565b6000806102ef60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610eb1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610a23576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610360565b5050565b600082610a348584610c99565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610aaa576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610360565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b4c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610b625750601836105b15610b6c57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c8857506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190610ec4565b15610c9257919050565b3391505090565b600081815b8451811015610cd457610cca82868381518110610cbd57610cbd610ee6565b6020026020010151610cdc565b9150600101610c9e565b509392505050565b6000818310610cf8576000828152602084905260409020610d07565b60008381526020839052604090205b9392505050565b600060208284031215610d2057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d0757600080fd5b60008060008060808587031215610d6657600080fd5b5050823594602084013594506040840135936060013592509050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da657600080fd5b919050565b600060208284031215610dbd57600080fd5b610d0782610d82565b600060208284031215610dd857600080fd5b5035919050565b60008060008060608587031215610df557600080fd5b84359350602085013567ffffffffffffffff80821115610e1457600080fd5b818701915087601f830112610e2857600080fd5b813581811115610e3757600080fd5b8860208260051b8501011115610e4c57600080fd5b602083019550809450505050610e6460408601610d82565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102ef576102ef610e6f565b818103818111156102ef576102ef610e6f565b600060208284031215610ed657600080fd5b81518015158114610d0757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220eb5612f3617bb28d7e354311efdc74ddf5592ddf0aac5a944c57211ba99feb4c64736f6c63430008160033","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x11F5 CODESIZE SUB DUP1 PUSH3 0x11F5 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x1CD JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x59 DUP2 PUSH3 0x52 PUSH3 0x76 JUMP JUMPDEST SWAP1 PUSH3 0xAC JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH3 0x23F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x21D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x103 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x123 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x11B PUSH3 0x127 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x157 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xA6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x21D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x186 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD PUSH3 0x1FF DUP2 PUSH3 0x1B4 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x212 DUP2 PUSH3 0x1B4 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xA6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0xF4B PUSH3 0x2AA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x21E ADD MSTORE PUSH2 0x66A ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E1 ADD MSTORE DUP2 DUP2 PUSH2 0x744 ADD MSTORE PUSH2 0x7E1 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x16D ADD MSTORE PUSH2 0x781 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x123 ADD MSTORE DUP2 DUP2 PUSH2 0x19F ADD MSTORE DUP2 DUP2 PUSH2 0xB95 ADD MSTORE PUSH2 0xC1D ADD MSTORE PUSH2 0xF4B PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xD50 JUMP JUMPDEST PUSH2 0x2F5 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xDAB JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x432 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x203 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x45E JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xDAB JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP3 PUSH2 0x2E9 PUSH2 0x878 JUMP JUMPDEST SWAP1 PUSH2 0x8A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30E PUSH2 0x300 PUSH2 0x980 JUMP JUMPDEST PUSH2 0x308 PUSH2 0x98A JUMP JUMPDEST SWAP1 PUSH2 0x9B8 JUMP JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x31D JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x369 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 PUSH2 0x43F PUSH2 0x98A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x4A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x4BD JUMPI POP DUP2 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x540 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x59A DUP3 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA27 SWAP1 POP JUMP JUMPDEST PUSH2 0x5EF JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x666 SWAP1 PUSH1 0x1 PUSH2 0xE9E JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP4 POP DUP12 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x875 PUSH2 0x865 PUSH2 0x980 JUMP JUMPDEST DUP3 PUSH2 0x86E PUSH2 0x98A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA3D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xEB1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F6 JUMPI POP PUSH1 0x0 PUSH2 0x2EF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x947 JUMPI POP PUSH1 0x1 PUSH2 0x2EF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 PUSH2 0xB52 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xEB1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA34 DUP6 DUP5 PUSH2 0xC99 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB4C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB62 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB6C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC88 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC88 SWAP2 SWAP1 PUSH2 0xEC4 JUMP JUMPDEST ISZERO PUSH2 0xC92 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xCD4 JUMPI PUSH2 0xCCA DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCBD JUMPI PUSH2 0xCBD PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCDC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xC9E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xDA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD07 DUP3 PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0xE64 PUSH1 0x40 DUP7 ADD PUSH2 0xD82 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE6F JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB JUMP SLT RETURN PUSH2 0x7BB2 DUP14 PUSH31 0x354311EFDC74DDF5592DDF0AAC5A944C57211BA99FEB4C64736F6C63430008 AND STOP CALLER ","sourceMap":"1183:6216:27:-:0;;;3819:343;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;4039:10:27;1008:63:0;4039:10:27;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;4061:18:27::2;::::0;;;;4089:24:::2;::::0;-1:-1:-1;;;;;4123:32:27::2;;::::0;1183:6216;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:30:-;-1:-1:-1;;;;;107:31:30;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:594::-;315:6;323;331;339;392:3;380:9;371:7;367:23;363:33;360:53;;;409:1;406;399:12;360:53;438:9;432:16;422:26;;488:2;477:9;473:18;467:25;457:35;;535:2;524:9;520:18;514:25;548:49;591:5;548:49;:::i;:::-;666:2;651:18;;645:25;616:5;;-1:-1:-1;679:51:30;645:25;679:51;:::i;:::-;168:594;;;;-1:-1:-1;168:594:30;;-1:-1:-1;;168:594:30:o;767:225::-;834:9;;;855:11;;;852:134;;;908:10;903:3;899:20;896:1;889:31;943:4;940:1;933:15;971:4;968:1;961:15;767:225;1183:6216:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_2756":{"entryPoint":null,"id":2756,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_2750":{"entryPoint":null,"id":2750,"parameterSlots":0,"returnSlots":0},"@TOKEN_ID_2753":{"entryPoint":null,"id":2753,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1854":{"entryPoint":null,"id":1854,"parameterSlots":2,"returnSlots":1},"@_hashPair_1843":{"entryPoint":3292,"id":1843,"parameterSlots":2,"returnSlots":1},"@_msgSender_2883":{"entryPoint":2432,"id":2883,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":2898,"id":652,"parameterSlots":0,"returnSlots":1},"@claimStatus_2770":{"entryPoint":null,"id":2770,"parameterSlots":0,"returnSlots":0},"@claimWindows_2765":{"entryPoint":null,"id":2765,"parameterSlots":0,"returnSlots":0},"@claim_3094":{"entryPoint":1118,"id":3094,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2488,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2442,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2168,"id":531,"parameterSlots":0,"returnSlots":1},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_2759":{"entryPoint":null,"id":2759,"parameterSlots":0,"returnSlots":0},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1074,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1438":{"entryPoint":3225,"id":1438,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_2968":{"entryPoint":757,"id":2968,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":731,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2214,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2621,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2138,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1377":{"entryPoint":2599,"id":1377,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3458,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3499,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3526,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address":{"entryPoint":3551,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3408,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3342,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":3742,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3761,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":3695,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3814,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:7243:30","nodeType":"YulBlock","src":"0:7243:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"83:263:30","nodeType":"YulBlock","src":"83:263:30","statements":[{"body":{"nativeSrc":"129:16:30","nodeType":"YulBlock","src":"129:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:30","nodeType":"YulLiteral","src":"138:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:30","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:30","nodeType":"YulIdentifier","src":"131:6:30"},"nativeSrc":"131:12:30","nodeType":"YulFunctionCall","src":"131:12:30"},"nativeSrc":"131:12:30","nodeType":"YulExpressionStatement","src":"131:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:30","nodeType":"YulIdentifier","src":"104:7:30"},{"name":"headStart","nativeSrc":"113:9:30","nodeType":"YulIdentifier","src":"113:9:30"}],"functionName":{"name":"sub","nativeSrc":"100:3:30","nodeType":"YulIdentifier","src":"100:3:30"},"nativeSrc":"100:23:30","nodeType":"YulFunctionCall","src":"100:23:30"},{"kind":"number","nativeSrc":"125:2:30","nodeType":"YulLiteral","src":"125:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:30","nodeType":"YulIdentifier","src":"96:3:30"},"nativeSrc":"96:32:30","nodeType":"YulFunctionCall","src":"96:32:30"},"nativeSrc":"93:52:30","nodeType":"YulIf","src":"93:52:30"},{"nativeSrc":"154:36:30","nodeType":"YulVariableDeclaration","src":"154:36:30","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:30","nodeType":"YulIdentifier","src":"180:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:30","nodeType":"YulIdentifier","src":"167:12:30"},"nativeSrc":"167:23:30","nodeType":"YulFunctionCall","src":"167:23:30"},"variables":[{"name":"value","nativeSrc":"158:5:30","nodeType":"YulTypedName","src":"158:5:30","type":""}]},{"body":{"nativeSrc":"300:16:30","nodeType":"YulBlock","src":"300:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:30","nodeType":"YulLiteral","src":"309:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:30","nodeType":"YulLiteral","src":"312:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:30","nodeType":"YulIdentifier","src":"302:6:30"},"nativeSrc":"302:12:30","nodeType":"YulFunctionCall","src":"302:12:30"},"nativeSrc":"302:12:30","nodeType":"YulExpressionStatement","src":"302:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:30","nodeType":"YulIdentifier","src":"212:5:30"},{"arguments":[{"name":"value","nativeSrc":"223:5:30","nodeType":"YulIdentifier","src":"223:5:30"},{"kind":"number","nativeSrc":"230:66:30","nodeType":"YulLiteral","src":"230:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:30","nodeType":"YulIdentifier","src":"219:3:30"},"nativeSrc":"219:78:30","nodeType":"YulFunctionCall","src":"219:78:30"}],"functionName":{"name":"eq","nativeSrc":"209:2:30","nodeType":"YulIdentifier","src":"209:2:30"},"nativeSrc":"209:89:30","nodeType":"YulFunctionCall","src":"209:89:30"}],"functionName":{"name":"iszero","nativeSrc":"202:6:30","nodeType":"YulIdentifier","src":"202:6:30"},"nativeSrc":"202:97:30","nodeType":"YulFunctionCall","src":"202:97:30"},"nativeSrc":"199:117:30","nodeType":"YulIf","src":"199:117:30"},{"nativeSrc":"325:15:30","nodeType":"YulAssignment","src":"325:15:30","value":{"name":"value","nativeSrc":"335:5:30","nodeType":"YulIdentifier","src":"335:5:30"},"variableNames":[{"name":"value0","nativeSrc":"325:6:30","nodeType":"YulIdentifier","src":"325:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:30","nodeType":"YulTypedName","src":"49:9:30","type":""},{"name":"dataEnd","nativeSrc":"60:7:30","nodeType":"YulTypedName","src":"60:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:30","nodeType":"YulTypedName","src":"72:6:30","type":""}],"src":"14:332:30"},{"body":{"nativeSrc":"446:92:30","nodeType":"YulBlock","src":"446:92:30","statements":[{"nativeSrc":"456:26:30","nodeType":"YulAssignment","src":"456:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:30","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nativeSrc":"479:2:30","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:30","nodeType":"YulIdentifier","src":"464:3:30"},"nativeSrc":"464:18:30","nodeType":"YulFunctionCall","src":"464:18:30"},"variableNames":[{"name":"tail","nativeSrc":"456:4:30","nodeType":"YulIdentifier","src":"456:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:30","nodeType":"YulIdentifier","src":"498:9:30"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:30","nodeType":"YulIdentifier","src":"523:6:30"}],"functionName":{"name":"iszero","nativeSrc":"516:6:30","nodeType":"YulIdentifier","src":"516:6:30"},"nativeSrc":"516:14:30","nodeType":"YulFunctionCall","src":"516:14:30"}],"functionName":{"name":"iszero","nativeSrc":"509:6:30","nodeType":"YulIdentifier","src":"509:6:30"},"nativeSrc":"509:22:30","nodeType":"YulFunctionCall","src":"509:22:30"}],"functionName":{"name":"mstore","nativeSrc":"491:6:30","nodeType":"YulIdentifier","src":"491:6:30"},"nativeSrc":"491:41:30","nodeType":"YulFunctionCall","src":"491:41:30"},"nativeSrc":"491:41:30","nodeType":"YulExpressionStatement","src":"491:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:30","nodeType":"YulTypedName","src":"415:9:30","type":""},{"name":"value0","nativeSrc":"426:6:30","nodeType":"YulTypedName","src":"426:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:30","nodeType":"YulTypedName","src":"437:4:30","type":""}],"src":"351:187:30"},{"body":{"nativeSrc":"664:264:30","nodeType":"YulBlock","src":"664:264:30","statements":[{"body":{"nativeSrc":"711:16:30","nodeType":"YulBlock","src":"711:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:30","nodeType":"YulLiteral","src":"720:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:30","nodeType":"YulLiteral","src":"723:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:30","nodeType":"YulIdentifier","src":"713:6:30"},"nativeSrc":"713:12:30","nodeType":"YulFunctionCall","src":"713:12:30"},"nativeSrc":"713:12:30","nodeType":"YulExpressionStatement","src":"713:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:30","nodeType":"YulIdentifier","src":"685:7:30"},{"name":"headStart","nativeSrc":"694:9:30","nodeType":"YulIdentifier","src":"694:9:30"}],"functionName":{"name":"sub","nativeSrc":"681:3:30","nodeType":"YulIdentifier","src":"681:3:30"},"nativeSrc":"681:23:30","nodeType":"YulFunctionCall","src":"681:23:30"},{"kind":"number","nativeSrc":"706:3:30","nodeType":"YulLiteral","src":"706:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:30","nodeType":"YulIdentifier","src":"677:3:30"},"nativeSrc":"677:33:30","nodeType":"YulFunctionCall","src":"677:33:30"},"nativeSrc":"674:53:30","nodeType":"YulIf","src":"674:53:30"},{"nativeSrc":"736:33:30","nodeType":"YulAssignment","src":"736:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"759:9:30","nodeType":"YulIdentifier","src":"759:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"746:12:30","nodeType":"YulIdentifier","src":"746:12:30"},"nativeSrc":"746:23:30","nodeType":"YulFunctionCall","src":"746:23:30"},"variableNames":[{"name":"value0","nativeSrc":"736:6:30","nodeType":"YulIdentifier","src":"736:6:30"}]},{"nativeSrc":"778:42:30","nodeType":"YulAssignment","src":"778:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"805:9:30","nodeType":"YulIdentifier","src":"805:9:30"},{"kind":"number","nativeSrc":"816:2:30","nodeType":"YulLiteral","src":"816:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"801:3:30","nodeType":"YulIdentifier","src":"801:3:30"},"nativeSrc":"801:18:30","nodeType":"YulFunctionCall","src":"801:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"788:12:30","nodeType":"YulIdentifier","src":"788:12:30"},"nativeSrc":"788:32:30","nodeType":"YulFunctionCall","src":"788:32:30"},"variableNames":[{"name":"value1","nativeSrc":"778:6:30","nodeType":"YulIdentifier","src":"778:6:30"}]},{"nativeSrc":"829:42:30","nodeType":"YulAssignment","src":"829:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"856:9:30","nodeType":"YulIdentifier","src":"856:9:30"},{"kind":"number","nativeSrc":"867:2:30","nodeType":"YulLiteral","src":"867:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"852:3:30","nodeType":"YulIdentifier","src":"852:3:30"},"nativeSrc":"852:18:30","nodeType":"YulFunctionCall","src":"852:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"839:12:30","nodeType":"YulIdentifier","src":"839:12:30"},"nativeSrc":"839:32:30","nodeType":"YulFunctionCall","src":"839:32:30"},"variableNames":[{"name":"value2","nativeSrc":"829:6:30","nodeType":"YulIdentifier","src":"829:6:30"}]},{"nativeSrc":"880:42:30","nodeType":"YulAssignment","src":"880:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"907:9:30","nodeType":"YulIdentifier","src":"907:9:30"},{"kind":"number","nativeSrc":"918:2:30","nodeType":"YulLiteral","src":"918:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"903:3:30","nodeType":"YulIdentifier","src":"903:3:30"},"nativeSrc":"903:18:30","nodeType":"YulFunctionCall","src":"903:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"890:12:30","nodeType":"YulIdentifier","src":"890:12:30"},"nativeSrc":"890:32:30","nodeType":"YulFunctionCall","src":"890:32:30"},"variableNames":[{"name":"value3","nativeSrc":"880:6:30","nodeType":"YulIdentifier","src":"880:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:385:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:30","nodeType":"YulTypedName","src":"606:9:30","type":""},{"name":"dataEnd","nativeSrc":"617:7:30","nodeType":"YulTypedName","src":"617:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:30","nodeType":"YulTypedName","src":"629:6:30","type":""},{"name":"value1","nativeSrc":"637:6:30","nodeType":"YulTypedName","src":"637:6:30","type":""},{"name":"value2","nativeSrc":"645:6:30","nodeType":"YulTypedName","src":"645:6:30","type":""},{"name":"value3","nativeSrc":"653:6:30","nodeType":"YulTypedName","src":"653:6:30","type":""}],"src":"543:385:30"},{"body":{"nativeSrc":"1060:125:30","nodeType":"YulBlock","src":"1060:125:30","statements":[{"nativeSrc":"1070:26:30","nodeType":"YulAssignment","src":"1070:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1082:9:30","nodeType":"YulIdentifier","src":"1082:9:30"},{"kind":"number","nativeSrc":"1093:2:30","nodeType":"YulLiteral","src":"1093:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1078:3:30","nodeType":"YulIdentifier","src":"1078:3:30"},"nativeSrc":"1078:18:30","nodeType":"YulFunctionCall","src":"1078:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1070:4:30","nodeType":"YulIdentifier","src":"1070:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1112:9:30","nodeType":"YulIdentifier","src":"1112:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1127:6:30","nodeType":"YulIdentifier","src":"1127:6:30"},{"kind":"number","nativeSrc":"1135:42:30","nodeType":"YulLiteral","src":"1135:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1123:3:30","nodeType":"YulIdentifier","src":"1123:3:30"},"nativeSrc":"1123:55:30","nodeType":"YulFunctionCall","src":"1123:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1105:6:30","nodeType":"YulIdentifier","src":"1105:6:30"},"nativeSrc":"1105:74:30","nodeType":"YulFunctionCall","src":"1105:74:30"},"nativeSrc":"1105:74:30","nodeType":"YulExpressionStatement","src":"1105:74:30"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"933:252:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1029:9:30","nodeType":"YulTypedName","src":"1029:9:30","type":""},{"name":"value0","nativeSrc":"1040:6:30","nodeType":"YulTypedName","src":"1040:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1051:4:30","nodeType":"YulTypedName","src":"1051:4:30","type":""}],"src":"933:252:30"},{"body":{"nativeSrc":"1315:125:30","nodeType":"YulBlock","src":"1315:125:30","statements":[{"nativeSrc":"1325:26:30","nodeType":"YulAssignment","src":"1325:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1337:9:30","nodeType":"YulIdentifier","src":"1337:9:30"},{"kind":"number","nativeSrc":"1348:2:30","nodeType":"YulLiteral","src":"1348:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1333:3:30","nodeType":"YulIdentifier","src":"1333:3:30"},"nativeSrc":"1333:18:30","nodeType":"YulFunctionCall","src":"1333:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1325:4:30","nodeType":"YulIdentifier","src":"1325:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1367:9:30","nodeType":"YulIdentifier","src":"1367:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1382:6:30","nodeType":"YulIdentifier","src":"1382:6:30"},{"kind":"number","nativeSrc":"1390:42:30","nodeType":"YulLiteral","src":"1390:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1378:3:30","nodeType":"YulIdentifier","src":"1378:3:30"},"nativeSrc":"1378:55:30","nodeType":"YulFunctionCall","src":"1378:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1360:6:30","nodeType":"YulIdentifier","src":"1360:6:30"},"nativeSrc":"1360:74:30","nodeType":"YulFunctionCall","src":"1360:74:30"},"nativeSrc":"1360:74:30","nodeType":"YulExpressionStatement","src":"1360:74:30"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed","nativeSrc":"1190:250:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1284:9:30","nodeType":"YulTypedName","src":"1284:9:30","type":""},{"name":"value0","nativeSrc":"1295:6:30","nodeType":"YulTypedName","src":"1295:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1306:4:30","nodeType":"YulTypedName","src":"1306:4:30","type":""}],"src":"1190:250:30"},{"body":{"nativeSrc":"1494:147:30","nodeType":"YulBlock","src":"1494:147:30","statements":[{"nativeSrc":"1504:29:30","nodeType":"YulAssignment","src":"1504:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"1526:6:30","nodeType":"YulIdentifier","src":"1526:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"1513:12:30","nodeType":"YulIdentifier","src":"1513:12:30"},"nativeSrc":"1513:20:30","nodeType":"YulFunctionCall","src":"1513:20:30"},"variableNames":[{"name":"value","nativeSrc":"1504:5:30","nodeType":"YulIdentifier","src":"1504:5:30"}]},{"body":{"nativeSrc":"1619:16:30","nodeType":"YulBlock","src":"1619:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1628:1:30","nodeType":"YulLiteral","src":"1628:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1631:1:30","nodeType":"YulLiteral","src":"1631:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1621:6:30","nodeType":"YulIdentifier","src":"1621:6:30"},"nativeSrc":"1621:12:30","nodeType":"YulFunctionCall","src":"1621:12:30"},"nativeSrc":"1621:12:30","nodeType":"YulExpressionStatement","src":"1621:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1555:5:30","nodeType":"YulIdentifier","src":"1555:5:30"},{"arguments":[{"name":"value","nativeSrc":"1566:5:30","nodeType":"YulIdentifier","src":"1566:5:30"},{"kind":"number","nativeSrc":"1573:42:30","nodeType":"YulLiteral","src":"1573:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:30","nodeType":"YulIdentifier","src":"1562:3:30"},"nativeSrc":"1562:54:30","nodeType":"YulFunctionCall","src":"1562:54:30"}],"functionName":{"name":"eq","nativeSrc":"1552:2:30","nodeType":"YulIdentifier","src":"1552:2:30"},"nativeSrc":"1552:65:30","nodeType":"YulFunctionCall","src":"1552:65:30"}],"functionName":{"name":"iszero","nativeSrc":"1545:6:30","nodeType":"YulIdentifier","src":"1545:6:30"},"nativeSrc":"1545:73:30","nodeType":"YulFunctionCall","src":"1545:73:30"},"nativeSrc":"1542:93:30","nodeType":"YulIf","src":"1542:93:30"}]},"name":"abi_decode_address","nativeSrc":"1445:196:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1473:6:30","nodeType":"YulTypedName","src":"1473:6:30","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1484:5:30","nodeType":"YulTypedName","src":"1484:5:30","type":""}],"src":"1445:196:30"},{"body":{"nativeSrc":"1716:116:30","nodeType":"YulBlock","src":"1716:116:30","statements":[{"body":{"nativeSrc":"1762:16:30","nodeType":"YulBlock","src":"1762:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1771:1:30","nodeType":"YulLiteral","src":"1771:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1774:1:30","nodeType":"YulLiteral","src":"1774:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1764:6:30","nodeType":"YulIdentifier","src":"1764:6:30"},"nativeSrc":"1764:12:30","nodeType":"YulFunctionCall","src":"1764:12:30"},"nativeSrc":"1764:12:30","nodeType":"YulExpressionStatement","src":"1764:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1737:7:30","nodeType":"YulIdentifier","src":"1737:7:30"},{"name":"headStart","nativeSrc":"1746:9:30","nodeType":"YulIdentifier","src":"1746:9:30"}],"functionName":{"name":"sub","nativeSrc":"1733:3:30","nodeType":"YulIdentifier","src":"1733:3:30"},"nativeSrc":"1733:23:30","nodeType":"YulFunctionCall","src":"1733:23:30"},{"kind":"number","nativeSrc":"1758:2:30","nodeType":"YulLiteral","src":"1758:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1729:3:30","nodeType":"YulIdentifier","src":"1729:3:30"},"nativeSrc":"1729:32:30","nodeType":"YulFunctionCall","src":"1729:32:30"},"nativeSrc":"1726:52:30","nodeType":"YulIf","src":"1726:52:30"},{"nativeSrc":"1787:39:30","nodeType":"YulAssignment","src":"1787:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1816:9:30","nodeType":"YulIdentifier","src":"1816:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1797:18:30","nodeType":"YulIdentifier","src":"1797:18:30"},"nativeSrc":"1797:29:30","nodeType":"YulFunctionCall","src":"1797:29:30"},"variableNames":[{"name":"value0","nativeSrc":"1787:6:30","nodeType":"YulIdentifier","src":"1787:6:30"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"1646:186:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1682:9:30","nodeType":"YulTypedName","src":"1682:9:30","type":""},{"name":"dataEnd","nativeSrc":"1693:7:30","nodeType":"YulTypedName","src":"1693:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1705:6:30","nodeType":"YulTypedName","src":"1705:6:30","type":""}],"src":"1646:186:30"},{"body":{"nativeSrc":"1938:76:30","nodeType":"YulBlock","src":"1938:76:30","statements":[{"nativeSrc":"1948:26:30","nodeType":"YulAssignment","src":"1948:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1960:9:30","nodeType":"YulIdentifier","src":"1960:9:30"},{"kind":"number","nativeSrc":"1971:2:30","nodeType":"YulLiteral","src":"1971:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1956:3:30","nodeType":"YulIdentifier","src":"1956:3:30"},"nativeSrc":"1956:18:30","nodeType":"YulFunctionCall","src":"1956:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1948:4:30","nodeType":"YulIdentifier","src":"1948:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1990:9:30","nodeType":"YulIdentifier","src":"1990:9:30"},{"name":"value0","nativeSrc":"2001:6:30","nodeType":"YulIdentifier","src":"2001:6:30"}],"functionName":{"name":"mstore","nativeSrc":"1983:6:30","nodeType":"YulIdentifier","src":"1983:6:30"},"nativeSrc":"1983:25:30","nodeType":"YulFunctionCall","src":"1983:25:30"},"nativeSrc":"1983:25:30","nodeType":"YulExpressionStatement","src":"1983:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"1837:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1907:9:30","nodeType":"YulTypedName","src":"1907:9:30","type":""},{"name":"value0","nativeSrc":"1918:6:30","nodeType":"YulTypedName","src":"1918:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1929:4:30","nodeType":"YulTypedName","src":"1929:4:30","type":""}],"src":"1837:177:30"},{"body":{"nativeSrc":"2120:125:30","nodeType":"YulBlock","src":"2120:125:30","statements":[{"nativeSrc":"2130:26:30","nodeType":"YulAssignment","src":"2130:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2142:9:30","nodeType":"YulIdentifier","src":"2142:9:30"},{"kind":"number","nativeSrc":"2153:2:30","nodeType":"YulLiteral","src":"2153:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2138:3:30","nodeType":"YulIdentifier","src":"2138:3:30"},"nativeSrc":"2138:18:30","nodeType":"YulFunctionCall","src":"2138:18:30"},"variableNames":[{"name":"tail","nativeSrc":"2130:4:30","nodeType":"YulIdentifier","src":"2130:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2172:9:30","nodeType":"YulIdentifier","src":"2172:9:30"},{"arguments":[{"name":"value0","nativeSrc":"2187:6:30","nodeType":"YulIdentifier","src":"2187:6:30"},{"kind":"number","nativeSrc":"2195:42:30","nodeType":"YulLiteral","src":"2195:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2183:3:30","nodeType":"YulIdentifier","src":"2183:3:30"},"nativeSrc":"2183:55:30","nodeType":"YulFunctionCall","src":"2183:55:30"}],"functionName":{"name":"mstore","nativeSrc":"2165:6:30","nodeType":"YulIdentifier","src":"2165:6:30"},"nativeSrc":"2165:74:30","nodeType":"YulFunctionCall","src":"2165:74:30"},"nativeSrc":"2165:74:30","nodeType":"YulExpressionStatement","src":"2165:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2019:226:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2089:9:30","nodeType":"YulTypedName","src":"2089:9:30","type":""},{"name":"value0","nativeSrc":"2100:6:30","nodeType":"YulTypedName","src":"2100:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2111:4:30","nodeType":"YulTypedName","src":"2111:4:30","type":""}],"src":"2019:226:30"},{"body":{"nativeSrc":"2320:110:30","nodeType":"YulBlock","src":"2320:110:30","statements":[{"body":{"nativeSrc":"2366:16:30","nodeType":"YulBlock","src":"2366:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2375:1:30","nodeType":"YulLiteral","src":"2375:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2378:1:30","nodeType":"YulLiteral","src":"2378:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2368:6:30","nodeType":"YulIdentifier","src":"2368:6:30"},"nativeSrc":"2368:12:30","nodeType":"YulFunctionCall","src":"2368:12:30"},"nativeSrc":"2368:12:30","nodeType":"YulExpressionStatement","src":"2368:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2341:7:30","nodeType":"YulIdentifier","src":"2341:7:30"},{"name":"headStart","nativeSrc":"2350:9:30","nodeType":"YulIdentifier","src":"2350:9:30"}],"functionName":{"name":"sub","nativeSrc":"2337:3:30","nodeType":"YulIdentifier","src":"2337:3:30"},"nativeSrc":"2337:23:30","nodeType":"YulFunctionCall","src":"2337:23:30"},{"kind":"number","nativeSrc":"2362:2:30","nodeType":"YulLiteral","src":"2362:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2333:3:30","nodeType":"YulIdentifier","src":"2333:3:30"},"nativeSrc":"2333:32:30","nodeType":"YulFunctionCall","src":"2333:32:30"},"nativeSrc":"2330:52:30","nodeType":"YulIf","src":"2330:52:30"},{"nativeSrc":"2391:33:30","nodeType":"YulAssignment","src":"2391:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2414:9:30","nodeType":"YulIdentifier","src":"2414:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2401:12:30","nodeType":"YulIdentifier","src":"2401:12:30"},"nativeSrc":"2401:23:30","nodeType":"YulFunctionCall","src":"2401:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2391:6:30","nodeType":"YulIdentifier","src":"2391:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2250:180:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2286:9:30","nodeType":"YulTypedName","src":"2286:9:30","type":""},{"name":"dataEnd","nativeSrc":"2297:7:30","nodeType":"YulTypedName","src":"2297:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2309:6:30","nodeType":"YulTypedName","src":"2309:6:30","type":""}],"src":"2250:180:30"},{"body":{"nativeSrc":"2592:162:30","nodeType":"YulBlock","src":"2592:162:30","statements":[{"nativeSrc":"2602:26:30","nodeType":"YulAssignment","src":"2602:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2614:9:30","nodeType":"YulIdentifier","src":"2614:9:30"},{"kind":"number","nativeSrc":"2625:2:30","nodeType":"YulLiteral","src":"2625:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2610:3:30","nodeType":"YulIdentifier","src":"2610:3:30"},"nativeSrc":"2610:18:30","nodeType":"YulFunctionCall","src":"2610:18:30"},"variableNames":[{"name":"tail","nativeSrc":"2602:4:30","nodeType":"YulIdentifier","src":"2602:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2644:9:30","nodeType":"YulIdentifier","src":"2644:9:30"},{"name":"value0","nativeSrc":"2655:6:30","nodeType":"YulIdentifier","src":"2655:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2637:6:30","nodeType":"YulIdentifier","src":"2637:6:30"},"nativeSrc":"2637:25:30","nodeType":"YulFunctionCall","src":"2637:25:30"},"nativeSrc":"2637:25:30","nodeType":"YulExpressionStatement","src":"2637:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2682:9:30","nodeType":"YulIdentifier","src":"2682:9:30"},{"kind":"number","nativeSrc":"2693:2:30","nodeType":"YulLiteral","src":"2693:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2678:3:30","nodeType":"YulIdentifier","src":"2678:3:30"},"nativeSrc":"2678:18:30","nodeType":"YulFunctionCall","src":"2678:18:30"},{"name":"value1","nativeSrc":"2698:6:30","nodeType":"YulIdentifier","src":"2698:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2671:6:30","nodeType":"YulIdentifier","src":"2671:6:30"},"nativeSrc":"2671:34:30","nodeType":"YulFunctionCall","src":"2671:34:30"},"nativeSrc":"2671:34:30","nodeType":"YulExpressionStatement","src":"2671:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2725:9:30","nodeType":"YulIdentifier","src":"2725:9:30"},{"kind":"number","nativeSrc":"2736:2:30","nodeType":"YulLiteral","src":"2736:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2721:3:30","nodeType":"YulIdentifier","src":"2721:3:30"},"nativeSrc":"2721:18:30","nodeType":"YulFunctionCall","src":"2721:18:30"},{"name":"value2","nativeSrc":"2741:6:30","nodeType":"YulIdentifier","src":"2741:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2714:6:30","nodeType":"YulIdentifier","src":"2714:6:30"},"nativeSrc":"2714:34:30","nodeType":"YulFunctionCall","src":"2714:34:30"},"nativeSrc":"2714:34:30","nodeType":"YulExpressionStatement","src":"2714:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"2435:319:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2545:9:30","nodeType":"YulTypedName","src":"2545:9:30","type":""},{"name":"value2","nativeSrc":"2556:6:30","nodeType":"YulTypedName","src":"2556:6:30","type":""},{"name":"value1","nativeSrc":"2564:6:30","nodeType":"YulTypedName","src":"2564:6:30","type":""},{"name":"value0","nativeSrc":"2572:6:30","nodeType":"YulTypedName","src":"2572:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2583:4:30","nodeType":"YulTypedName","src":"2583:4:30","type":""}],"src":"2435:319:30"},{"body":{"nativeSrc":"2898:618:30","nodeType":"YulBlock","src":"2898:618:30","statements":[{"body":{"nativeSrc":"2944:16:30","nodeType":"YulBlock","src":"2944:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2953:1:30","nodeType":"YulLiteral","src":"2953:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2956:1:30","nodeType":"YulLiteral","src":"2956:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2946:6:30","nodeType":"YulIdentifier","src":"2946:6:30"},"nativeSrc":"2946:12:30","nodeType":"YulFunctionCall","src":"2946:12:30"},"nativeSrc":"2946:12:30","nodeType":"YulExpressionStatement","src":"2946:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2919:7:30","nodeType":"YulIdentifier","src":"2919:7:30"},{"name":"headStart","nativeSrc":"2928:9:30","nodeType":"YulIdentifier","src":"2928:9:30"}],"functionName":{"name":"sub","nativeSrc":"2915:3:30","nodeType":"YulIdentifier","src":"2915:3:30"},"nativeSrc":"2915:23:30","nodeType":"YulFunctionCall","src":"2915:23:30"},{"kind":"number","nativeSrc":"2940:2:30","nodeType":"YulLiteral","src":"2940:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2911:3:30","nodeType":"YulIdentifier","src":"2911:3:30"},"nativeSrc":"2911:32:30","nodeType":"YulFunctionCall","src":"2911:32:30"},"nativeSrc":"2908:52:30","nodeType":"YulIf","src":"2908:52:30"},{"nativeSrc":"2969:33:30","nodeType":"YulAssignment","src":"2969:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2992:9:30","nodeType":"YulIdentifier","src":"2992:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2979:12:30","nodeType":"YulIdentifier","src":"2979:12:30"},"nativeSrc":"2979:23:30","nodeType":"YulFunctionCall","src":"2979:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2969:6:30","nodeType":"YulIdentifier","src":"2969:6:30"}]},{"nativeSrc":"3011:46:30","nodeType":"YulVariableDeclaration","src":"3011:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3042:9:30","nodeType":"YulIdentifier","src":"3042:9:30"},{"kind":"number","nativeSrc":"3053:2:30","nodeType":"YulLiteral","src":"3053:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3038:3:30","nodeType":"YulIdentifier","src":"3038:3:30"},"nativeSrc":"3038:18:30","nodeType":"YulFunctionCall","src":"3038:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:30","nodeType":"YulIdentifier","src":"3025:12:30"},"nativeSrc":"3025:32:30","nodeType":"YulFunctionCall","src":"3025:32:30"},"variables":[{"name":"offset","nativeSrc":"3015:6:30","nodeType":"YulTypedName","src":"3015:6:30","type":""}]},{"nativeSrc":"3066:28:30","nodeType":"YulVariableDeclaration","src":"3066:28:30","value":{"kind":"number","nativeSrc":"3076:18:30","nodeType":"YulLiteral","src":"3076:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3070:2:30","nodeType":"YulTypedName","src":"3070:2:30","type":""}]},{"body":{"nativeSrc":"3121:16:30","nodeType":"YulBlock","src":"3121:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3130:1:30","nodeType":"YulLiteral","src":"3130:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3133:1:30","nodeType":"YulLiteral","src":"3133:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3123:6:30","nodeType":"YulIdentifier","src":"3123:6:30"},"nativeSrc":"3123:12:30","nodeType":"YulFunctionCall","src":"3123:12:30"},"nativeSrc":"3123:12:30","nodeType":"YulExpressionStatement","src":"3123:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3109:6:30","nodeType":"YulIdentifier","src":"3109:6:30"},{"name":"_1","nativeSrc":"3117:2:30","nodeType":"YulIdentifier","src":"3117:2:30"}],"functionName":{"name":"gt","nativeSrc":"3106:2:30","nodeType":"YulIdentifier","src":"3106:2:30"},"nativeSrc":"3106:14:30","nodeType":"YulFunctionCall","src":"3106:14:30"},"nativeSrc":"3103:34:30","nodeType":"YulIf","src":"3103:34:30"},{"nativeSrc":"3146:32:30","nodeType":"YulVariableDeclaration","src":"3146:32:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3160:9:30","nodeType":"YulIdentifier","src":"3160:9:30"},{"name":"offset","nativeSrc":"3171:6:30","nodeType":"YulIdentifier","src":"3171:6:30"}],"functionName":{"name":"add","nativeSrc":"3156:3:30","nodeType":"YulIdentifier","src":"3156:3:30"},"nativeSrc":"3156:22:30","nodeType":"YulFunctionCall","src":"3156:22:30"},"variables":[{"name":"_2","nativeSrc":"3150:2:30","nodeType":"YulTypedName","src":"3150:2:30","type":""}]},{"body":{"nativeSrc":"3226:16:30","nodeType":"YulBlock","src":"3226:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3235:1:30","nodeType":"YulLiteral","src":"3235:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3238:1:30","nodeType":"YulLiteral","src":"3238:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3228:6:30","nodeType":"YulIdentifier","src":"3228:6:30"},"nativeSrc":"3228:12:30","nodeType":"YulFunctionCall","src":"3228:12:30"},"nativeSrc":"3228:12:30","nodeType":"YulExpressionStatement","src":"3228:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3205:2:30","nodeType":"YulIdentifier","src":"3205:2:30"},{"kind":"number","nativeSrc":"3209:4:30","nodeType":"YulLiteral","src":"3209:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3201:3:30","nodeType":"YulIdentifier","src":"3201:3:30"},"nativeSrc":"3201:13:30","nodeType":"YulFunctionCall","src":"3201:13:30"},{"name":"dataEnd","nativeSrc":"3216:7:30","nodeType":"YulIdentifier","src":"3216:7:30"}],"functionName":{"name":"slt","nativeSrc":"3197:3:30","nodeType":"YulIdentifier","src":"3197:3:30"},"nativeSrc":"3197:27:30","nodeType":"YulFunctionCall","src":"3197:27:30"}],"functionName":{"name":"iszero","nativeSrc":"3190:6:30","nodeType":"YulIdentifier","src":"3190:6:30"},"nativeSrc":"3190:35:30","nodeType":"YulFunctionCall","src":"3190:35:30"},"nativeSrc":"3187:55:30","nodeType":"YulIf","src":"3187:55:30"},{"nativeSrc":"3251:30:30","nodeType":"YulVariableDeclaration","src":"3251:30:30","value":{"arguments":[{"name":"_2","nativeSrc":"3278:2:30","nodeType":"YulIdentifier","src":"3278:2:30"}],"functionName":{"name":"calldataload","nativeSrc":"3265:12:30","nodeType":"YulIdentifier","src":"3265:12:30"},"nativeSrc":"3265:16:30","nodeType":"YulFunctionCall","src":"3265:16:30"},"variables":[{"name":"length","nativeSrc":"3255:6:30","nodeType":"YulTypedName","src":"3255:6:30","type":""}]},{"body":{"nativeSrc":"3308:16:30","nodeType":"YulBlock","src":"3308:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3317:1:30","nodeType":"YulLiteral","src":"3317:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3320:1:30","nodeType":"YulLiteral","src":"3320:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3310:6:30","nodeType":"YulIdentifier","src":"3310:6:30"},"nativeSrc":"3310:12:30","nodeType":"YulFunctionCall","src":"3310:12:30"},"nativeSrc":"3310:12:30","nodeType":"YulExpressionStatement","src":"3310:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3296:6:30","nodeType":"YulIdentifier","src":"3296:6:30"},{"name":"_1","nativeSrc":"3304:2:30","nodeType":"YulIdentifier","src":"3304:2:30"}],"functionName":{"name":"gt","nativeSrc":"3293:2:30","nodeType":"YulIdentifier","src":"3293:2:30"},"nativeSrc":"3293:14:30","nodeType":"YulFunctionCall","src":"3293:14:30"},"nativeSrc":"3290:34:30","nodeType":"YulIf","src":"3290:34:30"},{"body":{"nativeSrc":"3382:16:30","nodeType":"YulBlock","src":"3382:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3391:1:30","nodeType":"YulLiteral","src":"3391:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3394:1:30","nodeType":"YulLiteral","src":"3394:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3384:6:30","nodeType":"YulIdentifier","src":"3384:6:30"},"nativeSrc":"3384:12:30","nodeType":"YulFunctionCall","src":"3384:12:30"},"nativeSrc":"3384:12:30","nodeType":"YulExpressionStatement","src":"3384:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3347:2:30","nodeType":"YulIdentifier","src":"3347:2:30"},{"arguments":[{"kind":"number","nativeSrc":"3355:1:30","nodeType":"YulLiteral","src":"3355:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"3358:6:30","nodeType":"YulIdentifier","src":"3358:6:30"}],"functionName":{"name":"shl","nativeSrc":"3351:3:30","nodeType":"YulIdentifier","src":"3351:3:30"},"nativeSrc":"3351:14:30","nodeType":"YulFunctionCall","src":"3351:14:30"}],"functionName":{"name":"add","nativeSrc":"3343:3:30","nodeType":"YulIdentifier","src":"3343:3:30"},"nativeSrc":"3343:23:30","nodeType":"YulFunctionCall","src":"3343:23:30"},{"kind":"number","nativeSrc":"3368:2:30","nodeType":"YulLiteral","src":"3368:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3339:3:30","nodeType":"YulIdentifier","src":"3339:3:30"},"nativeSrc":"3339:32:30","nodeType":"YulFunctionCall","src":"3339:32:30"},{"name":"dataEnd","nativeSrc":"3373:7:30","nodeType":"YulIdentifier","src":"3373:7:30"}],"functionName":{"name":"gt","nativeSrc":"3336:2:30","nodeType":"YulIdentifier","src":"3336:2:30"},"nativeSrc":"3336:45:30","nodeType":"YulFunctionCall","src":"3336:45:30"},"nativeSrc":"3333:65:30","nodeType":"YulIf","src":"3333:65:30"},{"nativeSrc":"3407:21:30","nodeType":"YulAssignment","src":"3407:21:30","value":{"arguments":[{"name":"_2","nativeSrc":"3421:2:30","nodeType":"YulIdentifier","src":"3421:2:30"},{"kind":"number","nativeSrc":"3425:2:30","nodeType":"YulLiteral","src":"3425:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3417:3:30","nodeType":"YulIdentifier","src":"3417:3:30"},"nativeSrc":"3417:11:30","nodeType":"YulFunctionCall","src":"3417:11:30"},"variableNames":[{"name":"value1","nativeSrc":"3407:6:30","nodeType":"YulIdentifier","src":"3407:6:30"}]},{"nativeSrc":"3437:16:30","nodeType":"YulAssignment","src":"3437:16:30","value":{"name":"length","nativeSrc":"3447:6:30","nodeType":"YulIdentifier","src":"3447:6:30"},"variableNames":[{"name":"value2","nativeSrc":"3437:6:30","nodeType":"YulIdentifier","src":"3437:6:30"}]},{"nativeSrc":"3462:48:30","nodeType":"YulAssignment","src":"3462:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3495:9:30","nodeType":"YulIdentifier","src":"3495:9:30"},{"kind":"number","nativeSrc":"3506:2:30","nodeType":"YulLiteral","src":"3506:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3491:3:30","nodeType":"YulIdentifier","src":"3491:3:30"},"nativeSrc":"3491:18:30","nodeType":"YulFunctionCall","src":"3491:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3472:18:30","nodeType":"YulIdentifier","src":"3472:18:30"},"nativeSrc":"3472:38:30","nodeType":"YulFunctionCall","src":"3472:38:30"},"variableNames":[{"name":"value3","nativeSrc":"3462:6:30","nodeType":"YulIdentifier","src":"3462:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address","nativeSrc":"2759:757:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2840:9:30","nodeType":"YulTypedName","src":"2840:9:30","type":""},{"name":"dataEnd","nativeSrc":"2851:7:30","nodeType":"YulTypedName","src":"2851:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2863:6:30","nodeType":"YulTypedName","src":"2863:6:30","type":""},{"name":"value1","nativeSrc":"2871:6:30","nodeType":"YulTypedName","src":"2871:6:30","type":""},{"name":"value2","nativeSrc":"2879:6:30","nodeType":"YulTypedName","src":"2879:6:30","type":""},{"name":"value3","nativeSrc":"2887:6:30","nodeType":"YulTypedName","src":"2887:6:30","type":""}],"src":"2759:757:30"},{"body":{"nativeSrc":"3678:162:30","nodeType":"YulBlock","src":"3678:162:30","statements":[{"nativeSrc":"3688:26:30","nodeType":"YulAssignment","src":"3688:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3700:9:30","nodeType":"YulIdentifier","src":"3700:9:30"},{"kind":"number","nativeSrc":"3711:2:30","nodeType":"YulLiteral","src":"3711:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3696:3:30","nodeType":"YulIdentifier","src":"3696:3:30"},"nativeSrc":"3696:18:30","nodeType":"YulFunctionCall","src":"3696:18:30"},"variableNames":[{"name":"tail","nativeSrc":"3688:4:30","nodeType":"YulIdentifier","src":"3688:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3730:9:30","nodeType":"YulIdentifier","src":"3730:9:30"},{"name":"value0","nativeSrc":"3741:6:30","nodeType":"YulIdentifier","src":"3741:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3723:6:30","nodeType":"YulIdentifier","src":"3723:6:30"},"nativeSrc":"3723:25:30","nodeType":"YulFunctionCall","src":"3723:25:30"},"nativeSrc":"3723:25:30","nodeType":"YulExpressionStatement","src":"3723:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3768:9:30","nodeType":"YulIdentifier","src":"3768:9:30"},{"kind":"number","nativeSrc":"3779:2:30","nodeType":"YulLiteral","src":"3779:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3764:3:30","nodeType":"YulIdentifier","src":"3764:3:30"},"nativeSrc":"3764:18:30","nodeType":"YulFunctionCall","src":"3764:18:30"},{"name":"value1","nativeSrc":"3784:6:30","nodeType":"YulIdentifier","src":"3784:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3757:6:30","nodeType":"YulIdentifier","src":"3757:6:30"},"nativeSrc":"3757:34:30","nodeType":"YulFunctionCall","src":"3757:34:30"},"nativeSrc":"3757:34:30","nodeType":"YulExpressionStatement","src":"3757:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3811:9:30","nodeType":"YulIdentifier","src":"3811:9:30"},{"kind":"number","nativeSrc":"3822:2:30","nodeType":"YulLiteral","src":"3822:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3807:3:30","nodeType":"YulIdentifier","src":"3807:3:30"},"nativeSrc":"3807:18:30","nodeType":"YulFunctionCall","src":"3807:18:30"},{"name":"value2","nativeSrc":"3827:6:30","nodeType":"YulIdentifier","src":"3827:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3800:6:30","nodeType":"YulIdentifier","src":"3800:6:30"},"nativeSrc":"3800:34:30","nodeType":"YulFunctionCall","src":"3800:34:30"},"nativeSrc":"3800:34:30","nodeType":"YulExpressionStatement","src":"3800:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3521:319:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3631:9:30","nodeType":"YulTypedName","src":"3631:9:30","type":""},{"name":"value2","nativeSrc":"3642:6:30","nodeType":"YulTypedName","src":"3642:6:30","type":""},{"name":"value1","nativeSrc":"3650:6:30","nodeType":"YulTypedName","src":"3650:6:30","type":""},{"name":"value0","nativeSrc":"3658:6:30","nodeType":"YulTypedName","src":"3658:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3669:4:30","nodeType":"YulTypedName","src":"3669:4:30","type":""}],"src":"3521:319:30"},{"body":{"nativeSrc":"3946:76:30","nodeType":"YulBlock","src":"3946:76:30","statements":[{"nativeSrc":"3956:26:30","nodeType":"YulAssignment","src":"3956:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3968:9:30","nodeType":"YulIdentifier","src":"3968:9:30"},{"kind":"number","nativeSrc":"3979:2:30","nodeType":"YulLiteral","src":"3979:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3964:3:30","nodeType":"YulIdentifier","src":"3964:3:30"},"nativeSrc":"3964:18:30","nodeType":"YulFunctionCall","src":"3964:18:30"},"variableNames":[{"name":"tail","nativeSrc":"3956:4:30","nodeType":"YulIdentifier","src":"3956:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3998:9:30","nodeType":"YulIdentifier","src":"3998:9:30"},{"name":"value0","nativeSrc":"4009:6:30","nodeType":"YulIdentifier","src":"4009:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3991:6:30","nodeType":"YulIdentifier","src":"3991:6:30"},"nativeSrc":"3991:25:30","nodeType":"YulFunctionCall","src":"3991:25:30"},"nativeSrc":"3991:25:30","nodeType":"YulExpressionStatement","src":"3991:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3845:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3915:9:30","nodeType":"YulTypedName","src":"3915:9:30","type":""},{"name":"value0","nativeSrc":"3926:6:30","nodeType":"YulTypedName","src":"3926:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3937:4:30","nodeType":"YulTypedName","src":"3937:4:30","type":""}],"src":"3845:177:30"},{"body":{"nativeSrc":"4156:119:30","nodeType":"YulBlock","src":"4156:119:30","statements":[{"nativeSrc":"4166:26:30","nodeType":"YulAssignment","src":"4166:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4178:9:30","nodeType":"YulIdentifier","src":"4178:9:30"},{"kind":"number","nativeSrc":"4189:2:30","nodeType":"YulLiteral","src":"4189:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4174:3:30","nodeType":"YulIdentifier","src":"4174:3:30"},"nativeSrc":"4174:18:30","nodeType":"YulFunctionCall","src":"4174:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4166:4:30","nodeType":"YulIdentifier","src":"4166:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4208:9:30","nodeType":"YulIdentifier","src":"4208:9:30"},{"name":"value0","nativeSrc":"4219:6:30","nodeType":"YulIdentifier","src":"4219:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4201:6:30","nodeType":"YulIdentifier","src":"4201:6:30"},"nativeSrc":"4201:25:30","nodeType":"YulFunctionCall","src":"4201:25:30"},"nativeSrc":"4201:25:30","nodeType":"YulExpressionStatement","src":"4201:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4246:9:30","nodeType":"YulIdentifier","src":"4246:9:30"},{"kind":"number","nativeSrc":"4257:2:30","nodeType":"YulLiteral","src":"4257:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4242:3:30","nodeType":"YulIdentifier","src":"4242:3:30"},"nativeSrc":"4242:18:30","nodeType":"YulFunctionCall","src":"4242:18:30"},{"name":"value1","nativeSrc":"4262:6:30","nodeType":"YulIdentifier","src":"4262:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4235:6:30","nodeType":"YulIdentifier","src":"4235:6:30"},"nativeSrc":"4235:34:30","nodeType":"YulFunctionCall","src":"4235:34:30"},"nativeSrc":"4235:34:30","nodeType":"YulExpressionStatement","src":"4235:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4027:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4117:9:30","nodeType":"YulTypedName","src":"4117:9:30","type":""},{"name":"value1","nativeSrc":"4128:6:30","nodeType":"YulTypedName","src":"4128:6:30","type":""},{"name":"value0","nativeSrc":"4136:6:30","nodeType":"YulTypedName","src":"4136:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4147:4:30","nodeType":"YulTypedName","src":"4147:4:30","type":""}],"src":"4027:248:30"},{"body":{"nativeSrc":"4409:119:30","nodeType":"YulBlock","src":"4409:119:30","statements":[{"nativeSrc":"4419:26:30","nodeType":"YulAssignment","src":"4419:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4431:9:30","nodeType":"YulIdentifier","src":"4431:9:30"},{"kind":"number","nativeSrc":"4442:2:30","nodeType":"YulLiteral","src":"4442:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4427:3:30","nodeType":"YulIdentifier","src":"4427:3:30"},"nativeSrc":"4427:18:30","nodeType":"YulFunctionCall","src":"4427:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4419:4:30","nodeType":"YulIdentifier","src":"4419:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4461:9:30","nodeType":"YulIdentifier","src":"4461:9:30"},{"name":"value0","nativeSrc":"4472:6:30","nodeType":"YulIdentifier","src":"4472:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4454:6:30","nodeType":"YulIdentifier","src":"4454:6:30"},"nativeSrc":"4454:25:30","nodeType":"YulFunctionCall","src":"4454:25:30"},"nativeSrc":"4454:25:30","nodeType":"YulExpressionStatement","src":"4454:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4499:9:30","nodeType":"YulIdentifier","src":"4499:9:30"},{"kind":"number","nativeSrc":"4510:2:30","nodeType":"YulLiteral","src":"4510:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4495:3:30","nodeType":"YulIdentifier","src":"4495:3:30"},"nativeSrc":"4495:18:30","nodeType":"YulFunctionCall","src":"4495:18:30"},{"name":"value1","nativeSrc":"4515:6:30","nodeType":"YulIdentifier","src":"4515:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4488:6:30","nodeType":"YulIdentifier","src":"4488:6:30"},"nativeSrc":"4488:34:30","nodeType":"YulFunctionCall","src":"4488:34:30"},"nativeSrc":"4488:34:30","nodeType":"YulExpressionStatement","src":"4488:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"4280:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4370:9:30","nodeType":"YulTypedName","src":"4370:9:30","type":""},{"name":"value1","nativeSrc":"4381:6:30","nodeType":"YulTypedName","src":"4381:6:30","type":""},{"name":"value0","nativeSrc":"4389:6:30","nodeType":"YulTypedName","src":"4389:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4400:4:30","nodeType":"YulTypedName","src":"4400:4:30","type":""}],"src":"4280:248:30"},{"body":{"nativeSrc":"4680:182:30","nodeType":"YulBlock","src":"4680:182:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4697:3:30","nodeType":"YulIdentifier","src":"4697:3:30"},{"name":"value0","nativeSrc":"4702:6:30","nodeType":"YulIdentifier","src":"4702:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4690:6:30","nodeType":"YulIdentifier","src":"4690:6:30"},"nativeSrc":"4690:19:30","nodeType":"YulFunctionCall","src":"4690:19:30"},"nativeSrc":"4690:19:30","nodeType":"YulExpressionStatement","src":"4690:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4729:3:30","nodeType":"YulIdentifier","src":"4729:3:30"},{"kind":"number","nativeSrc":"4734:2:30","nodeType":"YulLiteral","src":"4734:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4725:3:30","nodeType":"YulIdentifier","src":"4725:3:30"},"nativeSrc":"4725:12:30","nodeType":"YulFunctionCall","src":"4725:12:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4747:2:30","nodeType":"YulLiteral","src":"4747:2:30","type":"","value":"96"},{"name":"value1","nativeSrc":"4751:6:30","nodeType":"YulIdentifier","src":"4751:6:30"}],"functionName":{"name":"shl","nativeSrc":"4743:3:30","nodeType":"YulIdentifier","src":"4743:3:30"},"nativeSrc":"4743:15:30","nodeType":"YulFunctionCall","src":"4743:15:30"},{"kind":"number","nativeSrc":"4760:66:30","nodeType":"YulLiteral","src":"4760:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4739:3:30","nodeType":"YulIdentifier","src":"4739:3:30"},"nativeSrc":"4739:88:30","nodeType":"YulFunctionCall","src":"4739:88:30"}],"functionName":{"name":"mstore","nativeSrc":"4718:6:30","nodeType":"YulIdentifier","src":"4718:6:30"},"nativeSrc":"4718:110:30","nodeType":"YulFunctionCall","src":"4718:110:30"},"nativeSrc":"4718:110:30","nodeType":"YulExpressionStatement","src":"4718:110:30"},{"nativeSrc":"4837:19:30","nodeType":"YulAssignment","src":"4837:19:30","value":{"arguments":[{"name":"pos","nativeSrc":"4848:3:30","nodeType":"YulIdentifier","src":"4848:3:30"},{"kind":"number","nativeSrc":"4853:2:30","nodeType":"YulLiteral","src":"4853:2:30","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"4844:3:30","nodeType":"YulIdentifier","src":"4844:3:30"},"nativeSrc":"4844:12:30","nodeType":"YulFunctionCall","src":"4844:12:30"},"variableNames":[{"name":"end","nativeSrc":"4837:3:30","nodeType":"YulIdentifier","src":"4837:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed","nativeSrc":"4533:329:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4648:3:30","nodeType":"YulTypedName","src":"4648:3:30","type":""},{"name":"value1","nativeSrc":"4653:6:30","nodeType":"YulTypedName","src":"4653:6:30","type":""},{"name":"value0","nativeSrc":"4661:6:30","nodeType":"YulTypedName","src":"4661:6:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4672:3:30","nodeType":"YulTypedName","src":"4672:3:30","type":""}],"src":"4533:329:30"},{"body":{"nativeSrc":"4996:168:30","nodeType":"YulBlock","src":"4996:168:30","statements":[{"nativeSrc":"5006:26:30","nodeType":"YulAssignment","src":"5006:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"5018:9:30","nodeType":"YulIdentifier","src":"5018:9:30"},{"kind":"number","nativeSrc":"5029:2:30","nodeType":"YulLiteral","src":"5029:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5014:3:30","nodeType":"YulIdentifier","src":"5014:3:30"},"nativeSrc":"5014:18:30","nodeType":"YulFunctionCall","src":"5014:18:30"},"variableNames":[{"name":"tail","nativeSrc":"5006:4:30","nodeType":"YulIdentifier","src":"5006:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5048:9:30","nodeType":"YulIdentifier","src":"5048:9:30"},{"name":"value0","nativeSrc":"5059:6:30","nodeType":"YulIdentifier","src":"5059:6:30"}],"functionName":{"name":"mstore","nativeSrc":"5041:6:30","nodeType":"YulIdentifier","src":"5041:6:30"},"nativeSrc":"5041:25:30","nodeType":"YulFunctionCall","src":"5041:25:30"},"nativeSrc":"5041:25:30","nodeType":"YulExpressionStatement","src":"5041:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5086:9:30","nodeType":"YulIdentifier","src":"5086:9:30"},{"kind":"number","nativeSrc":"5097:2:30","nodeType":"YulLiteral","src":"5097:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5082:3:30","nodeType":"YulIdentifier","src":"5082:3:30"},"nativeSrc":"5082:18:30","nodeType":"YulFunctionCall","src":"5082:18:30"},{"arguments":[{"name":"value1","nativeSrc":"5106:6:30","nodeType":"YulIdentifier","src":"5106:6:30"},{"kind":"number","nativeSrc":"5114:42:30","nodeType":"YulLiteral","src":"5114:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5102:3:30","nodeType":"YulIdentifier","src":"5102:3:30"},"nativeSrc":"5102:55:30","nodeType":"YulFunctionCall","src":"5102:55:30"}],"functionName":{"name":"mstore","nativeSrc":"5075:6:30","nodeType":"YulIdentifier","src":"5075:6:30"},"nativeSrc":"5075:83:30","nodeType":"YulFunctionCall","src":"5075:83:30"},"nativeSrc":"5075:83:30","nodeType":"YulExpressionStatement","src":"5075:83:30"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"4867:297:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4957:9:30","nodeType":"YulTypedName","src":"4957:9:30","type":""},{"name":"value1","nativeSrc":"4968:6:30","nodeType":"YulTypedName","src":"4968:6:30","type":""},{"name":"value0","nativeSrc":"4976:6:30","nodeType":"YulTypedName","src":"4976:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4987:4:30","nodeType":"YulTypedName","src":"4987:4:30","type":""}],"src":"4867:297:30"},{"body":{"nativeSrc":"5201:152:30","nodeType":"YulBlock","src":"5201:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5218:1:30","nodeType":"YulLiteral","src":"5218:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5221:77:30","nodeType":"YulLiteral","src":"5221:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5211:6:30","nodeType":"YulIdentifier","src":"5211:6:30"},"nativeSrc":"5211:88:30","nodeType":"YulFunctionCall","src":"5211:88:30"},"nativeSrc":"5211:88:30","nodeType":"YulExpressionStatement","src":"5211:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5315:1:30","nodeType":"YulLiteral","src":"5315:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"5318:4:30","nodeType":"YulLiteral","src":"5318:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5308:6:30","nodeType":"YulIdentifier","src":"5308:6:30"},"nativeSrc":"5308:15:30","nodeType":"YulFunctionCall","src":"5308:15:30"},"nativeSrc":"5308:15:30","nodeType":"YulExpressionStatement","src":"5308:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5339:1:30","nodeType":"YulLiteral","src":"5339:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5342:4:30","nodeType":"YulLiteral","src":"5342:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5332:6:30","nodeType":"YulIdentifier","src":"5332:6:30"},"nativeSrc":"5332:15:30","nodeType":"YulFunctionCall","src":"5332:15:30"},"nativeSrc":"5332:15:30","nodeType":"YulExpressionStatement","src":"5332:15:30"}]},"name":"panic_error_0x11","nativeSrc":"5169:184:30","nodeType":"YulFunctionDefinition","src":"5169:184:30"},{"body":{"nativeSrc":"5406:77:30","nodeType":"YulBlock","src":"5406:77:30","statements":[{"nativeSrc":"5416:16:30","nodeType":"YulAssignment","src":"5416:16:30","value":{"arguments":[{"name":"x","nativeSrc":"5427:1:30","nodeType":"YulIdentifier","src":"5427:1:30"},{"name":"y","nativeSrc":"5430:1:30","nodeType":"YulIdentifier","src":"5430:1:30"}],"functionName":{"name":"add","nativeSrc":"5423:3:30","nodeType":"YulIdentifier","src":"5423:3:30"},"nativeSrc":"5423:9:30","nodeType":"YulFunctionCall","src":"5423:9:30"},"variableNames":[{"name":"sum","nativeSrc":"5416:3:30","nodeType":"YulIdentifier","src":"5416:3:30"}]},{"body":{"nativeSrc":"5455:22:30","nodeType":"YulBlock","src":"5455:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5457:16:30","nodeType":"YulIdentifier","src":"5457:16:30"},"nativeSrc":"5457:18:30","nodeType":"YulFunctionCall","src":"5457:18:30"},"nativeSrc":"5457:18:30","nodeType":"YulExpressionStatement","src":"5457:18:30"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5447:1:30","nodeType":"YulIdentifier","src":"5447:1:30"},{"name":"sum","nativeSrc":"5450:3:30","nodeType":"YulIdentifier","src":"5450:3:30"}],"functionName":{"name":"gt","nativeSrc":"5444:2:30","nodeType":"YulIdentifier","src":"5444:2:30"},"nativeSrc":"5444:10:30","nodeType":"YulFunctionCall","src":"5444:10:30"},"nativeSrc":"5441:36:30","nodeType":"YulIf","src":"5441:36:30"}]},"name":"checked_add_t_uint256","nativeSrc":"5358:125:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5389:1:30","nodeType":"YulTypedName","src":"5389:1:30","type":""},{"name":"y","nativeSrc":"5392:1:30","nodeType":"YulTypedName","src":"5392:1:30","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5398:3:30","nodeType":"YulTypedName","src":"5398:3:30","type":""}],"src":"5358:125:30"},{"body":{"nativeSrc":"5753:291:30","nodeType":"YulBlock","src":"5753:291:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5770:9:30","nodeType":"YulIdentifier","src":"5770:9:30"},{"arguments":[{"name":"value0","nativeSrc":"5785:6:30","nodeType":"YulIdentifier","src":"5785:6:30"},{"kind":"number","nativeSrc":"5793:42:30","nodeType":"YulLiteral","src":"5793:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5781:3:30","nodeType":"YulIdentifier","src":"5781:3:30"},"nativeSrc":"5781:55:30","nodeType":"YulFunctionCall","src":"5781:55:30"}],"functionName":{"name":"mstore","nativeSrc":"5763:6:30","nodeType":"YulIdentifier","src":"5763:6:30"},"nativeSrc":"5763:74:30","nodeType":"YulFunctionCall","src":"5763:74:30"},"nativeSrc":"5763:74:30","nodeType":"YulExpressionStatement","src":"5763:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5857:9:30","nodeType":"YulIdentifier","src":"5857:9:30"},{"kind":"number","nativeSrc":"5868:2:30","nodeType":"YulLiteral","src":"5868:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5853:3:30","nodeType":"YulIdentifier","src":"5853:3:30"},"nativeSrc":"5853:18:30","nodeType":"YulFunctionCall","src":"5853:18:30"},{"name":"value1","nativeSrc":"5873:6:30","nodeType":"YulIdentifier","src":"5873:6:30"}],"functionName":{"name":"mstore","nativeSrc":"5846:6:30","nodeType":"YulIdentifier","src":"5846:6:30"},"nativeSrc":"5846:34:30","nodeType":"YulFunctionCall","src":"5846:34:30"},"nativeSrc":"5846:34:30","nodeType":"YulExpressionStatement","src":"5846:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5900:9:30","nodeType":"YulIdentifier","src":"5900:9:30"},{"kind":"number","nativeSrc":"5911:2:30","nodeType":"YulLiteral","src":"5911:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5896:3:30","nodeType":"YulIdentifier","src":"5896:3:30"},"nativeSrc":"5896:18:30","nodeType":"YulFunctionCall","src":"5896:18:30"},{"name":"value2","nativeSrc":"5916:6:30","nodeType":"YulIdentifier","src":"5916:6:30"}],"functionName":{"name":"mstore","nativeSrc":"5889:6:30","nodeType":"YulIdentifier","src":"5889:6:30"},"nativeSrc":"5889:34:30","nodeType":"YulFunctionCall","src":"5889:34:30"},"nativeSrc":"5889:34:30","nodeType":"YulExpressionStatement","src":"5889:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5943:9:30","nodeType":"YulIdentifier","src":"5943:9:30"},{"kind":"number","nativeSrc":"5954:2:30","nodeType":"YulLiteral","src":"5954:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5939:3:30","nodeType":"YulIdentifier","src":"5939:3:30"},"nativeSrc":"5939:18:30","nodeType":"YulFunctionCall","src":"5939:18:30"},{"kind":"number","nativeSrc":"5959:3:30","nodeType":"YulLiteral","src":"5959:3:30","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"5932:6:30","nodeType":"YulIdentifier","src":"5932:6:30"},"nativeSrc":"5932:31:30","nodeType":"YulFunctionCall","src":"5932:31:30"},"nativeSrc":"5932:31:30","nodeType":"YulExpressionStatement","src":"5932:31:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5983:9:30","nodeType":"YulIdentifier","src":"5983:9:30"},{"kind":"number","nativeSrc":"5994:3:30","nodeType":"YulLiteral","src":"5994:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5979:3:30","nodeType":"YulIdentifier","src":"5979:3:30"},"nativeSrc":"5979:19:30","nodeType":"YulFunctionCall","src":"5979:19:30"},{"kind":"number","nativeSrc":"6000:1:30","nodeType":"YulLiteral","src":"6000:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"5972:6:30","nodeType":"YulIdentifier","src":"5972:6:30"},"nativeSrc":"5972:30:30","nodeType":"YulFunctionCall","src":"5972:30:30"},"nativeSrc":"5972:30:30","nodeType":"YulExpressionStatement","src":"5972:30:30"},{"nativeSrc":"6011:27:30","nodeType":"YulAssignment","src":"6011:27:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6023:9:30","nodeType":"YulIdentifier","src":"6023:9:30"},{"kind":"number","nativeSrc":"6034:3:30","nodeType":"YulLiteral","src":"6034:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6019:3:30","nodeType":"YulIdentifier","src":"6019:3:30"},"nativeSrc":"6019:19:30","nodeType":"YulFunctionCall","src":"6019:19:30"},"variableNames":[{"name":"tail","nativeSrc":"6011:4:30","nodeType":"YulIdentifier","src":"6011:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5488:556:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5706:9:30","nodeType":"YulTypedName","src":"5706:9:30","type":""},{"name":"value2","nativeSrc":"5717:6:30","nodeType":"YulTypedName","src":"5717:6:30","type":""},{"name":"value1","nativeSrc":"5725:6:30","nodeType":"YulTypedName","src":"5725:6:30","type":""},{"name":"value0","nativeSrc":"5733:6:30","nodeType":"YulTypedName","src":"5733:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5744:4:30","nodeType":"YulTypedName","src":"5744:4:30","type":""}],"src":"5488:556:30"},{"body":{"nativeSrc":"6186:119:30","nodeType":"YulBlock","src":"6186:119:30","statements":[{"nativeSrc":"6196:26:30","nodeType":"YulAssignment","src":"6196:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6208:9:30","nodeType":"YulIdentifier","src":"6208:9:30"},{"kind":"number","nativeSrc":"6219:2:30","nodeType":"YulLiteral","src":"6219:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6204:3:30","nodeType":"YulIdentifier","src":"6204:3:30"},"nativeSrc":"6204:18:30","nodeType":"YulFunctionCall","src":"6204:18:30"},"variableNames":[{"name":"tail","nativeSrc":"6196:4:30","nodeType":"YulIdentifier","src":"6196:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6238:9:30","nodeType":"YulIdentifier","src":"6238:9:30"},{"name":"value0","nativeSrc":"6249:6:30","nodeType":"YulIdentifier","src":"6249:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6231:6:30","nodeType":"YulIdentifier","src":"6231:6:30"},"nativeSrc":"6231:25:30","nodeType":"YulFunctionCall","src":"6231:25:30"},"nativeSrc":"6231:25:30","nodeType":"YulExpressionStatement","src":"6231:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6276:9:30","nodeType":"YulIdentifier","src":"6276:9:30"},{"kind":"number","nativeSrc":"6287:2:30","nodeType":"YulLiteral","src":"6287:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6272:3:30","nodeType":"YulIdentifier","src":"6272:3:30"},"nativeSrc":"6272:18:30","nodeType":"YulFunctionCall","src":"6272:18:30"},{"name":"value1","nativeSrc":"6292:6:30","nodeType":"YulIdentifier","src":"6292:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6265:6:30","nodeType":"YulIdentifier","src":"6265:6:30"},"nativeSrc":"6265:34:30","nodeType":"YulFunctionCall","src":"6265:34:30"},"nativeSrc":"6265:34:30","nodeType":"YulExpressionStatement","src":"6265:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6049:256:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6147:9:30","nodeType":"YulTypedName","src":"6147:9:30","type":""},{"name":"value1","nativeSrc":"6158:6:30","nodeType":"YulTypedName","src":"6158:6:30","type":""},{"name":"value0","nativeSrc":"6166:6:30","nodeType":"YulTypedName","src":"6166:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6177:4:30","nodeType":"YulTypedName","src":"6177:4:30","type":""}],"src":"6049:256:30"},{"body":{"nativeSrc":"6359:79:30","nodeType":"YulBlock","src":"6359:79:30","statements":[{"nativeSrc":"6369:17:30","nodeType":"YulAssignment","src":"6369:17:30","value":{"arguments":[{"name":"x","nativeSrc":"6381:1:30","nodeType":"YulIdentifier","src":"6381:1:30"},{"name":"y","nativeSrc":"6384:1:30","nodeType":"YulIdentifier","src":"6384:1:30"}],"functionName":{"name":"sub","nativeSrc":"6377:3:30","nodeType":"YulIdentifier","src":"6377:3:30"},"nativeSrc":"6377:9:30","nodeType":"YulFunctionCall","src":"6377:9:30"},"variableNames":[{"name":"diff","nativeSrc":"6369:4:30","nodeType":"YulIdentifier","src":"6369:4:30"}]},{"body":{"nativeSrc":"6410:22:30","nodeType":"YulBlock","src":"6410:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6412:16:30","nodeType":"YulIdentifier","src":"6412:16:30"},"nativeSrc":"6412:18:30","nodeType":"YulFunctionCall","src":"6412:18:30"},"nativeSrc":"6412:18:30","nodeType":"YulExpressionStatement","src":"6412:18:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6401:4:30","nodeType":"YulIdentifier","src":"6401:4:30"},{"name":"x","nativeSrc":"6407:1:30","nodeType":"YulIdentifier","src":"6407:1:30"}],"functionName":{"name":"gt","nativeSrc":"6398:2:30","nodeType":"YulIdentifier","src":"6398:2:30"},"nativeSrc":"6398:11:30","nodeType":"YulFunctionCall","src":"6398:11:30"},"nativeSrc":"6395:37:30","nodeType":"YulIf","src":"6395:37:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"6310:128:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6341:1:30","nodeType":"YulTypedName","src":"6341:1:30","type":""},{"name":"y","nativeSrc":"6344:1:30","nodeType":"YulTypedName","src":"6344:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6350:4:30","nodeType":"YulTypedName","src":"6350:4:30","type":""}],"src":"6310:128:30"},{"body":{"nativeSrc":"6572:198:30","nodeType":"YulBlock","src":"6572:198:30","statements":[{"nativeSrc":"6582:26:30","nodeType":"YulAssignment","src":"6582:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6594:9:30","nodeType":"YulIdentifier","src":"6594:9:30"},{"kind":"number","nativeSrc":"6605:2:30","nodeType":"YulLiteral","src":"6605:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6590:3:30","nodeType":"YulIdentifier","src":"6590:3:30"},"nativeSrc":"6590:18:30","nodeType":"YulFunctionCall","src":"6590:18:30"},"variableNames":[{"name":"tail","nativeSrc":"6582:4:30","nodeType":"YulIdentifier","src":"6582:4:30"}]},{"nativeSrc":"6617:52:30","nodeType":"YulVariableDeclaration","src":"6617:52:30","value":{"kind":"number","nativeSrc":"6627:42:30","nodeType":"YulLiteral","src":"6627:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6621:2:30","nodeType":"YulTypedName","src":"6621:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6685:9:30","nodeType":"YulIdentifier","src":"6685:9:30"},{"arguments":[{"name":"value0","nativeSrc":"6700:6:30","nodeType":"YulIdentifier","src":"6700:6:30"},{"name":"_1","nativeSrc":"6708:2:30","nodeType":"YulIdentifier","src":"6708:2:30"}],"functionName":{"name":"and","nativeSrc":"6696:3:30","nodeType":"YulIdentifier","src":"6696:3:30"},"nativeSrc":"6696:15:30","nodeType":"YulFunctionCall","src":"6696:15:30"}],"functionName":{"name":"mstore","nativeSrc":"6678:6:30","nodeType":"YulIdentifier","src":"6678:6:30"},"nativeSrc":"6678:34:30","nodeType":"YulFunctionCall","src":"6678:34:30"},"nativeSrc":"6678:34:30","nodeType":"YulExpressionStatement","src":"6678:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6732:9:30","nodeType":"YulIdentifier","src":"6732:9:30"},{"kind":"number","nativeSrc":"6743:2:30","nodeType":"YulLiteral","src":"6743:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6728:3:30","nodeType":"YulIdentifier","src":"6728:3:30"},"nativeSrc":"6728:18:30","nodeType":"YulFunctionCall","src":"6728:18:30"},{"arguments":[{"name":"value1","nativeSrc":"6752:6:30","nodeType":"YulIdentifier","src":"6752:6:30"},{"name":"_1","nativeSrc":"6760:2:30","nodeType":"YulIdentifier","src":"6760:2:30"}],"functionName":{"name":"and","nativeSrc":"6748:3:30","nodeType":"YulIdentifier","src":"6748:3:30"},"nativeSrc":"6748:15:30","nodeType":"YulFunctionCall","src":"6748:15:30"}],"functionName":{"name":"mstore","nativeSrc":"6721:6:30","nodeType":"YulIdentifier","src":"6721:6:30"},"nativeSrc":"6721:43:30","nodeType":"YulFunctionCall","src":"6721:43:30"},"nativeSrc":"6721:43:30","nodeType":"YulExpressionStatement","src":"6721:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"6443:327:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6533:9:30","nodeType":"YulTypedName","src":"6533:9:30","type":""},{"name":"value1","nativeSrc":"6544:6:30","nodeType":"YulTypedName","src":"6544:6:30","type":""},{"name":"value0","nativeSrc":"6552:6:30","nodeType":"YulTypedName","src":"6552:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6563:4:30","nodeType":"YulTypedName","src":"6563:4:30","type":""}],"src":"6443:327:30"},{"body":{"nativeSrc":"6853:199:30","nodeType":"YulBlock","src":"6853:199:30","statements":[{"body":{"nativeSrc":"6899:16:30","nodeType":"YulBlock","src":"6899:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6908:1:30","nodeType":"YulLiteral","src":"6908:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6911:1:30","nodeType":"YulLiteral","src":"6911:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6901:6:30","nodeType":"YulIdentifier","src":"6901:6:30"},"nativeSrc":"6901:12:30","nodeType":"YulFunctionCall","src":"6901:12:30"},"nativeSrc":"6901:12:30","nodeType":"YulExpressionStatement","src":"6901:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6874:7:30","nodeType":"YulIdentifier","src":"6874:7:30"},{"name":"headStart","nativeSrc":"6883:9:30","nodeType":"YulIdentifier","src":"6883:9:30"}],"functionName":{"name":"sub","nativeSrc":"6870:3:30","nodeType":"YulIdentifier","src":"6870:3:30"},"nativeSrc":"6870:23:30","nodeType":"YulFunctionCall","src":"6870:23:30"},{"kind":"number","nativeSrc":"6895:2:30","nodeType":"YulLiteral","src":"6895:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6866:3:30","nodeType":"YulIdentifier","src":"6866:3:30"},"nativeSrc":"6866:32:30","nodeType":"YulFunctionCall","src":"6866:32:30"},"nativeSrc":"6863:52:30","nodeType":"YulIf","src":"6863:52:30"},{"nativeSrc":"6924:29:30","nodeType":"YulVariableDeclaration","src":"6924:29:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6943:9:30","nodeType":"YulIdentifier","src":"6943:9:30"}],"functionName":{"name":"mload","nativeSrc":"6937:5:30","nodeType":"YulIdentifier","src":"6937:5:30"},"nativeSrc":"6937:16:30","nodeType":"YulFunctionCall","src":"6937:16:30"},"variables":[{"name":"value","nativeSrc":"6928:5:30","nodeType":"YulTypedName","src":"6928:5:30","type":""}]},{"body":{"nativeSrc":"7006:16:30","nodeType":"YulBlock","src":"7006:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7015:1:30","nodeType":"YulLiteral","src":"7015:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7018:1:30","nodeType":"YulLiteral","src":"7018:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7008:6:30","nodeType":"YulIdentifier","src":"7008:6:30"},"nativeSrc":"7008:12:30","nodeType":"YulFunctionCall","src":"7008:12:30"},"nativeSrc":"7008:12:30","nodeType":"YulExpressionStatement","src":"7008:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6975:5:30","nodeType":"YulIdentifier","src":"6975:5:30"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6996:5:30","nodeType":"YulIdentifier","src":"6996:5:30"}],"functionName":{"name":"iszero","nativeSrc":"6989:6:30","nodeType":"YulIdentifier","src":"6989:6:30"},"nativeSrc":"6989:13:30","nodeType":"YulFunctionCall","src":"6989:13:30"}],"functionName":{"name":"iszero","nativeSrc":"6982:6:30","nodeType":"YulIdentifier","src":"6982:6:30"},"nativeSrc":"6982:21:30","nodeType":"YulFunctionCall","src":"6982:21:30"}],"functionName":{"name":"eq","nativeSrc":"6972:2:30","nodeType":"YulIdentifier","src":"6972:2:30"},"nativeSrc":"6972:32:30","nodeType":"YulFunctionCall","src":"6972:32:30"}],"functionName":{"name":"iszero","nativeSrc":"6965:6:30","nodeType":"YulIdentifier","src":"6965:6:30"},"nativeSrc":"6965:40:30","nodeType":"YulFunctionCall","src":"6965:40:30"},"nativeSrc":"6962:60:30","nodeType":"YulIf","src":"6962:60:30"},{"nativeSrc":"7031:15:30","nodeType":"YulAssignment","src":"7031:15:30","value":{"name":"value","nativeSrc":"7041:5:30","nodeType":"YulIdentifier","src":"7041:5:30"},"variableNames":[{"name":"value0","nativeSrc":"7031:6:30","nodeType":"YulIdentifier","src":"7031:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"6775:277:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6819:9:30","nodeType":"YulTypedName","src":"6819:9:30","type":""},{"name":"dataEnd","nativeSrc":"6830:7:30","nodeType":"YulTypedName","src":"6830:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6842:6:30","nodeType":"YulTypedName","src":"6842:6:30","type":""}],"src":"6775:277:30"},{"body":{"nativeSrc":"7089:152:30","nodeType":"YulBlock","src":"7089:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7106:1:30","nodeType":"YulLiteral","src":"7106:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7109:77:30","nodeType":"YulLiteral","src":"7109:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7099:6:30","nodeType":"YulIdentifier","src":"7099:6:30"},"nativeSrc":"7099:88:30","nodeType":"YulFunctionCall","src":"7099:88:30"},"nativeSrc":"7099:88:30","nodeType":"YulExpressionStatement","src":"7099:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7203:1:30","nodeType":"YulLiteral","src":"7203:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"7206:4:30","nodeType":"YulLiteral","src":"7206:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7196:6:30","nodeType":"YulIdentifier","src":"7196:6:30"},"nativeSrc":"7196:15:30","nodeType":"YulFunctionCall","src":"7196:15:30"},"nativeSrc":"7196:15:30","nodeType":"YulExpressionStatement","src":"7196:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7227:1:30","nodeType":"YulLiteral","src":"7227:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7230:4:30","nodeType":"YulLiteral","src":"7230:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7220:6:30","nodeType":"YulIdentifier","src":"7220:6:30"},"nativeSrc":"7220:15:30","nodeType":"YulFunctionCall","src":"7220:15:30"},"nativeSrc":"7220:15:30","nodeType":"YulExpressionStatement","src":"7220:15:30"}]},"name":"panic_error_0x32","nativeSrc":"7057:184:30","nodeType":"YulFunctionDefinition","src":"7057:184:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":291},{"length":32,"start":415},{"length":32,"start":2965},{"length":32,"start":3101}],"2750":[{"length":32,"start":365},{"length":32,"start":1921}],"2753":[{"length":32,"start":481},{"length":32,"start":1860},{"length":32,"start":2017}],"2756":[{"length":32,"start":542},{"length":32,"start":1642}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063dc45def611610066578063dc45def614610249578063e3a0ce0914610292578063eb02625c146102b5578063f2fde38b146102c857600080fd5b80638da5cb5b146102115780639dfbcde814610219578063ba65912e1461024057600080fd5b80633a5af339116100bd5780633a5af33914610168578063572b6c051461018f57806389a89002146101dc57600080fd5b806301ffc9a7146100e45780630328a8fc1461010c5780632b4c9f1614610121575b600080fd5b6100f76100f2366004610d0e565b6102db565b60405190151581526020015b60405180910390f35b61011f61011a366004610d50565b6102f5565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b6101437f000000000000000000000000000000000000000000000000000000000000000081565b6100f761019d366004610dab565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610103565b610143610432565b6102037f000000000000000000000000000000000000000000000000000000000000000081565b61020360005481565b610277610257366004610dc6565b600160208190526000918252604090912080549181015460029091015483565b60408051938452602084019290925290820152606001610103565b6100f76102a0366004610dc6565b60026020526000908152604090205460ff1681565b61011f6102c3366004610ddf565b61045e565b61011f6102d6366004610dab565b61085a565b60006102ef826102e9610878565b906108a6565b92915050565b61030e610300610980565b61030861098a565b906109b8565b808210158061031d5750428111155b15610369576040517f790c7cef00000000000000000000000000000000000000000000000000000000815260048101839052602481018290524260448201526064015b60405180910390fd5b600084815260016020526040902054156103b2576040517fed10979d00000000000000000000000000000000000000000000000000000000815260048101859052602401610360565b604080516060810182528481526020808201858152828401858152600089815260018085529086902094518555915191840191909155516002909201919091558151848152908101839052849186917f91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da910160405180910390a350505050565b600061045961043f61098a565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60008481526001602052604090208054806104a8576040517f84f229dc00000000000000000000000000000000000000000000000000000000815260048101879052602401610360565b81600101544210806104bd5750816002015442115b156104fd576040517fdbeb4f4d00000000000000000000000000000000000000000000000000000000815260048101879052426024820152604401610360565b6000868460405160200161054092919091825260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602082015260340190565b60405160208183030381529060405280519060200120905061059a8282888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610a279050565b6105ef576040517fa04a37c00000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff85166024820152604401610360565b60008181526002602052604090205460ff1615610657576040517fa8ca238e0000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff85166024820152604401610360565b60008054610666906001610e9e565b90507f00000000000000000000000000000000000000000000000000000000000000008111156106c2576040517f192d175500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181558281526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600190811790915590517f5cfa929700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301527f0000000000000000000000000000000000000000000000000000000000000000602483015260448201929092526080606482015260848101929092527f00000000000000000000000000000000000000000000000000000000000000001690635cfa92979060a401600060405180830381600087803b1580156107c557600080fd5b505af11580156107d9573d6000803e3d6000fd5b5050604080517f000000000000000000000000000000000000000000000000000000000000000081526001602082015273ffffffffffffffffffffffffffffffffffffffff891693508b92507fa68c079189004e3175c636199e3e4d2aae420ce461ed29f670552b3eba9d2a03910160405180910390a35050505050505050565b610875610865610980565b8261086e61098a565b9190610a3d565b50565b6000806102ef60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610eb1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016108f6575060006102ef565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610947575060016102ef565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610459610b52565b6000806102ef60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610eb1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610a23576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610360565b5050565b600082610a348584610c99565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610aaa576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610360565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b4c5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610b625750601836105b15610b6c57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610c8857506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c889190610ec4565b15610c9257919050565b3391505090565b600081815b8451811015610cd457610cca82868381518110610cbd57610cbd610ee6565b6020026020010151610cdc565b9150600101610c9e565b509392505050565b6000818310610cf8576000828152602084905260409020610d07565b60008381526020839052604090205b9392505050565b600060208284031215610d2057600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d0757600080fd5b60008060008060808587031215610d6657600080fd5b5050823594602084013594506040840135936060013592509050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610da657600080fd5b919050565b600060208284031215610dbd57600080fd5b610d0782610d82565b600060208284031215610dd857600080fd5b5035919050565b60008060008060608587031215610df557600080fd5b84359350602085013567ffffffffffffffff80821115610e1457600080fd5b818701915087601f830112610e2857600080fd5b813581811115610e3757600080fd5b8860208260051b8501011115610e4c57600080fd5b602083019550809450505050610e6460408601610d82565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102ef576102ef610e6f565b818103818111156102ef576102ef610e6f565b600060208284031215610ed657600080fd5b81518015158114610d0757600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220eb5612f3617bb28d7e354311efdc74ddf5592ddf0aac5a944c57211ba99feb4c64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x211 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x219 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x1DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x121 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xD0E JUMP JUMPDEST PUSH2 0x2DB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x11F PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xD50 JUMP JUMPDEST PUSH2 0x2F5 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0xDAB JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x143 PUSH2 0x432 JUMP JUMPDEST PUSH2 0x203 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x203 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2C3 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDF JUMP JUMPDEST PUSH2 0x45E JUMP JUMPDEST PUSH2 0x11F PUSH2 0x2D6 CALLDATASIZE PUSH1 0x4 PUSH2 0xDAB JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2EF DUP3 PUSH2 0x2E9 PUSH2 0x878 JUMP JUMPDEST SWAP1 PUSH2 0x8A6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x30E PUSH2 0x300 PUSH2 0x980 JUMP JUMPDEST PUSH2 0x308 PUSH2 0x98A JUMP JUMPDEST SWAP1 PUSH2 0x9B8 JUMP JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x31D JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x369 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 PUSH2 0x43F PUSH2 0x98A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x4A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x4BD JUMPI POP DUP2 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x540 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x59A DUP3 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA27 SWAP1 POP JUMP JUMPDEST PUSH2 0x5EF JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x657 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x360 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x666 SWAP1 PUSH1 0x1 PUSH2 0xE9E JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x6C2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP4 POP DUP12 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x875 PUSH2 0x865 PUSH2 0x980 JUMP JUMPDEST DUP3 PUSH2 0x86E PUSH2 0x98A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA3D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xEB1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x8F6 JUMPI POP PUSH1 0x0 PUSH2 0x2EF JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x947 JUMPI POP PUSH1 0x1 PUSH2 0x2EF JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x459 PUSH2 0xB52 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2EF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xEB1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA34 DUP6 DUP5 PUSH2 0xC99 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xAAA JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x360 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB4C JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xB62 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xB6C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xC88 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC64 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC88 SWAP2 SWAP1 PUSH2 0xEC4 JUMP JUMPDEST ISZERO PUSH2 0xC92 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xCD4 JUMPI PUSH2 0xCCA DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xCBD JUMPI PUSH2 0xCBD PUSH2 0xEE6 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xCDC JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xC9E JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xCF8 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xD07 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xD66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xDA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDBD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD07 DUP3 PUSH2 0xD82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xDF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xE14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xE37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xE4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0xE64 PUSH1 0x40 DUP7 ADD PUSH2 0xD82 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE6F JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2EF JUMPI PUSH2 0x2EF PUSH2 0xE6F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xD07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB JUMP SLT RETURN PUSH2 0x7BB2 DUP14 PUSH31 0x354311EFDC74DDF5592DDF0AAC5A944C57211BA99FEB4C64736F6C63430008 AND STOP CALLER ","sourceMap":"1183:6216:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:30;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;5112:626:27;;;;;;:::i;:::-;;:::i;:::-;;728:115:11;817:19;728:115;;;1135:42:30;1123:55;;;1105:74;;1093:2;1078:18;728:115:11;933:252:30;1591:49:27;;;;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1691:33:27;;;;;;;;1983:25:30;;;1971:2;1956:18;1691:33:27;1837:177:30;710:120:1;;;:::i;1811:36:27:-;;;;;1921:32;;;;;;2023:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2637:25:30;;;2693:2;2678:18;;2671:34;;;;2721:18;;;2714:34;2625:2;2610:18;2023:51:27;2435:319:30;2140:43:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6301:1096;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;5112:626:27:-;5232:70;5289:12;:10;:12::i;:::-;5232:33;:31;:33::i;:::-;:56;;:70::i;:::-;5330:7;5317:9;:20;;:50;;;;5352:15;5341:7;:26;;5317:50;5313:143;;;5390:55;;;;;;;;2637:25:30;;;2678:18;;;2671:34;;;5429:15:27;2721:18:30;;;2714:34;2610:18;;5390:55:27;;;;;;;;5313:143;5514:1;5470:21;;;:12;:21;;;;;:32;:46;5466:113;;5539:29;;;;;;;;1983:25:30;;;1956:18;;5539:29:27;1837:177:30;5466:113:27;5613:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5589:21:27;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5672:59;;4201:25:30;;;4242:18;;;4235:34;;;5613:43:27;;5589:21;;5672:59;;4174:18:30;5672:59:27;;;;;;;5112:626;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;6301:1096:27:-;6397:31;6431:21;;;:12;:21;;;;;6483:22;;;6515:87;;6566:25;;;;;;;;1983::30;;;1956:18;;6566:25:27;1837:177:30;6515:87:27;6633:11;:21;;;6615:15;:39;:80;;;;6676:11;:19;;;6658:15;:37;6615:80;6611:160;;;6718:42;;;;;;;;4201:25:30;;;6744:15:27;4242:18:30;;;4235:34;4174:18;;6718:42:27;4027:248:30;6611:160:27;6781:12;6823:7;6832:9;6806:36;;;;;;;;4690:19:30;;;4747:2;4743:15;4760:66;4739:88;4734:2;4725:12;;4718:110;4853:2;4844:12;;4533:329;6806:36:27;;;;;;;;;;;;;6796:47;;;;;;6781:62;;6858:30;6871:10;6883:4;6858:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6858:12:27;;:30;;-1:-1:-1;;6858:12:27;:30;-1:-1:-1;6858:30:27:i;:::-;6853:76;;6897:32;;;;;;;;5041:25:30;;;5114:42;5102:55;;5082:18;;;5075:83;5014:18;;6897:32:27;4867:297:30;6853:76:27;6944:17;;;;:11;:17;;;;;;;;6940:64;;;6970:34;;;;;;;;5041:25:30;;;5114:42;5102:55;;5082:18;;;5075:83;5014:18;;6970:34:27;4867:297:30;6940:64:27;7015:32;7050:17;;:21;;7070:1;7050:21;:::i;:::-;7015:56;;7112:11;7085:24;:38;7081:96;;;7146:20;;;;;;;;;;;;;;7081:96;7187:17;:44;;;7241:17;;;:11;:17;;;;;;:24;;;;7261:4;7241:24;;;;;;7276:52;;;;;:24;5781:55:30;;;7276:52:27;;;5763:74:30;7312:8:27;5853:18:30;;;5846:34;5896:18;;;5889:34;;;;5959:3;5939:18;;;5932:31;5979:19;;;5972:30;;;;7276:15:27;:24;;;;6019:19:30;;7276:52:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7344:46:27;;;7378:8;4201:25:30;;7388:1:27;4257:2:30;4242:18;;4235:34;7344:46:27;;;;-1:-1:-1;7358:7:27;;-1:-1:-1;7344:46:27;;4174:18:30;7344:46:27;;;;;;;6387:1010;;;;6301:1096;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;4217:175:27:-;4318:7;4344:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1135:42:30;1123:55;;4543:25:6;;;1105:74:30;1078:18;;4543:25:6;933:252:30;4504:64:6;4413:162;;:::o;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1135:42:30;1123:55;;3243:24:6;;;1105:74:30;1078:18;;3243:24:6;933:252:30;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;6696:15:30;;;1396:59:12;;;6678:34:30;1444:10:12;6728:18:30;;;6721:43;1396:19:12;:39;;;;6590:18:30;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1994:290:25:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:25:o;14:332:30:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:30;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:30;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:30;-1:-1:-1;543:385:30:o;1445:196::-;1513:20;;1573:42;1562:54;;1552:65;;1542:93;;1631:1;1628;1621:12;1542:93;1445:196;;;:::o;1646:186::-;1705:6;1758:2;1746:9;1737:7;1733:23;1729:32;1726:52;;;1774:1;1771;1764:12;1726:52;1797:29;1816:9;1797:29;:::i;2250:180::-;2309:6;2362:2;2350:9;2341:7;2337:23;2333:32;2330:52;;;2378:1;2375;2368:12;2330:52;-1:-1:-1;2401:23:30;;2250:180;-1:-1:-1;2250:180:30:o;2759:757::-;2863:6;2871;2879;2887;2940:2;2928:9;2919:7;2915:23;2911:32;2908:52;;;2956:1;2953;2946:12;2908:52;2992:9;2979:23;2969:33;;3053:2;3042:9;3038:18;3025:32;3076:18;3117:2;3109:6;3106:14;3103:34;;;3133:1;3130;3123:12;3103:34;3171:6;3160:9;3156:22;3146:32;;3216:7;3209:4;3205:2;3201:13;3197:27;3187:55;;3238:1;3235;3228:12;3187:55;3278:2;3265:16;3304:2;3296:6;3293:14;3290:34;;;3320:1;3317;3310:12;3290:34;3373:7;3368:2;3358:6;3355:1;3351:14;3347:2;3343:23;3339:32;3336:45;3333:65;;;3394:1;3391;3384:12;3333:65;3425:2;3421;3417:11;3407:21;;3447:6;3437:16;;;;;3472:38;3506:2;3495:9;3491:18;3472:38;:::i;:::-;3462:48;;2759:757;;;;;;;:::o;5169:184::-;5221:77;5218:1;5211:88;5318:4;5315:1;5308:15;5342:4;5339:1;5332:15;5358:125;5423:9;;;5444:10;;;5441:36;;;5457:18;;:::i;6310:128::-;6377:9;;;6398:11;;;6395:37;;;6412:18;;:::i;6775:277::-;6842:6;6895:2;6883:9;6874:7;6870:23;6866:32;6863:52;;;6911:1;6908;6901:12;6863:52;6943:9;6937:16;6996:5;6989:13;6982:21;6975:5;6972:32;6962:60;;7018:1;7015;7008:12;7057:184;7109:77;7106:1;7099:88;7206:4;7203:1;7196:15;7230:4;7227:1;7220:15"},"gasEstimates":{"creation":{"codeDepositCost":"783000","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","TOKEN_ID()":"infinite","claim(bytes32,bytes32[],address)":"infinite","claimStatus(bytes32)":"2483","claimWindows(bytes32)":"6735","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","TOKEN_ID()":"89a89002","claim(bytes32,bytes32[],address)":"eb02625c","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(bytes32,bytes32[],address)\":{\"details\":\"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\",\"mintSupply\":\"The total number of tokens that can be minted in this contract.\",\"rewardContract\":\"The ERC1155Mintable reward contract interface.\",\"tokenId\":\"The token id to be claimed.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC1155 Claim Window Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply()\":[{\"notice\":\"Error thrown when the number of tokens claimed exceeds the mint supply.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidClaimWindow(uint256,uint256,uint256)\":[{\"notice\":\"Error thrown when the claim window is invalid.\"}],\"InvalidProof(bytes32,address)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,uint256,uint256)\":{\"notice\":\"Event emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"TOKEN_ID()\":{\"notice\":\"The token id to be claimed.\"},\"claim(bytes32,bytes32[],address)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"constructor\":{\"notice\":\"Constructor for the ERC1155ClaimWindowMerkleClaim contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol\":\"ERC1155ClaimWindowMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title ERC1155 Claim Window Merkle Claim Contract\\n * @dev This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract ERC1155ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The token id to be claimed.\\n    uint256 public immutable TOKEN_ID;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply();\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the claim window is invalid.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\\n\\n    /**\\n     * @notice Constructor for the ERC1155ClaimWindowMerkleClaim contract.\\n     * @param tokenId The token id to be claimed.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract interface.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        TOKEN_ID = tokenId;\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (startTime >= endTime || endTime <= block.timestamp) {\\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\\n        }\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @dev Throws if the claim window has not been set.\\n     * @dev Throws if the claim window is closed or has not yet opened.\\n     * @dev Throws if the proof provided for the claim is invalid.\\n     * @dev Throws if the payout has already been claimed.\\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        bytes32 merkleRoot = claimWindow.merkleRoot;\\n        if (merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\\n\\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\\n            revert ExceededMintSupply();\\n        }\\n\\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\\n    }\\n}\\n\",\"keccak256\":\"0xf6ed16222d738a93e1f2ac28c3ed0c220af9db08941d2313fa9ab4c3d489be6e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2759,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":2765,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)2746_storage)"},{"astId":2770,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)2746_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)2746_storage"},"t_struct(ClaimWindow)2746_storage":{"encoding":"inplace","label":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow","members":[{"astId":2741,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2743,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":2745,"contract":"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol:ERC1155ClaimWindowMerkleClaim","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address)":[{"notice":"Error thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"ExceededMintSupply()":[{"notice":"Error thrown when the number of tokens claimed exceeds the mint supply."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidClaimWindow(uint256,uint256,uint256)":[{"notice":"Error thrown when the claim window is invalid."}],"InvalidProof(bytes32,address)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,uint256,uint256)":{"notice":"Event emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"TOKEN_ID()":{"notice":"The token id to be claimed."},"claim(bytes32,bytes32[],address)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"constructor":{"notice":"Constructor for the ERC1155ClaimWindowMerkleClaim contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"OrbsBurnPoolMock":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2086":{"entryPoint":null,"id":2086,"parameterSlots":7,"returnSlots":0},"@_3135":{"entryPoint":null,"id":3135,"parameterSlots":7,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_846":{"entryPoint":null,"id":846,"parameterSlots":0,"returnSlots":0},"@layout_531":{"entryPoint":235,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":289,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":407,"id":null,"parameterSlots":2,"returnSlots":7},"checked_sub_t_uint256":{"entryPoint":530,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":382,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1295:30","nodeType":"YulBlock","src":"0:1295:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"77:86:30","nodeType":"YulBlock","src":"77:86:30","statements":[{"body":{"nativeSrc":"141:16:30","nodeType":"YulBlock","src":"141:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:30","nodeType":"YulLiteral","src":"150:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:30","nodeType":"YulLiteral","src":"153:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:30","nodeType":"YulIdentifier","src":"143:6:30"},"nativeSrc":"143:12:30","nodeType":"YulFunctionCall","src":"143:12:30"},"nativeSrc":"143:12:30","nodeType":"YulExpressionStatement","src":"143:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:30","nodeType":"YulIdentifier","src":"100:5:30"},{"arguments":[{"name":"value","nativeSrc":"111:5:30","nodeType":"YulIdentifier","src":"111:5:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:30","nodeType":"YulLiteral","src":"126:3:30","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:30","nodeType":"YulLiteral","src":"131:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:30","nodeType":"YulIdentifier","src":"122:3:30"},"nativeSrc":"122:11:30","nodeType":"YulFunctionCall","src":"122:11:30"},{"kind":"number","nativeSrc":"135:1:30","nodeType":"YulLiteral","src":"135:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:30","nodeType":"YulIdentifier","src":"118:3:30"},"nativeSrc":"118:19:30","nodeType":"YulFunctionCall","src":"118:19:30"}],"functionName":{"name":"and","nativeSrc":"107:3:30","nodeType":"YulIdentifier","src":"107:3:30"},"nativeSrc":"107:31:30","nodeType":"YulFunctionCall","src":"107:31:30"}],"functionName":{"name":"eq","nativeSrc":"97:2:30","nodeType":"YulIdentifier","src":"97:2:30"},"nativeSrc":"97:42:30","nodeType":"YulFunctionCall","src":"97:42:30"}],"functionName":{"name":"iszero","nativeSrc":"90:6:30","nodeType":"YulIdentifier","src":"90:6:30"},"nativeSrc":"90:50:30","nodeType":"YulFunctionCall","src":"90:50:30"},"nativeSrc":"87:70:30","nodeType":"YulIf","src":"87:70:30"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:30","nodeType":"YulTypedName","src":"66:5:30","type":""}],"src":"14:149:30"},{"body":{"nativeSrc":"425:638:30","nodeType":"YulBlock","src":"425:638:30","statements":[{"body":{"nativeSrc":"472:16:30","nodeType":"YulBlock","src":"472:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"481:1:30","nodeType":"YulLiteral","src":"481:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"484:1:30","nodeType":"YulLiteral","src":"484:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"474:6:30","nodeType":"YulIdentifier","src":"474:6:30"},"nativeSrc":"474:12:30","nodeType":"YulFunctionCall","src":"474:12:30"},"nativeSrc":"474:12:30","nodeType":"YulExpressionStatement","src":"474:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"446:7:30","nodeType":"YulIdentifier","src":"446:7:30"},{"name":"headStart","nativeSrc":"455:9:30","nodeType":"YulIdentifier","src":"455:9:30"}],"functionName":{"name":"sub","nativeSrc":"442:3:30","nodeType":"YulIdentifier","src":"442:3:30"},"nativeSrc":"442:23:30","nodeType":"YulFunctionCall","src":"442:23:30"},{"kind":"number","nativeSrc":"467:3:30","nodeType":"YulLiteral","src":"467:3:30","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"438:3:30","nodeType":"YulIdentifier","src":"438:3:30"},"nativeSrc":"438:33:30","nodeType":"YulFunctionCall","src":"438:33:30"},"nativeSrc":"435:53:30","nodeType":"YulIf","src":"435:53:30"},{"nativeSrc":"497:26:30","nodeType":"YulAssignment","src":"497:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"513:9:30","nodeType":"YulIdentifier","src":"513:9:30"}],"functionName":{"name":"mload","nativeSrc":"507:5:30","nodeType":"YulIdentifier","src":"507:5:30"},"nativeSrc":"507:16:30","nodeType":"YulFunctionCall","src":"507:16:30"},"variableNames":[{"name":"value0","nativeSrc":"497:6:30","nodeType":"YulIdentifier","src":"497:6:30"}]},{"nativeSrc":"532:35:30","nodeType":"YulAssignment","src":"532:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"552:9:30","nodeType":"YulIdentifier","src":"552:9:30"},{"kind":"number","nativeSrc":"563:2:30","nodeType":"YulLiteral","src":"563:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"548:3:30","nodeType":"YulIdentifier","src":"548:3:30"},"nativeSrc":"548:18:30","nodeType":"YulFunctionCall","src":"548:18:30"}],"functionName":{"name":"mload","nativeSrc":"542:5:30","nodeType":"YulIdentifier","src":"542:5:30"},"nativeSrc":"542:25:30","nodeType":"YulFunctionCall","src":"542:25:30"},"variableNames":[{"name":"value1","nativeSrc":"532:6:30","nodeType":"YulIdentifier","src":"532:6:30"}]},{"nativeSrc":"576:35:30","nodeType":"YulAssignment","src":"576:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:30","nodeType":"YulIdentifier","src":"596:9:30"},{"kind":"number","nativeSrc":"607:2:30","nodeType":"YulLiteral","src":"607:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"592:3:30","nodeType":"YulIdentifier","src":"592:3:30"},"nativeSrc":"592:18:30","nodeType":"YulFunctionCall","src":"592:18:30"}],"functionName":{"name":"mload","nativeSrc":"586:5:30","nodeType":"YulIdentifier","src":"586:5:30"},"nativeSrc":"586:25:30","nodeType":"YulFunctionCall","src":"586:25:30"},"variableNames":[{"name":"value2","nativeSrc":"576:6:30","nodeType":"YulIdentifier","src":"576:6:30"}]},{"nativeSrc":"620:35:30","nodeType":"YulAssignment","src":"620:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"640:9:30","nodeType":"YulIdentifier","src":"640:9:30"},{"kind":"number","nativeSrc":"651:2:30","nodeType":"YulLiteral","src":"651:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"636:3:30","nodeType":"YulIdentifier","src":"636:3:30"},"nativeSrc":"636:18:30","nodeType":"YulFunctionCall","src":"636:18:30"}],"functionName":{"name":"mload","nativeSrc":"630:5:30","nodeType":"YulIdentifier","src":"630:5:30"},"nativeSrc":"630:25:30","nodeType":"YulFunctionCall","src":"630:25:30"},"variableNames":[{"name":"value3","nativeSrc":"620:6:30","nodeType":"YulIdentifier","src":"620:6:30"}]},{"nativeSrc":"664:39:30","nodeType":"YulVariableDeclaration","src":"664:39:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"687:9:30","nodeType":"YulIdentifier","src":"687:9:30"},{"kind":"number","nativeSrc":"698:3:30","nodeType":"YulLiteral","src":"698:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"683:3:30","nodeType":"YulIdentifier","src":"683:3:30"},"nativeSrc":"683:19:30","nodeType":"YulFunctionCall","src":"683:19:30"}],"functionName":{"name":"mload","nativeSrc":"677:5:30","nodeType":"YulIdentifier","src":"677:5:30"},"nativeSrc":"677:26:30","nodeType":"YulFunctionCall","src":"677:26:30"},"variables":[{"name":"value","nativeSrc":"668:5:30","nodeType":"YulTypedName","src":"668:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"755:5:30","nodeType":"YulIdentifier","src":"755:5:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"712:42:30","nodeType":"YulIdentifier","src":"712:42:30"},"nativeSrc":"712:49:30","nodeType":"YulFunctionCall","src":"712:49:30"},"nativeSrc":"712:49:30","nodeType":"YulExpressionStatement","src":"712:49:30"},{"nativeSrc":"770:15:30","nodeType":"YulAssignment","src":"770:15:30","value":{"name":"value","nativeSrc":"780:5:30","nodeType":"YulIdentifier","src":"780:5:30"},"variableNames":[{"name":"value4","nativeSrc":"770:6:30","nodeType":"YulIdentifier","src":"770:6:30"}]},{"nativeSrc":"794:41:30","nodeType":"YulVariableDeclaration","src":"794:41:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"819:9:30","nodeType":"YulIdentifier","src":"819:9:30"},{"kind":"number","nativeSrc":"830:3:30","nodeType":"YulLiteral","src":"830:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"815:3:30","nodeType":"YulIdentifier","src":"815:3:30"},"nativeSrc":"815:19:30","nodeType":"YulFunctionCall","src":"815:19:30"}],"functionName":{"name":"mload","nativeSrc":"809:5:30","nodeType":"YulIdentifier","src":"809:5:30"},"nativeSrc":"809:26:30","nodeType":"YulFunctionCall","src":"809:26:30"},"variables":[{"name":"value_1","nativeSrc":"798:7:30","nodeType":"YulTypedName","src":"798:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"887:7:30","nodeType":"YulIdentifier","src":"887:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"844:42:30","nodeType":"YulIdentifier","src":"844:42:30"},"nativeSrc":"844:51:30","nodeType":"YulFunctionCall","src":"844:51:30"},"nativeSrc":"844:51:30","nodeType":"YulExpressionStatement","src":"844:51:30"},{"nativeSrc":"904:17:30","nodeType":"YulAssignment","src":"904:17:30","value":{"name":"value_1","nativeSrc":"914:7:30","nodeType":"YulIdentifier","src":"914:7:30"},"variableNames":[{"name":"value5","nativeSrc":"904:6:30","nodeType":"YulIdentifier","src":"904:6:30"}]},{"nativeSrc":"930:41:30","nodeType":"YulVariableDeclaration","src":"930:41:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"955:9:30","nodeType":"YulIdentifier","src":"955:9:30"},{"kind":"number","nativeSrc":"966:3:30","nodeType":"YulLiteral","src":"966:3:30","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"951:3:30","nodeType":"YulIdentifier","src":"951:3:30"},"nativeSrc":"951:19:30","nodeType":"YulFunctionCall","src":"951:19:30"}],"functionName":{"name":"mload","nativeSrc":"945:5:30","nodeType":"YulIdentifier","src":"945:5:30"},"nativeSrc":"945:26:30","nodeType":"YulFunctionCall","src":"945:26:30"},"variables":[{"name":"value_2","nativeSrc":"934:7:30","nodeType":"YulTypedName","src":"934:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1023:7:30","nodeType":"YulIdentifier","src":"1023:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"980:42:30","nodeType":"YulIdentifier","src":"980:42:30"},"nativeSrc":"980:51:30","nodeType":"YulFunctionCall","src":"980:51:30"},"nativeSrc":"980:51:30","nodeType":"YulExpressionStatement","src":"980:51:30"},{"nativeSrc":"1040:17:30","nodeType":"YulAssignment","src":"1040:17:30","value":{"name":"value_2","nativeSrc":"1050:7:30","nodeType":"YulIdentifier","src":"1050:7:30"},"variableNames":[{"name":"value6","nativeSrc":"1040:6:30","nodeType":"YulIdentifier","src":"1040:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:895:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"343:9:30","nodeType":"YulTypedName","src":"343:9:30","type":""},{"name":"dataEnd","nativeSrc":"354:7:30","nodeType":"YulTypedName","src":"354:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"366:6:30","nodeType":"YulTypedName","src":"366:6:30","type":""},{"name":"value1","nativeSrc":"374:6:30","nodeType":"YulTypedName","src":"374:6:30","type":""},{"name":"value2","nativeSrc":"382:6:30","nodeType":"YulTypedName","src":"382:6:30","type":""},{"name":"value3","nativeSrc":"390:6:30","nodeType":"YulTypedName","src":"390:6:30","type":""},{"name":"value4","nativeSrc":"398:6:30","nodeType":"YulTypedName","src":"398:6:30","type":""},{"name":"value5","nativeSrc":"406:6:30","nodeType":"YulTypedName","src":"406:6:30","type":""},{"name":"value6","nativeSrc":"414:6:30","nodeType":"YulTypedName","src":"414:6:30","type":""}],"src":"168:895:30"},{"body":{"nativeSrc":"1117:176:30","nodeType":"YulBlock","src":"1117:176:30","statements":[{"nativeSrc":"1127:17:30","nodeType":"YulAssignment","src":"1127:17:30","value":{"arguments":[{"name":"x","nativeSrc":"1139:1:30","nodeType":"YulIdentifier","src":"1139:1:30"},{"name":"y","nativeSrc":"1142:1:30","nodeType":"YulIdentifier","src":"1142:1:30"}],"functionName":{"name":"sub","nativeSrc":"1135:3:30","nodeType":"YulIdentifier","src":"1135:3:30"},"nativeSrc":"1135:9:30","nodeType":"YulFunctionCall","src":"1135:9:30"},"variableNames":[{"name":"diff","nativeSrc":"1127:4:30","nodeType":"YulIdentifier","src":"1127:4:30"}]},{"body":{"nativeSrc":"1176:111:30","nodeType":"YulBlock","src":"1176:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1197:1:30","nodeType":"YulLiteral","src":"1197:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1204:3:30","nodeType":"YulLiteral","src":"1204:3:30","type":"","value":"224"},{"kind":"number","nativeSrc":"1209:10:30","nodeType":"YulLiteral","src":"1209:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1200:3:30","nodeType":"YulIdentifier","src":"1200:3:30"},"nativeSrc":"1200:20:30","nodeType":"YulFunctionCall","src":"1200:20:30"}],"functionName":{"name":"mstore","nativeSrc":"1190:6:30","nodeType":"YulIdentifier","src":"1190:6:30"},"nativeSrc":"1190:31:30","nodeType":"YulFunctionCall","src":"1190:31:30"},"nativeSrc":"1190:31:30","nodeType":"YulExpressionStatement","src":"1190:31:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1241:1:30","nodeType":"YulLiteral","src":"1241:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"1244:4:30","nodeType":"YulLiteral","src":"1244:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1234:6:30","nodeType":"YulIdentifier","src":"1234:6:30"},"nativeSrc":"1234:15:30","nodeType":"YulFunctionCall","src":"1234:15:30"},"nativeSrc":"1234:15:30","nodeType":"YulExpressionStatement","src":"1234:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1269:1:30","nodeType":"YulLiteral","src":"1269:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1272:4:30","nodeType":"YulLiteral","src":"1272:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1262:6:30","nodeType":"YulIdentifier","src":"1262:6:30"},"nativeSrc":"1262:15:30","nodeType":"YulFunctionCall","src":"1262:15:30"},"nativeSrc":"1262:15:30","nodeType":"YulExpressionStatement","src":"1262:15:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1159:4:30","nodeType":"YulIdentifier","src":"1159:4:30"},{"name":"x","nativeSrc":"1165:1:30","nodeType":"YulIdentifier","src":"1165:1:30"}],"functionName":{"name":"gt","nativeSrc":"1156:2:30","nodeType":"YulIdentifier","src":"1156:2:30"},"nativeSrc":"1156:11:30","nodeType":"YulFunctionCall","src":"1156:11:30"},"nativeSrc":"1153:134:30","nodeType":"YulIf","src":"1153:134:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"1068:225:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1099:1:30","nodeType":"YulTypedName","src":"1099:1:30","type":""},{"name":"y","nativeSrc":"1102:1:30","nodeType":"YulTypedName","src":"1102:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1108:4:30","nodeType":"YulTypedName","src":"1108:4:30","type":""}],"src":"1068:225:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$873t_contract$_IERC1155Burnable_$873t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        validator_revert_contract_IERC1155Burnable(value)\n        value4 := value\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value5 := value_1\n        let value_2 := mload(add(headStart, 192))\n        validator_revert_contract_IERC1155Burnable(value_2)\n        value6 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001e5138038062001e51833981016040819052620000359162000197565b6001600160a01b0381166080528686868686868662000069630271189760e51b600162000061620000eb565b919062000121565b60e08790526000869003620000915760405163b870efbd60e01b815260040160405180910390fd5b6101008690526000859003620000ba57604051637e5e559b60e11b815260040160405180910390fd5b5061012093909352610140919091526001600160a01b0390811660a0521660c0525062000234975050505050505050565b6000806200011b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000212565b92915050565b600160e01b6001600160e01b031983160162000150576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146200019457600080fd5b50565b600080600080600080600060e0888a031215620001b357600080fd5b875196506020880151955060408801519450606088015193506080880151620001dc816200017e565b60a0890151909350620001ef816200017e565b60c089015190925062000202816200017e565b8091505092959891949750929550565b818103818111156200011b57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610100516101205161014051611b60620002f16000396000818161032f01528181610a0d0152610f9e0152600081816101f60152818161059a0152610d9f01526000818161044601526104bc0152600081816102dd01526104e001526000818161041f0152610cab0152600081816102450152818161052e01526108b301526000818161028e015281816103690152818161121d0152818161125b015281816113d6015261145e0152611b606000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806351e75e8b116100ee578063bc197c8111610097578063cd421fbf11610071578063cd421fbf14610441578063d1a91ff214610468578063f23a6e6114610470578063f95d10161461048357600080fd5b8063bc197c81146103ce578063c131754e14610412578063cd18a34f1461041a57600080fd5b8063aa918fd5116100c8578063aa918fd5146102d0578063ab504e73146103a6578063bab2f552146103c657600080fd5b806351e75e8b1461032a57806355f5b0a814610351578063572b6c051461035957600080fd5b806328a979cf1161015b5780633838a201116101355780633838a201146102c8578063424ab4f7146102d0578063491bde66146102d85780634dac1c2b146102ff57600080fd5b806328a979cf146102405780632b4c9f161461028c57806331e66e1e146102b257600080fd5b80630455645a1161018c5780630455645a1461021857806312828b7f146102205780631de0e40b146101db57600080fd5b806301ffc9a7146101b35780630277640e146101db578063043063bc146101f1575b600080fd5b6101c66101c136600461153d565b61048b565b60405190151581526020015b60405180910390f35b6101e3600181565b6040519081526020016101d2565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600581565b6101e361022e3660046115a8565b60026020526000908152604090205481565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b7f0000000000000000000000000000000000000000000000000000000000000000610267565b6102ba6104a5565b6040516101d29291906115c3565b6101e3601981565b6101e3600381565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e361030d366004611610565b600160209081526000928352604080842090915290825290205481565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600281565b6101c66103673660046115a8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101e36103b436600461163c565b60006020819052908152604090205481565b6101e36104b8565b6103e16103dc3660046116e3565b610514565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6101e3601081565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b610267610c87565b6103e161047e36600461179e565b610c91565b6101e3600981565b600061049f826104996110b3565b906110e1565b92915050565b3660006104b06111bb565b915091509091565b60007f00000000000000000000000000000000000000000000000000000000000000006105057f000000000000000000000000000000000000000000000000000000000000000042611845565b61050f9190611858565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461058c576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105966104b8565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105f5576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106399030908c908c908c908c906004016118de565b600060405180830381600087803b15801561065357600080fd5b505af1158015610667573d6000803e3d6000fd5b505050506000805b88811015610945578787828181106106895761068961192d565b9050602002013560000361072357338a8a838181106106aa576106aa61192d565b905060200201358989848181106106c3576106c361192d565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9095166004860152602485019390935250602090910201356044820152606401610583565b8989828181106107355761073561192d565b905060200201356001036107795760018888838181106107575761075761192d565b90506020020135610768919061195c565b6107729083611973565b915061093d565b89898281811061078b5761078b61192d565b905060200201356002036107ad5760038888838181106107575761075761192d565b8989828181106107bf576107bf61192d565b905060200201356003036107e15760038888838181106107575761075761192d565b8989828181106107f3576107f361192d565b905060200201356004036108155760058888838181106107575761075761192d565b8989828181106108275761082761192d565b905060200201356005036108495760098888838181106107575761075761192d565b89898281811061085b5761085b61192d565b9050602002013560060361087d5760198888838181106107575761075761192d565b89898281811061088f5761088f61192d565b905060200201356007036108b15760108888838181106107575761075761192d565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108e4576108e461192d565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610583565b60010161066f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610b1957600080610983888a018a6119b5565b91509150608083901c600003610af9576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610a32837f0000000000000000000000000000000000000000000000000000000000000000836111c6565b610a87576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101839052604401610583565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b979097179687905581518781529081018790528692917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a250505b612710610b06828761195c565b610b109190611858565b94505050610b40565b608081901c8015610b3e57612710610b31828661195c565b610b3b9190611858565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b6657610b63818561195c565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610ba1908690611973565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610bf1908490611973565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c4b9796959493929190611a97565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b600061050f6111dc565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d04576040517f73306803000000000000000000000000000000000000000000000000000000008152336004820152602401610583565b60018514610d47576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610583565b83600114610d91576040517fe1f366e90000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606401610583565b6000610d9b6104b8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610dfa576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e82576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602401610583565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050600282179050841561102257608082901c60000361102257600080610f1f878901896119b5565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610fc3837f0000000000000000000000000000000000000000000000000000000000000000836111c6565b611018576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015260248101839052604401610583565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061049f60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611845565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111315750600061049f565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111825750600161049f565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b3660006104b06111e6565b6000826111d38584611350565b14949350505050565b600061050f611393565b366000333214806111f75750601836105b156112055750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061133a575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133a9190611ade565b15611347576104b06114da565b50600091369150565b600081815b845181101561138b57611381828683815181106113745761137461192d565b602002602001015161150b565b9150600101611355565b509392505050565b6000333214806113a35750601836105b156113ad57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114c957506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190611ade565b156114d357919050565b3391505090565b3660006104b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611b00565b6000818310611527576000828152602084905260409020611536565b60008381526020839052604090205b9392505050565b60006020828403121561154f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461153657600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146115a357600080fd5b919050565b6000602082840312156115ba57600080fd5b6115368261157f565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000806040838503121561162357600080fd5b823591506116336020840161157f565b90509250929050565b60006020828403121561164e57600080fd5b5035919050565b60008083601f84011261166757600080fd5b50813567ffffffffffffffff81111561167f57600080fd5b6020830191508360208260051b850101111561169a57600080fd5b9250929050565b60008083601f8401126116b357600080fd5b50813567ffffffffffffffff8111156116cb57600080fd5b60208301915083602082850101111561169a57600080fd5b60008060008060008060008060a0898b0312156116ff57600080fd5b6117088961157f565b975061171660208a0161157f565b9650604089013567ffffffffffffffff8082111561173357600080fd5b61173f8c838d01611655565b909850965060608b013591508082111561175857600080fd5b6117648c838d01611655565b909650945060808b013591508082111561177d57600080fd5b5061178a8b828c016116a1565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156117b757600080fd5b6117c08761157f565b95506117ce6020880161157f565b94506040870135935060608701359250608087013567ffffffffffffffff8111156117f857600080fd5b61180489828a016116a1565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561049f5761049f611816565b60008261188e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118c557600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260606020820152600061190e606083018688611893565b8281036040840152611921818587611893565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761049f5761049f611816565b8082018082111561049f5761049f611816565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156119c857600080fd5b823567ffffffffffffffff808211156119e057600080fd5b818501915085601f8301126119f457600080fd5b8135602082821115611a0857611a08611986565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715611a4b57611a4b611986565b604052928352818301935084810182019289841115611a6957600080fd5b948201945b83861015611a8757853585529482019493820193611a6e565b9997909101359750505050505050565b60a081526000611aab60a08301898b611893565b8281036020840152611abe81888a611893565b604084019690965250506060810192909252608090910152949350505050565b600060208284031215611af057600080fd5b8151801515811461153657600080fd5b60008085851115611b1057600080fd5b83861115611b1d57600080fd5b505082019391909203915056fea264697066735822122033eb73fa51f325ac6971e4638898f8facb1a9ee88fc61c3771f3ba7f718c53af64736f6c63430008160033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1E51 CODESIZE SUB DUP1 PUSH3 0x1E51 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH3 0x69 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x61 PUSH3 0xEB JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x121 JUMP JUMPDEST PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH1 0x0 DUP7 SWAP1 SUB PUSH3 0x91 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0xBA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x120 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x140 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE AND PUSH1 0xC0 MSTORE POP PUSH3 0x234 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x212 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x150 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0x1DC DUP2 PUSH3 0x17E JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x1EF DUP2 PUSH3 0x17E JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x202 DUP2 PUSH3 0x17E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x11B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1B60 PUSH3 0x2F1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x32F ADD MSTORE DUP2 DUP2 PUSH2 0xA0D ADD MSTORE PUSH2 0xF9E ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F6 ADD MSTORE DUP2 DUP2 PUSH2 0x59A ADD MSTORE PUSH2 0xD9F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x446 ADD MSTORE PUSH2 0x4BC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2DD ADD MSTORE PUSH2 0x4E0 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x41F ADD MSTORE PUSH2 0xCAB ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x245 ADD MSTORE DUP2 DUP2 PUSH2 0x52E ADD MSTORE PUSH2 0x8B3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x28E ADD MSTORE DUP2 DUP2 PUSH2 0x369 ADD MSTORE DUP2 DUP2 PUSH2 0x121D ADD MSTORE DUP2 DUP2 PUSH2 0x125B ADD MSTORE DUP2 DUP2 PUSH2 0x13D6 ADD MSTORE PUSH2 0x145E ADD MSTORE PUSH2 0x1B60 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x3838A201 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x267 JUMP JUMPDEST PUSH2 0x2BA PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP3 SWAP2 SWAP1 PUSH2 0x15C3 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x1610 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x163C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x16E3 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x179E JUMP JUMPDEST PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F DUP3 PUSH2 0x499 PUSH2 0x10B3 JUMP JUMPDEST SWAP1 PUSH2 0x10E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11BB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x505 PUSH32 0x0 TIMESTAMP PUSH2 0x1845 JUMP JUMPDEST PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x58C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x596 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x639 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x945 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x689 JUMPI PUSH2 0x689 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x723 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6AA JUMPI PUSH2 0x6AA PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x735 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x779 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x195C JUMP JUMPDEST PUSH2 0x772 SWAP1 DUP4 PUSH2 0x1973 JUMP JUMPDEST SWAP2 POP PUSH2 0x93D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x7AD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x7E1 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7F3 JUMPI PUSH2 0x7F3 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x815 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x827 JUMPI PUSH2 0x827 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x849 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x85B JUMPI PUSH2 0x85B PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x87D JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x88F JUMPI PUSH2 0x88F PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x8B1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x8E4 JUMPI PUSH2 0x8E4 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xB19 JUMPI PUSH1 0x0 DUP1 PUSH2 0x983 DUP9 DUP11 ADD DUP11 PUSH2 0x19B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xA32 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL SWAP8 SWAP1 SWAP8 OR SWAP7 DUP8 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP7 SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xB06 DUP3 DUP8 PUSH2 0x195C JUMP JUMPDEST PUSH2 0xB10 SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xB3E JUMPI PUSH2 0x2710 PUSH2 0xB31 DUP3 DUP7 PUSH2 0x195C JUMP JUMPDEST PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB66 JUMPI PUSH2 0xB63 DUP2 DUP6 PUSH2 0x195C JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xBA1 SWAP1 DUP7 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBF1 SWAP1 DUP5 SWAP1 PUSH2 0x1973 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC4B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xD47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD9B PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEF5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF1F DUP8 DUP10 ADD DUP10 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xFC3 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0x1018 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x49F PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1845 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1131 JUMPI POP PUSH1 0x0 PUSH2 0x49F JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1182 JUMPI POP PUSH1 0x1 PUSH2 0x49F JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11E6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x11D3 DUP6 DUP5 PUSH2 0x1350 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x1393 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11F7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1205 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x133A JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1316 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133A SWAP2 SWAP1 PUSH2 0x1ADE JUMP JUMPDEST ISZERO PUSH2 0x1347 JUMPI PUSH2 0x4B0 PUSH2 0x14DA JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x138B JUMPI PUSH2 0x1381 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1374 JUMPI PUSH2 0x1374 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x150B JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1355 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13A3 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13AD JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14C9 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C9 SWAP2 SWAP1 PUSH2 0x1ADE JUMP JUMPDEST ISZERO PUSH2 0x14D3 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1527 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1536 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1536 DUP3 PUSH2 0x157F JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1633 PUSH1 0x20 DUP5 ADD PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x167F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x169A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x169A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x16FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1708 DUP10 PUSH2 0x157F JUMP JUMPDEST SWAP8 POP PUSH2 0x1716 PUSH1 0x20 DUP11 ADD PUSH2 0x157F JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173F DUP13 DUP4 DUP14 ADD PUSH2 0x1655 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1764 DUP13 DUP4 DUP14 ADD PUSH2 0x1655 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x177D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x178A DUP12 DUP3 DUP13 ADD PUSH2 0x16A1 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17C0 DUP8 PUSH2 0x157F JUMP JUMPDEST SWAP6 POP PUSH2 0x17CE PUSH1 0x20 DUP9 ADD PUSH2 0x157F JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1804 DUP10 DUP3 DUP11 ADD PUSH2 0x16A1 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x188E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x18C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x190E PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1893 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1921 DUP2 DUP6 DUP8 PUSH2 0x1893 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1A08 JUMPI PUSH2 0x1A08 PUSH2 0x1986 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x1A4B JUMPI PUSH2 0x1A4B PUSH2 0x1986 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1A69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1A87 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1AAB PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1893 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1ABE DUP2 DUP9 DUP11 PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER 0xEB PUSH20 0xFA51F325AC6971E4638898F8FACB1A9EE88FC61C CALLDATACOPY PUSH18 0xF3BA7F718C53AF64736F6C63430008160033 ","sourceMap":"349:717:28:-:0;;;397:360;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;662:11:28;675:13;690:8;700:10;712;724;736:17;780:103:18;-1:-1:-1;;;878:4:18;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;5212:26:26::1;::::0;;;5270:1:::1;5253:18:::0;;;5249:75:::1;;5294:19;;-1:-1:-1::0;;;5294:19:26::1;;;;;;;;;;;5249:75;5333:30;::::0;;;5390:1:::1;5378:13:::0;;;5374:65:::1;;5414:14;;-1:-1:-1::0;;;5414:14:26::1;;;;;;;;;;;5374:65;-1:-1:-1::0;5448:20:26::1;::::0;;;;5478:24:::1;::::0;;;;-1:-1:-1;;;;;5512:25:26;;::::1;;::::0;5547:24:::1;;::::0;-1:-1:-1;349:717:28;;-1:-1:-1;;;;;;;;349:717:28;1705:174:10;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:10:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:30:-;-1:-1:-1;;;;;107:31:30;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:895::-;366:6;374;382;390;398;406;414;467:3;455:9;446:7;442:23;438:33;435:53;;;484:1;481;474:12;435:53;513:9;507:16;497:26;;563:2;552:9;548:18;542:25;532:35;;607:2;596:9;592:18;586:25;576:35;;651:2;640:9;636:18;630:25;620:35;;698:3;687:9;683:19;677:26;712:49;755:5;712:49;:::i;:::-;830:3;815:19;;809:26;780:5;;-1:-1:-1;844:51:30;809:26;844:51;:::i;:::-;966:3;951:19;;945:26;914:7;;-1:-1:-1;980:51:30;945:26;980:51;:::i;:::-;1050:7;1040:17;;;168:895;;;;;;;;;;:::o;1068:225::-;1135:9;;;1156:11;;;1153:134;;;1209:10;1204:3;1200:20;1197:1;1190:31;1244:4;1241:1;1234:15;1272:4;1269:1;1262:15;1068:225;349:717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_1890":{"entryPoint":null,"id":1890,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_1893":{"entryPoint":null,"id":1893,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_1896":{"entryPoint":null,"id":1896,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_1899":{"entryPoint":null,"id":1899,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_1902":{"entryPoint":null,"id":1902,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_1905":{"entryPoint":null,"id":1905,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_1908":{"entryPoint":null,"id":1908,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_1926":{"entryPoint":null,"id":1926,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1923":{"entryPoint":null,"id":1923,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1929":{"entryPoint":null,"id":1929,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_1932":{"entryPoint":null,"id":1932,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_1920":{"entryPoint":null,"id":1920,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_1886":{"entryPoint":null,"id":1886,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_1916":{"entryPoint":null,"id":1916,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_1912":{"entryPoint":null,"id":1912,"parameterSlots":0,"returnSlots":0},"@__msgData_3154":{"entryPoint":1189,"id":3154,"parameterSlots":0,"returnSlots":2},"@__msgSender_3144":{"entryPoint":3207,"id":3144,"parameterSlots":0,"returnSlots":1},"@_efficientHash_1854":{"entryPoint":null,"id":1854,"parameterSlots":2,"returnSlots":1},"@_hashPair_1843":{"entryPoint":5387,"id":1843,"parameterSlots":2,"returnSlots":1},"@_msgData_2112":{"entryPoint":4539,"id":2112,"parameterSlots":0,"returnSlots":2},"@_msgData_700":{"entryPoint":4582,"id":700,"parameterSlots":0,"returnSlots":2},"@_msgSender_2099":{"entryPoint":4572,"id":2099,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":5011,"id":652,"parameterSlots":0,"returnSlots":1},"@currentCycle_2127":{"entryPoint":1208,"id":2127,"parameterSlots":0,"returnSlots":1},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_531":{"entryPoint":4275,"id":531,"parameterSlots":0,"returnSlots":1},"@msgData_755":{"entryPoint":5338,"id":755,"parameterSlots":0,"returnSlots":2},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2706":{"entryPoint":1300,"id":2706,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2313":{"entryPoint":3217,"id":2313,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_1949":{"entryPoint":null,"id":1949,"parameterSlots":0,"returnSlots":0},"@processProof_1438":{"entryPoint":4944,"id":1438,"parameterSlots":2,"returnSlots":1},"@supportsInterface_413":{"entryPoint":1163,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":4321,"id":519,"parameterSlots":2,"returnSlots":1},"@totalAshPerCycle_1937":{"entryPoint":null,"id":1937,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_1944":{"entryPoint":null,"id":1944,"parameterSlots":0,"returnSlots":0},"@verify_1377":{"entryPoint":4550,"id":1377,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":5503,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":5717,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":5793,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":5544,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5859,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":6046,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":6581,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6878,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":5437,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5692,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":5648,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":6291,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6366,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":6807,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5571,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":6912,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":6515,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":6232,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6492,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6213,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":6166,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6445,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6534,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12317:30","nodeType":"YulBlock","src":"0:12317:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"83:263:30","nodeType":"YulBlock","src":"83:263:30","statements":[{"body":{"nativeSrc":"129:16:30","nodeType":"YulBlock","src":"129:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:30","nodeType":"YulLiteral","src":"138:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:30","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:30","nodeType":"YulIdentifier","src":"131:6:30"},"nativeSrc":"131:12:30","nodeType":"YulFunctionCall","src":"131:12:30"},"nativeSrc":"131:12:30","nodeType":"YulExpressionStatement","src":"131:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:30","nodeType":"YulIdentifier","src":"104:7:30"},{"name":"headStart","nativeSrc":"113:9:30","nodeType":"YulIdentifier","src":"113:9:30"}],"functionName":{"name":"sub","nativeSrc":"100:3:30","nodeType":"YulIdentifier","src":"100:3:30"},"nativeSrc":"100:23:30","nodeType":"YulFunctionCall","src":"100:23:30"},{"kind":"number","nativeSrc":"125:2:30","nodeType":"YulLiteral","src":"125:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:30","nodeType":"YulIdentifier","src":"96:3:30"},"nativeSrc":"96:32:30","nodeType":"YulFunctionCall","src":"96:32:30"},"nativeSrc":"93:52:30","nodeType":"YulIf","src":"93:52:30"},{"nativeSrc":"154:36:30","nodeType":"YulVariableDeclaration","src":"154:36:30","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:30","nodeType":"YulIdentifier","src":"180:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:30","nodeType":"YulIdentifier","src":"167:12:30"},"nativeSrc":"167:23:30","nodeType":"YulFunctionCall","src":"167:23:30"},"variables":[{"name":"value","nativeSrc":"158:5:30","nodeType":"YulTypedName","src":"158:5:30","type":""}]},{"body":{"nativeSrc":"300:16:30","nodeType":"YulBlock","src":"300:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:30","nodeType":"YulLiteral","src":"309:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:30","nodeType":"YulLiteral","src":"312:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:30","nodeType":"YulIdentifier","src":"302:6:30"},"nativeSrc":"302:12:30","nodeType":"YulFunctionCall","src":"302:12:30"},"nativeSrc":"302:12:30","nodeType":"YulExpressionStatement","src":"302:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:30","nodeType":"YulIdentifier","src":"212:5:30"},{"arguments":[{"name":"value","nativeSrc":"223:5:30","nodeType":"YulIdentifier","src":"223:5:30"},{"kind":"number","nativeSrc":"230:66:30","nodeType":"YulLiteral","src":"230:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:30","nodeType":"YulIdentifier","src":"219:3:30"},"nativeSrc":"219:78:30","nodeType":"YulFunctionCall","src":"219:78:30"}],"functionName":{"name":"eq","nativeSrc":"209:2:30","nodeType":"YulIdentifier","src":"209:2:30"},"nativeSrc":"209:89:30","nodeType":"YulFunctionCall","src":"209:89:30"}],"functionName":{"name":"iszero","nativeSrc":"202:6:30","nodeType":"YulIdentifier","src":"202:6:30"},"nativeSrc":"202:97:30","nodeType":"YulFunctionCall","src":"202:97:30"},"nativeSrc":"199:117:30","nodeType":"YulIf","src":"199:117:30"},{"nativeSrc":"325:15:30","nodeType":"YulAssignment","src":"325:15:30","value":{"name":"value","nativeSrc":"335:5:30","nodeType":"YulIdentifier","src":"335:5:30"},"variableNames":[{"name":"value0","nativeSrc":"325:6:30","nodeType":"YulIdentifier","src":"325:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:30","nodeType":"YulTypedName","src":"49:9:30","type":""},{"name":"dataEnd","nativeSrc":"60:7:30","nodeType":"YulTypedName","src":"60:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:30","nodeType":"YulTypedName","src":"72:6:30","type":""}],"src":"14:332:30"},{"body":{"nativeSrc":"446:92:30","nodeType":"YulBlock","src":"446:92:30","statements":[{"nativeSrc":"456:26:30","nodeType":"YulAssignment","src":"456:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:30","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nativeSrc":"479:2:30","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:30","nodeType":"YulIdentifier","src":"464:3:30"},"nativeSrc":"464:18:30","nodeType":"YulFunctionCall","src":"464:18:30"},"variableNames":[{"name":"tail","nativeSrc":"456:4:30","nodeType":"YulIdentifier","src":"456:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:30","nodeType":"YulIdentifier","src":"498:9:30"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:30","nodeType":"YulIdentifier","src":"523:6:30"}],"functionName":{"name":"iszero","nativeSrc":"516:6:30","nodeType":"YulIdentifier","src":"516:6:30"},"nativeSrc":"516:14:30","nodeType":"YulFunctionCall","src":"516:14:30"}],"functionName":{"name":"iszero","nativeSrc":"509:6:30","nodeType":"YulIdentifier","src":"509:6:30"},"nativeSrc":"509:22:30","nodeType":"YulFunctionCall","src":"509:22:30"}],"functionName":{"name":"mstore","nativeSrc":"491:6:30","nodeType":"YulIdentifier","src":"491:6:30"},"nativeSrc":"491:41:30","nodeType":"YulFunctionCall","src":"491:41:30"},"nativeSrc":"491:41:30","nodeType":"YulExpressionStatement","src":"491:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:30","nodeType":"YulTypedName","src":"415:9:30","type":""},{"name":"value0","nativeSrc":"426:6:30","nodeType":"YulTypedName","src":"426:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:30","nodeType":"YulTypedName","src":"437:4:30","type":""}],"src":"351:187:30"},{"body":{"nativeSrc":"644:76:30","nodeType":"YulBlock","src":"644:76:30","statements":[{"nativeSrc":"654:26:30","nodeType":"YulAssignment","src":"654:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:30","nodeType":"YulIdentifier","src":"666:9:30"},{"kind":"number","nativeSrc":"677:2:30","nodeType":"YulLiteral","src":"677:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:30","nodeType":"YulIdentifier","src":"662:3:30"},"nativeSrc":"662:18:30","nodeType":"YulFunctionCall","src":"662:18:30"},"variableNames":[{"name":"tail","nativeSrc":"654:4:30","nodeType":"YulIdentifier","src":"654:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:30","nodeType":"YulIdentifier","src":"696:9:30"},{"name":"value0","nativeSrc":"707:6:30","nodeType":"YulIdentifier","src":"707:6:30"}],"functionName":{"name":"mstore","nativeSrc":"689:6:30","nodeType":"YulIdentifier","src":"689:6:30"},"nativeSrc":"689:25:30","nodeType":"YulFunctionCall","src":"689:25:30"},"nativeSrc":"689:25:30","nodeType":"YulExpressionStatement","src":"689:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:30","nodeType":"YulTypedName","src":"613:9:30","type":""},{"name":"value0","nativeSrc":"624:6:30","nodeType":"YulTypedName","src":"624:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:30","nodeType":"YulTypedName","src":"635:4:30","type":""}],"src":"543:177:30"},{"body":{"nativeSrc":"774:147:30","nodeType":"YulBlock","src":"774:147:30","statements":[{"nativeSrc":"784:29:30","nodeType":"YulAssignment","src":"784:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:30","nodeType":"YulIdentifier","src":"806:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:30","nodeType":"YulIdentifier","src":"793:12:30"},"nativeSrc":"793:20:30","nodeType":"YulFunctionCall","src":"793:20:30"},"variableNames":[{"name":"value","nativeSrc":"784:5:30","nodeType":"YulIdentifier","src":"784:5:30"}]},{"body":{"nativeSrc":"899:16:30","nodeType":"YulBlock","src":"899:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:30","nodeType":"YulLiteral","src":"908:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:30","nodeType":"YulLiteral","src":"911:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:30","nodeType":"YulIdentifier","src":"901:6:30"},"nativeSrc":"901:12:30","nodeType":"YulFunctionCall","src":"901:12:30"},"nativeSrc":"901:12:30","nodeType":"YulExpressionStatement","src":"901:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:30","nodeType":"YulIdentifier","src":"835:5:30"},{"arguments":[{"name":"value","nativeSrc":"846:5:30","nodeType":"YulIdentifier","src":"846:5:30"},{"kind":"number","nativeSrc":"853:42:30","nodeType":"YulLiteral","src":"853:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:30","nodeType":"YulIdentifier","src":"842:3:30"},"nativeSrc":"842:54:30","nodeType":"YulFunctionCall","src":"842:54:30"}],"functionName":{"name":"eq","nativeSrc":"832:2:30","nodeType":"YulIdentifier","src":"832:2:30"},"nativeSrc":"832:65:30","nodeType":"YulFunctionCall","src":"832:65:30"}],"functionName":{"name":"iszero","nativeSrc":"825:6:30","nodeType":"YulIdentifier","src":"825:6:30"},"nativeSrc":"825:73:30","nodeType":"YulFunctionCall","src":"825:73:30"},"nativeSrc":"822:93:30","nodeType":"YulIf","src":"822:93:30"}]},"name":"abi_decode_address","nativeSrc":"725:196:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:30","nodeType":"YulTypedName","src":"753:6:30","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:30","nodeType":"YulTypedName","src":"764:5:30","type":""}],"src":"725:196:30"},{"body":{"nativeSrc":"996:116:30","nodeType":"YulBlock","src":"996:116:30","statements":[{"body":{"nativeSrc":"1042:16:30","nodeType":"YulBlock","src":"1042:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:30","nodeType":"YulLiteral","src":"1051:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:30","nodeType":"YulLiteral","src":"1054:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:30","nodeType":"YulIdentifier","src":"1044:6:30"},"nativeSrc":"1044:12:30","nodeType":"YulFunctionCall","src":"1044:12:30"},"nativeSrc":"1044:12:30","nodeType":"YulExpressionStatement","src":"1044:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:30","nodeType":"YulIdentifier","src":"1017:7:30"},{"name":"headStart","nativeSrc":"1026:9:30","nodeType":"YulIdentifier","src":"1026:9:30"}],"functionName":{"name":"sub","nativeSrc":"1013:3:30","nodeType":"YulIdentifier","src":"1013:3:30"},"nativeSrc":"1013:23:30","nodeType":"YulFunctionCall","src":"1013:23:30"},{"kind":"number","nativeSrc":"1038:2:30","nodeType":"YulLiteral","src":"1038:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:30","nodeType":"YulIdentifier","src":"1009:3:30"},"nativeSrc":"1009:32:30","nodeType":"YulFunctionCall","src":"1009:32:30"},"nativeSrc":"1006:52:30","nodeType":"YulIf","src":"1006:52:30"},{"nativeSrc":"1067:39:30","nodeType":"YulAssignment","src":"1067:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:30","nodeType":"YulIdentifier","src":"1096:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:30","nodeType":"YulIdentifier","src":"1077:18:30"},"nativeSrc":"1077:29:30","nodeType":"YulFunctionCall","src":"1077:29:30"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:30","nodeType":"YulIdentifier","src":"1067:6:30"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:30","nodeType":"YulTypedName","src":"962:9:30","type":""},{"name":"dataEnd","nativeSrc":"973:7:30","nodeType":"YulTypedName","src":"973:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:30","nodeType":"YulTypedName","src":"985:6:30","type":""}],"src":"926:186:30"},{"body":{"nativeSrc":"1242:125:30","nodeType":"YulBlock","src":"1242:125:30","statements":[{"nativeSrc":"1252:26:30","nodeType":"YulAssignment","src":"1252:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:30","nodeType":"YulIdentifier","src":"1264:9:30"},{"kind":"number","nativeSrc":"1275:2:30","nodeType":"YulLiteral","src":"1275:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:30","nodeType":"YulIdentifier","src":"1260:3:30"},"nativeSrc":"1260:18:30","nodeType":"YulFunctionCall","src":"1260:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:30","nodeType":"YulIdentifier","src":"1252:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:30","nodeType":"YulIdentifier","src":"1294:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:30","nodeType":"YulIdentifier","src":"1309:6:30"},{"kind":"number","nativeSrc":"1317:42:30","nodeType":"YulLiteral","src":"1317:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:30","nodeType":"YulIdentifier","src":"1305:3:30"},"nativeSrc":"1305:55:30","nodeType":"YulFunctionCall","src":"1305:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:30","nodeType":"YulIdentifier","src":"1287:6:30"},"nativeSrc":"1287:74:30","nodeType":"YulFunctionCall","src":"1287:74:30"},"nativeSrc":"1287:74:30","nodeType":"YulExpressionStatement","src":"1287:74:30"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed","nativeSrc":"1117:250:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:30","nodeType":"YulTypedName","src":"1211:9:30","type":""},{"name":"value0","nativeSrc":"1222:6:30","nodeType":"YulTypedName","src":"1222:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:30","nodeType":"YulTypedName","src":"1233:4:30","type":""}],"src":"1117:250:30"},{"body":{"nativeSrc":"1499:125:30","nodeType":"YulBlock","src":"1499:125:30","statements":[{"nativeSrc":"1509:26:30","nodeType":"YulAssignment","src":"1509:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1521:9:30","nodeType":"YulIdentifier","src":"1521:9:30"},{"kind":"number","nativeSrc":"1532:2:30","nodeType":"YulLiteral","src":"1532:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1517:3:30","nodeType":"YulIdentifier","src":"1517:3:30"},"nativeSrc":"1517:18:30","nodeType":"YulFunctionCall","src":"1517:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1509:4:30","nodeType":"YulIdentifier","src":"1509:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1551:9:30","nodeType":"YulIdentifier","src":"1551:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1566:6:30","nodeType":"YulIdentifier","src":"1566:6:30"},{"kind":"number","nativeSrc":"1574:42:30","nodeType":"YulLiteral","src":"1574:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:30","nodeType":"YulIdentifier","src":"1562:3:30"},"nativeSrc":"1562:55:30","nodeType":"YulFunctionCall","src":"1562:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1544:6:30","nodeType":"YulIdentifier","src":"1544:6:30"},"nativeSrc":"1544:74:30","nodeType":"YulFunctionCall","src":"1544:74:30"},"nativeSrc":"1544:74:30","nodeType":"YulExpressionStatement","src":"1544:74:30"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"1372:252:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1468:9:30","nodeType":"YulTypedName","src":"1468:9:30","type":""},{"name":"value0","nativeSrc":"1479:6:30","nodeType":"YulTypedName","src":"1479:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1490:4:30","nodeType":"YulTypedName","src":"1490:4:30","type":""}],"src":"1372:252:30"},{"body":{"nativeSrc":"1758:318:30","nodeType":"YulBlock","src":"1758:318:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1775:9:30","nodeType":"YulIdentifier","src":"1775:9:30"},{"kind":"number","nativeSrc":"1786:2:30","nodeType":"YulLiteral","src":"1786:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1768:6:30","nodeType":"YulIdentifier","src":"1768:6:30"},"nativeSrc":"1768:21:30","nodeType":"YulFunctionCall","src":"1768:21:30"},"nativeSrc":"1768:21:30","nodeType":"YulExpressionStatement","src":"1768:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1809:9:30","nodeType":"YulIdentifier","src":"1809:9:30"},{"kind":"number","nativeSrc":"1820:2:30","nodeType":"YulLiteral","src":"1820:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1805:3:30","nodeType":"YulIdentifier","src":"1805:3:30"},"nativeSrc":"1805:18:30","nodeType":"YulFunctionCall","src":"1805:18:30"},{"name":"value1","nativeSrc":"1825:6:30","nodeType":"YulIdentifier","src":"1825:6:30"}],"functionName":{"name":"mstore","nativeSrc":"1798:6:30","nodeType":"YulIdentifier","src":"1798:6:30"},"nativeSrc":"1798:34:30","nodeType":"YulFunctionCall","src":"1798:34:30"},"nativeSrc":"1798:34:30","nodeType":"YulExpressionStatement","src":"1798:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1858:9:30","nodeType":"YulIdentifier","src":"1858:9:30"},{"kind":"number","nativeSrc":"1869:2:30","nodeType":"YulLiteral","src":"1869:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1854:3:30","nodeType":"YulIdentifier","src":"1854:3:30"},"nativeSrc":"1854:18:30","nodeType":"YulFunctionCall","src":"1854:18:30"},{"name":"value0","nativeSrc":"1874:6:30","nodeType":"YulIdentifier","src":"1874:6:30"},{"name":"value1","nativeSrc":"1882:6:30","nodeType":"YulIdentifier","src":"1882:6:30"}],"functionName":{"name":"calldatacopy","nativeSrc":"1841:12:30","nodeType":"YulIdentifier","src":"1841:12:30"},"nativeSrc":"1841:48:30","nodeType":"YulFunctionCall","src":"1841:48:30"},"nativeSrc":"1841:48:30","nodeType":"YulExpressionStatement","src":"1841:48:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1913:9:30","nodeType":"YulIdentifier","src":"1913:9:30"},{"name":"value1","nativeSrc":"1924:6:30","nodeType":"YulIdentifier","src":"1924:6:30"}],"functionName":{"name":"add","nativeSrc":"1909:3:30","nodeType":"YulIdentifier","src":"1909:3:30"},"nativeSrc":"1909:22:30","nodeType":"YulFunctionCall","src":"1909:22:30"},{"kind":"number","nativeSrc":"1933:2:30","nodeType":"YulLiteral","src":"1933:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1905:3:30","nodeType":"YulIdentifier","src":"1905:3:30"},"nativeSrc":"1905:31:30","nodeType":"YulFunctionCall","src":"1905:31:30"},{"kind":"number","nativeSrc":"1938:1:30","nodeType":"YulLiteral","src":"1938:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1898:6:30","nodeType":"YulIdentifier","src":"1898:6:30"},"nativeSrc":"1898:42:30","nodeType":"YulFunctionCall","src":"1898:42:30"},"nativeSrc":"1898:42:30","nodeType":"YulExpressionStatement","src":"1898:42:30"},{"nativeSrc":"1949:121:30","nodeType":"YulAssignment","src":"1949:121:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1965:9:30","nodeType":"YulIdentifier","src":"1965:9:30"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1984:6:30","nodeType":"YulIdentifier","src":"1984:6:30"},{"kind":"number","nativeSrc":"1992:2:30","nodeType":"YulLiteral","src":"1992:2:30","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1980:3:30","nodeType":"YulIdentifier","src":"1980:3:30"},"nativeSrc":"1980:15:30","nodeType":"YulFunctionCall","src":"1980:15:30"},{"kind":"number","nativeSrc":"1997:66:30","nodeType":"YulLiteral","src":"1997:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1976:3:30","nodeType":"YulIdentifier","src":"1976:3:30"},"nativeSrc":"1976:88:30","nodeType":"YulFunctionCall","src":"1976:88:30"}],"functionName":{"name":"add","nativeSrc":"1961:3:30","nodeType":"YulIdentifier","src":"1961:3:30"},"nativeSrc":"1961:104:30","nodeType":"YulFunctionCall","src":"1961:104:30"},{"kind":"number","nativeSrc":"2067:2:30","nodeType":"YulLiteral","src":"2067:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1957:3:30","nodeType":"YulIdentifier","src":"1957:3:30"},"nativeSrc":"1957:113:30","nodeType":"YulFunctionCall","src":"1957:113:30"},"variableNames":[{"name":"tail","nativeSrc":"1949:4:30","nodeType":"YulIdentifier","src":"1949:4:30"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1629:447:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1719:9:30","nodeType":"YulTypedName","src":"1719:9:30","type":""},{"name":"value1","nativeSrc":"1730:6:30","nodeType":"YulTypedName","src":"1730:6:30","type":""},{"name":"value0","nativeSrc":"1738:6:30","nodeType":"YulTypedName","src":"1738:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1749:4:30","nodeType":"YulTypedName","src":"1749:4:30","type":""}],"src":"1629:447:30"},{"body":{"nativeSrc":"2168:167:30","nodeType":"YulBlock","src":"2168:167:30","statements":[{"body":{"nativeSrc":"2214:16:30","nodeType":"YulBlock","src":"2214:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2223:1:30","nodeType":"YulLiteral","src":"2223:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2226:1:30","nodeType":"YulLiteral","src":"2226:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2216:6:30","nodeType":"YulIdentifier","src":"2216:6:30"},"nativeSrc":"2216:12:30","nodeType":"YulFunctionCall","src":"2216:12:30"},"nativeSrc":"2216:12:30","nodeType":"YulExpressionStatement","src":"2216:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2189:7:30","nodeType":"YulIdentifier","src":"2189:7:30"},{"name":"headStart","nativeSrc":"2198:9:30","nodeType":"YulIdentifier","src":"2198:9:30"}],"functionName":{"name":"sub","nativeSrc":"2185:3:30","nodeType":"YulIdentifier","src":"2185:3:30"},"nativeSrc":"2185:23:30","nodeType":"YulFunctionCall","src":"2185:23:30"},{"kind":"number","nativeSrc":"2210:2:30","nodeType":"YulLiteral","src":"2210:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2181:3:30","nodeType":"YulIdentifier","src":"2181:3:30"},"nativeSrc":"2181:32:30","nodeType":"YulFunctionCall","src":"2181:32:30"},"nativeSrc":"2178:52:30","nodeType":"YulIf","src":"2178:52:30"},{"nativeSrc":"2239:33:30","nodeType":"YulAssignment","src":"2239:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2262:9:30","nodeType":"YulIdentifier","src":"2262:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2249:12:30","nodeType":"YulIdentifier","src":"2249:12:30"},"nativeSrc":"2249:23:30","nodeType":"YulFunctionCall","src":"2249:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2239:6:30","nodeType":"YulIdentifier","src":"2239:6:30"}]},{"nativeSrc":"2281:48:30","nodeType":"YulAssignment","src":"2281:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2314:9:30","nodeType":"YulIdentifier","src":"2314:9:30"},{"kind":"number","nativeSrc":"2325:2:30","nodeType":"YulLiteral","src":"2325:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2310:3:30","nodeType":"YulIdentifier","src":"2310:3:30"},"nativeSrc":"2310:18:30","nodeType":"YulFunctionCall","src":"2310:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2291:18:30","nodeType":"YulIdentifier","src":"2291:18:30"},"nativeSrc":"2291:38:30","nodeType":"YulFunctionCall","src":"2291:38:30"},"variableNames":[{"name":"value1","nativeSrc":"2281:6:30","nodeType":"YulIdentifier","src":"2281:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"2081:254:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2126:9:30","nodeType":"YulTypedName","src":"2126:9:30","type":""},{"name":"dataEnd","nativeSrc":"2137:7:30","nodeType":"YulTypedName","src":"2137:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2149:6:30","nodeType":"YulTypedName","src":"2149:6:30","type":""},{"name":"value1","nativeSrc":"2157:6:30","nodeType":"YulTypedName","src":"2157:6:30","type":""}],"src":"2081:254:30"},{"body":{"nativeSrc":"2441:76:30","nodeType":"YulBlock","src":"2441:76:30","statements":[{"nativeSrc":"2451:26:30","nodeType":"YulAssignment","src":"2451:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2463:9:30","nodeType":"YulIdentifier","src":"2463:9:30"},{"kind":"number","nativeSrc":"2474:2:30","nodeType":"YulLiteral","src":"2474:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2459:3:30","nodeType":"YulIdentifier","src":"2459:3:30"},"nativeSrc":"2459:18:30","nodeType":"YulFunctionCall","src":"2459:18:30"},"variableNames":[{"name":"tail","nativeSrc":"2451:4:30","nodeType":"YulIdentifier","src":"2451:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2493:9:30","nodeType":"YulIdentifier","src":"2493:9:30"},{"name":"value0","nativeSrc":"2504:6:30","nodeType":"YulIdentifier","src":"2504:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2486:6:30","nodeType":"YulIdentifier","src":"2486:6:30"},"nativeSrc":"2486:25:30","nodeType":"YulFunctionCall","src":"2486:25:30"},"nativeSrc":"2486:25:30","nodeType":"YulExpressionStatement","src":"2486:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2340:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2410:9:30","nodeType":"YulTypedName","src":"2410:9:30","type":""},{"name":"value0","nativeSrc":"2421:6:30","nodeType":"YulTypedName","src":"2421:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2432:4:30","nodeType":"YulTypedName","src":"2432:4:30","type":""}],"src":"2340:177:30"},{"body":{"nativeSrc":"2592:110:30","nodeType":"YulBlock","src":"2592:110:30","statements":[{"body":{"nativeSrc":"2638:16:30","nodeType":"YulBlock","src":"2638:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2647:1:30","nodeType":"YulLiteral","src":"2647:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2650:1:30","nodeType":"YulLiteral","src":"2650:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2640:6:30","nodeType":"YulIdentifier","src":"2640:6:30"},"nativeSrc":"2640:12:30","nodeType":"YulFunctionCall","src":"2640:12:30"},"nativeSrc":"2640:12:30","nodeType":"YulExpressionStatement","src":"2640:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2613:7:30","nodeType":"YulIdentifier","src":"2613:7:30"},{"name":"headStart","nativeSrc":"2622:9:30","nodeType":"YulIdentifier","src":"2622:9:30"}],"functionName":{"name":"sub","nativeSrc":"2609:3:30","nodeType":"YulIdentifier","src":"2609:3:30"},"nativeSrc":"2609:23:30","nodeType":"YulFunctionCall","src":"2609:23:30"},{"kind":"number","nativeSrc":"2634:2:30","nodeType":"YulLiteral","src":"2634:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2605:3:30","nodeType":"YulIdentifier","src":"2605:3:30"},"nativeSrc":"2605:32:30","nodeType":"YulFunctionCall","src":"2605:32:30"},"nativeSrc":"2602:52:30","nodeType":"YulIf","src":"2602:52:30"},{"nativeSrc":"2663:33:30","nodeType":"YulAssignment","src":"2663:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2686:9:30","nodeType":"YulIdentifier","src":"2686:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2673:12:30","nodeType":"YulIdentifier","src":"2673:12:30"},"nativeSrc":"2673:23:30","nodeType":"YulFunctionCall","src":"2673:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2663:6:30","nodeType":"YulIdentifier","src":"2663:6:30"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2522:180:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2558:9:30","nodeType":"YulTypedName","src":"2558:9:30","type":""},{"name":"dataEnd","nativeSrc":"2569:7:30","nodeType":"YulTypedName","src":"2569:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2581:6:30","nodeType":"YulTypedName","src":"2581:6:30","type":""}],"src":"2522:180:30"},{"body":{"nativeSrc":"2791:283:30","nodeType":"YulBlock","src":"2791:283:30","statements":[{"body":{"nativeSrc":"2840:16:30","nodeType":"YulBlock","src":"2840:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2849:1:30","nodeType":"YulLiteral","src":"2849:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2852:1:30","nodeType":"YulLiteral","src":"2852:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2842:6:30","nodeType":"YulIdentifier","src":"2842:6:30"},"nativeSrc":"2842:12:30","nodeType":"YulFunctionCall","src":"2842:12:30"},"nativeSrc":"2842:12:30","nodeType":"YulExpressionStatement","src":"2842:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2819:6:30","nodeType":"YulIdentifier","src":"2819:6:30"},{"kind":"number","nativeSrc":"2827:4:30","nodeType":"YulLiteral","src":"2827:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2815:3:30","nodeType":"YulIdentifier","src":"2815:3:30"},"nativeSrc":"2815:17:30","nodeType":"YulFunctionCall","src":"2815:17:30"},{"name":"end","nativeSrc":"2834:3:30","nodeType":"YulIdentifier","src":"2834:3:30"}],"functionName":{"name":"slt","nativeSrc":"2811:3:30","nodeType":"YulIdentifier","src":"2811:3:30"},"nativeSrc":"2811:27:30","nodeType":"YulFunctionCall","src":"2811:27:30"}],"functionName":{"name":"iszero","nativeSrc":"2804:6:30","nodeType":"YulIdentifier","src":"2804:6:30"},"nativeSrc":"2804:35:30","nodeType":"YulFunctionCall","src":"2804:35:30"},"nativeSrc":"2801:55:30","nodeType":"YulIf","src":"2801:55:30"},{"nativeSrc":"2865:30:30","nodeType":"YulAssignment","src":"2865:30:30","value":{"arguments":[{"name":"offset","nativeSrc":"2888:6:30","nodeType":"YulIdentifier","src":"2888:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"2875:12:30","nodeType":"YulIdentifier","src":"2875:12:30"},"nativeSrc":"2875:20:30","nodeType":"YulFunctionCall","src":"2875:20:30"},"variableNames":[{"name":"length","nativeSrc":"2865:6:30","nodeType":"YulIdentifier","src":"2865:6:30"}]},{"body":{"nativeSrc":"2938:16:30","nodeType":"YulBlock","src":"2938:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2947:1:30","nodeType":"YulLiteral","src":"2947:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2950:1:30","nodeType":"YulLiteral","src":"2950:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2940:6:30","nodeType":"YulIdentifier","src":"2940:6:30"},"nativeSrc":"2940:12:30","nodeType":"YulFunctionCall","src":"2940:12:30"},"nativeSrc":"2940:12:30","nodeType":"YulExpressionStatement","src":"2940:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2910:6:30","nodeType":"YulIdentifier","src":"2910:6:30"},{"kind":"number","nativeSrc":"2918:18:30","nodeType":"YulLiteral","src":"2918:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2907:2:30","nodeType":"YulIdentifier","src":"2907:2:30"},"nativeSrc":"2907:30:30","nodeType":"YulFunctionCall","src":"2907:30:30"},"nativeSrc":"2904:50:30","nodeType":"YulIf","src":"2904:50:30"},{"nativeSrc":"2963:29:30","nodeType":"YulAssignment","src":"2963:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"2979:6:30","nodeType":"YulIdentifier","src":"2979:6:30"},{"kind":"number","nativeSrc":"2987:4:30","nodeType":"YulLiteral","src":"2987:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2975:3:30","nodeType":"YulIdentifier","src":"2975:3:30"},"nativeSrc":"2975:17:30","nodeType":"YulFunctionCall","src":"2975:17:30"},"variableNames":[{"name":"arrayPos","nativeSrc":"2963:8:30","nodeType":"YulIdentifier","src":"2963:8:30"}]},{"body":{"nativeSrc":"3052:16:30","nodeType":"YulBlock","src":"3052:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3061:1:30","nodeType":"YulLiteral","src":"3061:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3064:1:30","nodeType":"YulLiteral","src":"3064:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3054:6:30","nodeType":"YulIdentifier","src":"3054:6:30"},"nativeSrc":"3054:12:30","nodeType":"YulFunctionCall","src":"3054:12:30"},"nativeSrc":"3054:12:30","nodeType":"YulExpressionStatement","src":"3054:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3015:6:30","nodeType":"YulIdentifier","src":"3015:6:30"},{"arguments":[{"kind":"number","nativeSrc":"3027:1:30","nodeType":"YulLiteral","src":"3027:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"3030:6:30","nodeType":"YulIdentifier","src":"3030:6:30"}],"functionName":{"name":"shl","nativeSrc":"3023:3:30","nodeType":"YulIdentifier","src":"3023:3:30"},"nativeSrc":"3023:14:30","nodeType":"YulFunctionCall","src":"3023:14:30"}],"functionName":{"name":"add","nativeSrc":"3011:3:30","nodeType":"YulIdentifier","src":"3011:3:30"},"nativeSrc":"3011:27:30","nodeType":"YulFunctionCall","src":"3011:27:30"},{"kind":"number","nativeSrc":"3040:4:30","nodeType":"YulLiteral","src":"3040:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3007:3:30","nodeType":"YulIdentifier","src":"3007:3:30"},"nativeSrc":"3007:38:30","nodeType":"YulFunctionCall","src":"3007:38:30"},{"name":"end","nativeSrc":"3047:3:30","nodeType":"YulIdentifier","src":"3047:3:30"}],"functionName":{"name":"gt","nativeSrc":"3004:2:30","nodeType":"YulIdentifier","src":"3004:2:30"},"nativeSrc":"3004:47:30","nodeType":"YulFunctionCall","src":"3004:47:30"},"nativeSrc":"3001:67:30","nodeType":"YulIf","src":"3001:67:30"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2707:367:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2754:6:30","nodeType":"YulTypedName","src":"2754:6:30","type":""},{"name":"end","nativeSrc":"2762:3:30","nodeType":"YulTypedName","src":"2762:3:30","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2770:8:30","nodeType":"YulTypedName","src":"2770:8:30","type":""},{"name":"length","nativeSrc":"2780:6:30","nodeType":"YulTypedName","src":"2780:6:30","type":""}],"src":"2707:367:30"},{"body":{"nativeSrc":"3151:275:30","nodeType":"YulBlock","src":"3151:275:30","statements":[{"body":{"nativeSrc":"3200:16:30","nodeType":"YulBlock","src":"3200:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3209:1:30","nodeType":"YulLiteral","src":"3209:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3212:1:30","nodeType":"YulLiteral","src":"3212:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3202:6:30","nodeType":"YulIdentifier","src":"3202:6:30"},"nativeSrc":"3202:12:30","nodeType":"YulFunctionCall","src":"3202:12:30"},"nativeSrc":"3202:12:30","nodeType":"YulExpressionStatement","src":"3202:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3179:6:30","nodeType":"YulIdentifier","src":"3179:6:30"},{"kind":"number","nativeSrc":"3187:4:30","nodeType":"YulLiteral","src":"3187:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3175:3:30","nodeType":"YulIdentifier","src":"3175:3:30"},"nativeSrc":"3175:17:30","nodeType":"YulFunctionCall","src":"3175:17:30"},{"name":"end","nativeSrc":"3194:3:30","nodeType":"YulIdentifier","src":"3194:3:30"}],"functionName":{"name":"slt","nativeSrc":"3171:3:30","nodeType":"YulIdentifier","src":"3171:3:30"},"nativeSrc":"3171:27:30","nodeType":"YulFunctionCall","src":"3171:27:30"}],"functionName":{"name":"iszero","nativeSrc":"3164:6:30","nodeType":"YulIdentifier","src":"3164:6:30"},"nativeSrc":"3164:35:30","nodeType":"YulFunctionCall","src":"3164:35:30"},"nativeSrc":"3161:55:30","nodeType":"YulIf","src":"3161:55:30"},{"nativeSrc":"3225:30:30","nodeType":"YulAssignment","src":"3225:30:30","value":{"arguments":[{"name":"offset","nativeSrc":"3248:6:30","nodeType":"YulIdentifier","src":"3248:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"3235:12:30","nodeType":"YulIdentifier","src":"3235:12:30"},"nativeSrc":"3235:20:30","nodeType":"YulFunctionCall","src":"3235:20:30"},"variableNames":[{"name":"length","nativeSrc":"3225:6:30","nodeType":"YulIdentifier","src":"3225:6:30"}]},{"body":{"nativeSrc":"3298:16:30","nodeType":"YulBlock","src":"3298:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3307:1:30","nodeType":"YulLiteral","src":"3307:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3310:1:30","nodeType":"YulLiteral","src":"3310:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3300:6:30","nodeType":"YulIdentifier","src":"3300:6:30"},"nativeSrc":"3300:12:30","nodeType":"YulFunctionCall","src":"3300:12:30"},"nativeSrc":"3300:12:30","nodeType":"YulExpressionStatement","src":"3300:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3270:6:30","nodeType":"YulIdentifier","src":"3270:6:30"},{"kind":"number","nativeSrc":"3278:18:30","nodeType":"YulLiteral","src":"3278:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3267:2:30","nodeType":"YulIdentifier","src":"3267:2:30"},"nativeSrc":"3267:30:30","nodeType":"YulFunctionCall","src":"3267:30:30"},"nativeSrc":"3264:50:30","nodeType":"YulIf","src":"3264:50:30"},{"nativeSrc":"3323:29:30","nodeType":"YulAssignment","src":"3323:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"3339:6:30","nodeType":"YulIdentifier","src":"3339:6:30"},{"kind":"number","nativeSrc":"3347:4:30","nodeType":"YulLiteral","src":"3347:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3335:3:30","nodeType":"YulIdentifier","src":"3335:3:30"},"nativeSrc":"3335:17:30","nodeType":"YulFunctionCall","src":"3335:17:30"},"variableNames":[{"name":"arrayPos","nativeSrc":"3323:8:30","nodeType":"YulIdentifier","src":"3323:8:30"}]},{"body":{"nativeSrc":"3404:16:30","nodeType":"YulBlock","src":"3404:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3413:1:30","nodeType":"YulLiteral","src":"3413:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3416:1:30","nodeType":"YulLiteral","src":"3416:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3406:6:30","nodeType":"YulIdentifier","src":"3406:6:30"},"nativeSrc":"3406:12:30","nodeType":"YulFunctionCall","src":"3406:12:30"},"nativeSrc":"3406:12:30","nodeType":"YulExpressionStatement","src":"3406:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3375:6:30","nodeType":"YulIdentifier","src":"3375:6:30"},{"name":"length","nativeSrc":"3383:6:30","nodeType":"YulIdentifier","src":"3383:6:30"}],"functionName":{"name":"add","nativeSrc":"3371:3:30","nodeType":"YulIdentifier","src":"3371:3:30"},"nativeSrc":"3371:19:30","nodeType":"YulFunctionCall","src":"3371:19:30"},{"kind":"number","nativeSrc":"3392:4:30","nodeType":"YulLiteral","src":"3392:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3367:3:30","nodeType":"YulIdentifier","src":"3367:3:30"},"nativeSrc":"3367:30:30","nodeType":"YulFunctionCall","src":"3367:30:30"},{"name":"end","nativeSrc":"3399:3:30","nodeType":"YulIdentifier","src":"3399:3:30"}],"functionName":{"name":"gt","nativeSrc":"3364:2:30","nodeType":"YulIdentifier","src":"3364:2:30"},"nativeSrc":"3364:39:30","nodeType":"YulFunctionCall","src":"3364:39:30"},"nativeSrc":"3361:59:30","nodeType":"YulIf","src":"3361:59:30"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"3079:347:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3114:6:30","nodeType":"YulTypedName","src":"3114:6:30","type":""},{"name":"end","nativeSrc":"3122:3:30","nodeType":"YulTypedName","src":"3122:3:30","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"3130:8:30","nodeType":"YulTypedName","src":"3130:8:30","type":""},{"name":"length","nativeSrc":"3140:6:30","nodeType":"YulTypedName","src":"3140:6:30","type":""}],"src":"3079:347:30"},{"body":{"nativeSrc":"3658:983:30","nodeType":"YulBlock","src":"3658:983:30","statements":[{"body":{"nativeSrc":"3705:16:30","nodeType":"YulBlock","src":"3705:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3714:1:30","nodeType":"YulLiteral","src":"3714:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3717:1:30","nodeType":"YulLiteral","src":"3717:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3707:6:30","nodeType":"YulIdentifier","src":"3707:6:30"},"nativeSrc":"3707:12:30","nodeType":"YulFunctionCall","src":"3707:12:30"},"nativeSrc":"3707:12:30","nodeType":"YulExpressionStatement","src":"3707:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3679:7:30","nodeType":"YulIdentifier","src":"3679:7:30"},{"name":"headStart","nativeSrc":"3688:9:30","nodeType":"YulIdentifier","src":"3688:9:30"}],"functionName":{"name":"sub","nativeSrc":"3675:3:30","nodeType":"YulIdentifier","src":"3675:3:30"},"nativeSrc":"3675:23:30","nodeType":"YulFunctionCall","src":"3675:23:30"},{"kind":"number","nativeSrc":"3700:3:30","nodeType":"YulLiteral","src":"3700:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3671:3:30","nodeType":"YulIdentifier","src":"3671:3:30"},"nativeSrc":"3671:33:30","nodeType":"YulFunctionCall","src":"3671:33:30"},"nativeSrc":"3668:53:30","nodeType":"YulIf","src":"3668:53:30"},{"nativeSrc":"3730:39:30","nodeType":"YulAssignment","src":"3730:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3759:9:30","nodeType":"YulIdentifier","src":"3759:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3740:18:30","nodeType":"YulIdentifier","src":"3740:18:30"},"nativeSrc":"3740:29:30","nodeType":"YulFunctionCall","src":"3740:29:30"},"variableNames":[{"name":"value0","nativeSrc":"3730:6:30","nodeType":"YulIdentifier","src":"3730:6:30"}]},{"nativeSrc":"3778:48:30","nodeType":"YulAssignment","src":"3778:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3811:9:30","nodeType":"YulIdentifier","src":"3811:9:30"},{"kind":"number","nativeSrc":"3822:2:30","nodeType":"YulLiteral","src":"3822:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3807:3:30","nodeType":"YulIdentifier","src":"3807:3:30"},"nativeSrc":"3807:18:30","nodeType":"YulFunctionCall","src":"3807:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3788:18:30","nodeType":"YulIdentifier","src":"3788:18:30"},"nativeSrc":"3788:38:30","nodeType":"YulFunctionCall","src":"3788:38:30"},"variableNames":[{"name":"value1","nativeSrc":"3778:6:30","nodeType":"YulIdentifier","src":"3778:6:30"}]},{"nativeSrc":"3835:46:30","nodeType":"YulVariableDeclaration","src":"3835:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3866:9:30","nodeType":"YulIdentifier","src":"3866:9:30"},{"kind":"number","nativeSrc":"3877:2:30","nodeType":"YulLiteral","src":"3877:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3862:3:30","nodeType":"YulIdentifier","src":"3862:3:30"},"nativeSrc":"3862:18:30","nodeType":"YulFunctionCall","src":"3862:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"3849:12:30","nodeType":"YulIdentifier","src":"3849:12:30"},"nativeSrc":"3849:32:30","nodeType":"YulFunctionCall","src":"3849:32:30"},"variables":[{"name":"offset","nativeSrc":"3839:6:30","nodeType":"YulTypedName","src":"3839:6:30","type":""}]},{"nativeSrc":"3890:28:30","nodeType":"YulVariableDeclaration","src":"3890:28:30","value":{"kind":"number","nativeSrc":"3900:18:30","nodeType":"YulLiteral","src":"3900:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3894:2:30","nodeType":"YulTypedName","src":"3894:2:30","type":""}]},{"body":{"nativeSrc":"3945:16:30","nodeType":"YulBlock","src":"3945:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3954:1:30","nodeType":"YulLiteral","src":"3954:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3957:1:30","nodeType":"YulLiteral","src":"3957:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3947:6:30","nodeType":"YulIdentifier","src":"3947:6:30"},"nativeSrc":"3947:12:30","nodeType":"YulFunctionCall","src":"3947:12:30"},"nativeSrc":"3947:12:30","nodeType":"YulExpressionStatement","src":"3947:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3933:6:30","nodeType":"YulIdentifier","src":"3933:6:30"},{"name":"_1","nativeSrc":"3941:2:30","nodeType":"YulIdentifier","src":"3941:2:30"}],"functionName":{"name":"gt","nativeSrc":"3930:2:30","nodeType":"YulIdentifier","src":"3930:2:30"},"nativeSrc":"3930:14:30","nodeType":"YulFunctionCall","src":"3930:14:30"},"nativeSrc":"3927:34:30","nodeType":"YulIf","src":"3927:34:30"},{"nativeSrc":"3970:96:30","nodeType":"YulVariableDeclaration","src":"3970:96:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4038:9:30","nodeType":"YulIdentifier","src":"4038:9:30"},{"name":"offset","nativeSrc":"4049:6:30","nodeType":"YulIdentifier","src":"4049:6:30"}],"functionName":{"name":"add","nativeSrc":"4034:3:30","nodeType":"YulIdentifier","src":"4034:3:30"},"nativeSrc":"4034:22:30","nodeType":"YulFunctionCall","src":"4034:22:30"},{"name":"dataEnd","nativeSrc":"4058:7:30","nodeType":"YulIdentifier","src":"4058:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3996:37:30","nodeType":"YulIdentifier","src":"3996:37:30"},"nativeSrc":"3996:70:30","nodeType":"YulFunctionCall","src":"3996:70:30"},"variables":[{"name":"value2_1","nativeSrc":"3974:8:30","nodeType":"YulTypedName","src":"3974:8:30","type":""},{"name":"value3_1","nativeSrc":"3984:8:30","nodeType":"YulTypedName","src":"3984:8:30","type":""}]},{"nativeSrc":"4075:18:30","nodeType":"YulAssignment","src":"4075:18:30","value":{"name":"value2_1","nativeSrc":"4085:8:30","nodeType":"YulIdentifier","src":"4085:8:30"},"variableNames":[{"name":"value2","nativeSrc":"4075:6:30","nodeType":"YulIdentifier","src":"4075:6:30"}]},{"nativeSrc":"4102:18:30","nodeType":"YulAssignment","src":"4102:18:30","value":{"name":"value3_1","nativeSrc":"4112:8:30","nodeType":"YulIdentifier","src":"4112:8:30"},"variableNames":[{"name":"value3","nativeSrc":"4102:6:30","nodeType":"YulIdentifier","src":"4102:6:30"}]},{"nativeSrc":"4129:48:30","nodeType":"YulVariableDeclaration","src":"4129:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4162:9:30","nodeType":"YulIdentifier","src":"4162:9:30"},{"kind":"number","nativeSrc":"4173:2:30","nodeType":"YulLiteral","src":"4173:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4158:3:30","nodeType":"YulIdentifier","src":"4158:3:30"},"nativeSrc":"4158:18:30","nodeType":"YulFunctionCall","src":"4158:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"4145:12:30","nodeType":"YulIdentifier","src":"4145:12:30"},"nativeSrc":"4145:32:30","nodeType":"YulFunctionCall","src":"4145:32:30"},"variables":[{"name":"offset_1","nativeSrc":"4133:8:30","nodeType":"YulTypedName","src":"4133:8:30","type":""}]},{"body":{"nativeSrc":"4206:16:30","nodeType":"YulBlock","src":"4206:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4215:1:30","nodeType":"YulLiteral","src":"4215:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"4218:1:30","nodeType":"YulLiteral","src":"4218:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4208:6:30","nodeType":"YulIdentifier","src":"4208:6:30"},"nativeSrc":"4208:12:30","nodeType":"YulFunctionCall","src":"4208:12:30"},"nativeSrc":"4208:12:30","nodeType":"YulExpressionStatement","src":"4208:12:30"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4192:8:30","nodeType":"YulIdentifier","src":"4192:8:30"},{"name":"_1","nativeSrc":"4202:2:30","nodeType":"YulIdentifier","src":"4202:2:30"}],"functionName":{"name":"gt","nativeSrc":"4189:2:30","nodeType":"YulIdentifier","src":"4189:2:30"},"nativeSrc":"4189:16:30","nodeType":"YulFunctionCall","src":"4189:16:30"},"nativeSrc":"4186:36:30","nodeType":"YulIf","src":"4186:36:30"},{"nativeSrc":"4231:98:30","nodeType":"YulVariableDeclaration","src":"4231:98:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4299:9:30","nodeType":"YulIdentifier","src":"4299:9:30"},{"name":"offset_1","nativeSrc":"4310:8:30","nodeType":"YulIdentifier","src":"4310:8:30"}],"functionName":{"name":"add","nativeSrc":"4295:3:30","nodeType":"YulIdentifier","src":"4295:3:30"},"nativeSrc":"4295:24:30","nodeType":"YulFunctionCall","src":"4295:24:30"},{"name":"dataEnd","nativeSrc":"4321:7:30","nodeType":"YulIdentifier","src":"4321:7:30"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"4257:37:30","nodeType":"YulIdentifier","src":"4257:37:30"},"nativeSrc":"4257:72:30","nodeType":"YulFunctionCall","src":"4257:72:30"},"variables":[{"name":"value4_1","nativeSrc":"4235:8:30","nodeType":"YulTypedName","src":"4235:8:30","type":""},{"name":"value5_1","nativeSrc":"4245:8:30","nodeType":"YulTypedName","src":"4245:8:30","type":""}]},{"nativeSrc":"4338:18:30","nodeType":"YulAssignment","src":"4338:18:30","value":{"name":"value4_1","nativeSrc":"4348:8:30","nodeType":"YulIdentifier","src":"4348:8:30"},"variableNames":[{"name":"value4","nativeSrc":"4338:6:30","nodeType":"YulIdentifier","src":"4338:6:30"}]},{"nativeSrc":"4365:18:30","nodeType":"YulAssignment","src":"4365:18:30","value":{"name":"value5_1","nativeSrc":"4375:8:30","nodeType":"YulIdentifier","src":"4375:8:30"},"variableNames":[{"name":"value5","nativeSrc":"4365:6:30","nodeType":"YulIdentifier","src":"4365:6:30"}]},{"nativeSrc":"4392:49:30","nodeType":"YulVariableDeclaration","src":"4392:49:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4425:9:30","nodeType":"YulIdentifier","src":"4425:9:30"},{"kind":"number","nativeSrc":"4436:3:30","nodeType":"YulLiteral","src":"4436:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4421:3:30","nodeType":"YulIdentifier","src":"4421:3:30"},"nativeSrc":"4421:19:30","nodeType":"YulFunctionCall","src":"4421:19:30"}],"functionName":{"name":"calldataload","nativeSrc":"4408:12:30","nodeType":"YulIdentifier","src":"4408:12:30"},"nativeSrc":"4408:33:30","nodeType":"YulFunctionCall","src":"4408:33:30"},"variables":[{"name":"offset_2","nativeSrc":"4396:8:30","nodeType":"YulTypedName","src":"4396:8:30","type":""}]},{"body":{"nativeSrc":"4470:16:30","nodeType":"YulBlock","src":"4470:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4479:1:30","nodeType":"YulLiteral","src":"4479:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"4482:1:30","nodeType":"YulLiteral","src":"4482:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4472:6:30","nodeType":"YulIdentifier","src":"4472:6:30"},"nativeSrc":"4472:12:30","nodeType":"YulFunctionCall","src":"4472:12:30"},"nativeSrc":"4472:12:30","nodeType":"YulExpressionStatement","src":"4472:12:30"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4456:8:30","nodeType":"YulIdentifier","src":"4456:8:30"},{"name":"_1","nativeSrc":"4466:2:30","nodeType":"YulIdentifier","src":"4466:2:30"}],"functionName":{"name":"gt","nativeSrc":"4453:2:30","nodeType":"YulIdentifier","src":"4453:2:30"},"nativeSrc":"4453:16:30","nodeType":"YulFunctionCall","src":"4453:16:30"},"nativeSrc":"4450:36:30","nodeType":"YulIf","src":"4450:36:30"},{"nativeSrc":"4495:86:30","nodeType":"YulVariableDeclaration","src":"4495:86:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4551:9:30","nodeType":"YulIdentifier","src":"4551:9:30"},{"name":"offset_2","nativeSrc":"4562:8:30","nodeType":"YulIdentifier","src":"4562:8:30"}],"functionName":{"name":"add","nativeSrc":"4547:3:30","nodeType":"YulIdentifier","src":"4547:3:30"},"nativeSrc":"4547:24:30","nodeType":"YulFunctionCall","src":"4547:24:30"},{"name":"dataEnd","nativeSrc":"4573:7:30","nodeType":"YulIdentifier","src":"4573:7:30"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4521:25:30","nodeType":"YulIdentifier","src":"4521:25:30"},"nativeSrc":"4521:60:30","nodeType":"YulFunctionCall","src":"4521:60:30"},"variables":[{"name":"value6_1","nativeSrc":"4499:8:30","nodeType":"YulTypedName","src":"4499:8:30","type":""},{"name":"value7_1","nativeSrc":"4509:8:30","nodeType":"YulTypedName","src":"4509:8:30","type":""}]},{"nativeSrc":"4590:18:30","nodeType":"YulAssignment","src":"4590:18:30","value":{"name":"value6_1","nativeSrc":"4600:8:30","nodeType":"YulIdentifier","src":"4600:8:30"},"variableNames":[{"name":"value6","nativeSrc":"4590:6:30","nodeType":"YulIdentifier","src":"4590:6:30"}]},{"nativeSrc":"4617:18:30","nodeType":"YulAssignment","src":"4617:18:30","value":{"name":"value7_1","nativeSrc":"4627:8:30","nodeType":"YulIdentifier","src":"4627:8:30"},"variableNames":[{"name":"value7","nativeSrc":"4617:6:30","nodeType":"YulIdentifier","src":"4617:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"3431:1210:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3568:9:30","nodeType":"YulTypedName","src":"3568:9:30","type":""},{"name":"dataEnd","nativeSrc":"3579:7:30","nodeType":"YulTypedName","src":"3579:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3591:6:30","nodeType":"YulTypedName","src":"3591:6:30","type":""},{"name":"value1","nativeSrc":"3599:6:30","nodeType":"YulTypedName","src":"3599:6:30","type":""},{"name":"value2","nativeSrc":"3607:6:30","nodeType":"YulTypedName","src":"3607:6:30","type":""},{"name":"value3","nativeSrc":"3615:6:30","nodeType":"YulTypedName","src":"3615:6:30","type":""},{"name":"value4","nativeSrc":"3623:6:30","nodeType":"YulTypedName","src":"3623:6:30","type":""},{"name":"value5","nativeSrc":"3631:6:30","nodeType":"YulTypedName","src":"3631:6:30","type":""},{"name":"value6","nativeSrc":"3639:6:30","nodeType":"YulTypedName","src":"3639:6:30","type":""},{"name":"value7","nativeSrc":"3647:6:30","nodeType":"YulTypedName","src":"3647:6:30","type":""}],"src":"3431:1210:30"},{"body":{"nativeSrc":"4745:149:30","nodeType":"YulBlock","src":"4745:149:30","statements":[{"nativeSrc":"4755:26:30","nodeType":"YulAssignment","src":"4755:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4767:9:30","nodeType":"YulIdentifier","src":"4767:9:30"},{"kind":"number","nativeSrc":"4778:2:30","nodeType":"YulLiteral","src":"4778:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4763:3:30","nodeType":"YulIdentifier","src":"4763:3:30"},"nativeSrc":"4763:18:30","nodeType":"YulFunctionCall","src":"4763:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4755:4:30","nodeType":"YulIdentifier","src":"4755:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4797:9:30","nodeType":"YulIdentifier","src":"4797:9:30"},{"arguments":[{"name":"value0","nativeSrc":"4812:6:30","nodeType":"YulIdentifier","src":"4812:6:30"},{"kind":"number","nativeSrc":"4820:66:30","nodeType":"YulLiteral","src":"4820:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4808:3:30","nodeType":"YulIdentifier","src":"4808:3:30"},"nativeSrc":"4808:79:30","nodeType":"YulFunctionCall","src":"4808:79:30"}],"functionName":{"name":"mstore","nativeSrc":"4790:6:30","nodeType":"YulIdentifier","src":"4790:6:30"},"nativeSrc":"4790:98:30","nodeType":"YulFunctionCall","src":"4790:98:30"},"nativeSrc":"4790:98:30","nodeType":"YulExpressionStatement","src":"4790:98:30"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4646:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4714:9:30","nodeType":"YulTypedName","src":"4714:9:30","type":""},{"name":"value0","nativeSrc":"4725:6:30","nodeType":"YulTypedName","src":"4725:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4736:4:30","nodeType":"YulTypedName","src":"4736:4:30","type":""}],"src":"4646:248:30"},{"body":{"nativeSrc":"5000:125:30","nodeType":"YulBlock","src":"5000:125:30","statements":[{"nativeSrc":"5010:26:30","nodeType":"YulAssignment","src":"5010:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"5022:9:30","nodeType":"YulIdentifier","src":"5022:9:30"},{"kind":"number","nativeSrc":"5033:2:30","nodeType":"YulLiteral","src":"5033:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5018:3:30","nodeType":"YulIdentifier","src":"5018:3:30"},"nativeSrc":"5018:18:30","nodeType":"YulFunctionCall","src":"5018:18:30"},"variableNames":[{"name":"tail","nativeSrc":"5010:4:30","nodeType":"YulIdentifier","src":"5010:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5052:9:30","nodeType":"YulIdentifier","src":"5052:9:30"},{"arguments":[{"name":"value0","nativeSrc":"5067:6:30","nodeType":"YulIdentifier","src":"5067:6:30"},{"kind":"number","nativeSrc":"5075:42:30","nodeType":"YulLiteral","src":"5075:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5063:3:30","nodeType":"YulIdentifier","src":"5063:3:30"},"nativeSrc":"5063:55:30","nodeType":"YulFunctionCall","src":"5063:55:30"}],"functionName":{"name":"mstore","nativeSrc":"5045:6:30","nodeType":"YulIdentifier","src":"5045:6:30"},"nativeSrc":"5045:74:30","nodeType":"YulFunctionCall","src":"5045:74:30"},"nativeSrc":"5045:74:30","nodeType":"YulExpressionStatement","src":"5045:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4899:226:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4969:9:30","nodeType":"YulTypedName","src":"4969:9:30","type":""},{"name":"value0","nativeSrc":"4980:6:30","nodeType":"YulTypedName","src":"4980:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4991:4:30","nodeType":"YulTypedName","src":"4991:4:30","type":""}],"src":"4899:226:30"},{"body":{"nativeSrc":"5287:538:30","nodeType":"YulBlock","src":"5287:538:30","statements":[{"body":{"nativeSrc":"5334:16:30","nodeType":"YulBlock","src":"5334:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5343:1:30","nodeType":"YulLiteral","src":"5343:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5346:1:30","nodeType":"YulLiteral","src":"5346:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5336:6:30","nodeType":"YulIdentifier","src":"5336:6:30"},"nativeSrc":"5336:12:30","nodeType":"YulFunctionCall","src":"5336:12:30"},"nativeSrc":"5336:12:30","nodeType":"YulExpressionStatement","src":"5336:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5308:7:30","nodeType":"YulIdentifier","src":"5308:7:30"},{"name":"headStart","nativeSrc":"5317:9:30","nodeType":"YulIdentifier","src":"5317:9:30"}],"functionName":{"name":"sub","nativeSrc":"5304:3:30","nodeType":"YulIdentifier","src":"5304:3:30"},"nativeSrc":"5304:23:30","nodeType":"YulFunctionCall","src":"5304:23:30"},{"kind":"number","nativeSrc":"5329:3:30","nodeType":"YulLiteral","src":"5329:3:30","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"5300:3:30","nodeType":"YulIdentifier","src":"5300:3:30"},"nativeSrc":"5300:33:30","nodeType":"YulFunctionCall","src":"5300:33:30"},"nativeSrc":"5297:53:30","nodeType":"YulIf","src":"5297:53:30"},{"nativeSrc":"5359:39:30","nodeType":"YulAssignment","src":"5359:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"5388:9:30","nodeType":"YulIdentifier","src":"5388:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5369:18:30","nodeType":"YulIdentifier","src":"5369:18:30"},"nativeSrc":"5369:29:30","nodeType":"YulFunctionCall","src":"5369:29:30"},"variableNames":[{"name":"value0","nativeSrc":"5359:6:30","nodeType":"YulIdentifier","src":"5359:6:30"}]},{"nativeSrc":"5407:48:30","nodeType":"YulAssignment","src":"5407:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5440:9:30","nodeType":"YulIdentifier","src":"5440:9:30"},{"kind":"number","nativeSrc":"5451:2:30","nodeType":"YulLiteral","src":"5451:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5436:3:30","nodeType":"YulIdentifier","src":"5436:3:30"},"nativeSrc":"5436:18:30","nodeType":"YulFunctionCall","src":"5436:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5417:18:30","nodeType":"YulIdentifier","src":"5417:18:30"},"nativeSrc":"5417:38:30","nodeType":"YulFunctionCall","src":"5417:38:30"},"variableNames":[{"name":"value1","nativeSrc":"5407:6:30","nodeType":"YulIdentifier","src":"5407:6:30"}]},{"nativeSrc":"5464:42:30","nodeType":"YulAssignment","src":"5464:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5491:9:30","nodeType":"YulIdentifier","src":"5491:9:30"},{"kind":"number","nativeSrc":"5502:2:30","nodeType":"YulLiteral","src":"5502:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5487:3:30","nodeType":"YulIdentifier","src":"5487:3:30"},"nativeSrc":"5487:18:30","nodeType":"YulFunctionCall","src":"5487:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"5474:12:30","nodeType":"YulIdentifier","src":"5474:12:30"},"nativeSrc":"5474:32:30","nodeType":"YulFunctionCall","src":"5474:32:30"},"variableNames":[{"name":"value2","nativeSrc":"5464:6:30","nodeType":"YulIdentifier","src":"5464:6:30"}]},{"nativeSrc":"5515:42:30","nodeType":"YulAssignment","src":"5515:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5542:9:30","nodeType":"YulIdentifier","src":"5542:9:30"},{"kind":"number","nativeSrc":"5553:2:30","nodeType":"YulLiteral","src":"5553:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5538:3:30","nodeType":"YulIdentifier","src":"5538:3:30"},"nativeSrc":"5538:18:30","nodeType":"YulFunctionCall","src":"5538:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"5525:12:30","nodeType":"YulIdentifier","src":"5525:12:30"},"nativeSrc":"5525:32:30","nodeType":"YulFunctionCall","src":"5525:32:30"},"variableNames":[{"name":"value3","nativeSrc":"5515:6:30","nodeType":"YulIdentifier","src":"5515:6:30"}]},{"nativeSrc":"5566:47:30","nodeType":"YulVariableDeclaration","src":"5566:47:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5597:9:30","nodeType":"YulIdentifier","src":"5597:9:30"},{"kind":"number","nativeSrc":"5608:3:30","nodeType":"YulLiteral","src":"5608:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5593:3:30","nodeType":"YulIdentifier","src":"5593:3:30"},"nativeSrc":"5593:19:30","nodeType":"YulFunctionCall","src":"5593:19:30"}],"functionName":{"name":"calldataload","nativeSrc":"5580:12:30","nodeType":"YulIdentifier","src":"5580:12:30"},"nativeSrc":"5580:33:30","nodeType":"YulFunctionCall","src":"5580:33:30"},"variables":[{"name":"offset","nativeSrc":"5570:6:30","nodeType":"YulTypedName","src":"5570:6:30","type":""}]},{"body":{"nativeSrc":"5656:16:30","nodeType":"YulBlock","src":"5656:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5665:1:30","nodeType":"YulLiteral","src":"5665:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5668:1:30","nodeType":"YulLiteral","src":"5668:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5658:6:30","nodeType":"YulIdentifier","src":"5658:6:30"},"nativeSrc":"5658:12:30","nodeType":"YulFunctionCall","src":"5658:12:30"},"nativeSrc":"5658:12:30","nodeType":"YulExpressionStatement","src":"5658:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5628:6:30","nodeType":"YulIdentifier","src":"5628:6:30"},{"kind":"number","nativeSrc":"5636:18:30","nodeType":"YulLiteral","src":"5636:18:30","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5625:2:30","nodeType":"YulIdentifier","src":"5625:2:30"},"nativeSrc":"5625:30:30","nodeType":"YulFunctionCall","src":"5625:30:30"},"nativeSrc":"5622:50:30","nodeType":"YulIf","src":"5622:50:30"},{"nativeSrc":"5681:84:30","nodeType":"YulVariableDeclaration","src":"5681:84:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5737:9:30","nodeType":"YulIdentifier","src":"5737:9:30"},{"name":"offset","nativeSrc":"5748:6:30","nodeType":"YulIdentifier","src":"5748:6:30"}],"functionName":{"name":"add","nativeSrc":"5733:3:30","nodeType":"YulIdentifier","src":"5733:3:30"},"nativeSrc":"5733:22:30","nodeType":"YulFunctionCall","src":"5733:22:30"},{"name":"dataEnd","nativeSrc":"5757:7:30","nodeType":"YulIdentifier","src":"5757:7:30"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5707:25:30","nodeType":"YulIdentifier","src":"5707:25:30"},"nativeSrc":"5707:58:30","nodeType":"YulFunctionCall","src":"5707:58:30"},"variables":[{"name":"value4_1","nativeSrc":"5685:8:30","nodeType":"YulTypedName","src":"5685:8:30","type":""},{"name":"value5_1","nativeSrc":"5695:8:30","nodeType":"YulTypedName","src":"5695:8:30","type":""}]},{"nativeSrc":"5774:18:30","nodeType":"YulAssignment","src":"5774:18:30","value":{"name":"value4_1","nativeSrc":"5784:8:30","nodeType":"YulIdentifier","src":"5784:8:30"},"variableNames":[{"name":"value4","nativeSrc":"5774:6:30","nodeType":"YulIdentifier","src":"5774:6:30"}]},{"nativeSrc":"5801:18:30","nodeType":"YulAssignment","src":"5801:18:30","value":{"name":"value5_1","nativeSrc":"5811:8:30","nodeType":"YulIdentifier","src":"5811:8:30"},"variableNames":[{"name":"value5","nativeSrc":"5801:6:30","nodeType":"YulIdentifier","src":"5801:6:30"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"5130:695:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5213:9:30","nodeType":"YulTypedName","src":"5213:9:30","type":""},{"name":"dataEnd","nativeSrc":"5224:7:30","nodeType":"YulTypedName","src":"5224:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5236:6:30","nodeType":"YulTypedName","src":"5236:6:30","type":""},{"name":"value1","nativeSrc":"5244:6:30","nodeType":"YulTypedName","src":"5244:6:30","type":""},{"name":"value2","nativeSrc":"5252:6:30","nodeType":"YulTypedName","src":"5252:6:30","type":""},{"name":"value3","nativeSrc":"5260:6:30","nodeType":"YulTypedName","src":"5260:6:30","type":""},{"name":"value4","nativeSrc":"5268:6:30","nodeType":"YulTypedName","src":"5268:6:30","type":""},{"name":"value5","nativeSrc":"5276:6:30","nodeType":"YulTypedName","src":"5276:6:30","type":""}],"src":"5130:695:30"},{"body":{"nativeSrc":"5862:152:30","nodeType":"YulBlock","src":"5862:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5879:1:30","nodeType":"YulLiteral","src":"5879:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5882:77:30","nodeType":"YulLiteral","src":"5882:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5872:6:30","nodeType":"YulIdentifier","src":"5872:6:30"},"nativeSrc":"5872:88:30","nodeType":"YulFunctionCall","src":"5872:88:30"},"nativeSrc":"5872:88:30","nodeType":"YulExpressionStatement","src":"5872:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5976:1:30","nodeType":"YulLiteral","src":"5976:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"5979:4:30","nodeType":"YulLiteral","src":"5979:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5969:6:30","nodeType":"YulIdentifier","src":"5969:6:30"},"nativeSrc":"5969:15:30","nodeType":"YulFunctionCall","src":"5969:15:30"},"nativeSrc":"5969:15:30","nodeType":"YulExpressionStatement","src":"5969:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6000:1:30","nodeType":"YulLiteral","src":"6000:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6003:4:30","nodeType":"YulLiteral","src":"6003:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5993:6:30","nodeType":"YulIdentifier","src":"5993:6:30"},"nativeSrc":"5993:15:30","nodeType":"YulFunctionCall","src":"5993:15:30"},"nativeSrc":"5993:15:30","nodeType":"YulExpressionStatement","src":"5993:15:30"}]},"name":"panic_error_0x11","nativeSrc":"5830:184:30","nodeType":"YulFunctionDefinition","src":"5830:184:30"},{"body":{"nativeSrc":"6068:79:30","nodeType":"YulBlock","src":"6068:79:30","statements":[{"nativeSrc":"6078:17:30","nodeType":"YulAssignment","src":"6078:17:30","value":{"arguments":[{"name":"x","nativeSrc":"6090:1:30","nodeType":"YulIdentifier","src":"6090:1:30"},{"name":"y","nativeSrc":"6093:1:30","nodeType":"YulIdentifier","src":"6093:1:30"}],"functionName":{"name":"sub","nativeSrc":"6086:3:30","nodeType":"YulIdentifier","src":"6086:3:30"},"nativeSrc":"6086:9:30","nodeType":"YulFunctionCall","src":"6086:9:30"},"variableNames":[{"name":"diff","nativeSrc":"6078:4:30","nodeType":"YulIdentifier","src":"6078:4:30"}]},{"body":{"nativeSrc":"6119:22:30","nodeType":"YulBlock","src":"6119:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6121:16:30","nodeType":"YulIdentifier","src":"6121:16:30"},"nativeSrc":"6121:18:30","nodeType":"YulFunctionCall","src":"6121:18:30"},"nativeSrc":"6121:18:30","nodeType":"YulExpressionStatement","src":"6121:18:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6110:4:30","nodeType":"YulIdentifier","src":"6110:4:30"},{"name":"x","nativeSrc":"6116:1:30","nodeType":"YulIdentifier","src":"6116:1:30"}],"functionName":{"name":"gt","nativeSrc":"6107:2:30","nodeType":"YulIdentifier","src":"6107:2:30"},"nativeSrc":"6107:11:30","nodeType":"YulFunctionCall","src":"6107:11:30"},"nativeSrc":"6104:37:30","nodeType":"YulIf","src":"6104:37:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"6019:128:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6050:1:30","nodeType":"YulTypedName","src":"6050:1:30","type":""},{"name":"y","nativeSrc":"6053:1:30","nodeType":"YulTypedName","src":"6053:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6059:4:30","nodeType":"YulTypedName","src":"6059:4:30","type":""}],"src":"6019:128:30"},{"body":{"nativeSrc":"6198:228:30","nodeType":"YulBlock","src":"6198:228:30","statements":[{"body":{"nativeSrc":"6229:168:30","nodeType":"YulBlock","src":"6229:168:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6250:1:30","nodeType":"YulLiteral","src":"6250:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6253:77:30","nodeType":"YulLiteral","src":"6253:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6243:6:30","nodeType":"YulIdentifier","src":"6243:6:30"},"nativeSrc":"6243:88:30","nodeType":"YulFunctionCall","src":"6243:88:30"},"nativeSrc":"6243:88:30","nodeType":"YulExpressionStatement","src":"6243:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6351:1:30","nodeType":"YulLiteral","src":"6351:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"6354:4:30","nodeType":"YulLiteral","src":"6354:4:30","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"6344:6:30","nodeType":"YulIdentifier","src":"6344:6:30"},"nativeSrc":"6344:15:30","nodeType":"YulFunctionCall","src":"6344:15:30"},"nativeSrc":"6344:15:30","nodeType":"YulExpressionStatement","src":"6344:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6379:1:30","nodeType":"YulLiteral","src":"6379:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6382:4:30","nodeType":"YulLiteral","src":"6382:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6372:6:30","nodeType":"YulIdentifier","src":"6372:6:30"},"nativeSrc":"6372:15:30","nodeType":"YulFunctionCall","src":"6372:15:30"},"nativeSrc":"6372:15:30","nodeType":"YulExpressionStatement","src":"6372:15:30"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"6218:1:30","nodeType":"YulIdentifier","src":"6218:1:30"}],"functionName":{"name":"iszero","nativeSrc":"6211:6:30","nodeType":"YulIdentifier","src":"6211:6:30"},"nativeSrc":"6211:9:30","nodeType":"YulFunctionCall","src":"6211:9:30"},"nativeSrc":"6208:189:30","nodeType":"YulIf","src":"6208:189:30"},{"nativeSrc":"6406:14:30","nodeType":"YulAssignment","src":"6406:14:30","value":{"arguments":[{"name":"x","nativeSrc":"6415:1:30","nodeType":"YulIdentifier","src":"6415:1:30"},{"name":"y","nativeSrc":"6418:1:30","nodeType":"YulIdentifier","src":"6418:1:30"}],"functionName":{"name":"div","nativeSrc":"6411:3:30","nodeType":"YulIdentifier","src":"6411:3:30"},"nativeSrc":"6411:9:30","nodeType":"YulFunctionCall","src":"6411:9:30"},"variableNames":[{"name":"r","nativeSrc":"6406:1:30","nodeType":"YulIdentifier","src":"6406:1:30"}]}]},"name":"checked_div_t_uint256","nativeSrc":"6152:274:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6183:1:30","nodeType":"YulTypedName","src":"6183:1:30","type":""},{"name":"y","nativeSrc":"6186:1:30","nodeType":"YulTypedName","src":"6186:1:30","type":""}],"returnVariables":[{"name":"r","nativeSrc":"6192:1:30","nodeType":"YulTypedName","src":"6192:1:30","type":""}],"src":"6152:274:30"},{"body":{"nativeSrc":"6509:280:30","nodeType":"YulBlock","src":"6509:280:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6526:3:30","nodeType":"YulIdentifier","src":"6526:3:30"},{"name":"length","nativeSrc":"6531:6:30","nodeType":"YulIdentifier","src":"6531:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6519:6:30","nodeType":"YulIdentifier","src":"6519:6:30"},"nativeSrc":"6519:19:30","nodeType":"YulFunctionCall","src":"6519:19:30"},"nativeSrc":"6519:19:30","nodeType":"YulExpressionStatement","src":"6519:19:30"},{"body":{"nativeSrc":"6629:16:30","nodeType":"YulBlock","src":"6629:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6638:1:30","nodeType":"YulLiteral","src":"6638:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"6641:1:30","nodeType":"YulLiteral","src":"6641:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6631:6:30","nodeType":"YulIdentifier","src":"6631:6:30"},"nativeSrc":"6631:12:30","nodeType":"YulFunctionCall","src":"6631:12:30"},"nativeSrc":"6631:12:30","nodeType":"YulExpressionStatement","src":"6631:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6553:6:30","nodeType":"YulIdentifier","src":"6553:6:30"},{"kind":"number","nativeSrc":"6561:66:30","nodeType":"YulLiteral","src":"6561:66:30","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6550:2:30","nodeType":"YulIdentifier","src":"6550:2:30"},"nativeSrc":"6550:78:30","nodeType":"YulFunctionCall","src":"6550:78:30"},"nativeSrc":"6547:98:30","nodeType":"YulIf","src":"6547:98:30"},{"nativeSrc":"6654:30:30","nodeType":"YulVariableDeclaration","src":"6654:30:30","value":{"arguments":[{"kind":"number","nativeSrc":"6674:1:30","nodeType":"YulLiteral","src":"6674:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"6677:6:30","nodeType":"YulIdentifier","src":"6677:6:30"}],"functionName":{"name":"shl","nativeSrc":"6670:3:30","nodeType":"YulIdentifier","src":"6670:3:30"},"nativeSrc":"6670:14:30","nodeType":"YulFunctionCall","src":"6670:14:30"},"variables":[{"name":"length_1","nativeSrc":"6658:8:30","nodeType":"YulTypedName","src":"6658:8:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6710:3:30","nodeType":"YulIdentifier","src":"6710:3:30"},{"kind":"number","nativeSrc":"6715:4:30","nodeType":"YulLiteral","src":"6715:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6706:3:30","nodeType":"YulIdentifier","src":"6706:3:30"},"nativeSrc":"6706:14:30","nodeType":"YulFunctionCall","src":"6706:14:30"},{"name":"start","nativeSrc":"6722:5:30","nodeType":"YulIdentifier","src":"6722:5:30"},{"name":"length_1","nativeSrc":"6729:8:30","nodeType":"YulIdentifier","src":"6729:8:30"}],"functionName":{"name":"calldatacopy","nativeSrc":"6693:12:30","nodeType":"YulIdentifier","src":"6693:12:30"},"nativeSrc":"6693:45:30","nodeType":"YulFunctionCall","src":"6693:45:30"},"nativeSrc":"6693:45:30","nodeType":"YulExpressionStatement","src":"6693:45:30"},{"nativeSrc":"6747:36:30","nodeType":"YulAssignment","src":"6747:36:30","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6762:3:30","nodeType":"YulIdentifier","src":"6762:3:30"},{"name":"length_1","nativeSrc":"6767:8:30","nodeType":"YulIdentifier","src":"6767:8:30"}],"functionName":{"name":"add","nativeSrc":"6758:3:30","nodeType":"YulIdentifier","src":"6758:3:30"},"nativeSrc":"6758:18:30","nodeType":"YulFunctionCall","src":"6758:18:30"},{"kind":"number","nativeSrc":"6778:4:30","nodeType":"YulLiteral","src":"6778:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6754:3:30","nodeType":"YulIdentifier","src":"6754:3:30"},"nativeSrc":"6754:29:30","nodeType":"YulFunctionCall","src":"6754:29:30"},"variableNames":[{"name":"end","nativeSrc":"6747:3:30","nodeType":"YulIdentifier","src":"6747:3:30"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6431:358:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6478:5:30","nodeType":"YulTypedName","src":"6478:5:30","type":""},{"name":"length","nativeSrc":"6485:6:30","nodeType":"YulTypedName","src":"6485:6:30","type":""},{"name":"pos","nativeSrc":"6493:3:30","nodeType":"YulTypedName","src":"6493:3:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6501:3:30","nodeType":"YulTypedName","src":"6501:3:30","type":""}],"src":"6431:358:30"},{"body":{"nativeSrc":"7071:362:30","nodeType":"YulBlock","src":"7071:362:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7088:9:30","nodeType":"YulIdentifier","src":"7088:9:30"},{"arguments":[{"name":"value0","nativeSrc":"7103:6:30","nodeType":"YulIdentifier","src":"7103:6:30"},{"kind":"number","nativeSrc":"7111:42:30","nodeType":"YulLiteral","src":"7111:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7099:3:30","nodeType":"YulIdentifier","src":"7099:3:30"},"nativeSrc":"7099:55:30","nodeType":"YulFunctionCall","src":"7099:55:30"}],"functionName":{"name":"mstore","nativeSrc":"7081:6:30","nodeType":"YulIdentifier","src":"7081:6:30"},"nativeSrc":"7081:74:30","nodeType":"YulFunctionCall","src":"7081:74:30"},"nativeSrc":"7081:74:30","nodeType":"YulExpressionStatement","src":"7081:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7175:9:30","nodeType":"YulIdentifier","src":"7175:9:30"},{"kind":"number","nativeSrc":"7186:2:30","nodeType":"YulLiteral","src":"7186:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7171:3:30","nodeType":"YulIdentifier","src":"7171:3:30"},"nativeSrc":"7171:18:30","nodeType":"YulFunctionCall","src":"7171:18:30"},{"kind":"number","nativeSrc":"7191:2:30","nodeType":"YulLiteral","src":"7191:2:30","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"7164:6:30","nodeType":"YulIdentifier","src":"7164:6:30"},"nativeSrc":"7164:30:30","nodeType":"YulFunctionCall","src":"7164:30:30"},"nativeSrc":"7164:30:30","nodeType":"YulExpressionStatement","src":"7164:30:30"},{"nativeSrc":"7203:87:30","nodeType":"YulVariableDeclaration","src":"7203:87:30","value":{"arguments":[{"name":"value1","nativeSrc":"7255:6:30","nodeType":"YulIdentifier","src":"7255:6:30"},{"name":"value2","nativeSrc":"7263:6:30","nodeType":"YulIdentifier","src":"7263:6:30"},{"arguments":[{"name":"headStart","nativeSrc":"7275:9:30","nodeType":"YulIdentifier","src":"7275:9:30"},{"kind":"number","nativeSrc":"7286:2:30","nodeType":"YulLiteral","src":"7286:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7271:3:30","nodeType":"YulIdentifier","src":"7271:3:30"},"nativeSrc":"7271:18:30","nodeType":"YulFunctionCall","src":"7271:18:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7217:37:30","nodeType":"YulIdentifier","src":"7217:37:30"},"nativeSrc":"7217:73:30","nodeType":"YulFunctionCall","src":"7217:73:30"},"variables":[{"name":"tail_1","nativeSrc":"7207:6:30","nodeType":"YulTypedName","src":"7207:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7310:9:30","nodeType":"YulIdentifier","src":"7310:9:30"},{"kind":"number","nativeSrc":"7321:2:30","nodeType":"YulLiteral","src":"7321:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7306:3:30","nodeType":"YulIdentifier","src":"7306:3:30"},"nativeSrc":"7306:18:30","nodeType":"YulFunctionCall","src":"7306:18:30"},{"arguments":[{"name":"tail_1","nativeSrc":"7330:6:30","nodeType":"YulIdentifier","src":"7330:6:30"},{"name":"headStart","nativeSrc":"7338:9:30","nodeType":"YulIdentifier","src":"7338:9:30"}],"functionName":{"name":"sub","nativeSrc":"7326:3:30","nodeType":"YulIdentifier","src":"7326:3:30"},"nativeSrc":"7326:22:30","nodeType":"YulFunctionCall","src":"7326:22:30"}],"functionName":{"name":"mstore","nativeSrc":"7299:6:30","nodeType":"YulIdentifier","src":"7299:6:30"},"nativeSrc":"7299:50:30","nodeType":"YulFunctionCall","src":"7299:50:30"},"nativeSrc":"7299:50:30","nodeType":"YulExpressionStatement","src":"7299:50:30"},{"nativeSrc":"7358:69:30","nodeType":"YulAssignment","src":"7358:69:30","value":{"arguments":[{"name":"value3","nativeSrc":"7404:6:30","nodeType":"YulIdentifier","src":"7404:6:30"},{"name":"value4","nativeSrc":"7412:6:30","nodeType":"YulIdentifier","src":"7412:6:30"},{"name":"tail_1","nativeSrc":"7420:6:30","nodeType":"YulIdentifier","src":"7420:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7366:37:30","nodeType":"YulIdentifier","src":"7366:37:30"},"nativeSrc":"7366:61:30","nodeType":"YulFunctionCall","src":"7366:61:30"},"variableNames":[{"name":"tail","nativeSrc":"7358:4:30","nodeType":"YulIdentifier","src":"7358:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6794:639:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7008:9:30","nodeType":"YulTypedName","src":"7008:9:30","type":""},{"name":"value4","nativeSrc":"7019:6:30","nodeType":"YulTypedName","src":"7019:6:30","type":""},{"name":"value3","nativeSrc":"7027:6:30","nodeType":"YulTypedName","src":"7027:6:30","type":""},{"name":"value2","nativeSrc":"7035:6:30","nodeType":"YulTypedName","src":"7035:6:30","type":""},{"name":"value1","nativeSrc":"7043:6:30","nodeType":"YulTypedName","src":"7043:6:30","type":""},{"name":"value0","nativeSrc":"7051:6:30","nodeType":"YulTypedName","src":"7051:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7062:4:30","nodeType":"YulTypedName","src":"7062:4:30","type":""}],"src":"6794:639:30"},{"body":{"nativeSrc":"7470:152:30","nodeType":"YulBlock","src":"7470:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7487:1:30","nodeType":"YulLiteral","src":"7487:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7490:77:30","nodeType":"YulLiteral","src":"7490:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7480:6:30","nodeType":"YulIdentifier","src":"7480:6:30"},"nativeSrc":"7480:88:30","nodeType":"YulFunctionCall","src":"7480:88:30"},"nativeSrc":"7480:88:30","nodeType":"YulExpressionStatement","src":"7480:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7584:1:30","nodeType":"YulLiteral","src":"7584:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"7587:4:30","nodeType":"YulLiteral","src":"7587:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7577:6:30","nodeType":"YulIdentifier","src":"7577:6:30"},"nativeSrc":"7577:15:30","nodeType":"YulFunctionCall","src":"7577:15:30"},"nativeSrc":"7577:15:30","nodeType":"YulExpressionStatement","src":"7577:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7608:1:30","nodeType":"YulLiteral","src":"7608:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7611:4:30","nodeType":"YulLiteral","src":"7611:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7601:6:30","nodeType":"YulIdentifier","src":"7601:6:30"},"nativeSrc":"7601:15:30","nodeType":"YulFunctionCall","src":"7601:15:30"},"nativeSrc":"7601:15:30","nodeType":"YulExpressionStatement","src":"7601:15:30"}]},"name":"panic_error_0x32","nativeSrc":"7438:184:30","nodeType":"YulFunctionDefinition","src":"7438:184:30"},{"body":{"nativeSrc":"7784:211:30","nodeType":"YulBlock","src":"7784:211:30","statements":[{"nativeSrc":"7794:26:30","nodeType":"YulAssignment","src":"7794:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"7806:9:30","nodeType":"YulIdentifier","src":"7806:9:30"},{"kind":"number","nativeSrc":"7817:2:30","nodeType":"YulLiteral","src":"7817:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7802:3:30","nodeType":"YulIdentifier","src":"7802:3:30"},"nativeSrc":"7802:18:30","nodeType":"YulFunctionCall","src":"7802:18:30"},"variableNames":[{"name":"tail","nativeSrc":"7794:4:30","nodeType":"YulIdentifier","src":"7794:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7836:9:30","nodeType":"YulIdentifier","src":"7836:9:30"},{"arguments":[{"name":"value0","nativeSrc":"7851:6:30","nodeType":"YulIdentifier","src":"7851:6:30"},{"kind":"number","nativeSrc":"7859:42:30","nodeType":"YulLiteral","src":"7859:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7847:3:30","nodeType":"YulIdentifier","src":"7847:3:30"},"nativeSrc":"7847:55:30","nodeType":"YulFunctionCall","src":"7847:55:30"}],"functionName":{"name":"mstore","nativeSrc":"7829:6:30","nodeType":"YulIdentifier","src":"7829:6:30"},"nativeSrc":"7829:74:30","nodeType":"YulFunctionCall","src":"7829:74:30"},"nativeSrc":"7829:74:30","nodeType":"YulExpressionStatement","src":"7829:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7923:9:30","nodeType":"YulIdentifier","src":"7923:9:30"},{"kind":"number","nativeSrc":"7934:2:30","nodeType":"YulLiteral","src":"7934:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7919:3:30","nodeType":"YulIdentifier","src":"7919:3:30"},"nativeSrc":"7919:18:30","nodeType":"YulFunctionCall","src":"7919:18:30"},{"name":"value1","nativeSrc":"7939:6:30","nodeType":"YulIdentifier","src":"7939:6:30"}],"functionName":{"name":"mstore","nativeSrc":"7912:6:30","nodeType":"YulIdentifier","src":"7912:6:30"},"nativeSrc":"7912:34:30","nodeType":"YulFunctionCall","src":"7912:34:30"},"nativeSrc":"7912:34:30","nodeType":"YulExpressionStatement","src":"7912:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7966:9:30","nodeType":"YulIdentifier","src":"7966:9:30"},{"kind":"number","nativeSrc":"7977:2:30","nodeType":"YulLiteral","src":"7977:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7962:3:30","nodeType":"YulIdentifier","src":"7962:3:30"},"nativeSrc":"7962:18:30","nodeType":"YulFunctionCall","src":"7962:18:30"},{"name":"value2","nativeSrc":"7982:6:30","nodeType":"YulIdentifier","src":"7982:6:30"}],"functionName":{"name":"mstore","nativeSrc":"7955:6:30","nodeType":"YulIdentifier","src":"7955:6:30"},"nativeSrc":"7955:34:30","nodeType":"YulFunctionCall","src":"7955:34:30"},"nativeSrc":"7955:34:30","nodeType":"YulExpressionStatement","src":"7955:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7627:368:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7737:9:30","nodeType":"YulTypedName","src":"7737:9:30","type":""},{"name":"value2","nativeSrc":"7748:6:30","nodeType":"YulTypedName","src":"7748:6:30","type":""},{"name":"value1","nativeSrc":"7756:6:30","nodeType":"YulTypedName","src":"7756:6:30","type":""},{"name":"value0","nativeSrc":"7764:6:30","nodeType":"YulTypedName","src":"7764:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7775:4:30","nodeType":"YulTypedName","src":"7775:4:30","type":""}],"src":"7627:368:30"},{"body":{"nativeSrc":"8052:116:30","nodeType":"YulBlock","src":"8052:116:30","statements":[{"nativeSrc":"8062:20:30","nodeType":"YulAssignment","src":"8062:20:30","value":{"arguments":[{"name":"x","nativeSrc":"8077:1:30","nodeType":"YulIdentifier","src":"8077:1:30"},{"name":"y","nativeSrc":"8080:1:30","nodeType":"YulIdentifier","src":"8080:1:30"}],"functionName":{"name":"mul","nativeSrc":"8073:3:30","nodeType":"YulIdentifier","src":"8073:3:30"},"nativeSrc":"8073:9:30","nodeType":"YulFunctionCall","src":"8073:9:30"},"variableNames":[{"name":"product","nativeSrc":"8062:7:30","nodeType":"YulIdentifier","src":"8062:7:30"}]},{"body":{"nativeSrc":"8140:22:30","nodeType":"YulBlock","src":"8140:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8142:16:30","nodeType":"YulIdentifier","src":"8142:16:30"},"nativeSrc":"8142:18:30","nodeType":"YulFunctionCall","src":"8142:18:30"},"nativeSrc":"8142:18:30","nodeType":"YulExpressionStatement","src":"8142:18:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8111:1:30","nodeType":"YulIdentifier","src":"8111:1:30"}],"functionName":{"name":"iszero","nativeSrc":"8104:6:30","nodeType":"YulIdentifier","src":"8104:6:30"},"nativeSrc":"8104:9:30","nodeType":"YulFunctionCall","src":"8104:9:30"},{"arguments":[{"name":"y","nativeSrc":"8118:1:30","nodeType":"YulIdentifier","src":"8118:1:30"},{"arguments":[{"name":"product","nativeSrc":"8125:7:30","nodeType":"YulIdentifier","src":"8125:7:30"},{"name":"x","nativeSrc":"8134:1:30","nodeType":"YulIdentifier","src":"8134:1:30"}],"functionName":{"name":"div","nativeSrc":"8121:3:30","nodeType":"YulIdentifier","src":"8121:3:30"},"nativeSrc":"8121:15:30","nodeType":"YulFunctionCall","src":"8121:15:30"}],"functionName":{"name":"eq","nativeSrc":"8115:2:30","nodeType":"YulIdentifier","src":"8115:2:30"},"nativeSrc":"8115:22:30","nodeType":"YulFunctionCall","src":"8115:22:30"}],"functionName":{"name":"or","nativeSrc":"8101:2:30","nodeType":"YulIdentifier","src":"8101:2:30"},"nativeSrc":"8101:37:30","nodeType":"YulFunctionCall","src":"8101:37:30"}],"functionName":{"name":"iszero","nativeSrc":"8094:6:30","nodeType":"YulIdentifier","src":"8094:6:30"},"nativeSrc":"8094:45:30","nodeType":"YulFunctionCall","src":"8094:45:30"},"nativeSrc":"8091:71:30","nodeType":"YulIf","src":"8091:71:30"}]},"name":"checked_mul_t_uint256","nativeSrc":"8000:168:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8031:1:30","nodeType":"YulTypedName","src":"8031:1:30","type":""},{"name":"y","nativeSrc":"8034:1:30","nodeType":"YulTypedName","src":"8034:1:30","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8040:7:30","nodeType":"YulTypedName","src":"8040:7:30","type":""}],"src":"8000:168:30"},{"body":{"nativeSrc":"8221:77:30","nodeType":"YulBlock","src":"8221:77:30","statements":[{"nativeSrc":"8231:16:30","nodeType":"YulAssignment","src":"8231:16:30","value":{"arguments":[{"name":"x","nativeSrc":"8242:1:30","nodeType":"YulIdentifier","src":"8242:1:30"},{"name":"y","nativeSrc":"8245:1:30","nodeType":"YulIdentifier","src":"8245:1:30"}],"functionName":{"name":"add","nativeSrc":"8238:3:30","nodeType":"YulIdentifier","src":"8238:3:30"},"nativeSrc":"8238:9:30","nodeType":"YulFunctionCall","src":"8238:9:30"},"variableNames":[{"name":"sum","nativeSrc":"8231:3:30","nodeType":"YulIdentifier","src":"8231:3:30"}]},{"body":{"nativeSrc":"8270:22:30","nodeType":"YulBlock","src":"8270:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8272:16:30","nodeType":"YulIdentifier","src":"8272:16:30"},"nativeSrc":"8272:18:30","nodeType":"YulFunctionCall","src":"8272:18:30"},"nativeSrc":"8272:18:30","nodeType":"YulExpressionStatement","src":"8272:18:30"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"8262:1:30","nodeType":"YulIdentifier","src":"8262:1:30"},{"name":"sum","nativeSrc":"8265:3:30","nodeType":"YulIdentifier","src":"8265:3:30"}],"functionName":{"name":"gt","nativeSrc":"8259:2:30","nodeType":"YulIdentifier","src":"8259:2:30"},"nativeSrc":"8259:10:30","nodeType":"YulFunctionCall","src":"8259:10:30"},"nativeSrc":"8256:36:30","nodeType":"YulIf","src":"8256:36:30"}]},"name":"checked_add_t_uint256","nativeSrc":"8173:125:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8204:1:30","nodeType":"YulTypedName","src":"8204:1:30","type":""},{"name":"y","nativeSrc":"8207:1:30","nodeType":"YulTypedName","src":"8207:1:30","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"8213:3:30","nodeType":"YulTypedName","src":"8213:3:30","type":""}],"src":"8173:125:30"},{"body":{"nativeSrc":"8432:168:30","nodeType":"YulBlock","src":"8432:168:30","statements":[{"nativeSrc":"8442:26:30","nodeType":"YulAssignment","src":"8442:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"8454:9:30","nodeType":"YulIdentifier","src":"8454:9:30"},{"kind":"number","nativeSrc":"8465:2:30","nodeType":"YulLiteral","src":"8465:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8450:3:30","nodeType":"YulIdentifier","src":"8450:3:30"},"nativeSrc":"8450:18:30","nodeType":"YulFunctionCall","src":"8450:18:30"},"variableNames":[{"name":"tail","nativeSrc":"8442:4:30","nodeType":"YulIdentifier","src":"8442:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8484:9:30","nodeType":"YulIdentifier","src":"8484:9:30"},{"arguments":[{"name":"value0","nativeSrc":"8499:6:30","nodeType":"YulIdentifier","src":"8499:6:30"},{"kind":"number","nativeSrc":"8507:42:30","nodeType":"YulLiteral","src":"8507:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8495:3:30","nodeType":"YulIdentifier","src":"8495:3:30"},"nativeSrc":"8495:55:30","nodeType":"YulFunctionCall","src":"8495:55:30"}],"functionName":{"name":"mstore","nativeSrc":"8477:6:30","nodeType":"YulIdentifier","src":"8477:6:30"},"nativeSrc":"8477:74:30","nodeType":"YulFunctionCall","src":"8477:74:30"},"nativeSrc":"8477:74:30","nodeType":"YulExpressionStatement","src":"8477:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8571:9:30","nodeType":"YulIdentifier","src":"8571:9:30"},{"kind":"number","nativeSrc":"8582:2:30","nodeType":"YulLiteral","src":"8582:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8567:3:30","nodeType":"YulIdentifier","src":"8567:3:30"},"nativeSrc":"8567:18:30","nodeType":"YulFunctionCall","src":"8567:18:30"},{"name":"value1","nativeSrc":"8587:6:30","nodeType":"YulIdentifier","src":"8587:6:30"}],"functionName":{"name":"mstore","nativeSrc":"8560:6:30","nodeType":"YulIdentifier","src":"8560:6:30"},"nativeSrc":"8560:34:30","nodeType":"YulFunctionCall","src":"8560:34:30"},"nativeSrc":"8560:34:30","nodeType":"YulExpressionStatement","src":"8560:34:30"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"8303:297:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8393:9:30","nodeType":"YulTypedName","src":"8393:9:30","type":""},{"name":"value1","nativeSrc":"8404:6:30","nodeType":"YulTypedName","src":"8404:6:30","type":""},{"name":"value0","nativeSrc":"8412:6:30","nodeType":"YulTypedName","src":"8412:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8423:4:30","nodeType":"YulTypedName","src":"8423:4:30","type":""}],"src":"8303:297:30"},{"body":{"nativeSrc":"8637:152:30","nodeType":"YulBlock","src":"8637:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8654:1:30","nodeType":"YulLiteral","src":"8654:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8657:77:30","nodeType":"YulLiteral","src":"8657:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8647:6:30","nodeType":"YulIdentifier","src":"8647:6:30"},"nativeSrc":"8647:88:30","nodeType":"YulFunctionCall","src":"8647:88:30"},"nativeSrc":"8647:88:30","nodeType":"YulExpressionStatement","src":"8647:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8751:1:30","nodeType":"YulLiteral","src":"8751:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"8754:4:30","nodeType":"YulLiteral","src":"8754:4:30","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8744:6:30","nodeType":"YulIdentifier","src":"8744:6:30"},"nativeSrc":"8744:15:30","nodeType":"YulFunctionCall","src":"8744:15:30"},"nativeSrc":"8744:15:30","nodeType":"YulExpressionStatement","src":"8744:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8775:1:30","nodeType":"YulLiteral","src":"8775:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8778:4:30","nodeType":"YulLiteral","src":"8778:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8768:6:30","nodeType":"YulIdentifier","src":"8768:6:30"},"nativeSrc":"8768:15:30","nodeType":"YulFunctionCall","src":"8768:15:30"},"nativeSrc":"8768:15:30","nodeType":"YulExpressionStatement","src":"8768:15:30"}]},"name":"panic_error_0x41","nativeSrc":"8605:184:30","nodeType":"YulFunctionDefinition","src":"8605:184:30"},{"body":{"nativeSrc":"8906:1132:30","nodeType":"YulBlock","src":"8906:1132:30","statements":[{"body":{"nativeSrc":"8952:16:30","nodeType":"YulBlock","src":"8952:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8961:1:30","nodeType":"YulLiteral","src":"8961:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"8964:1:30","nodeType":"YulLiteral","src":"8964:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8954:6:30","nodeType":"YulIdentifier","src":"8954:6:30"},"nativeSrc":"8954:12:30","nodeType":"YulFunctionCall","src":"8954:12:30"},"nativeSrc":"8954:12:30","nodeType":"YulExpressionStatement","src":"8954:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8927:7:30","nodeType":"YulIdentifier","src":"8927:7:30"},{"name":"headStart","nativeSrc":"8936:9:30","nodeType":"YulIdentifier","src":"8936:9:30"}],"functionName":{"name":"sub","nativeSrc":"8923:3:30","nodeType":"YulIdentifier","src":"8923:3:30"},"nativeSrc":"8923:23:30","nodeType":"YulFunctionCall","src":"8923:23:30"},{"kind":"number","nativeSrc":"8948:2:30","nodeType":"YulLiteral","src":"8948:2:30","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8919:3:30","nodeType":"YulIdentifier","src":"8919:3:30"},"nativeSrc":"8919:32:30","nodeType":"YulFunctionCall","src":"8919:32:30"},"nativeSrc":"8916:52:30","nodeType":"YulIf","src":"8916:52:30"},{"nativeSrc":"8977:37:30","nodeType":"YulVariableDeclaration","src":"8977:37:30","value":{"arguments":[{"name":"headStart","nativeSrc":"9004:9:30","nodeType":"YulIdentifier","src":"9004:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"8991:12:30","nodeType":"YulIdentifier","src":"8991:12:30"},"nativeSrc":"8991:23:30","nodeType":"YulFunctionCall","src":"8991:23:30"},"variables":[{"name":"offset","nativeSrc":"8981:6:30","nodeType":"YulTypedName","src":"8981:6:30","type":""}]},{"nativeSrc":"9023:28:30","nodeType":"YulVariableDeclaration","src":"9023:28:30","value":{"kind":"number","nativeSrc":"9033:18:30","nodeType":"YulLiteral","src":"9033:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9027:2:30","nodeType":"YulTypedName","src":"9027:2:30","type":""}]},{"body":{"nativeSrc":"9078:16:30","nodeType":"YulBlock","src":"9078:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9087:1:30","nodeType":"YulLiteral","src":"9087:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"9090:1:30","nodeType":"YulLiteral","src":"9090:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9080:6:30","nodeType":"YulIdentifier","src":"9080:6:30"},"nativeSrc":"9080:12:30","nodeType":"YulFunctionCall","src":"9080:12:30"},"nativeSrc":"9080:12:30","nodeType":"YulExpressionStatement","src":"9080:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9066:6:30","nodeType":"YulIdentifier","src":"9066:6:30"},{"name":"_1","nativeSrc":"9074:2:30","nodeType":"YulIdentifier","src":"9074:2:30"}],"functionName":{"name":"gt","nativeSrc":"9063:2:30","nodeType":"YulIdentifier","src":"9063:2:30"},"nativeSrc":"9063:14:30","nodeType":"YulFunctionCall","src":"9063:14:30"},"nativeSrc":"9060:34:30","nodeType":"YulIf","src":"9060:34:30"},{"nativeSrc":"9103:32:30","nodeType":"YulVariableDeclaration","src":"9103:32:30","value":{"arguments":[{"name":"headStart","nativeSrc":"9117:9:30","nodeType":"YulIdentifier","src":"9117:9:30"},{"name":"offset","nativeSrc":"9128:6:30","nodeType":"YulIdentifier","src":"9128:6:30"}],"functionName":{"name":"add","nativeSrc":"9113:3:30","nodeType":"YulIdentifier","src":"9113:3:30"},"nativeSrc":"9113:22:30","nodeType":"YulFunctionCall","src":"9113:22:30"},"variables":[{"name":"_2","nativeSrc":"9107:2:30","nodeType":"YulTypedName","src":"9107:2:30","type":""}]},{"body":{"nativeSrc":"9183:16:30","nodeType":"YulBlock","src":"9183:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9192:1:30","nodeType":"YulLiteral","src":"9192:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"9195:1:30","nodeType":"YulLiteral","src":"9195:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9185:6:30","nodeType":"YulIdentifier","src":"9185:6:30"},"nativeSrc":"9185:12:30","nodeType":"YulFunctionCall","src":"9185:12:30"},"nativeSrc":"9185:12:30","nodeType":"YulExpressionStatement","src":"9185:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9162:2:30","nodeType":"YulIdentifier","src":"9162:2:30"},{"kind":"number","nativeSrc":"9166:4:30","nodeType":"YulLiteral","src":"9166:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9158:3:30","nodeType":"YulIdentifier","src":"9158:3:30"},"nativeSrc":"9158:13:30","nodeType":"YulFunctionCall","src":"9158:13:30"},{"name":"dataEnd","nativeSrc":"9173:7:30","nodeType":"YulIdentifier","src":"9173:7:30"}],"functionName":{"name":"slt","nativeSrc":"9154:3:30","nodeType":"YulIdentifier","src":"9154:3:30"},"nativeSrc":"9154:27:30","nodeType":"YulFunctionCall","src":"9154:27:30"}],"functionName":{"name":"iszero","nativeSrc":"9147:6:30","nodeType":"YulIdentifier","src":"9147:6:30"},"nativeSrc":"9147:35:30","nodeType":"YulFunctionCall","src":"9147:35:30"},"nativeSrc":"9144:55:30","nodeType":"YulIf","src":"9144:55:30"},{"nativeSrc":"9208:26:30","nodeType":"YulVariableDeclaration","src":"9208:26:30","value":{"arguments":[{"name":"_2","nativeSrc":"9231:2:30","nodeType":"YulIdentifier","src":"9231:2:30"}],"functionName":{"name":"calldataload","nativeSrc":"9218:12:30","nodeType":"YulIdentifier","src":"9218:12:30"},"nativeSrc":"9218:16:30","nodeType":"YulFunctionCall","src":"9218:16:30"},"variables":[{"name":"_3","nativeSrc":"9212:2:30","nodeType":"YulTypedName","src":"9212:2:30","type":""}]},{"nativeSrc":"9243:14:30","nodeType":"YulVariableDeclaration","src":"9243:14:30","value":{"kind":"number","nativeSrc":"9253:4:30","nodeType":"YulLiteral","src":"9253:4:30","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"9247:2:30","nodeType":"YulTypedName","src":"9247:2:30","type":""}]},{"body":{"nativeSrc":"9280:22:30","nodeType":"YulBlock","src":"9280:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9282:16:30","nodeType":"YulIdentifier","src":"9282:16:30"},"nativeSrc":"9282:18:30","nodeType":"YulFunctionCall","src":"9282:18:30"},"nativeSrc":"9282:18:30","nodeType":"YulExpressionStatement","src":"9282:18:30"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"9272:2:30","nodeType":"YulIdentifier","src":"9272:2:30"},{"name":"_1","nativeSrc":"9276:2:30","nodeType":"YulIdentifier","src":"9276:2:30"}],"functionName":{"name":"gt","nativeSrc":"9269:2:30","nodeType":"YulIdentifier","src":"9269:2:30"},"nativeSrc":"9269:10:30","nodeType":"YulFunctionCall","src":"9269:10:30"},"nativeSrc":"9266:36:30","nodeType":"YulIf","src":"9266:36:30"},{"nativeSrc":"9311:20:30","nodeType":"YulVariableDeclaration","src":"9311:20:30","value":{"arguments":[{"kind":"number","nativeSrc":"9325:1:30","nodeType":"YulLiteral","src":"9325:1:30","type":"","value":"5"},{"name":"_3","nativeSrc":"9328:2:30","nodeType":"YulIdentifier","src":"9328:2:30"}],"functionName":{"name":"shl","nativeSrc":"9321:3:30","nodeType":"YulIdentifier","src":"9321:3:30"},"nativeSrc":"9321:10:30","nodeType":"YulFunctionCall","src":"9321:10:30"},"variables":[{"name":"_5","nativeSrc":"9315:2:30","nodeType":"YulTypedName","src":"9315:2:30","type":""}]},{"nativeSrc":"9340:23:30","nodeType":"YulVariableDeclaration","src":"9340:23:30","value":{"arguments":[{"kind":"number","nativeSrc":"9360:2:30","nodeType":"YulLiteral","src":"9360:2:30","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"9354:5:30","nodeType":"YulIdentifier","src":"9354:5:30"},"nativeSrc":"9354:9:30","nodeType":"YulFunctionCall","src":"9354:9:30"},"variables":[{"name":"memPtr","nativeSrc":"9344:6:30","nodeType":"YulTypedName","src":"9344:6:30","type":""}]},{"nativeSrc":"9372:115:30","nodeType":"YulVariableDeclaration","src":"9372:115:30","value":{"arguments":[{"name":"memPtr","nativeSrc":"9394:6:30","nodeType":"YulIdentifier","src":"9394:6:30"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"9410:2:30","nodeType":"YulIdentifier","src":"9410:2:30"},{"kind":"number","nativeSrc":"9414:2:30","nodeType":"YulLiteral","src":"9414:2:30","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"9406:3:30","nodeType":"YulIdentifier","src":"9406:3:30"},"nativeSrc":"9406:11:30","nodeType":"YulFunctionCall","src":"9406:11:30"},{"kind":"number","nativeSrc":"9419:66:30","nodeType":"YulLiteral","src":"9419:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"9402:3:30","nodeType":"YulIdentifier","src":"9402:3:30"},"nativeSrc":"9402:84:30","nodeType":"YulFunctionCall","src":"9402:84:30"}],"functionName":{"name":"add","nativeSrc":"9390:3:30","nodeType":"YulIdentifier","src":"9390:3:30"},"nativeSrc":"9390:97:30","nodeType":"YulFunctionCall","src":"9390:97:30"},"variables":[{"name":"newFreePtr","nativeSrc":"9376:10:30","nodeType":"YulTypedName","src":"9376:10:30","type":""}]},{"body":{"nativeSrc":"9546:22:30","nodeType":"YulBlock","src":"9546:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9548:16:30","nodeType":"YulIdentifier","src":"9548:16:30"},"nativeSrc":"9548:18:30","nodeType":"YulFunctionCall","src":"9548:18:30"},"nativeSrc":"9548:18:30","nodeType":"YulExpressionStatement","src":"9548:18:30"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9505:10:30","nodeType":"YulIdentifier","src":"9505:10:30"},{"name":"_1","nativeSrc":"9517:2:30","nodeType":"YulIdentifier","src":"9517:2:30"}],"functionName":{"name":"gt","nativeSrc":"9502:2:30","nodeType":"YulIdentifier","src":"9502:2:30"},"nativeSrc":"9502:18:30","nodeType":"YulFunctionCall","src":"9502:18:30"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9525:10:30","nodeType":"YulIdentifier","src":"9525:10:30"},{"name":"memPtr","nativeSrc":"9537:6:30","nodeType":"YulIdentifier","src":"9537:6:30"}],"functionName":{"name":"lt","nativeSrc":"9522:2:30","nodeType":"YulIdentifier","src":"9522:2:30"},"nativeSrc":"9522:22:30","nodeType":"YulFunctionCall","src":"9522:22:30"}],"functionName":{"name":"or","nativeSrc":"9499:2:30","nodeType":"YulIdentifier","src":"9499:2:30"},"nativeSrc":"9499:46:30","nodeType":"YulFunctionCall","src":"9499:46:30"},"nativeSrc":"9496:72:30","nodeType":"YulIf","src":"9496:72:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9584:2:30","nodeType":"YulLiteral","src":"9584:2:30","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9588:10:30","nodeType":"YulIdentifier","src":"9588:10:30"}],"functionName":{"name":"mstore","nativeSrc":"9577:6:30","nodeType":"YulIdentifier","src":"9577:6:30"},"nativeSrc":"9577:22:30","nodeType":"YulFunctionCall","src":"9577:22:30"},"nativeSrc":"9577:22:30","nodeType":"YulExpressionStatement","src":"9577:22:30"},{"nativeSrc":"9608:17:30","nodeType":"YulVariableDeclaration","src":"9608:17:30","value":{"name":"memPtr","nativeSrc":"9619:6:30","nodeType":"YulIdentifier","src":"9619:6:30"},"variables":[{"name":"dst","nativeSrc":"9612:3:30","nodeType":"YulTypedName","src":"9612:3:30","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9641:6:30","nodeType":"YulIdentifier","src":"9641:6:30"},{"name":"_3","nativeSrc":"9649:2:30","nodeType":"YulIdentifier","src":"9649:2:30"}],"functionName":{"name":"mstore","nativeSrc":"9634:6:30","nodeType":"YulIdentifier","src":"9634:6:30"},"nativeSrc":"9634:18:30","nodeType":"YulFunctionCall","src":"9634:18:30"},"nativeSrc":"9634:18:30","nodeType":"YulExpressionStatement","src":"9634:18:30"},{"nativeSrc":"9661:22:30","nodeType":"YulAssignment","src":"9661:22:30","value":{"arguments":[{"name":"memPtr","nativeSrc":"9672:6:30","nodeType":"YulIdentifier","src":"9672:6:30"},{"name":"_4","nativeSrc":"9680:2:30","nodeType":"YulIdentifier","src":"9680:2:30"}],"functionName":{"name":"add","nativeSrc":"9668:3:30","nodeType":"YulIdentifier","src":"9668:3:30"},"nativeSrc":"9668:15:30","nodeType":"YulFunctionCall","src":"9668:15:30"},"variableNames":[{"name":"dst","nativeSrc":"9661:3:30","nodeType":"YulIdentifier","src":"9661:3:30"}]},{"nativeSrc":"9692:34:30","nodeType":"YulVariableDeclaration","src":"9692:34:30","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9714:2:30","nodeType":"YulIdentifier","src":"9714:2:30"},{"name":"_5","nativeSrc":"9718:2:30","nodeType":"YulIdentifier","src":"9718:2:30"}],"functionName":{"name":"add","nativeSrc":"9710:3:30","nodeType":"YulIdentifier","src":"9710:3:30"},"nativeSrc":"9710:11:30","nodeType":"YulFunctionCall","src":"9710:11:30"},{"name":"_4","nativeSrc":"9723:2:30","nodeType":"YulIdentifier","src":"9723:2:30"}],"functionName":{"name":"add","nativeSrc":"9706:3:30","nodeType":"YulIdentifier","src":"9706:3:30"},"nativeSrc":"9706:20:30","nodeType":"YulFunctionCall","src":"9706:20:30"},"variables":[{"name":"srcEnd","nativeSrc":"9696:6:30","nodeType":"YulTypedName","src":"9696:6:30","type":""}]},{"body":{"nativeSrc":"9758:16:30","nodeType":"YulBlock","src":"9758:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9767:1:30","nodeType":"YulLiteral","src":"9767:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"9770:1:30","nodeType":"YulLiteral","src":"9770:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9760:6:30","nodeType":"YulIdentifier","src":"9760:6:30"},"nativeSrc":"9760:12:30","nodeType":"YulFunctionCall","src":"9760:12:30"},"nativeSrc":"9760:12:30","nodeType":"YulExpressionStatement","src":"9760:12:30"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9741:6:30","nodeType":"YulIdentifier","src":"9741:6:30"},{"name":"dataEnd","nativeSrc":"9749:7:30","nodeType":"YulIdentifier","src":"9749:7:30"}],"functionName":{"name":"gt","nativeSrc":"9738:2:30","nodeType":"YulIdentifier","src":"9738:2:30"},"nativeSrc":"9738:19:30","nodeType":"YulFunctionCall","src":"9738:19:30"},"nativeSrc":"9735:39:30","nodeType":"YulIf","src":"9735:39:30"},{"nativeSrc":"9783:22:30","nodeType":"YulVariableDeclaration","src":"9783:22:30","value":{"arguments":[{"name":"_2","nativeSrc":"9798:2:30","nodeType":"YulIdentifier","src":"9798:2:30"},{"name":"_4","nativeSrc":"9802:2:30","nodeType":"YulIdentifier","src":"9802:2:30"}],"functionName":{"name":"add","nativeSrc":"9794:3:30","nodeType":"YulIdentifier","src":"9794:3:30"},"nativeSrc":"9794:11:30","nodeType":"YulFunctionCall","src":"9794:11:30"},"variables":[{"name":"src","nativeSrc":"9787:3:30","nodeType":"YulTypedName","src":"9787:3:30","type":""}]},{"body":{"nativeSrc":"9870:86:30","nodeType":"YulBlock","src":"9870:86:30","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9891:3:30","nodeType":"YulIdentifier","src":"9891:3:30"},{"arguments":[{"name":"src","nativeSrc":"9909:3:30","nodeType":"YulIdentifier","src":"9909:3:30"}],"functionName":{"name":"calldataload","nativeSrc":"9896:12:30","nodeType":"YulIdentifier","src":"9896:12:30"},"nativeSrc":"9896:17:30","nodeType":"YulFunctionCall","src":"9896:17:30"}],"functionName":{"name":"mstore","nativeSrc":"9884:6:30","nodeType":"YulIdentifier","src":"9884:6:30"},"nativeSrc":"9884:30:30","nodeType":"YulFunctionCall","src":"9884:30:30"},"nativeSrc":"9884:30:30","nodeType":"YulExpressionStatement","src":"9884:30:30"},{"nativeSrc":"9927:19:30","nodeType":"YulAssignment","src":"9927:19:30","value":{"arguments":[{"name":"dst","nativeSrc":"9938:3:30","nodeType":"YulIdentifier","src":"9938:3:30"},{"name":"_4","nativeSrc":"9943:2:30","nodeType":"YulIdentifier","src":"9943:2:30"}],"functionName":{"name":"add","nativeSrc":"9934:3:30","nodeType":"YulIdentifier","src":"9934:3:30"},"nativeSrc":"9934:12:30","nodeType":"YulFunctionCall","src":"9934:12:30"},"variableNames":[{"name":"dst","nativeSrc":"9927:3:30","nodeType":"YulIdentifier","src":"9927:3:30"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9825:3:30","nodeType":"YulIdentifier","src":"9825:3:30"},{"name":"srcEnd","nativeSrc":"9830:6:30","nodeType":"YulIdentifier","src":"9830:6:30"}],"functionName":{"name":"lt","nativeSrc":"9822:2:30","nodeType":"YulIdentifier","src":"9822:2:30"},"nativeSrc":"9822:15:30","nodeType":"YulFunctionCall","src":"9822:15:30"},"nativeSrc":"9814:142:30","nodeType":"YulForLoop","post":{"nativeSrc":"9838:23:30","nodeType":"YulBlock","src":"9838:23:30","statements":[{"nativeSrc":"9840:19:30","nodeType":"YulAssignment","src":"9840:19:30","value":{"arguments":[{"name":"src","nativeSrc":"9851:3:30","nodeType":"YulIdentifier","src":"9851:3:30"},{"name":"_4","nativeSrc":"9856:2:30","nodeType":"YulIdentifier","src":"9856:2:30"}],"functionName":{"name":"add","nativeSrc":"9847:3:30","nodeType":"YulIdentifier","src":"9847:3:30"},"nativeSrc":"9847:12:30","nodeType":"YulFunctionCall","src":"9847:12:30"},"variableNames":[{"name":"src","nativeSrc":"9840:3:30","nodeType":"YulIdentifier","src":"9840:3:30"}]}]},"pre":{"nativeSrc":"9818:3:30","nodeType":"YulBlock","src":"9818:3:30","statements":[]},"src":"9814:142:30"},{"nativeSrc":"9965:16:30","nodeType":"YulAssignment","src":"9965:16:30","value":{"name":"memPtr","nativeSrc":"9975:6:30","nodeType":"YulIdentifier","src":"9975:6:30"},"variableNames":[{"name":"value0","nativeSrc":"9965:6:30","nodeType":"YulIdentifier","src":"9965:6:30"}]},{"nativeSrc":"9990:42:30","nodeType":"YulAssignment","src":"9990:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10017:9:30","nodeType":"YulIdentifier","src":"10017:9:30"},{"name":"_4","nativeSrc":"10028:2:30","nodeType":"YulIdentifier","src":"10028:2:30"}],"functionName":{"name":"add","nativeSrc":"10013:3:30","nodeType":"YulIdentifier","src":"10013:3:30"},"nativeSrc":"10013:18:30","nodeType":"YulFunctionCall","src":"10013:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"10000:12:30","nodeType":"YulIdentifier","src":"10000:12:30"},"nativeSrc":"10000:32:30","nodeType":"YulFunctionCall","src":"10000:32:30"},"variableNames":[{"name":"value1","nativeSrc":"9990:6:30","nodeType":"YulIdentifier","src":"9990:6:30"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8794:1244:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8864:9:30","nodeType":"YulTypedName","src":"8864:9:30","type":""},{"name":"dataEnd","nativeSrc":"8875:7:30","nodeType":"YulTypedName","src":"8875:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8887:6:30","nodeType":"YulTypedName","src":"8887:6:30","type":""},{"name":"value1","nativeSrc":"8895:6:30","nodeType":"YulTypedName","src":"8895:6:30","type":""}],"src":"8794:1244:30"},{"body":{"nativeSrc":"10190:182:30","nodeType":"YulBlock","src":"10190:182:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10207:3:30","nodeType":"YulIdentifier","src":"10207:3:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10220:2:30","nodeType":"YulLiteral","src":"10220:2:30","type":"","value":"96"},{"name":"value0","nativeSrc":"10224:6:30","nodeType":"YulIdentifier","src":"10224:6:30"}],"functionName":{"name":"shl","nativeSrc":"10216:3:30","nodeType":"YulIdentifier","src":"10216:3:30"},"nativeSrc":"10216:15:30","nodeType":"YulFunctionCall","src":"10216:15:30"},{"kind":"number","nativeSrc":"10233:66:30","nodeType":"YulLiteral","src":"10233:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10212:3:30","nodeType":"YulIdentifier","src":"10212:3:30"},"nativeSrc":"10212:88:30","nodeType":"YulFunctionCall","src":"10212:88:30"}],"functionName":{"name":"mstore","nativeSrc":"10200:6:30","nodeType":"YulIdentifier","src":"10200:6:30"},"nativeSrc":"10200:101:30","nodeType":"YulFunctionCall","src":"10200:101:30"},"nativeSrc":"10200:101:30","nodeType":"YulExpressionStatement","src":"10200:101:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10321:3:30","nodeType":"YulIdentifier","src":"10321:3:30"},{"kind":"number","nativeSrc":"10326:2:30","nodeType":"YulLiteral","src":"10326:2:30","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10317:3:30","nodeType":"YulIdentifier","src":"10317:3:30"},"nativeSrc":"10317:12:30","nodeType":"YulFunctionCall","src":"10317:12:30"},{"name":"value1","nativeSrc":"10331:6:30","nodeType":"YulIdentifier","src":"10331:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10310:6:30","nodeType":"YulIdentifier","src":"10310:6:30"},"nativeSrc":"10310:28:30","nodeType":"YulFunctionCall","src":"10310:28:30"},"nativeSrc":"10310:28:30","nodeType":"YulExpressionStatement","src":"10310:28:30"},{"nativeSrc":"10347:19:30","nodeType":"YulAssignment","src":"10347:19:30","value":{"arguments":[{"name":"pos","nativeSrc":"10358:3:30","nodeType":"YulIdentifier","src":"10358:3:30"},{"kind":"number","nativeSrc":"10363:2:30","nodeType":"YulLiteral","src":"10363:2:30","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"10354:3:30","nodeType":"YulIdentifier","src":"10354:3:30"},"nativeSrc":"10354:12:30","nodeType":"YulFunctionCall","src":"10354:12:30"},"variableNames":[{"name":"end","nativeSrc":"10347:3:30","nodeType":"YulIdentifier","src":"10347:3:30"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"10043:329:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10158:3:30","nodeType":"YulTypedName","src":"10158:3:30","type":""},{"name":"value1","nativeSrc":"10163:6:30","nodeType":"YulTypedName","src":"10163:6:30","type":""},{"name":"value0","nativeSrc":"10171:6:30","nodeType":"YulTypedName","src":"10171:6:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10182:3:30","nodeType":"YulTypedName","src":"10182:3:30","type":""}],"src":"10043:329:30"},{"body":{"nativeSrc":"10506:119:30","nodeType":"YulBlock","src":"10506:119:30","statements":[{"nativeSrc":"10516:26:30","nodeType":"YulAssignment","src":"10516:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"10528:9:30","nodeType":"YulIdentifier","src":"10528:9:30"},{"kind":"number","nativeSrc":"10539:2:30","nodeType":"YulLiteral","src":"10539:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10524:3:30","nodeType":"YulIdentifier","src":"10524:3:30"},"nativeSrc":"10524:18:30","nodeType":"YulFunctionCall","src":"10524:18:30"},"variableNames":[{"name":"tail","nativeSrc":"10516:4:30","nodeType":"YulIdentifier","src":"10516:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10558:9:30","nodeType":"YulIdentifier","src":"10558:9:30"},{"name":"value0","nativeSrc":"10569:6:30","nodeType":"YulIdentifier","src":"10569:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10551:6:30","nodeType":"YulIdentifier","src":"10551:6:30"},"nativeSrc":"10551:25:30","nodeType":"YulFunctionCall","src":"10551:25:30"},"nativeSrc":"10551:25:30","nodeType":"YulExpressionStatement","src":"10551:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10596:9:30","nodeType":"YulIdentifier","src":"10596:9:30"},{"kind":"number","nativeSrc":"10607:2:30","nodeType":"YulLiteral","src":"10607:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10592:3:30","nodeType":"YulIdentifier","src":"10592:3:30"},"nativeSrc":"10592:18:30","nodeType":"YulFunctionCall","src":"10592:18:30"},{"name":"value1","nativeSrc":"10612:6:30","nodeType":"YulIdentifier","src":"10612:6:30"}],"functionName":{"name":"mstore","nativeSrc":"10585:6:30","nodeType":"YulIdentifier","src":"10585:6:30"},"nativeSrc":"10585:34:30","nodeType":"YulFunctionCall","src":"10585:34:30"},"nativeSrc":"10585:34:30","nodeType":"YulExpressionStatement","src":"10585:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10377:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10467:9:30","nodeType":"YulTypedName","src":"10467:9:30","type":""},{"name":"value1","nativeSrc":"10478:6:30","nodeType":"YulTypedName","src":"10478:6:30","type":""},{"name":"value0","nativeSrc":"10486:6:30","nodeType":"YulTypedName","src":"10486:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10497:4:30","nodeType":"YulTypedName","src":"10497:4:30","type":""}],"src":"10377:248:30"},{"body":{"nativeSrc":"10963:402:30","nodeType":"YulBlock","src":"10963:402:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10980:9:30","nodeType":"YulIdentifier","src":"10980:9:30"},{"kind":"number","nativeSrc":"10991:3:30","nodeType":"YulLiteral","src":"10991:3:30","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10973:6:30","nodeType":"YulIdentifier","src":"10973:6:30"},"nativeSrc":"10973:22:30","nodeType":"YulFunctionCall","src":"10973:22:30"},"nativeSrc":"10973:22:30","nodeType":"YulExpressionStatement","src":"10973:22:30"},{"nativeSrc":"11004:88:30","nodeType":"YulVariableDeclaration","src":"11004:88:30","value":{"arguments":[{"name":"value0","nativeSrc":"11056:6:30","nodeType":"YulIdentifier","src":"11056:6:30"},{"name":"value1","nativeSrc":"11064:6:30","nodeType":"YulIdentifier","src":"11064:6:30"},{"arguments":[{"name":"headStart","nativeSrc":"11076:9:30","nodeType":"YulIdentifier","src":"11076:9:30"},{"kind":"number","nativeSrc":"11087:3:30","nodeType":"YulLiteral","src":"11087:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11072:3:30","nodeType":"YulIdentifier","src":"11072:3:30"},"nativeSrc":"11072:19:30","nodeType":"YulFunctionCall","src":"11072:19:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11018:37:30","nodeType":"YulIdentifier","src":"11018:37:30"},"nativeSrc":"11018:74:30","nodeType":"YulFunctionCall","src":"11018:74:30"},"variables":[{"name":"tail_1","nativeSrc":"11008:6:30","nodeType":"YulTypedName","src":"11008:6:30","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11112:9:30","nodeType":"YulIdentifier","src":"11112:9:30"},{"kind":"number","nativeSrc":"11123:2:30","nodeType":"YulLiteral","src":"11123:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11108:3:30","nodeType":"YulIdentifier","src":"11108:3:30"},"nativeSrc":"11108:18:30","nodeType":"YulFunctionCall","src":"11108:18:30"},{"arguments":[{"name":"tail_1","nativeSrc":"11132:6:30","nodeType":"YulIdentifier","src":"11132:6:30"},{"name":"headStart","nativeSrc":"11140:9:30","nodeType":"YulIdentifier","src":"11140:9:30"}],"functionName":{"name":"sub","nativeSrc":"11128:3:30","nodeType":"YulIdentifier","src":"11128:3:30"},"nativeSrc":"11128:22:30","nodeType":"YulFunctionCall","src":"11128:22:30"}],"functionName":{"name":"mstore","nativeSrc":"11101:6:30","nodeType":"YulIdentifier","src":"11101:6:30"},"nativeSrc":"11101:50:30","nodeType":"YulFunctionCall","src":"11101:50:30"},"nativeSrc":"11101:50:30","nodeType":"YulExpressionStatement","src":"11101:50:30"},{"nativeSrc":"11160:69:30","nodeType":"YulAssignment","src":"11160:69:30","value":{"arguments":[{"name":"value2","nativeSrc":"11206:6:30","nodeType":"YulIdentifier","src":"11206:6:30"},{"name":"value3","nativeSrc":"11214:6:30","nodeType":"YulIdentifier","src":"11214:6:30"},{"name":"tail_1","nativeSrc":"11222:6:30","nodeType":"YulIdentifier","src":"11222:6:30"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11168:37:30","nodeType":"YulIdentifier","src":"11168:37:30"},"nativeSrc":"11168:61:30","nodeType":"YulFunctionCall","src":"11168:61:30"},"variableNames":[{"name":"tail","nativeSrc":"11160:4:30","nodeType":"YulIdentifier","src":"11160:4:30"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11249:9:30","nodeType":"YulIdentifier","src":"11249:9:30"},{"kind":"number","nativeSrc":"11260:2:30","nodeType":"YulLiteral","src":"11260:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11245:3:30","nodeType":"YulIdentifier","src":"11245:3:30"},"nativeSrc":"11245:18:30","nodeType":"YulFunctionCall","src":"11245:18:30"},{"name":"value4","nativeSrc":"11265:6:30","nodeType":"YulIdentifier","src":"11265:6:30"}],"functionName":{"name":"mstore","nativeSrc":"11238:6:30","nodeType":"YulIdentifier","src":"11238:6:30"},"nativeSrc":"11238:34:30","nodeType":"YulFunctionCall","src":"11238:34:30"},"nativeSrc":"11238:34:30","nodeType":"YulExpressionStatement","src":"11238:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11292:9:30","nodeType":"YulIdentifier","src":"11292:9:30"},{"kind":"number","nativeSrc":"11303:2:30","nodeType":"YulLiteral","src":"11303:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11288:3:30","nodeType":"YulIdentifier","src":"11288:3:30"},"nativeSrc":"11288:18:30","nodeType":"YulFunctionCall","src":"11288:18:30"},{"name":"value5","nativeSrc":"11308:6:30","nodeType":"YulIdentifier","src":"11308:6:30"}],"functionName":{"name":"mstore","nativeSrc":"11281:6:30","nodeType":"YulIdentifier","src":"11281:6:30"},"nativeSrc":"11281:34:30","nodeType":"YulFunctionCall","src":"11281:34:30"},"nativeSrc":"11281:34:30","nodeType":"YulExpressionStatement","src":"11281:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11335:9:30","nodeType":"YulIdentifier","src":"11335:9:30"},{"kind":"number","nativeSrc":"11346:3:30","nodeType":"YulLiteral","src":"11346:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11331:3:30","nodeType":"YulIdentifier","src":"11331:3:30"},"nativeSrc":"11331:19:30","nodeType":"YulFunctionCall","src":"11331:19:30"},{"name":"value6","nativeSrc":"11352:6:30","nodeType":"YulIdentifier","src":"11352:6:30"}],"functionName":{"name":"mstore","nativeSrc":"11324:6:30","nodeType":"YulIdentifier","src":"11324:6:30"},"nativeSrc":"11324:35:30","nodeType":"YulFunctionCall","src":"11324:35:30"},"nativeSrc":"11324:35:30","nodeType":"YulExpressionStatement","src":"11324:35:30"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10630:735:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10884:9:30","nodeType":"YulTypedName","src":"10884:9:30","type":""},{"name":"value6","nativeSrc":"10895:6:30","nodeType":"YulTypedName","src":"10895:6:30","type":""},{"name":"value5","nativeSrc":"10903:6:30","nodeType":"YulTypedName","src":"10903:6:30","type":""},{"name":"value4","nativeSrc":"10911:6:30","nodeType":"YulTypedName","src":"10911:6:30","type":""},{"name":"value3","nativeSrc":"10919:6:30","nodeType":"YulTypedName","src":"10919:6:30","type":""},{"name":"value2","nativeSrc":"10927:6:30","nodeType":"YulTypedName","src":"10927:6:30","type":""},{"name":"value1","nativeSrc":"10935:6:30","nodeType":"YulTypedName","src":"10935:6:30","type":""},{"name":"value0","nativeSrc":"10943:6:30","nodeType":"YulTypedName","src":"10943:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10954:4:30","nodeType":"YulTypedName","src":"10954:4:30","type":""}],"src":"10630:735:30"},{"body":{"nativeSrc":"11499:198:30","nodeType":"YulBlock","src":"11499:198:30","statements":[{"nativeSrc":"11509:26:30","nodeType":"YulAssignment","src":"11509:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"11521:9:30","nodeType":"YulIdentifier","src":"11521:9:30"},{"kind":"number","nativeSrc":"11532:2:30","nodeType":"YulLiteral","src":"11532:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11517:3:30","nodeType":"YulIdentifier","src":"11517:3:30"},"nativeSrc":"11517:18:30","nodeType":"YulFunctionCall","src":"11517:18:30"},"variableNames":[{"name":"tail","nativeSrc":"11509:4:30","nodeType":"YulIdentifier","src":"11509:4:30"}]},{"nativeSrc":"11544:52:30","nodeType":"YulVariableDeclaration","src":"11544:52:30","value":{"kind":"number","nativeSrc":"11554:42:30","nodeType":"YulLiteral","src":"11554:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"11548:2:30","nodeType":"YulTypedName","src":"11548:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11612:9:30","nodeType":"YulIdentifier","src":"11612:9:30"},{"arguments":[{"name":"value0","nativeSrc":"11627:6:30","nodeType":"YulIdentifier","src":"11627:6:30"},{"name":"_1","nativeSrc":"11635:2:30","nodeType":"YulIdentifier","src":"11635:2:30"}],"functionName":{"name":"and","nativeSrc":"11623:3:30","nodeType":"YulIdentifier","src":"11623:3:30"},"nativeSrc":"11623:15:30","nodeType":"YulFunctionCall","src":"11623:15:30"}],"functionName":{"name":"mstore","nativeSrc":"11605:6:30","nodeType":"YulIdentifier","src":"11605:6:30"},"nativeSrc":"11605:34:30","nodeType":"YulFunctionCall","src":"11605:34:30"},"nativeSrc":"11605:34:30","nodeType":"YulExpressionStatement","src":"11605:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11659:9:30","nodeType":"YulIdentifier","src":"11659:9:30"},{"kind":"number","nativeSrc":"11670:2:30","nodeType":"YulLiteral","src":"11670:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11655:3:30","nodeType":"YulIdentifier","src":"11655:3:30"},"nativeSrc":"11655:18:30","nodeType":"YulFunctionCall","src":"11655:18:30"},{"arguments":[{"name":"value1","nativeSrc":"11679:6:30","nodeType":"YulIdentifier","src":"11679:6:30"},{"name":"_1","nativeSrc":"11687:2:30","nodeType":"YulIdentifier","src":"11687:2:30"}],"functionName":{"name":"and","nativeSrc":"11675:3:30","nodeType":"YulIdentifier","src":"11675:3:30"},"nativeSrc":"11675:15:30","nodeType":"YulFunctionCall","src":"11675:15:30"}],"functionName":{"name":"mstore","nativeSrc":"11648:6:30","nodeType":"YulIdentifier","src":"11648:6:30"},"nativeSrc":"11648:43:30","nodeType":"YulFunctionCall","src":"11648:43:30"},"nativeSrc":"11648:43:30","nodeType":"YulExpressionStatement","src":"11648:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"11370:327:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11460:9:30","nodeType":"YulTypedName","src":"11460:9:30","type":""},{"name":"value1","nativeSrc":"11471:6:30","nodeType":"YulTypedName","src":"11471:6:30","type":""},{"name":"value0","nativeSrc":"11479:6:30","nodeType":"YulTypedName","src":"11479:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11490:4:30","nodeType":"YulTypedName","src":"11490:4:30","type":""}],"src":"11370:327:30"},{"body":{"nativeSrc":"11780:199:30","nodeType":"YulBlock","src":"11780:199:30","statements":[{"body":{"nativeSrc":"11826:16:30","nodeType":"YulBlock","src":"11826:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11835:1:30","nodeType":"YulLiteral","src":"11835:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"11838:1:30","nodeType":"YulLiteral","src":"11838:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11828:6:30","nodeType":"YulIdentifier","src":"11828:6:30"},"nativeSrc":"11828:12:30","nodeType":"YulFunctionCall","src":"11828:12:30"},"nativeSrc":"11828:12:30","nodeType":"YulExpressionStatement","src":"11828:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11801:7:30","nodeType":"YulIdentifier","src":"11801:7:30"},{"name":"headStart","nativeSrc":"11810:9:30","nodeType":"YulIdentifier","src":"11810:9:30"}],"functionName":{"name":"sub","nativeSrc":"11797:3:30","nodeType":"YulIdentifier","src":"11797:3:30"},"nativeSrc":"11797:23:30","nodeType":"YulFunctionCall","src":"11797:23:30"},{"kind":"number","nativeSrc":"11822:2:30","nodeType":"YulLiteral","src":"11822:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11793:3:30","nodeType":"YulIdentifier","src":"11793:3:30"},"nativeSrc":"11793:32:30","nodeType":"YulFunctionCall","src":"11793:32:30"},"nativeSrc":"11790:52:30","nodeType":"YulIf","src":"11790:52:30"},{"nativeSrc":"11851:29:30","nodeType":"YulVariableDeclaration","src":"11851:29:30","value":{"arguments":[{"name":"headStart","nativeSrc":"11870:9:30","nodeType":"YulIdentifier","src":"11870:9:30"}],"functionName":{"name":"mload","nativeSrc":"11864:5:30","nodeType":"YulIdentifier","src":"11864:5:30"},"nativeSrc":"11864:16:30","nodeType":"YulFunctionCall","src":"11864:16:30"},"variables":[{"name":"value","nativeSrc":"11855:5:30","nodeType":"YulTypedName","src":"11855:5:30","type":""}]},{"body":{"nativeSrc":"11933:16:30","nodeType":"YulBlock","src":"11933:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11942:1:30","nodeType":"YulLiteral","src":"11942:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"11945:1:30","nodeType":"YulLiteral","src":"11945:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11935:6:30","nodeType":"YulIdentifier","src":"11935:6:30"},"nativeSrc":"11935:12:30","nodeType":"YulFunctionCall","src":"11935:12:30"},"nativeSrc":"11935:12:30","nodeType":"YulExpressionStatement","src":"11935:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11902:5:30","nodeType":"YulIdentifier","src":"11902:5:30"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11923:5:30","nodeType":"YulIdentifier","src":"11923:5:30"}],"functionName":{"name":"iszero","nativeSrc":"11916:6:30","nodeType":"YulIdentifier","src":"11916:6:30"},"nativeSrc":"11916:13:30","nodeType":"YulFunctionCall","src":"11916:13:30"}],"functionName":{"name":"iszero","nativeSrc":"11909:6:30","nodeType":"YulIdentifier","src":"11909:6:30"},"nativeSrc":"11909:21:30","nodeType":"YulFunctionCall","src":"11909:21:30"}],"functionName":{"name":"eq","nativeSrc":"11899:2:30","nodeType":"YulIdentifier","src":"11899:2:30"},"nativeSrc":"11899:32:30","nodeType":"YulFunctionCall","src":"11899:32:30"}],"functionName":{"name":"iszero","nativeSrc":"11892:6:30","nodeType":"YulIdentifier","src":"11892:6:30"},"nativeSrc":"11892:40:30","nodeType":"YulFunctionCall","src":"11892:40:30"},"nativeSrc":"11889:60:30","nodeType":"YulIf","src":"11889:60:30"},{"nativeSrc":"11958:15:30","nodeType":"YulAssignment","src":"11958:15:30","value":{"name":"value","nativeSrc":"11968:5:30","nodeType":"YulIdentifier","src":"11968:5:30"},"variableNames":[{"name":"value0","nativeSrc":"11958:6:30","nodeType":"YulIdentifier","src":"11958:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"11702:277:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11746:9:30","nodeType":"YulTypedName","src":"11746:9:30","type":""},{"name":"dataEnd","nativeSrc":"11757:7:30","nodeType":"YulTypedName","src":"11757:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11769:6:30","nodeType":"YulTypedName","src":"11769:6:30","type":""}],"src":"11702:277:30"},{"body":{"nativeSrc":"12114:201:30","nodeType":"YulBlock","src":"12114:201:30","statements":[{"body":{"nativeSrc":"12152:16:30","nodeType":"YulBlock","src":"12152:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12161:1:30","nodeType":"YulLiteral","src":"12161:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"12164:1:30","nodeType":"YulLiteral","src":"12164:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12154:6:30","nodeType":"YulIdentifier","src":"12154:6:30"},"nativeSrc":"12154:12:30","nodeType":"YulFunctionCall","src":"12154:12:30"},"nativeSrc":"12154:12:30","nodeType":"YulExpressionStatement","src":"12154:12:30"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"12130:10:30","nodeType":"YulIdentifier","src":"12130:10:30"},{"name":"endIndex","nativeSrc":"12142:8:30","nodeType":"YulIdentifier","src":"12142:8:30"}],"functionName":{"name":"gt","nativeSrc":"12127:2:30","nodeType":"YulIdentifier","src":"12127:2:30"},"nativeSrc":"12127:24:30","nodeType":"YulFunctionCall","src":"12127:24:30"},"nativeSrc":"12124:44:30","nodeType":"YulIf","src":"12124:44:30"},{"body":{"nativeSrc":"12201:16:30","nodeType":"YulBlock","src":"12201:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12210:1:30","nodeType":"YulLiteral","src":"12210:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"12213:1:30","nodeType":"YulLiteral","src":"12213:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12203:6:30","nodeType":"YulIdentifier","src":"12203:6:30"},"nativeSrc":"12203:12:30","nodeType":"YulFunctionCall","src":"12203:12:30"},"nativeSrc":"12203:12:30","nodeType":"YulExpressionStatement","src":"12203:12:30"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"12183:8:30","nodeType":"YulIdentifier","src":"12183:8:30"},{"name":"length","nativeSrc":"12193:6:30","nodeType":"YulIdentifier","src":"12193:6:30"}],"functionName":{"name":"gt","nativeSrc":"12180:2:30","nodeType":"YulIdentifier","src":"12180:2:30"},"nativeSrc":"12180:20:30","nodeType":"YulFunctionCall","src":"12180:20:30"},"nativeSrc":"12177:40:30","nodeType":"YulIf","src":"12177:40:30"},{"nativeSrc":"12226:36:30","nodeType":"YulAssignment","src":"12226:36:30","value":{"arguments":[{"name":"offset","nativeSrc":"12243:6:30","nodeType":"YulIdentifier","src":"12243:6:30"},{"name":"startIndex","nativeSrc":"12251:10:30","nodeType":"YulIdentifier","src":"12251:10:30"}],"functionName":{"name":"add","nativeSrc":"12239:3:30","nodeType":"YulIdentifier","src":"12239:3:30"},"nativeSrc":"12239:23:30","nodeType":"YulFunctionCall","src":"12239:23:30"},"variableNames":[{"name":"offsetOut","nativeSrc":"12226:9:30","nodeType":"YulIdentifier","src":"12226:9:30"}]},{"nativeSrc":"12271:38:30","nodeType":"YulAssignment","src":"12271:38:30","value":{"arguments":[{"name":"endIndex","nativeSrc":"12288:8:30","nodeType":"YulIdentifier","src":"12288:8:30"},{"name":"startIndex","nativeSrc":"12298:10:30","nodeType":"YulIdentifier","src":"12298:10:30"}],"functionName":{"name":"sub","nativeSrc":"12284:3:30","nodeType":"YulIdentifier","src":"12284:3:30"},"nativeSrc":"12284:25:30","nodeType":"YulFunctionCall","src":"12284:25:30"},"variableNames":[{"name":"lengthOut","nativeSrc":"12271:9:30","nodeType":"YulIdentifier","src":"12271:9:30"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"11984:331:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"12048:6:30","nodeType":"YulTypedName","src":"12048:6:30","type":""},{"name":"length","nativeSrc":"12056:6:30","nodeType":"YulTypedName","src":"12056:6:30","type":""},{"name":"startIndex","nativeSrc":"12064:10:30","nodeType":"YulTypedName","src":"12064:10:30","type":""},{"name":"endIndex","nativeSrc":"12076:8:30","nodeType":"YulTypedName","src":"12076:8:30","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"12089:9:30","nodeType":"YulTypedName","src":"12089:9:30","type":""},{"name":"lengthOut","nativeSrc":"12100:9:30","nodeType":"YulTypedName","src":"12100:9:30","type":""}],"src":"11984:331:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$873__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":654},{"length":32,"start":873},{"length":32,"start":4637},{"length":32,"start":4699},{"length":32,"start":5078},{"length":32,"start":5214}],"1916":[{"length":32,"start":581},{"length":32,"start":1326},{"length":32,"start":2227}],"1920":[{"length":32,"start":1055},{"length":32,"start":3243}],"1923":[{"length":32,"start":733},{"length":32,"start":1248}],"1926":[{"length":32,"start":1094},{"length":32,"start":1212}],"1929":[{"length":32,"start":502},{"length":32,"start":1434},{"length":32,"start":3487}],"1932":[{"length":32,"start":815},{"length":32,"start":2573},{"length":32,"start":3998}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101ae5760003560e01c806351e75e8b116100ee578063bc197c8111610097578063cd421fbf11610071578063cd421fbf14610441578063d1a91ff214610468578063f23a6e6114610470578063f95d10161461048357600080fd5b8063bc197c81146103ce578063c131754e14610412578063cd18a34f1461041a57600080fd5b8063aa918fd5116100c8578063aa918fd5146102d0578063ab504e73146103a6578063bab2f552146103c657600080fd5b806351e75e8b1461032a57806355f5b0a814610351578063572b6c051461035957600080fd5b806328a979cf1161015b5780633838a201116101355780633838a201146102c8578063424ab4f7146102d0578063491bde66146102d85780634dac1c2b146102ff57600080fd5b806328a979cf146102405780632b4c9f161461028c57806331e66e1e146102b257600080fd5b80630455645a1161018c5780630455645a1461021857806312828b7f146102205780631de0e40b146101db57600080fd5b806301ffc9a7146101b35780630277640e146101db578063043063bc146101f1575b600080fd5b6101c66101c136600461153d565b61048b565b60405190151581526020015b60405180910390f35b6101e3600181565b6040519081526020016101d2565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600581565b6101e361022e3660046115a8565b60026020526000908152604090205481565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b7f0000000000000000000000000000000000000000000000000000000000000000610267565b6102ba6104a5565b6040516101d29291906115c3565b6101e3601981565b6101e3600381565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e361030d366004611610565b600160209081526000928352604080842090915290825290205481565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600281565b6101c66103673660046115a8565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101e36103b436600461163c565b60006020819052908152604090205481565b6101e36104b8565b6103e16103dc3660046116e3565b610514565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6101e3601081565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b610267610c87565b6103e161047e36600461179e565b610c91565b6101e3600981565b600061049f826104996110b3565b906110e1565b92915050565b3660006104b06111bb565b915091509091565b60007f00000000000000000000000000000000000000000000000000000000000000006105057f000000000000000000000000000000000000000000000000000000000000000042611845565b61050f9190611858565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461058c576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105966104b8565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105f5576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106399030908c908c908c908c906004016118de565b600060405180830381600087803b15801561065357600080fd5b505af1158015610667573d6000803e3d6000fd5b505050506000805b88811015610945578787828181106106895761068961192d565b9050602002013560000361072357338a8a838181106106aa576106aa61192d565b905060200201358989848181106106c3576106c361192d565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9095166004860152602485019390935250602090910201356044820152606401610583565b8989828181106107355761073561192d565b905060200201356001036107795760018888838181106107575761075761192d565b90506020020135610768919061195c565b6107729083611973565b915061093d565b89898281811061078b5761078b61192d565b905060200201356002036107ad5760038888838181106107575761075761192d565b8989828181106107bf576107bf61192d565b905060200201356003036107e15760038888838181106107575761075761192d565b8989828181106107f3576107f361192d565b905060200201356004036108155760058888838181106107575761075761192d565b8989828181106108275761082761192d565b905060200201356005036108495760098888838181106107575761075761192d565b89898281811061085b5761085b61192d565b9050602002013560060361087d5760198888838181106107575761075761192d565b89898281811061088f5761088f61192d565b905060200201356007036108b15760108888838181106107575761075761192d565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108e4576108e461192d565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610583565b60010161066f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610b1957600080610983888a018a6119b5565b91509150608083901c600003610af9576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610a32837f0000000000000000000000000000000000000000000000000000000000000000836111c6565b610a87576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101839052604401610583565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b979097179687905581518781529081018790528692917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a250505b612710610b06828761195c565b610b109190611858565b94505050610b40565b608081901c8015610b3e57612710610b31828661195c565b610b3b9190611858565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b6657610b63818561195c565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610ba1908690611973565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610bf1908490611973565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c4b9796959493929190611a97565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b600061050f6111dc565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d04576040517f73306803000000000000000000000000000000000000000000000000000000008152336004820152602401610583565b60018514610d47576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610583565b83600114610d91576040517fe1f366e90000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606401610583565b6000610d9b6104b8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610dfa576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e82576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602401610583565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610ee157600080fd5b505af1158015610ef5573d6000803e3d6000fd5b505050600282179050841561102257608082901c60000361102257600080610f1f878901896119b5565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610fc3837f0000000000000000000000000000000000000000000000000000000000000000836111c6565b611018576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015260248101839052604401610583565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061049f60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611845565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111315750600061049f565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111825750600161049f565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b3660006104b06111e6565b6000826111d38584611350565b14949350505050565b600061050f611393565b366000333214806111f75750601836105b156112055750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148061133a575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611316573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133a9190611ade565b15611347576104b06114da565b50600091369150565b600081815b845181101561138b57611381828683815181106113745761137461192d565b602002602001015161150b565b9150600101611355565b509392505050565b6000333214806113a35750601836105b156113ad57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114c957506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c99190611ade565b156114d357919050565b3391505090565b3660006104b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611b00565b6000818310611527576000828152602084905260409020611536565b60008381526020839052604090205b9392505050565b60006020828403121561154f57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461153657600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146115a357600080fd5b919050565b6000602082840312156115ba57600080fd5b6115368261157f565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000806040838503121561162357600080fd5b823591506116336020840161157f565b90509250929050565b60006020828403121561164e57600080fd5b5035919050565b60008083601f84011261166757600080fd5b50813567ffffffffffffffff81111561167f57600080fd5b6020830191508360208260051b850101111561169a57600080fd5b9250929050565b60008083601f8401126116b357600080fd5b50813567ffffffffffffffff8111156116cb57600080fd5b60208301915083602082850101111561169a57600080fd5b60008060008060008060008060a0898b0312156116ff57600080fd5b6117088961157f565b975061171660208a0161157f565b9650604089013567ffffffffffffffff8082111561173357600080fd5b61173f8c838d01611655565b909850965060608b013591508082111561175857600080fd5b6117648c838d01611655565b909650945060808b013591508082111561177d57600080fd5b5061178a8b828c016116a1565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156117b757600080fd5b6117c08761157f565b95506117ce6020880161157f565b94506040870135935060608701359250608087013567ffffffffffffffff8111156117f857600080fd5b61180489828a016116a1565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561049f5761049f611816565b60008261188e577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118c557600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260606020820152600061190e606083018688611893565b8281036040840152611921818587611893565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761049f5761049f611816565b8082018082111561049f5761049f611816565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156119c857600080fd5b823567ffffffffffffffff808211156119e057600080fd5b818501915085601f8301126119f457600080fd5b8135602082821115611a0857611a08611986565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715611a4b57611a4b611986565b604052928352818301935084810182019289841115611a6957600080fd5b948201945b83861015611a8757853585529482019493820193611a6e565b9997909101359750505050505050565b60a081526000611aab60a08301898b611893565b8281036020840152611abe81888a611893565b604084019690965250506060810192909252608090910152949350505050565b600060208284031215611af057600080fd5b8151801515811461153657600080fd5b60008085851115611b1057600080fd5b83861115611b1d57600080fd5b505082019391909203915056fea264697066735822122033eb73fa51f325ac6971e4638898f8facb1a9ee88fc61c3771f3ba7f718c53af64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x3838A201 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153D JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x267 JUMP JUMPDEST PUSH2 0x2BA PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP3 SWAP2 SWAP1 PUSH2 0x15C3 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x1610 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A8 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x163C JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x16E3 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH2 0xC87 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x179E JUMP JUMPDEST PUSH2 0xC91 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F DUP3 PUSH2 0x499 PUSH2 0x10B3 JUMP JUMPDEST SWAP1 PUSH2 0x10E1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11BB JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x505 PUSH32 0x0 TIMESTAMP PUSH2 0x1845 JUMP JUMPDEST PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x58C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x596 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x639 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x18DE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x945 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x689 JUMPI PUSH2 0x689 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x723 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6AA JUMPI PUSH2 0x6AA PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x735 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x779 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x195C JUMP JUMPDEST PUSH2 0x772 SWAP1 DUP4 PUSH2 0x1973 JUMP JUMPDEST SWAP2 POP PUSH2 0x93D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x7AD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x7E1 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7F3 JUMPI PUSH2 0x7F3 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x815 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x827 JUMPI PUSH2 0x827 PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x849 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x85B JUMPI PUSH2 0x85B PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x87D JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x88F JUMPI PUSH2 0x88F PUSH2 0x192D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x8B1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192D JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x8E4 JUMPI PUSH2 0x8E4 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xB19 JUMPI PUSH1 0x0 DUP1 PUSH2 0x983 DUP9 DUP11 ADD DUP11 PUSH2 0x19B5 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAF9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xA32 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL SWAP8 SWAP1 SWAP8 OR SWAP7 DUP8 SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE DUP7 SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xB06 DUP3 DUP8 PUSH2 0x195C JUMP JUMPDEST PUSH2 0xB10 SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xB40 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xB3E JUMPI PUSH2 0x2710 PUSH2 0xB31 DUP3 DUP7 PUSH2 0x195C JUMP JUMPDEST PUSH2 0xB3B SWAP2 SWAP1 PUSH2 0x1858 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB66 JUMPI PUSH2 0xB63 DUP2 DUP6 PUSH2 0x195C JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xBA1 SWAP1 DUP7 SWAP1 PUSH2 0x1973 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBF1 SWAP1 DUP5 SWAP1 PUSH2 0x1973 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC4B SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A97 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x11DC JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD04 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xD47 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD91 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD9B PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDFA JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE82 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEF5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1022 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1022 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF1F DUP8 DUP10 ADD DUP10 PUSH2 0x19B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xFC3 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C6 JUMP JUMPDEST PUSH2 0x1018 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x49F PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1845 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1131 JUMPI POP PUSH1 0x0 PUSH2 0x49F JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1182 JUMPI POP PUSH1 0x1 PUSH2 0x49F JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11E6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x11D3 DUP6 DUP5 PUSH2 0x1350 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x1393 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11F7 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1205 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x133A JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1316 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x133A SWAP2 SWAP1 PUSH2 0x1ADE JUMP JUMPDEST ISZERO PUSH2 0x1347 JUMPI PUSH2 0x4B0 PUSH2 0x14DA JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x138B JUMPI PUSH2 0x1381 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1374 JUMPI PUSH2 0x1374 PUSH2 0x192D JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x150B JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1355 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13A3 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13AD JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14C9 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14A5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C9 SWAP2 SWAP1 PUSH2 0x1ADE JUMP JUMPDEST ISZERO PUSH2 0x14D3 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1B00 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1527 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1536 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1536 DUP3 PUSH2 0x157F JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1623 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1633 PUSH1 0x20 DUP5 ADD PUSH2 0x157F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1667 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x167F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x169A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x169A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x16FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1708 DUP10 PUSH2 0x157F JUMP JUMPDEST SWAP8 POP PUSH2 0x1716 PUSH1 0x20 DUP11 ADD PUSH2 0x157F JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1733 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173F DUP13 DUP4 DUP14 ADD PUSH2 0x1655 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1758 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1764 DUP13 DUP4 DUP14 ADD PUSH2 0x1655 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x177D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x178A DUP12 DUP3 DUP13 ADD PUSH2 0x16A1 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17C0 DUP8 PUSH2 0x157F JUMP JUMPDEST SWAP6 POP PUSH2 0x17CE PUSH1 0x20 DUP9 ADD PUSH2 0x157F JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1804 DUP10 DUP3 DUP11 ADD PUSH2 0x16A1 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x188E JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x18C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x190E PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1893 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1921 DUP2 DUP6 DUP8 PUSH2 0x1893 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1816 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1A08 JUMPI PUSH2 0x1A08 PUSH2 0x1986 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x1A4B JUMPI PUSH2 0x1A4B PUSH2 0x1986 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1A69 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1A87 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1A6E JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1AAB PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1893 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1ABE DUP2 DUP9 DUP11 PUSH2 0x1893 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1536 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1B10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER 0xEB PUSH20 0xFA51F325AC6971E4638898F8FACB1A9EE88FC61C CALLDATACOPY PUSH18 0xF3BA7F718C53AF64736F6C63430008160033 ","sourceMap":"349:717:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:30;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1291:47:26;;1337:1;1291:47;;;;;689:25:30;;;677:2;662:18;1291:47:26;543:177:30;2243:34:26;;;;;1450:47;;1496:1;1450:47;;2811:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1839:46;;;;;;;;1317:42:30;1305:55;;;1287:74;;1275:2;1260:18;1839:46:26;1117:250:30;728:115:11;817:19;728:115;;970:94:28;;;:::i;:::-;;;;;;;;:::i;1556:48:26:-;;1602:2;1556:48;;1344:47;;1390:1;1344:47;;2074:37;;;;;2594:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2350:36;;;;;1713:42;;1754:1;1713:42;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;2458:51:26;;;;;;:::i;:::-;;;;;;;;;;;;;;;6123:127;;;:::i;9100:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4820:66:30;4808:79;;;4790:98;;4778:2;4763:18;9100:3453:26;4646:248:30;1610:48:26;;1656:2;1610:48;;1972:45;;;;;2162:39;;;;;763:91:28;;;:::i;6936:1630:26:-;;;;;;:::i;:::-;;:::i;1503:47::-;;1549:1;1503:47;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;970:94:28:-;1014:14;;1047:10;:8;:10::i;:::-;1040:17;;;;970:94;;:::o;6123:127:26:-;6168:7;6229:14;6195:30;6213:12;6195:15;:30;:::i;:::-;6194:49;;;;:::i;:::-;6187:56;;6123:127;:::o;9100:3453::-;9300:6;9322:10;:35;9344:12;9322:35;;9318:104;;9380:31;;;;;9400:10;9380:31;;;1287:74:30;1260:18;;9380:31:26;;;;;;;;9318:104;9432:13;9448:14;:12;:14::i;:::-;9432:30;;9484:9;9476:5;:17;9472:74;;;9516:19;;;;;;;;689:25:30;;;662:18;;9516:19:26;543:177:30;9472:74:26;9556:70;;;;;9573:10;;9556:42;;:70;;9607:4;;9614:3;;;;9619:6;;;;9556:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9637:20;9676:9;9671:1007;9691:14;;;9671:1007;;;9730:6;;9737:1;9730:9;;;;;;;:::i;:::-;;;;;;;9743:1;9730:14;9726:108;;9789:10;9801:3;;9805:1;9801:6;;;;;;;:::i;:::-;;;;;;;9809;;9816:1;9809:9;;;;;;;:::i;:::-;9771:48;;;;;7859:42:30;7847:55;;;9771:48:26;;;7829:74:30;7919:18;;;7912:34;;;;-1:-1:-1;9809:9:26;;;;;;7962:18:30;;;7955:34;7802:18;;9771:48:26;7627:368:30;9726:108:26;9852:3;;9856:1;9852:6;;;;;;;:::i;:::-;;;;;;;9862:1;9852:11;9848:820;;1337:1;9900:6;;9907:1;9900:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;9883:49;;;;:::i;:::-;;;9848:820;;;9957:3;;9961:1;9957:6;;;;;;;:::i;:::-;;;;;;;9967:1;9957:11;9953:715;;1390:1;10005:6;;10012:1;10005:9;;;;;;;:::i;9953:715::-;10062:3;;10066:1;10062:6;;;;;;;:::i;:::-;;;;;;;10072:1;10062:11;10058:610;;1443:1;10110:6;;10117:1;10110:9;;;;;;;:::i;10058:610::-;10167:3;;10171:1;10167:6;;;;;;;:::i;:::-;;;;;;;10177:1;10167:11;10163:505;;1496:1;10215:6;;10222:1;10215:9;;;;;;;:::i;10163:505::-;10272:3;;10276:1;10272:6;;;;;;;:::i;:::-;;;;;;;10282:1;10272:11;10268:400;;1549:1;10320:6;;10327:1;10320:9;;;;;;;:::i;10268:400::-;10377:3;;10381:1;10377:6;;;;;;;:::i;:::-;;;;;;;10387:1;10377:11;10373:295;;1602:2;10425:6;;10432:1;10425:9;;;;;;;:::i;10373:295::-;10482:3;;10486:1;10482:6;;;;;;;:::i;:::-;;;;;;;10492:1;10482:11;10478:190;;1656:2;10530:6;;10537:1;10530:9;;;;;;;:::i;10478:190::-;10631:12;10646:3;;10650:1;10646:6;;;;;;;:::i;:::-;10608:45;;;;;8507:42:30;8495:55;;;10608:45:26;;;8477:74:30;10646:6:26;;;;;;;8567:18:30;;;8560:34;-1:-1:-1;8450:18:30;;10608:45:26;8303:297:30;10478:190:26;9707:3;;9671:1007;;;-1:-1:-1;10808:24:26;;;10688:16;10808:24;;;:14;:24;;;;;;10707:4;;10847:15;;10843:1122;;10879:22;;10944:38;;;;10955:4;10944:38;:::i;:::-;10878:104;;;;11021:3;11001:16;:23;;11029:1;11000:30;10996:613;;11075:57;;10233:66:30;10220:2;10216:15;;;10212:88;11075:57:26;;;10200:101:30;10317:12;;;10310:28;;;11050:12:26;;10354::30;;11075:57:26;;;;;;;;;;;;;11065:68;;11075:57;11065:68;;;;;-1:-1:-1;11156:31:26;:5;11169:11;11065:68;11156:12;:31::i;:::-;11151:139;;11218:53;;;;;8507:42:30;8495:55;;11218:53:26;;;8477:74:30;8567:18;;;8560:34;;;8450:18;;11218:53:26;8303:297:30;11151:139:26;11463:24;;;11308;11463;;;:14;:24;;;;;;;;;11369:3;11336:36;;;11335:57;;;;11463:43;;;;11529:65;;10551:25:30;;;10592:18;;;10585:34;;;11335:57:26;;11463:24;11529:65;;10524:18:30;11529:65:26;;;;;;;11032:577;;10996:613;1098:6;11639:44;11654:29;11639:12;:44;:::i;:::-;11638:61;;;;:::i;:::-;11623:76;;10864:846;;10843:1122;;;11790:3;11770:23;;;11811:33;;11807:148;;1098:6;11880:44;11895:29;11880:12;:44;:::i;:::-;11879:61;;;;:::i;:::-;11864:76;;11807:148;11716:249;10843:1122;11975:49;;;12038:17;;12034:77;;12071:29;12087:13;12071:29;;:::i;:::-;;;12034:77;12155:28;12186:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;12221:12;;12186:47;:::i;:::-;12243:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;12342:23;;;;;;;;;:39;;12155:78;;-1:-1:-1;12369:12:26;;12342:23;;12243:22;12342:39;;12369:12;;12342:39;:::i;:::-;;;;;;;;12419:5;12409:8;12397:95;;;12426:3;;12431:6;;12439:12;12453:20;12475:16;12397:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;12510:36:26;;9100:3453;-1:-1:-1;;;;;;;;;;;;;;9100:3453:26:o;763:91:28:-;809:7;835:12;:10;:12::i;6936:1630:26:-;7061:6;7083:10;:34;7105:11;7083:34;;7079:103;;7140:31;;;;;7160:10;7140:31;;;1287:74:30;1260:18;;7140:31:26;1117:250:30;7079:103:26;1228:1;7195:2;:26;7191:94;;7244:30;;;;;7259:10;7244:30;;;8477:74:30;8567:18;;;8560:34;;;8450:18;;7244:30:26;8303:297:30;7191:94:26;7299:5;7308:1;7299:10;7295:88;;7332:40;;;;;7350:10;7332:40;;;7829:74:30;7919:18;;;7912:34;;;7962:18;;;7955:34;;;7802:18;;7332:40:26;7627:368:30;7295:88:26;7393:13;7409:14;:12;:14::i;:::-;7393:30;;7445:9;7437:5;:17;7433:74;;;7477:19;;;;;;;;689:25:30;;;662:18;;7477:19:26;543:177:30;7433:74:26;7544:20;;;7517:24;7544:20;;;:14;:20;;;;;;7578:29;;;;7574:96;;7630:29;;;;;1317:42:30;1305:55;;7630:29:26;;;1287:74:30;1260:18;;7630:29:26;1117:250:30;7574:96:26;7680:63;;;;;7726:4;7680:63;;;7829:74:30;7919:18;;;7912:34;;;7962:18;;;7955:34;;;7697:10:26;;7680:37;;7802:18:30;;7680:63:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1754:1:26;7781:33;;;-1:-1:-1;7828:15:26;;7824:562;;7884:3;7864:16;:23;;7892:1;7863:30;7859:517;;7914:22;;7979:38;;;;7990:4;7979:38;:::i;:::-;8060:53;;10233:66:30;10220:2;10216:15;;;10212:88;8060:53:26;;;10200:101:30;10317:12;;;10310:28;;;7913:104:26;;-1:-1:-1;7913:104:26;-1:-1:-1;8035:12:26;;10354::30;;8060:53:26;;;;;;;;;;;;;8050:64;;8060:53;8050:64;;;;;-1:-1:-1;8137:31:26;:5;8150:11;8050:64;8137:12;:31::i;:::-;8132:135;;8199:49;;;;;8507:42:30;8495:55;;8199:49:26;;;8477:74:30;8567:18;;;8560:34;;;8450:18;;8199:49:26;8303:297:30;8132:135:26;-1:-1:-1;8338:3:26;8305:36;8304:57;;;;-1:-1:-1;7859:517:26;8395:20;;;;;;;:14;:20;;;;;;;;;:39;;;8449:61;;10551:25:30;;;10592:18;;;10585:34;;;8449:61:26;;10524:18:30;8449:61:26;;;;;;;-1:-1:-1;8528:31:26;;6936:1630;-1:-1:-1;;;;;;;;;6936:1630:26:o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5854:169:26:-;5944:14;;5977:39;:37;:39::i;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;5633:166:26:-;5725:7;5751:41;:39;:41::i;1643:735:12:-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:12;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:12;;;;-1:-1:-1;1643:735:12:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2207:80:12;;;;;;;;;;11554:42:30;11623:15;;;2207:80:12;;;11605:34:30;2276:10:12;11655:18:30;;;11648:43;11517:18;;2207:80:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:12;;;;-1:-1:-1;1643:735:12:o;1994:290:25:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;11623:15:30;;;1396:59:12;;;11605:34:30;1444:10:12;11655:18:30;;;11648:43;1396:19:12;:39;;;;11517:18:30;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;616:152:15:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;8879:147:25:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:25:o;14:332:30:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1629:447::-;1786:2;1775:9;1768:21;1825:6;1820:2;1809:9;1805:18;1798:34;1882:6;1874;1869:2;1858:9;1854:18;1841:48;1938:1;1909:22;;;1933:2;1905:31;;;1898:42;;;;1992:2;1980:15;;;1997:66;1976:88;1961:104;1957:113;;1629:447;-1:-1:-1;1629:447:30:o;2081:254::-;2149:6;2157;2210:2;2198:9;2189:7;2185:23;2181:32;2178:52;;;2226:1;2223;2216:12;2178:52;2262:9;2249:23;2239:33;;2291:38;2325:2;2314:9;2310:18;2291:38;:::i;:::-;2281:48;;2081:254;;;;;:::o;2522:180::-;2581:6;2634:2;2622:9;2613:7;2609:23;2605:32;2602:52;;;2650:1;2647;2640:12;2602:52;-1:-1:-1;2673:23:30;;2522:180;-1:-1:-1;2522:180:30:o;2707:367::-;2770:8;2780:6;2834:3;2827:4;2819:6;2815:17;2811:27;2801:55;;2852:1;2849;2842:12;2801:55;-1:-1:-1;2875:20:30;;2918:18;2907:30;;2904:50;;;2950:1;2947;2940:12;2904:50;2987:4;2979:6;2975:17;2963:29;;3047:3;3040:4;3030:6;3027:1;3023:14;3015:6;3011:27;3007:38;3004:47;3001:67;;;3064:1;3061;3054:12;3001:67;2707:367;;;;;:::o;3079:347::-;3130:8;3140:6;3194:3;3187:4;3179:6;3175:17;3171:27;3161:55;;3212:1;3209;3202:12;3161:55;-1:-1:-1;3235:20:30;;3278:18;3267:30;;3264:50;;;3310:1;3307;3300:12;3264:50;3347:4;3339:6;3335:17;3323:29;;3399:3;3392:4;3383:6;3375;3371:19;3367:30;3364:39;3361:59;;;3416:1;3413;3406:12;3431:1210;3591:6;3599;3607;3615;3623;3631;3639;3647;3700:3;3688:9;3679:7;3675:23;3671:33;3668:53;;;3717:1;3714;3707:12;3668:53;3740:29;3759:9;3740:29;:::i;:::-;3730:39;;3788:38;3822:2;3811:9;3807:18;3788:38;:::i;:::-;3778:48;;3877:2;3866:9;3862:18;3849:32;3900:18;3941:2;3933:6;3930:14;3927:34;;;3957:1;3954;3947:12;3927:34;3996:70;4058:7;4049:6;4038:9;4034:22;3996:70;:::i;:::-;4085:8;;-1:-1:-1;3970:96:30;-1:-1:-1;4173:2:30;4158:18;;4145:32;;-1:-1:-1;4189:16:30;;;4186:36;;;4218:1;4215;4208:12;4186:36;4257:72;4321:7;4310:8;4299:9;4295:24;4257:72;:::i;:::-;4348:8;;-1:-1:-1;4231:98:30;-1:-1:-1;4436:3:30;4421:19;;4408:33;;-1:-1:-1;4453:16:30;;;4450:36;;;4482:1;4479;4472:12;4450:36;;4521:60;4573:7;4562:8;4551:9;4547:24;4521:60;:::i;:::-;3431:1210;;;;-1:-1:-1;3431:1210:30;;-1:-1:-1;3431:1210:30;;;;;;4600:8;-1:-1:-1;;;3431:1210:30:o;5130:695::-;5236:6;5244;5252;5260;5268;5276;5329:3;5317:9;5308:7;5304:23;5300:33;5297:53;;;5346:1;5343;5336:12;5297:53;5369:29;5388:9;5369:29;:::i;:::-;5359:39;;5417:38;5451:2;5440:9;5436:18;5417:38;:::i;:::-;5407:48;;5502:2;5491:9;5487:18;5474:32;5464:42;;5553:2;5542:9;5538:18;5525:32;5515:42;;5608:3;5597:9;5593:19;5580:33;5636:18;5628:6;5625:30;5622:50;;;5668:1;5665;5658:12;5622:50;5707:58;5757:7;5748:6;5737:9;5733:22;5707:58;:::i;:::-;5130:695;;;;-1:-1:-1;5130:695:30;;-1:-1:-1;5130:695:30;;5784:8;;5130:695;-1:-1:-1;;;5130:695:30:o;5830:184::-;5882:77;5879:1;5872:88;5979:4;5976:1;5969:15;6003:4;6000:1;5993:15;6019:128;6086:9;;;6107:11;;;6104:37;;;6121:18;;:::i;6152:274::-;6192:1;6218;6208:189;;6253:77;6250:1;6243:88;6354:4;6351:1;6344:15;6382:4;6379:1;6372:15;6208:189;-1:-1:-1;6411:9:30;;6152:274::o;6431:358::-;6531:6;6526:3;6519:19;6501:3;6561:66;6553:6;6550:78;6547:98;;;6641:1;6638;6631:12;6547:98;6677:6;6674:1;6670:14;6729:8;6722:5;6715:4;6710:3;6706:14;6693:45;6758:18;;;;6778:4;6754:29;;6431:358;-1:-1:-1;;;6431:358:30:o;6794:639::-;7111:42;7103:6;7099:55;7088:9;7081:74;7191:2;7186;7175:9;7171:18;7164:30;7062:4;7217:73;7286:2;7275:9;7271:18;7263:6;7255;7217:73;:::i;:::-;7338:9;7330:6;7326:22;7321:2;7310:9;7306:18;7299:50;7366:61;7420:6;7412;7404;7366:61;:::i;:::-;7358:69;6794:639;-1:-1:-1;;;;;;;;6794:639:30:o;7438:184::-;7490:77;7487:1;7480:88;7587:4;7584:1;7577:15;7611:4;7608:1;7601:15;8000:168;8073:9;;;8104;;8121:15;;;8115:22;;8101:37;8091:71;;8142:18;;:::i;8173:125::-;8238:9;;;8259:10;;;8256:36;;;8272:18;;:::i;8605:184::-;8657:77;8654:1;8647:88;8754:4;8751:1;8744:15;8778:4;8775:1;8768:15;8794:1244;8887:6;8895;8948:2;8936:9;8927:7;8923:23;8919:32;8916:52;;;8964:1;8961;8954:12;8916:52;9004:9;8991:23;9033:18;9074:2;9066:6;9063:14;9060:34;;;9090:1;9087;9080:12;9060:34;9128:6;9117:9;9113:22;9103:32;;9173:7;9166:4;9162:2;9158:13;9154:27;9144:55;;9195:1;9192;9185:12;9144:55;9231:2;9218:16;9253:4;9276:2;9272;9269:10;9266:36;;;9282:18;;:::i;:::-;9328:2;9325:1;9321:10;9360:2;9354:9;9419:66;9414:2;9410;9406:11;9402:84;9394:6;9390:97;9537:6;9525:10;9522:22;9517:2;9505:10;9502:18;9499:46;9496:72;;;9548:18;;:::i;:::-;9584:2;9577:22;9634:18;;;9668:15;;;;-1:-1:-1;9710:11:30;;;9706:20;;;9738:19;;;9735:39;;;9770:1;9767;9760:12;9735:39;9794:11;;;;9814:142;9830:6;9825:3;9822:15;9814:142;;;9896:17;;9884:30;;9847:12;;;;9934;;;;9814:142;;;9975:6;10013:18;;;;10000:32;;-1:-1:-1;;;;;;;8794:1244:30:o;10630:735::-;10991:3;10980:9;10973:22;10954:4;11018:74;11087:3;11076:9;11072:19;11064:6;11056;11018:74;:::i;:::-;11140:9;11132:6;11128:22;11123:2;11112:9;11108:18;11101:50;11168:61;11222:6;11214;11206;11168:61;:::i;:::-;11260:2;11245:18;;11238:34;;;;-1:-1:-1;;11303:2:30;11288:18;;11281:34;;;;11346:3;11331:19;;;11324:35;11160:69;10630:735;-1:-1:-1;;;;10630:735:30:o;11702:277::-;11769:6;11822:2;11810:9;11801:7;11797:23;11793:32;11790:52;;;11838:1;11835;11828:12;11790:52;11870:9;11864:16;11923:5;11916:13;11909:21;11902:5;11899:32;11889:60;;11945:1;11942;11935:12;11984:331;12089:9;12100;12142:8;12130:10;12127:24;12124:44;;;12164:1;12161;12154:12;12124:44;12193:6;12183:8;12180:20;12177:40;;;12213:1;12210;12203:12;12177:40;-1:-1:-1;;12239:23:30;;;12284:25;;;;;-1:-1:-1;11984:331:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"1401600","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"264","BURN_WEIGHT_TOKEN_2()":"262","BURN_WEIGHT_TOKEN_3()":"240","BURN_WEIGHT_TOKEN_4()":"241","BURN_WEIGHT_TOKEN_5()":"305","BURN_WEIGHT_TOKEN_6()":"240","BURN_WEIGHT_TOKEN_7()":"262","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"285","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","__msgData()":"infinite","__msgSender()":"infinite","currentCycle()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2575","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2716"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","currentCycle()":"bab2f552","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/burn/OrbsBurnPoolMock.sol\":\"OrbsBurnPoolMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                curOrbMultiplier = newOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x53208e9e6c2948ae797f5c6eff2ea2d81cc7c1765b3782aac5204a50d1634f73\",\"license\":\"MIT\"},\"contracts/mocks/burn/OrbsBurnPoolMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {OrbsBurnPool} from \\\"../../burn/OrbsBurnPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\n\\ncontract OrbsBurnPoolMock is OrbsBurnPool {\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) OrbsBurnPool(initialTime, cycleDuration, maxCycle, merkleRoot, orbOfPower, missingOrb, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x29e7b934f0c24b2bca21f90fa046f77c0a9ee80d5da6b0e90b72f2635faa40b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1937,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1944,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1949,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"currentCycle()":{"notice":"Get the current cycle."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}},"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol":{"ERC1155ClaimWindowMerkleClaimMock":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"ExceededMintSupply","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"claim(bytes32,bytes32[],address)":{"details":"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2869":{"entryPoint":null,"id":2869,"parameterSlots":4,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_3185":{"entryPoint":null,"id":3185,"parameterSlots":4,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":181,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":127,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":304,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":352,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":470,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":550,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":445,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:994:30","nodeType":"YulBlock","src":"0:994:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"77:86:30","nodeType":"YulBlock","src":"77:86:30","statements":[{"body":{"nativeSrc":"141:16:30","nodeType":"YulBlock","src":"141:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:30","nodeType":"YulLiteral","src":"150:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:30","nodeType":"YulLiteral","src":"153:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:30","nodeType":"YulIdentifier","src":"143:6:30"},"nativeSrc":"143:12:30","nodeType":"YulFunctionCall","src":"143:12:30"},"nativeSrc":"143:12:30","nodeType":"YulExpressionStatement","src":"143:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:30","nodeType":"YulIdentifier","src":"100:5:30"},{"arguments":[{"name":"value","nativeSrc":"111:5:30","nodeType":"YulIdentifier","src":"111:5:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:30","nodeType":"YulLiteral","src":"126:3:30","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:30","nodeType":"YulLiteral","src":"131:1:30","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:30","nodeType":"YulIdentifier","src":"122:3:30"},"nativeSrc":"122:11:30","nodeType":"YulFunctionCall","src":"122:11:30"},{"kind":"number","nativeSrc":"135:1:30","nodeType":"YulLiteral","src":"135:1:30","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:30","nodeType":"YulIdentifier","src":"118:3:30"},"nativeSrc":"118:19:30","nodeType":"YulFunctionCall","src":"118:19:30"}],"functionName":{"name":"and","nativeSrc":"107:3:30","nodeType":"YulIdentifier","src":"107:3:30"},"nativeSrc":"107:31:30","nodeType":"YulFunctionCall","src":"107:31:30"}],"functionName":{"name":"eq","nativeSrc":"97:2:30","nodeType":"YulIdentifier","src":"97:2:30"},"nativeSrc":"97:42:30","nodeType":"YulFunctionCall","src":"97:42:30"}],"functionName":{"name":"iszero","nativeSrc":"90:6:30","nodeType":"YulIdentifier","src":"90:6:30"},"nativeSrc":"90:50:30","nodeType":"YulFunctionCall","src":"90:50:30"},"nativeSrc":"87:70:30","nodeType":"YulIf","src":"87:70:30"}]},"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"14:149:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:30","nodeType":"YulTypedName","src":"66:5:30","type":""}],"src":"14:149:30"},{"body":{"nativeSrc":"350:412:30","nodeType":"YulBlock","src":"350:412:30","statements":[{"body":{"nativeSrc":"397:16:30","nodeType":"YulBlock","src":"397:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"406:1:30","nodeType":"YulLiteral","src":"406:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"409:1:30","nodeType":"YulLiteral","src":"409:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"399:6:30","nodeType":"YulIdentifier","src":"399:6:30"},"nativeSrc":"399:12:30","nodeType":"YulFunctionCall","src":"399:12:30"},"nativeSrc":"399:12:30","nodeType":"YulExpressionStatement","src":"399:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"371:7:30","nodeType":"YulIdentifier","src":"371:7:30"},{"name":"headStart","nativeSrc":"380:9:30","nodeType":"YulIdentifier","src":"380:9:30"}],"functionName":{"name":"sub","nativeSrc":"367:3:30","nodeType":"YulIdentifier","src":"367:3:30"},"nativeSrc":"367:23:30","nodeType":"YulFunctionCall","src":"367:23:30"},{"kind":"number","nativeSrc":"392:3:30","nodeType":"YulLiteral","src":"392:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"363:3:30","nodeType":"YulIdentifier","src":"363:3:30"},"nativeSrc":"363:33:30","nodeType":"YulFunctionCall","src":"363:33:30"},"nativeSrc":"360:53:30","nodeType":"YulIf","src":"360:53:30"},{"nativeSrc":"422:26:30","nodeType":"YulAssignment","src":"422:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"438:9:30","nodeType":"YulIdentifier","src":"438:9:30"}],"functionName":{"name":"mload","nativeSrc":"432:5:30","nodeType":"YulIdentifier","src":"432:5:30"},"nativeSrc":"432:16:30","nodeType":"YulFunctionCall","src":"432:16:30"},"variableNames":[{"name":"value0","nativeSrc":"422:6:30","nodeType":"YulIdentifier","src":"422:6:30"}]},{"nativeSrc":"457:35:30","nodeType":"YulAssignment","src":"457:35:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"477:9:30","nodeType":"YulIdentifier","src":"477:9:30"},{"kind":"number","nativeSrc":"488:2:30","nodeType":"YulLiteral","src":"488:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"473:3:30","nodeType":"YulIdentifier","src":"473:3:30"},"nativeSrc":"473:18:30","nodeType":"YulFunctionCall","src":"473:18:30"}],"functionName":{"name":"mload","nativeSrc":"467:5:30","nodeType":"YulIdentifier","src":"467:5:30"},"nativeSrc":"467:25:30","nodeType":"YulFunctionCall","src":"467:25:30"},"variableNames":[{"name":"value1","nativeSrc":"457:6:30","nodeType":"YulIdentifier","src":"457:6:30"}]},{"nativeSrc":"501:38:30","nodeType":"YulVariableDeclaration","src":"501:38:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"524:9:30","nodeType":"YulIdentifier","src":"524:9:30"},{"kind":"number","nativeSrc":"535:2:30","nodeType":"YulLiteral","src":"535:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"520:3:30","nodeType":"YulIdentifier","src":"520:3:30"},"nativeSrc":"520:18:30","nodeType":"YulFunctionCall","src":"520:18:30"}],"functionName":{"name":"mload","nativeSrc":"514:5:30","nodeType":"YulIdentifier","src":"514:5:30"},"nativeSrc":"514:25:30","nodeType":"YulFunctionCall","src":"514:25:30"},"variables":[{"name":"value","nativeSrc":"505:5:30","nodeType":"YulTypedName","src":"505:5:30","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"591:5:30","nodeType":"YulIdentifier","src":"591:5:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"548:42:30","nodeType":"YulIdentifier","src":"548:42:30"},"nativeSrc":"548:49:30","nodeType":"YulFunctionCall","src":"548:49:30"},"nativeSrc":"548:49:30","nodeType":"YulExpressionStatement","src":"548:49:30"},{"nativeSrc":"606:15:30","nodeType":"YulAssignment","src":"606:15:30","value":{"name":"value","nativeSrc":"616:5:30","nodeType":"YulIdentifier","src":"616:5:30"},"variableNames":[{"name":"value2","nativeSrc":"606:6:30","nodeType":"YulIdentifier","src":"606:6:30"}]},{"nativeSrc":"630:40:30","nodeType":"YulVariableDeclaration","src":"630:40:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"655:9:30","nodeType":"YulIdentifier","src":"655:9:30"},{"kind":"number","nativeSrc":"666:2:30","nodeType":"YulLiteral","src":"666:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"651:3:30","nodeType":"YulIdentifier","src":"651:3:30"},"nativeSrc":"651:18:30","nodeType":"YulFunctionCall","src":"651:18:30"}],"functionName":{"name":"mload","nativeSrc":"645:5:30","nodeType":"YulIdentifier","src":"645:5:30"},"nativeSrc":"645:25:30","nodeType":"YulFunctionCall","src":"645:25:30"},"variables":[{"name":"value_1","nativeSrc":"634:7:30","nodeType":"YulTypedName","src":"634:7:30","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"722:7:30","nodeType":"YulIdentifier","src":"722:7:30"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nativeSrc":"679:42:30","nodeType":"YulIdentifier","src":"679:42:30"},"nativeSrc":"679:51:30","nodeType":"YulFunctionCall","src":"679:51:30"},"nativeSrc":"679:51:30","nodeType":"YulExpressionStatement","src":"679:51:30"},{"nativeSrc":"739:17:30","nodeType":"YulAssignment","src":"739:17:30","value":{"name":"value_1","nativeSrc":"749:7:30","nodeType":"YulIdentifier","src":"749:7:30"},"variableNames":[{"name":"value3","nativeSrc":"739:6:30","nodeType":"YulIdentifier","src":"739:6:30"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:594:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"292:9:30","nodeType":"YulTypedName","src":"292:9:30","type":""},{"name":"dataEnd","nativeSrc":"303:7:30","nodeType":"YulTypedName","src":"303:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"315:6:30","nodeType":"YulTypedName","src":"315:6:30","type":""},{"name":"value1","nativeSrc":"323:6:30","nodeType":"YulTypedName","src":"323:6:30","type":""},{"name":"value2","nativeSrc":"331:6:30","nodeType":"YulTypedName","src":"331:6:30","type":""},{"name":"value3","nativeSrc":"339:6:30","nodeType":"YulTypedName","src":"339:6:30","type":""}],"src":"168:594:30"},{"body":{"nativeSrc":"816:176:30","nodeType":"YulBlock","src":"816:176:30","statements":[{"nativeSrc":"826:17:30","nodeType":"YulAssignment","src":"826:17:30","value":{"arguments":[{"name":"x","nativeSrc":"838:1:30","nodeType":"YulIdentifier","src":"838:1:30"},{"name":"y","nativeSrc":"841:1:30","nodeType":"YulIdentifier","src":"841:1:30"}],"functionName":{"name":"sub","nativeSrc":"834:3:30","nodeType":"YulIdentifier","src":"834:3:30"},"nativeSrc":"834:9:30","nodeType":"YulFunctionCall","src":"834:9:30"},"variableNames":[{"name":"diff","nativeSrc":"826:4:30","nodeType":"YulIdentifier","src":"826:4:30"}]},{"body":{"nativeSrc":"875:111:30","nodeType":"YulBlock","src":"875:111:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"896:1:30","nodeType":"YulLiteral","src":"896:1:30","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"903:3:30","nodeType":"YulLiteral","src":"903:3:30","type":"","value":"224"},{"kind":"number","nativeSrc":"908:10:30","nodeType":"YulLiteral","src":"908:10:30","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"899:3:30","nodeType":"YulIdentifier","src":"899:3:30"},"nativeSrc":"899:20:30","nodeType":"YulFunctionCall","src":"899:20:30"}],"functionName":{"name":"mstore","nativeSrc":"889:6:30","nodeType":"YulIdentifier","src":"889:6:30"},"nativeSrc":"889:31:30","nodeType":"YulFunctionCall","src":"889:31:30"},"nativeSrc":"889:31:30","nodeType":"YulExpressionStatement","src":"889:31:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"940:1:30","nodeType":"YulLiteral","src":"940:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"943:4:30","nodeType":"YulLiteral","src":"943:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"933:6:30","nodeType":"YulIdentifier","src":"933:6:30"},"nativeSrc":"933:15:30","nodeType":"YulFunctionCall","src":"933:15:30"},"nativeSrc":"933:15:30","nodeType":"YulExpressionStatement","src":"933:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"968:1:30","nodeType":"YulLiteral","src":"968:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"971:4:30","nodeType":"YulLiteral","src":"971:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"961:6:30","nodeType":"YulIdentifier","src":"961:6:30"},"nativeSrc":"961:15:30","nodeType":"YulFunctionCall","src":"961:15:30"},"nativeSrc":"961:15:30","nodeType":"YulExpressionStatement","src":"961:15:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"858:4:30","nodeType":"YulIdentifier","src":"858:4:30"},{"name":"x","nativeSrc":"864:1:30","nodeType":"YulIdentifier","src":"864:1:30"}],"functionName":{"name":"gt","nativeSrc":"855:2:30","nodeType":"YulIdentifier","src":"855:2:30"},"nativeSrc":"855:11:30","nodeType":"YulFunctionCall","src":"855:11:30"},"nativeSrc":"852:134:30","nodeType":"YulIf","src":"852:134:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"767:225:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"798:1:30","nodeType":"YulTypedName","src":"798:1:30","type":""},{"name":"y","nativeSrc":"801:1:30","nodeType":"YulTypedName","src":"801:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"807:4:30","nodeType":"YulTypedName","src":"807:4:30","type":""}],"src":"767:225:30"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_contract$_IERC1155Mintable_$903t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value3 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x147A CODESIZE SUB DUP1 PUSH3 0x147A DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x1D6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP4 DUP4 DUP4 DUP4 CALLER PUSH3 0x5D DUP2 PUSH3 0x56 PUSH3 0x7F JUMP JUMPDEST SWAP1 PUSH3 0xB5 JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0xE0 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x248 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x226 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x10C JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x12C PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x124 PUSH3 0x130 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x160 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x226 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x18F JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x1ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD PUSH3 0x208 DUP2 PUSH3 0x1BD JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x21B DUP2 PUSH3 0x1BD JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xAF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x11B9 PUSH3 0x2C1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x24A ADD MSTORE PUSH2 0x6BB ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x20D ADD MSTORE DUP2 DUP2 PUSH2 0x795 ADD MSTORE PUSH2 0x832 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x199 ADD MSTORE PUSH2 0x7D2 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x139 ADD MSTORE DUP2 DUP2 PUSH2 0x1CB ADD MSTORE DUP2 DUP2 PUSH2 0xBF1 ADD MSTORE DUP2 DUP2 PUSH2 0xC79 ADD MSTORE DUP2 DUP2 PUSH2 0xD2C ADD MSTORE PUSH2 0xD6A ADD MSTORE PUSH2 0x11B9 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP3 SWAP2 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x159 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x479 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1023 JUMP JUMPDEST PUSH2 0x4AF JUMP JUMPDEST PUSH2 0x135 PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323 DUP3 PUSH2 0x31D PUSH2 0x8C9 JUMP JUMPDEST SWAP1 PUSH2 0x8F7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x334 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x33C PUSH2 0x9DB JUMP JUMPDEST SWAP1 PUSH2 0xA09 JUMP JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x351 JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH2 0xA78 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0x486 PUSH2 0x9DB JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0x9D1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x4F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x50E JUMPI POP DUP2 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x591 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x5EB DUP3 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA83 SWAP1 POP JUMP JUMPDEST PUSH2 0x640 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x6B7 SWAP1 PUSH1 0x1 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x713 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP4 POP DUP12 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8C6 PUSH2 0x8B6 PUSH2 0x9D1 JUMP JUMPDEST DUP3 PUSH2 0x8BF PUSH2 0x9DB JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA99 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10F5 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x947 JUMPI POP PUSH1 0x0 PUSH2 0x323 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x998 JUMPI POP PUSH1 0x1 PUSH2 0x323 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10F5 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH2 0xCF5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA90 DUP6 DUP5 PUSH2 0xE5F JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xBBE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xBC8 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xCE4 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE4 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST ISZERO PUSH2 0xCEE JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD06 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD14 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xE49 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST ISZERO PUSH2 0xE56 JUMPI PUSH2 0x471 PUSH2 0xEA2 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE9A JUMPI PUSH2 0xE90 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE83 JUMPI PUSH2 0xE83 PUSH2 0x112A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xED3 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE64 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEEF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1001 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEFE DUP3 PUSH2 0xFC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0x10A8 PUSH1 0x40 DUP7 ADD PUSH2 0xFC6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x10B3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x111A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SLOAD EXP PUSH8 0x6258DED053F3936 0x1E 0xCE 0x5D 0xC6 0x2E PUSH9 0x20D795B71240A52223 0x22 0xA7 0x2E PC 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"390:637:29:-:0;;;472:246;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;660:7:29;669:10;681:14;697:17;4039:10:27;1008:63:0;4039:10:27;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;4061:18:27::2;::::0;;;;4089:24:::2;::::0;-1:-1:-1;;;;;4123:32:27::2;;::::0;-1:-1:-1;390:637:29;;-1:-1:-1;;;390:637:29;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:149:30:-;-1:-1:-1;;;;;107:31:30;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:594::-;315:6;323;331;339;392:3;380:9;371:7;367:23;363:33;360:53;;;409:1;406;399:12;360:53;438:9;432:16;422:26;;488:2;477:9;473:18;467:25;457:35;;535:2;524:9;520:18;514:25;548:49;591:5;548:49;:::i;:::-;666:2;651:18;;645:25;616:5;;-1:-1:-1;679:51:30;645:25;679:51;:::i;:::-;168:594;;;;-1:-1:-1;168:594:30;;-1:-1:-1;;168:594:30:o;767:225::-;834:9;;;855:11;;;852:134;;;908:10;903:3;899:20;896:1;889:31;943:4;940:1;933:15;971:4;968:1;961:15;767:225;390:637:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_2756":{"entryPoint":null,"id":2756,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_2750":{"entryPoint":null,"id":2750,"parameterSlots":0,"returnSlots":0},"@TOKEN_ID_2753":{"entryPoint":null,"id":2753,"parameterSlots":0,"returnSlots":0},"@__msgData_3204":{"entryPoint":1126,"id":3204,"parameterSlots":0,"returnSlots":2},"@__msgSender_3194":{"entryPoint":1189,"id":3194,"parameterSlots":0,"returnSlots":1},"@_efficientHash_1854":{"entryPoint":null,"id":1854,"parameterSlots":2,"returnSlots":1},"@_hashPair_1843":{"entryPoint":3795,"id":1843,"parameterSlots":2,"returnSlots":1},"@_msgData_2897":{"entryPoint":2680,"id":2897,"parameterSlots":0,"returnSlots":2},"@_msgData_700":{"entryPoint":3317,"id":700,"parameterSlots":0,"returnSlots":2},"@_msgSender_2883":{"entryPoint":2513,"id":2883,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":2990,"id":652,"parameterSlots":0,"returnSlots":1},"@claimStatus_2770":{"entryPoint":null,"id":2770,"parameterSlots":0,"returnSlots":0},"@claimWindows_2765":{"entryPoint":null,"id":2765,"parameterSlots":0,"returnSlots":0},"@claim_3094":{"entryPoint":1199,"id":3094,"parameterSlots":4,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":2569,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":2523,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2249,"id":531,"parameterSlots":0,"returnSlots":1},"@msgData_755":{"entryPoint":3746,"id":755,"parameterSlots":0,"returnSlots":2},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_2759":{"entryPoint":null,"id":2759,"parameterSlots":0,"returnSlots":0},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1145,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1438":{"entryPoint":3679,"id":1438,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_2968":{"entryPoint":809,"id":2968,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":783,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2295,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2713,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2219,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1377":{"entryPoint":2691,"id":1377,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4038,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4079,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4106,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address":{"entryPoint":4131,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3911,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3845,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":3961,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":4441,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":4322,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4341,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4275,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4394,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8031:30","nodeType":"YulBlock","src":"0:8031:30","statements":[{"nativeSrc":"6:3:30","nodeType":"YulBlock","src":"6:3:30","statements":[]},{"body":{"nativeSrc":"83:263:30","nodeType":"YulBlock","src":"83:263:30","statements":[{"body":{"nativeSrc":"129:16:30","nodeType":"YulBlock","src":"129:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:30","nodeType":"YulLiteral","src":"138:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:30","nodeType":"YulLiteral","src":"141:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:30","nodeType":"YulIdentifier","src":"131:6:30"},"nativeSrc":"131:12:30","nodeType":"YulFunctionCall","src":"131:12:30"},"nativeSrc":"131:12:30","nodeType":"YulExpressionStatement","src":"131:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:30","nodeType":"YulIdentifier","src":"104:7:30"},{"name":"headStart","nativeSrc":"113:9:30","nodeType":"YulIdentifier","src":"113:9:30"}],"functionName":{"name":"sub","nativeSrc":"100:3:30","nodeType":"YulIdentifier","src":"100:3:30"},"nativeSrc":"100:23:30","nodeType":"YulFunctionCall","src":"100:23:30"},{"kind":"number","nativeSrc":"125:2:30","nodeType":"YulLiteral","src":"125:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:30","nodeType":"YulIdentifier","src":"96:3:30"},"nativeSrc":"96:32:30","nodeType":"YulFunctionCall","src":"96:32:30"},"nativeSrc":"93:52:30","nodeType":"YulIf","src":"93:52:30"},{"nativeSrc":"154:36:30","nodeType":"YulVariableDeclaration","src":"154:36:30","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:30","nodeType":"YulIdentifier","src":"180:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:30","nodeType":"YulIdentifier","src":"167:12:30"},"nativeSrc":"167:23:30","nodeType":"YulFunctionCall","src":"167:23:30"},"variables":[{"name":"value","nativeSrc":"158:5:30","nodeType":"YulTypedName","src":"158:5:30","type":""}]},{"body":{"nativeSrc":"300:16:30","nodeType":"YulBlock","src":"300:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:30","nodeType":"YulLiteral","src":"309:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:30","nodeType":"YulLiteral","src":"312:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:30","nodeType":"YulIdentifier","src":"302:6:30"},"nativeSrc":"302:12:30","nodeType":"YulFunctionCall","src":"302:12:30"},"nativeSrc":"302:12:30","nodeType":"YulExpressionStatement","src":"302:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:30","nodeType":"YulIdentifier","src":"212:5:30"},{"arguments":[{"name":"value","nativeSrc":"223:5:30","nodeType":"YulIdentifier","src":"223:5:30"},{"kind":"number","nativeSrc":"230:66:30","nodeType":"YulLiteral","src":"230:66:30","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:30","nodeType":"YulIdentifier","src":"219:3:30"},"nativeSrc":"219:78:30","nodeType":"YulFunctionCall","src":"219:78:30"}],"functionName":{"name":"eq","nativeSrc":"209:2:30","nodeType":"YulIdentifier","src":"209:2:30"},"nativeSrc":"209:89:30","nodeType":"YulFunctionCall","src":"209:89:30"}],"functionName":{"name":"iszero","nativeSrc":"202:6:30","nodeType":"YulIdentifier","src":"202:6:30"},"nativeSrc":"202:97:30","nodeType":"YulFunctionCall","src":"202:97:30"},"nativeSrc":"199:117:30","nodeType":"YulIf","src":"199:117:30"},{"nativeSrc":"325:15:30","nodeType":"YulAssignment","src":"325:15:30","value":{"name":"value","nativeSrc":"335:5:30","nodeType":"YulIdentifier","src":"335:5:30"},"variableNames":[{"name":"value0","nativeSrc":"325:6:30","nodeType":"YulIdentifier","src":"325:6:30"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:30","nodeType":"YulTypedName","src":"49:9:30","type":""},{"name":"dataEnd","nativeSrc":"60:7:30","nodeType":"YulTypedName","src":"60:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:30","nodeType":"YulTypedName","src":"72:6:30","type":""}],"src":"14:332:30"},{"body":{"nativeSrc":"446:92:30","nodeType":"YulBlock","src":"446:92:30","statements":[{"nativeSrc":"456:26:30","nodeType":"YulAssignment","src":"456:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:30","nodeType":"YulIdentifier","src":"468:9:30"},{"kind":"number","nativeSrc":"479:2:30","nodeType":"YulLiteral","src":"479:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:30","nodeType":"YulIdentifier","src":"464:3:30"},"nativeSrc":"464:18:30","nodeType":"YulFunctionCall","src":"464:18:30"},"variableNames":[{"name":"tail","nativeSrc":"456:4:30","nodeType":"YulIdentifier","src":"456:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:30","nodeType":"YulIdentifier","src":"498:9:30"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:30","nodeType":"YulIdentifier","src":"523:6:30"}],"functionName":{"name":"iszero","nativeSrc":"516:6:30","nodeType":"YulIdentifier","src":"516:6:30"},"nativeSrc":"516:14:30","nodeType":"YulFunctionCall","src":"516:14:30"}],"functionName":{"name":"iszero","nativeSrc":"509:6:30","nodeType":"YulIdentifier","src":"509:6:30"},"nativeSrc":"509:22:30","nodeType":"YulFunctionCall","src":"509:22:30"}],"functionName":{"name":"mstore","nativeSrc":"491:6:30","nodeType":"YulIdentifier","src":"491:6:30"},"nativeSrc":"491:41:30","nodeType":"YulFunctionCall","src":"491:41:30"},"nativeSrc":"491:41:30","nodeType":"YulExpressionStatement","src":"491:41:30"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:30","nodeType":"YulTypedName","src":"415:9:30","type":""},{"name":"value0","nativeSrc":"426:6:30","nodeType":"YulTypedName","src":"426:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:30","nodeType":"YulTypedName","src":"437:4:30","type":""}],"src":"351:187:30"},{"body":{"nativeSrc":"664:264:30","nodeType":"YulBlock","src":"664:264:30","statements":[{"body":{"nativeSrc":"711:16:30","nodeType":"YulBlock","src":"711:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:30","nodeType":"YulLiteral","src":"720:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:30","nodeType":"YulLiteral","src":"723:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:30","nodeType":"YulIdentifier","src":"713:6:30"},"nativeSrc":"713:12:30","nodeType":"YulFunctionCall","src":"713:12:30"},"nativeSrc":"713:12:30","nodeType":"YulExpressionStatement","src":"713:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:30","nodeType":"YulIdentifier","src":"685:7:30"},{"name":"headStart","nativeSrc":"694:9:30","nodeType":"YulIdentifier","src":"694:9:30"}],"functionName":{"name":"sub","nativeSrc":"681:3:30","nodeType":"YulIdentifier","src":"681:3:30"},"nativeSrc":"681:23:30","nodeType":"YulFunctionCall","src":"681:23:30"},{"kind":"number","nativeSrc":"706:3:30","nodeType":"YulLiteral","src":"706:3:30","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:30","nodeType":"YulIdentifier","src":"677:3:30"},"nativeSrc":"677:33:30","nodeType":"YulFunctionCall","src":"677:33:30"},"nativeSrc":"674:53:30","nodeType":"YulIf","src":"674:53:30"},{"nativeSrc":"736:33:30","nodeType":"YulAssignment","src":"736:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"759:9:30","nodeType":"YulIdentifier","src":"759:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"746:12:30","nodeType":"YulIdentifier","src":"746:12:30"},"nativeSrc":"746:23:30","nodeType":"YulFunctionCall","src":"746:23:30"},"variableNames":[{"name":"value0","nativeSrc":"736:6:30","nodeType":"YulIdentifier","src":"736:6:30"}]},{"nativeSrc":"778:42:30","nodeType":"YulAssignment","src":"778:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"805:9:30","nodeType":"YulIdentifier","src":"805:9:30"},{"kind":"number","nativeSrc":"816:2:30","nodeType":"YulLiteral","src":"816:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"801:3:30","nodeType":"YulIdentifier","src":"801:3:30"},"nativeSrc":"801:18:30","nodeType":"YulFunctionCall","src":"801:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"788:12:30","nodeType":"YulIdentifier","src":"788:12:30"},"nativeSrc":"788:32:30","nodeType":"YulFunctionCall","src":"788:32:30"},"variableNames":[{"name":"value1","nativeSrc":"778:6:30","nodeType":"YulIdentifier","src":"778:6:30"}]},{"nativeSrc":"829:42:30","nodeType":"YulAssignment","src":"829:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"856:9:30","nodeType":"YulIdentifier","src":"856:9:30"},{"kind":"number","nativeSrc":"867:2:30","nodeType":"YulLiteral","src":"867:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"852:3:30","nodeType":"YulIdentifier","src":"852:3:30"},"nativeSrc":"852:18:30","nodeType":"YulFunctionCall","src":"852:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"839:12:30","nodeType":"YulIdentifier","src":"839:12:30"},"nativeSrc":"839:32:30","nodeType":"YulFunctionCall","src":"839:32:30"},"variableNames":[{"name":"value2","nativeSrc":"829:6:30","nodeType":"YulIdentifier","src":"829:6:30"}]},{"nativeSrc":"880:42:30","nodeType":"YulAssignment","src":"880:42:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"907:9:30","nodeType":"YulIdentifier","src":"907:9:30"},{"kind":"number","nativeSrc":"918:2:30","nodeType":"YulLiteral","src":"918:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"903:3:30","nodeType":"YulIdentifier","src":"903:3:30"},"nativeSrc":"903:18:30","nodeType":"YulFunctionCall","src":"903:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"890:12:30","nodeType":"YulIdentifier","src":"890:12:30"},"nativeSrc":"890:32:30","nodeType":"YulFunctionCall","src":"890:32:30"},"variableNames":[{"name":"value3","nativeSrc":"880:6:30","nodeType":"YulIdentifier","src":"880:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:385:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:30","nodeType":"YulTypedName","src":"606:9:30","type":""},{"name":"dataEnd","nativeSrc":"617:7:30","nodeType":"YulTypedName","src":"617:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:30","nodeType":"YulTypedName","src":"629:6:30","type":""},{"name":"value1","nativeSrc":"637:6:30","nodeType":"YulTypedName","src":"637:6:30","type":""},{"name":"value2","nativeSrc":"645:6:30","nodeType":"YulTypedName","src":"645:6:30","type":""},{"name":"value3","nativeSrc":"653:6:30","nodeType":"YulTypedName","src":"653:6:30","type":""}],"src":"543:385:30"},{"body":{"nativeSrc":"1060:125:30","nodeType":"YulBlock","src":"1060:125:30","statements":[{"nativeSrc":"1070:26:30","nodeType":"YulAssignment","src":"1070:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1082:9:30","nodeType":"YulIdentifier","src":"1082:9:30"},{"kind":"number","nativeSrc":"1093:2:30","nodeType":"YulLiteral","src":"1093:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1078:3:30","nodeType":"YulIdentifier","src":"1078:3:30"},"nativeSrc":"1078:18:30","nodeType":"YulFunctionCall","src":"1078:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1070:4:30","nodeType":"YulIdentifier","src":"1070:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1112:9:30","nodeType":"YulIdentifier","src":"1112:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1127:6:30","nodeType":"YulIdentifier","src":"1127:6:30"},{"kind":"number","nativeSrc":"1135:42:30","nodeType":"YulLiteral","src":"1135:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1123:3:30","nodeType":"YulIdentifier","src":"1123:3:30"},"nativeSrc":"1123:55:30","nodeType":"YulFunctionCall","src":"1123:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1105:6:30","nodeType":"YulIdentifier","src":"1105:6:30"},"nativeSrc":"1105:74:30","nodeType":"YulFunctionCall","src":"1105:74:30"},"nativeSrc":"1105:74:30","nodeType":"YulExpressionStatement","src":"1105:74:30"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"933:252:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1029:9:30","nodeType":"YulTypedName","src":"1029:9:30","type":""},{"name":"value0","nativeSrc":"1040:6:30","nodeType":"YulTypedName","src":"1040:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1051:4:30","nodeType":"YulTypedName","src":"1051:4:30","type":""}],"src":"933:252:30"},{"body":{"nativeSrc":"1319:318:30","nodeType":"YulBlock","src":"1319:318:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1336:9:30","nodeType":"YulIdentifier","src":"1336:9:30"},{"kind":"number","nativeSrc":"1347:2:30","nodeType":"YulLiteral","src":"1347:2:30","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1329:6:30","nodeType":"YulIdentifier","src":"1329:6:30"},"nativeSrc":"1329:21:30","nodeType":"YulFunctionCall","src":"1329:21:30"},"nativeSrc":"1329:21:30","nodeType":"YulExpressionStatement","src":"1329:21:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1370:9:30","nodeType":"YulIdentifier","src":"1370:9:30"},{"kind":"number","nativeSrc":"1381:2:30","nodeType":"YulLiteral","src":"1381:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1366:3:30","nodeType":"YulIdentifier","src":"1366:3:30"},"nativeSrc":"1366:18:30","nodeType":"YulFunctionCall","src":"1366:18:30"},{"name":"value1","nativeSrc":"1386:6:30","nodeType":"YulIdentifier","src":"1386:6:30"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:30","nodeType":"YulIdentifier","src":"1359:6:30"},"nativeSrc":"1359:34:30","nodeType":"YulFunctionCall","src":"1359:34:30"},"nativeSrc":"1359:34:30","nodeType":"YulExpressionStatement","src":"1359:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1419:9:30","nodeType":"YulIdentifier","src":"1419:9:30"},{"kind":"number","nativeSrc":"1430:2:30","nodeType":"YulLiteral","src":"1430:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1415:3:30","nodeType":"YulIdentifier","src":"1415:3:30"},"nativeSrc":"1415:18:30","nodeType":"YulFunctionCall","src":"1415:18:30"},{"name":"value0","nativeSrc":"1435:6:30","nodeType":"YulIdentifier","src":"1435:6:30"},{"name":"value1","nativeSrc":"1443:6:30","nodeType":"YulIdentifier","src":"1443:6:30"}],"functionName":{"name":"calldatacopy","nativeSrc":"1402:12:30","nodeType":"YulIdentifier","src":"1402:12:30"},"nativeSrc":"1402:48:30","nodeType":"YulFunctionCall","src":"1402:48:30"},"nativeSrc":"1402:48:30","nodeType":"YulExpressionStatement","src":"1402:48:30"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1474:9:30","nodeType":"YulIdentifier","src":"1474:9:30"},{"name":"value1","nativeSrc":"1485:6:30","nodeType":"YulIdentifier","src":"1485:6:30"}],"functionName":{"name":"add","nativeSrc":"1470:3:30","nodeType":"YulIdentifier","src":"1470:3:30"},"nativeSrc":"1470:22:30","nodeType":"YulFunctionCall","src":"1470:22:30"},{"kind":"number","nativeSrc":"1494:2:30","nodeType":"YulLiteral","src":"1494:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1466:3:30","nodeType":"YulIdentifier","src":"1466:3:30"},"nativeSrc":"1466:31:30","nodeType":"YulFunctionCall","src":"1466:31:30"},{"kind":"number","nativeSrc":"1499:1:30","nodeType":"YulLiteral","src":"1499:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1459:6:30","nodeType":"YulIdentifier","src":"1459:6:30"},"nativeSrc":"1459:42:30","nodeType":"YulFunctionCall","src":"1459:42:30"},"nativeSrc":"1459:42:30","nodeType":"YulExpressionStatement","src":"1459:42:30"},{"nativeSrc":"1510:121:30","nodeType":"YulAssignment","src":"1510:121:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1526:9:30","nodeType":"YulIdentifier","src":"1526:9:30"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1545:6:30","nodeType":"YulIdentifier","src":"1545:6:30"},{"kind":"number","nativeSrc":"1553:2:30","nodeType":"YulLiteral","src":"1553:2:30","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1541:3:30","nodeType":"YulIdentifier","src":"1541:3:30"},"nativeSrc":"1541:15:30","nodeType":"YulFunctionCall","src":"1541:15:30"},{"kind":"number","nativeSrc":"1558:66:30","nodeType":"YulLiteral","src":"1558:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1537:3:30","nodeType":"YulIdentifier","src":"1537:3:30"},"nativeSrc":"1537:88:30","nodeType":"YulFunctionCall","src":"1537:88:30"}],"functionName":{"name":"add","nativeSrc":"1522:3:30","nodeType":"YulIdentifier","src":"1522:3:30"},"nativeSrc":"1522:104:30","nodeType":"YulFunctionCall","src":"1522:104:30"},{"kind":"number","nativeSrc":"1628:2:30","nodeType":"YulLiteral","src":"1628:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1518:3:30","nodeType":"YulIdentifier","src":"1518:3:30"},"nativeSrc":"1518:113:30","nodeType":"YulFunctionCall","src":"1518:113:30"},"variableNames":[{"name":"tail","nativeSrc":"1510:4:30","nodeType":"YulIdentifier","src":"1510:4:30"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1190:447:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1280:9:30","nodeType":"YulTypedName","src":"1280:9:30","type":""},{"name":"value1","nativeSrc":"1291:6:30","nodeType":"YulTypedName","src":"1291:6:30","type":""},{"name":"value0","nativeSrc":"1299:6:30","nodeType":"YulTypedName","src":"1299:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1310:4:30","nodeType":"YulTypedName","src":"1310:4:30","type":""}],"src":"1190:447:30"},{"body":{"nativeSrc":"1767:125:30","nodeType":"YulBlock","src":"1767:125:30","statements":[{"nativeSrc":"1777:26:30","nodeType":"YulAssignment","src":"1777:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"1789:9:30","nodeType":"YulIdentifier","src":"1789:9:30"},{"kind":"number","nativeSrc":"1800:2:30","nodeType":"YulLiteral","src":"1800:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1785:3:30","nodeType":"YulIdentifier","src":"1785:3:30"},"nativeSrc":"1785:18:30","nodeType":"YulFunctionCall","src":"1785:18:30"},"variableNames":[{"name":"tail","nativeSrc":"1777:4:30","nodeType":"YulIdentifier","src":"1777:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1819:9:30","nodeType":"YulIdentifier","src":"1819:9:30"},{"arguments":[{"name":"value0","nativeSrc":"1834:6:30","nodeType":"YulIdentifier","src":"1834:6:30"},{"kind":"number","nativeSrc":"1842:42:30","nodeType":"YulLiteral","src":"1842:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1830:3:30","nodeType":"YulIdentifier","src":"1830:3:30"},"nativeSrc":"1830:55:30","nodeType":"YulFunctionCall","src":"1830:55:30"}],"functionName":{"name":"mstore","nativeSrc":"1812:6:30","nodeType":"YulIdentifier","src":"1812:6:30"},"nativeSrc":"1812:74:30","nodeType":"YulFunctionCall","src":"1812:74:30"},"nativeSrc":"1812:74:30","nodeType":"YulExpressionStatement","src":"1812:74:30"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed","nativeSrc":"1642:250:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1736:9:30","nodeType":"YulTypedName","src":"1736:9:30","type":""},{"name":"value0","nativeSrc":"1747:6:30","nodeType":"YulTypedName","src":"1747:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1758:4:30","nodeType":"YulTypedName","src":"1758:4:30","type":""}],"src":"1642:250:30"},{"body":{"nativeSrc":"1946:147:30","nodeType":"YulBlock","src":"1946:147:30","statements":[{"nativeSrc":"1956:29:30","nodeType":"YulAssignment","src":"1956:29:30","value":{"arguments":[{"name":"offset","nativeSrc":"1978:6:30","nodeType":"YulIdentifier","src":"1978:6:30"}],"functionName":{"name":"calldataload","nativeSrc":"1965:12:30","nodeType":"YulIdentifier","src":"1965:12:30"},"nativeSrc":"1965:20:30","nodeType":"YulFunctionCall","src":"1965:20:30"},"variableNames":[{"name":"value","nativeSrc":"1956:5:30","nodeType":"YulIdentifier","src":"1956:5:30"}]},{"body":{"nativeSrc":"2071:16:30","nodeType":"YulBlock","src":"2071:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2080:1:30","nodeType":"YulLiteral","src":"2080:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2083:1:30","nodeType":"YulLiteral","src":"2083:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2073:6:30","nodeType":"YulIdentifier","src":"2073:6:30"},"nativeSrc":"2073:12:30","nodeType":"YulFunctionCall","src":"2073:12:30"},"nativeSrc":"2073:12:30","nodeType":"YulExpressionStatement","src":"2073:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2007:5:30","nodeType":"YulIdentifier","src":"2007:5:30"},{"arguments":[{"name":"value","nativeSrc":"2018:5:30","nodeType":"YulIdentifier","src":"2018:5:30"},{"kind":"number","nativeSrc":"2025:42:30","nodeType":"YulLiteral","src":"2025:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2014:3:30","nodeType":"YulIdentifier","src":"2014:3:30"},"nativeSrc":"2014:54:30","nodeType":"YulFunctionCall","src":"2014:54:30"}],"functionName":{"name":"eq","nativeSrc":"2004:2:30","nodeType":"YulIdentifier","src":"2004:2:30"},"nativeSrc":"2004:65:30","nodeType":"YulFunctionCall","src":"2004:65:30"}],"functionName":{"name":"iszero","nativeSrc":"1997:6:30","nodeType":"YulIdentifier","src":"1997:6:30"},"nativeSrc":"1997:73:30","nodeType":"YulFunctionCall","src":"1997:73:30"},"nativeSrc":"1994:93:30","nodeType":"YulIf","src":"1994:93:30"}]},"name":"abi_decode_address","nativeSrc":"1897:196:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1925:6:30","nodeType":"YulTypedName","src":"1925:6:30","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1936:5:30","nodeType":"YulTypedName","src":"1936:5:30","type":""}],"src":"1897:196:30"},{"body":{"nativeSrc":"2168:116:30","nodeType":"YulBlock","src":"2168:116:30","statements":[{"body":{"nativeSrc":"2214:16:30","nodeType":"YulBlock","src":"2214:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2223:1:30","nodeType":"YulLiteral","src":"2223:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2226:1:30","nodeType":"YulLiteral","src":"2226:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2216:6:30","nodeType":"YulIdentifier","src":"2216:6:30"},"nativeSrc":"2216:12:30","nodeType":"YulFunctionCall","src":"2216:12:30"},"nativeSrc":"2216:12:30","nodeType":"YulExpressionStatement","src":"2216:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2189:7:30","nodeType":"YulIdentifier","src":"2189:7:30"},{"name":"headStart","nativeSrc":"2198:9:30","nodeType":"YulIdentifier","src":"2198:9:30"}],"functionName":{"name":"sub","nativeSrc":"2185:3:30","nodeType":"YulIdentifier","src":"2185:3:30"},"nativeSrc":"2185:23:30","nodeType":"YulFunctionCall","src":"2185:23:30"},{"kind":"number","nativeSrc":"2210:2:30","nodeType":"YulLiteral","src":"2210:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2181:3:30","nodeType":"YulIdentifier","src":"2181:3:30"},"nativeSrc":"2181:32:30","nodeType":"YulFunctionCall","src":"2181:32:30"},"nativeSrc":"2178:52:30","nodeType":"YulIf","src":"2178:52:30"},{"nativeSrc":"2239:39:30","nodeType":"YulAssignment","src":"2239:39:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2268:9:30","nodeType":"YulIdentifier","src":"2268:9:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2249:18:30","nodeType":"YulIdentifier","src":"2249:18:30"},"nativeSrc":"2249:29:30","nodeType":"YulFunctionCall","src":"2249:29:30"},"variableNames":[{"name":"value0","nativeSrc":"2239:6:30","nodeType":"YulIdentifier","src":"2239:6:30"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2098:186:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2134:9:30","nodeType":"YulTypedName","src":"2134:9:30","type":""},{"name":"dataEnd","nativeSrc":"2145:7:30","nodeType":"YulTypedName","src":"2145:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2157:6:30","nodeType":"YulTypedName","src":"2157:6:30","type":""}],"src":"2098:186:30"},{"body":{"nativeSrc":"2390:76:30","nodeType":"YulBlock","src":"2390:76:30","statements":[{"nativeSrc":"2400:26:30","nodeType":"YulAssignment","src":"2400:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2412:9:30","nodeType":"YulIdentifier","src":"2412:9:30"},{"kind":"number","nativeSrc":"2423:2:30","nodeType":"YulLiteral","src":"2423:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2408:3:30","nodeType":"YulIdentifier","src":"2408:3:30"},"nativeSrc":"2408:18:30","nodeType":"YulFunctionCall","src":"2408:18:30"},"variableNames":[{"name":"tail","nativeSrc":"2400:4:30","nodeType":"YulIdentifier","src":"2400:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2442:9:30","nodeType":"YulIdentifier","src":"2442:9:30"},{"name":"value0","nativeSrc":"2453:6:30","nodeType":"YulIdentifier","src":"2453:6:30"}],"functionName":{"name":"mstore","nativeSrc":"2435:6:30","nodeType":"YulIdentifier","src":"2435:6:30"},"nativeSrc":"2435:25:30","nodeType":"YulFunctionCall","src":"2435:25:30"},"nativeSrc":"2435:25:30","nodeType":"YulExpressionStatement","src":"2435:25:30"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2289:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2359:9:30","nodeType":"YulTypedName","src":"2359:9:30","type":""},{"name":"value0","nativeSrc":"2370:6:30","nodeType":"YulTypedName","src":"2370:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2381:4:30","nodeType":"YulTypedName","src":"2381:4:30","type":""}],"src":"2289:177:30"},{"body":{"nativeSrc":"2572:125:30","nodeType":"YulBlock","src":"2572:125:30","statements":[{"nativeSrc":"2582:26:30","nodeType":"YulAssignment","src":"2582:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2594:9:30","nodeType":"YulIdentifier","src":"2594:9:30"},{"kind":"number","nativeSrc":"2605:2:30","nodeType":"YulLiteral","src":"2605:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2590:3:30","nodeType":"YulIdentifier","src":"2590:3:30"},"nativeSrc":"2590:18:30","nodeType":"YulFunctionCall","src":"2590:18:30"},"variableNames":[{"name":"tail","nativeSrc":"2582:4:30","nodeType":"YulIdentifier","src":"2582:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2624:9:30","nodeType":"YulIdentifier","src":"2624:9:30"},{"arguments":[{"name":"value0","nativeSrc":"2639:6:30","nodeType":"YulIdentifier","src":"2639:6:30"},{"kind":"number","nativeSrc":"2647:42:30","nodeType":"YulLiteral","src":"2647:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2635:3:30","nodeType":"YulIdentifier","src":"2635:3:30"},"nativeSrc":"2635:55:30","nodeType":"YulFunctionCall","src":"2635:55:30"}],"functionName":{"name":"mstore","nativeSrc":"2617:6:30","nodeType":"YulIdentifier","src":"2617:6:30"},"nativeSrc":"2617:74:30","nodeType":"YulFunctionCall","src":"2617:74:30"},"nativeSrc":"2617:74:30","nodeType":"YulExpressionStatement","src":"2617:74:30"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2471:226:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2541:9:30","nodeType":"YulTypedName","src":"2541:9:30","type":""},{"name":"value0","nativeSrc":"2552:6:30","nodeType":"YulTypedName","src":"2552:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2563:4:30","nodeType":"YulTypedName","src":"2563:4:30","type":""}],"src":"2471:226:30"},{"body":{"nativeSrc":"2772:110:30","nodeType":"YulBlock","src":"2772:110:30","statements":[{"body":{"nativeSrc":"2818:16:30","nodeType":"YulBlock","src":"2818:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2827:1:30","nodeType":"YulLiteral","src":"2827:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"2830:1:30","nodeType":"YulLiteral","src":"2830:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2820:6:30","nodeType":"YulIdentifier","src":"2820:6:30"},"nativeSrc":"2820:12:30","nodeType":"YulFunctionCall","src":"2820:12:30"},"nativeSrc":"2820:12:30","nodeType":"YulExpressionStatement","src":"2820:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2793:7:30","nodeType":"YulIdentifier","src":"2793:7:30"},{"name":"headStart","nativeSrc":"2802:9:30","nodeType":"YulIdentifier","src":"2802:9:30"}],"functionName":{"name":"sub","nativeSrc":"2789:3:30","nodeType":"YulIdentifier","src":"2789:3:30"},"nativeSrc":"2789:23:30","nodeType":"YulFunctionCall","src":"2789:23:30"},{"kind":"number","nativeSrc":"2814:2:30","nodeType":"YulLiteral","src":"2814:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2785:3:30","nodeType":"YulIdentifier","src":"2785:3:30"},"nativeSrc":"2785:32:30","nodeType":"YulFunctionCall","src":"2785:32:30"},"nativeSrc":"2782:52:30","nodeType":"YulIf","src":"2782:52:30"},{"nativeSrc":"2843:33:30","nodeType":"YulAssignment","src":"2843:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"2866:9:30","nodeType":"YulIdentifier","src":"2866:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"2853:12:30","nodeType":"YulIdentifier","src":"2853:12:30"},"nativeSrc":"2853:23:30","nodeType":"YulFunctionCall","src":"2853:23:30"},"variableNames":[{"name":"value0","nativeSrc":"2843:6:30","nodeType":"YulIdentifier","src":"2843:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2702:180:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2738:9:30","nodeType":"YulTypedName","src":"2738:9:30","type":""},{"name":"dataEnd","nativeSrc":"2749:7:30","nodeType":"YulTypedName","src":"2749:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2761:6:30","nodeType":"YulTypedName","src":"2761:6:30","type":""}],"src":"2702:180:30"},{"body":{"nativeSrc":"3044:162:30","nodeType":"YulBlock","src":"3044:162:30","statements":[{"nativeSrc":"3054:26:30","nodeType":"YulAssignment","src":"3054:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3066:9:30","nodeType":"YulIdentifier","src":"3066:9:30"},{"kind":"number","nativeSrc":"3077:2:30","nodeType":"YulLiteral","src":"3077:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3062:3:30","nodeType":"YulIdentifier","src":"3062:3:30"},"nativeSrc":"3062:18:30","nodeType":"YulFunctionCall","src":"3062:18:30"},"variableNames":[{"name":"tail","nativeSrc":"3054:4:30","nodeType":"YulIdentifier","src":"3054:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3096:9:30","nodeType":"YulIdentifier","src":"3096:9:30"},{"name":"value0","nativeSrc":"3107:6:30","nodeType":"YulIdentifier","src":"3107:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3089:6:30","nodeType":"YulIdentifier","src":"3089:6:30"},"nativeSrc":"3089:25:30","nodeType":"YulFunctionCall","src":"3089:25:30"},"nativeSrc":"3089:25:30","nodeType":"YulExpressionStatement","src":"3089:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3134:9:30","nodeType":"YulIdentifier","src":"3134:9:30"},{"kind":"number","nativeSrc":"3145:2:30","nodeType":"YulLiteral","src":"3145:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3130:3:30","nodeType":"YulIdentifier","src":"3130:3:30"},"nativeSrc":"3130:18:30","nodeType":"YulFunctionCall","src":"3130:18:30"},{"name":"value1","nativeSrc":"3150:6:30","nodeType":"YulIdentifier","src":"3150:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3123:6:30","nodeType":"YulIdentifier","src":"3123:6:30"},"nativeSrc":"3123:34:30","nodeType":"YulFunctionCall","src":"3123:34:30"},"nativeSrc":"3123:34:30","nodeType":"YulExpressionStatement","src":"3123:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3177:9:30","nodeType":"YulIdentifier","src":"3177:9:30"},{"kind":"number","nativeSrc":"3188:2:30","nodeType":"YulLiteral","src":"3188:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3173:3:30","nodeType":"YulIdentifier","src":"3173:3:30"},"nativeSrc":"3173:18:30","nodeType":"YulFunctionCall","src":"3173:18:30"},{"name":"value2","nativeSrc":"3193:6:30","nodeType":"YulIdentifier","src":"3193:6:30"}],"functionName":{"name":"mstore","nativeSrc":"3166:6:30","nodeType":"YulIdentifier","src":"3166:6:30"},"nativeSrc":"3166:34:30","nodeType":"YulFunctionCall","src":"3166:34:30"},"nativeSrc":"3166:34:30","nodeType":"YulExpressionStatement","src":"3166:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"2887:319:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2997:9:30","nodeType":"YulTypedName","src":"2997:9:30","type":""},{"name":"value2","nativeSrc":"3008:6:30","nodeType":"YulTypedName","src":"3008:6:30","type":""},{"name":"value1","nativeSrc":"3016:6:30","nodeType":"YulTypedName","src":"3016:6:30","type":""},{"name":"value0","nativeSrc":"3024:6:30","nodeType":"YulTypedName","src":"3024:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3035:4:30","nodeType":"YulTypedName","src":"3035:4:30","type":""}],"src":"2887:319:30"},{"body":{"nativeSrc":"3350:618:30","nodeType":"YulBlock","src":"3350:618:30","statements":[{"body":{"nativeSrc":"3396:16:30","nodeType":"YulBlock","src":"3396:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3405:1:30","nodeType":"YulLiteral","src":"3405:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3408:1:30","nodeType":"YulLiteral","src":"3408:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3398:6:30","nodeType":"YulIdentifier","src":"3398:6:30"},"nativeSrc":"3398:12:30","nodeType":"YulFunctionCall","src":"3398:12:30"},"nativeSrc":"3398:12:30","nodeType":"YulExpressionStatement","src":"3398:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3371:7:30","nodeType":"YulIdentifier","src":"3371:7:30"},{"name":"headStart","nativeSrc":"3380:9:30","nodeType":"YulIdentifier","src":"3380:9:30"}],"functionName":{"name":"sub","nativeSrc":"3367:3:30","nodeType":"YulIdentifier","src":"3367:3:30"},"nativeSrc":"3367:23:30","nodeType":"YulFunctionCall","src":"3367:23:30"},{"kind":"number","nativeSrc":"3392:2:30","nodeType":"YulLiteral","src":"3392:2:30","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3363:3:30","nodeType":"YulIdentifier","src":"3363:3:30"},"nativeSrc":"3363:32:30","nodeType":"YulFunctionCall","src":"3363:32:30"},"nativeSrc":"3360:52:30","nodeType":"YulIf","src":"3360:52:30"},{"nativeSrc":"3421:33:30","nodeType":"YulAssignment","src":"3421:33:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3444:9:30","nodeType":"YulIdentifier","src":"3444:9:30"}],"functionName":{"name":"calldataload","nativeSrc":"3431:12:30","nodeType":"YulIdentifier","src":"3431:12:30"},"nativeSrc":"3431:23:30","nodeType":"YulFunctionCall","src":"3431:23:30"},"variableNames":[{"name":"value0","nativeSrc":"3421:6:30","nodeType":"YulIdentifier","src":"3421:6:30"}]},{"nativeSrc":"3463:46:30","nodeType":"YulVariableDeclaration","src":"3463:46:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3494:9:30","nodeType":"YulIdentifier","src":"3494:9:30"},{"kind":"number","nativeSrc":"3505:2:30","nodeType":"YulLiteral","src":"3505:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3490:3:30","nodeType":"YulIdentifier","src":"3490:3:30"},"nativeSrc":"3490:18:30","nodeType":"YulFunctionCall","src":"3490:18:30"}],"functionName":{"name":"calldataload","nativeSrc":"3477:12:30","nodeType":"YulIdentifier","src":"3477:12:30"},"nativeSrc":"3477:32:30","nodeType":"YulFunctionCall","src":"3477:32:30"},"variables":[{"name":"offset","nativeSrc":"3467:6:30","nodeType":"YulTypedName","src":"3467:6:30","type":""}]},{"nativeSrc":"3518:28:30","nodeType":"YulVariableDeclaration","src":"3518:28:30","value":{"kind":"number","nativeSrc":"3528:18:30","nodeType":"YulLiteral","src":"3528:18:30","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3522:2:30","nodeType":"YulTypedName","src":"3522:2:30","type":""}]},{"body":{"nativeSrc":"3573:16:30","nodeType":"YulBlock","src":"3573:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3582:1:30","nodeType":"YulLiteral","src":"3582:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3585:1:30","nodeType":"YulLiteral","src":"3585:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3575:6:30","nodeType":"YulIdentifier","src":"3575:6:30"},"nativeSrc":"3575:12:30","nodeType":"YulFunctionCall","src":"3575:12:30"},"nativeSrc":"3575:12:30","nodeType":"YulExpressionStatement","src":"3575:12:30"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3561:6:30","nodeType":"YulIdentifier","src":"3561:6:30"},{"name":"_1","nativeSrc":"3569:2:30","nodeType":"YulIdentifier","src":"3569:2:30"}],"functionName":{"name":"gt","nativeSrc":"3558:2:30","nodeType":"YulIdentifier","src":"3558:2:30"},"nativeSrc":"3558:14:30","nodeType":"YulFunctionCall","src":"3558:14:30"},"nativeSrc":"3555:34:30","nodeType":"YulIf","src":"3555:34:30"},{"nativeSrc":"3598:32:30","nodeType":"YulVariableDeclaration","src":"3598:32:30","value":{"arguments":[{"name":"headStart","nativeSrc":"3612:9:30","nodeType":"YulIdentifier","src":"3612:9:30"},{"name":"offset","nativeSrc":"3623:6:30","nodeType":"YulIdentifier","src":"3623:6:30"}],"functionName":{"name":"add","nativeSrc":"3608:3:30","nodeType":"YulIdentifier","src":"3608:3:30"},"nativeSrc":"3608:22:30","nodeType":"YulFunctionCall","src":"3608:22:30"},"variables":[{"name":"_2","nativeSrc":"3602:2:30","nodeType":"YulTypedName","src":"3602:2:30","type":""}]},{"body":{"nativeSrc":"3678:16:30","nodeType":"YulBlock","src":"3678:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3687:1:30","nodeType":"YulLiteral","src":"3687:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3690:1:30","nodeType":"YulLiteral","src":"3690:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3680:6:30","nodeType":"YulIdentifier","src":"3680:6:30"},"nativeSrc":"3680:12:30","nodeType":"YulFunctionCall","src":"3680:12:30"},"nativeSrc":"3680:12:30","nodeType":"YulExpressionStatement","src":"3680:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3657:2:30","nodeType":"YulIdentifier","src":"3657:2:30"},{"kind":"number","nativeSrc":"3661:4:30","nodeType":"YulLiteral","src":"3661:4:30","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3653:3:30","nodeType":"YulIdentifier","src":"3653:3:30"},"nativeSrc":"3653:13:30","nodeType":"YulFunctionCall","src":"3653:13:30"},{"name":"dataEnd","nativeSrc":"3668:7:30","nodeType":"YulIdentifier","src":"3668:7:30"}],"functionName":{"name":"slt","nativeSrc":"3649:3:30","nodeType":"YulIdentifier","src":"3649:3:30"},"nativeSrc":"3649:27:30","nodeType":"YulFunctionCall","src":"3649:27:30"}],"functionName":{"name":"iszero","nativeSrc":"3642:6:30","nodeType":"YulIdentifier","src":"3642:6:30"},"nativeSrc":"3642:35:30","nodeType":"YulFunctionCall","src":"3642:35:30"},"nativeSrc":"3639:55:30","nodeType":"YulIf","src":"3639:55:30"},{"nativeSrc":"3703:30:30","nodeType":"YulVariableDeclaration","src":"3703:30:30","value":{"arguments":[{"name":"_2","nativeSrc":"3730:2:30","nodeType":"YulIdentifier","src":"3730:2:30"}],"functionName":{"name":"calldataload","nativeSrc":"3717:12:30","nodeType":"YulIdentifier","src":"3717:12:30"},"nativeSrc":"3717:16:30","nodeType":"YulFunctionCall","src":"3717:16:30"},"variables":[{"name":"length","nativeSrc":"3707:6:30","nodeType":"YulTypedName","src":"3707:6:30","type":""}]},{"body":{"nativeSrc":"3760:16:30","nodeType":"YulBlock","src":"3760:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3769:1:30","nodeType":"YulLiteral","src":"3769:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3772:1:30","nodeType":"YulLiteral","src":"3772:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3762:6:30","nodeType":"YulIdentifier","src":"3762:6:30"},"nativeSrc":"3762:12:30","nodeType":"YulFunctionCall","src":"3762:12:30"},"nativeSrc":"3762:12:30","nodeType":"YulExpressionStatement","src":"3762:12:30"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3748:6:30","nodeType":"YulIdentifier","src":"3748:6:30"},{"name":"_1","nativeSrc":"3756:2:30","nodeType":"YulIdentifier","src":"3756:2:30"}],"functionName":{"name":"gt","nativeSrc":"3745:2:30","nodeType":"YulIdentifier","src":"3745:2:30"},"nativeSrc":"3745:14:30","nodeType":"YulFunctionCall","src":"3745:14:30"},"nativeSrc":"3742:34:30","nodeType":"YulIf","src":"3742:34:30"},{"body":{"nativeSrc":"3834:16:30","nodeType":"YulBlock","src":"3834:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3843:1:30","nodeType":"YulLiteral","src":"3843:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"3846:1:30","nodeType":"YulLiteral","src":"3846:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3836:6:30","nodeType":"YulIdentifier","src":"3836:6:30"},"nativeSrc":"3836:12:30","nodeType":"YulFunctionCall","src":"3836:12:30"},"nativeSrc":"3836:12:30","nodeType":"YulExpressionStatement","src":"3836:12:30"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3799:2:30","nodeType":"YulIdentifier","src":"3799:2:30"},{"arguments":[{"kind":"number","nativeSrc":"3807:1:30","nodeType":"YulLiteral","src":"3807:1:30","type":"","value":"5"},{"name":"length","nativeSrc":"3810:6:30","nodeType":"YulIdentifier","src":"3810:6:30"}],"functionName":{"name":"shl","nativeSrc":"3803:3:30","nodeType":"YulIdentifier","src":"3803:3:30"},"nativeSrc":"3803:14:30","nodeType":"YulFunctionCall","src":"3803:14:30"}],"functionName":{"name":"add","nativeSrc":"3795:3:30","nodeType":"YulIdentifier","src":"3795:3:30"},"nativeSrc":"3795:23:30","nodeType":"YulFunctionCall","src":"3795:23:30"},{"kind":"number","nativeSrc":"3820:2:30","nodeType":"YulLiteral","src":"3820:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3791:3:30","nodeType":"YulIdentifier","src":"3791:3:30"},"nativeSrc":"3791:32:30","nodeType":"YulFunctionCall","src":"3791:32:30"},{"name":"dataEnd","nativeSrc":"3825:7:30","nodeType":"YulIdentifier","src":"3825:7:30"}],"functionName":{"name":"gt","nativeSrc":"3788:2:30","nodeType":"YulIdentifier","src":"3788:2:30"},"nativeSrc":"3788:45:30","nodeType":"YulFunctionCall","src":"3788:45:30"},"nativeSrc":"3785:65:30","nodeType":"YulIf","src":"3785:65:30"},{"nativeSrc":"3859:21:30","nodeType":"YulAssignment","src":"3859:21:30","value":{"arguments":[{"name":"_2","nativeSrc":"3873:2:30","nodeType":"YulIdentifier","src":"3873:2:30"},{"kind":"number","nativeSrc":"3877:2:30","nodeType":"YulLiteral","src":"3877:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3869:3:30","nodeType":"YulIdentifier","src":"3869:3:30"},"nativeSrc":"3869:11:30","nodeType":"YulFunctionCall","src":"3869:11:30"},"variableNames":[{"name":"value1","nativeSrc":"3859:6:30","nodeType":"YulIdentifier","src":"3859:6:30"}]},{"nativeSrc":"3889:16:30","nodeType":"YulAssignment","src":"3889:16:30","value":{"name":"length","nativeSrc":"3899:6:30","nodeType":"YulIdentifier","src":"3899:6:30"},"variableNames":[{"name":"value2","nativeSrc":"3889:6:30","nodeType":"YulIdentifier","src":"3889:6:30"}]},{"nativeSrc":"3914:48:30","nodeType":"YulAssignment","src":"3914:48:30","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3947:9:30","nodeType":"YulIdentifier","src":"3947:9:30"},{"kind":"number","nativeSrc":"3958:2:30","nodeType":"YulLiteral","src":"3958:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3943:3:30","nodeType":"YulIdentifier","src":"3943:3:30"},"nativeSrc":"3943:18:30","nodeType":"YulFunctionCall","src":"3943:18:30"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3924:18:30","nodeType":"YulIdentifier","src":"3924:18:30"},"nativeSrc":"3924:38:30","nodeType":"YulFunctionCall","src":"3924:38:30"},"variableNames":[{"name":"value3","nativeSrc":"3914:6:30","nodeType":"YulIdentifier","src":"3914:6:30"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address","nativeSrc":"3211:757:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3292:9:30","nodeType":"YulTypedName","src":"3292:9:30","type":""},{"name":"dataEnd","nativeSrc":"3303:7:30","nodeType":"YulTypedName","src":"3303:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3315:6:30","nodeType":"YulTypedName","src":"3315:6:30","type":""},{"name":"value1","nativeSrc":"3323:6:30","nodeType":"YulTypedName","src":"3323:6:30","type":""},{"name":"value2","nativeSrc":"3331:6:30","nodeType":"YulTypedName","src":"3331:6:30","type":""},{"name":"value3","nativeSrc":"3339:6:30","nodeType":"YulTypedName","src":"3339:6:30","type":""}],"src":"3211:757:30"},{"body":{"nativeSrc":"4130:162:30","nodeType":"YulBlock","src":"4130:162:30","statements":[{"nativeSrc":"4140:26:30","nodeType":"YulAssignment","src":"4140:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4152:9:30","nodeType":"YulIdentifier","src":"4152:9:30"},{"kind":"number","nativeSrc":"4163:2:30","nodeType":"YulLiteral","src":"4163:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4148:3:30","nodeType":"YulIdentifier","src":"4148:3:30"},"nativeSrc":"4148:18:30","nodeType":"YulFunctionCall","src":"4148:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4140:4:30","nodeType":"YulIdentifier","src":"4140:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4182:9:30","nodeType":"YulIdentifier","src":"4182:9:30"},{"name":"value0","nativeSrc":"4193:6:30","nodeType":"YulIdentifier","src":"4193:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4175:6:30","nodeType":"YulIdentifier","src":"4175:6:30"},"nativeSrc":"4175:25:30","nodeType":"YulFunctionCall","src":"4175:25:30"},"nativeSrc":"4175:25:30","nodeType":"YulExpressionStatement","src":"4175:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4220:9:30","nodeType":"YulIdentifier","src":"4220:9:30"},{"kind":"number","nativeSrc":"4231:2:30","nodeType":"YulLiteral","src":"4231:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4216:3:30","nodeType":"YulIdentifier","src":"4216:3:30"},"nativeSrc":"4216:18:30","nodeType":"YulFunctionCall","src":"4216:18:30"},{"name":"value1","nativeSrc":"4236:6:30","nodeType":"YulIdentifier","src":"4236:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4209:6:30","nodeType":"YulIdentifier","src":"4209:6:30"},"nativeSrc":"4209:34:30","nodeType":"YulFunctionCall","src":"4209:34:30"},"nativeSrc":"4209:34:30","nodeType":"YulExpressionStatement","src":"4209:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4263:9:30","nodeType":"YulIdentifier","src":"4263:9:30"},{"kind":"number","nativeSrc":"4274:2:30","nodeType":"YulLiteral","src":"4274:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4259:3:30","nodeType":"YulIdentifier","src":"4259:3:30"},"nativeSrc":"4259:18:30","nodeType":"YulFunctionCall","src":"4259:18:30"},{"name":"value2","nativeSrc":"4279:6:30","nodeType":"YulIdentifier","src":"4279:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4252:6:30","nodeType":"YulIdentifier","src":"4252:6:30"},"nativeSrc":"4252:34:30","nodeType":"YulFunctionCall","src":"4252:34:30"},"nativeSrc":"4252:34:30","nodeType":"YulExpressionStatement","src":"4252:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3973:319:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4083:9:30","nodeType":"YulTypedName","src":"4083:9:30","type":""},{"name":"value2","nativeSrc":"4094:6:30","nodeType":"YulTypedName","src":"4094:6:30","type":""},{"name":"value1","nativeSrc":"4102:6:30","nodeType":"YulTypedName","src":"4102:6:30","type":""},{"name":"value0","nativeSrc":"4110:6:30","nodeType":"YulTypedName","src":"4110:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4121:4:30","nodeType":"YulTypedName","src":"4121:4:30","type":""}],"src":"3973:319:30"},{"body":{"nativeSrc":"4398:76:30","nodeType":"YulBlock","src":"4398:76:30","statements":[{"nativeSrc":"4408:26:30","nodeType":"YulAssignment","src":"4408:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4420:9:30","nodeType":"YulIdentifier","src":"4420:9:30"},{"kind":"number","nativeSrc":"4431:2:30","nodeType":"YulLiteral","src":"4431:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4416:3:30","nodeType":"YulIdentifier","src":"4416:3:30"},"nativeSrc":"4416:18:30","nodeType":"YulFunctionCall","src":"4416:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4408:4:30","nodeType":"YulIdentifier","src":"4408:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4450:9:30","nodeType":"YulIdentifier","src":"4450:9:30"},{"name":"value0","nativeSrc":"4461:6:30","nodeType":"YulIdentifier","src":"4461:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4443:6:30","nodeType":"YulIdentifier","src":"4443:6:30"},"nativeSrc":"4443:25:30","nodeType":"YulFunctionCall","src":"4443:25:30"},"nativeSrc":"4443:25:30","nodeType":"YulExpressionStatement","src":"4443:25:30"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"4297:177:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4367:9:30","nodeType":"YulTypedName","src":"4367:9:30","type":""},{"name":"value0","nativeSrc":"4378:6:30","nodeType":"YulTypedName","src":"4378:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4389:4:30","nodeType":"YulTypedName","src":"4389:4:30","type":""}],"src":"4297:177:30"},{"body":{"nativeSrc":"4608:119:30","nodeType":"YulBlock","src":"4608:119:30","statements":[{"nativeSrc":"4618:26:30","nodeType":"YulAssignment","src":"4618:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4630:9:30","nodeType":"YulIdentifier","src":"4630:9:30"},{"kind":"number","nativeSrc":"4641:2:30","nodeType":"YulLiteral","src":"4641:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4626:3:30","nodeType":"YulIdentifier","src":"4626:3:30"},"nativeSrc":"4626:18:30","nodeType":"YulFunctionCall","src":"4626:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4618:4:30","nodeType":"YulIdentifier","src":"4618:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4660:9:30","nodeType":"YulIdentifier","src":"4660:9:30"},{"name":"value0","nativeSrc":"4671:6:30","nodeType":"YulIdentifier","src":"4671:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4653:6:30","nodeType":"YulIdentifier","src":"4653:6:30"},"nativeSrc":"4653:25:30","nodeType":"YulFunctionCall","src":"4653:25:30"},"nativeSrc":"4653:25:30","nodeType":"YulExpressionStatement","src":"4653:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4698:9:30","nodeType":"YulIdentifier","src":"4698:9:30"},{"kind":"number","nativeSrc":"4709:2:30","nodeType":"YulLiteral","src":"4709:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4694:3:30","nodeType":"YulIdentifier","src":"4694:3:30"},"nativeSrc":"4694:18:30","nodeType":"YulFunctionCall","src":"4694:18:30"},{"name":"value1","nativeSrc":"4714:6:30","nodeType":"YulIdentifier","src":"4714:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4687:6:30","nodeType":"YulIdentifier","src":"4687:6:30"},"nativeSrc":"4687:34:30","nodeType":"YulFunctionCall","src":"4687:34:30"},"nativeSrc":"4687:34:30","nodeType":"YulExpressionStatement","src":"4687:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4479:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4569:9:30","nodeType":"YulTypedName","src":"4569:9:30","type":""},{"name":"value1","nativeSrc":"4580:6:30","nodeType":"YulTypedName","src":"4580:6:30","type":""},{"name":"value0","nativeSrc":"4588:6:30","nodeType":"YulTypedName","src":"4588:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4599:4:30","nodeType":"YulTypedName","src":"4599:4:30","type":""}],"src":"4479:248:30"},{"body":{"nativeSrc":"4861:119:30","nodeType":"YulBlock","src":"4861:119:30","statements":[{"nativeSrc":"4871:26:30","nodeType":"YulAssignment","src":"4871:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"4883:9:30","nodeType":"YulIdentifier","src":"4883:9:30"},{"kind":"number","nativeSrc":"4894:2:30","nodeType":"YulLiteral","src":"4894:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4879:3:30","nodeType":"YulIdentifier","src":"4879:3:30"},"nativeSrc":"4879:18:30","nodeType":"YulFunctionCall","src":"4879:18:30"},"variableNames":[{"name":"tail","nativeSrc":"4871:4:30","nodeType":"YulIdentifier","src":"4871:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4913:9:30","nodeType":"YulIdentifier","src":"4913:9:30"},{"name":"value0","nativeSrc":"4924:6:30","nodeType":"YulIdentifier","src":"4924:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4906:6:30","nodeType":"YulIdentifier","src":"4906:6:30"},"nativeSrc":"4906:25:30","nodeType":"YulFunctionCall","src":"4906:25:30"},"nativeSrc":"4906:25:30","nodeType":"YulExpressionStatement","src":"4906:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4951:9:30","nodeType":"YulIdentifier","src":"4951:9:30"},{"kind":"number","nativeSrc":"4962:2:30","nodeType":"YulLiteral","src":"4962:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4947:3:30","nodeType":"YulIdentifier","src":"4947:3:30"},"nativeSrc":"4947:18:30","nodeType":"YulFunctionCall","src":"4947:18:30"},{"name":"value1","nativeSrc":"4967:6:30","nodeType":"YulIdentifier","src":"4967:6:30"}],"functionName":{"name":"mstore","nativeSrc":"4940:6:30","nodeType":"YulIdentifier","src":"4940:6:30"},"nativeSrc":"4940:34:30","nodeType":"YulFunctionCall","src":"4940:34:30"},"nativeSrc":"4940:34:30","nodeType":"YulExpressionStatement","src":"4940:34:30"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"4732:248:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4822:9:30","nodeType":"YulTypedName","src":"4822:9:30","type":""},{"name":"value1","nativeSrc":"4833:6:30","nodeType":"YulTypedName","src":"4833:6:30","type":""},{"name":"value0","nativeSrc":"4841:6:30","nodeType":"YulTypedName","src":"4841:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4852:4:30","nodeType":"YulTypedName","src":"4852:4:30","type":""}],"src":"4732:248:30"},{"body":{"nativeSrc":"5132:182:30","nodeType":"YulBlock","src":"5132:182:30","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5149:3:30","nodeType":"YulIdentifier","src":"5149:3:30"},{"name":"value0","nativeSrc":"5154:6:30","nodeType":"YulIdentifier","src":"5154:6:30"}],"functionName":{"name":"mstore","nativeSrc":"5142:6:30","nodeType":"YulIdentifier","src":"5142:6:30"},"nativeSrc":"5142:19:30","nodeType":"YulFunctionCall","src":"5142:19:30"},"nativeSrc":"5142:19:30","nodeType":"YulExpressionStatement","src":"5142:19:30"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5181:3:30","nodeType":"YulIdentifier","src":"5181:3:30"},{"kind":"number","nativeSrc":"5186:2:30","nodeType":"YulLiteral","src":"5186:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5177:3:30","nodeType":"YulIdentifier","src":"5177:3:30"},"nativeSrc":"5177:12:30","nodeType":"YulFunctionCall","src":"5177:12:30"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5199:2:30","nodeType":"YulLiteral","src":"5199:2:30","type":"","value":"96"},{"name":"value1","nativeSrc":"5203:6:30","nodeType":"YulIdentifier","src":"5203:6:30"}],"functionName":{"name":"shl","nativeSrc":"5195:3:30","nodeType":"YulIdentifier","src":"5195:3:30"},"nativeSrc":"5195:15:30","nodeType":"YulFunctionCall","src":"5195:15:30"},{"kind":"number","nativeSrc":"5212:66:30","nodeType":"YulLiteral","src":"5212:66:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"5191:3:30","nodeType":"YulIdentifier","src":"5191:3:30"},"nativeSrc":"5191:88:30","nodeType":"YulFunctionCall","src":"5191:88:30"}],"functionName":{"name":"mstore","nativeSrc":"5170:6:30","nodeType":"YulIdentifier","src":"5170:6:30"},"nativeSrc":"5170:110:30","nodeType":"YulFunctionCall","src":"5170:110:30"},"nativeSrc":"5170:110:30","nodeType":"YulExpressionStatement","src":"5170:110:30"},{"nativeSrc":"5289:19:30","nodeType":"YulAssignment","src":"5289:19:30","value":{"arguments":[{"name":"pos","nativeSrc":"5300:3:30","nodeType":"YulIdentifier","src":"5300:3:30"},{"kind":"number","nativeSrc":"5305:2:30","nodeType":"YulLiteral","src":"5305:2:30","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"5296:3:30","nodeType":"YulIdentifier","src":"5296:3:30"},"nativeSrc":"5296:12:30","nodeType":"YulFunctionCall","src":"5296:12:30"},"variableNames":[{"name":"end","nativeSrc":"5289:3:30","nodeType":"YulIdentifier","src":"5289:3:30"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed","nativeSrc":"4985:329:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5100:3:30","nodeType":"YulTypedName","src":"5100:3:30","type":""},{"name":"value1","nativeSrc":"5105:6:30","nodeType":"YulTypedName","src":"5105:6:30","type":""},{"name":"value0","nativeSrc":"5113:6:30","nodeType":"YulTypedName","src":"5113:6:30","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5124:3:30","nodeType":"YulTypedName","src":"5124:3:30","type":""}],"src":"4985:329:30"},{"body":{"nativeSrc":"5448:168:30","nodeType":"YulBlock","src":"5448:168:30","statements":[{"nativeSrc":"5458:26:30","nodeType":"YulAssignment","src":"5458:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"5470:9:30","nodeType":"YulIdentifier","src":"5470:9:30"},{"kind":"number","nativeSrc":"5481:2:30","nodeType":"YulLiteral","src":"5481:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5466:3:30","nodeType":"YulIdentifier","src":"5466:3:30"},"nativeSrc":"5466:18:30","nodeType":"YulFunctionCall","src":"5466:18:30"},"variableNames":[{"name":"tail","nativeSrc":"5458:4:30","nodeType":"YulIdentifier","src":"5458:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5500:9:30","nodeType":"YulIdentifier","src":"5500:9:30"},{"name":"value0","nativeSrc":"5511:6:30","nodeType":"YulIdentifier","src":"5511:6:30"}],"functionName":{"name":"mstore","nativeSrc":"5493:6:30","nodeType":"YulIdentifier","src":"5493:6:30"},"nativeSrc":"5493:25:30","nodeType":"YulFunctionCall","src":"5493:25:30"},"nativeSrc":"5493:25:30","nodeType":"YulExpressionStatement","src":"5493:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5538:9:30","nodeType":"YulIdentifier","src":"5538:9:30"},{"kind":"number","nativeSrc":"5549:2:30","nodeType":"YulLiteral","src":"5549:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5534:3:30","nodeType":"YulIdentifier","src":"5534:3:30"},"nativeSrc":"5534:18:30","nodeType":"YulFunctionCall","src":"5534:18:30"},{"arguments":[{"name":"value1","nativeSrc":"5558:6:30","nodeType":"YulIdentifier","src":"5558:6:30"},{"kind":"number","nativeSrc":"5566:42:30","nodeType":"YulLiteral","src":"5566:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5554:3:30","nodeType":"YulIdentifier","src":"5554:3:30"},"nativeSrc":"5554:55:30","nodeType":"YulFunctionCall","src":"5554:55:30"}],"functionName":{"name":"mstore","nativeSrc":"5527:6:30","nodeType":"YulIdentifier","src":"5527:6:30"},"nativeSrc":"5527:83:30","nodeType":"YulFunctionCall","src":"5527:83:30"},"nativeSrc":"5527:83:30","nodeType":"YulExpressionStatement","src":"5527:83:30"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"5319:297:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5409:9:30","nodeType":"YulTypedName","src":"5409:9:30","type":""},{"name":"value1","nativeSrc":"5420:6:30","nodeType":"YulTypedName","src":"5420:6:30","type":""},{"name":"value0","nativeSrc":"5428:6:30","nodeType":"YulTypedName","src":"5428:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5439:4:30","nodeType":"YulTypedName","src":"5439:4:30","type":""}],"src":"5319:297:30"},{"body":{"nativeSrc":"5653:152:30","nodeType":"YulBlock","src":"5653:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5670:1:30","nodeType":"YulLiteral","src":"5670:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5673:77:30","nodeType":"YulLiteral","src":"5673:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5663:6:30","nodeType":"YulIdentifier","src":"5663:6:30"},"nativeSrc":"5663:88:30","nodeType":"YulFunctionCall","src":"5663:88:30"},"nativeSrc":"5663:88:30","nodeType":"YulExpressionStatement","src":"5663:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5767:1:30","nodeType":"YulLiteral","src":"5767:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"5770:4:30","nodeType":"YulLiteral","src":"5770:4:30","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5760:6:30","nodeType":"YulIdentifier","src":"5760:6:30"},"nativeSrc":"5760:15:30","nodeType":"YulFunctionCall","src":"5760:15:30"},"nativeSrc":"5760:15:30","nodeType":"YulExpressionStatement","src":"5760:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5791:1:30","nodeType":"YulLiteral","src":"5791:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"5794:4:30","nodeType":"YulLiteral","src":"5794:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5784:6:30","nodeType":"YulIdentifier","src":"5784:6:30"},"nativeSrc":"5784:15:30","nodeType":"YulFunctionCall","src":"5784:15:30"},"nativeSrc":"5784:15:30","nodeType":"YulExpressionStatement","src":"5784:15:30"}]},"name":"panic_error_0x11","nativeSrc":"5621:184:30","nodeType":"YulFunctionDefinition","src":"5621:184:30"},{"body":{"nativeSrc":"5858:77:30","nodeType":"YulBlock","src":"5858:77:30","statements":[{"nativeSrc":"5868:16:30","nodeType":"YulAssignment","src":"5868:16:30","value":{"arguments":[{"name":"x","nativeSrc":"5879:1:30","nodeType":"YulIdentifier","src":"5879:1:30"},{"name":"y","nativeSrc":"5882:1:30","nodeType":"YulIdentifier","src":"5882:1:30"}],"functionName":{"name":"add","nativeSrc":"5875:3:30","nodeType":"YulIdentifier","src":"5875:3:30"},"nativeSrc":"5875:9:30","nodeType":"YulFunctionCall","src":"5875:9:30"},"variableNames":[{"name":"sum","nativeSrc":"5868:3:30","nodeType":"YulIdentifier","src":"5868:3:30"}]},{"body":{"nativeSrc":"5907:22:30","nodeType":"YulBlock","src":"5907:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5909:16:30","nodeType":"YulIdentifier","src":"5909:16:30"},"nativeSrc":"5909:18:30","nodeType":"YulFunctionCall","src":"5909:18:30"},"nativeSrc":"5909:18:30","nodeType":"YulExpressionStatement","src":"5909:18:30"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5899:1:30","nodeType":"YulIdentifier","src":"5899:1:30"},{"name":"sum","nativeSrc":"5902:3:30","nodeType":"YulIdentifier","src":"5902:3:30"}],"functionName":{"name":"gt","nativeSrc":"5896:2:30","nodeType":"YulIdentifier","src":"5896:2:30"},"nativeSrc":"5896:10:30","nodeType":"YulFunctionCall","src":"5896:10:30"},"nativeSrc":"5893:36:30","nodeType":"YulIf","src":"5893:36:30"}]},"name":"checked_add_t_uint256","nativeSrc":"5810:125:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5841:1:30","nodeType":"YulTypedName","src":"5841:1:30","type":""},{"name":"y","nativeSrc":"5844:1:30","nodeType":"YulTypedName","src":"5844:1:30","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5850:3:30","nodeType":"YulTypedName","src":"5850:3:30","type":""}],"src":"5810:125:30"},{"body":{"nativeSrc":"6205:291:30","nodeType":"YulBlock","src":"6205:291:30","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6222:9:30","nodeType":"YulIdentifier","src":"6222:9:30"},{"arguments":[{"name":"value0","nativeSrc":"6237:6:30","nodeType":"YulIdentifier","src":"6237:6:30"},{"kind":"number","nativeSrc":"6245:42:30","nodeType":"YulLiteral","src":"6245:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6233:3:30","nodeType":"YulIdentifier","src":"6233:3:30"},"nativeSrc":"6233:55:30","nodeType":"YulFunctionCall","src":"6233:55:30"}],"functionName":{"name":"mstore","nativeSrc":"6215:6:30","nodeType":"YulIdentifier","src":"6215:6:30"},"nativeSrc":"6215:74:30","nodeType":"YulFunctionCall","src":"6215:74:30"},"nativeSrc":"6215:74:30","nodeType":"YulExpressionStatement","src":"6215:74:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6309:9:30","nodeType":"YulIdentifier","src":"6309:9:30"},{"kind":"number","nativeSrc":"6320:2:30","nodeType":"YulLiteral","src":"6320:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6305:3:30","nodeType":"YulIdentifier","src":"6305:3:30"},"nativeSrc":"6305:18:30","nodeType":"YulFunctionCall","src":"6305:18:30"},{"name":"value1","nativeSrc":"6325:6:30","nodeType":"YulIdentifier","src":"6325:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6298:6:30","nodeType":"YulIdentifier","src":"6298:6:30"},"nativeSrc":"6298:34:30","nodeType":"YulFunctionCall","src":"6298:34:30"},"nativeSrc":"6298:34:30","nodeType":"YulExpressionStatement","src":"6298:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6352:9:30","nodeType":"YulIdentifier","src":"6352:9:30"},{"kind":"number","nativeSrc":"6363:2:30","nodeType":"YulLiteral","src":"6363:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6348:3:30","nodeType":"YulIdentifier","src":"6348:3:30"},"nativeSrc":"6348:18:30","nodeType":"YulFunctionCall","src":"6348:18:30"},{"name":"value2","nativeSrc":"6368:6:30","nodeType":"YulIdentifier","src":"6368:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6341:6:30","nodeType":"YulIdentifier","src":"6341:6:30"},"nativeSrc":"6341:34:30","nodeType":"YulFunctionCall","src":"6341:34:30"},"nativeSrc":"6341:34:30","nodeType":"YulExpressionStatement","src":"6341:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6395:9:30","nodeType":"YulIdentifier","src":"6395:9:30"},{"kind":"number","nativeSrc":"6406:2:30","nodeType":"YulLiteral","src":"6406:2:30","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6391:3:30","nodeType":"YulIdentifier","src":"6391:3:30"},"nativeSrc":"6391:18:30","nodeType":"YulFunctionCall","src":"6391:18:30"},{"kind":"number","nativeSrc":"6411:3:30","nodeType":"YulLiteral","src":"6411:3:30","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"6384:6:30","nodeType":"YulIdentifier","src":"6384:6:30"},"nativeSrc":"6384:31:30","nodeType":"YulFunctionCall","src":"6384:31:30"},"nativeSrc":"6384:31:30","nodeType":"YulExpressionStatement","src":"6384:31:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6435:9:30","nodeType":"YulIdentifier","src":"6435:9:30"},{"kind":"number","nativeSrc":"6446:3:30","nodeType":"YulLiteral","src":"6446:3:30","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6431:3:30","nodeType":"YulIdentifier","src":"6431:3:30"},"nativeSrc":"6431:19:30","nodeType":"YulFunctionCall","src":"6431:19:30"},{"kind":"number","nativeSrc":"6452:1:30","nodeType":"YulLiteral","src":"6452:1:30","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6424:6:30","nodeType":"YulIdentifier","src":"6424:6:30"},"nativeSrc":"6424:30:30","nodeType":"YulFunctionCall","src":"6424:30:30"},"nativeSrc":"6424:30:30","nodeType":"YulExpressionStatement","src":"6424:30:30"},{"nativeSrc":"6463:27:30","nodeType":"YulAssignment","src":"6463:27:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6475:9:30","nodeType":"YulIdentifier","src":"6475:9:30"},{"kind":"number","nativeSrc":"6486:3:30","nodeType":"YulLiteral","src":"6486:3:30","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"6471:3:30","nodeType":"YulIdentifier","src":"6471:3:30"},"nativeSrc":"6471:19:30","nodeType":"YulFunctionCall","src":"6471:19:30"},"variableNames":[{"name":"tail","nativeSrc":"6463:4:30","nodeType":"YulIdentifier","src":"6463:4:30"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5940:556:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6158:9:30","nodeType":"YulTypedName","src":"6158:9:30","type":""},{"name":"value2","nativeSrc":"6169:6:30","nodeType":"YulTypedName","src":"6169:6:30","type":""},{"name":"value1","nativeSrc":"6177:6:30","nodeType":"YulTypedName","src":"6177:6:30","type":""},{"name":"value0","nativeSrc":"6185:6:30","nodeType":"YulTypedName","src":"6185:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6196:4:30","nodeType":"YulTypedName","src":"6196:4:30","type":""}],"src":"5940:556:30"},{"body":{"nativeSrc":"6638:119:30","nodeType":"YulBlock","src":"6638:119:30","statements":[{"nativeSrc":"6648:26:30","nodeType":"YulAssignment","src":"6648:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"6660:9:30","nodeType":"YulIdentifier","src":"6660:9:30"},{"kind":"number","nativeSrc":"6671:2:30","nodeType":"YulLiteral","src":"6671:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6656:3:30","nodeType":"YulIdentifier","src":"6656:3:30"},"nativeSrc":"6656:18:30","nodeType":"YulFunctionCall","src":"6656:18:30"},"variableNames":[{"name":"tail","nativeSrc":"6648:4:30","nodeType":"YulIdentifier","src":"6648:4:30"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6690:9:30","nodeType":"YulIdentifier","src":"6690:9:30"},{"name":"value0","nativeSrc":"6701:6:30","nodeType":"YulIdentifier","src":"6701:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6683:6:30","nodeType":"YulIdentifier","src":"6683:6:30"},"nativeSrc":"6683:25:30","nodeType":"YulFunctionCall","src":"6683:25:30"},"nativeSrc":"6683:25:30","nodeType":"YulExpressionStatement","src":"6683:25:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6728:9:30","nodeType":"YulIdentifier","src":"6728:9:30"},{"kind":"number","nativeSrc":"6739:2:30","nodeType":"YulLiteral","src":"6739:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6724:3:30","nodeType":"YulIdentifier","src":"6724:3:30"},"nativeSrc":"6724:18:30","nodeType":"YulFunctionCall","src":"6724:18:30"},{"name":"value1","nativeSrc":"6744:6:30","nodeType":"YulIdentifier","src":"6744:6:30"}],"functionName":{"name":"mstore","nativeSrc":"6717:6:30","nodeType":"YulIdentifier","src":"6717:6:30"},"nativeSrc":"6717:34:30","nodeType":"YulFunctionCall","src":"6717:34:30"},"nativeSrc":"6717:34:30","nodeType":"YulExpressionStatement","src":"6717:34:30"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6501:256:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6599:9:30","nodeType":"YulTypedName","src":"6599:9:30","type":""},{"name":"value1","nativeSrc":"6610:6:30","nodeType":"YulTypedName","src":"6610:6:30","type":""},{"name":"value0","nativeSrc":"6618:6:30","nodeType":"YulTypedName","src":"6618:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6629:4:30","nodeType":"YulTypedName","src":"6629:4:30","type":""}],"src":"6501:256:30"},{"body":{"nativeSrc":"6811:79:30","nodeType":"YulBlock","src":"6811:79:30","statements":[{"nativeSrc":"6821:17:30","nodeType":"YulAssignment","src":"6821:17:30","value":{"arguments":[{"name":"x","nativeSrc":"6833:1:30","nodeType":"YulIdentifier","src":"6833:1:30"},{"name":"y","nativeSrc":"6836:1:30","nodeType":"YulIdentifier","src":"6836:1:30"}],"functionName":{"name":"sub","nativeSrc":"6829:3:30","nodeType":"YulIdentifier","src":"6829:3:30"},"nativeSrc":"6829:9:30","nodeType":"YulFunctionCall","src":"6829:9:30"},"variableNames":[{"name":"diff","nativeSrc":"6821:4:30","nodeType":"YulIdentifier","src":"6821:4:30"}]},{"body":{"nativeSrc":"6862:22:30","nodeType":"YulBlock","src":"6862:22:30","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6864:16:30","nodeType":"YulIdentifier","src":"6864:16:30"},"nativeSrc":"6864:18:30","nodeType":"YulFunctionCall","src":"6864:18:30"},"nativeSrc":"6864:18:30","nodeType":"YulExpressionStatement","src":"6864:18:30"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6853:4:30","nodeType":"YulIdentifier","src":"6853:4:30"},{"name":"x","nativeSrc":"6859:1:30","nodeType":"YulIdentifier","src":"6859:1:30"}],"functionName":{"name":"gt","nativeSrc":"6850:2:30","nodeType":"YulIdentifier","src":"6850:2:30"},"nativeSrc":"6850:11:30","nodeType":"YulFunctionCall","src":"6850:11:30"},"nativeSrc":"6847:37:30","nodeType":"YulIf","src":"6847:37:30"}]},"name":"checked_sub_t_uint256","nativeSrc":"6762:128:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6793:1:30","nodeType":"YulTypedName","src":"6793:1:30","type":""},{"name":"y","nativeSrc":"6796:1:30","nodeType":"YulTypedName","src":"6796:1:30","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6802:4:30","nodeType":"YulTypedName","src":"6802:4:30","type":""}],"src":"6762:128:30"},{"body":{"nativeSrc":"7024:198:30","nodeType":"YulBlock","src":"7024:198:30","statements":[{"nativeSrc":"7034:26:30","nodeType":"YulAssignment","src":"7034:26:30","value":{"arguments":[{"name":"headStart","nativeSrc":"7046:9:30","nodeType":"YulIdentifier","src":"7046:9:30"},{"kind":"number","nativeSrc":"7057:2:30","nodeType":"YulLiteral","src":"7057:2:30","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7042:3:30","nodeType":"YulIdentifier","src":"7042:3:30"},"nativeSrc":"7042:18:30","nodeType":"YulFunctionCall","src":"7042:18:30"},"variableNames":[{"name":"tail","nativeSrc":"7034:4:30","nodeType":"YulIdentifier","src":"7034:4:30"}]},{"nativeSrc":"7069:52:30","nodeType":"YulVariableDeclaration","src":"7069:52:30","value":{"kind":"number","nativeSrc":"7079:42:30","nodeType":"YulLiteral","src":"7079:42:30","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7073:2:30","nodeType":"YulTypedName","src":"7073:2:30","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7137:9:30","nodeType":"YulIdentifier","src":"7137:9:30"},{"arguments":[{"name":"value0","nativeSrc":"7152:6:30","nodeType":"YulIdentifier","src":"7152:6:30"},{"name":"_1","nativeSrc":"7160:2:30","nodeType":"YulIdentifier","src":"7160:2:30"}],"functionName":{"name":"and","nativeSrc":"7148:3:30","nodeType":"YulIdentifier","src":"7148:3:30"},"nativeSrc":"7148:15:30","nodeType":"YulFunctionCall","src":"7148:15:30"}],"functionName":{"name":"mstore","nativeSrc":"7130:6:30","nodeType":"YulIdentifier","src":"7130:6:30"},"nativeSrc":"7130:34:30","nodeType":"YulFunctionCall","src":"7130:34:30"},"nativeSrc":"7130:34:30","nodeType":"YulExpressionStatement","src":"7130:34:30"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7184:9:30","nodeType":"YulIdentifier","src":"7184:9:30"},{"kind":"number","nativeSrc":"7195:2:30","nodeType":"YulLiteral","src":"7195:2:30","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7180:3:30","nodeType":"YulIdentifier","src":"7180:3:30"},"nativeSrc":"7180:18:30","nodeType":"YulFunctionCall","src":"7180:18:30"},{"arguments":[{"name":"value1","nativeSrc":"7204:6:30","nodeType":"YulIdentifier","src":"7204:6:30"},{"name":"_1","nativeSrc":"7212:2:30","nodeType":"YulIdentifier","src":"7212:2:30"}],"functionName":{"name":"and","nativeSrc":"7200:3:30","nodeType":"YulIdentifier","src":"7200:3:30"},"nativeSrc":"7200:15:30","nodeType":"YulFunctionCall","src":"7200:15:30"}],"functionName":{"name":"mstore","nativeSrc":"7173:6:30","nodeType":"YulIdentifier","src":"7173:6:30"},"nativeSrc":"7173:43:30","nodeType":"YulFunctionCall","src":"7173:43:30"},"nativeSrc":"7173:43:30","nodeType":"YulExpressionStatement","src":"7173:43:30"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"6895:327:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6985:9:30","nodeType":"YulTypedName","src":"6985:9:30","type":""},{"name":"value1","nativeSrc":"6996:6:30","nodeType":"YulTypedName","src":"6996:6:30","type":""},{"name":"value0","nativeSrc":"7004:6:30","nodeType":"YulTypedName","src":"7004:6:30","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7015:4:30","nodeType":"YulTypedName","src":"7015:4:30","type":""}],"src":"6895:327:30"},{"body":{"nativeSrc":"7305:199:30","nodeType":"YulBlock","src":"7305:199:30","statements":[{"body":{"nativeSrc":"7351:16:30","nodeType":"YulBlock","src":"7351:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7360:1:30","nodeType":"YulLiteral","src":"7360:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7363:1:30","nodeType":"YulLiteral","src":"7363:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7353:6:30","nodeType":"YulIdentifier","src":"7353:6:30"},"nativeSrc":"7353:12:30","nodeType":"YulFunctionCall","src":"7353:12:30"},"nativeSrc":"7353:12:30","nodeType":"YulExpressionStatement","src":"7353:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7326:7:30","nodeType":"YulIdentifier","src":"7326:7:30"},{"name":"headStart","nativeSrc":"7335:9:30","nodeType":"YulIdentifier","src":"7335:9:30"}],"functionName":{"name":"sub","nativeSrc":"7322:3:30","nodeType":"YulIdentifier","src":"7322:3:30"},"nativeSrc":"7322:23:30","nodeType":"YulFunctionCall","src":"7322:23:30"},{"kind":"number","nativeSrc":"7347:2:30","nodeType":"YulLiteral","src":"7347:2:30","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7318:3:30","nodeType":"YulIdentifier","src":"7318:3:30"},"nativeSrc":"7318:32:30","nodeType":"YulFunctionCall","src":"7318:32:30"},"nativeSrc":"7315:52:30","nodeType":"YulIf","src":"7315:52:30"},{"nativeSrc":"7376:29:30","nodeType":"YulVariableDeclaration","src":"7376:29:30","value":{"arguments":[{"name":"headStart","nativeSrc":"7395:9:30","nodeType":"YulIdentifier","src":"7395:9:30"}],"functionName":{"name":"mload","nativeSrc":"7389:5:30","nodeType":"YulIdentifier","src":"7389:5:30"},"nativeSrc":"7389:16:30","nodeType":"YulFunctionCall","src":"7389:16:30"},"variables":[{"name":"value","nativeSrc":"7380:5:30","nodeType":"YulTypedName","src":"7380:5:30","type":""}]},{"body":{"nativeSrc":"7458:16:30","nodeType":"YulBlock","src":"7458:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7467:1:30","nodeType":"YulLiteral","src":"7467:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7470:1:30","nodeType":"YulLiteral","src":"7470:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7460:6:30","nodeType":"YulIdentifier","src":"7460:6:30"},"nativeSrc":"7460:12:30","nodeType":"YulFunctionCall","src":"7460:12:30"},"nativeSrc":"7460:12:30","nodeType":"YulExpressionStatement","src":"7460:12:30"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7427:5:30","nodeType":"YulIdentifier","src":"7427:5:30"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7448:5:30","nodeType":"YulIdentifier","src":"7448:5:30"}],"functionName":{"name":"iszero","nativeSrc":"7441:6:30","nodeType":"YulIdentifier","src":"7441:6:30"},"nativeSrc":"7441:13:30","nodeType":"YulFunctionCall","src":"7441:13:30"}],"functionName":{"name":"iszero","nativeSrc":"7434:6:30","nodeType":"YulIdentifier","src":"7434:6:30"},"nativeSrc":"7434:21:30","nodeType":"YulFunctionCall","src":"7434:21:30"}],"functionName":{"name":"eq","nativeSrc":"7424:2:30","nodeType":"YulIdentifier","src":"7424:2:30"},"nativeSrc":"7424:32:30","nodeType":"YulFunctionCall","src":"7424:32:30"}],"functionName":{"name":"iszero","nativeSrc":"7417:6:30","nodeType":"YulIdentifier","src":"7417:6:30"},"nativeSrc":"7417:40:30","nodeType":"YulFunctionCall","src":"7417:40:30"},"nativeSrc":"7414:60:30","nodeType":"YulIf","src":"7414:60:30"},{"nativeSrc":"7483:15:30","nodeType":"YulAssignment","src":"7483:15:30","value":{"name":"value","nativeSrc":"7493:5:30","nodeType":"YulIdentifier","src":"7493:5:30"},"variableNames":[{"name":"value0","nativeSrc":"7483:6:30","nodeType":"YulIdentifier","src":"7483:6:30"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"7227:277:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7271:9:30","nodeType":"YulTypedName","src":"7271:9:30","type":""},{"name":"dataEnd","nativeSrc":"7282:7:30","nodeType":"YulTypedName","src":"7282:7:30","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7294:6:30","nodeType":"YulTypedName","src":"7294:6:30","type":""}],"src":"7227:277:30"},{"body":{"nativeSrc":"7541:152:30","nodeType":"YulBlock","src":"7541:152:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7558:1:30","nodeType":"YulLiteral","src":"7558:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7561:77:30","nodeType":"YulLiteral","src":"7561:77:30","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7551:6:30","nodeType":"YulIdentifier","src":"7551:6:30"},"nativeSrc":"7551:88:30","nodeType":"YulFunctionCall","src":"7551:88:30"},"nativeSrc":"7551:88:30","nodeType":"YulExpressionStatement","src":"7551:88:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7655:1:30","nodeType":"YulLiteral","src":"7655:1:30","type":"","value":"4"},{"kind":"number","nativeSrc":"7658:4:30","nodeType":"YulLiteral","src":"7658:4:30","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7648:6:30","nodeType":"YulIdentifier","src":"7648:6:30"},"nativeSrc":"7648:15:30","nodeType":"YulFunctionCall","src":"7648:15:30"},"nativeSrc":"7648:15:30","nodeType":"YulExpressionStatement","src":"7648:15:30"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7679:1:30","nodeType":"YulLiteral","src":"7679:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7682:4:30","nodeType":"YulLiteral","src":"7682:4:30","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7672:6:30","nodeType":"YulIdentifier","src":"7672:6:30"},"nativeSrc":"7672:15:30","nodeType":"YulFunctionCall","src":"7672:15:30"},"nativeSrc":"7672:15:30","nodeType":"YulExpressionStatement","src":"7672:15:30"}]},"name":"panic_error_0x32","nativeSrc":"7509:184:30","nodeType":"YulFunctionDefinition","src":"7509:184:30"},{"body":{"nativeSrc":"7828:201:30","nodeType":"YulBlock","src":"7828:201:30","statements":[{"body":{"nativeSrc":"7866:16:30","nodeType":"YulBlock","src":"7866:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7875:1:30","nodeType":"YulLiteral","src":"7875:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7878:1:30","nodeType":"YulLiteral","src":"7878:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7868:6:30","nodeType":"YulIdentifier","src":"7868:6:30"},"nativeSrc":"7868:12:30","nodeType":"YulFunctionCall","src":"7868:12:30"},"nativeSrc":"7868:12:30","nodeType":"YulExpressionStatement","src":"7868:12:30"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"7844:10:30","nodeType":"YulIdentifier","src":"7844:10:30"},{"name":"endIndex","nativeSrc":"7856:8:30","nodeType":"YulIdentifier","src":"7856:8:30"}],"functionName":{"name":"gt","nativeSrc":"7841:2:30","nodeType":"YulIdentifier","src":"7841:2:30"},"nativeSrc":"7841:24:30","nodeType":"YulFunctionCall","src":"7841:24:30"},"nativeSrc":"7838:44:30","nodeType":"YulIf","src":"7838:44:30"},{"body":{"nativeSrc":"7915:16:30","nodeType":"YulBlock","src":"7915:16:30","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7924:1:30","nodeType":"YulLiteral","src":"7924:1:30","type":"","value":"0"},{"kind":"number","nativeSrc":"7927:1:30","nodeType":"YulLiteral","src":"7927:1:30","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7917:6:30","nodeType":"YulIdentifier","src":"7917:6:30"},"nativeSrc":"7917:12:30","nodeType":"YulFunctionCall","src":"7917:12:30"},"nativeSrc":"7917:12:30","nodeType":"YulExpressionStatement","src":"7917:12:30"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"7897:8:30","nodeType":"YulIdentifier","src":"7897:8:30"},{"name":"length","nativeSrc":"7907:6:30","nodeType":"YulIdentifier","src":"7907:6:30"}],"functionName":{"name":"gt","nativeSrc":"7894:2:30","nodeType":"YulIdentifier","src":"7894:2:30"},"nativeSrc":"7894:20:30","nodeType":"YulFunctionCall","src":"7894:20:30"},"nativeSrc":"7891:40:30","nodeType":"YulIf","src":"7891:40:30"},{"nativeSrc":"7940:36:30","nodeType":"YulAssignment","src":"7940:36:30","value":{"arguments":[{"name":"offset","nativeSrc":"7957:6:30","nodeType":"YulIdentifier","src":"7957:6:30"},{"name":"startIndex","nativeSrc":"7965:10:30","nodeType":"YulIdentifier","src":"7965:10:30"}],"functionName":{"name":"add","nativeSrc":"7953:3:30","nodeType":"YulIdentifier","src":"7953:3:30"},"nativeSrc":"7953:23:30","nodeType":"YulFunctionCall","src":"7953:23:30"},"variableNames":[{"name":"offsetOut","nativeSrc":"7940:9:30","nodeType":"YulIdentifier","src":"7940:9:30"}]},{"nativeSrc":"7985:38:30","nodeType":"YulAssignment","src":"7985:38:30","value":{"arguments":[{"name":"endIndex","nativeSrc":"8002:8:30","nodeType":"YulIdentifier","src":"8002:8:30"},{"name":"startIndex","nativeSrc":"8012:10:30","nodeType":"YulIdentifier","src":"8012:10:30"}],"functionName":{"name":"sub","nativeSrc":"7998:3:30","nodeType":"YulIdentifier","src":"7998:3:30"},"nativeSrc":"7998:25:30","nodeType":"YulFunctionCall","src":"7998:25:30"},"variableNames":[{"name":"lengthOut","nativeSrc":"7985:9:30","nodeType":"YulIdentifier","src":"7985:9:30"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"7698:331:30","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"7762:6:30","nodeType":"YulTypedName","src":"7762:6:30","type":""},{"name":"length","nativeSrc":"7770:6:30","nodeType":"YulTypedName","src":"7770:6:30","type":""},{"name":"startIndex","nativeSrc":"7778:10:30","nodeType":"YulTypedName","src":"7778:10:30","type":""},{"name":"endIndex","nativeSrc":"7790:8:30","nodeType":"YulTypedName","src":"7790:8:30","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"7803:9:30","nodeType":"YulTypedName","src":"7803:9:30","type":""},{"name":"lengthOut","nativeSrc":"7814:9:30","nodeType":"YulTypedName","src":"7814:9:30","type":""}],"src":"7698:331:30"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$903__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_address(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address__to_t_bytes32_t_address__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_rational_1_by_1_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":30,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":313},{"length":32,"start":459},{"length":32,"start":3057},{"length":32,"start":3193},{"length":32,"start":3372},{"length":32,"start":3434}],"2750":[{"length":32,"start":409},{"length":32,"start":2002}],"2753":[{"length":32,"start":525},{"length":32,"start":1941},{"length":32,"start":2098}],"2756":[{"length":32,"start":586},{"length":32,"start":1723}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF5 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEB02625C EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x23D JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x26C JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x17E JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x194 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1BB JUMPI DUP1 PUSH4 0x89A89002 EQ PUSH2 0x208 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x137 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10D PUSH2 0x108 CALLDATASIZE PUSH1 0x4 PUSH2 0xF05 JUMP JUMPDEST PUSH2 0x30F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x135 PUSH2 0x130 CALLDATASIZE PUSH1 0x4 PUSH2 0xF47 JUMP JUMPDEST PUSH2 0x329 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x186 PUSH2 0x466 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP3 SWAP2 SWAP1 PUSH2 0xF79 JUMP JUMPDEST PUSH2 0x159 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x1C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x479 JUMP JUMPDEST PUSH2 0x22F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x159 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x119 JUMP JUMPDEST PUSH2 0x10D PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x100A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x135 PUSH2 0x2F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1023 JUMP JUMPDEST PUSH2 0x4AF JUMP JUMPDEST PUSH2 0x135 PUSH2 0x30A CALLDATASIZE PUSH1 0x4 PUSH2 0xFEF JUMP JUMPDEST PUSH2 0x8AB JUMP JUMPDEST PUSH1 0x0 PUSH2 0x323 DUP3 PUSH2 0x31D PUSH2 0x8C9 JUMP JUMPDEST SWAP1 PUSH2 0x8F7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x342 PUSH2 0x334 PUSH2 0x9D1 JUMP JUMPDEST PUSH2 0x33C PUSH2 0x9DB JUMP JUMPDEST SWAP1 PUSH2 0xA09 JUMP JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x351 JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x3E6 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH2 0xA78 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0x486 PUSH2 0x9DB JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0x9D1 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP1 PUSH2 0x4F9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST DUP2 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x50E JUMPI POP DUP2 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP5 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x591 SWAP3 SWAP2 SWAP1 SWAP2 DUP3 MSTORE PUSH1 0x60 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x5EB DUP3 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xA83 SWAP1 POP JUMP JUMPDEST PUSH2 0x640 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA04A37C000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x6A8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xA8CA238E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x394 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x6B7 SWAP1 PUSH1 0x1 PUSH2 0x10E2 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x713 JUMPI PUSH1 0x40 MLOAD PUSH32 0x192D175500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x0 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP3 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP4 POP DUP12 SWAP3 POP PUSH32 0xA68C079189004E3175C636199E3E4D2AAE420CE461ED29F670552B3EBA9D2A03 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x8C6 PUSH2 0x8B6 PUSH2 0x9D1 JUMP JUMPDEST DUP3 PUSH2 0x8BF PUSH2 0x9DB JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA99 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x10F5 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x947 JUMPI POP PUSH1 0x0 PUSH2 0x323 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x998 JUMPI POP PUSH1 0x1 PUSH2 0x323 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A0 PUSH2 0xBAE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x323 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x10F5 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xA74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH2 0xCF5 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xA90 DUP6 DUP5 PUSH2 0xE5F JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB06 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x394 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBA8 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xBBE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xBC8 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xCE4 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE4 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST ISZERO PUSH2 0xCEE JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD06 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD14 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xE49 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1108 JUMP JUMPDEST ISZERO PUSH2 0xE56 JUMPI PUSH2 0x471 PUSH2 0xEA2 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE9A JUMPI PUSH2 0xE90 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE83 JUMPI PUSH2 0xE83 PUSH2 0x112A JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xED3 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xE64 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x471 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1159 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEEF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEFE JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xFEA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1001 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEFE DUP3 PUSH2 0xFC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x101C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1039 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x106C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x107B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP6 POP DUP1 SWAP5 POP POP POP POP PUSH2 0x10A8 PUSH1 0x40 DUP7 ADD PUSH2 0xFC6 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x10B3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x323 JUMPI PUSH2 0x323 PUSH2 0x10B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x111A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLER SLOAD EXP PUSH8 0x6258DED053F3936 0x1E 0xCE 0x5D 0xC6 0x2E PUSH9 0x20D795B71240A52223 0x22 0xA7 0x2E PC 0xD5 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"390:637:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:30;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;5112:626:27;;;;;;:::i;:::-;;:::i;:::-;;728:115:11;817:19;728:115;;;1135:42:30;1123:55;;;1105:74;;1093:2;1078:18;728:115:11;933:252:30;931:94:29;;;:::i;:::-;;;;;;;;:::i;1591:49:27:-;;;;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;1691:33:27;;;;;;;;2435:25:30;;;2423:2;2408:18;1691:33:27;2289:177:30;710:120:1;;;:::i;1811:36:27:-;;;;;1921:32;;;;;;724:91:29;;;:::i;2023:51:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3089:25:30;;;3145:2;3130:18;;3123:34;;;;3173:18;;;3166:34;3077:2;3062:18;2023:51:27;2887:319:30;2140:43:27;;;;;;:::i;:::-;;;;;;;;;;;;;;;;6301:1096;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;5112:626:27:-;5232:70;5289:12;:10;:12::i;:::-;5232:33;:31;:33::i;:::-;:56;;:70::i;:::-;5330:7;5317:9;:20;;:50;;;;5352:15;5341:7;:26;;5317:50;5313:143;;;5390:55;;;;;;;;3089:25:30;;;3130:18;;;3123:34;;;5429:15:27;3173:18:30;;;3166:34;3062:18;;5390:55:27;;;;;;;;5313:143;5514:1;5470:21;;;:12;:21;;;;;:32;:46;5466:113;;5539:29;;;;;;;;2435:25:30;;;2408:18;;5539:29:27;2289:177:30;5466:113:27;5613:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5589:21:27;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5672:59;;4653:25:30;;;4694:18;;;4687:34;;;5613:43:27;;5589:21;;5672:59;;4626:18:30;5672:59:27;;;;;;;5112:626;;;;:::o;931:94:29:-;975:14;;1008:10;:8;:10::i;:::-;1001:17;;;;931:94;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;724:91:29:-;770:7;796:12;:10;:12::i;6301:1096:27:-;6397:31;6431:21;;;:12;:21;;;;;6483:22;;;6515:87;;6566:25;;;;;;;;2435::30;;;2408:18;;6566:25:27;2289:177:30;6515:87:27;6633:11;:21;;;6615:15;:39;:80;;;;6676:11;:19;;;6658:15;:37;6615:80;6611:160;;;6718:42;;;;;;;;4653:25:30;;;6744:15:27;4694:18:30;;;4687:34;4626:18;;6718:42:27;4479:248:30;6611:160:27;6781:12;6823:7;6832:9;6806:36;;;;;;;;5142:19:30;;;5199:2;5195:15;5212:66;5191:88;5186:2;5177:12;;5170:110;5305:2;5296:12;;4985:329;6806:36:27;;;;;;;;;;;;;6796:47;;;;;;6781:62;;6858:30;6871:10;6883:4;6858:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6858:12:27;;:30;;-1:-1:-1;;6858:12:27;:30;-1:-1:-1;6858:30:27:i;:::-;6853:76;;6897:32;;;;;;;;5493:25:30;;;5566:42;5554:55;;5534:18;;;5527:83;5466:18;;6897:32:27;5319:297:30;6853:76:27;6944:17;;;;:11;:17;;;;;;;;6940:64;;;6970:34;;;;;;;;5493:25:30;;;5566:42;5554:55;;5534:18;;;5527:83;5466:18;;6970:34:27;5319:297:30;6940:64:27;7015:32;7050:17;;:21;;7070:1;7050:21;:::i;:::-;7015:56;;7112:11;7085:24;:38;7081:96;;;7146:20;;;;;;;;;;;;;;7081:96;7187:17;:44;;;7241:17;;;:11;:17;;;;;;:24;;;;7261:4;7241:24;;;;;;7276:52;;;;;:24;6233:55:30;;;7276:52:27;;;6215:74:30;7312:8:27;6305:18:30;;;6298:34;6348:18;;;6341:34;;;;6411:3;6391:18;;;6384:31;6431:19;;;6424:30;;;;7276:15:27;:24;;;;6471:19:30;;7276:52:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7344:46:27;;;7378:8;4653:25:30;;7388:1:27;4709:2:30;4694:18;;4687:34;7344:46:27;;;;-1:-1:-1;7358:7:27;;-1:-1:-1;7344:46:27;;4626:18:30;7344:46:27;;;;;;;6387:1010;;;;6301:1096;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;4217:175:27:-;4318:7;4344:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1135:42:30;1123:55;;4543:25:6;;;1105:74:30;1078:18;;4543:25:6;933:252:30;4504:64:6;4413:162;;:::o;4447:178:27:-;4546:14;;4579:39;:37;:39::i;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1135:42:30;1123:55;;3243:24:6;;;1105:74:30;1078:18;;3243:24:6;933:252:30;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;7148:15:30;;;1396:59:12;;;7130:34:30;1444:10:12;7180:18:30;;;7173:43;1396:19:12;:39;;;;7042:18:30;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1643:735::-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:12;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:12;;;;-1:-1:-1;1643:735:12:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2207:80:12;;;;;;;;;;7079:42:30;7148:15;;;2207:80:12;;;7130:34:30;2276:10:12;7180:18:30;;;7173:43;7042:18;;2207:80:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:12;;;;-1:-1:-1;1643:735:12:o;1994:290:25:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;616:152:15:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;8879:147:25:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:25:o;14:332:30:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:30;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:30;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:30;-1:-1:-1;543:385:30:o;1190:447::-;1347:2;1336:9;1329:21;1386:6;1381:2;1370:9;1366:18;1359:34;1443:6;1435;1430:2;1419:9;1415:18;1402:48;1499:1;1470:22;;;1494:2;1466:31;;;1459:42;;;;1553:2;1541:15;;;1558:66;1537:88;1522:104;1518:113;;1190:447;-1:-1:-1;1190:447:30:o;1897:196::-;1965:20;;2025:42;2014:54;;2004:65;;1994:93;;2083:1;2080;2073:12;1994:93;1897:196;;;:::o;2098:186::-;2157:6;2210:2;2198:9;2189:7;2185:23;2181:32;2178:52;;;2226:1;2223;2216:12;2178:52;2249:29;2268:9;2249:29;:::i;2702:180::-;2761:6;2814:2;2802:9;2793:7;2789:23;2785:32;2782:52;;;2830:1;2827;2820:12;2782:52;-1:-1:-1;2853:23:30;;2702:180;-1:-1:-1;2702:180:30:o;3211:757::-;3315:6;3323;3331;3339;3392:2;3380:9;3371:7;3367:23;3363:32;3360:52;;;3408:1;3405;3398:12;3360:52;3444:9;3431:23;3421:33;;3505:2;3494:9;3490:18;3477:32;3528:18;3569:2;3561:6;3558:14;3555:34;;;3585:1;3582;3575:12;3555:34;3623:6;3612:9;3608:22;3598:32;;3668:7;3661:4;3657:2;3653:13;3649:27;3639:55;;3690:1;3687;3680:12;3639:55;3730:2;3717:16;3756:2;3748:6;3745:14;3742:34;;;3772:1;3769;3762:12;3742:34;3825:7;3820:2;3810:6;3807:1;3803:14;3799:2;3795:23;3791:32;3788:45;3785:65;;;3846:1;3843;3836:12;3785:65;3877:2;3873;3869:11;3859:21;;3899:6;3889:16;;;;;3924:38;3958:2;3947:9;3943:18;3924:38;:::i;:::-;3914:48;;3211:757;;;;;;;:::o;5621:184::-;5673:77;5670:1;5663:88;5770:4;5767:1;5760:15;5794:4;5791:1;5784:15;5810:125;5875:9;;;5896:10;;;5893:36;;;5909:18;;:::i;6762:128::-;6829:9;;;6850:11;;;6847:37;;;6864:18;;:::i;7227:277::-;7294:6;7347:2;7335:9;7326:7;7322:23;7318:32;7315:52;;;7363:1;7360;7353:12;7315:52;7395:9;7389:16;7448:5;7441:13;7434:21;7427:5;7424:32;7414:60;;7470:1;7467;7460:12;7509:184;7561:77;7558:1;7551:88;7658:4;7655:1;7648:15;7682:4;7679:1;7672:15;7698:331;7803:9;7814;7856:8;7844:10;7841:24;7838:44;;;7878:1;7875;7868:12;7838:44;7907:6;7897:8;7894:20;7891:40;;;7927:1;7924;7917:12;7891:40;-1:-1:-1;;7953:23:30;;;7998:25;;;;;-1:-1:-1;7698:331:30:o"},"gasEstimates":{"creation":{"codeDepositCost":"907400","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","TOKEN_ID()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","claim(bytes32,bytes32[],address)":"infinite","claimStatus(bytes32)":"2483","claimWindows(bytes32)":"6735","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","TOKEN_ID()":"89a89002","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","claim(bytes32,bytes32[],address)":"eb02625c","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"claim(bytes32,bytes32[],address)\":{\"details\":\"Throws if the claim window has not been set.Throws if the claim window is closed or has not yet opened.Throws if the proof provided for the claim is invalid.Throws if the payout has already been claimed.Throws if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply()\":[{\"notice\":\"Error thrown when the number of tokens claimed exceeds the mint supply.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidClaimWindow(uint256,uint256,uint256)\":[{\"notice\":\"Error thrown when the claim window is invalid.\"}],\"InvalidProof(bytes32,address)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,uint256,uint256)\":{\"notice\":\"Event emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"TOKEN_ID()\":{\"notice\":\"The token id to be claimed.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"claim(bytes32,bytes32[],address)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol\":\"ERC1155ClaimWindowMerkleClaimMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xe7b1645bd7a2745c96cece104c3ef4ef07552b5ad35b2cbbf6926f85885a409f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/ERC1155ClaimWindowMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title ERC1155 Claim Window Merkle Claim Contract\\n * @dev This contract allows users to claim rewards by claim window based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract ERC1155ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The token id to be claimed.\\n    uint256 public immutable TOKEN_ID;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Event emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, uint256 id, uint256 value);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply();\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the claim window is invalid.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\\n\\n    /**\\n     * @notice Constructor for the ERC1155ClaimWindowMerkleClaim contract.\\n     * @param tokenId The token id to be claimed.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract interface.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        TOKEN_ID = tokenId;\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (startTime >= endTime || endTime <= block.timestamp) {\\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\\n        }\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @dev Throws if the claim window has not been set.\\n     * @dev Throws if the claim window is closed or has not yet opened.\\n     * @dev Throws if the proof provided for the claim is invalid.\\n     * @dev Throws if the payout has already been claimed.\\n     * @dev Throws if the number of tokens claimed exceeds the mint supply.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        bytes32 merkleRoot = claimWindow.merkleRoot;\\n        if (merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient));\\n        if (!proof.verify(merkleRoot, leaf)) revert InvalidProof(epochId, recipient);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient);\\n\\n        uint256 updatedNoOfTokensClaimed = noOfTokensClaimed + 1;\\n        if (updatedNoOfTokensClaimed > MINT_SUPPLY) {\\n            revert ExceededMintSupply();\\n        }\\n\\n        noOfTokensClaimed = updatedNoOfTokensClaimed;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, TOKEN_ID, 1, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, TOKEN_ID, 1);\\n    }\\n}\\n\",\"keccak256\":\"0xf6ed16222d738a93e1f2ac28c3ed0c220af9db08941d2313fa9ab4c3d489be6e\",\"license\":\"MIT\"},\"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155ClaimWindowMerkleClaim} from \\\"../../merkleClaim/ERC1155ClaimWindowMerkleClaim.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract ERC1155ClaimWindowMerkleClaimMock is ERC1155ClaimWindowMerkleClaim {\\n    constructor(\\n        uint256 tokenId,\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC1155ClaimWindowMerkleClaim(tokenId, mintSupply, rewardContract, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xe18516b3e844fb87045428657db9db9b18faf08e09fb8af3026c37d1d241f4a0\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2759,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":2765,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)2746_storage)"},{"astId":2770,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)2746_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ERC1155ClaimWindowMerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)2746_storage"},"t_struct(ClaimWindow)2746_storage":{"encoding":"inplace","label":"struct ERC1155ClaimWindowMerkleClaim.ClaimWindow","members":[{"astId":2741,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2743,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":2745,"contract":"contracts/mocks/merkleClaim/ERC1155ClaimWindowMerkleClaimMock.sol:ERC1155ClaimWindowMerkleClaimMock","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address)":[{"notice":"Error thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"ExceededMintSupply()":[{"notice":"Error thrown when the number of tokens claimed exceeds the mint supply."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidClaimWindow(uint256,uint256,uint256)":[{"notice":"Error thrown when the claim window is invalid."}],"InvalidProof(bytes32,address)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,uint256,uint256)":{"notice":"Event emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"TOKEN_ID()":{"notice":"The token id to be claimed."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"claim(bytes32,bytes32[],address)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}