{"id":"37b1c50ce9cb9df63289ae33cc7887d2","_format":"hh-sol-build-info-1","solcVersion":"0.8.17","solcLongVersion":"0.8.17+commit.8df45f5f","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is Context, IERC173 {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual override returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual override {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC-173 Contract Ownership Standard\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        require(sender == previousOwner, \"Ownership: not the owner\");\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        require(account == s.contractOwner, \"Ownership: not the owner\");\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \"InterfaceDetection: wrong value\");\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _forwarderRegistry;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _forwarderRegistry = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _forwarderRegistry;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\n        return forwarder == address(_forwarderRegistry);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.8;\n\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        require(currentVersion.value < phase, \"Storage: phase reached\");\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\ninterface IERC1155Mintable {\n    /// @notice Safely mints some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance of `id` overflows.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to mint.\n    /// @param value Amount of token to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely mints a batch of tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to mint.\n    /// @param values Amounts of tokens to mint.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess ERC1155 Merkle Claim Contract\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n * @dev entitled to the rewards without revealing the entire list of recipients.\n */\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    /// @notice The claim window struct.\n    struct ClaimWindow {\n        bytes32 merkleRoot;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /// @notice The ERC1155Mintable reward contract.\n    IERC1155Mintable public immutable REWARD_CONTRACT;\n\n    /// @notice The total number of tokens that can be minted in this contract.\n    uint256 public immutable MINT_SUPPLY;\n\n    /// @notice The total number of tokens that have been claimed.\n    uint256 public noOfTokensClaimed;\n\n    /// @notice Mapping from the epoch ID to the claim window.\n    mapping(bytes32 => ClaimWindow) public claimWindows;\n\n    /// @notice Mapping from leafhash to the claim status.\n    mapping(bytes32 => bool) public claimStatus;\n\n    /// @notice Emitted when a payout is claimed.\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, bytes32 merkleRoot, uint256 id, uint256 value);\n\n    /// @notice Emitted when a claim window is set.\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\n\n    /// @notice Thrown when the payout has already been claimed.\n    error AlreadyClaimed(bytes32 epochId, address recipient, uint256 id, uint256 value);\n\n    /// @notice Thrown when the proof provided for the claim is invalid.\n    error InvalidProof(bytes32 epochId, address recipient, uint256 id, uint256 value);\n\n    /// @notice Thrown when the claim window is closed or has not yet opened.\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\n\n    /// @notice Thrown when the number of tokens claimed exceeds the mint supply.\n    error ExceededMintSupply(bytes32 epochId, address recipient, uint256 id, uint256 value, uint256 totalClaimed);\n\n    /// @notice Thrown when the epoch ID exists.\n    error EpochIdAlreadyExists(bytes32 epochId);\n\n    /// @notice Thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    /**\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\n     * @param mintSupply The total number of tokens that can be minted in this contract.\n     * @param rewardContract The ERC1155Mintable reward contract.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        MINT_SUPPLY = mintSupply;\n        REWARD_CONTRACT = rewardContract;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Sets the merkle root for a specific epoch with start and end time.\n     * @dev Reverts if the _msgSender() is not the owner.\n     * @dev Reverts if the epoch ID has already been set.\n     * @dev Emits a SetEpochMerkleRoot event.\n     * @param epochId The epoch ID for the claim.\n     * @param merkleRoot The Merkle root of the claim.\n     * @param startTime The start time of the claim window.\n     * @param endTime The end time of the claim window.     \n     */\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\n            revert EpochIdAlreadyExists(epochId);\n        }\n\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\n\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\n    }\n\n    /**\n     * @notice Claims the payout for a specific epoch.\n     * @dev Reverts if the epoch ID does not exist\n     * @dev Reverts if the claim window is closed or has not yet opened.\n     * @dev Reverts if the proof provided for the claim is invalid.\n     * @dev Reverts if the payout has already been claimed.\n     * @dev Reverts if the number of tokens claimed exceeds the mint supply.\n     * @param epochId The epoch ID for the claim.\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The recipient of the payout.\n     * @param id The ID of the token to claim.\n     * @param value The value of the token to claim.\n     */\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient, uint256 id, uint256 value) external {\n        ClaimWindow storage claimWindow = claimWindows[epochId];\n        if (claimWindow.merkleRoot == bytes32(0)) {\n            revert EpochIdNotExists(epochId);\n        }\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\n            revert OutOfClaimWindow(epochId, block.timestamp);\n        }\n\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, id, value));\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient, id, value);\n\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient, id, value);\n\n        uint256 prevNoOfTokensClaimed = noOfTokensClaimed;\n        if (prevNoOfTokensClaimed + value > MINT_SUPPLY) {\n            revert ExceededMintSupply(epochId, recipient, id, value, prevNoOfTokensClaimed + value);\n        }\n\n        noOfTokensClaimed = prevNoOfTokensClaimed + value;\n        claimStatus[leaf] = true;\n\n        REWARD_CONTRACT.safeMint(recipient, id, value, \"\");\n\n        emit PayoutClaimed(epochId, recipient, claimWindow.merkleRoot, id, value);\n    }\n}\n"},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {AnichessERC1155MerkleClaim} from \"../../merkleClaim/AnichessERC1155MerkleClaim.sol\";\nimport {IERC1155Mintable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\n    constructor(\n        uint256 mintSupply,\n        IERC1155Mintable rewardContract,\n        IForwarderRegistry forwarderRegistry\n    ) AnichessERC1155MerkleClaim(mintSupply, rewardContract, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"InterfaceDetection":[338]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":308,"src":"57:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"65:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":83,"src":"140:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":82,"src":"148:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":339,"src":"212:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"220:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["548:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":82,"src":"548:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"548:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["571:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":338,"src":"571:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"571:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"291:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,338,350,82,105,765],"name":"ContractOwnership","nameLocation":"527:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["602:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"602:24:0"},"nodeType":"UsingForDirective","src":"596:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["631:24:0","656:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"631:31:0"},"referencedDeclaration":124,"src":"631:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"997:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1057:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"1007:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1032:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"1007:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1041:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"1007:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1007:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1007:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"669:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"983:12:0","nodeType":"VariableDeclaration","scope":31,"src":"975:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"975:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"974:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"997:0:0"},"scope":32,"src":"963:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"509:570:0","usedErrors":[]}],"src":"32:1048:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[765],"ContractOwnershipBase":[82],"ContractOwnershipStorage":[307],"IERC173":[105]},"id":83,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":106,"src":"57:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":308,"src":"110:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"118:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":83,"sourceUnit":766,"src":"196:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"204:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"Context","nameLocations":["585:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":765,"src":"585:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"585:7:1"},{"baseName":{"id":44,"name":"IERC173","nameLocations":["594:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":105,"src":"594:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"594:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"264:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":82,"linearizedBaseContracts":[82,105,765],"name":"ContractOwnershipBase","nameLocation":"560:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["614:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"614:24:1"},"nodeType":"UsingForDirective","src":"608:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["643:24:1","668:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"643:31:1"},"referencedDeclaration":124,"src":"643:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[104],"body":{"id":62,"nodeType":"Block","src":"773:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":56,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"790:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"815:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"790:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":58,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":59,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"824:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":276,"src":"790:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$returns$_t_address_$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":60,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"790:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":55,"id":61,"nodeType":"Return","src":"783:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"681:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":63,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"718:5:1","nodeType":"FunctionDefinition","overrides":{"id":52,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:1"},"parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"723:2:1"},"returnParameters":{"id":55,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":63,"src":"764:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"764:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"763:9:1"},"scope":82,"src":"709:129:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[98],"body":{"id":80,"nodeType":"Block","src":"941:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":75,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":755,"src":"1003:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1003:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":66,"src":"1017:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":70,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"951:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":72,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"976:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"951:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":73,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":74,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"985:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":263,"src":"951:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"951:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":79,"nodeType":"ExpressionStatement","src":"951:75:1"}]},"documentation":{"id":64,"nodeType":"StructuredDocumentation","src":"844:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":81,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"881:17:1","nodeType":"FunctionDefinition","overrides":{"id":68,"nodeType":"OverrideSpecifier","overrides":[],"src":"932:8:1"},"parameters":{"id":67,"nodeType":"ParameterList","parameters":[{"constant":false,"id":66,"mutability":"mutable","name":"newOwner","nameLocation":"907:8:1","nodeType":"VariableDeclaration","scope":81,"src":"899:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":65,"name":"address","nodeType":"ElementaryTypeName","src":"899:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"898:18:1"},"returnParameters":{"id":69,"nodeType":"ParameterList","parameters":[],"src":"941:0:1"},"scope":82,"src":"872:161:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":83,"src":"542:493:1","usedErrors":[]}],"src":"32:1004:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[105]},"id":106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":84,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":85,"nodeType":"StructuredDocumentation","src":"57:170:2","text":"@title ERC-173 Contract Ownership Standard\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":105,"linearizedBaseContracts":[105],"name":"IERC173","nameLocation":"237:7:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":86,"nodeType":"StructuredDocumentation","src":"251:162:2","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":92,"name":"OwnershipTransferred","nameLocation":"424:20:2","nodeType":"EventDefinition","parameters":{"id":91,"nodeType":"ParameterList","parameters":[{"constant":false,"id":88,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"461:13:2","nodeType":"VariableDeclaration","scope":92,"src":"445:29:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":87,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":90,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"492:8:2","nodeType":"VariableDeclaration","scope":92,"src":"476:24:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":89,"name":"address","nodeType":"ElementaryTypeName","src":"476:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"444:57:2"},"src":"418:84:2"},{"documentation":{"id":93,"nodeType":"StructuredDocumentation","src":"508:342:2","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":98,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"864:17:2","nodeType":"FunctionDefinition","parameters":{"id":96,"nodeType":"ParameterList","parameters":[{"constant":false,"id":95,"mutability":"mutable","name":"newOwner","nameLocation":"890:8:2","nodeType":"VariableDeclaration","scope":98,"src":"882:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":94,"name":"address","nodeType":"ElementaryTypeName","src":"882:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"881:18:2"},"returnParameters":{"id":97,"nodeType":"ParameterList","parameters":[],"src":"908:0:2"},"scope":105,"src":"855:54:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":99,"nodeType":"StructuredDocumentation","src":"915:116:2","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":104,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1045:5:2","nodeType":"FunctionDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[],"src":"1050:2:2"},"returnParameters":{"id":103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"contractOwner","nameLocation":"1084:13:2","nodeType":"VariableDeclaration","scope":104,"src":"1076:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"1076:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1075:23:2"},"scope":105,"src":"1036:63:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":106,"src":"227:874:2","usedErrors":[]}],"src":"32:1070:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[307],"IERC173":[105],"InterfaceDetectionStorage":[449],"ProxyInitialization":[713]},"id":308,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":107,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":106,"src":"57:52:3","symbolAliases":[{"foreign":{"id":108,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"65:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":111,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":714,"src":"110:84:3","symbolAliases":[{"foreign":{"id":110,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"118:19:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":113,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":308,"sourceUnit":450,"src":"195:104:3","symbolAliases":[{"foreign":{"id":112,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"203:25:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":307,"linearizedBaseContracts":[307],"name":"ContractOwnershipStorage","nameLocation":"309:24:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":117,"libraryName":{"id":114,"name":"ContractOwnershipStorage","nameLocations":["346:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"346:24:3"},"nodeType":"UsingForDirective","src":"340:67:3","typeName":{"id":116,"nodeType":"UserDefinedTypeName","pathNode":{"id":115,"name":"ContractOwnershipStorage.Layout","nameLocations":["375:24:3","400:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"375:31:3"},"referencedDeclaration":124,"src":"375:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":121,"libraryName":{"id":118,"name":"InterfaceDetectionStorage","nameLocations":["418:25:3"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"418:25:3"},"nodeType":"UsingForDirective","src":"412:69:3","typeName":{"id":120,"nodeType":"UserDefinedTypeName","pathNode":{"id":119,"name":"InterfaceDetectionStorage.Layout","nameLocations":["448:25:3","474:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"448:32:3"},"referencedDeclaration":359,"src":"448:32:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":124,"members":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"519:13:3","nodeType":"VariableDeclaration","scope":124,"src":"511:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"511:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"494:6:3","nodeType":"StructDefinition","scope":307,"src":"487:52:3","visibility":"public"},{"constant":true,"id":137,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"571:19:3","nodeType":"VariableDeclaration","scope":307,"src":"545:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":125,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":135,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"619:47:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":130,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"609:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"609:58:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":129,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"601:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":128,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:3","typeDescriptions":{}}},"id":133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"601:67:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":134,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"671:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"601:71:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":127,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"593:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":126,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:3","typeDescriptions":{}}},"id":136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"593:80:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":150,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"705:21:3","nodeType":"VariableDeclaration","scope":307,"src":"679:128:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":138,"name":"bytes32","nodeType":"ElementaryTypeName","src":"679:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"755:45:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":143,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"745:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"745:56:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":142,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"737:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":141,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:3","typeDescriptions":{}}},"id":146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"737:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"805:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"737:69:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":140,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"729:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":139,"name":"bytes32","nodeType":"ElementaryTypeName","src":"729:7:3","typeDescriptions":{}}},"id":149,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"729:78:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":156,"name":"OwnershipTransferred","nameLocation":"820:20:3","nodeType":"EventDefinition","parameters":{"id":155,"nodeType":"ParameterList","parameters":[{"constant":false,"id":152,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"857:13:3","nodeType":"VariableDeclaration","scope":156,"src":"841:29:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":151,"name":"address","nodeType":"ElementaryTypeName","src":"841:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":154,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"888:8:3","nodeType":"VariableDeclaration","scope":156,"src":"872:24:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":153,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"840:57:3"},"src":"814:84:3"},{"body":{"id":199,"nodeType":"Block","src":"1406:267:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":165,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1420:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1444:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1436:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":166,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:3","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1436:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1420:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":186,"nodeType":"IfStatement","src":"1416:152:3","trueBody":{"id":185,"nodeType":"Block","src":"1448:120:3","statements":[{"expression":{"id":175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":171,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":160,"src":"1462:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":173,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1464:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"1462:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":174,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1480:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1462:30:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":176,"nodeType":"ExpressionStatement","src":"1462:30:3"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1540:1:3","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":179,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1532:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":178,"name":"address","nodeType":"ElementaryTypeName","src":"1532:7:3","typeDescriptions":{}}},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1532:10:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":182,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"1544:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":177,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"1511:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1511:46:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":184,"nodeType":"EmitStatement","src":"1506:51:3"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":193,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":105,"src":"1639:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$105_$","typeString":"type(contract IERC173)"}],"id":192,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1634:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":194,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$105","typeString":"type(contract IERC173)"}},"id":195,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1648:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1634:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1661:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":187,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"1577:25:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":189,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1603:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"1577:32:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":190,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:34:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":191,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1612:21:3","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":402,"src":"1577:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$bound_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1577:89:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":198,"nodeType":"ExpressionStatement","src":"1577:89:3"}]},"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"904:423:3","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":200,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1341:15:3","nodeType":"FunctionDefinition","parameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":160,"mutability":"mutable","name":"s","nameLocation":"1372:1:3","nodeType":"VariableDeclaration","scope":200,"src":"1357:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"Layout","nameLocations":["1357:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"1357:6:3"},"referencedDeclaration":124,"src":"1357:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":162,"mutability":"mutable","name":"initialOwner","nameLocation":"1383:12:3","nodeType":"VariableDeclaration","scope":200,"src":"1375:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"1375:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1356:40:3"},"returnParameters":{"id":164,"nodeType":"ParameterList","parameters":[],"src":"1406:0:3"},"scope":307,"src":"1332:341:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":222,"nodeType":"Block","src":"2297:112:3","statements":[{"expression":{"arguments":[{"id":212,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":150,"src":"2336:21:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":213,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2359:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":209,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"2307:19:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$713_$","typeString":"type(library ProxyInitialization)"}},"id":211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2327:8:3","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":712,"src":"2307:28:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2307:54:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":215,"nodeType":"ExpressionStatement","src":"2307:54:3"},{"expression":{"arguments":[{"id":219,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2389:12:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":216,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":204,"src":"2371:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:15:3","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":200,"src":"2371:17:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:31:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"2371:31:3"}]},"documentation":{"id":201,"nodeType":"StructuredDocumentation","src":"1679:545:3","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":223,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2238:9:3","nodeType":"FunctionDefinition","parameters":{"id":207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"s","nameLocation":"2263:1:3","nodeType":"VariableDeclaration","scope":223,"src":"2248:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":203,"nodeType":"UserDefinedTypeName","pathNode":{"id":202,"name":"Layout","nameLocations":["2248:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2248:6:3"},"referencedDeclaration":124,"src":"2248:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":206,"mutability":"mutable","name":"initialOwner","nameLocation":"2274:12:3","nodeType":"VariableDeclaration","scope":223,"src":"2266:20:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"2266:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2247:40:3"},"returnParameters":{"id":208,"nodeType":"ParameterList","parameters":[],"src":"2297:0:3"},"scope":307,"src":"2229:180:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":262,"nodeType":"Block","src":"2848:281:3","statements":[{"assignments":[235],"declarations":[{"constant":false,"id":235,"mutability":"mutable","name":"previousOwner","nameLocation":"2866:13:3","nodeType":"VariableDeclaration","scope":262,"src":"2858:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":234,"name":"address","nodeType":"ElementaryTypeName","src":"2858:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":238,"initialValue":{"expression":{"id":236,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"2882:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":237,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2884:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"2882:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2858:39:3"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":240,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":229,"src":"2915:6:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":241,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2925:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2915:23:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2940:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":239,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2907:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2907:60:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":245,"nodeType":"ExpressionStatement","src":"2907:60:3"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":246,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"2981:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":247,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2998:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2981:25:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":261,"nodeType":"IfStatement","src":"2977:146:3","trueBody":{"id":260,"nodeType":"Block","src":"3008:115:3","statements":[{"expression":{"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":249,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"3022:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":251,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3024:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3022:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":252,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3040:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3022:26:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":254,"nodeType":"ExpressionStatement","src":"3022:26:3"},{"eventCall":{"arguments":[{"id":256,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":235,"src":"3088:13:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":257,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"3103:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":255,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":156,"src":"3067:20:3","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3067:45:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":259,"nodeType":"EmitStatement","src":"3062:50:3"}]}}]},"documentation":{"id":224,"nodeType":"StructuredDocumentation","src":"2415:340:3","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":263,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2769:17:3","nodeType":"FunctionDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":227,"mutability":"mutable","name":"s","nameLocation":"2802:1:3","nodeType":"VariableDeclaration","scope":263,"src":"2787:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":226,"nodeType":"UserDefinedTypeName","pathNode":{"id":225,"name":"Layout","nameLocations":["2787:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"2787:6:3"},"referencedDeclaration":124,"src":"2787:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":229,"mutability":"mutable","name":"sender","nameLocation":"2813:6:3","nodeType":"VariableDeclaration","scope":263,"src":"2805:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":228,"name":"address","nodeType":"ElementaryTypeName","src":"2805:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"newOwner","nameLocation":"2829:8:3","nodeType":"VariableDeclaration","scope":263,"src":"2821:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"2821:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2786:52:3"},"returnParameters":{"id":233,"nodeType":"ParameterList","parameters":[],"src":"2848:0:3"},"scope":307,"src":"2760:369:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":275,"nodeType":"Block","src":"3335:39:3","statements":[{"expression":{"expression":{"id":272,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":267,"src":"3352:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3354:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3352:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":271,"id":274,"nodeType":"Return","src":"3345:22:3"}]},"documentation":{"id":264,"nodeType":"StructuredDocumentation","src":"3135:116:3","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":276,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3265:5:3","nodeType":"FunctionDefinition","parameters":{"id":268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":267,"mutability":"mutable","name":"s","nameLocation":"3286:1:3","nodeType":"VariableDeclaration","scope":276,"src":"3271:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":266,"nodeType":"UserDefinedTypeName","pathNode":{"id":265,"name":"Layout","nameLocations":["3271:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3271:6:3"},"referencedDeclaration":124,"src":"3271:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3270:18:3"},"returnParameters":{"id":271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":270,"mutability":"mutable","name":"contractOwner","nameLocation":"3320:13:3","nodeType":"VariableDeclaration","scope":276,"src":"3312:21:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":269,"name":"address","nodeType":"ElementaryTypeName","src":"3312:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3311:23:3"},"scope":307,"src":"3256:118:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":293,"nodeType":"Block","src":"3621:80:3","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":289,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":286,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"3639:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"3650:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3652:13:3","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":123,"src":"3650:15:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3639:26:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","id":290,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3667:26:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""},"value":"Ownership: not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66","typeString":"literal_string \"Ownership: not the owner\""}],"id":285,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3631:7:3","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3631:63:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":292,"nodeType":"ExpressionStatement","src":"3631:63:3"}]},"documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"3380:155:3","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts if `account` is not the contract owner.\n @param account The account."},"id":294,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"3549:22:3","nodeType":"FunctionDefinition","parameters":{"id":283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"mutability":"mutable","name":"s","nameLocation":"3587:1:3","nodeType":"VariableDeclaration","scope":294,"src":"3572:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":279,"nodeType":"UserDefinedTypeName","pathNode":{"id":278,"name":"Layout","nameLocations":["3572:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3572:6:3"},"referencedDeclaration":124,"src":"3572:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":282,"mutability":"mutable","name":"account","nameLocation":"3598:7:3","nodeType":"VariableDeclaration","scope":294,"src":"3590:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"3590:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3571:35:3"},"returnParameters":{"id":284,"nodeType":"ParameterList","parameters":[],"src":"3621:0:3"},"scope":307,"src":"3540:161:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":305,"nodeType":"Block","src":"3766:115:3","statements":[{"assignments":[301],"declarations":[{"constant":false,"id":301,"mutability":"mutable","name":"position","nameLocation":"3784:8:3","nodeType":"VariableDeclaration","scope":305,"src":"3776:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3776:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":303,"initialValue":{"id":302,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":137,"src":"3795:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3776:38:3"},{"AST":{"nodeType":"YulBlock","src":"3833:42:3","statements":[{"nodeType":"YulAssignment","src":"3847:18:3","value":{"name":"position","nodeType":"YulIdentifier","src":"3857:8:3"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"3847:6:3"}]}]},"evmVersion":"london","externalReferences":[{"declaration":301,"isOffset":false,"isSlot":false,"src":"3857:8:3","valueSize":1},{"declaration":298,"isOffset":false,"isSlot":true,"src":"3847:6:3","suffix":"slot","valueSize":1}],"id":304,"nodeType":"InlineAssembly","src":"3824:51:3"}]},"id":306,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3716:6:3","nodeType":"FunctionDefinition","parameters":{"id":295,"nodeType":"ParameterList","parameters":[],"src":"3722:2:3"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"s","nameLocation":"3763:1:3","nodeType":"VariableDeclaration","scope":306,"src":"3748:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":297,"nodeType":"UserDefinedTypeName","pathNode":{"id":296,"name":"Layout","nameLocations":["3748:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"3748:6:3"},"referencedDeclaration":124,"src":"3748:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3747:18:3"},"scope":307,"src":"3707:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":308,"src":"301:3582:3","usedErrors":[]}],"src":"32:3852:3"},"id":3},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetection":[338],"InterfaceDetectionStorage":[449]},"id":339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":309,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":311,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":351,"src":"57:49:4","symbolAliases":[{"foreign":{"id":310,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":313,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":339,"sourceUnit":450,"src":"107:84:4","symbolAliases":[{"foreign":{"id":312,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"115:25:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":315,"name":"IERC165","nameLocations":["424:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":350,"src":"424:7:4"},"id":316,"nodeType":"InheritanceSpecifier","src":"424:7:4"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":314,"nodeType":"StructuredDocumentation","src":"193:191:4","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":338,"linearizedBaseContracts":[338,350],"name":"InterfaceDetection","nameLocation":"402:18:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":320,"libraryName":{"id":317,"name":"InterfaceDetectionStorage","nameLocations":["444:25:4"],"nodeType":"IdentifierPath","referencedDeclaration":449,"src":"444:25:4"},"nodeType":"UsingForDirective","src":"438:69:4","typeName":{"id":319,"nodeType":"UserDefinedTypeName","pathNode":{"id":318,"name":"InterfaceDetectionStorage.Layout","nameLocations":["474:25:4","500:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"474:32:4"},"referencedDeclaration":359,"src":"474:32:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[349],"body":{"id":336,"nodeType":"Block","src":"626:89:4","statements":[{"expression":{"arguments":[{"id":333,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"696:11:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":329,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"643:25:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$449_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"669:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":448,"src":"643:32:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:34:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":332,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"678:17:4","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":436,"src":"643:52:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes4_$returns$_t_bool_$bound_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"643:65:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":328,"id":335,"nodeType":"Return","src":"636:72:4"}]},"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"513:23:4","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":337,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"550:17:4","nodeType":"FunctionDefinition","overrides":{"id":325,"nodeType":"OverrideSpecifier","overrides":[],"src":"602:8:4"},"parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"interfaceId","nameLocation":"575:11:4","nodeType":"VariableDeclaration","scope":337,"src":"568:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"568:6:4","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"567:20:4"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":337,"src":"620:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":326,"name":"bool","nodeType":"ElementaryTypeName","src":"620:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"619:6:4"},"scope":338,"src":"541:174:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":339,"src":"384:333:4","usedErrors":[]}],"src":"32:686:4"},"id":4},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[350]},"id":351,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":340,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":341,"nodeType":"StructuredDocumentation","src":"57:173:5","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":350,"linearizedBaseContracts":[350],"name":"IERC165","nameLocation":"240:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"254:340:5","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":349,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"608:17:5","nodeType":"FunctionDefinition","parameters":{"id":345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"interfaceId","nameLocation":"633:11:5","nodeType":"VariableDeclaration","scope":349,"src":"626:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":343,"name":"bytes4","nodeType":"ElementaryTypeName","src":"626:6:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"625:20:5"},"returnParameters":{"id":348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":347,"mutability":"mutable","name":"supported","nameLocation":"674:9:5","nodeType":"VariableDeclaration","scope":349,"src":"669:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":346,"name":"bool","nodeType":"ElementaryTypeName","src":"669:4:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"668:16:5"},"scope":350,"src":"599:86:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":351,"src":"230:457:5","usedErrors":[]}],"src":"32:656:5"},"id":5},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[350],"InterfaceDetectionStorage":[449]},"id":450,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":352,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":354,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":450,"sourceUnit":351,"src":"57:52:6","symbolAliases":[{"foreign":{"id":353,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"65:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":449,"linearizedBaseContracts":[449],"name":"InterfaceDetectionStorage","nameLocation":"119:25:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":359,"members":[{"constant":false,"id":358,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"199:19:6","nodeType":"VariableDeclaration","scope":359,"src":"175:43:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":357,"keyType":{"id":355,"name":"bytes4","nodeType":"ElementaryTypeName","src":"183:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"175:23:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueType":{"id":356,"name":"bool","nodeType":"ElementaryTypeName","src":"193:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"158:6:6","nodeType":"StructDefinition","scope":449,"src":"151:74:6","visibility":"public"},{"constant":true,"id":372,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"257:19:6","nodeType":"VariableDeclaration","scope":449,"src":"231:136:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"231:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"305:55:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":365,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"295:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"295:66:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"287:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"287:7:6","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"287:75:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"365:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"287:79:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"279:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"279:7:6","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"279:88:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":375,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"399:20:6","nodeType":"VariableDeclaration","scope":449,"src":"374:58:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":373,"name":"bytes4","nodeType":"ElementaryTypeName","src":"374:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":374,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"422:10:6","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":401,"nodeType":"Block","src":"764:152:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":387,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"782:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":388,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"797:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"782:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","id":390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"819:33:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""},"value":"InterfaceDetection: wrong value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300","typeString":"literal_string \"InterfaceDetection: wrong value\""}],"id":386,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"774:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"774:79:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":392,"nodeType":"ExpressionStatement","src":"774:79:6"},{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":393,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"863:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"865:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"863:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":397,"indexExpression":{"id":395,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"885:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"863:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":398,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":383,"src":"900:9:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"863:46:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"863:46:6"}]},"documentation":{"id":376,"nodeType":"StructuredDocumentation","src":"439:226:6","text":"@notice Sets or unsets an ERC165 interface.\n @dev Reverts if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":402,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"679:21:6","nodeType":"FunctionDefinition","parameters":{"id":384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":379,"mutability":"mutable","name":"s","nameLocation":"716:1:6","nodeType":"VariableDeclaration","scope":402,"src":"701:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":378,"nodeType":"UserDefinedTypeName","pathNode":{"id":377,"name":"Layout","nameLocations":["701:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"701:6:6"},"referencedDeclaration":359,"src":"701:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"interfaceId","nameLocation":"726:11:6","nodeType":"VariableDeclaration","scope":402,"src":"719:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":380,"name":"bytes4","nodeType":"ElementaryTypeName","src":"719:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":383,"mutability":"mutable","name":"supported","nameLocation":"744:9:6","nodeType":"VariableDeclaration","scope":402,"src":"739:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":382,"name":"bool","nodeType":"ElementaryTypeName","src":"739:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"700:54:6"},"returnParameters":{"id":385,"nodeType":"ParameterList","parameters":[],"src":"764:0:6"},"scope":449,"src":"670:246:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":435,"nodeType":"Block","src":"1371:236:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":413,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1385:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":414,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1400:20:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1385:35:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":419,"nodeType":"IfStatement","src":"1381:78:6","trueBody":{"id":418,"nodeType":"Block","src":"1422:37:6","statements":[{"expression":{"hexValue":"66616c7365","id":416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1443:5:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":412,"id":417,"nodeType":"Return","src":"1436:12:6"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":420,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1472:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":422,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":350,"src":"1492:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$350_$","typeString":"type(contract IERC165)"}],"id":421,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1487:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":423,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$350","typeString":"type(contract IERC165)"}},"id":424,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1501:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1487:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1472:40:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":429,"nodeType":"IfStatement","src":"1468:82:6","trueBody":{"id":428,"nodeType":"Block","src":"1514:36:6","statements":[{"expression":{"hexValue":"74727565","id":426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":412,"id":427,"nodeType":"Return","src":"1528:11:6"}]}},{"expression":{"baseExpression":{"expression":{"id":430,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"1566:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1568:19:6","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1566:21:6","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":433,"indexExpression":{"id":432,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":408,"src":"1588:11:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1566:34:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":412,"id":434,"nodeType":"Return","src":"1559:41:6"}]},"documentation":{"id":403,"nodeType":"StructuredDocumentation","src":"922:340:6","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":436,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1276:17:6","nodeType":"FunctionDefinition","parameters":{"id":409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":406,"mutability":"mutable","name":"s","nameLocation":"1309:1:6","nodeType":"VariableDeclaration","scope":436,"src":"1294:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":405,"nodeType":"UserDefinedTypeName","pathNode":{"id":404,"name":"Layout","nameLocations":["1294:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1294:6:6"},"referencedDeclaration":359,"src":"1294:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":408,"mutability":"mutable","name":"interfaceId","nameLocation":"1319:11:6","nodeType":"VariableDeclaration","scope":436,"src":"1312:18:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":407,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1312:6:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1293:38:6"},"returnParameters":{"id":412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":411,"mutability":"mutable","name":"supported","nameLocation":"1360:9:6","nodeType":"VariableDeclaration","scope":436,"src":"1355:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":410,"name":"bool","nodeType":"ElementaryTypeName","src":"1355:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1354:16:6"},"scope":449,"src":"1267:340:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":447,"nodeType":"Block","src":"1672:115:6","statements":[{"assignments":[443],"declarations":[{"constant":false,"id":443,"mutability":"mutable","name":"position","nameLocation":"1690:8:6","nodeType":"VariableDeclaration","scope":447,"src":"1682:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":442,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1682:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":445,"initialValue":{"id":444,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1701:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1682:38:6"},{"AST":{"nodeType":"YulBlock","src":"1739:42:6","statements":[{"nodeType":"YulAssignment","src":"1753:18:6","value":{"name":"position","nodeType":"YulIdentifier","src":"1763:8:6"},"variableNames":[{"name":"s.slot","nodeType":"YulIdentifier","src":"1753:6:6"}]}]},"evmVersion":"london","externalReferences":[{"declaration":443,"isOffset":false,"isSlot":false,"src":"1763:8:6","valueSize":1},{"declaration":440,"isOffset":false,"isSlot":true,"src":"1753:6:6","suffix":"slot","valueSize":1}],"id":446,"nodeType":"InlineAssembly","src":"1730:51:6"}]},"id":448,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1622:6:6","nodeType":"FunctionDefinition","parameters":{"id":437,"nodeType":"ParameterList","parameters":[],"src":"1628:2:6"},"returnParameters":{"id":441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":440,"mutability":"mutable","name":"s","nameLocation":"1669:1:6","nodeType":"VariableDeclaration","scope":448,"src":"1654:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":439,"nodeType":"UserDefinedTypeName","pathNode":{"id":438,"name":"Layout","nameLocations":["1654:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1654:6:6"},"referencedDeclaration":359,"src":"1654:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1653:18:6"},"scope":449,"src":"1613:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":450,"src":"111:1678:6","usedErrors":[]}],"src":"32:1758:6"},"id":6},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[499],"ForwarderRegistryContextBase":[619],"IERC2771":[631],"IForwarderRegistry":[645]},"id":500,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":451,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":453,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":646,"src":"57:71:7","symbolAliases":[{"foreign":{"id":452,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"65:18:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":455,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":632,"src":"129:51:7","symbolAliases":[{"foreign":{"id":454,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":631,"src":"137:8:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":457,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":500,"sourceUnit":620,"src":"181:85:7","symbolAliases":[{"foreign":{"id":456,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"189:28:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":459,"name":"ForwarderRegistryContextBase","nameLocations":["574:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"574:28:7"},"id":460,"nodeType":"InheritanceSpecifier","src":"574:28:7"},{"baseName":{"id":461,"name":"IERC2771","nameLocations":["604:8:7"],"nodeType":"IdentifierPath","referencedDeclaration":631,"src":"604:8:7"},"id":462,"nodeType":"InheritanceSpecifier","src":"604:8:7"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":458,"nodeType":"StructuredDocumentation","src":"268:260:7","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":499,"linearizedBaseContracts":[499,631,619],"name":"ForwarderRegistryContext","nameLocation":"546:24:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":471,"nodeType":"Block","src":"719:2:7","statements":[]},"id":472,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":468,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"699:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"id":469,"kind":"baseConstructorSpecifier","modifierName":{"id":467,"name":"ForwarderRegistryContextBase","nameLocations":["670:28:7"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"670:28:7"},"nodeType":"ModifierInvocation","src":"670:48:7"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":465,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"650:18:7","nodeType":"VariableDeclaration","scope":472,"src":"631:37:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":464,"nodeType":"UserDefinedTypeName","pathNode":{"id":463,"name":"IForwarderRegistry","nameLocations":["631:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"631:18:7"},"referencedDeclaration":645,"src":"631:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"630:39:7"},"returnParameters":{"id":470,"nodeType":"ParameterList","parameters":[],"src":"719:0:7"},"scope":499,"src":"619:102:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":480,"nodeType":"Block","src":"799:42:7","statements":[{"expression":{"id":478,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"816:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":477,"id":479,"nodeType":"Return","src":"809:25:7"}]},"functionSelector":"2b4c9f16","id":481,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"736:17:7","nodeType":"FunctionDefinition","parameters":{"id":473,"nodeType":"ParameterList","parameters":[],"src":"753:2:7"},"returnParameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":481,"src":"779:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":475,"nodeType":"UserDefinedTypeName","pathNode":{"id":474,"name":"IForwarderRegistry","nameLocations":["779:18:7"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"779:18:7"},"referencedDeclaration":645,"src":"779:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"778:20:7"},"scope":499,"src":"727:114:7","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[630],"body":{"id":497,"nodeType":"Block","src":"969:64:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":490,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":484,"src":"986:9:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":493,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1007:18:7","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"999:7:7","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":491,"name":"address","nodeType":"ElementaryTypeName","src":"999:7:7","typeDescriptions":{}}},"id":494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"999:27:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"986:40:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":489,"id":496,"nodeType":"Return","src":"979:47:7"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"847:24:7","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":498,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"885:18:7","nodeType":"FunctionDefinition","overrides":{"id":486,"nodeType":"OverrideSpecifier","overrides":[],"src":"945:8:7"},"parameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"forwarder","nameLocation":"912:9:7","nodeType":"VariableDeclaration","scope":498,"src":"904:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":483,"name":"address","nodeType":"ElementaryTypeName","src":"904:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"903:19:7"},"returnParameters":{"id":489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":498,"src":"963:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":487,"name":"bool","nodeType":"ElementaryTypeName","src":"963:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"962:6:7"},"scope":499,"src":"876:157:7","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":500,"src":"528:507:7","usedErrors":[]}],"src":"32:1004:7"},"id":7},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[674],"ForwarderRegistryContextBase":[619],"IForwarderRegistry":[645]},"id":620,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":501,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:8"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":620,"sourceUnit":646,"src":"57:74:8","symbolAliases":[{"foreign":{"id":502,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"65:18:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":505,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":620,"sourceUnit":675,"src":"132:67:8","symbolAliases":[{"foreign":{"id":504,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"140:15:8","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":506,"nodeType":"StructuredDocumentation","src":"201:243:8","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":619,"linearizedBaseContracts":[619],"name":"ForwarderRegistryContextBase","nameLocation":"462:28:8","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":509,"mutability":"immutable","name":"_forwarderRegistry","nameLocation":"535:18:8","nodeType":"VariableDeclaration","scope":619,"src":"497:56:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":508,"nodeType":"UserDefinedTypeName","pathNode":{"id":507,"name":"IForwarderRegistry","nameLocations":["497:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"497:18:8"},"referencedDeclaration":645,"src":"497:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":519,"nodeType":"Block","src":"610:55:8","statements":[{"expression":{"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":515,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"620:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":516,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":512,"src":"641:17:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"src":"620:38:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":518,"nodeType":"ExpressionStatement","src":"620:38:8"}]},"id":520,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"591:17:8","nodeType":"VariableDeclaration","scope":520,"src":"572:36:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":511,"nodeType":"UserDefinedTypeName","pathNode":{"id":510,"name":"IForwarderRegistry","nameLocations":["572:18:8"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"572:18:8"},"referencedDeclaration":645,"src":"572:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"571:38:8"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[],"src":"610:0:8"},"scope":619,"src":"560:105:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":569,"nodeType":"Block","src":"843:681:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":526,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1044:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1048:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1044:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":528,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1058:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1061:6:8","memberName":"origin","nodeType":"MemberAccess","src":"1058:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1044:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":531,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1071:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1075:4:8","memberName":"data","nodeType":"MemberAccess","src":"1071:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1080:6:8","memberName":"length","nodeType":"MemberAccess","src":"1071:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1089:2:8","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1071:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1044:47:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":541,"nodeType":"IfStatement","src":"1040:95:8","trueBody":{"id":540,"nodeType":"Block","src":"1093:42:8","statements":[{"expression":{"expression":{"id":537,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1114:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1118:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1114:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":539,"nodeType":"Return","src":"1107:17:8"}]}},{"assignments":[543],"declarations":[{"constant":false,"id":543,"mutability":"mutable","name":"sender","nameLocation":"1153:6:8","nodeType":"VariableDeclaration","scope":569,"src":"1145:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":542,"name":"address","nodeType":"ElementaryTypeName","src":"1145:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":547,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":544,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"1162:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1178:9:8","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":656,"src":"1162:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":546,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1145:44:8"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":548,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1347:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1351:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1347:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":552,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1369:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":551,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1361:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"1361:7:8","typeDescriptions":{}}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1361:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1347:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":557,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"1431:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":558,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1439:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1443:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1439:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":555,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"1392:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":556,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1411:19:8","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":644,"src":"1392:38:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":560,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1392:58:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1347:103:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":565,"nodeType":"IfStatement","src":"1343:147:8","trueBody":{"id":564,"nodeType":"Block","src":"1452:38:8","statements":[{"expression":{"id":562,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":543,"src":"1473:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":563,"nodeType":"Return","src":"1466:13:8"}]}},{"expression":{"expression":{"id":566,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1507:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1507:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":525,"id":568,"nodeType":"Return","src":"1500:17:8"}]},"documentation":{"id":521,"nodeType":"StructuredDocumentation","src":"671:105:8","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":570,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"790:10:8","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[],"src":"800:2:8"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":570,"src":"834:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":523,"name":"address","nodeType":"ElementaryTypeName","src":"834:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"833:9:8"},"scope":619,"src":"781:743:8","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":617,"nodeType":"Block","src":"1705:666:8","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":576,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1906:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1910:6:8","memberName":"sender","nodeType":"MemberAccess","src":"1906:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":578,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1920:2:8","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1923:6:8","memberName":"origin","nodeType":"MemberAccess","src":"1920:9:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1906:23:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":581,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1933:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1937:4:8","memberName":"data","nodeType":"MemberAccess","src":"1933:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:6:8","memberName":"length","nodeType":"MemberAccess","src":"1933:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1951:2:8","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1933:20:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1906:47:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":591,"nodeType":"IfStatement","src":"1902:93:8","trueBody":{"id":590,"nodeType":"Block","src":"1955:40:8","statements":[{"expression":{"expression":{"id":587,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1976:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1980:4:8","memberName":"data","nodeType":"MemberAccess","src":"1976:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":589,"nodeType":"Return","src":"1969:15:8"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":592,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2156:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2160:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2156:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":596,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2178:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}],"id":595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2170:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":594,"name":"address","nodeType":"ElementaryTypeName","src":"2170:7:8","typeDescriptions":{}}},"id":597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2170:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2156:41:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":601,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2240:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2256:9:8","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":656,"src":"2240:25:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2240:27:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":604,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2269:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:8","memberName":"sender","nodeType":"MemberAccess","src":"2269:10:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":599,"name":"_forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"2201:18:8","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:19:8","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":644,"src":"2201:38:8","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2201:79:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2156:124:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":613,"nodeType":"IfStatement","src":"2152:187:8","trueBody":{"id":612,"nodeType":"Block","src":"2282:57:8","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":608,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":674,"src":"2303:15:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$674_$","typeString":"type(library ERC2771Calldata)"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2319:7:8","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":673,"src":"2303:23:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2303:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":611,"nodeType":"Return","src":"2296:32:8"}]}},{"expression":{"expression":{"id":614,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2356:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2360:4:8","memberName":"data","nodeType":"MemberAccess","src":"2356:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":575,"id":616,"nodeType":"Return","src":"2349:15:8"}]},"documentation":{"id":571,"nodeType":"StructuredDocumentation","src":"1530:103:8","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":618,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1647:8:8","nodeType":"FunctionDefinition","parameters":{"id":572,"nodeType":"ParameterList","parameters":[],"src":"1655:2:8"},"returnParameters":{"id":575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":574,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":618,"src":"1689:14:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":573,"name":"bytes","nodeType":"ElementaryTypeName","src":"1689:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1688:16:8"},"scope":619,"src":"1638:733:8","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":620,"src":"444:1929:8","usedErrors":[]}],"src":"32:2342:8"},"id":8},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[631]},"id":632,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":621,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"57:110:9","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":631,"linearizedBaseContracts":[631],"name":"IERC2771","nameLocation":"177:8:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":623,"nodeType":"StructuredDocumentation","src":"192:171:9","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":630,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"377:18:9","nodeType":"FunctionDefinition","parameters":{"id":626,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"forwarder","nameLocation":"404:9:9","nodeType":"VariableDeclaration","scope":630,"src":"396:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"395:19:9"},"returnParameters":{"id":629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":628,"mutability":"mutable","name":"isTrusted","nameLocation":"443:9:9","nodeType":"VariableDeclaration","scope":630,"src":"438:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":627,"name":"bool","nodeType":"ElementaryTypeName","src":"438:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"437:16:9"},"scope":631,"src":"368:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":632,"src":"167:289:9","usedErrors":[]}],"src":"32:425:9"},"id":9},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[645]},"id":646,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":633,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"57:143:10","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":645,"linearizedBaseContracts":[645],"name":"IForwarderRegistry","nameLocation":"210:18:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":635,"nodeType":"StructuredDocumentation","src":"235:314:10","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":644,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"563:19:10","nodeType":"FunctionDefinition","parameters":{"id":640,"nodeType":"ParameterList","parameters":[{"constant":false,"id":637,"mutability":"mutable","name":"sender","nameLocation":"591:6:10","nodeType":"VariableDeclaration","scope":644,"src":"583:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":636,"name":"address","nodeType":"ElementaryTypeName","src":"583:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":639,"mutability":"mutable","name":"forwarder","nameLocation":"607:9:10","nodeType":"VariableDeclaration","scope":644,"src":"599:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":638,"name":"address","nodeType":"ElementaryTypeName","src":"599:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"582:35:10"},"returnParameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":642,"mutability":"mutable","name":"isApproved","nameLocation":"646:10:10","nodeType":"VariableDeclaration","scope":644,"src":"641:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":641,"name":"bool","nodeType":"ElementaryTypeName","src":"641:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"640:17:10"},"scope":645,"src":"554:104:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":646,"src":"200:460:10","usedErrors":[]}],"src":"32:629:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[674]},"id":675,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":647,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:11"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"57:144:11","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":674,"linearizedBaseContracts":[674],"name":"ERC2771Calldata","nameLocation":"209:15:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":655,"nodeType":"Block","src":"397:105:11","statements":[{"AST":{"nodeType":"YulBlock","src":"416:80:11","statements":[{"nodeType":"YulAssignment","src":"430:56:11","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:11","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"465:12:11"},"nodeType":"YulFunctionCall","src":"465:14:11"},{"kind":"number","nodeType":"YulLiteral","src":"481:2:11","type":"","value":"20"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"461:3:11"},"nodeType":"YulFunctionCall","src":"461:23:11"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"448:12:11"},"nodeType":"YulFunctionCall","src":"448:37:11"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"440:3:11"},"nodeType":"YulFunctionCall","src":"440:46:11"},"variableNames":[{"name":"sender","nodeType":"YulIdentifier","src":"430:6:11"}]}]},"evmVersion":"london","externalReferences":[{"declaration":652,"isOffset":false,"isSlot":false,"src":"430:6:11","valueSize":1}],"id":654,"nodeType":"InlineAssembly","src":"407:89:11"}]},"documentation":{"id":649,"nodeType":"StructuredDocumentation","src":"231:101:11","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":656,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"346:9:11","nodeType":"FunctionDefinition","parameters":{"id":650,"nodeType":"ParameterList","parameters":[],"src":"355:2:11"},"returnParameters":{"id":653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":652,"mutability":"mutable","name":"sender","nameLocation":"389:6:11","nodeType":"VariableDeclaration","scope":656,"src":"381:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":651,"name":"address","nodeType":"ElementaryTypeName","src":"381:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"380:16:11"},"scope":674,"src":"337:165:11","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":672,"nodeType":"Block","src":"678:89:11","statements":[{"id":671,"nodeType":"UncheckedBlock","src":"688:73:11","statements":[{"expression":{"baseExpression":{"expression":{"id":662,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:4:11","memberName":"data","nodeType":"MemberAccess","src":"719:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":664,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"729:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"733:4:11","memberName":"data","nodeType":"MemberAccess","src":"729:8:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"738:6:11","memberName":"length","nodeType":"MemberAccess","src":"729:15:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"747:2:11","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"729:20:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"719:31:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":661,"id":670,"nodeType":"Return","src":"712:38:11"}]}]},"documentation":{"id":657,"nodeType":"StructuredDocumentation","src":"508:102:11","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":673,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"624:7:11","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"631:2:11"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"data","nameLocation":"672:4:11","nodeType":"VariableDeclaration","scope":673,"src":"657:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":659,"name":"bytes","nodeType":"ElementaryTypeName","src":"657:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"656:21:11"},"scope":674,"src":"615:152:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":675,"src":"201:568:11","usedErrors":[]}],"src":"32:738:11"},"id":11},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"ProxyInitialization":[713],"StorageSlot":[825]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":676,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"32:23:12"},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":678,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":714,"sourceUnit":826,"src":"57:74:12","symbolAliases":[{"foreign":{"id":677,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"65:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"133:92:12","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":713,"linearizedBaseContracts":[713],"name":"ProxyInitialization","nameLocation":"233:19:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":711,"nodeType":"Block","src":"600:216:12","statements":[{"assignments":[691],"declarations":[{"constant":false,"id":691,"mutability":"mutable","name":"currentVersion","nameLocation":"642:14:12","nodeType":"VariableDeclaration","scope":711,"src":"610:46:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":690,"nodeType":"UserDefinedTypeName","pathNode":{"id":689,"name":"StorageSlot.Uint256Slot","nameLocations":["610:11:12","622:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":780,"src":"610:23:12"},"referencedDeclaration":780,"src":"610:23:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":696,"initialValue":{"arguments":[{"id":694,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":682,"src":"686:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":692,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":825,"src":"659:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$825_$","typeString":"type(library StorageSlot)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"671:14:12","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":824,"src":"659:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$780_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"659:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"610:88:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":698,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"716:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":699,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"731:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":779,"src":"716:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":700,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"739:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"716:28:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53746f726167653a2070686173652072656163686564","id":702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"746:24:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""},"value":"Storage: phase reached"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef8a00474db48c1563590c05781d34a97d92c92640007c22c7decc1b54f3c741","typeString":"literal_string \"Storage: phase reached\""}],"id":697,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"708:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"708:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":704,"nodeType":"ExpressionStatement","src":"708:63:12"},{"expression":{"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":705,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":691,"src":"781:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":707,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"796:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":779,"src":"781:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":708,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":684,"src":"804:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"781:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":710,"nodeType":"ExpressionStatement","src":"781:28:12"}]},"documentation":{"id":680,"nodeType":"StructuredDocumentation","src":"259:273:12","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":712,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"546:8:12","nodeType":"FunctionDefinition","parameters":{"id":685,"nodeType":"ParameterList","parameters":[{"constant":false,"id":682,"mutability":"mutable","name":"storageSlot","nameLocation":"563:11:12","nodeType":"VariableDeclaration","scope":712,"src":"555:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":681,"name":"bytes32","nodeType":"ElementaryTypeName","src":"555:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":684,"mutability":"mutable","name":"phase","nameLocation":"584:5:12","nodeType":"VariableDeclaration","scope":712,"src":"576:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":683,"name":"uint256","nodeType":"ElementaryTypeName","src":"576:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"554:36:12"},"returnParameters":{"id":686,"nodeType":"ParameterList","parameters":[],"src":"600:0:12"},"scope":713,"src":"537:279:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":714,"src":"225:593:12","usedErrors":[]}],"src":"32:787:12"},"id":12},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","exportedSymbols":{"IERC1155Mintable":[743]},"id":744,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"33:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"58:196:13","text":"@title ERC1155 Multi Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x5190c92c."},"fullyImplemented":false,"id":743,"linearizedBaseContracts":[743],"name":"IERC1155Mintable","nameLocation":"264:16:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"287:550:13","text":"@notice Safely mints some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance of `id` overflows.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param to Address of the new token owner.\n @param id Identifier of the token to mint.\n @param value Amount of token to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"5cfa9297","id":728,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"851:8:13","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"to","nameLocation":"868:2:13","nodeType":"VariableDeclaration","scope":728,"src":"860:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"860:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"id","nameLocation":"880:2:13","nodeType":"VariableDeclaration","scope":728,"src":"872:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":720,"name":"uint256","nodeType":"ElementaryTypeName","src":"872:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"value","nameLocation":"892:5:13","nodeType":"VariableDeclaration","scope":728,"src":"884:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":722,"name":"uint256","nodeType":"ElementaryTypeName","src":"884:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"data","nameLocation":"914:4:13","nodeType":"VariableDeclaration","scope":728,"src":"899:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":724,"name":"bytes","nodeType":"ElementaryTypeName","src":"899:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:60:13"},"returnParameters":{"id":727,"nodeType":"ParameterList","parameters":[],"src":"928:0:13"},"scope":743,"src":"842:87:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":729,"nodeType":"StructuredDocumentation","src":"935:644:13","text":"@notice Safely mints a batch of tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `to`'s balance overflows for one of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to mint.\n @param values Amounts of tokens to mint.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"0d6a5bbb","id":742,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchMint","nameLocation":"1593:13:13","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":731,"mutability":"mutable","name":"to","nameLocation":"1615:2:13","nodeType":"VariableDeclaration","scope":742,"src":"1607:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":730,"name":"address","nodeType":"ElementaryTypeName","src":"1607:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":734,"mutability":"mutable","name":"ids","nameLocation":"1638:3:13","nodeType":"VariableDeclaration","scope":742,"src":"1619:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":732,"name":"uint256","nodeType":"ElementaryTypeName","src":"1619:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":733,"nodeType":"ArrayTypeName","src":"1619:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":737,"mutability":"mutable","name":"values","nameLocation":"1662:6:13","nodeType":"VariableDeclaration","scope":742,"src":"1643:25:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":735,"name":"uint256","nodeType":"ElementaryTypeName","src":"1643:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":736,"nodeType":"ArrayTypeName","src":"1643:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"data","nameLocation":"1685:4:13","nodeType":"VariableDeclaration","scope":742,"src":"1670:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":738,"name":"bytes","nodeType":"ElementaryTypeName","src":"1670:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1606:84:13"},"returnParameters":{"id":741,"nodeType":"ParameterList","parameters":[],"src":"1699:0:13"},"scope":743,"src":"1584:116:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":744,"src":"254:1448:13","usedErrors":[]}],"src":"33:1670:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[765]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":745,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":746,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":765,"linearizedBaseContracts":[765],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":754,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":751,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":750,"id":753,"nodeType":"Return","src":"712:17:14"}]},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":747,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":749,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":755,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":765,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":763,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":760,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":759,"id":762,"nodeType":"Return","src":"819:15:14"}]},"id":764,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":756,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":758,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":764,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":757,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":765,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":766,"src":"608:235:14","usedErrors":[]}],"src":"86:758:14"},"id":14},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[825]},"id":826,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":768,"nodeType":"StructuredDocumentation","src":"130:1148:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":825,"linearizedBaseContracts":[825],"name":"StorageSlot","nameLocation":"1287:11:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":771,"members":[{"constant":false,"id":770,"mutability":"mutable","name":"value","nameLocation":"1342:5:15","nodeType":"VariableDeclaration","scope":771,"src":"1334:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":769,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:15","nodeType":"StructDefinition","scope":825,"src":"1305:49:15","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":774,"members":[{"constant":false,"id":773,"mutability":"mutable","name":"value","nameLocation":"1394:5:15","nodeType":"VariableDeclaration","scope":774,"src":"1389:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":772,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:15","nodeType":"StructDefinition","scope":825,"src":"1360:46:15","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":777,"members":[{"constant":false,"id":776,"mutability":"mutable","name":"value","nameLocation":"1449:5:15","nodeType":"VariableDeclaration","scope":777,"src":"1441:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:15","nodeType":"StructDefinition","scope":825,"src":"1412:49:15","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":780,"members":[{"constant":false,"id":779,"mutability":"mutable","name":"value","nameLocation":"1504:5:15","nodeType":"VariableDeclaration","scope":780,"src":"1496:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":778,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:15","nodeType":"StructDefinition","scope":825,"src":"1467:49:15","visibility":"public"},{"body":{"id":790,"nodeType":"Block","src":"1698:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"1760:38:15","statements":[{"nodeType":"YulAssignment","src":"1774:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"1784:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"1774:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":787,"isOffset":false,"isSlot":true,"src":"1774:6:15","suffix":"slot","valueSize":1},{"declaration":783,"isOffset":false,"isSlot":false,"src":"1784:4:15","valueSize":1}],"id":789,"nodeType":"InlineAssembly","src":"1751:47:15"}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"1522:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":791,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:15","nodeType":"FunctionDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":783,"mutability":"mutable","name":"slot","nameLocation":"1646:4:15","nodeType":"VariableDeclaration","scope":791,"src":"1638:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":782,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:15"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"r","nameLocation":"1695:1:15","nodeType":"VariableDeclaration","scope":791,"src":"1675:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$771_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":786,"nodeType":"UserDefinedTypeName","pathNode":{"id":785,"name":"AddressSlot","nameLocations":["1675:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":771,"src":"1675:11:15"},"referencedDeclaration":771,"src":"1675:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$771_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:15"},"scope":825,"src":"1614:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":801,"nodeType":"Block","src":"1986:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2048:38:15","statements":[{"nodeType":"YulAssignment","src":"2062:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2072:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2062:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":798,"isOffset":false,"isSlot":true,"src":"2062:6:15","suffix":"slot","valueSize":1},{"declaration":794,"isOffset":false,"isSlot":false,"src":"2072:4:15","valueSize":1}],"id":800,"nodeType":"InlineAssembly","src":"2039:47:15"}]},"documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"1810:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":802,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:15","nodeType":"FunctionDefinition","parameters":{"id":795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":794,"mutability":"mutable","name":"slot","nameLocation":"1934:4:15","nodeType":"VariableDeclaration","scope":802,"src":"1926:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":793,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:15"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[{"constant":false,"id":798,"mutability":"mutable","name":"r","nameLocation":"1983:1:15","nodeType":"VariableDeclaration","scope":802,"src":"1963:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$774_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":797,"nodeType":"UserDefinedTypeName","pathNode":{"id":796,"name":"BooleanSlot","nameLocations":["1963:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":774,"src":"1963:11:15"},"referencedDeclaration":774,"src":"1963:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$774_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:15"},"scope":825,"src":"1902:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":812,"nodeType":"Block","src":"2274:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2336:38:15","statements":[{"nodeType":"YulAssignment","src":"2350:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2360:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2350:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":809,"isOffset":false,"isSlot":true,"src":"2350:6:15","suffix":"slot","valueSize":1},{"declaration":805,"isOffset":false,"isSlot":false,"src":"2360:4:15","valueSize":1}],"id":811,"nodeType":"InlineAssembly","src":"2327:47:15"}]},"documentation":{"id":803,"nodeType":"StructuredDocumentation","src":"2098:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":813,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:15","nodeType":"FunctionDefinition","parameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"slot","nameLocation":"2222:4:15","nodeType":"VariableDeclaration","scope":813,"src":"2214:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":804,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:15"},"returnParameters":{"id":810,"nodeType":"ParameterList","parameters":[{"constant":false,"id":809,"mutability":"mutable","name":"r","nameLocation":"2271:1:15","nodeType":"VariableDeclaration","scope":813,"src":"2251:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$777_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":808,"nodeType":"UserDefinedTypeName","pathNode":{"id":807,"name":"Bytes32Slot","nameLocations":["2251:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"2251:11:15"},"referencedDeclaration":777,"src":"2251:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$777_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:15"},"scope":825,"src":"2190:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":823,"nodeType":"Block","src":"2562:106:15","statements":[{"AST":{"nodeType":"YulBlock","src":"2624:38:15","statements":[{"nodeType":"YulAssignment","src":"2638:14:15","value":{"name":"slot","nodeType":"YulIdentifier","src":"2648:4:15"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2638:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":820,"isOffset":false,"isSlot":true,"src":"2638:6:15","suffix":"slot","valueSize":1},{"declaration":816,"isOffset":false,"isSlot":false,"src":"2648:4:15","valueSize":1}],"id":822,"nodeType":"InlineAssembly","src":"2615:47:15"}]},"documentation":{"id":814,"nodeType":"StructuredDocumentation","src":"2386:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":824,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:15","nodeType":"FunctionDefinition","parameters":{"id":817,"nodeType":"ParameterList","parameters":[{"constant":false,"id":816,"mutability":"mutable","name":"slot","nameLocation":"2510:4:15","nodeType":"VariableDeclaration","scope":824,"src":"2502:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":815,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:15"},"returnParameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":820,"mutability":"mutable","name":"r","nameLocation":"2559:1:15","nodeType":"VariableDeclaration","scope":824,"src":"2539:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":819,"nodeType":"UserDefinedTypeName","pathNode":{"id":818,"name":"Uint256Slot","nameLocations":["2539:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":780,"src":"2539:11:15"},"referencedDeclaration":780,"src":"2539:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$780_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:15"},"scope":825,"src":"2478:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":826,"src":"1279:1391:15","usedErrors":[]}],"src":"105:2566:15"},"id":15},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1327]},"id":1328,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":827,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:16"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":828,"nodeType":"StructuredDocumentation","src":"143:658:16","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1327,"linearizedBaseContracts":[1327],"name":"MerkleProof","nameLocation":"810:11:16","nodeType":"ContractDefinition","nodes":[{"body":{"id":848,"nodeType":"Block","src":"1283:57:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":842,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"1313:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":843,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":836,"src":"1320:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":841,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":910,"src":"1300:12:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":844,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":845,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":834,"src":"1329:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":840,"id":847,"nodeType":"Return","src":"1293:40:16"}]},"documentation":{"id":829,"nodeType":"StructuredDocumentation","src":"828:323:16","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":849,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:16","nodeType":"FunctionDefinition","parameters":{"id":837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":832,"mutability":"mutable","name":"proof","nameLocation":"1198:5:16","nodeType":"VariableDeclaration","scope":849,"src":"1181:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":831,"nodeType":"ArrayTypeName","src":"1181:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":834,"mutability":"mutable","name":"root","nameLocation":"1221:4:16","nodeType":"VariableDeclaration","scope":849,"src":"1213:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":833,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":836,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:16","nodeType":"VariableDeclaration","scope":849,"src":"1235:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":835,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:16"},"returnParameters":{"id":840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":839,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":849,"src":"1277:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:16"},"scope":1327,"src":"1156:184:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":869,"nodeType":"Block","src":"1578:65:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":863,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"1616:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":864,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":857,"src":"1623:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":862,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":950,"src":"1595:20:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":865,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":866,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":855,"src":"1632:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":861,"id":868,"nodeType":"Return","src":"1588:48:16"}]},"documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"1346:90:16","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":870,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:16","nodeType":"FunctionDefinition","parameters":{"id":858,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"proof","nameLocation":"1493:5:16","nodeType":"VariableDeclaration","scope":870,"src":"1474:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":851,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":852,"nodeType":"ArrayTypeName","src":"1474:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"root","nameLocation":"1516:4:16","nodeType":"VariableDeclaration","scope":870,"src":"1508:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":854,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:16","nodeType":"VariableDeclaration","scope":870,"src":"1530:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:16"},"returnParameters":{"id":861,"nodeType":"ParameterList","parameters":[{"constant":false,"id":860,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":870,"src":"1572:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":859,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:16"},"scope":1327,"src":"1441:202:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":909,"nodeType":"Block","src":"2086:198:16","statements":[{"assignments":[882],"declarations":[{"constant":false,"id":882,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:16","nodeType":"VariableDeclaration","scope":909,"src":"2096:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":884,"initialValue":{"id":883,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"2119:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:16"},{"body":{"id":905,"nodeType":"Block","src":"2176:73:16","statements":[{"expression":{"id":903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":896,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"2190:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":898,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"2215:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":899,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"2229:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":901,"indexExpression":{"id":900,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"2235:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":897,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2205:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":904,"nodeType":"ExpressionStatement","src":"2190:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"2153:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":890,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":874,"src":"2157:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:16","memberName":"length","nodeType":"MemberAccess","src":"2157:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":906,"initializationExpression":{"assignments":[886],"declarations":[{"constant":false,"id":886,"mutability":"mutable","name":"i","nameLocation":"2146:1:16","nodeType":"VariableDeclaration","scope":906,"src":"2138:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":885,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":888,"initialValue":{"hexValue":"30","id":887,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:16"},"loopExpression":{"expression":{"id":894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:16","subExpression":{"id":893,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"2171:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":895,"nodeType":"ExpressionStatement","src":"2171:3:16"},"nodeType":"ForStatement","src":"2133:116:16"},{"expression":{"id":907,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"2265:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":880,"id":908,"nodeType":"Return","src":"2258:19:16"}]},"documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"1649:340:16","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":910,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:16","nodeType":"FunctionDefinition","parameters":{"id":877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"proof","nameLocation":"2033:5:16","nodeType":"VariableDeclaration","scope":910,"src":"2016:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":873,"nodeType":"ArrayTypeName","src":"2016:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":876,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:16","nodeType":"VariableDeclaration","scope":910,"src":"2040:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:16"},"returnParameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":879,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":910,"src":"2077:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:16"},"scope":1327,"src":"1994:290:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":949,"nodeType":"Block","src":"2493:198:16","statements":[{"assignments":[922],"declarations":[{"constant":false,"id":922,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:16","nodeType":"VariableDeclaration","scope":949,"src":"2503:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":924,"initialValue":{"id":923,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":916,"src":"2526:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:16"},{"body":{"id":945,"nodeType":"Block","src":"2583:73:16","statements":[{"expression":{"id":943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":936,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"2597:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":938,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"2622:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":939,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"2636:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":941,"indexExpression":{"id":940,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2642:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":937,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2612:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":944,"nodeType":"ExpressionStatement","src":"2597:48:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":929,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2560:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":930,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":914,"src":"2564:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:16","memberName":"length","nodeType":"MemberAccess","src":"2564:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":946,"initializationExpression":{"assignments":[926],"declarations":[{"constant":false,"id":926,"mutability":"mutable","name":"i","nameLocation":"2553:1:16","nodeType":"VariableDeclaration","scope":946,"src":"2545:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":928,"initialValue":{"hexValue":"30","id":927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:16"},"loopExpression":{"expression":{"id":934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:16","subExpression":{"id":933,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"2578:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":935,"nodeType":"ExpressionStatement","src":"2578:3:16"},"nodeType":"ForStatement","src":"2540:116:16"},{"expression":{"id":947,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"2672:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":920,"id":948,"nodeType":"Return","src":"2665:19:16"}]},"documentation":{"id":911,"nodeType":"StructuredDocumentation","src":"2290:96:16","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":950,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:16","nodeType":"FunctionDefinition","parameters":{"id":917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":914,"mutability":"mutable","name":"proof","nameLocation":"2440:5:16","nodeType":"VariableDeclaration","scope":950,"src":"2421:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":913,"nodeType":"ArrayTypeName","src":"2421:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":916,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:16","nodeType":"VariableDeclaration","scope":950,"src":"2447:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:16"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":950,"src":"2484:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:16"},"scope":1327,"src":"2391:300:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"3234:76:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":968,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":954,"src":"3269:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":969,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"3276:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":970,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":962,"src":"3288:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":967,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"3251:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":972,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"3299:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":966,"id":974,"nodeType":"Return","src":"3244:59:16"}]},"documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"2697:350:16","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:16","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"proof","nameLocation":"3104:5:16","nodeType":"VariableDeclaration","scope":976,"src":"3087:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":953,"nodeType":"ArrayTypeName","src":"3087:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":957,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:16","nodeType":"VariableDeclaration","scope":976,"src":"3119:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":955,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":956,"nodeType":"ArrayTypeName","src":"3119:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"root","nameLocation":"3161:4:16","nodeType":"VariableDeclaration","scope":976,"src":"3153:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":958,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:16","nodeType":"VariableDeclaration","scope":976,"src":"3175:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":961,"nodeType":"ArrayTypeName","src":"3175:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:16"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":976,"src":"3228:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":964,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:16"},"scope":1327,"src":"3052:258:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1001,"nodeType":"Block","src":"3715:84:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":994,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":980,"src":"3758:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":995,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"3765:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":996,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":988,"src":"3777:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":993,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"3732:25:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":998,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":985,"src":"3788:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":992,"id":1000,"nodeType":"Return","src":"3725:67:16"}]},"documentation":{"id":977,"nodeType":"StructuredDocumentation","src":"3316:200:16","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1002,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:16","nodeType":"FunctionDefinition","parameters":{"id":989,"nodeType":"ParameterList","parameters":[{"constant":false,"id":980,"mutability":"mutable","name":"proof","nameLocation":"3583:5:16","nodeType":"VariableDeclaration","scope":1002,"src":"3564:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":978,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":979,"nodeType":"ArrayTypeName","src":"3564:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:16","nodeType":"VariableDeclaration","scope":1002,"src":"3598:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":981,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":982,"nodeType":"ArrayTypeName","src":"3598:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":985,"mutability":"mutable","name":"root","nameLocation":"3642:4:16","nodeType":"VariableDeclaration","scope":1002,"src":"3634:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":984,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":988,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:16","nodeType":"VariableDeclaration","scope":1002,"src":"3656:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":986,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":987,"nodeType":"ArrayTypeName","src":"3656:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:16"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1002,"src":"3709:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":990,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:16"},"scope":1327,"src":"3521:278:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1146,"nodeType":"Block","src":"4753:1860:16","statements":[{"assignments":[1018],"declarations":[{"constant":false,"id":1018,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:16","nodeType":"VariableDeclaration","scope":1146,"src":"5136:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1017,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1021,"initialValue":{"expression":{"id":1019,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"5156:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:16","memberName":"length","nodeType":"MemberAccess","src":"5156:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:16"},{"assignments":[1023],"declarations":[{"constant":false,"id":1023,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:16","nodeType":"VariableDeclaration","scope":1146,"src":"5179:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1022,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1026,"initialValue":{"expression":{"id":1024,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"5201:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:16","memberName":"length","nodeType":"MemberAccess","src":"5201:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1033,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1028,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"5270:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1029,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"5282:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:16","memberName":"length","nodeType":"MemberAccess","src":"5282:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1032,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1034,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"5302:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1036,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1027,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1037,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1038,"nodeType":"ExpressionStatement","src":"5262:87:16"},{"assignments":[1043],"declarations":[{"constant":false,"id":1043,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:16","nodeType":"VariableDeclaration","scope":1146,"src":"5594:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1042,"nodeType":"ArrayTypeName","src":"5594:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1049,"initialValue":{"arguments":[{"id":1047,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"5634:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1046,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1044,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1045,"nodeType":"ArrayTypeName","src":"5624:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:16"},{"assignments":[1051],"declarations":[{"constant":false,"id":1051,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:16","nodeType":"VariableDeclaration","scope":1146,"src":"5656:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1050,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1053,"initialValue":{"hexValue":"30","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:16"},{"assignments":[1055],"declarations":[{"constant":false,"id":1055,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:16","nodeType":"VariableDeclaration","scope":1146,"src":"5685:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1054,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1057,"initialValue":{"hexValue":"30","id":1056,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:16"},{"assignments":[1059],"declarations":[{"constant":false,"id":1059,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:16","nodeType":"VariableDeclaration","scope":1146,"src":"5714:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1061,"initialValue":{"hexValue":"30","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:16"},{"body":{"id":1119,"nodeType":"Block","src":"6151:258:16","statements":[{"assignments":[1073],"declarations":[{"constant":false,"id":1073,"mutability":"mutable","name":"a","nameLocation":"6173:1:16","nodeType":"VariableDeclaration","scope":1119,"src":"6165:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1072,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1086,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1074,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6177:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1075,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"6187:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1081,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"6219:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1084,"indexExpression":{"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:16","subExpression":{"id":1082,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"6226:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:16","trueExpression":{"baseExpression":{"id":1077,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"6199:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1080,"indexExpression":{"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:16","subExpression":{"id":1078,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6206:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:16"},{"assignments":[1088],"declarations":[{"constant":false,"id":1088,"mutability":"mutable","name":"b","nameLocation":"6258:1:16","nodeType":"VariableDeclaration","scope":1119,"src":"6250:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1087,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1109,"initialValue":{"condition":{"baseExpression":{"id":1089,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"6262:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1091,"indexExpression":{"id":1090,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6273:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1104,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"6340:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1107,"indexExpression":{"id":1106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:16","subExpression":{"id":1105,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"6346:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:16","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1092,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6278:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1093,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"6288:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1099,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"6320:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1102,"indexExpression":{"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:16","subExpression":{"id":1100,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1055,"src":"6327:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:16","trueExpression":{"baseExpression":{"id":1095,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"6300:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1098,"indexExpression":{"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:16","subExpression":{"id":1096,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1051,"src":"6307:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:16"},{"expression":{"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1110,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"6371:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1112,"indexExpression":{"id":1111,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6378:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1114,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1073,"src":"6393:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1115,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"6396:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1113,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"6383:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1118,"nodeType":"ExpressionStatement","src":"6371:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1066,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6129:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1067,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6133:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1120,"initializationExpression":{"assignments":[1063],"declarations":[{"constant":false,"id":1063,"mutability":"mutable","name":"i","nameLocation":"6122:1:16","nodeType":"VariableDeclaration","scope":1120,"src":"6114:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1062,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1065,"initialValue":{"hexValue":"30","id":1064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:16"},"loopExpression":{"expression":{"id":1070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:16","subExpression":{"id":1069,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"6146:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1071,"nodeType":"ExpressionStatement","src":"6146:3:16"},"nodeType":"ForStatement","src":"6109:300:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6423:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1131,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1018,"src":"6505:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1132,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1143,"nodeType":"Block","src":"6567:40:16","statements":[{"expression":{"baseExpression":{"id":1139,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1006,"src":"6588:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1141,"indexExpression":{"hexValue":"30","id":1140,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1016,"id":1142,"nodeType":"Return","src":"6581:15:16"}]},"id":1144,"nodeType":"IfStatement","src":"6501:106:16","trueBody":{"id":1138,"nodeType":"Block","src":"6520:41:16","statements":[{"expression":{"baseExpression":{"id":1134,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1012,"src":"6541:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1136,"indexExpression":{"hexValue":"30","id":1135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1016,"id":1137,"nodeType":"Return","src":"6534:16:16"}]}},"id":1145,"nodeType":"IfStatement","src":"6419:188:16","trueBody":{"id":1130,"nodeType":"Block","src":"6440:55:16","statements":[{"expression":{"baseExpression":{"id":1124,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"6461:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1128,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1125,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1023,"src":"6468:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1016,"id":1129,"nodeType":"Return","src":"6454:30:16"}]}}]},"documentation":{"id":1003,"nodeType":"StructuredDocumentation","src":"3805:768:16","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1147,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:16","nodeType":"FunctionDefinition","parameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1006,"mutability":"mutable","name":"proof","nameLocation":"4631:5:16","nodeType":"VariableDeclaration","scope":1147,"src":"4614:22:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1004,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1005,"nodeType":"ArrayTypeName","src":"4614:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:16","nodeType":"VariableDeclaration","scope":1147,"src":"4646:24:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1007,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1008,"nodeType":"ArrayTypeName","src":"4646:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1012,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:16","nodeType":"VariableDeclaration","scope":1147,"src":"4680:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1010,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1011,"nodeType":"ArrayTypeName","src":"4680:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:16"},"returnParameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:16","nodeType":"VariableDeclaration","scope":1147,"src":"4733:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:16"},"scope":1327,"src":"4578:2035:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1291,"nodeType":"Block","src":"7013:1860:16","statements":[{"assignments":[1163],"declarations":[{"constant":false,"id":1163,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:16","nodeType":"VariableDeclaration","scope":1291,"src":"7396:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1162,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1166,"initialValue":{"expression":{"id":1164,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"7416:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:16","memberName":"length","nodeType":"MemberAccess","src":"7416:13:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:16"},{"assignments":[1168],"declarations":[{"constant":false,"id":1168,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:16","nodeType":"VariableDeclaration","scope":1291,"src":"7439:19:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1167,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1171,"initialValue":{"expression":{"id":1169,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"7461:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:16","memberName":"length","nodeType":"MemberAccess","src":"7461:17:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1173,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"7530:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1174,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"7542:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:16","memberName":"length","nodeType":"MemberAccess","src":"7542:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1179,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"7562:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1172,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"ExpressionStatement","src":"7522:87:16"},{"assignments":[1188],"declarations":[{"constant":false,"id":1188,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:16","nodeType":"VariableDeclaration","scope":1291,"src":"7854:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1186,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1187,"nodeType":"ArrayTypeName","src":"7854:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1194,"initialValue":{"arguments":[{"id":1192,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"7894:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1190,"nodeType":"ArrayTypeName","src":"7884:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:16"},{"assignments":[1196],"declarations":[{"constant":false,"id":1196,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:16","nodeType":"VariableDeclaration","scope":1291,"src":"7916:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1195,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1198,"initialValue":{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:16"},{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:16","nodeType":"VariableDeclaration","scope":1291,"src":"7945:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1202,"initialValue":{"hexValue":"30","id":1201,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:16"},{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:16","nodeType":"VariableDeclaration","scope":1291,"src":"7974:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1206,"initialValue":{"hexValue":"30","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:16"},{"body":{"id":1264,"nodeType":"Block","src":"8411:258:16","statements":[{"assignments":[1218],"declarations":[{"constant":false,"id":1218,"mutability":"mutable","name":"a","nameLocation":"8433:1:16","nodeType":"VariableDeclaration","scope":1264,"src":"8425:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1217,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1231,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1219,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8437:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1220,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8447:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1226,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"8479:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1229,"indexExpression":{"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:16","subExpression":{"id":1227,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"8486:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:16","trueExpression":{"baseExpression":{"id":1222,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"8459:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1225,"indexExpression":{"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:16","subExpression":{"id":1223,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8466:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:16"},{"assignments":[1233],"declarations":[{"constant":false,"id":1233,"mutability":"mutable","name":"b","nameLocation":"8518:1:16","nodeType":"VariableDeclaration","scope":1264,"src":"8510:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1254,"initialValue":{"condition":{"baseExpression":{"id":1234,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"8522:10:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1236,"indexExpression":{"id":1235,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8533:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1249,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8600:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1252,"indexExpression":{"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:16","subExpression":{"id":1250,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"8606:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:16","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1237,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8538:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1238,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8548:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1244,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"8580:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1247,"indexExpression":{"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:16","subExpression":{"id":1245,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"8587:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:16","trueExpression":{"baseExpression":{"id":1240,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"8560:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1243,"indexExpression":{"id":1242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:16","subExpression":{"id":1241,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"8567:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:16"},{"expression":{"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1255,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"8631:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1257,"indexExpression":{"id":1256,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8638:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1259,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"8653:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1260,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"8656:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1258,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"8643:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1263,"nodeType":"ExpressionStatement","src":"8631:27:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1211,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8389:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1212,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8393:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1265,"initializationExpression":{"assignments":[1208],"declarations":[{"constant":false,"id":1208,"mutability":"mutable","name":"i","nameLocation":"8382:1:16","nodeType":"VariableDeclaration","scope":1265,"src":"8374:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1210,"initialValue":{"hexValue":"30","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:16"},"loopExpression":{"expression":{"id":1215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:16","subExpression":{"id":1214,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"8406:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1216,"nodeType":"ExpressionStatement","src":"8406:3:16"},"nodeType":"ForStatement","src":"8369:300:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8683:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1276,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1163,"src":"8765:9:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1288,"nodeType":"Block","src":"8827:40:16","statements":[{"expression":{"baseExpression":{"id":1284,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1151,"src":"8848:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1286,"indexExpression":{"hexValue":"30","id":1285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1161,"id":1287,"nodeType":"Return","src":"8841:15:16"}]},"id":1289,"nodeType":"IfStatement","src":"8761:106:16","trueBody":{"id":1283,"nodeType":"Block","src":"8780:41:16","statements":[{"expression":{"baseExpression":{"id":1279,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"8801:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1281,"indexExpression":{"hexValue":"30","id":1280,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1161,"id":1282,"nodeType":"Return","src":"8794:16:16"}]}},"id":1290,"nodeType":"IfStatement","src":"8679:188:16","trueBody":{"id":1275,"nodeType":"Block","src":"8700:55:16","statements":[{"expression":{"baseExpression":{"id":1269,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"8721:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1273,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1270,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"8728:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1161,"id":1274,"nodeType":"Return","src":"8714:30:16"}]}}]},"documentation":{"id":1148,"nodeType":"StructuredDocumentation","src":"6619:202:16","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1292,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:16","nodeType":"FunctionDefinition","parameters":{"id":1158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1151,"mutability":"mutable","name":"proof","nameLocation":"6889:5:16","nodeType":"VariableDeclaration","scope":1292,"src":"6870:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1149,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1150,"nodeType":"ArrayTypeName","src":"6870:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:16","nodeType":"VariableDeclaration","scope":1292,"src":"6904:26:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1152,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1153,"nodeType":"ArrayTypeName","src":"6904:6:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1157,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:16","nodeType":"VariableDeclaration","scope":1292,"src":"6940:23:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1156,"nodeType":"ArrayTypeName","src":"6940:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:16"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:16","nodeType":"VariableDeclaration","scope":1292,"src":"6993:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:16"},"scope":1327,"src":"6826:2047:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1314,"nodeType":"Block","src":"8951:75:16","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1301,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"8968:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1302,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"8972:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1309,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"9014:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1310,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"9017:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1308,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"8999:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:16","trueExpression":{"arguments":[{"id":1305,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"8991:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1306,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"8994:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1304,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"8976:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1300,"id":1313,"nodeType":"Return","src":"8961:58:16"}]},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:16","nodeType":"FunctionDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"a","nameLocation":"8906:1:16","nodeType":"VariableDeclaration","scope":1315,"src":"8898:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"b","nameLocation":"8917:1:16","nodeType":"VariableDeclaration","scope":1315,"src":"8909:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:16"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1315,"src":"8942:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:16"},"scope":1327,"src":"8879:147:16","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1325,"nodeType":"Block","src":"9115:178:16","statements":[{"AST":{"nodeType":"YulBlock","src":"9177:110:16","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9198:4:16","type":"","value":"0x00"},{"name":"a","nodeType":"YulIdentifier","src":"9204:1:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9191:6:16"},"nodeType":"YulFunctionCall","src":"9191:15:16"},"nodeType":"YulExpressionStatement","src":"9191:15:16"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9226:4:16","type":"","value":"0x20"},{"name":"b","nodeType":"YulIdentifier","src":"9232:1:16"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9219:6:16"},"nodeType":"YulFunctionCall","src":"9219:15:16"},"nodeType":"YulExpressionStatement","src":"9219:15:16"},{"nodeType":"YulAssignment","src":"9247:30:16","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9266:4:16","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"9272:4:16","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"9256:9:16"},"nodeType":"YulFunctionCall","src":"9256:21:16"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"9247:5:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"london","externalReferences":[{"declaration":1317,"isOffset":false,"isSlot":false,"src":"9204:1:16","valueSize":1},{"declaration":1319,"isOffset":false,"isSlot":false,"src":"9232:1:16","valueSize":1},{"declaration":1322,"isOffset":false,"isSlot":false,"src":"9247:5:16","valueSize":1}],"id":1324,"nodeType":"InlineAssembly","src":"9168:119:16"}]},"id":1326,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:16","nodeType":"FunctionDefinition","parameters":{"id":1320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1317,"mutability":"mutable","name":"a","nameLocation":"9064:1:16","nodeType":"VariableDeclaration","scope":1326,"src":"9056:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1316,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1319,"mutability":"mutable","name":"b","nameLocation":"9075:1:16","nodeType":"VariableDeclaration","scope":1326,"src":"9067:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1318,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:16"},"returnParameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"value","nameLocation":"9108:5:16","nodeType":"VariableDeclaration","scope":1326,"src":"9100:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1321,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:16"},"scope":1327,"src":"9032:261:16","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1328,"src":"802:8493:16","usedErrors":[]}],"src":"118:9178:16"},"id":16},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[1717],"Context":[765],"ContractOwnership":[32],"ContractOwnershipStorage":[307],"ForwarderRegistryContext":[499],"ForwarderRegistryContextBase":[619],"IERC1155Mintable":[743],"IForwarderRegistry":[645],"MerkleProof":[1327]},"id":1718,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1329,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1331,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":1328,"src":"57:87:17","symbolAliases":[{"foreign":{"id":1330,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"65:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":1333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":744,"src":"145:117:17","symbolAliases":[{"foreign":{"id":1332,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"153:16:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":1335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":500,"src":"263:115:17","symbolAliases":[{"foreign":{"id":1334,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"271:24:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1337,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":33,"src":"379:101:17","symbolAliases":[{"foreign":{"id":1336,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"387:17:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":1339,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":308,"src":"481:125:17","symbolAliases":[{"foreign":{"id":1338,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"489:24:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":1341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":620,"src":"607:128:17","symbolAliases":[{"foreign":{"id":1340,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"615:28:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":646,"src":"736:114:17","symbolAliases":[{"foreign":{"id":1342,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"744:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1345,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1718,"sourceUnit":766,"src":"851:66:17","symbolAliases":[{"foreign":{"id":1344,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"859:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1347,"name":"ForwarderRegistryContext","nameLocations":["1202:24:17"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"1202:24:17"},"id":1348,"nodeType":"InheritanceSpecifier","src":"1202:24:17"},{"baseName":{"id":1349,"name":"ContractOwnership","nameLocations":["1228:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1228:17:17"},"id":1350,"nodeType":"InheritanceSpecifier","src":"1228:17:17"}],"canonicalName":"AnichessERC1155MerkleClaim","contractDependencies":[],"contractKind":"contract","documentation":{"id":1346,"nodeType":"StructuredDocumentation","src":"919:243:17","text":" @title Anichess ERC1155 Merkle Claim Contract\n @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\n @dev entitled to the rewards without revealing the entire list of recipients."},"fullyImplemented":true,"id":1717,"linearizedBaseContracts":[1717,32,338,350,82,105,765,499,631,619],"name":"AnichessERC1155MerkleClaim","nameLocation":"1172:26:17","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1354,"libraryName":{"id":1351,"name":"ContractOwnershipStorage","nameLocations":["1258:24:17"],"nodeType":"IdentifierPath","referencedDeclaration":307,"src":"1258:24:17"},"nodeType":"UsingForDirective","src":"1252:67:17","typeName":{"id":1353,"nodeType":"UserDefinedTypeName","pathNode":{"id":1352,"name":"ContractOwnershipStorage.Layout","nameLocations":["1287:24:17","1312:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":124,"src":"1287:31:17"},"referencedDeclaration":124,"src":"1287:31:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":1358,"libraryName":{"id":1355,"name":"MerkleProof","nameLocations":["1330:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1327,"src":"1330:11:17"},"nodeType":"UsingForDirective","src":"1324:32:17","typeName":{"baseType":{"id":1356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1346:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1357,"nodeType":"ArrayTypeName","src":"1346:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"canonicalName":"AnichessERC1155MerkleClaim.ClaimWindow","id":1365,"members":[{"constant":false,"id":1360,"mutability":"mutable","name":"merkleRoot","nameLocation":"1440:10:17","nodeType":"VariableDeclaration","scope":1365,"src":"1432:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1432:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"startTime","nameLocation":"1468:9:17","nodeType":"VariableDeclaration","scope":1365,"src":"1460:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"1460:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"endTime","nameLocation":"1495:7:17","nodeType":"VariableDeclaration","scope":1365,"src":"1487:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1363,"name":"uint256","nodeType":"ElementaryTypeName","src":"1487:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimWindow","nameLocation":"1410:11:17","nodeType":"StructDefinition","scope":1717,"src":"1403:106:17","visibility":"public"},{"constant":false,"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"1515:48:17","text":"@notice The ERC1155Mintable reward contract."},"functionSelector":"3a5af339","id":1369,"mutability":"immutable","name":"REWARD_CONTRACT","nameLocation":"1602:15:17","nodeType":"VariableDeclaration","scope":1717,"src":"1568:49:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"},"typeName":{"id":1368,"nodeType":"UserDefinedTypeName","pathNode":{"id":1367,"name":"IERC1155Mintable","nameLocations":["1568:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":743,"src":"1568:16:17"},"referencedDeclaration":743,"src":"1568:16:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1370,"nodeType":"StructuredDocumentation","src":"1624:75:17","text":"@notice The total number of tokens that can be minted in this contract."},"functionSelector":"9dfbcde8","id":1372,"mutability":"immutable","name":"MINT_SUPPLY","nameLocation":"1729:11:17","nodeType":"VariableDeclaration","scope":1717,"src":"1704:36:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1371,"name":"uint256","nodeType":"ElementaryTypeName","src":"1704:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"1747:62:17","text":"@notice The total number of tokens that have been claimed."},"functionSelector":"ba65912e","id":1375,"mutability":"mutable","name":"noOfTokensClaimed","nameLocation":"1829:17:17","nodeType":"VariableDeclaration","scope":1717,"src":"1814:32:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1374,"name":"uint256","nodeType":"ElementaryTypeName","src":"1814:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"1853:58:17","text":"@notice Mapping from the epoch ID to the claim window."},"functionSelector":"dc45def6","id":1381,"mutability":"mutable","name":"claimWindows","nameLocation":"1955:12:17","nodeType":"VariableDeclaration","scope":1717,"src":"1916:51:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$1365_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)"},"typeName":{"id":1380,"keyType":{"id":1377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1924:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1916:31:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$1365_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)"},"valueType":{"id":1379,"nodeType":"UserDefinedTypeName","pathNode":{"id":1378,"name":"ClaimWindow","nameLocations":["1935:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1365,"src":"1935:11:17"},"referencedDeclaration":1365,"src":"1935:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1382,"nodeType":"StructuredDocumentation","src":"1974:54:17","text":"@notice Mapping from leafhash to the claim status."},"functionSelector":"e3a0ce09","id":1386,"mutability":"mutable","name":"claimStatus","nameLocation":"2065:11:17","nodeType":"VariableDeclaration","scope":1717,"src":"2033:43:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":1385,"keyType":{"id":1383,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2041:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2033:24:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueType":{"id":1384,"name":"bool","nodeType":"ElementaryTypeName","src":"2052:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":1387,"nodeType":"StructuredDocumentation","src":"2083:45:17","text":"@notice Emitted when a payout is claimed."},"eventSelector":"3b7a2657cb0a2501536d45aeb61ad8088337c70086ba7d3b078cf6592597c3c9","id":1399,"name":"PayoutClaimed","nameLocation":"2139:13:17","nodeType":"EventDefinition","parameters":{"id":1398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2169:7:17","nodeType":"VariableDeclaration","scope":1399,"src":"2153:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2153:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1391,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"2194:9:17","nodeType":"VariableDeclaration","scope":1399,"src":"2178:25:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1390,"name":"address","nodeType":"ElementaryTypeName","src":"2178:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1393,"indexed":false,"mutability":"mutable","name":"merkleRoot","nameLocation":"2213:10:17","nodeType":"VariableDeclaration","scope":1399,"src":"2205:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2205:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1395,"indexed":false,"mutability":"mutable","name":"id","nameLocation":"2233:2:17","nodeType":"VariableDeclaration","scope":1399,"src":"2225:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1394,"name":"uint256","nodeType":"ElementaryTypeName","src":"2225:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1397,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"2245:5:17","nodeType":"VariableDeclaration","scope":1399,"src":"2237:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1396,"name":"uint256","nodeType":"ElementaryTypeName","src":"2237:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2152:99:17"},"src":"2133:119:17"},{"anonymous":false,"documentation":{"id":1400,"nodeType":"StructuredDocumentation","src":"2258:47:17","text":"@notice Emitted when a claim window is set."},"eventSelector":"91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da","id":1410,"name":"SetEpochMerkleRoot","nameLocation":"2316:18:17","nodeType":"EventDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2351:7:17","nodeType":"VariableDeclaration","scope":1410,"src":"2335:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1401,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2335:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1404,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"2376:10:17","nodeType":"VariableDeclaration","scope":1410,"src":"2360:26:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2360:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1406,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"2396:9:17","nodeType":"VariableDeclaration","scope":1410,"src":"2388:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1405,"name":"uint256","nodeType":"ElementaryTypeName","src":"2388:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1408,"indexed":false,"mutability":"mutable","name":"endTime","nameLocation":"2415:7:17","nodeType":"VariableDeclaration","scope":1410,"src":"2407:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1407,"name":"uint256","nodeType":"ElementaryTypeName","src":"2407:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2334:89:17"},"src":"2310:114:17"},{"documentation":{"id":1411,"nodeType":"StructuredDocumentation","src":"2430:60:17","text":"@notice Thrown when the payout has already been claimed."},"errorSelector":"c5ac808b","id":1421,"name":"AlreadyClaimed","nameLocation":"2501:14:17","nodeType":"ErrorDefinition","parameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1413,"mutability":"mutable","name":"epochId","nameLocation":"2524:7:17","nodeType":"VariableDeclaration","scope":1421,"src":"2516:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2516:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1415,"mutability":"mutable","name":"recipient","nameLocation":"2541:9:17","nodeType":"VariableDeclaration","scope":1421,"src":"2533:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1414,"name":"address","nodeType":"ElementaryTypeName","src":"2533:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1417,"mutability":"mutable","name":"id","nameLocation":"2560:2:17","nodeType":"VariableDeclaration","scope":1421,"src":"2552:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1416,"name":"uint256","nodeType":"ElementaryTypeName","src":"2552:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"value","nameLocation":"2572:5:17","nodeType":"VariableDeclaration","scope":1421,"src":"2564:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1418,"name":"uint256","nodeType":"ElementaryTypeName","src":"2564:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2515:63:17"},"src":"2495:84:17"},{"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"2585:68:17","text":"@notice Thrown when the proof provided for the claim is invalid."},"errorSelector":"cb4da946","id":1432,"name":"InvalidProof","nameLocation":"2664:12:17","nodeType":"ErrorDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1424,"mutability":"mutable","name":"epochId","nameLocation":"2685:7:17","nodeType":"VariableDeclaration","scope":1432,"src":"2677:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1423,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2677:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1426,"mutability":"mutable","name":"recipient","nameLocation":"2702:9:17","nodeType":"VariableDeclaration","scope":1432,"src":"2694:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1425,"name":"address","nodeType":"ElementaryTypeName","src":"2694:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"id","nameLocation":"2721:2:17","nodeType":"VariableDeclaration","scope":1432,"src":"2713:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1427,"name":"uint256","nodeType":"ElementaryTypeName","src":"2713:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"value","nameLocation":"2733:5:17","nodeType":"VariableDeclaration","scope":1432,"src":"2725:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1429,"name":"uint256","nodeType":"ElementaryTypeName","src":"2725:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2676:63:17"},"src":"2658:82:17"},{"documentation":{"id":1433,"nodeType":"StructuredDocumentation","src":"2746:73:17","text":"@notice Thrown when the claim window is closed or has not yet opened."},"errorSelector":"dbeb4f4d","id":1439,"name":"OutOfClaimWindow","nameLocation":"2830:16:17","nodeType":"ErrorDefinition","parameters":{"id":1438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1435,"mutability":"mutable","name":"epochId","nameLocation":"2855:7:17","nodeType":"VariableDeclaration","scope":1439,"src":"2847:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1434,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2847:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1437,"mutability":"mutable","name":"currentTime","nameLocation":"2872:11:17","nodeType":"VariableDeclaration","scope":1439,"src":"2864:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"2864:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2846:38:17"},"src":"2824:61:17"},{"documentation":{"id":1440,"nodeType":"StructuredDocumentation","src":"2891:77:17","text":"@notice Thrown when the number of tokens claimed exceeds the mint supply."},"errorSelector":"6073f612","id":1452,"name":"ExceededMintSupply","nameLocation":"2979:18:17","nodeType":"ErrorDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1442,"mutability":"mutable","name":"epochId","nameLocation":"3006:7:17","nodeType":"VariableDeclaration","scope":1452,"src":"2998:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2998:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1444,"mutability":"mutable","name":"recipient","nameLocation":"3023:9:17","nodeType":"VariableDeclaration","scope":1452,"src":"3015:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1443,"name":"address","nodeType":"ElementaryTypeName","src":"3015:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1446,"mutability":"mutable","name":"id","nameLocation":"3042:2:17","nodeType":"VariableDeclaration","scope":1452,"src":"3034:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1445,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1448,"mutability":"mutable","name":"value","nameLocation":"3054:5:17","nodeType":"VariableDeclaration","scope":1452,"src":"3046:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"3046:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"totalClaimed","nameLocation":"3069:12:17","nodeType":"VariableDeclaration","scope":1452,"src":"3061:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"3061:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2997:85:17"},"src":"2973:110:17"},{"documentation":{"id":1453,"nodeType":"StructuredDocumentation","src":"3089:44:17","text":"@notice Thrown when the epoch ID exists."},"errorSelector":"ed10979d","id":1457,"name":"EpochIdAlreadyExists","nameLocation":"3144:20:17","nodeType":"ErrorDefinition","parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"epochId","nameLocation":"3173:7:17","nodeType":"VariableDeclaration","scope":1457,"src":"3165:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3165:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3164:17:17"},"src":"3138:44:17"},{"documentation":{"id":1458,"nodeType":"StructuredDocumentation","src":"3188:52:17","text":"@notice Thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":1462,"name":"EpochIdNotExists","nameLocation":"3251:16:17","nodeType":"ErrorDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1460,"mutability":"mutable","name":"epochId","nameLocation":"3276:7:17","nodeType":"VariableDeclaration","scope":1462,"src":"3268:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3268:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3267:17:17"},"src":"3245:40:17"},{"body":{"id":1489,"nodeType":"Block","src":"3806:83:17","statements":[{"expression":{"id":1483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1481,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"3816:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1482,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"3830:10:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3816:24:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1484,"nodeType":"ExpressionStatement","src":"3816:24:17"},{"expression":{"id":1487,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1485,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"3850:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1486,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"3868:14:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"src":"3850:32:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"id":1488,"nodeType":"ExpressionStatement","src":"3850:32:17"}]},"documentation":{"id":1463,"nodeType":"StructuredDocumentation","src":"3291:303:17","text":" @notice Constructor for the AnichessERC1155MerkleClaim contract.\n @param mintSupply The total number of tokens that can be minted in this contract.\n @param rewardContract The ERC1155Mintable reward contract.\n @param forwarderRegistry The forwarder registry contract."},"id":1490,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1474,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1471,"src":"3757:17:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"id":1475,"kind":"baseConstructorSpecifier","modifierName":{"id":1473,"name":"ForwarderRegistryContext","nameLocations":["3732:24:17"],"nodeType":"IdentifierPath","referencedDeclaration":499,"src":"3732:24:17"},"nodeType":"ModifierInvocation","src":"3732:43:17"},{"arguments":[{"expression":{"id":1477,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3794:3:17","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3798:6:17","memberName":"sender","nodeType":"MemberAccess","src":"3794:10:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1479,"kind":"baseConstructorSpecifier","modifierName":{"id":1476,"name":"ContractOwnership","nameLocations":["3776:17:17"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"3776:17:17"},"nodeType":"ModifierInvocation","src":"3776:29:17"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1472,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"mintSupply","nameLocation":"3628:10:17","nodeType":"VariableDeclaration","scope":1490,"src":"3620:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"3620:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1468,"mutability":"mutable","name":"rewardContract","nameLocation":"3665:14:17","nodeType":"VariableDeclaration","scope":1490,"src":"3648:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"},"typeName":{"id":1467,"nodeType":"UserDefinedTypeName","pathNode":{"id":1466,"name":"IERC1155Mintable","nameLocations":["3648:16:17"],"nodeType":"IdentifierPath","referencedDeclaration":743,"src":"3648:16:17"},"referencedDeclaration":743,"src":"3648:16:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":1471,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"3708:17:17","nodeType":"VariableDeclaration","scope":1490,"src":"3689:36:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":1470,"nodeType":"UserDefinedTypeName","pathNode":{"id":1469,"name":"IForwarderRegistry","nameLocations":["3689:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"3689:18:17"},"referencedDeclaration":645,"src":"3689:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"3610:121:17"},"returnParameters":{"id":1480,"nodeType":"ParameterList","parameters":[],"src":"3806:0:17"},"scope":1717,"src":"3599:290:17","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[570,755],"body":{"id":1503,"nodeType":"Block","src":"4054:65:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1499,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"4071:28:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$619_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:17","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":570,"src":"4071:39:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4071:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1498,"id":1502,"nodeType":"Return","src":"4064:48:17"}]},"documentation":{"id":1491,"nodeType":"StructuredDocumentation","src":"3895:44:17","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1504,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"3953:10:17","nodeType":"FunctionDefinition","overrides":{"id":1495,"nodeType":"OverrideSpecifier","overrides":[{"id":1493,"name":"Context","nameLocations":["3997:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":765,"src":"3997:7:17"},{"id":1494,"name":"ForwarderRegistryContextBase","nameLocations":["4006:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"4006:28:17"}],"src":"3988:47:17"},"parameters":{"id":1492,"nodeType":"ParameterList","parameters":[],"src":"3963:2:17"},"returnParameters":{"id":1498,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1497,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1504,"src":"4045:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1496,"name":"address","nodeType":"ElementaryTypeName","src":"4045:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4044:9:17"},"scope":1717,"src":"3944:175:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[618,764],"body":{"id":1517,"nodeType":"Block","src":"4289:63:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1513,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":619,"src":"4306:28:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$619_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4335:8:17","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":618,"src":"4306:37:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4306:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1512,"id":1516,"nodeType":"Return","src":"4299:46:17"}]},"documentation":{"id":1505,"nodeType":"StructuredDocumentation","src":"4125:44:17","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"4183:8:17","nodeType":"FunctionDefinition","overrides":{"id":1509,"nodeType":"OverrideSpecifier","overrides":[{"id":1507,"name":"Context","nameLocations":["4225:7:17"],"nodeType":"IdentifierPath","referencedDeclaration":765,"src":"4225:7:17"},{"id":1508,"name":"ForwarderRegistryContextBase","nameLocations":["4234:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":619,"src":"4234:28:17"}],"src":"4216:47:17"},"parameters":{"id":1506,"nodeType":"ParameterList","parameters":[],"src":"4191:2:17"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"4273:14:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1510,"name":"bytes","nodeType":"ElementaryTypeName","src":"4273:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4272:16:17"},"scope":1717,"src":"4174:178:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1571,"nodeType":"Block","src":"4954:363:17","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1535,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1504],"referencedDeclaration":1504,"src":"5021:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5021:12:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1530,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4964:24:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$307_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4989:6:17","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":306,"src":"4964:31:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4964:33:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$124_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1534,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4998:22:17","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":294,"src":"4964:56:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$124_storage_ptr_$_t_address_$returns$__$bound_to$_t_struct$_Layout_$124_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4964:70:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1538,"nodeType":"ExpressionStatement","src":"4964:70:17"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":1539,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"5049:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$1365_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":1541,"indexExpression":{"id":1540,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"5062:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5049:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"id":1542,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5071:10:17","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"5049:32:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1545,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5093:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1544,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5085:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1543,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5085:7:17","typeDescriptions":{}}},"id":1546,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5085:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5049:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1553,"nodeType":"IfStatement","src":"5045:113:17","trueBody":{"id":1552,"nodeType":"Block","src":"5097:61:17","statements":[{"errorCall":{"arguments":[{"id":1549,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"5139:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1548,"name":"EpochIdAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1457,"src":"5118:20:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5118:29:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1551,"nodeType":"RevertStatement","src":"5111:36:17"}]}},{"expression":{"id":1562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1554,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"5168:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$1365_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":1556,"indexExpression":{"id":1555,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"5181:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5168:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1558,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"5204:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1559,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"5216:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1560,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"5227:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1557,"name":"ClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"5192:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimWindow_$1365_storage_ptr_$","typeString":"type(struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer)"}},"id":1561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5192:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_memory_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow memory"}},"src":"5168:67:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"id":1563,"nodeType":"ExpressionStatement","src":"5168:67:17"},{"eventCall":{"arguments":[{"id":1565,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"5270:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1566,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"5279:10:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1567,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1525,"src":"5291:9:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1568,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"5302:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1564,"name":"SetEpochMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1410,"src":"5251:18:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256,uint256)"}},"id":1569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5251:59:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1570,"nodeType":"EmitStatement","src":"5246:64:17"}]},"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"4358:481:17","text":" @notice Sets the merkle root for a specific epoch with start and end time.\n @dev Reverts if the _msgSender() is not the owner.\n @dev Reverts if the epoch ID has already been set.\n @dev Emits a SetEpochMerkleRoot event.\n @param epochId The epoch ID for the claim.\n @param merkleRoot The Merkle root of the claim.\n @param startTime The start time of the claim window.\n @param endTime The end time of the claim window.     "},"functionSelector":"0328a8fc","id":1572,"implemented":true,"kind":"function","modifiers":[],"name":"setEpochMerkleRoot","nameLocation":"4853:18:17","nodeType":"FunctionDefinition","parameters":{"id":1528,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"epochId","nameLocation":"4880:7:17","nodeType":"VariableDeclaration","scope":1572,"src":"4872:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4872:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1523,"mutability":"mutable","name":"merkleRoot","nameLocation":"4897:10:17","nodeType":"VariableDeclaration","scope":1572,"src":"4889:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1522,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4889:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1525,"mutability":"mutable","name":"startTime","nameLocation":"4917:9:17","nodeType":"VariableDeclaration","scope":1572,"src":"4909:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1524,"name":"uint256","nodeType":"ElementaryTypeName","src":"4909:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1527,"mutability":"mutable","name":"endTime","nameLocation":"4936:7:17","nodeType":"VariableDeclaration","scope":1572,"src":"4928:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1526,"name":"uint256","nodeType":"ElementaryTypeName","src":"4928:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4871:73:17"},"returnParameters":{"id":1529,"nodeType":"ParameterList","parameters":[],"src":"4954:0:17"},"scope":1717,"src":"4844:473:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":1715,"nodeType":"Block","src":"6091:1097:17","statements":[{"assignments":[1589],"declarations":[{"constant":false,"id":1589,"mutability":"mutable","name":"claimWindow","nameLocation":"6121:11:17","nodeType":"VariableDeclaration","scope":1715,"src":"6101:31:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"},"typeName":{"id":1588,"nodeType":"UserDefinedTypeName","pathNode":{"id":1587,"name":"ClaimWindow","nameLocations":["6101:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1365,"src":"6101:11:17"},"referencedDeclaration":1365,"src":"6101:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow"}},"visibility":"internal"}],"id":1593,"initialValue":{"baseExpression":{"id":1590,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"6135:12:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$1365_storage_$","typeString":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow storage ref)"}},"id":1592,"indexExpression":{"id":1591,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6148:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6135:21:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage ref"}},"nodeType":"VariableDeclarationStatement","src":"6101:55:17"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1594,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"6170:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":1595,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6182:10:17","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"6170:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6204:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1597,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6196:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1596,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6196:7:17","typeDescriptions":{}}},"id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6196:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:36:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1606,"nodeType":"IfStatement","src":"6166:99:17","trueBody":{"id":1605,"nodeType":"Block","src":"6208:57:17","statements":[{"errorCall":{"arguments":[{"id":1602,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6246:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1601,"name":"EpochIdNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"6229:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6229:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1604,"nodeType":"RevertStatement","src":"6222:32:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1607,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6278:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6284:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6278:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1609,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"6296:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":1610,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6308:9:17","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":1362,"src":"6296:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1612,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6321:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6327:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6321:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":1614,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"6339:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":1615,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6351:7:17","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":1364,"src":"6339:19:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6321:37:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6278:80:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1625,"nodeType":"IfStatement","src":"6274:160:17","trueBody":{"id":1624,"nodeType":"Block","src":"6360:74:17","statements":[{"errorCall":{"arguments":[{"id":1619,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6398:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":1620,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6407:5:17","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6413:9:17","memberName":"timestamp","nodeType":"MemberAccess","src":"6407:15:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1618,"name":"OutOfClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1439,"src":"6381:16:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256) pure"}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6381:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1623,"nodeType":"RevertStatement","src":"6374:49:17"}]}},{"assignments":[1627],"declarations":[{"constant":false,"id":1627,"mutability":"mutable","name":"leaf","nameLocation":"6452:4:17","nodeType":"VariableDeclaration","scope":1715,"src":"6444:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6444:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1637,"initialValue":{"arguments":[{"arguments":[{"id":1631,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6486:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1632,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"6495:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1633,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6506:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1634,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6510:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1629,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6469:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6473:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"6469:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6469:47:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1628,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"6459:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6459:58:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6444:73:17"},{"condition":{"id":1644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6531:43:17","subExpression":{"arguments":[{"expression":{"id":1640,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"6545:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":1641,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6557:10:17","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"6545:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1642,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"6569:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1638,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"6532:5:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6538:6:17","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":849,"src":"6532:12:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$bound_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6532:42:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1652,"nodeType":"IfStatement","src":"6527:99:17","trueBody":{"errorCall":{"arguments":[{"id":1646,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6596:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1647,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"6605:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1648,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6616:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1649,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6620:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1645,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"6583:12:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256) pure"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:43:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1651,"nodeType":"RevertStatement","src":"6576:50:17"}},{"condition":{"baseExpression":{"id":1653,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"6641:11:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1655,"indexExpression":{"id":1654,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"6653:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6641:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1663,"nodeType":"IfStatement","src":"6637:75:17","trueBody":{"errorCall":{"arguments":[{"id":1657,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6682:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1658,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"6691:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1659,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6702:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6706:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1656,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1421,"src":"6667:14:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256) pure"}},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6667:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1662,"nodeType":"RevertStatement","src":"6660:52:17"}},{"assignments":[1665],"declarations":[{"constant":false,"id":1665,"mutability":"mutable","name":"prevNoOfTokensClaimed","nameLocation":"6731:21:17","nodeType":"VariableDeclaration","scope":1715,"src":"6723:29:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"6723:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1667,"initialValue":{"id":1666,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"6755:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6723:49:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"prevNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"6786:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1669,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6810:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6786:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1671,"name":"MINT_SUPPLY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"6818:11:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6786:43:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1684,"nodeType":"IfStatement","src":"6782:161:17","trueBody":{"id":1683,"nodeType":"Block","src":"6831:112:17","statements":[{"errorCall":{"arguments":[{"id":1674,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"6871:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1675,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"6880:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1676,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6891:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6895:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1678,"name":"prevNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"6902:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1679,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6926:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6902:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1673,"name":"ExceededMintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"6852:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256,uint256,uint256) pure"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6852:80:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1682,"nodeType":"RevertStatement","src":"6845:87:17"}]}},{"expression":{"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1685,"name":"noOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1375,"src":"6953:17:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1686,"name":"prevNoOfTokensClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"6973:21:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1687,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"6997:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6973:29:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6953:49:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1690,"nodeType":"ExpressionStatement","src":"6953:49:17"},{"expression":{"id":1695,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1691,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"7012:11:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":1693,"indexExpression":{"id":1692,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"7024:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7012:17:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":1694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7032:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"7012:24:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1696,"nodeType":"ExpressionStatement","src":"7012:24:17"},{"expression":{"arguments":[{"id":1700,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"7072:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1701,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"7083:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1702,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"7087:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1703,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7094:2:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1697,"name":"REWARD_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1369,"src":"7047:15:17","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7063:8:17","memberName":"safeMint","nodeType":"MemberAccess","referencedDeclaration":728,"src":"7047:24:17","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,uint256,bytes memory) external"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7047:50:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1705,"nodeType":"ExpressionStatement","src":"7047:50:17"},{"eventCall":{"arguments":[{"id":1707,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"7127:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1708,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"7136:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1709,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1589,"src":"7147:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$1365_storage_ptr","typeString":"struct AnichessERC1155MerkleClaim.ClaimWindow storage pointer"}},"id":1710,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7159:10:17","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":1360,"src":"7147:22:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1711,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"7171:2:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1712,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1584,"src":"7175:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1706,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1399,"src":"7113:13:17","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,bytes32,uint256,uint256)"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7113:68:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1714,"nodeType":"EmitStatement","src":"7108:73:17"}]},"documentation":{"id":1573,"nodeType":"StructuredDocumentation","src":"5323:650:17","text":" @notice Claims the payout for a specific epoch.\n @dev Reverts if the epoch ID does not exist\n @dev Reverts if the claim window is closed or has not yet opened.\n @dev Reverts if the proof provided for the claim is invalid.\n @dev Reverts if the payout has already been claimed.\n @dev Reverts if the number of tokens claimed exceeds the mint supply.\n @param epochId The epoch ID for the claim.\n @param proof The Merkle proof for the claim.\n @param recipient The recipient of the payout.\n @param id The ID of the token to claim.\n @param value The value of the token to claim."},"functionSelector":"3ec6004f","id":1716,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"5987:5:17","nodeType":"FunctionDefinition","parameters":{"id":1585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"mutability":"mutable","name":"epochId","nameLocation":"6001:7:17","nodeType":"VariableDeclaration","scope":1716,"src":"5993:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5993:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"proof","nameLocation":"6029:5:17","nodeType":"VariableDeclaration","scope":1716,"src":"6010:24:17","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1576,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6010:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1577,"nodeType":"ArrayTypeName","src":"6010:9:17","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1580,"mutability":"mutable","name":"recipient","nameLocation":"6044:9:17","nodeType":"VariableDeclaration","scope":1716,"src":"6036:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1579,"name":"address","nodeType":"ElementaryTypeName","src":"6036:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"id","nameLocation":"6063:2:17","nodeType":"VariableDeclaration","scope":1716,"src":"6055:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"6055:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1584,"mutability":"mutable","name":"value","nameLocation":"6075:5:17","nodeType":"VariableDeclaration","scope":1716,"src":"6067:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1583,"name":"uint256","nodeType":"ElementaryTypeName","src":"6067:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5992:89:17"},"returnParameters":{"id":1586,"nodeType":"ParameterList","parameters":[],"src":"6091:0:17"},"scope":1717,"src":"5978:1210:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1718,"src":"1163:6027:17","usedErrors":[1421,1432,1439,1452,1457,1462]}],"src":"32:7159:17"},"id":17},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol","exportedSymbols":{"AnichessERC1155MerkleClaim":[1717],"AnichessERC1155MerkleClaimMock":[1764],"IERC1155Mintable":[743],"IForwarderRegistry":[645]},"id":1765,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1719,"literals":["solidity","0.8",".17"],"nodeType":"PragmaDirective","src":"32:23:18"},{"absolutePath":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol","file":"../../merkleClaim/AnichessERC1155MerkleClaim.sol","id":1721,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1765,"sourceUnit":1718,"src":"57:92:18","symbolAliases":[{"foreign":{"id":1720,"name":"AnichessERC1155MerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1717,"src":"65:26:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol","id":1723,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1765,"sourceUnit":744,"src":"150:117:18","symbolAliases":[{"foreign":{"id":1722,"name":"IERC1155Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":743,"src":"158:16:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1725,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1765,"sourceUnit":646,"src":"268:114:18","symbolAliases":[{"foreign":{"id":1724,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"276:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1726,"name":"AnichessERC1155MerkleClaim","nameLocations":["427:26:18"],"nodeType":"IdentifierPath","referencedDeclaration":1717,"src":"427:26:18"},"id":1727,"nodeType":"InheritanceSpecifier","src":"427:26:18"}],"canonicalName":"AnichessERC1155MerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1764,"linearizedBaseContracts":[1764,1717,32,338,350,82,105,765,499,631,619],"name":"AnichessERC1155MerkleClaimMock","nameLocation":"393:30:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":1743,"nodeType":"Block","src":"667:2:18","statements":[]},"id":1744,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1738,"name":"mintSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1729,"src":"620:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1739,"name":"rewardContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1732,"src":"632:14:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},{"id":1740,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1735,"src":"648:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}}],"id":1741,"kind":"baseConstructorSpecifier","modifierName":{"id":1737,"name":"AnichessERC1155MerkleClaim","nameLocations":["593:26:18"],"nodeType":"IdentifierPath","referencedDeclaration":1717,"src":"593:26:18"},"nodeType":"ModifierInvocation","src":"593:73:18"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1729,"mutability":"mutable","name":"mintSupply","nameLocation":"489:10:18","nodeType":"VariableDeclaration","scope":1744,"src":"481:18:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1728,"name":"uint256","nodeType":"ElementaryTypeName","src":"481:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1732,"mutability":"mutable","name":"rewardContract","nameLocation":"526:14:18","nodeType":"VariableDeclaration","scope":1744,"src":"509:31:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"},"typeName":{"id":1731,"nodeType":"UserDefinedTypeName","pathNode":{"id":1730,"name":"IERC1155Mintable","nameLocations":["509:16:18"],"nodeType":"IdentifierPath","referencedDeclaration":743,"src":"509:16:18"},"referencedDeclaration":743,"src":"509:16:18","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Mintable_$743","typeString":"contract IERC1155Mintable"}},"visibility":"internal"},{"constant":false,"id":1735,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"569:17:18","nodeType":"VariableDeclaration","scope":1744,"src":"550:36:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"},"typeName":{"id":1734,"nodeType":"UserDefinedTypeName","pathNode":{"id":1733,"name":"IForwarderRegistry","nameLocations":["550:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":645,"src":"550:18:18"},"referencedDeclaration":645,"src":"550:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$645","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"471:121:18"},"returnParameters":{"id":1742,"nodeType":"ParameterList","parameters":[],"src":"667:0:18"},"scope":1764,"src":"460:209:18","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1752,"nodeType":"Block","src":"730:36:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1749,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1504],"referencedDeclaration":1504,"src":"747:10:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"747:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1748,"id":1751,"nodeType":"Return","src":"740:19:18"}]},"functionSelector":"d1a91ff2","id":1753,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"684:11:18","nodeType":"FunctionDefinition","parameters":{"id":1745,"nodeType":"ParameterList","parameters":[],"src":"695:2:18"},"returnParameters":{"id":1748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1747,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1753,"src":"721:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1746,"name":"address","nodeType":"ElementaryTypeName","src":"721:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"720:9:18"},"scope":1764,"src":"675:91:18","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1762,"nodeType":"Block","src":"942:34:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1759,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[1518],"referencedDeclaration":1518,"src":"959:8:18","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"959:10:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1758,"id":1761,"nodeType":"Return","src":"952:17:18"}]},"documentation":{"id":1754,"nodeType":"StructuredDocumentation","src":"772:105:18","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":1763,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"891:9:18","nodeType":"FunctionDefinition","parameters":{"id":1755,"nodeType":"ParameterList","parameters":[],"src":"900:2:18"},"returnParameters":{"id":1758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1763,"src":"926:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1756,"name":"bytes","nodeType":"ElementaryTypeName","src":"926:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"925:16:18"},"scope":1764,"src":"882:94:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1765,"src":"384:594:18","usedErrors":[1421,1432,1439,1452,1457,1462]}],"src":"32:947:18"},"id":18}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036393bd92545ffd41abc8badede38803e381936f80890226d4d76019cc364c0c64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE CODECOPY EXTCODESIZE 0xD9 0x25 GASLIMIT SELFDESTRUCT 0xD4 BYTE 0xBC DUP12 0xAD 0xED 0xE3 DUP9 SUB 0xE3 DUP2 SWAP4 PUSH16 0x80890226D4D76019CC364C0C64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;301:3582:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122036393bd92545ffd41abc8badede38803e381936f80890226d4d76019cc364c0c64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE CODECOPY EXTCODESIZE 0xD9 0x25 GASLIMIT SELFDESTRUCT 0xD4 BYTE 0xBC DUP12 0xAD 0xED 0xE3 DUP9 SUB 0xE3 DUP2 SWAP4 PUSH16 0x80890226D4D76019CC364C0C64736F6C PUSH4 0x43000811 STOP CALLER ","sourceMap":"301:3582:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ee28cc8d921d3b2f377862cd713a6fd5007c16ee013e6ff173785f011447eeb64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xE28CC8D921D3B2F377862CD713A6FD5007C16EE013E6FF173785F011447EEB PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;111:1678:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207ee28cc8d921d3b2f377862cd713a6fd5007c16ee013e6ff173785f011447eeb64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0xE28CC8D921D3B2F377862CD713A6FD5007C16EE013E6FF173785F011447EEB PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"111:1678:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;201:568:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbd7b2882eff82d3e06d4c27857e3b2256fa2e542a2347aedabb422a54d6481564736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCB 0xD7 0xB2 DUP9 0x2E SELFDESTRUCT DUP3 0xD3 0xE0 PUSH14 0x4C27857E3B2256FA2E542A2347AE 0xDA 0xBB TIMESTAMP 0x2A SLOAD 0xD6 BASEFEE ISZERO PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"201:568:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;225:593:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fc94e7a6a3360beeb1586f37beebb947c6d4d1325d736e78773bc4b68bcd18bf64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xFC SWAP5 0xE7 0xA6 LOG3 CALLDATASIZE SIGNEXTEND 0xEE 0xB1 PC PUSH16 0x37BEEBB947C6D4D1325D736E78773BC4 0xB6 DUP12 0xCD XOR 0xBF PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"225:593:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol":{"IERC1155Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.","kind":"dev","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","ids":"Identifiers of the tokens to mint.","to":"Address of the new tokens owner.","values":"Amounts of tokens to mint."}},"safeMint(address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","id":"Identifier of the token to mint.","to":"Address of the new token owner.","value":"Amount of token to mint."}}},"title":"ERC1155 Multi Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeBatchMint(address,uint256[],uint256[],bytes)":"0d6a5bbb","safeMint(address,uint256,uint256,bytes)":"5cfa9297"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x5190c92c.\",\"kind\":\"dev\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if `to` is the zero address.Reverts if `to`'s balance overflows for one of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"ids\":\"Identifiers of the tokens to mint.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to mint.\"}},\"safeMint(address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `to`'s balance of `id` overflows.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"id\":\"Identifier of the token to mint.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to mint.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeBatchMint(address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely mints a batch of tokens.\"},\"safeMint(address,uint256,uint256,bytes)\":{\"notice\":\"Safely mints some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":\"IERC1155Mintable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeBatchMint(address,uint256[],uint256[],bytes)":{"notice":"Safely mints a batch of tokens."},"safeMint(address,uint256,uint256,bytes)":{"notice":"Safely mints some token."}},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122048943d89a9c380877cdb36f19933d9e717f8366d34dba98db8ca933cdf1e291064736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BASEFEE SWAP5 RETURNDATASIZE DUP10 0xA9 0xC3 DUP1 DUP8 PUSH29 0xDB36F19933D9E717F8366D34DBA98DB8CA933CDF1E291064736F6C6343 STOP ADDMOD GT STOP CALLER ","sourceMap":"1279:1391:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ec6649971ce3718d4f59d6147829ed57ee8f2a3ae6f1da99928cad2ee2a0def64736f6c63430008110033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xC6 PUSH5 0x9971CE3718 0xD4 CREATE2 SWAP14 PUSH2 0x4782 SWAP15 0xD5 PUSH31 0xE8F2A3AE6F1DA99928CAD2EE2A0DEF64736F6C634300081100330000000000 ","sourceMap":"802:8493:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208ec6649971ce3718d4f59d6147829ed57ee8f2a3ae6f1da99928cad2ee2a0def64736f6c63430008110033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP15 0xC6 PUSH5 0x9971CE3718 0xD4 CREATE2 SWAP14 PUSH2 0x4782 SWAP15 0xD5 PUSH31 0xE8F2A3AE6F1DA99928CAD2EE2A0DEF64736F6C634300081100330000000000 ","sourceMap":"802:8493:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol":{"AnichessERC1155MerkleClaim":{"abi":[{"inputs":[{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"totalClaimed","type":"uint256"}],"name":"ExceededMintSupply","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.","kind":"dev","methods":{"claim(bytes32,bytes32[],address,uint256,uint256)":{"details":"Reverts if the epoch ID does not existReverts if the claim window is closed or has not yet opened.Reverts if the proof provided for the claim is invalid.Reverts if the payout has already been claimed.Reverts if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","id":"The ID of the token to claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout.","value":"The value of the token to claim."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract.","mintSupply":"The total number of tokens that can be minted in this contract.","rewardContract":"The ERC1155Mintable reward contract."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.     ","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess ERC1155 Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1490":{"entryPoint":null,"id":1490,"parameterSlots":3,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_472":{"entryPoint":null,"id":472,"parameterSlots":1,"returnSlots":0},"@_520":{"entryPoint":null,"id":520,"parameterSlots":1,"returnSlots":0},"@constructorInit_200":{"entryPoint":193,"id":200,"parameterSlots":2,"returnSlots":0},"@layout_306":{"entryPoint":139,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":340,"id":448,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_402":{"entryPoint":388,"id":402,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory":{"entryPoint":557,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":629,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":532,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1292:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"77:86:19","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:19"},"nodeType":"YulFunctionCall","src":"143:12:19"},"nodeType":"YulExpressionStatement","src":"143:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"126:3:19","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"131:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"122:3:19"},"nodeType":"YulFunctionCall","src":"122:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:19"},"nodeType":"YulFunctionCall","src":"118:19:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"107:3:19"},"nodeType":"YulFunctionCall","src":"107:31:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"97:2:19"},"nodeType":"YulFunctionCall","src":"97:42:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"90:6:19"},"nodeType":"YulFunctionCall","src":"90:50:19"},"nodeType":"YulIf","src":"87:70:19"}]},"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"66:5:19","type":""}],"src":"14:149:19"},{"body":{"nodeType":"YulBlock","src":"333:367:19","statements":[{"body":{"nodeType":"YulBlock","src":"379:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"388:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"391:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"381:6:19"},"nodeType":"YulFunctionCall","src":"381:12:19"},"nodeType":"YulExpressionStatement","src":"381:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"354:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"363:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"350:3:19"},"nodeType":"YulFunctionCall","src":"350:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"346:3:19"},"nodeType":"YulFunctionCall","src":"346:32:19"},"nodeType":"YulIf","src":"343:52:19"},{"nodeType":"YulAssignment","src":"404:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"420:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"414:5:19"},"nodeType":"YulFunctionCall","src":"414:16:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"404:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"439:38:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"473:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:19"},"nodeType":"YulFunctionCall","src":"458:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"452:5:19"},"nodeType":"YulFunctionCall","src":"452:25:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"443:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"529:5:19"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"486:42:19"},"nodeType":"YulFunctionCall","src":"486:49:19"},"nodeType":"YulExpressionStatement","src":"486:49:19"},{"nodeType":"YulAssignment","src":"544:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"554:5:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"544:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"568:40:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:19"},"nodeType":"YulFunctionCall","src":"589:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"583:5:19"},"nodeType":"YulFunctionCall","src":"583:25:19"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"572:7:19","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"660:7:19"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"617:42:19"},"nodeType":"YulFunctionCall","src":"617:51:19"},"nodeType":"YulExpressionStatement","src":"617:51:19"},{"nodeType":"YulAssignment","src":"677:17:19","value":{"name":"value_1","nodeType":"YulIdentifier","src":"687:7:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"677:6:19"}]}]},"name":"abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"283:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"294:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"306:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"314:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"322:6:19","type":""}],"src":"168:532:19"},{"body":{"nodeType":"YulBlock","src":"754:176:19","statements":[{"nodeType":"YulAssignment","src":"764:17:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"776:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"779:1:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"772:3:19"},"nodeType":"YulFunctionCall","src":"772:9:19"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"764:4:19"}]},{"body":{"nodeType":"YulBlock","src":"813:111:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"834:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"841:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"846:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"837:3:19"},"nodeType":"YulFunctionCall","src":"837:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"827:6:19"},"nodeType":"YulFunctionCall","src":"827:31:19"},"nodeType":"YulExpressionStatement","src":"827:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"878:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"881:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"871:6:19"},"nodeType":"YulFunctionCall","src":"871:15:19"},"nodeType":"YulExpressionStatement","src":"871:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"906:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"909:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"899:6:19"},"nodeType":"YulFunctionCall","src":"899:15:19"},"nodeType":"YulExpressionStatement","src":"899:15:19"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"796:4:19"},{"name":"x","nodeType":"YulIdentifier","src":"802:1:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"793:2:19"},"nodeType":"YulFunctionCall","src":"793:11:19"},"nodeType":"YulIf","src":"790:134:19"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"736:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"739:1:19","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"745:4:19","type":""}],"src":"705:225:19"},{"body":{"nodeType":"YulBlock","src":"1109:181:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1126:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1119:6:19"},"nodeType":"YulFunctionCall","src":"1119:21:19"},"nodeType":"YulExpressionStatement","src":"1119:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1160:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1171:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1156:3:19"},"nodeType":"YulFunctionCall","src":"1156:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"1176:2:19","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1149:6:19"},"nodeType":"YulFunctionCall","src":"1149:30:19"},"nodeType":"YulExpressionStatement","src":"1149:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1199:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1210:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1195:3:19"},"nodeType":"YulFunctionCall","src":"1195:18:19"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"1215:33:19","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1188:6:19"},"nodeType":"YulFunctionCall","src":"1188:61:19"},"nodeType":"YulExpressionStatement","src":"1188:61:19"},{"nodeType":"YulAssignment","src":"1258:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1281:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1266:3:19"},"nodeType":"YulFunctionCall","src":"1266:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1258:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1086:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1100:4:19","type":""}],"src":"935:355:19"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_contract_IERC1155Mintable(value)\n        value1 := value\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value2 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1431 CODESIZE SUB DUP1 PUSH3 0x1431 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x22D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x71 DUP2 PUSH3 0x5D PUSH3 0x8B PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x827 OR SWAP1 SHR JUMP JUMPDEST PUSH3 0xC1 PUSH1 0x20 SHL PUSH3 0x855 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE PUSH3 0x297 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xBB PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x275 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x118 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x150 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x13B PUSH3 0x154 PUSH1 0x20 SHL PUSH3 0x916 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x184 PUSH1 0x20 SHL PUSH3 0x944 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xBB PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x275 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1E6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH3 0x257 DUP2 PUSH3 0x214 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x26A DUP2 PUSH3 0x214 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xBB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x1147 PUSH3 0x2EA PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F1 ADD MSTORE PUSH2 0x5D1 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x162 ADD MSTORE PUSH2 0x718 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x118 ADD MSTORE DUP2 DUP2 PUSH2 0x1A7 ADD MSTORE DUP2 DUP2 PUSH2 0xD3D ADD MSTORE PUSH2 0xDC5 ADD MSTORE PUSH2 0x1147 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xF02 JUMP JUMPDEST PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x138 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xF5D JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH2 0xEC PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xFFF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x138 PUSH2 0x7DD JUMP JUMPDEST PUSH2 0x213 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x213 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFFF JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BD DUP3 PUSH2 0x2B7 PUSH2 0x916 JUMP JUMPDEST SWAP1 PUSH2 0xA50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DC PUSH2 0x2CE PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x827 JUMP JUMPDEST SWAP1 PUSH2 0xB34 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x32A JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x321 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x408 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x448 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4F3 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xBB7 SWAP1 POP JUMP JUMPDEST PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCB4DA94600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5CC JUMPI PUSH1 0x40 MLOAD PUSH32 0xC5AC808B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH32 0x0 PUSH2 0x5FA DUP6 DUP4 PUSH2 0x1062 JUMP JUMPDEST GT ISZERO PUSH2 0x673 JUMPI DUP9 DUP7 DUP7 DUP7 PUSH2 0x60E DUP2 DUP7 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6073F61200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x321 JUMP JUMPDEST PUSH2 0x67D DUP5 DUP3 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP3 POP DUP12 SWAP2 POP PUSH32 0x3B7A2657CB0A2501536D45AEB61AD8088337C70086BA7D3B078CF6592597C3C9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x804 PUSH2 0x7EA PUSH2 0x827 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x824 PUSH2 0x814 PUSH2 0xB2A JUMP JUMPDEST DUP3 PUSH2 0x81D PUSH2 0x827 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1075 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x8DD JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x912 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x90B PUSH2 0x916 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x944 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1075 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAA0 JUMPI POP PUSH1 0x0 PUSH2 0x2BD JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAF1 JUMPI POP PUSH1 0x1 PUSH2 0x2BD JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x804 PUSH2 0xCFA JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x912 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC4 DUP6 DUP5 PUSH2 0xE41 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCF4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD0A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD14 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE30 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE30 SWAP2 SWAP1 PUSH2 0x1088 JUMP JUMPDEST ISZERO PUSH2 0xE3A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE86 JUMPI PUSH2 0xE72 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE65 JUMPI PUSH2 0xE65 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xE7E DUP2 PUSH2 0x10D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE46 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEAA JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP POP POP PUSH2 0xFE5 PUSH1 0x40 DUP9 ADD PUSH2 0xF34 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB9 DUP3 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x102C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x1033 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x110A JUMPI PUSH2 0x110A PUSH2 0x1033 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF ADDMOD 0x4F DUP1 0xD4 PUSH8 0x2AA1F2F33EB88935 LOG1 0xCF 0xB6 SWAP4 0xB1 DUP5 SWAP3 0xA6 0x4F 0xC1 SWAP1 PUSH27 0xD763969997BA64736F6C6343000811003300000000000000000000 ","sourceMap":"1163:6027:17:-:0;;;3599:290;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:8;;;;3794:10:17;1007:63:0;3794:10:17;1007:33:0;:31;;;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;-1:-1:-1;;3816:24:17::2;::::0;;;;-1:-1:-1;;;;;3850:32:17::2;;::::0;1163:6027;;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:89;;;;;:::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;1137:2:19;774:79:6;;;1119:21:19;1176:2;1156:18;;;1149:30;1215:33;1195:18;;;1188:61;1266:18;;774:79:6;;;;;;;;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;14:149:19:-;-1:-1:-1;;;;;107:31:19;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:532::-;306:6;314;322;375:2;363:9;354:7;350:23;346:32;343:52;;;391:1;388;381:12;343:52;420:9;414:16;404:26;;473:2;462:9;458:18;452:25;486:49;529:5;486:49;:::i;:::-;604:2;589:18;;583:25;554:5;;-1:-1:-1;617:51:19;583:25;617:51;:::i;:::-;687:7;677:17;;;168:532;;;;;:::o;705:225::-;772:9;;;793:11;;;790:134;;;846:10;841:3;837:20;834:1;827:31;881:4;878:1;871:15;909:4;906:1;899:15;935:355;1163:6027:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_1372":{"entryPoint":null,"id":1372,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_1369":{"entryPoint":null,"id":1369,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1326":{"entryPoint":null,"id":1326,"parameterSlots":2,"returnSlots":1},"@_hashPair_1315":{"entryPoint":3726,"id":1315,"parameterSlots":2,"returnSlots":1},"@_msgSender_1504":{"entryPoint":2858,"id":1504,"parameterSlots":0,"returnSlots":1},"@_msgSender_570":{"entryPoint":3322,"id":570,"parameterSlots":0,"returnSlots":1},"@claimStatus_1386":{"entryPoint":null,"id":1386,"parameterSlots":0,"returnSlots":0},"@claimWindows_1381":{"entryPoint":null,"id":1381,"parameterSlots":0,"returnSlots":0},"@claim_1716":{"entryPoint":938,"id":1716,"parameterSlots":6,"returnSlots":0},"@constructorInit_200":{"entryPoint":2133,"id":200,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":2868,"id":294,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_481":{"entryPoint":null,"id":481,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_498":{"entryPoint":null,"id":498,"parameterSlots":1,"returnSlots":1},"@layout_306":{"entryPoint":2087,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":2326,"id":448,"parameterSlots":0,"returnSlots":1},"@msgSender_656":{"entryPoint":null,"id":656,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_1375":{"entryPoint":null,"id":1375,"parameterSlots":0,"returnSlots":0},"@owner_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":1},"@owner_63":{"entryPoint":2013,"id":63,"parameterSlots":0,"returnSlots":1},"@processProof_910":{"entryPoint":3649,"id":910,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_1572":{"entryPoint":707,"id":1572,"parameterSlots":4,"returnSlots":0},"@setSupportedInterface_402":{"entryPoint":2372,"id":402,"parameterSlots":3,"returnSlots":0},"@supportsInterface_337":{"entryPoint":681,"id":337,"parameterSlots":1,"returnSlots":1},"@supportsInterface_436":{"entryPoint":2640,"id":436,"parameterSlots":2,"returnSlots":1},"@transferOwnership_263":{"entryPoint":3021,"id":263,"parameterSlots":3,"returnSlots":0},"@transferOwnership_81":{"entryPoint":2057,"id":81,"parameterSlots":1,"returnSlots":0},"@verify_849":{"entryPoint":2999,"id":849,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":3892,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4095,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4232,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4122,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256":{"entryPoint":3933,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3842,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3776,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":4194,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4213,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":4313,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4147,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4266,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8492:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:19","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:19"},"nodeType":"YulFunctionCall","src":"131:12:19"},"nodeType":"YulExpressionStatement","src":"131:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:19"},"nodeType":"YulFunctionCall","src":"100:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:19"},"nodeType":"YulFunctionCall","src":"96:32:19"},"nodeType":"YulIf","src":"93:52:19"},{"nodeType":"YulVariableDeclaration","src":"154:36:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:19"},"nodeType":"YulFunctionCall","src":"167:23:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:19"},"nodeType":"YulFunctionCall","src":"302:12:19"},"nodeType":"YulExpressionStatement","src":"302:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:19","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:19"},"nodeType":"YulFunctionCall","src":"219:78:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:19"},"nodeType":"YulFunctionCall","src":"209:89:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:19"},"nodeType":"YulFunctionCall","src":"202:97:19"},"nodeType":"YulIf","src":"199:117:19"},{"nodeType":"YulAssignment","src":"325:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:19","type":""}],"src":"14:332:19"},{"body":{"nodeType":"YulBlock","src":"446:92:19","statements":[{"nodeType":"YulAssignment","src":"456:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:19"},"nodeType":"YulFunctionCall","src":"464:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:19"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:19"},"nodeType":"YulFunctionCall","src":"516:14:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:19"},"nodeType":"YulFunctionCall","src":"509:22:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:19"},"nodeType":"YulFunctionCall","src":"491:41:19"},"nodeType":"YulExpressionStatement","src":"491:41:19"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:19","type":""}],"src":"351:187:19"},{"body":{"nodeType":"YulBlock","src":"664:264:19","statements":[{"body":{"nodeType":"YulBlock","src":"711:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"720:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"723:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"713:6:19"},"nodeType":"YulFunctionCall","src":"713:12:19"},"nodeType":"YulExpressionStatement","src":"713:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"685:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"694:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"681:3:19"},"nodeType":"YulFunctionCall","src":"681:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"706:3:19","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"677:3:19"},"nodeType":"YulFunctionCall","src":"677:33:19"},"nodeType":"YulIf","src":"674:53:19"},{"nodeType":"YulAssignment","src":"736:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"759:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"746:12:19"},"nodeType":"YulFunctionCall","src":"746:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"736:6:19"}]},{"nodeType":"YulAssignment","src":"778:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"816:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"801:3:19"},"nodeType":"YulFunctionCall","src":"801:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"788:12:19"},"nodeType":"YulFunctionCall","src":"788:32:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"778:6:19"}]},{"nodeType":"YulAssignment","src":"829:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"856:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"867:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"852:3:19"},"nodeType":"YulFunctionCall","src":"852:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"839:12:19"},"nodeType":"YulFunctionCall","src":"839:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"829:6:19"}]},{"nodeType":"YulAssignment","src":"880:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"907:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"918:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:19"},"nodeType":"YulFunctionCall","src":"903:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"890:12:19"},"nodeType":"YulFunctionCall","src":"890:32:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"880:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"606:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"617:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"629:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"637:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"645:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"653:6:19","type":""}],"src":"543:385:19"},{"body":{"nodeType":"YulBlock","src":"1060:125:19","statements":[{"nodeType":"YulAssignment","src":"1070:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1082:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1093:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1078:3:19"},"nodeType":"YulFunctionCall","src":"1078:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1070:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1112:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1127:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1135:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1123:3:19"},"nodeType":"YulFunctionCall","src":"1123:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1105:6:19"},"nodeType":"YulFunctionCall","src":"1105:74:19"},"nodeType":"YulExpressionStatement","src":"1105:74:19"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1029:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1040:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1051:4:19","type":""}],"src":"933:252:19"},{"body":{"nodeType":"YulBlock","src":"1315:125:19","statements":[{"nodeType":"YulAssignment","src":"1325:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1337:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1348:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1333:3:19"},"nodeType":"YulFunctionCall","src":"1333:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1325:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1367:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1382:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1390:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1378:3:19"},"nodeType":"YulFunctionCall","src":"1378:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1360:6:19"},"nodeType":"YulFunctionCall","src":"1360:74:19"},"nodeType":"YulExpressionStatement","src":"1360:74:19"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1284:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1295:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1306:4:19","type":""}],"src":"1190:250:19"},{"body":{"nodeType":"YulBlock","src":"1494:147:19","statements":[{"nodeType":"YulAssignment","src":"1504:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1526:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1513:12:19"},"nodeType":"YulFunctionCall","src":"1513:20:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1504:5:19"}]},{"body":{"nodeType":"YulBlock","src":"1619:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1628:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1631:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1621:6:19"},"nodeType":"YulFunctionCall","src":"1621:12:19"},"nodeType":"YulExpressionStatement","src":"1621:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1555:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1566:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"1573:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1562:3:19"},"nodeType":"YulFunctionCall","src":"1562:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1552:2:19"},"nodeType":"YulFunctionCall","src":"1552:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1545:6:19"},"nodeType":"YulFunctionCall","src":"1545:73:19"},"nodeType":"YulIf","src":"1542:93:19"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1473:6:19","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1484:5:19","type":""}],"src":"1445:196:19"},{"body":{"nodeType":"YulBlock","src":"1819:722:19","statements":[{"body":{"nodeType":"YulBlock","src":"1866:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1875:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1878:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1868:6:19"},"nodeType":"YulFunctionCall","src":"1868:12:19"},"nodeType":"YulExpressionStatement","src":"1868:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1840:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"1849:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1836:3:19"},"nodeType":"YulFunctionCall","src":"1836:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"1861:3:19","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1832:3:19"},"nodeType":"YulFunctionCall","src":"1832:33:19"},"nodeType":"YulIf","src":"1829:53:19"},{"nodeType":"YulAssignment","src":"1891:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1914:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1901:12:19"},"nodeType":"YulFunctionCall","src":"1901:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1891:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"1933:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1964:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1975:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:19"},"nodeType":"YulFunctionCall","src":"1960:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1947:12:19"},"nodeType":"YulFunctionCall","src":"1947:32:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1937:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1988:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"1998:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1992:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2043:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2052:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2055:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2045:6:19"},"nodeType":"YulFunctionCall","src":"2045:12:19"},"nodeType":"YulExpressionStatement","src":"2045:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2031:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2039:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2028:2:19"},"nodeType":"YulFunctionCall","src":"2028:14:19"},"nodeType":"YulIf","src":"2025:34:19"},{"nodeType":"YulVariableDeclaration","src":"2068:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2082:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"2093:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2078:3:19"},"nodeType":"YulFunctionCall","src":"2078:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2072:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2148:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2157:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2160:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2150:6:19"},"nodeType":"YulFunctionCall","src":"2150:12:19"},"nodeType":"YulExpressionStatement","src":"2150:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2127:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2131:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:19"},"nodeType":"YulFunctionCall","src":"2123:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2138:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2119:3:19"},"nodeType":"YulFunctionCall","src":"2119:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2112:6:19"},"nodeType":"YulFunctionCall","src":"2112:35:19"},"nodeType":"YulIf","src":"2109:55:19"},{"nodeType":"YulVariableDeclaration","src":"2173:30:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2200:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2187:12:19"},"nodeType":"YulFunctionCall","src":"2187:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2177:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2230:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2239:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2242:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2232:6:19"},"nodeType":"YulFunctionCall","src":"2232:12:19"},"nodeType":"YulExpressionStatement","src":"2232:12:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2218:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2226:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2215:2:19"},"nodeType":"YulFunctionCall","src":"2215:14:19"},"nodeType":"YulIf","src":"2212:34:19"},{"body":{"nodeType":"YulBlock","src":"2304:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2313:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2316:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2306:6:19"},"nodeType":"YulFunctionCall","src":"2306:12:19"},"nodeType":"YulExpressionStatement","src":"2306:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2269:2:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2277:1:19","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2280:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2273:3:19"},"nodeType":"YulFunctionCall","src":"2273:14:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2265:3:19"},"nodeType":"YulFunctionCall","src":"2265:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2290:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2261:3:19"},"nodeType":"YulFunctionCall","src":"2261:32:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2295:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2258:2:19"},"nodeType":"YulFunctionCall","src":"2258:45:19"},"nodeType":"YulIf","src":"2255:65:19"},{"nodeType":"YulAssignment","src":"2329:21:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2343:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2339:3:19"},"nodeType":"YulFunctionCall","src":"2339:11:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2329:6:19"}]},{"nodeType":"YulAssignment","src":"2359:16:19","value":{"name":"length","nodeType":"YulIdentifier","src":"2369:6:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2359:6:19"}]},{"nodeType":"YulAssignment","src":"2384:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2417:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2428:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:19"},"nodeType":"YulFunctionCall","src":"2413:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2394:18:19"},"nodeType":"YulFunctionCall","src":"2394:38:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2384:6:19"}]},{"nodeType":"YulAssignment","src":"2441:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2468:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2479:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2464:3:19"},"nodeType":"YulFunctionCall","src":"2464:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2451:12:19"},"nodeType":"YulFunctionCall","src":"2451:32:19"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2441:6:19"}]},{"nodeType":"YulAssignment","src":"2492:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2519:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2530:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2515:3:19"},"nodeType":"YulFunctionCall","src":"2515:19:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2502:12:19"},"nodeType":"YulFunctionCall","src":"2502:33:19"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2492:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1745:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1756:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1768:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1776:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1784:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1792:6:19","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1800:6:19","type":""},{"name":"value5","nodeType":"YulTypedName","src":"1808:6:19","type":""}],"src":"1646:895:19"},{"body":{"nodeType":"YulBlock","src":"2616:116:19","statements":[{"body":{"nodeType":"YulBlock","src":"2662:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2671:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2674:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2664:6:19"},"nodeType":"YulFunctionCall","src":"2664:12:19"},"nodeType":"YulExpressionStatement","src":"2664:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2637:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2646:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2633:3:19"},"nodeType":"YulFunctionCall","src":"2633:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2658:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2629:3:19"},"nodeType":"YulFunctionCall","src":"2629:32:19"},"nodeType":"YulIf","src":"2626:52:19"},{"nodeType":"YulAssignment","src":"2687:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2697:18:19"},"nodeType":"YulFunctionCall","src":"2697:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2687:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2582:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2593:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2605:6:19","type":""}],"src":"2546:186:19"},{"body":{"nodeType":"YulBlock","src":"2838:125:19","statements":[{"nodeType":"YulAssignment","src":"2848:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2860:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2871:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2856:3:19"},"nodeType":"YulFunctionCall","src":"2856:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2848:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2890:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2905:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"2913:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2901:3:19"},"nodeType":"YulFunctionCall","src":"2901:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2883:6:19"},"nodeType":"YulFunctionCall","src":"2883:74:19"},"nodeType":"YulExpressionStatement","src":"2883:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2807:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2818:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2829:4:19","type":""}],"src":"2737:226:19"},{"body":{"nodeType":"YulBlock","src":"3069:76:19","statements":[{"nodeType":"YulAssignment","src":"3079:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3091:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3102:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3087:3:19"},"nodeType":"YulFunctionCall","src":"3087:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3079:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3121:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3132:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3114:6:19"},"nodeType":"YulFunctionCall","src":"3114:25:19"},"nodeType":"YulExpressionStatement","src":"3114:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3038:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3049:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3060:4:19","type":""}],"src":"2968:177:19"},{"body":{"nodeType":"YulBlock","src":"3220:110:19","statements":[{"body":{"nodeType":"YulBlock","src":"3266:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3275:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3278:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3268:6:19"},"nodeType":"YulFunctionCall","src":"3268:12:19"},"nodeType":"YulExpressionStatement","src":"3268:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3241:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3250:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3237:3:19"},"nodeType":"YulFunctionCall","src":"3237:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3262:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3233:3:19"},"nodeType":"YulFunctionCall","src":"3233:32:19"},"nodeType":"YulIf","src":"3230:52:19"},{"nodeType":"YulAssignment","src":"3291:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3314:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3301:12:19"},"nodeType":"YulFunctionCall","src":"3301:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3291:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3186:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3197:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3209:6:19","type":""}],"src":"3150:180:19"},{"body":{"nodeType":"YulBlock","src":"3492:162:19","statements":[{"nodeType":"YulAssignment","src":"3502:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3514:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3525:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3510:3:19"},"nodeType":"YulFunctionCall","src":"3510:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3502:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3544:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3555:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3537:6:19"},"nodeType":"YulFunctionCall","src":"3537:25:19"},"nodeType":"YulExpressionStatement","src":"3537:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3582:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3593:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3578:3:19"},"nodeType":"YulFunctionCall","src":"3578:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"3598:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3571:6:19"},"nodeType":"YulFunctionCall","src":"3571:34:19"},"nodeType":"YulExpressionStatement","src":"3571:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3625:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3636:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3621:3:19"},"nodeType":"YulFunctionCall","src":"3621:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"3641:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3614:6:19"},"nodeType":"YulFunctionCall","src":"3614:34:19"},"nodeType":"YulExpressionStatement","src":"3614:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3445:9:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3456:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3464:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3472:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3483:4:19","type":""}],"src":"3335:319:19"},{"body":{"nodeType":"YulBlock","src":"3760:76:19","statements":[{"nodeType":"YulAssignment","src":"3770:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3782:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3793:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3778:3:19"},"nodeType":"YulFunctionCall","src":"3778:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3770:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3812:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3823:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3805:6:19"},"nodeType":"YulFunctionCall","src":"3805:25:19"},"nodeType":"YulExpressionStatement","src":"3805:25:19"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3729:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3740:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3751:4:19","type":""}],"src":"3659:177:19"},{"body":{"nodeType":"YulBlock","src":"3970:119:19","statements":[{"nodeType":"YulAssignment","src":"3980:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3992:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4003:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3988:3:19"},"nodeType":"YulFunctionCall","src":"3988:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3980:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4022:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4033:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4015:6:19"},"nodeType":"YulFunctionCall","src":"4015:25:19"},"nodeType":"YulExpressionStatement","src":"4015:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4060:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4071:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4056:3:19"},"nodeType":"YulFunctionCall","src":"4056:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4076:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4049:6:19"},"nodeType":"YulFunctionCall","src":"4049:34:19"},"nodeType":"YulExpressionStatement","src":"4049:34:19"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3931:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3942:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3950:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3961:4:19","type":""}],"src":"3841:248:19"},{"body":{"nodeType":"YulBlock","src":"4223:119:19","statements":[{"nodeType":"YulAssignment","src":"4233:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4245:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4256:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4241:3:19"},"nodeType":"YulFunctionCall","src":"4241:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4233:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4275:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4286:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4268:6:19"},"nodeType":"YulFunctionCall","src":"4268:25:19"},"nodeType":"YulExpressionStatement","src":"4268:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4313:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4324:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4309:3:19"},"nodeType":"YulFunctionCall","src":"4309:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4329:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4302:6:19"},"nodeType":"YulFunctionCall","src":"4302:34:19"},"nodeType":"YulExpressionStatement","src":"4302:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4184:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4195:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4203:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4214:4:19","type":""}],"src":"4094:248:19"},{"body":{"nodeType":"YulBlock","src":"4550:257:19","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4567:3:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4572:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4560:6:19"},"nodeType":"YulFunctionCall","src":"4560:19:19"},"nodeType":"YulExpressionStatement","src":"4560:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4599:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"4604:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4595:3:19"},"nodeType":"YulFunctionCall","src":"4595:12:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4617:2:19","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"4621:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4613:3:19"},"nodeType":"YulFunctionCall","src":"4613:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"4630:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4609:3:19"},"nodeType":"YulFunctionCall","src":"4609:88:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4588:6:19"},"nodeType":"YulFunctionCall","src":"4588:110:19"},"nodeType":"YulExpressionStatement","src":"4588:110:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4718:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"4723:2:19","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4714:3:19"},"nodeType":"YulFunctionCall","src":"4714:12:19"},{"name":"value2","nodeType":"YulIdentifier","src":"4728:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4707:6:19"},"nodeType":"YulFunctionCall","src":"4707:28:19"},"nodeType":"YulExpressionStatement","src":"4707:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4755:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"4760:2:19","type":"","value":"84"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4751:3:19"},"nodeType":"YulFunctionCall","src":"4751:12:19"},{"name":"value3","nodeType":"YulIdentifier","src":"4765:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4744:6:19"},"nodeType":"YulFunctionCall","src":"4744:28:19"},"nodeType":"YulExpressionStatement","src":"4744:28:19"},{"nodeType":"YulAssignment","src":"4781:20:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4792:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"4797:3:19","type":"","value":"116"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4788:3:19"},"nodeType":"YulFunctionCall","src":"4788:13:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4781:3:19"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4502:3:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4507:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4515:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4523:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4531:6:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4542:3:19","type":""}],"src":"4347:460:19"},{"body":{"nodeType":"YulBlock","src":"4997:255:19","statements":[{"nodeType":"YulAssignment","src":"5007:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5019:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5030:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5015:3:19"},"nodeType":"YulFunctionCall","src":"5015:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5007:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5050:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"5061:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5043:6:19"},"nodeType":"YulFunctionCall","src":"5043:25:19"},"nodeType":"YulExpressionStatement","src":"5043:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5088:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5099:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:19"},"nodeType":"YulFunctionCall","src":"5084:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5108:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5116:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5104:3:19"},"nodeType":"YulFunctionCall","src":"5104:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5077:6:19"},"nodeType":"YulFunctionCall","src":"5077:83:19"},"nodeType":"YulExpressionStatement","src":"5077:83:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5180:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5191:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5176:3:19"},"nodeType":"YulFunctionCall","src":"5176:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"5196:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5169:6:19"},"nodeType":"YulFunctionCall","src":"5169:34:19"},"nodeType":"YulExpressionStatement","src":"5169:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5223:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5234:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5219:3:19"},"nodeType":"YulFunctionCall","src":"5219:18:19"},{"name":"value3","nodeType":"YulIdentifier","src":"5239:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5212:6:19"},"nodeType":"YulFunctionCall","src":"5212:34:19"},"nodeType":"YulExpressionStatement","src":"5212:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4942:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4953:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4961:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4969:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4977:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4988:4:19","type":""}],"src":"4812:440:19"},{"body":{"nodeType":"YulBlock","src":"5289:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5306:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5309:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5299:6:19"},"nodeType":"YulFunctionCall","src":"5299:88:19"},"nodeType":"YulExpressionStatement","src":"5299:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5403:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5406:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5396:6:19"},"nodeType":"YulFunctionCall","src":"5396:15:19"},"nodeType":"YulExpressionStatement","src":"5396:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5427:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5430:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5420:6:19"},"nodeType":"YulFunctionCall","src":"5420:15:19"},"nodeType":"YulExpressionStatement","src":"5420:15:19"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5257:184:19"},{"body":{"nodeType":"YulBlock","src":"5494:77:19","statements":[{"nodeType":"YulAssignment","src":"5504:16:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5515:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"5518:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5511:3:19"},"nodeType":"YulFunctionCall","src":"5511:9:19"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5504:3:19"}]},{"body":{"nodeType":"YulBlock","src":"5543:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5545:16:19"},"nodeType":"YulFunctionCall","src":"5545:18:19"},"nodeType":"YulExpressionStatement","src":"5545:18:19"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5535:1:19"},{"name":"sum","nodeType":"YulIdentifier","src":"5538:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5532:2:19"},"nodeType":"YulFunctionCall","src":"5532:10:19"},"nodeType":"YulIf","src":"5529:36:19"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5477:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"5480:1:19","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5486:3:19","type":""}],"src":"5446:125:19"},{"body":{"nodeType":"YulBlock","src":"5789:299:19","statements":[{"nodeType":"YulAssignment","src":"5799:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5811:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5822:3:19","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5807:3:19"},"nodeType":"YulFunctionCall","src":"5807:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5799:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5842:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"5853:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5835:6:19"},"nodeType":"YulFunctionCall","src":"5835:25:19"},"nodeType":"YulExpressionStatement","src":"5835:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5880:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5891:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5876:3:19"},"nodeType":"YulFunctionCall","src":"5876:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5900:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5908:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5896:3:19"},"nodeType":"YulFunctionCall","src":"5896:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5869:6:19"},"nodeType":"YulFunctionCall","src":"5869:83:19"},"nodeType":"YulExpressionStatement","src":"5869:83:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5972:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5983:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5968:3:19"},"nodeType":"YulFunctionCall","src":"5968:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"5988:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5961:6:19"},"nodeType":"YulFunctionCall","src":"5961:34:19"},"nodeType":"YulExpressionStatement","src":"5961:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6015:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6026:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6011:3:19"},"nodeType":"YulFunctionCall","src":"6011:18:19"},{"name":"value3","nodeType":"YulIdentifier","src":"6031:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6004:6:19"},"nodeType":"YulFunctionCall","src":"6004:34:19"},"nodeType":"YulExpressionStatement","src":"6004:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6058:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6069:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6054:3:19"},"nodeType":"YulFunctionCall","src":"6054:19:19"},{"name":"value4","nodeType":"YulIdentifier","src":"6075:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6047:6:19"},"nodeType":"YulFunctionCall","src":"6047:35:19"},"nodeType":"YulExpressionStatement","src":"6047:35:19"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5726:9:19","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5737:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5745:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5753:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5761:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5769:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5780:4:19","type":""}],"src":"5576:512:19"},{"body":{"nodeType":"YulBlock","src":"6350:291:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6367:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6382:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"6390:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6378:3:19"},"nodeType":"YulFunctionCall","src":"6378:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6360:6:19"},"nodeType":"YulFunctionCall","src":"6360:74:19"},"nodeType":"YulExpressionStatement","src":"6360:74:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6454:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6465:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6450:3:19"},"nodeType":"YulFunctionCall","src":"6450:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"6470:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6443:6:19"},"nodeType":"YulFunctionCall","src":"6443:34:19"},"nodeType":"YulExpressionStatement","src":"6443:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6497:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6508:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6493:3:19"},"nodeType":"YulFunctionCall","src":"6493:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"6513:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6486:6:19"},"nodeType":"YulFunctionCall","src":"6486:34:19"},"nodeType":"YulExpressionStatement","src":"6486:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6540:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6551:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6536:3:19"},"nodeType":"YulFunctionCall","src":"6536:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"6556:3:19","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6529:6:19"},"nodeType":"YulFunctionCall","src":"6529:31:19"},"nodeType":"YulExpressionStatement","src":"6529:31:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6580:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6591:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6576:3:19"},"nodeType":"YulFunctionCall","src":"6576:19:19"},{"kind":"number","nodeType":"YulLiteral","src":"6597:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6569:6:19"},"nodeType":"YulFunctionCall","src":"6569:30:19"},"nodeType":"YulExpressionStatement","src":"6569:30:19"},{"nodeType":"YulAssignment","src":"6608:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6620:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6631:3:19","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6616:3:19"},"nodeType":"YulFunctionCall","src":"6616:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6608:4:19"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6303:9:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6314:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6322:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6330:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6341:4:19","type":""}],"src":"6093:548:19"},{"body":{"nodeType":"YulBlock","src":"6695:79:19","statements":[{"nodeType":"YulAssignment","src":"6705:17:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"6717:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"6720:1:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6713:3:19"},"nodeType":"YulFunctionCall","src":"6713:9:19"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"6705:4:19"}]},{"body":{"nodeType":"YulBlock","src":"6746:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"6748:16:19"},"nodeType":"YulFunctionCall","src":"6748:18:19"},"nodeType":"YulExpressionStatement","src":"6748:18:19"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"6737:4:19"},{"name":"x","nodeType":"YulIdentifier","src":"6743:1:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6734:2:19"},"nodeType":"YulFunctionCall","src":"6734:11:19"},"nodeType":"YulIf","src":"6731:37:19"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"6677:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"6680:1:19","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"6686:4:19","type":""}],"src":"6646:128:19"},{"body":{"nodeType":"YulBlock","src":"6953:181:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6970:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6981:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6963:6:19"},"nodeType":"YulFunctionCall","src":"6963:21:19"},"nodeType":"YulExpressionStatement","src":"6963:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7004:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7015:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7000:3:19"},"nodeType":"YulFunctionCall","src":"7000:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7020:2:19","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6993:6:19"},"nodeType":"YulFunctionCall","src":"6993:30:19"},"nodeType":"YulExpressionStatement","src":"6993:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7043:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7054:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7039:3:19"},"nodeType":"YulFunctionCall","src":"7039:18:19"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"7059:33:19","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7032:6:19"},"nodeType":"YulFunctionCall","src":"7032:61:19"},"nodeType":"YulExpressionStatement","src":"7032:61:19"},{"nodeType":"YulAssignment","src":"7102:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7114:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7125:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7110:3:19"},"nodeType":"YulFunctionCall","src":"7110:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7102:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6930:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6944:4:19","type":""}],"src":"6779:355:19"},{"body":{"nodeType":"YulBlock","src":"7313:174:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7330:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7341:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7323:6:19"},"nodeType":"YulFunctionCall","src":"7323:21:19"},"nodeType":"YulExpressionStatement","src":"7323:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7364:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7375:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7360:3:19"},"nodeType":"YulFunctionCall","src":"7360:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7380:2:19","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7353:6:19"},"nodeType":"YulFunctionCall","src":"7353:30:19"},"nodeType":"YulExpressionStatement","src":"7353:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7403:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7414:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7399:3:19"},"nodeType":"YulFunctionCall","src":"7399:18:19"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7419:26:19","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7392:6:19"},"nodeType":"YulFunctionCall","src":"7392:54:19"},"nodeType":"YulExpressionStatement","src":"7392:54:19"},{"nodeType":"YulAssignment","src":"7455:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7467:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7478:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7463:3:19"},"nodeType":"YulFunctionCall","src":"7463:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7455:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7290:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7304:4:19","type":""}],"src":"7139:348:19"},{"body":{"nodeType":"YulBlock","src":"7621:198:19","statements":[{"nodeType":"YulAssignment","src":"7631:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7643:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7654:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7639:3:19"},"nodeType":"YulFunctionCall","src":"7639:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7631:4:19"}]},{"nodeType":"YulVariableDeclaration","src":"7666:52:19","value":{"kind":"number","nodeType":"YulLiteral","src":"7676:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7670:2:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7734:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7749:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"7757:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7745:3:19"},"nodeType":"YulFunctionCall","src":"7745:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7727:6:19"},"nodeType":"YulFunctionCall","src":"7727:34:19"},"nodeType":"YulExpressionStatement","src":"7727:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7781:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7792:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7777:3:19"},"nodeType":"YulFunctionCall","src":"7777:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"7801:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"7809:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7797:3:19"},"nodeType":"YulFunctionCall","src":"7797:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7770:6:19"},"nodeType":"YulFunctionCall","src":"7770:43:19"},"nodeType":"YulExpressionStatement","src":"7770:43:19"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7582:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7593:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7601:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7612:4:19","type":""}],"src":"7492:327:19"},{"body":{"nodeType":"YulBlock","src":"7902:199:19","statements":[{"body":{"nodeType":"YulBlock","src":"7948:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7957:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7960:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7950:6:19"},"nodeType":"YulFunctionCall","src":"7950:12:19"},"nodeType":"YulExpressionStatement","src":"7950:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"7923:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"7932:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7919:3:19"},"nodeType":"YulFunctionCall","src":"7919:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"7944:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"7915:3:19"},"nodeType":"YulFunctionCall","src":"7915:32:19"},"nodeType":"YulIf","src":"7912:52:19"},{"nodeType":"YulVariableDeclaration","src":"7973:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7992:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7986:5:19"},"nodeType":"YulFunctionCall","src":"7986:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"7977:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"8055:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8064:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8067:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8057:6:19"},"nodeType":"YulFunctionCall","src":"8057:12:19"},"nodeType":"YulExpressionStatement","src":"8057:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8024:5:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8045:5:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8038:6:19"},"nodeType":"YulFunctionCall","src":"8038:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8031:6:19"},"nodeType":"YulFunctionCall","src":"8031:21:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8021:2:19"},"nodeType":"YulFunctionCall","src":"8021:32:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8014:6:19"},"nodeType":"YulFunctionCall","src":"8014:40:19"},"nodeType":"YulIf","src":"8011:60:19"},{"nodeType":"YulAssignment","src":"8080:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"8090:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8080:6:19"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7868:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"7879:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"7891:6:19","type":""}],"src":"7824:277:19"},{"body":{"nodeType":"YulBlock","src":"8138:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8155:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8158:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8148:6:19"},"nodeType":"YulFunctionCall","src":"8148:88:19"},"nodeType":"YulExpressionStatement","src":"8148:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8252:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8255:4:19","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8245:6:19"},"nodeType":"YulFunctionCall","src":"8245:15:19"},"nodeType":"YulExpressionStatement","src":"8245:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8276:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8279:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8269:6:19"},"nodeType":"YulFunctionCall","src":"8269:15:19"},"nodeType":"YulExpressionStatement","src":"8269:15:19"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8106:184:19"},{"body":{"nodeType":"YulBlock","src":"8342:148:19","statements":[{"body":{"nodeType":"YulBlock","src":"8433:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8435:16:19"},"nodeType":"YulFunctionCall","src":"8435:18:19"},"nodeType":"YulExpressionStatement","src":"8435:18:19"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8358:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"8365:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8355:2:19"},"nodeType":"YulFunctionCall","src":"8355:77:19"},"nodeType":"YulIf","src":"8352:103:19"},{"nodeType":"YulAssignment","src":"8464:20:19","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8475:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"8482:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8471:3:19"},"nodeType":"YulFunctionCall","src":"8471:13:19"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8464:3:19"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8324:5:19","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8334:3:19","type":""}],"src":"8295:195:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 52), value2)\n        mstore(add(pos, 84), value3)\n        end := add(pos, 116)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"509":[{"length":32,"start":280},{"length":32,"start":423},{"length":32,"start":3389},{"length":32,"start":3525}],"1369":[{"length":32,"start":354},{"length":32,"start":1816}],"1372":[{"length":32,"start":497},{"length":32,"start":1489}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xDC45DEF6 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x296 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x1EC JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x221 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3A5AF339 GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x116 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEC PUSH2 0xE7 CALLDATASIZE PUSH1 0x4 PUSH2 0xEC0 JUMP JUMPDEST PUSH2 0x2A9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x114 PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0xF02 JUMP JUMPDEST PUSH2 0x2C3 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x138 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x192 CALLDATASIZE PUSH1 0x4 PUSH2 0xF5D JUMP JUMPDEST PUSH2 0x3AA JUMP JUMPDEST PUSH2 0xEC PUSH2 0x1A5 CALLDATASIZE PUSH1 0x4 PUSH2 0xFFF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x138 PUSH2 0x7DD JUMP JUMPDEST PUSH2 0x213 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0x213 PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x258 PUSH2 0x238 CALLDATASIZE PUSH1 0x4 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0xF8 JUMP JUMPDEST PUSH2 0xEC PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x101A JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x114 PUSH2 0x2A4 CALLDATASIZE PUSH1 0x4 PUSH2 0xFFF JUMP JUMPDEST PUSH2 0x809 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BD DUP3 PUSH2 0x2B7 PUSH2 0x916 JUMP JUMPDEST SWAP1 PUSH2 0xA50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DC PUSH2 0x2CE PUSH2 0xB2A JUMP JUMPDEST PUSH2 0x2D6 PUSH2 0x827 JUMP JUMPDEST SWAP1 PUSH2 0xB34 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x32A JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x3F3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x321 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x408 JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x448 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x4F3 DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xBB7 SWAP1 POP JUMP JUMPDEST PUSH2 0x556 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCB4DA94600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5CC JUMPI PUSH1 0x40 MLOAD PUSH32 0xC5AC808B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH32 0x0 PUSH2 0x5FA DUP6 DUP4 PUSH2 0x1062 JUMP JUMPDEST GT ISZERO PUSH2 0x673 JUMPI DUP9 DUP7 DUP7 DUP7 PUSH2 0x60E DUP2 DUP7 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6073F61200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x321 JUMP JUMPDEST PUSH2 0x67D DUP5 DUP3 PUSH2 0x1062 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x75E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x772 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP3 POP DUP12 SWAP2 POP PUSH32 0x3B7A2657CB0A2501536D45AEB61AD8088337C70086BA7D3B078CF6592597C3C9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x804 PUSH2 0x7EA PUSH2 0x827 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x824 PUSH2 0x814 PUSH2 0xB2A JUMP JUMPDEST DUP3 PUSH2 0x81D PUSH2 0x827 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBCD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1075 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x8DD JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x912 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x90B PUSH2 0x916 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x944 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BD PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1075 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAA0 JUMPI POP PUSH1 0x0 PUSH2 0x2BD JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAF1 JUMPI POP PUSH1 0x1 PUSH2 0x2BD JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x804 PUSH2 0xCFA JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x912 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBC4 DUP6 DUP5 PUSH2 0xE41 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC52 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x321 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCF4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD0A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD14 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE30 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE0C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE30 SWAP2 SWAP1 PUSH2 0x1088 JUMP JUMPDEST ISZERO PUSH2 0xE3A JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE86 JUMPI PUSH2 0xE72 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xE65 JUMPI PUSH2 0xE65 PUSH2 0x10AA JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xE8E JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0xE7E DUP2 PUSH2 0x10D9 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xE46 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xEAA JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xEB9 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xED2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xF58 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xF76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xF95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFA9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFB8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xFCD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP POP POP PUSH2 0xFE5 PUSH1 0x40 DUP9 ADD PUSH2 0xF34 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1011 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEB9 DUP3 PUSH2 0xF34 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x102C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x1033 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2BD JUMPI PUSH2 0x2BD PUSH2 0x1033 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x109A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEB9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x110A JUMPI PUSH2 0x110A PUSH2 0x1033 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAF ADDMOD 0x4F DUP1 0xD4 PUSH8 0x2AA1F2F33EB88935 LOG1 0xCF 0xB6 SWAP4 0xB1 DUP5 SWAP3 0xA6 0x4F 0xC1 SWAP1 PUSH27 0xD763969997BA64736F6C6343000811003300000000000000000000 ","sourceMap":"1163:6027:17:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:4;;;;;;:::i;:::-;;:::i;:::-;;;516:14:19;;509:22;491:41;;479:2;464:18;541:174:4;;;;;;;;4844:473:17;;;;;;:::i;:::-;;:::i;:::-;;727:114:7;816:18;727:114;;;1135:42:19;1123:55;;;1105:74;;1093:2;1078:18;727:114:7;933:252:19;1568:49:17;;;;;5978:1210;;;;;;:::i;:::-;;:::i;876:157:7:-;;;;;;:::i;:::-;1007:18;986:40;;;;;;;;876:157;709:129:1;;;:::i;1704:36:17:-;;;;;;;;3114:25:19;;;3102:2;3087:18;1704:36:17;2968:177:19;1814:32:17;;;;;;1916:51;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3537:25:19;;;3593:2;3578:18;;3571:34;;;;3621:18;;;3614:34;3525:2;3510:18;1916:51:17;3335:319:19;2033:43:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;872:161:1;;;;;;:::i;:::-;;:::i;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:4:o;4844:473:17:-;4964:70;5021:12;:10;:12::i;:::-;4964:33;:31;:33::i;:::-;:56;;:70::i;:::-;5093:1;5049:21;;;:12;:21;;;;;:32;:46;5045:113;;5118:29;;;;;;;;3114:25:19;;;3087:18;;5118:29:17;;;;;;;;5045:113;5192:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5168:21:17;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5251:59;;4015:25:19;;;4056:18;;;4049:34;;;5192:43:17;;5168:21;;5251:59;;3988:18:19;5251:59:17;;;;;;;4844:473;;;;:::o;5978:1210::-;6101:31;6135:21;;;:12;:21;;;;;6170:22;;6166:99;;6229:25;;;;;;;;3114::19;;;3087:18;;6229:25:17;2968:177:19;6166:99:17;6296:11;:21;;;6278:15;:39;:80;;;;6339:11;:19;;;6321:15;:37;6278:80;6274:160;;;6381:42;;;;;;;;4015:25:19;;;6407:15:17;4056:18:19;;;4049:34;3988:18;;6381:42:17;3841:248:19;6274:160:17;6469:47;;;;;;4560:19:19;;;4630:66;4617:2;4613:15;;;4609:88;4595:12;;;4588:110;;;;4714:12;;;4707:28;;;4751:12;;;4744:28;;;6444:12:17;;4788:13:19;;6469:47:17;;;;;;;;;;;;6459:58;;;;;;6444:73;;6532:42;6545:11;:22;;;6569:4;6532:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6532:12:17;;:42;;-1:-1:-1;;6532:12:17;:42;-1:-1:-1;6532:42:17:i;:::-;6527:99;;6583:43;;;;;;;;5043:25:19;;;5116:42;5104:55;;5084:18;;;5077:83;5176:18;;;5169:34;;;5219:18;;;5212:34;;;5015:19;;6583:43:17;4812:440:19;6527:99:17;6641:17;;;;:11;:17;;;;;;;;6637:75;;;6667:45;;;;;;;;5043:25:19;;;5116:42;5104:55;;5084:18;;;5077:83;5176:18;;;5169:34;;;5219:18;;;5212:34;;;5015:19;;6667:45:17;4812:440:19;6637:75:17;6723:29;6755:17;6818:11;6786:29;6810:5;6755:17;6786:29;:::i;:::-;:43;6782:161;;;6871:7;6880:9;6891:2;6895:5;6902:29;6895:5;6902:21;:29;:::i;:::-;6852:80;;;;;;;;5835:25:19;;;;5908:42;5896:55;;;5876:18;;;5869:83;5968:18;;;5961:34;;;;6011:18;;;6004:34;6054:19;;;6047:35;5807:19;;6852:80:17;5576:512:19;6782:161:17;6973:29;6997:5;6973:21;:29;:::i;:::-;6953:17;:49;;;7012:17;;;:11;:17;;;;;;:24;;;;7032:4;7012:24;;;7047:50;;;;:24;6378:55:19;;;7047:50:17;;;6360:74:19;6450:18;;;6443:34;;;6493:18;;;6486:34;;;6556:3;6536:18;;;6529:31;6576:19;;;6569:30;;;;7047:15:17;:24;;;;;;6616:19:19;;7047:50:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7147:22:17;;7113:68;;;3537:25:19;;;3593:2;3578:18;;3571:34;;;3621:18;;3614:34;;;7113:68:17;;;;-1:-1:-1;7127:7:17;;-1:-1:-1;7113:68:17;;3525:2:19;3510:18;7113:68:17;;;;;;;6091:1097;;;5978:1210;;;;;;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;;;;3256:118;790:41:1;783:48;;709:129;:::o;872:161::-;951:75;1003:12;:10;:12::i;:::-;1017:8;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;1420:26;;;;1416:152;;1462:30;;;;;;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;782:35;797:20;782:35;;;774:79;;;;;;;6981:2:19;774:79:6;;;6963:21:19;7020:2;7000:18;;;6993:30;7059:33;7039:18;;;7032:61;7110:18;;774:79:6;6779:355:19;774:79:6;863:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;670:246::o;1267:340::-;1355:14;1385:35;1400:20;1385:35;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;1472:40;;;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;1566:34:6;;:21;:34;;;;;;;;;;;;;;;1267:340::o;3944:175:17:-;4045:7;4071:41;:39;:41::i;3540:161:3:-;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;7341:2:19;3631:63:3;;;7323:21:19;7380:2;7360:18;;;7353:30;7419:26;7399:18;;;7392:54;7463:18;;3631:63:3;7139:348:19;1156:184:16;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:16:o;2760:369:3:-;2882:15;;;;;;;2915:23;;;;2907:60;;;;;;;7341:2:19;2907:60:3;;;7323:21:19;7380:2;7360:18;;;7353:30;7419:26;7399:18;;;7392:54;7463:18;;2907:60:3;7139:348:19;2907:60:3;2998:8;2981:25;;:13;:25;;;2977:146;;3022:26;;;;;;;;;;;;;3067:45;;;;;;;;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;781:743:8:-;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:8;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:8;;781:743::o;1040:95::-;461:23:11;465:14;461:23;448:37;444:2;440:46;1369:18:8;1347:41;;:10;:41;;:103;;-1:-1:-1;1392:58:8;;;;;:38;7745:15:19;;;1392:58:8;;;7727:34:19;1439:10:8;7777:18:19;;;7770:43;1392:18:8;:38;;;;7639:18:19;;1392:58:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:8:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;1994:290:16:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:16;;;;:::i;:::-;;;;2133:116;;;-1:-1:-1;2265:12:16;1994:290;-1:-1:-1;;;1994:290:16:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:16:o;14:332:19:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:19;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:19;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:19;-1:-1:-1;543:385:19:o;1445:196::-;1513:20;;1573:42;1562:54;;1552:65;;1542:93;;1631:1;1628;1621:12;1542:93;1445:196;;;:::o;1646:895::-;1768:6;1776;1784;1792;1800;1808;1861:3;1849:9;1840:7;1836:23;1832:33;1829:53;;;1878:1;1875;1868:12;1829:53;1914:9;1901:23;1891:33;;1975:2;1964:9;1960:18;1947:32;1998:18;2039:2;2031:6;2028:14;2025:34;;;2055:1;2052;2045:12;2025:34;2093:6;2082:9;2078:22;2068:32;;2138:7;2131:4;2127:2;2123:13;2119:27;2109:55;;2160:1;2157;2150:12;2109:55;2200:2;2187:16;2226:2;2218:6;2215:14;2212:34;;;2242:1;2239;2232:12;2212:34;2295:7;2290:2;2280:6;2277:1;2273:14;2269:2;2265:23;2261:32;2258:45;2255:65;;;2316:1;2313;2306:12;2255:65;2347:2;2343;2339:11;2329:21;;2369:6;2359:16;;;;;2394:38;2428:2;2417:9;2413:18;2394:38;:::i;:::-;2384:48;;2479:2;2468:9;2464:18;2451:32;2441:42;;2530:3;2519:9;2515:19;2502:33;2492:43;;1646:895;;;;;;;;:::o;2546:186::-;2605:6;2658:2;2646:9;2637:7;2633:23;2629:32;2626:52;;;2674:1;2671;2664:12;2626:52;2697:29;2716:9;2697:29;:::i;3150:180::-;3209:6;3262:2;3250:9;3241:7;3237:23;3233:32;3230:52;;;3278:1;3275;3268:12;3230:52;-1:-1:-1;3301:23:19;;3150:180;-1:-1:-1;3150:180:19:o;5257:184::-;5309:77;5306:1;5299:88;5406:4;5403:1;5396:15;5430:4;5427:1;5420:15;5446:125;5511:9;;;5532:10;;;5529:36;;;5545:18;;:::i;6646:128::-;6713:9;;;6734:11;;;6731:37;;;6748:18;;:::i;7824:277::-;7891:6;7944:2;7932:9;7923:7;7919:23;7915:32;7912:52;;;7960:1;7957;7950:12;7912:52;7992:9;7986:16;8045:5;8038:13;8031:21;8024:5;8021:32;8011:60;;8067:1;8064;8057:12;8106:184;8158:77;8155:1;8148:88;8255:4;8252:1;8245:15;8279:4;8276:1;8269:15;8295:195;8334:3;8365:66;8358:5;8355:77;8352:103;;8435:18;;:::i;:::-;-1:-1:-1;8482:1:19;8471:13;;8295:195::o"},"gasEstimates":{"creation":{"codeDepositCost":"884600","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","claim(bytes32,bytes32[],address,uint256,uint256)":"infinite","claimStatus(bytes32)":"2483","claimWindows(bytes32)":"6735","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","claim(bytes32,bytes32[],address,uint256,uint256)":"3ec6004f","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim rewards based on a Merkle proof, which verifies that they areentitled to the rewards without revealing the entire list of recipients.\",\"kind\":\"dev\",\"methods\":{\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"details\":\"Reverts if the epoch ID does not existReverts if the claim window is closed or has not yet opened.Reverts if the proof provided for the claim is invalid.Reverts if the payout has already been claimed.Reverts if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"id\":\"The ID of the token to claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\",\"value\":\"The value of the token to claim.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\",\"mintSupply\":\"The total number of tokens that can be minted in this contract.\",\"rewardContract\":\"The ERC1155Mintable reward contract.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.     \",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess ERC1155 Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address,uint256,uint256)\":[{\"notice\":\"Thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Thrown when the epoch ID exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply(bytes32,address,uint256,uint256,uint256)\":[{\"notice\":\"Thrown when the number of tokens claimed exceeds the mint supply.\"}],\"InvalidProof(bytes32,address,uint256,uint256)\":[{\"notice\":\"Thrown when the proof provided for the claim is invalid.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"constructor\":{\"notice\":\"Constructor for the AnichessERC1155MerkleClaim contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":\"AnichessERC1155MerkleClaim\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, bytes32 merkleRoot, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient, uint256 id, uint256 value);\\n\\n    /// @notice Thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient, uint256 id, uint256 value);\\n\\n    /// @notice Thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply(bytes32 epochId, address recipient, uint256 id, uint256 value, uint256 totalClaimed);\\n\\n    /// @notice Thrown when the epoch ID exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /**\\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.     \\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @dev Reverts if the epoch ID does not exist\\n     * @dev Reverts if the claim window is closed or has not yet opened.\\n     * @dev Reverts if the proof provided for the claim is invalid.\\n     * @dev Reverts if the payout has already been claimed.\\n     * @dev Reverts if the number of tokens claimed exceeds the mint supply.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @param id The ID of the token to claim.\\n     * @param value The value of the token to claim.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient, uint256 id, uint256 value) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, id, value));\\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient, id, value);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient, id, value);\\n\\n        uint256 prevNoOfTokensClaimed = noOfTokensClaimed;\\n        if (prevNoOfTokensClaimed + value > MINT_SUPPLY) {\\n            revert ExceededMintSupply(epochId, recipient, id, value, prevNoOfTokensClaimed + value);\\n        }\\n\\n        noOfTokensClaimed = prevNoOfTokensClaimed + value;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, id, value, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, claimWindow.merkleRoot, id, value);\\n    }\\n}\\n\",\"keccak256\":\"0xa6c17ef97c9d4f22695cdd3b5bc25740f0b3034a0d5b8f5adeb433b4d5e9e0fd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1375,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":1381,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)1365_storage)"},{"astId":1386,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)1365_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)1365_storage"},"t_struct(ClaimWindow)1365_storage":{"encoding":"inplace","label":"struct AnichessERC1155MerkleClaim.ClaimWindow","members":[{"astId":1360,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1362,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":1364,"contract":"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol:AnichessERC1155MerkleClaim","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address,uint256,uint256)":[{"notice":"Thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Thrown when the epoch ID exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Thrown when the epoch ID does not exist."}],"ExceededMintSupply(bytes32,address,uint256,uint256,uint256)":[{"notice":"Thrown when the number of tokens claimed exceeds the mint supply."}],"InvalidProof(bytes32,address,uint256,uint256)":[{"notice":"Thrown when the proof provided for the claim is invalid."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,bytes32,uint256,uint256)":{"notice":"Emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"claim(bytes32,bytes32[],address,uint256,uint256)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"constructor":{"notice":"Constructor for the AnichessERC1155MerkleClaim contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol":{"AnichessERC1155MerkleClaimMock":{"abi":[{"inputs":[{"internalType":"uint256","name":"mintSupply","type":"uint256"},{"internalType":"contract IERC1155Mintable","name":"rewardContract","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"totalClaimed","type":"uint256"}],"name":"ExceededMintSupply","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"id","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"SetEpochMerkleRoot","type":"event"},{"inputs":[],"name":"MINT_SUPPLY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARD_CONTRACT","outputs":[{"internalType":"contract IERC1155Mintable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"noOfTokensClaimed","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"claim(bytes32,bytes32[],address,uint256,uint256)":{"details":"Reverts if the epoch ID does not existReverts if the claim window is closed or has not yet opened.Reverts if the proof provided for the claim is invalid.Reverts if the payout has already been claimed.Reverts if the number of tokens claimed exceeds the mint supply.","params":{"epochId":"The epoch ID for the claim.","id":"The ID of the token to claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout.","value":"The value of the token to claim."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.","params":{"endTime":"The end time of the claim window.     ","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1490":{"entryPoint":null,"id":1490,"parameterSlots":3,"returnSlots":0},"@_1744":{"entryPoint":null,"id":1744,"parameterSlots":3,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_472":{"entryPoint":null,"id":472,"parameterSlots":1,"returnSlots":0},"@_520":{"entryPoint":null,"id":520,"parameterSlots":1,"returnSlots":0},"@constructorInit_200":{"entryPoint":200,"id":200,"parameterSlots":2,"returnSlots":0},"@layout_306":{"entryPoint":146,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":347,"id":448,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_402":{"entryPoint":395,"id":402,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory":{"entryPoint":564,"id":null,"parameterSlots":2,"returnSlots":3},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":636,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Mintable":{"entryPoint":539,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1292:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"77:86:19","statements":[{"body":{"nodeType":"YulBlock","src":"141:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"150:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"153:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"143:6:19"},"nodeType":"YulFunctionCall","src":"143:12:19"},"nodeType":"YulExpressionStatement","src":"143:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"100:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"111:5:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"126:3:19","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"131:1:19","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"122:3:19"},"nodeType":"YulFunctionCall","src":"122:11:19"},{"kind":"number","nodeType":"YulLiteral","src":"135:1:19","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"118:3:19"},"nodeType":"YulFunctionCall","src":"118:19:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"107:3:19"},"nodeType":"YulFunctionCall","src":"107:31:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"97:2:19"},"nodeType":"YulFunctionCall","src":"97:42:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"90:6:19"},"nodeType":"YulFunctionCall","src":"90:50:19"},"nodeType":"YulIf","src":"87:70:19"}]},"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"66:5:19","type":""}],"src":"14:149:19"},{"body":{"nodeType":"YulBlock","src":"333:367:19","statements":[{"body":{"nodeType":"YulBlock","src":"379:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"388:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"391:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"381:6:19"},"nodeType":"YulFunctionCall","src":"381:12:19"},"nodeType":"YulExpressionStatement","src":"381:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"354:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"363:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"350:3:19"},"nodeType":"YulFunctionCall","src":"350:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"375:2:19","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"346:3:19"},"nodeType":"YulFunctionCall","src":"346:32:19"},"nodeType":"YulIf","src":"343:52:19"},{"nodeType":"YulAssignment","src":"404:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"420:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"414:5:19"},"nodeType":"YulFunctionCall","src":"414:16:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"404:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"439:38:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"462:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"473:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"458:3:19"},"nodeType":"YulFunctionCall","src":"458:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"452:5:19"},"nodeType":"YulFunctionCall","src":"452:25:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"443:5:19","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"529:5:19"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"486:42:19"},"nodeType":"YulFunctionCall","src":"486:49:19"},"nodeType":"YulExpressionStatement","src":"486:49:19"},{"nodeType":"YulAssignment","src":"544:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"554:5:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"544:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"568:40:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"593:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"604:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"589:3:19"},"nodeType":"YulFunctionCall","src":"589:18:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"583:5:19"},"nodeType":"YulFunctionCall","src":"583:25:19"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"572:7:19","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"660:7:19"}],"functionName":{"name":"validator_revert_contract_IERC1155Mintable","nodeType":"YulIdentifier","src":"617:42:19"},"nodeType":"YulFunctionCall","src":"617:51:19"},"nodeType":"YulExpressionStatement","src":"617:51:19"},{"nodeType":"YulAssignment","src":"677:17:19","value":{"name":"value_1","nodeType":"YulIdentifier","src":"687:7:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"677:6:19"}]}]},"name":"abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"283:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"294:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"306:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"314:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"322:6:19","type":""}],"src":"168:532:19"},{"body":{"nodeType":"YulBlock","src":"754:176:19","statements":[{"nodeType":"YulAssignment","src":"764:17:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"776:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"779:1:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"772:3:19"},"nodeType":"YulFunctionCall","src":"772:9:19"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"764:4:19"}]},{"body":{"nodeType":"YulBlock","src":"813:111:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"834:1:19","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"841:3:19","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"846:10:19","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"837:3:19"},"nodeType":"YulFunctionCall","src":"837:20:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"827:6:19"},"nodeType":"YulFunctionCall","src":"827:31:19"},"nodeType":"YulExpressionStatement","src":"827:31:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"878:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"881:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"871:6:19"},"nodeType":"YulFunctionCall","src":"871:15:19"},"nodeType":"YulExpressionStatement","src":"871:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"906:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"909:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"899:6:19"},"nodeType":"YulFunctionCall","src":"899:15:19"},"nodeType":"YulExpressionStatement","src":"899:15:19"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"796:4:19"},{"name":"x","nodeType":"YulIdentifier","src":"802:1:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"793:2:19"},"nodeType":"YulFunctionCall","src":"793:11:19"},"nodeType":"YulIf","src":"790:134:19"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"736:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"739:1:19","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"745:4:19","type":""}],"src":"705:225:19"},{"body":{"nodeType":"YulBlock","src":"1109:181:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1126:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1137:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1119:6:19"},"nodeType":"YulFunctionCall","src":"1119:21:19"},"nodeType":"YulExpressionStatement","src":"1119:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1160:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1171:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1156:3:19"},"nodeType":"YulFunctionCall","src":"1156:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"1176:2:19","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1149:6:19"},"nodeType":"YulFunctionCall","src":"1149:30:19"},"nodeType":"YulExpressionStatement","src":"1149:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1199:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1210:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1195:3:19"},"nodeType":"YulFunctionCall","src":"1195:18:19"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"1215:33:19","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1188:6:19"},"nodeType":"YulFunctionCall","src":"1188:61:19"},"nodeType":"YulExpressionStatement","src":"1188:61:19"},{"nodeType":"YulAssignment","src":"1258:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1270:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1281:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1266:3:19"},"nodeType":"YulFunctionCall","src":"1266:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1258:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1086:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1100:4:19","type":""}],"src":"935:355:19"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Mintable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_contract$_IERC1155Mintable_$743t_contract$_IForwarderRegistry_$645_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := mload(headStart)\n        let value := mload(add(headStart, 32))\n        validator_revert_contract_IERC1155Mintable(value)\n        value1 := value\n        let value_1 := mload(add(headStart, 64))\n        validator_revert_contract_IERC1155Mintable(value_1)\n        value2 := value_1\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x16B4 CODESIZE SUB DUP1 PUSH3 0x16B4 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x234 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP3 DUP3 DUP3 CALLER PUSH3 0x74 DUP2 PUSH3 0x60 PUSH3 0x92 PUSH1 0x20 SWAP1 DUP2 SHL PUSH3 0x878 OR SWAP1 SHR JUMP JUMPDEST PUSH3 0xC8 PUSH1 0x20 SHL PUSH3 0x8A6 OR SWAP1 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0xA0 MSTORE POP PUSH3 0x29E SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xC2 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x27C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x11F JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x157 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x142 PUSH3 0x15B PUSH1 0x20 SHL PUSH3 0x967 OR PUSH1 0x20 SHR JUMP JUMPDEST PUSH3 0x18B PUSH1 0x20 SHL PUSH3 0x995 OR SWAP1 SWAP3 SWAP2 SWAP1 PUSH1 0x20 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xC2 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x27C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x231 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 0x20 DUP5 ADD MLOAD PUSH3 0x25E DUP2 PUSH3 0x21B JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x271 DUP2 PUSH3 0x21B JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xC2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x13B5 PUSH3 0x2FF PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x21D ADD MSTORE PUSH2 0x618 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x18E ADD MSTORE PUSH2 0x75F ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x12E ADD MSTORE DUP2 DUP2 PUSH2 0x1D3 ADD MSTORE DUP2 DUP2 PUSH2 0xD99 ADD MSTORE DUP2 DUP2 PUSH2 0xE21 ADD MSTORE DUP2 DUP2 PUSH2 0xED4 ADD MSTORE PUSH2 0xF12 ADD MSTORE PUSH2 0x13B5 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD1A91FF2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x17B PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP3 SWAP2 SWAP1 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x14E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x3F1 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1243 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x824 JUMP JUMPDEST PUSH2 0x23F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x23F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x850 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F1 DUP3 PUSH2 0x2EB PUSH2 0x967 JUMP JUMPDEST SWAP1 PUSH2 0xAA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x310 PUSH2 0x302 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x30A PUSH2 0x878 JUMP JUMPDEST SWAP1 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x35E JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH2 0xC08 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x355 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x44F JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x53A DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xC13 SWAP1 POP JUMP JUMPDEST PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0xCB4DA94600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC5AC808B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH32 0x0 PUSH2 0x641 DUP6 DUP4 PUSH2 0x12A6 JUMP JUMPDEST GT ISZERO PUSH2 0x6BA JUMPI DUP9 DUP7 DUP7 DUP7 PUSH2 0x655 DUP2 DUP7 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6073F61200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x355 JUMP JUMPDEST PUSH2 0x6C4 DUP5 DUP3 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP3 POP DUP12 SWAP2 POP PUSH32 0x3B7A2657CB0A2501536D45AEB61AD8088337C70086BA7D3B078CF6592597C3C9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0x831 PUSH2 0x878 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x875 PUSH2 0x865 PUSH2 0xB7B JUMP JUMPDEST DUP3 PUSH2 0x86E PUSH2 0x878 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x12B9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x92E JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x963 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x95C PUSH2 0x967 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x995 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x12B9 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAF1 JUMPI POP PUSH1 0x0 PUSH2 0x2F1 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB42 JUMPI POP PUSH1 0x1 PUSH2 0x2F1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0xD56 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x963 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC20 DUP6 DUP5 PUSH2 0x1007 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD50 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD66 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD70 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE8C JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE8C SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST ISZERO PUSH2 0xE96 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xEAE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xEBC JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xFF1 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFF1 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST ISZERO PUSH2 0xFFE JUMPI PUSH2 0x3E9 PUSH2 0x1054 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x104C JUMPI PUSH2 0x1038 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x102B JUMPI PUSH2 0x102B PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1085 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x1044 DUP2 PUSH2 0x131D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x100C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x10A1 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x10B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x119C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x11BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP POP POP PUSH2 0x1229 PUSH1 0x40 DUP9 ADD PUSH2 0x1178 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10B0 DUP3 PUSH2 0x1178 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0x2F1 PUSH2 0x1277 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0x2F1 PUSH2 0x1277 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x134E JUMPI PUSH2 0x134E PUSH2 0x1277 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH22 0x1E83FA625A34A7B6DEB4BDF05E2DA709AC6182F409BF 0x4D 0xFC DUP9 COINBASE RETURNDATACOPY PUSH9 0x2A9364736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"384:594:18:-:0;;;460:209;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;620:38:8;;;;:10:18;632:14;620:38:8;3794:10:17;1007:63:0;3794:10:17;1007:33:0;:31;;;;;;;:33;;:::i;:::-;:49;;;;;;:63;;;;:::i;:::-;-1:-1:-1;;3816:24:17::2;::::0;;;;-1:-1:-1;;;;;3850:32:17::2;;::::0;-1:-1:-1;384:594:18;;-1:-1:-1;;384:594:18;3707:174:3;3748:16;;601:71;671:1;609:58;601:71;:::i;:::-;593:80;3707:174;-1:-1:-1;;3707:174:3:o;1332:341::-;-1:-1:-1;;;;;1420:26:3;;;1416:152;;1462:30;;-1:-1:-1;;;;;;1462:30:3;-1:-1:-1;;;;;1462:30:3;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;-1:-1:-1;;;1661:4:3;1577:34;:32;;;;;:34;;:::i;:::-;:56;;;;;;:89;;;;;:::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;-1:-1:-1;;;;;;;;;782:35:6;;;774:79;;;;-1:-1:-1;;;774:79:6;;1137:2:19;774:79:6;;;1119:21:19;1176:2;1156:18;;;1149:30;1215:33;1195:18;;;1188:61;1266:18;;774:79:6;;;;;;;;-1:-1:-1;;;;;;863:34:6;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;863:46:6;;;;;;;;;;670:246::o;14:149:19:-;-1:-1:-1;;;;;107:31:19;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:532::-;306:6;314;322;375:2;363:9;354:7;350:23;346:32;343:52;;;391:1;388;381:12;343:52;420:9;414:16;404:26;;473:2;462:9;458:18;452:25;486:49;529:5;486:49;:::i;:::-;604:2;589:18;;583:25;554:5;;-1:-1:-1;617:51:19;583:25;617:51;:::i;:::-;687:7;677:17;;;168:532;;;;;:::o;705:225::-;772:9;;;793:11;;;790:134;;;846:10;841:3;837:20;834:1;827:31;881:4;878:1;871:15;909:4;906:1;899:15;935:355;384:594:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINT_SUPPLY_1372":{"entryPoint":null,"id":1372,"parameterSlots":0,"returnSlots":0},"@REWARD_CONTRACT_1369":{"entryPoint":null,"id":1369,"parameterSlots":0,"returnSlots":0},"@__msgData_1763":{"entryPoint":990,"id":1763,"parameterSlots":0,"returnSlots":2},"@__msgSender_1753":{"entryPoint":2128,"id":1753,"parameterSlots":0,"returnSlots":1},"@_efficientHash_1326":{"entryPoint":null,"id":1326,"parameterSlots":2,"returnSlots":1},"@_hashPair_1315":{"entryPoint":4229,"id":1315,"parameterSlots":2,"returnSlots":1},"@_msgData_1518":{"entryPoint":3080,"id":1518,"parameterSlots":0,"returnSlots":2},"@_msgData_618":{"entryPoint":3741,"id":618,"parameterSlots":0,"returnSlots":2},"@_msgSender_1504":{"entryPoint":2939,"id":1504,"parameterSlots":0,"returnSlots":1},"@_msgSender_570":{"entryPoint":3414,"id":570,"parameterSlots":0,"returnSlots":1},"@claimStatus_1386":{"entryPoint":null,"id":1386,"parameterSlots":0,"returnSlots":0},"@claimWindows_1381":{"entryPoint":null,"id":1381,"parameterSlots":0,"returnSlots":0},"@claim_1716":{"entryPoint":1009,"id":1716,"parameterSlots":6,"returnSlots":0},"@constructorInit_200":{"entryPoint":2214,"id":200,"parameterSlots":2,"returnSlots":0},"@enforceIsContractOwner_294":{"entryPoint":2949,"id":294,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_481":{"entryPoint":null,"id":481,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_498":{"entryPoint":null,"id":498,"parameterSlots":1,"returnSlots":1},"@layout_306":{"entryPoint":2168,"id":306,"parameterSlots":0,"returnSlots":1},"@layout_448":{"entryPoint":2407,"id":448,"parameterSlots":0,"returnSlots":1},"@msgData_673":{"entryPoint":4180,"id":673,"parameterSlots":0,"returnSlots":2},"@msgSender_656":{"entryPoint":null,"id":656,"parameterSlots":0,"returnSlots":1},"@noOfTokensClaimed_1375":{"entryPoint":null,"id":1375,"parameterSlots":0,"returnSlots":0},"@owner_276":{"entryPoint":null,"id":276,"parameterSlots":1,"returnSlots":1},"@owner_63":{"entryPoint":2084,"id":63,"parameterSlots":0,"returnSlots":1},"@processProof_910":{"entryPoint":4103,"id":910,"parameterSlots":2,"returnSlots":1},"@setEpochMerkleRoot_1572":{"entryPoint":759,"id":1572,"parameterSlots":4,"returnSlots":0},"@setSupportedInterface_402":{"entryPoint":2453,"id":402,"parameterSlots":3,"returnSlots":0},"@supportsInterface_337":{"entryPoint":733,"id":337,"parameterSlots":1,"returnSlots":1},"@supportsInterface_436":{"entryPoint":2721,"id":436,"parameterSlots":2,"returnSlots":1},"@transferOwnership_263":{"entryPoint":3113,"id":263,"parameterSlots":3,"returnSlots":0},"@transferOwnership_81":{"entryPoint":2138,"id":81,"parameterSlots":1,"returnSlots":0},"@verify_849":{"entryPoint":3091,"id":849,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4472,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4675,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4812,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256":{"entryPoint":4513,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":4345,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":4279,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4395,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":4949,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":4774,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4793,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":4893,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":4727,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4846,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:9280:19","statements":[{"nodeType":"YulBlock","src":"6:3:19","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:263:19","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:19"},"nodeType":"YulFunctionCall","src":"131:12:19"},"nodeType":"YulExpressionStatement","src":"131:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:19"},"nodeType":"YulFunctionCall","src":"100:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:19"},"nodeType":"YulFunctionCall","src":"96:32:19"},"nodeType":"YulIf","src":"93:52:19"},{"nodeType":"YulVariableDeclaration","src":"154:36:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:19"},"nodeType":"YulFunctionCall","src":"167:23:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"300:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"309:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"312:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"302:6:19"},"nodeType":"YulFunctionCall","src":"302:12:19"},"nodeType":"YulExpressionStatement","src":"302:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"230:66:19","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:19"},"nodeType":"YulFunctionCall","src":"219:78:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:19"},"nodeType":"YulFunctionCall","src":"209:89:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:19"},"nodeType":"YulFunctionCall","src":"202:97:19"},"nodeType":"YulIf","src":"199:117:19"},{"nodeType":"YulAssignment","src":"325:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"335:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"325:6:19"}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:19","type":""}],"src":"14:332:19"},{"body":{"nodeType":"YulBlock","src":"446:92:19","statements":[{"nodeType":"YulAssignment","src":"456:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"468:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"479:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"464:3:19"},"nodeType":"YulFunctionCall","src":"464:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"456:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"498:9:19"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"523:6:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"516:6:19"},"nodeType":"YulFunctionCall","src":"516:14:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"509:6:19"},"nodeType":"YulFunctionCall","src":"509:22:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"491:6:19"},"nodeType":"YulFunctionCall","src":"491:41:19"},"nodeType":"YulExpressionStatement","src":"491:41:19"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"415:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"426:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"437:4:19","type":""}],"src":"351:187:19"},{"body":{"nodeType":"YulBlock","src":"664:264:19","statements":[{"body":{"nodeType":"YulBlock","src":"711:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"720:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"723:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"713:6:19"},"nodeType":"YulFunctionCall","src":"713:12:19"},"nodeType":"YulExpressionStatement","src":"713:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"685:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"694:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"681:3:19"},"nodeType":"YulFunctionCall","src":"681:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"706:3:19","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"677:3:19"},"nodeType":"YulFunctionCall","src":"677:33:19"},"nodeType":"YulIf","src":"674:53:19"},{"nodeType":"YulAssignment","src":"736:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"759:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"746:12:19"},"nodeType":"YulFunctionCall","src":"746:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"736:6:19"}]},{"nodeType":"YulAssignment","src":"778:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"805:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"816:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"801:3:19"},"nodeType":"YulFunctionCall","src":"801:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"788:12:19"},"nodeType":"YulFunctionCall","src":"788:32:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"778:6:19"}]},{"nodeType":"YulAssignment","src":"829:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"856:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"867:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"852:3:19"},"nodeType":"YulFunctionCall","src":"852:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"839:12:19"},"nodeType":"YulFunctionCall","src":"839:32:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"829:6:19"}]},{"nodeType":"YulAssignment","src":"880:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"907:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"918:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"903:3:19"},"nodeType":"YulFunctionCall","src":"903:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"890:12:19"},"nodeType":"YulFunctionCall","src":"890:32:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"880:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"606:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"617:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"629:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"637:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"645:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"653:6:19","type":""}],"src":"543:385:19"},{"body":{"nodeType":"YulBlock","src":"1060:125:19","statements":[{"nodeType":"YulAssignment","src":"1070:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1082:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1093:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1078:3:19"},"nodeType":"YulFunctionCall","src":"1078:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1070:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1112:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1127:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1135:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1123:3:19"},"nodeType":"YulFunctionCall","src":"1123:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1105:6:19"},"nodeType":"YulFunctionCall","src":"1105:74:19"},"nodeType":"YulExpressionStatement","src":"1105:74:19"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1029:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1040:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1051:4:19","type":""}],"src":"933:252:19"},{"body":{"nodeType":"YulBlock","src":"1319:318:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1336:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1347:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1329:6:19"},"nodeType":"YulFunctionCall","src":"1329:21:19"},"nodeType":"YulExpressionStatement","src":"1329:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1370:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1381:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1366:3:19"},"nodeType":"YulFunctionCall","src":"1366:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"1386:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1359:6:19"},"nodeType":"YulFunctionCall","src":"1359:34:19"},"nodeType":"YulExpressionStatement","src":"1359:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1419:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1430:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1415:3:19"},"nodeType":"YulFunctionCall","src":"1415:18:19"},{"name":"value0","nodeType":"YulIdentifier","src":"1435:6:19"},{"name":"value1","nodeType":"YulIdentifier","src":"1443:6:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1402:12:19"},"nodeType":"YulFunctionCall","src":"1402:48:19"},"nodeType":"YulExpressionStatement","src":"1402:48:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1474:9:19"},{"name":"value1","nodeType":"YulIdentifier","src":"1485:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1470:3:19"},"nodeType":"YulFunctionCall","src":"1470:22:19"},{"kind":"number","nodeType":"YulLiteral","src":"1494:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1466:3:19"},"nodeType":"YulFunctionCall","src":"1466:31:19"},{"kind":"number","nodeType":"YulLiteral","src":"1499:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1459:6:19"},"nodeType":"YulFunctionCall","src":"1459:42:19"},"nodeType":"YulExpressionStatement","src":"1459:42:19"},{"nodeType":"YulAssignment","src":"1510:121:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1526:9:19"},{"arguments":[{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"1545:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1553:2:19","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1541:3:19"},"nodeType":"YulFunctionCall","src":"1541:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"1558:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1537:3:19"},"nodeType":"YulFunctionCall","src":"1537:88:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1522:3:19"},"nodeType":"YulFunctionCall","src":"1522:104:19"},{"kind":"number","nodeType":"YulLiteral","src":"1628:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1518:3:19"},"nodeType":"YulFunctionCall","src":"1518:113:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1510:4:19"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1280:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1291:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1299:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1310:4:19","type":""}],"src":"1190:447:19"},{"body":{"nodeType":"YulBlock","src":"1767:125:19","statements":[{"nodeType":"YulAssignment","src":"1777:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1789:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"1800:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1785:3:19"},"nodeType":"YulFunctionCall","src":"1785:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1777:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1819:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1834:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"1842:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1830:3:19"},"nodeType":"YulFunctionCall","src":"1830:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1812:6:19"},"nodeType":"YulFunctionCall","src":"1812:74:19"},"nodeType":"YulExpressionStatement","src":"1812:74:19"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1736:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1747:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1758:4:19","type":""}],"src":"1642:250:19"},{"body":{"nodeType":"YulBlock","src":"1946:147:19","statements":[{"nodeType":"YulAssignment","src":"1956:29:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1978:6:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1965:12:19"},"nodeType":"YulFunctionCall","src":"1965:20:19"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1956:5:19"}]},{"body":{"nodeType":"YulBlock","src":"2071:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2080:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2083:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2073:6:19"},"nodeType":"YulFunctionCall","src":"2073:12:19"},"nodeType":"YulExpressionStatement","src":"2073:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2007:5:19"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2018:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"2025:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2014:3:19"},"nodeType":"YulFunctionCall","src":"2014:54:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2004:2:19"},"nodeType":"YulFunctionCall","src":"2004:65:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1997:6:19"},"nodeType":"YulFunctionCall","src":"1997:73:19"},"nodeType":"YulIf","src":"1994:93:19"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"1925:6:19","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1936:5:19","type":""}],"src":"1897:196:19"},{"body":{"nodeType":"YulBlock","src":"2271:722:19","statements":[{"body":{"nodeType":"YulBlock","src":"2318:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2327:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2330:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2320:6:19"},"nodeType":"YulFunctionCall","src":"2320:12:19"},"nodeType":"YulExpressionStatement","src":"2320:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2292:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2288:3:19"},"nodeType":"YulFunctionCall","src":"2288:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2313:3:19","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2284:3:19"},"nodeType":"YulFunctionCall","src":"2284:33:19"},"nodeType":"YulIf","src":"2281:53:19"},{"nodeType":"YulAssignment","src":"2343:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2366:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2353:12:19"},"nodeType":"YulFunctionCall","src":"2353:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2343:6:19"}]},{"nodeType":"YulVariableDeclaration","src":"2385:46:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2416:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2427:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2412:3:19"},"nodeType":"YulFunctionCall","src":"2412:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2399:12:19"},"nodeType":"YulFunctionCall","src":"2399:32:19"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2389:6:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2440:28:19","value":{"kind":"number","nodeType":"YulLiteral","src":"2450:18:19","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2444:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2495:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2504:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2507:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2497:6:19"},"nodeType":"YulFunctionCall","src":"2497:12:19"},"nodeType":"YulExpressionStatement","src":"2497:12:19"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2483:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2491:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2480:2:19"},"nodeType":"YulFunctionCall","src":"2480:14:19"},"nodeType":"YulIf","src":"2477:34:19"},{"nodeType":"YulVariableDeclaration","src":"2520:32:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2534:9:19"},{"name":"offset","nodeType":"YulIdentifier","src":"2545:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2530:3:19"},"nodeType":"YulFunctionCall","src":"2530:22:19"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2524:2:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2600:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2609:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2612:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2602:6:19"},"nodeType":"YulFunctionCall","src":"2602:12:19"},"nodeType":"YulExpressionStatement","src":"2602:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2579:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2583:4:19","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2575:3:19"},"nodeType":"YulFunctionCall","src":"2575:13:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2590:7:19"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2571:3:19"},"nodeType":"YulFunctionCall","src":"2571:27:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2564:6:19"},"nodeType":"YulFunctionCall","src":"2564:35:19"},"nodeType":"YulIf","src":"2561:55:19"},{"nodeType":"YulVariableDeclaration","src":"2625:30:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2652:2:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2639:12:19"},"nodeType":"YulFunctionCall","src":"2639:16:19"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2629:6:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"2682:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2691:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2694:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2684:6:19"},"nodeType":"YulFunctionCall","src":"2684:12:19"},"nodeType":"YulExpressionStatement","src":"2684:12:19"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2670:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"2678:2:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2667:2:19"},"nodeType":"YulFunctionCall","src":"2667:14:19"},"nodeType":"YulIf","src":"2664:34:19"},{"body":{"nodeType":"YulBlock","src":"2756:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2765:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2768:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2758:6:19"},"nodeType":"YulFunctionCall","src":"2758:12:19"},"nodeType":"YulExpressionStatement","src":"2758:12:19"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2721:2:19"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2729:1:19","type":"","value":"5"},{"name":"length","nodeType":"YulIdentifier","src":"2732:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2725:3:19"},"nodeType":"YulFunctionCall","src":"2725:14:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2717:3:19"},"nodeType":"YulFunctionCall","src":"2717:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"2742:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2713:3:19"},"nodeType":"YulFunctionCall","src":"2713:32:19"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2747:7:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2710:2:19"},"nodeType":"YulFunctionCall","src":"2710:45:19"},"nodeType":"YulIf","src":"2707:65:19"},{"nodeType":"YulAssignment","src":"2781:21:19","value":{"arguments":[{"name":"_2","nodeType":"YulIdentifier","src":"2795:2:19"},{"kind":"number","nodeType":"YulLiteral","src":"2799:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2791:3:19"},"nodeType":"YulFunctionCall","src":"2791:11:19"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2781:6:19"}]},{"nodeType":"YulAssignment","src":"2811:16:19","value":{"name":"length","nodeType":"YulIdentifier","src":"2821:6:19"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"2811:6:19"}]},{"nodeType":"YulAssignment","src":"2836:48:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2869:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2880:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2865:3:19"},"nodeType":"YulFunctionCall","src":"2865:18:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2846:18:19"},"nodeType":"YulFunctionCall","src":"2846:38:19"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"2836:6:19"}]},{"nodeType":"YulAssignment","src":"2893:42:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2920:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2931:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2916:3:19"},"nodeType":"YulFunctionCall","src":"2916:18:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2903:12:19"},"nodeType":"YulFunctionCall","src":"2903:32:19"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"2893:6:19"}]},{"nodeType":"YulAssignment","src":"2944:43:19","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2971:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"2982:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2967:3:19"},"nodeType":"YulFunctionCall","src":"2967:19:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2954:12:19"},"nodeType":"YulFunctionCall","src":"2954:33:19"},"variableNames":[{"name":"value5","nodeType":"YulIdentifier","src":"2944:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2197:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2208:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2220:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2228:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"2236:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"2244:6:19","type":""},{"name":"value4","nodeType":"YulTypedName","src":"2252:6:19","type":""},{"name":"value5","nodeType":"YulTypedName","src":"2260:6:19","type":""}],"src":"2098:895:19"},{"body":{"nodeType":"YulBlock","src":"3068:116:19","statements":[{"body":{"nodeType":"YulBlock","src":"3114:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3123:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3126:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3116:6:19"},"nodeType":"YulFunctionCall","src":"3116:12:19"},"nodeType":"YulExpressionStatement","src":"3116:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3089:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3098:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3085:3:19"},"nodeType":"YulFunctionCall","src":"3085:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3110:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3081:3:19"},"nodeType":"YulFunctionCall","src":"3081:32:19"},"nodeType":"YulIf","src":"3078:52:19"},{"nodeType":"YulAssignment","src":"3139:39:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3168:9:19"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"3149:18:19"},"nodeType":"YulFunctionCall","src":"3149:29:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3139:6:19"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3034:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3045:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3057:6:19","type":""}],"src":"2998:186:19"},{"body":{"nodeType":"YulBlock","src":"3290:125:19","statements":[{"nodeType":"YulAssignment","src":"3300:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3323:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3308:3:19"},"nodeType":"YulFunctionCall","src":"3308:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3300:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3342:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3357:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"3365:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3353:3:19"},"nodeType":"YulFunctionCall","src":"3353:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3335:6:19"},"nodeType":"YulFunctionCall","src":"3335:74:19"},"nodeType":"YulExpressionStatement","src":"3335:74:19"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3259:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3270:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3281:4:19","type":""}],"src":"3189:226:19"},{"body":{"nodeType":"YulBlock","src":"3521:76:19","statements":[{"nodeType":"YulAssignment","src":"3531:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3543:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3554:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3539:3:19"},"nodeType":"YulFunctionCall","src":"3539:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3531:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3573:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"3584:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3566:6:19"},"nodeType":"YulFunctionCall","src":"3566:25:19"},"nodeType":"YulExpressionStatement","src":"3566:25:19"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3490:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3501:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3512:4:19","type":""}],"src":"3420:177:19"},{"body":{"nodeType":"YulBlock","src":"3672:110:19","statements":[{"body":{"nodeType":"YulBlock","src":"3718:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3727:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3730:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3720:6:19"},"nodeType":"YulFunctionCall","src":"3720:12:19"},"nodeType":"YulExpressionStatement","src":"3720:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3693:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"3702:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3689:3:19"},"nodeType":"YulFunctionCall","src":"3689:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"3714:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3685:3:19"},"nodeType":"YulFunctionCall","src":"3685:32:19"},"nodeType":"YulIf","src":"3682:52:19"},{"nodeType":"YulAssignment","src":"3743:33:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3766:9:19"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3753:12:19"},"nodeType":"YulFunctionCall","src":"3753:23:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3743:6:19"}]}]},"name":"abi_decode_tuple_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3638:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3649:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3661:6:19","type":""}],"src":"3602:180:19"},{"body":{"nodeType":"YulBlock","src":"3944:162:19","statements":[{"nodeType":"YulAssignment","src":"3954:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3966:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"3977:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3962:3:19"},"nodeType":"YulFunctionCall","src":"3962:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3954:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3996:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4007:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3989:6:19"},"nodeType":"YulFunctionCall","src":"3989:25:19"},"nodeType":"YulExpressionStatement","src":"3989:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4034:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4045:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4030:3:19"},"nodeType":"YulFunctionCall","src":"4030:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4050:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4023:6:19"},"nodeType":"YulFunctionCall","src":"4023:34:19"},"nodeType":"YulExpressionStatement","src":"4023:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4077:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4088:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4073:3:19"},"nodeType":"YulFunctionCall","src":"4073:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"4093:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4066:6:19"},"nodeType":"YulFunctionCall","src":"4066:34:19"},"nodeType":"YulExpressionStatement","src":"4066:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3897:9:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3908:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3916:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3924:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3935:4:19","type":""}],"src":"3787:319:19"},{"body":{"nodeType":"YulBlock","src":"4212:76:19","statements":[{"nodeType":"YulAssignment","src":"4222:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4234:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4245:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4230:3:19"},"nodeType":"YulFunctionCall","src":"4230:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4222:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4264:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4275:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4257:6:19"},"nodeType":"YulFunctionCall","src":"4257:25:19"},"nodeType":"YulExpressionStatement","src":"4257:25:19"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4181:9:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4192:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4203:4:19","type":""}],"src":"4111:177:19"},{"body":{"nodeType":"YulBlock","src":"4422:119:19","statements":[{"nodeType":"YulAssignment","src":"4432:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4444:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4455:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4440:3:19"},"nodeType":"YulFunctionCall","src":"4440:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4432:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4474:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4485:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4467:6:19"},"nodeType":"YulFunctionCall","src":"4467:25:19"},"nodeType":"YulExpressionStatement","src":"4467:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4512:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4523:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4508:3:19"},"nodeType":"YulFunctionCall","src":"4508:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4528:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4501:6:19"},"nodeType":"YulFunctionCall","src":"4501:34:19"},"nodeType":"YulExpressionStatement","src":"4501:34:19"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4383:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4394:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4402:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4413:4:19","type":""}],"src":"4293:248:19"},{"body":{"nodeType":"YulBlock","src":"4675:119:19","statements":[{"nodeType":"YulAssignment","src":"4685:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4697:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4708:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4693:3:19"},"nodeType":"YulFunctionCall","src":"4693:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4685:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4727:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"4738:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4720:6:19"},"nodeType":"YulFunctionCall","src":"4720:25:19"},"nodeType":"YulExpressionStatement","src":"4720:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4765:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"4776:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4761:3:19"},"nodeType":"YulFunctionCall","src":"4761:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"4781:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4754:6:19"},"nodeType":"YulFunctionCall","src":"4754:34:19"},"nodeType":"YulExpressionStatement","src":"4754:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4636:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4647:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4655:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4666:4:19","type":""}],"src":"4546:248:19"},{"body":{"nodeType":"YulBlock","src":"5002:257:19","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5019:3:19"},{"name":"value0","nodeType":"YulIdentifier","src":"5024:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5012:6:19"},"nodeType":"YulFunctionCall","src":"5012:19:19"},"nodeType":"YulExpressionStatement","src":"5012:19:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5051:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"5056:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5047:3:19"},"nodeType":"YulFunctionCall","src":"5047:12:19"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5069:2:19","type":"","value":"96"},{"name":"value1","nodeType":"YulIdentifier","src":"5073:6:19"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"5065:3:19"},"nodeType":"YulFunctionCall","src":"5065:15:19"},{"kind":"number","nodeType":"YulLiteral","src":"5082:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5061:3:19"},"nodeType":"YulFunctionCall","src":"5061:88:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5040:6:19"},"nodeType":"YulFunctionCall","src":"5040:110:19"},"nodeType":"YulExpressionStatement","src":"5040:110:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5170:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"5175:2:19","type":"","value":"52"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5166:3:19"},"nodeType":"YulFunctionCall","src":"5166:12:19"},{"name":"value2","nodeType":"YulIdentifier","src":"5180:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5159:6:19"},"nodeType":"YulFunctionCall","src":"5159:28:19"},"nodeType":"YulExpressionStatement","src":"5159:28:19"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5207:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"5212:2:19","type":"","value":"84"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5203:3:19"},"nodeType":"YulFunctionCall","src":"5203:12:19"},{"name":"value3","nodeType":"YulIdentifier","src":"5217:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5196:6:19"},"nodeType":"YulFunctionCall","src":"5196:28:19"},"nodeType":"YulExpressionStatement","src":"5196:28:19"},{"nodeType":"YulAssignment","src":"5233:20:19","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5244:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"5249:3:19","type":"","value":"116"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5240:3:19"},"nodeType":"YulFunctionCall","src":"5240:13:19"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5233:3:19"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4954:3:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4959:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4967:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4983:6:19","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4994:3:19","type":""}],"src":"4799:460:19"},{"body":{"nodeType":"YulBlock","src":"5449:255:19","statements":[{"nodeType":"YulAssignment","src":"5459:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5471:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5482:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5467:3:19"},"nodeType":"YulFunctionCall","src":"5467:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5459:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5502:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"5513:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5495:6:19"},"nodeType":"YulFunctionCall","src":"5495:25:19"},"nodeType":"YulExpressionStatement","src":"5495:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5540:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5551:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5536:3:19"},"nodeType":"YulFunctionCall","src":"5536:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5560:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"5568:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5556:3:19"},"nodeType":"YulFunctionCall","src":"5556:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5529:6:19"},"nodeType":"YulFunctionCall","src":"5529:83:19"},"nodeType":"YulExpressionStatement","src":"5529:83:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5632:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5643:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5628:3:19"},"nodeType":"YulFunctionCall","src":"5628:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"5648:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5621:6:19"},"nodeType":"YulFunctionCall","src":"5621:34:19"},"nodeType":"YulExpressionStatement","src":"5621:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5675:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"5686:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5671:3:19"},"nodeType":"YulFunctionCall","src":"5671:18:19"},{"name":"value3","nodeType":"YulIdentifier","src":"5691:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5664:6:19"},"nodeType":"YulFunctionCall","src":"5664:34:19"},"nodeType":"YulExpressionStatement","src":"5664:34:19"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5394:9:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5405:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5413:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5421:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5429:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5440:4:19","type":""}],"src":"5264:440:19"},{"body":{"nodeType":"YulBlock","src":"5741:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5758:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5761:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5751:6:19"},"nodeType":"YulFunctionCall","src":"5751:88:19"},"nodeType":"YulExpressionStatement","src":"5751:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5855:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"5858:4:19","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5848:6:19"},"nodeType":"YulFunctionCall","src":"5848:15:19"},"nodeType":"YulExpressionStatement","src":"5848:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5879:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5882:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5872:6:19"},"nodeType":"YulFunctionCall","src":"5872:15:19"},"nodeType":"YulExpressionStatement","src":"5872:15:19"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"5709:184:19"},{"body":{"nodeType":"YulBlock","src":"5946:77:19","statements":[{"nodeType":"YulAssignment","src":"5956:16:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5967:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"5970:1:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5963:3:19"},"nodeType":"YulFunctionCall","src":"5963:9:19"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"5956:3:19"}]},{"body":{"nodeType":"YulBlock","src":"5995:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"5997:16:19"},"nodeType":"YulFunctionCall","src":"5997:18:19"},"nodeType":"YulExpressionStatement","src":"5997:18:19"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"5987:1:19"},{"name":"sum","nodeType":"YulIdentifier","src":"5990:3:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5984:2:19"},"nodeType":"YulFunctionCall","src":"5984:10:19"},"nodeType":"YulIf","src":"5981:36:19"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"5929:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"5932:1:19","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"5938:3:19","type":""}],"src":"5898:125:19"},{"body":{"nodeType":"YulBlock","src":"6241:299:19","statements":[{"nodeType":"YulAssignment","src":"6251:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6263:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6274:3:19","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6259:3:19"},"nodeType":"YulFunctionCall","src":"6259:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6251:4:19"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6294:9:19"},{"name":"value0","nodeType":"YulIdentifier","src":"6305:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6287:6:19"},"nodeType":"YulFunctionCall","src":"6287:25:19"},"nodeType":"YulExpressionStatement","src":"6287:25:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6332:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6343:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6328:3:19"},"nodeType":"YulFunctionCall","src":"6328:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6352:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"6360:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6348:3:19"},"nodeType":"YulFunctionCall","src":"6348:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6321:6:19"},"nodeType":"YulFunctionCall","src":"6321:83:19"},"nodeType":"YulExpressionStatement","src":"6321:83:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6424:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6435:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6420:3:19"},"nodeType":"YulFunctionCall","src":"6420:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"6440:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6413:6:19"},"nodeType":"YulFunctionCall","src":"6413:34:19"},"nodeType":"YulExpressionStatement","src":"6413:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6467:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6478:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6463:3:19"},"nodeType":"YulFunctionCall","src":"6463:18:19"},{"name":"value3","nodeType":"YulIdentifier","src":"6483:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6456:6:19"},"nodeType":"YulFunctionCall","src":"6456:34:19"},"nodeType":"YulExpressionStatement","src":"6456:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6510:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6521:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6506:3:19"},"nodeType":"YulFunctionCall","src":"6506:19:19"},{"name":"value4","nodeType":"YulIdentifier","src":"6527:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6499:6:19"},"nodeType":"YulFunctionCall","src":"6499:35:19"},"nodeType":"YulExpressionStatement","src":"6499:35:19"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6178:9:19","type":""},{"name":"value4","nodeType":"YulTypedName","src":"6189:6:19","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6197:6:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6205:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6213:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6221:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6232:4:19","type":""}],"src":"6028:512:19"},{"body":{"nodeType":"YulBlock","src":"6802:291:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6819:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6834:6:19"},{"kind":"number","nodeType":"YulLiteral","src":"6842:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6830:3:19"},"nodeType":"YulFunctionCall","src":"6830:55:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6812:6:19"},"nodeType":"YulFunctionCall","src":"6812:74:19"},"nodeType":"YulExpressionStatement","src":"6812:74:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6906:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6917:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6902:3:19"},"nodeType":"YulFunctionCall","src":"6902:18:19"},{"name":"value1","nodeType":"YulIdentifier","src":"6922:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6895:6:19"},"nodeType":"YulFunctionCall","src":"6895:34:19"},"nodeType":"YulExpressionStatement","src":"6895:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6949:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"6960:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6945:3:19"},"nodeType":"YulFunctionCall","src":"6945:18:19"},{"name":"value2","nodeType":"YulIdentifier","src":"6965:6:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6938:6:19"},"nodeType":"YulFunctionCall","src":"6938:34:19"},"nodeType":"YulExpressionStatement","src":"6938:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6992:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7003:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6988:3:19"},"nodeType":"YulFunctionCall","src":"6988:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7008:3:19","type":"","value":"128"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6981:6:19"},"nodeType":"YulFunctionCall","src":"6981:31:19"},"nodeType":"YulExpressionStatement","src":"6981:31:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7032:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7043:3:19","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7028:3:19"},"nodeType":"YulFunctionCall","src":"7028:19:19"},{"kind":"number","nodeType":"YulLiteral","src":"7049:1:19","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7021:6:19"},"nodeType":"YulFunctionCall","src":"7021:30:19"},"nodeType":"YulExpressionStatement","src":"7021:30:19"},{"nodeType":"YulAssignment","src":"7060:27:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7072:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7083:3:19","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7068:3:19"},"nodeType":"YulFunctionCall","src":"7068:19:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7060:4:19"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6755:9:19","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6766:6:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6774:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6782:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6793:4:19","type":""}],"src":"6545:548:19"},{"body":{"nodeType":"YulBlock","src":"7147:79:19","statements":[{"nodeType":"YulAssignment","src":"7157:17:19","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"7169:1:19"},{"name":"y","nodeType":"YulIdentifier","src":"7172:1:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7165:3:19"},"nodeType":"YulFunctionCall","src":"7165:9:19"},"variableNames":[{"name":"diff","nodeType":"YulIdentifier","src":"7157:4:19"}]},{"body":{"nodeType":"YulBlock","src":"7198:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"7200:16:19"},"nodeType":"YulFunctionCall","src":"7200:18:19"},"nodeType":"YulExpressionStatement","src":"7200:18:19"}]},"condition":{"arguments":[{"name":"diff","nodeType":"YulIdentifier","src":"7189:4:19"},{"name":"x","nodeType":"YulIdentifier","src":"7195:1:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7186:2:19"},"nodeType":"YulFunctionCall","src":"7186:11:19"},"nodeType":"YulIf","src":"7183:37:19"}]},"name":"checked_sub_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"7129:1:19","type":""},{"name":"y","nodeType":"YulTypedName","src":"7132:1:19","type":""}],"returnVariables":[{"name":"diff","nodeType":"YulTypedName","src":"7138:4:19","type":""}],"src":"7098:128:19"},{"body":{"nodeType":"YulBlock","src":"7405:181:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7422:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7433:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7415:6:19"},"nodeType":"YulFunctionCall","src":"7415:21:19"},"nodeType":"YulExpressionStatement","src":"7415:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7456:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7467:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7452:3:19"},"nodeType":"YulFunctionCall","src":"7452:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7472:2:19","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7445:6:19"},"nodeType":"YulFunctionCall","src":"7445:30:19"},"nodeType":"YulExpressionStatement","src":"7445:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7495:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7506:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7491:3:19"},"nodeType":"YulFunctionCall","src":"7491:18:19"},{"hexValue":"496e74657266616365446574656374696f6e3a2077726f6e672076616c7565","kind":"string","nodeType":"YulLiteral","src":"7511:33:19","type":"","value":"InterfaceDetection: wrong value"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7484:6:19"},"nodeType":"YulFunctionCall","src":"7484:61:19"},"nodeType":"YulExpressionStatement","src":"7484:61:19"},{"nodeType":"YulAssignment","src":"7554:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7566:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7577:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7562:3:19"},"nodeType":"YulFunctionCall","src":"7562:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7554:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7382:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7396:4:19","type":""}],"src":"7231:355:19"},{"body":{"nodeType":"YulBlock","src":"7765:174:19","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7782:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7793:2:19","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7775:6:19"},"nodeType":"YulFunctionCall","src":"7775:21:19"},"nodeType":"YulExpressionStatement","src":"7775:21:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7816:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7827:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7812:3:19"},"nodeType":"YulFunctionCall","src":"7812:18:19"},{"kind":"number","nodeType":"YulLiteral","src":"7832:2:19","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7805:6:19"},"nodeType":"YulFunctionCall","src":"7805:30:19"},"nodeType":"YulExpressionStatement","src":"7805:30:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7855:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7866:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7851:3:19"},"nodeType":"YulFunctionCall","src":"7851:18:19"},{"hexValue":"4f776e6572736869703a206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"7871:26:19","type":"","value":"Ownership: not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7844:6:19"},"nodeType":"YulFunctionCall","src":"7844:54:19"},"nodeType":"YulExpressionStatement","src":"7844:54:19"},{"nodeType":"YulAssignment","src":"7907:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7919:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"7930:2:19","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7915:3:19"},"nodeType":"YulFunctionCall","src":"7915:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7907:4:19"}]}]},"name":"abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7742:9:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7756:4:19","type":""}],"src":"7591:348:19"},{"body":{"nodeType":"YulBlock","src":"8073:198:19","statements":[{"nodeType":"YulAssignment","src":"8083:26:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8095:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8106:2:19","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8091:3:19"},"nodeType":"YulFunctionCall","src":"8091:18:19"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8083:4:19"}]},{"nodeType":"YulVariableDeclaration","src":"8118:52:19","value":{"kind":"number","nodeType":"YulLiteral","src":"8128:42:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"8122:2:19","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8186:9:19"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8201:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"8209:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8197:3:19"},"nodeType":"YulFunctionCall","src":"8197:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8179:6:19"},"nodeType":"YulFunctionCall","src":"8179:34:19"},"nodeType":"YulExpressionStatement","src":"8179:34:19"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8233:9:19"},{"kind":"number","nodeType":"YulLiteral","src":"8244:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8229:3:19"},"nodeType":"YulFunctionCall","src":"8229:18:19"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"8253:6:19"},{"name":"_1","nodeType":"YulIdentifier","src":"8261:2:19"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8249:3:19"},"nodeType":"YulFunctionCall","src":"8249:15:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8222:6:19"},"nodeType":"YulFunctionCall","src":"8222:43:19"},"nodeType":"YulExpressionStatement","src":"8222:43:19"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8034:9:19","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8045:6:19","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8053:6:19","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8064:4:19","type":""}],"src":"7944:327:19"},{"body":{"nodeType":"YulBlock","src":"8354:199:19","statements":[{"body":{"nodeType":"YulBlock","src":"8400:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8409:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8412:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8402:6:19"},"nodeType":"YulFunctionCall","src":"8402:12:19"},"nodeType":"YulExpressionStatement","src":"8402:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8375:7:19"},{"name":"headStart","nodeType":"YulIdentifier","src":"8384:9:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8371:3:19"},"nodeType":"YulFunctionCall","src":"8371:23:19"},{"kind":"number","nodeType":"YulLiteral","src":"8396:2:19","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8367:3:19"},"nodeType":"YulFunctionCall","src":"8367:32:19"},"nodeType":"YulIf","src":"8364:52:19"},{"nodeType":"YulVariableDeclaration","src":"8425:29:19","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8444:9:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8438:5:19"},"nodeType":"YulFunctionCall","src":"8438:16:19"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8429:5:19","type":""}]},{"body":{"nodeType":"YulBlock","src":"8507:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8516:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8519:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8509:6:19"},"nodeType":"YulFunctionCall","src":"8509:12:19"},"nodeType":"YulExpressionStatement","src":"8509:12:19"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8476:5:19"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8497:5:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8490:6:19"},"nodeType":"YulFunctionCall","src":"8490:13:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8483:6:19"},"nodeType":"YulFunctionCall","src":"8483:21:19"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8473:2:19"},"nodeType":"YulFunctionCall","src":"8473:32:19"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8466:6:19"},"nodeType":"YulFunctionCall","src":"8466:40:19"},"nodeType":"YulIf","src":"8463:60:19"},{"nodeType":"YulAssignment","src":"8532:15:19","value":{"name":"value","nodeType":"YulIdentifier","src":"8542:5:19"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8532:6:19"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8320:9:19","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8331:7:19","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8343:6:19","type":""}],"src":"8276:277:19"},{"body":{"nodeType":"YulBlock","src":"8590:152:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8607:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8610:77:19","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8600:6:19"},"nodeType":"YulFunctionCall","src":"8600:88:19"},"nodeType":"YulExpressionStatement","src":"8600:88:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8704:1:19","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"8707:4:19","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8697:6:19"},"nodeType":"YulFunctionCall","src":"8697:15:19"},"nodeType":"YulExpressionStatement","src":"8697:15:19"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8728:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8731:4:19","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8721:6:19"},"nodeType":"YulFunctionCall","src":"8721:15:19"},"nodeType":"YulExpressionStatement","src":"8721:15:19"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"8558:184:19"},{"body":{"nodeType":"YulBlock","src":"8794:148:19","statements":[{"body":{"nodeType":"YulBlock","src":"8885:22:19","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"8887:16:19"},"nodeType":"YulFunctionCall","src":"8887:18:19"},"nodeType":"YulExpressionStatement","src":"8887:18:19"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8810:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"8817:66:19","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8807:2:19"},"nodeType":"YulFunctionCall","src":"8807:77:19"},"nodeType":"YulIf","src":"8804:103:19"},{"nodeType":"YulAssignment","src":"8916:20:19","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8927:5:19"},{"kind":"number","nodeType":"YulLiteral","src":"8934:1:19","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8923:3:19"},"nodeType":"YulFunctionCall","src":"8923:13:19"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"8916:3:19"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8776:5:19","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"8786:3:19","type":""}],"src":"8747:195:19"},{"body":{"nodeType":"YulBlock","src":"9077:201:19","statements":[{"body":{"nodeType":"YulBlock","src":"9115:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9124:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9127:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9117:6:19"},"nodeType":"YulFunctionCall","src":"9117:12:19"},"nodeType":"YulExpressionStatement","src":"9117:12:19"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"9093:10:19"},{"name":"endIndex","nodeType":"YulIdentifier","src":"9105:8:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9090:2:19"},"nodeType":"YulFunctionCall","src":"9090:24:19"},"nodeType":"YulIf","src":"9087:44:19"},{"body":{"nodeType":"YulBlock","src":"9164:16:19","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9173:1:19","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9176:1:19","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9166:6:19"},"nodeType":"YulFunctionCall","src":"9166:12:19"},"nodeType":"YulExpressionStatement","src":"9166:12:19"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"9146:8:19"},{"name":"length","nodeType":"YulIdentifier","src":"9156:6:19"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9143:2:19"},"nodeType":"YulFunctionCall","src":"9143:20:19"},"nodeType":"YulIf","src":"9140:40:19"},{"nodeType":"YulAssignment","src":"9189:36:19","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9206:6:19"},{"name":"startIndex","nodeType":"YulIdentifier","src":"9214:10:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9202:3:19"},"nodeType":"YulFunctionCall","src":"9202:23:19"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"9189:9:19"}]},{"nodeType":"YulAssignment","src":"9234:38:19","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"9251:8:19"},{"name":"startIndex","nodeType":"YulIdentifier","src":"9261:10:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9247:3:19"},"nodeType":"YulFunctionCall","src":"9247:25:19"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"9234:9:19"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"9011:6:19","type":""},{"name":"length","nodeType":"YulTypedName","src":"9019:6:19","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"9027:10:19","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"9039:8:19","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"9052:9:19","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"9063:9:19","type":""}],"src":"8947:331:19"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$645__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Mintable_$743__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := abi_decode_address(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value3, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 52), value2)\n        mstore(add(pos, 84), value3)\n        end := add(pos, 116)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_uint256_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_stringliteral_2469fde0322cb080dc0c4c1597413c949df8b57fff0bf70bc2bc23d3bfd03300__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"InterfaceDetection: wrong value\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_45897ac610c748db18f796f46ae9e6e3b4beb760b4520558ccc6eb1128554a66__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Ownership: not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":19,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"509":[{"length":32,"start":302},{"length":32,"start":467},{"length":32,"start":3481},{"length":32,"start":3617},{"length":32,"start":3796},{"length":32,"start":3858}],"1369":[{"length":32,"start":398},{"length":32,"start":1887}],"1372":[{"length":32,"start":541},{"length":32,"start":1560}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063d1a91ff211610066578063d1a91ff214610256578063dc45def61461025e578063e3a0ce09146102a7578063f2fde38b146102ca57600080fd5b80638da5cb5b146102105780639dfbcde814610218578063ba65912e1461024d57600080fd5b806331e66e1e116100c857806331e66e1e146101735780633a5af339146101895780633ec6004f146101b0578063572b6c05146101c357600080fd5b806301ffc9a7146100ef5780630328a8fc146101175780632b4c9f161461012c575b600080fd5b6101026100fd3660046110b7565b6102dd565b60405190151581526020015b60405180910390f35b61012a6101253660046110f9565b6102f7565b005b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010e565b61017b6103de565b60405161010e92919061112b565b61014e7f000000000000000000000000000000000000000000000000000000000000000081565b61012a6101be3660046111a1565b6103f1565b6101026101d1366004611243565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b61014e610824565b61023f7f000000000000000000000000000000000000000000000000000000000000000081565b60405190815260200161010e565b61023f60005481565b61014e610850565b61028c61026c36600461125e565b600160208190526000918252604090912080549181015460029091015483565b6040805193845260208401929092529082015260600161010e565b6101026102b536600461125e565b60026020526000908152604090205460ff1681565b61012a6102d8366004611243565b61085a565b60006102f1826102eb610967565b90610aa1565b92915050565b610310610302610b7b565b61030a610878565b90610b85565b6000848152600160205260409020541561035e576040517fed10979d000000000000000000000000000000000000000000000000000000008152600481018590526024015b60405180910390fd5b604080516060810182528481526020808201858152828401858152600089815260018085529086902094518555915191840191909155516002909201919091558151848152908101839052849186917f91a4b7a2b4c6a1702be62e3b867cf7e4dbbd496a4707e8d66638d99b3946a8da910160405180910390a350505050565b3660006103e9610c08565b915091509091565b6000868152600160205260409020805461043a576040517f84f229dc00000000000000000000000000000000000000000000000000000000815260048101889052602401610355565b806001015442108061044f5750806002015442115b1561048f576040517fdbeb4f4d00000000000000000000000000000000000000000000000000000000815260048101889052426024820152604401610355565b60408051602081018990527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1691810191909152605481018490526074810183905260009060940160405160208183030381529060405280519060200120905061053a826000015482898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610c139050565b61059d576040517fcb4da9460000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff861660248201526044810185905260648101849052608401610355565b60008181526002602052604090205460ff1615610613576040517fc5ac808b0000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff861660248201526044810185905260648101849052608401610355565b6000547f000000000000000000000000000000000000000000000000000000000000000061064185836112a6565b11156106ba578886868661065581866112a6565b6040517f6073f612000000000000000000000000000000000000000000000000000000008152600481019590955273ffffffffffffffffffffffffffffffffffffffff909316602485015260448401919091526064830152608482015260a401610355565b6106c484826112a6565b60009081558281526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517f5cfa929700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff888116600483015260248201889052604482018790526080606483015260848201929092527f000000000000000000000000000000000000000000000000000000000000000090911690635cfa92979060a401600060405180830381600087803b1580156107a557600080fd5b505af11580156107b9573d6000803e3d6000fd5b505084546040805191825260208201899052810187905273ffffffffffffffffffffffffffffffffffffffff891692508b91507f3b7a2657cb0a2501536d45aeb61ad8088337c70086ba7d3b078cf6592597c3c99060600160405180910390a3505050505050505050565b600061084b610831610878565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600061084b610b7b565b610875610865610b7b565b8261086e610878565b9190610c29565b50565b6000806102f160017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6112b9565b73ffffffffffffffffffffffffffffffffffffffff81161561092e5781547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6109637f7f5828d000000000000000000000000000000000000000000000000000000000600161095c610967565b9190610995565b5050565b6000806102f160017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6112b9565b7c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f496e74657266616365446574656374696f6e3a2077726f6e672076616c7565006044820152606401610355565b7fffffffff00000000000000000000000000000000000000000000000000000000919091166000908152602092909252604090912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610af1575060006102f1565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610b42575060016102f1565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600061084b610d56565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610355565b3660006103e9610e9d565b600082610c208584611007565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610cae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4f776e6572736869703a206e6f7420746865206f776e657200000000000000006044820152606401610355565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d505783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610d665750601836105b15610d7057503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610e8c57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610e68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8c91906112cc565b15610e9657919050565b3391505090565b36600033321480610eae5750601836105b15610ebc5750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610ff1575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff191906112cc565b15610ffe576103e9611054565b50600091369150565b600081815b845181101561104c576110388286838151811061102b5761102b6112ee565b6020026020010151611085565b9150806110448161131d565b91505061100c565b509392505050565b3660006103e97fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611355565b60008183106110a15760008281526020849052604090206110b0565b60008381526020839052604090205b9392505050565b6000602082840312156110c957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146110b057600080fd5b6000806000806080858703121561110f57600080fd5b5050823594602084013594506040840135936060013592509050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461119c57600080fd5b919050565b60008060008060008060a087890312156111ba57600080fd5b86359550602087013567ffffffffffffffff808211156111d957600080fd5b818901915089601f8301126111ed57600080fd5b8135818111156111fc57600080fd5b8a60208260051b850101111561121157600080fd5b60208301975080965050505061122960408801611178565b925060608701359150608087013590509295509295509295565b60006020828403121561125557600080fd5b6110b082611178565b60006020828403121561127057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156102f1576102f1611277565b818103818111156102f1576102f1611277565b6000602082840312156112de57600080fd5b815180151581146110b057600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361134e5761134e611277565b5060010190565b6000808585111561136557600080fd5b8386111561137257600080fd5b505082019391909203915056fea264697066735822122058751e83fa625a34a7b6deb4bdf05e2da709ac6182f409bf4dfc88413e682a9364736f6c63430008110033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xD1A91FF2 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x256 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x2A7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0x9DFBCDE8 EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0xBA65912E EQ PUSH2 0x24D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x173 JUMPI DUP1 PUSH4 0x3A5AF339 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x1B0 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0x10B7 JUMP JUMPDEST PUSH2 0x2DD JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0x10F9 JUMP JUMPDEST PUSH2 0x2F7 JUMP JUMPDEST STOP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x17B PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP3 SWAP2 SWAP1 PUSH2 0x112B JUMP JUMPDEST PUSH2 0x14E PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x1BE CALLDATASIZE PUSH1 0x4 PUSH2 0x11A1 JUMP JUMPDEST PUSH2 0x3F1 JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1D1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1243 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x824 JUMP JUMPDEST PUSH2 0x23F PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x23F PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x14E PUSH2 0x850 JUMP JUMPDEST PUSH2 0x28C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x2B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1243 JUMP JUMPDEST PUSH2 0x85A JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2F1 DUP3 PUSH2 0x2EB PUSH2 0x967 JUMP JUMPDEST SWAP1 PUSH2 0xAA1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x310 PUSH2 0x302 PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x30A PUSH2 0x878 JUMP JUMPDEST SWAP1 PUSH2 0xB85 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x35E JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 DUP1 DUP6 MSTORE SWAP1 DUP7 SWAP1 KECCAK256 SWAP5 MLOAD DUP6 SSTORE SWAP2 MLOAD SWAP2 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP3 ADD SWAP2 SWAP1 SWAP2 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP1 DUP2 ADD DUP4 SWAP1 MSTORE DUP5 SWAP2 DUP7 SWAP2 PUSH32 0x91A4B7A2B4C6A1702BE62E3B867CF7E4DBBD496A4707E8D66638D99B3946A8DA SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH2 0xC08 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x43A JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x355 JUMP JUMPDEST DUP1 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0x44F JUMPI POP DUP1 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0x48F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x74 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x94 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH2 0x53A DUP3 PUSH1 0x0 ADD SLOAD DUP3 DUP10 DUP10 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xC13 SWAP1 POP JUMP JUMPDEST PUSH2 0x59D JUMPI PUSH1 0x40 MLOAD PUSH32 0xCB4DA94600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x613 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC5AC808B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x84 ADD PUSH2 0x355 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH32 0x0 PUSH2 0x641 DUP6 DUP4 PUSH2 0x12A6 JUMP JUMPDEST GT ISZERO PUSH2 0x6BA JUMPI DUP9 DUP7 DUP7 DUP7 PUSH2 0x655 DUP2 DUP7 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x6073F61200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE PUSH1 0x44 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x355 JUMP JUMPDEST PUSH2 0x6C4 DUP5 DUP3 PUSH2 0x12A6 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE MLOAD PUSH32 0x5CFA929700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP3 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP4 ADD MSTORE PUSH1 0x84 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0x5CFA9297 SWAP1 PUSH1 0xA4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7B9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP DUP5 SLOAD PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP10 SWAP1 MSTORE DUP2 ADD DUP8 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND SWAP3 POP DUP12 SWAP2 POP PUSH32 0x3B7A2657CB0A2501536D45AEB61AD8088337C70086BA7D3B078CF6592597C3C9 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0x831 PUSH2 0x878 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0xB7B JUMP JUMPDEST PUSH2 0x875 PUSH2 0x865 PUSH2 0xB7B JUMP JUMPDEST DUP3 PUSH2 0x86E PUSH2 0x878 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xC29 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F1 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x12B9 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0x92E JUMPI DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x963 PUSH32 0x7F5828D000000000000000000000000000000000000000000000000000000000 PUSH1 0x1 PUSH2 0x95C PUSH2 0x967 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x995 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2F1 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x12B9 JUMP JUMPDEST PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA3D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E74657266616365446574656374696F6E3A2077726F6E672076616C756500 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xAF1 JUMPI POP PUSH1 0x0 PUSH2 0x2F1 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB42 JUMPI POP PUSH1 0x1 PUSH2 0x2F1 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x84B PUSH2 0xD56 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x963 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH2 0xE9D JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xC20 DUP6 DUP5 PUSH2 0x1007 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E6572736869703A206E6F7420746865206F776E65720000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x355 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xD50 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xD66 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xD70 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE8C JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE8C SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST ISZERO PUSH2 0xE96 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xEAE JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xEBC JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xFF1 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xFCD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xFF1 SWAP2 SWAP1 PUSH2 0x12CC JUMP JUMPDEST ISZERO PUSH2 0xFFE JUMPI PUSH2 0x3E9 PUSH2 0x1054 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x104C JUMPI PUSH2 0x1038 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x102B JUMPI PUSH2 0x102B PUSH2 0x12EE JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1085 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 0x1044 DUP2 PUSH2 0x131D JUMP JUMPDEST SWAP2 POP POP PUSH2 0x100C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x3E9 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1355 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x10A1 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x10B0 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x10B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x110F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x119C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x11BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x11ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x11FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1211 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP POP POP PUSH2 0x1229 PUSH1 0x40 DUP9 ADD PUSH2 0x1178 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1255 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10B0 DUP3 PUSH2 0x1178 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0x2F1 PUSH2 0x1277 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2F1 JUMPI PUSH2 0x2F1 PUSH2 0x1277 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x10B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x134E JUMPI PUSH2 0x134E PUSH2 0x1277 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1372 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PC PUSH22 0x1E83FA625A34A7B6DEB4BDF05E2DA709AC6182F409BF 0x4D 0xFC DUP9 COINBASE RETURNDATACOPY PUSH9 0x2A9364736F6C634300 ADDMOD GT STOP CALLER ","sourceMap":"384:594:18:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;541:174:4;;;;;;:::i;:::-;;:::i;:::-;;;516:14:19;;509:22;491:41;;479:2;464:18;541:174:4;;;;;;;;4844:473:17;;;;;;:::i;:::-;;:::i;:::-;;727:114:7;816:18;727:114;;;1135:42:19;1123:55;;;1105:74;;1093:2;1078:18;727:114:7;933:252:19;882:94:18;;;:::i;:::-;;;;;;;;:::i;1568:49:17:-;;;;;5978:1210;;;;;;:::i;:::-;;:::i;876:157:7:-;;;;;;:::i;:::-;1007:18;986:40;;;;;;;;876:157;709:129:1;;;:::i;1704:36:17:-;;;;;;;;3566:25:19;;;3554:2;3539:18;1704:36:17;3420:177:19;1814:32:17;;;;;;675:91:18;;;:::i;1916:51:17:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3989:25:19;;;4045:2;4030:18;;4023:34;;;;4073:18;;;4066:34;3977:2;3962:18;1916:51:17;3787:319:19;2033:43:17;;;;;;:::i;:::-;;;;;;;;;;;;;;;;872:161:1;;;;;;:::i;:::-;;:::i;541:174:4:-;620:4;643:65;696:11;643:34;:32;:34::i;:::-;:52;;:65::i;:::-;636:72;541:174;-1:-1:-1;;541:174:4:o;4844:473:17:-;4964:70;5021:12;:10;:12::i;:::-;4964:33;:31;:33::i;:::-;:56;;:70::i;:::-;5093:1;5049:21;;;:12;:21;;;;;:32;:46;5045:113;;5118:29;;;;;;;;3566:25:19;;;3539:18;;5118:29:17;;;;;;;;5045:113;5192:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5168:21:17;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;5251:59;;4467:25:19;;;4508:18;;;4501:34;;;5192:43:17;;5168:21;;5251:59;;4440:18:19;5251:59:17;;;;;;;4844:473;;;;:::o;882:94:18:-;926:14;;959:10;:8;:10::i;:::-;952:17;;;;882:94;;:::o;5978:1210:17:-;6101:31;6135:21;;;:12;:21;;;;;6170:22;;6166:99;;6229:25;;;;;;;;3566::19;;;3539:18;;6229:25:17;3420:177:19;6166:99:17;6296:11;:21;;;6278:15;:39;:80;;;;6339:11;:19;;;6321:15;:37;6278:80;6274:160;;;6381:42;;;;;;;;4467:25:19;;;6407:15:17;4508:18:19;;;4501:34;4440:18;;6381:42:17;4293:248:19;6274:160:17;6469:47;;;;;;5012:19:19;;;5082:66;5069:2;5065:15;;;5061:88;5047:12;;;5040:110;;;;5166:12;;;5159:28;;;5203:12;;;5196:28;;;6444:12:17;;5240:13:19;;6469:47:17;;;;;;;;;;;;6459:58;;;;;;6444:73;;6532:42;6545:11;:22;;;6569:4;6532:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6532:12:17;;:42;;-1:-1:-1;;6532:12:17;:42;-1:-1:-1;6532:42:17:i;:::-;6527:99;;6583:43;;;;;;;;5495:25:19;;;5568:42;5556:55;;5536:18;;;5529:83;5628:18;;;5621:34;;;5671:18;;;5664:34;;;5467:19;;6583:43:17;5264:440:19;6527:99:17;6641:17;;;;:11;:17;;;;;;;;6637:75;;;6667:45;;;;;;;;5495:25:19;;;5568:42;5556:55;;5536:18;;;5529:83;5628:18;;;5621:34;;;5671:18;;;5664:34;;;5467:19;;6667:45:17;5264:440:19;6637:75:17;6723:29;6755:17;6818:11;6786:29;6810:5;6755:17;6786:29;:::i;:::-;:43;6782:161;;;6871:7;6880:9;6891:2;6895:5;6902:29;6895:5;6902:21;:29;:::i;:::-;6852:80;;;;;;;;6287:25:19;;;;6360:42;6348:55;;;6328:18;;;6321:83;6420:18;;;6413:34;;;;6463:18;;;6456:34;6506:19;;;6499:35;6259:19;;6852:80:17;6028:512:19;6782:161:17;6973:29;6997:5;6973:21;:29;:::i;:::-;6953:17;:49;;;7012:17;;;:11;:17;;;;;;:24;;;;7032:4;7012:24;;;7047:50;;;;:24;6830:55:19;;;7047:50:17;;;6812:74:19;6902:18;;;6895:34;;;6945:18;;;6938:34;;;7008:3;6988:18;;;6981:31;7028:19;;;7021:30;;;;7047:15:17;:24;;;;;;7068:19:19;;7047:50:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;7147:22:17;;7113:68;;;3989:25:19;;;4045:2;4030:18;;4023:34;;;4073:18;;4066:34;;;7113:68:17;;;;-1:-1:-1;7127:7:17;;-1:-1:-1;7113:68:17;;3977:2:19;3962:18;7113:68:17;;;;;;;6091:1097;;;5978:1210;;;;;;:::o;709:129:1:-;764:7;790:41;:33;:31;:33::i;:::-;3352:15:3;;;;3256:118;790:41:1;783:48;;709:129;:::o;675:91:18:-;721:7;747:12;:10;:12::i;872:161:1:-;951:75;1003:12;:10;:12::i;:::-;1017:8;951:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;872:161;:::o;3707:174:3:-;3748:16;;601:71;671:1;609:58;601:71;:::i;1332:341::-;1420:26;;;;1416:152;;1462:30;;;;;;;;;;;;1511:46;;-1:-1:-1;;1511:46:3;;-1:-1:-1;;1511:46:3;1416:152;1577:89;1634:25;1661:4;1577:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1332:341;;:::o;1613:174:6:-;1654:16;;287:79;365:1;295:66;287:79;:::i;670:246::-;782:35;797:20;782:35;;;774:79;;;;;;;7433:2:19;774:79:6;;;7415:21:19;7472:2;7452:18;;;7445:30;7511:33;7491:18;;;7484:61;7562:18;;774:79:6;7231:355:19;774:79:6;863:34;;;;;:21;:34;;;;;;;;;;;;:46;;;;;;;;;;;;;670:246::o;1267:340::-;1355:14;1385:35;1400:20;1385:35;;;1381:78;;-1:-1:-1;1443:5:6;1436:12;;1381:78;1472:40;;;;;1468:82;;-1:-1:-1;1535:4:6;1528:11;;1468:82;-1:-1:-1;1566:34:6;;:21;:34;;;;;;;;;;;;;;;1267:340::o;3944:175:17:-;4045:7;4071:41;:39;:41::i;3540:161:3:-;3650:15;;;3639:26;;;3650:15;;3639:26;3631:63;;;;;;;7793:2:19;3631:63:3;;;7775:21:19;7832:2;7812:18;;;7805:30;7871:26;7851:18;;;7844:54;7915:18;;3631:63:3;7591:348:19;4174:178:17;4273:14;;4306:39;:37;:39::i;1156:184:16:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:16:o;2760:369:3:-;2882:15;;;;;;;2915:23;;;;2907:60;;;;;;;7793:2:19;2907:60:3;;;7775:21:19;7832:2;7812:18;;;7805:30;7871:26;7851:18;;;7844:54;7915:18;;2907:60:3;7591:348:19;2907:60:3;2998:8;2981:25;;:13;:25;;;2977:146;;3022:26;;;;;;;;;;;;;3067:45;;;;;;;;-1:-1:-1;;3067:45:3;2977:146;2848:281;2760:369;;;:::o;781:743:8:-;834:7;1044:10;1058:9;1044:23;;:47;;-1:-1:-1;1089:2:8;1071:8;:20;1044:47;1040:95;;;-1:-1:-1;1114:10:8;;781:743::o;1040:95::-;461:23:11;465:14;461:23;448:37;444:2;440:46;1369:18:8;1347:41;;:10;:41;;:103;;-1:-1:-1;1392:58:8;;;;;:38;8197:15:19;;;1392:58:8;;;8179:34:19;1439:10:8;8229:18:19;;;8222:43;1392:18:8;:38;;;;8091:18:19;;1392:58:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1343:147;;;1473:6;781:743;-1:-1:-1;781:743:8:o;1343:147::-;1507:10;1500:17;;;781:743;:::o;1638:733::-;1689:14;;1906:10;1920:9;1906:23;;:47;;-1:-1:-1;1951:2:8;1933:8;:20;1906:47;1902:93;;;-1:-1:-1;1976:8:8;;;;-1:-1:-1;1638:733:8:o;1902:93::-;2156:10;:41;2178:18;2156:41;;;:124;;-1:-1:-1;2201:38:8;:18;:38;;465:14:11;461:23;;448:37;444:2;440:46;2201:79:8;;;;;;;;;;8128:42:19;8197:15;;;2201:79:8;;;8179:34:19;2269:10:8;8229:18:19;;;8222:43;8091:18;;2201:79:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2152:187;;;2303:25;:23;:25::i;2152:187::-;-1:-1:-1;2356:8:8;;;;-1:-1:-1;1638:733:8:o;1994:290:16:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:16;;;;:::i;:::-;;;;2133:116;;;-1:-1:-1;2265:12:16;1994:290;-1:-1:-1;;;1994:290:16:o;615:152:11:-;657:19;;719:31;729:20;;;657:19;;;719:31;:::i;8879:147:16:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:16:o;14:332:19:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:385;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;746:23:19;;;816:2;801:18;;788:32;;-1:-1:-1;867:2:19;852:18;;839:32;;918:2;903:18;890:32;;-1:-1:-1;543:385:19;-1:-1:-1;543:385:19:o;1190:447::-;1347:2;1336:9;1329:21;1386:6;1381:2;1370:9;1366:18;1359:34;1443:6;1435;1430:2;1419:9;1415:18;1402:48;1499:1;1470:22;;;1494:2;1466:31;;;1459:42;;;;1553:2;1541:15;;;1558:66;1537:88;1522:104;1518:113;;1190:447;-1:-1:-1;1190:447:19:o;1897:196::-;1965:20;;2025:42;2014:54;;2004:65;;1994:93;;2083:1;2080;2073:12;1994:93;1897:196;;;:::o;2098:895::-;2220:6;2228;2236;2244;2252;2260;2313:3;2301:9;2292:7;2288:23;2284:33;2281:53;;;2330:1;2327;2320:12;2281:53;2366:9;2353:23;2343:33;;2427:2;2416:9;2412:18;2399:32;2450:18;2491:2;2483:6;2480:14;2477:34;;;2507:1;2504;2497:12;2477:34;2545:6;2534:9;2530:22;2520:32;;2590:7;2583:4;2579:2;2575:13;2571:27;2561:55;;2612:1;2609;2602:12;2561:55;2652:2;2639:16;2678:2;2670:6;2667:14;2664:34;;;2694:1;2691;2684:12;2664:34;2747:7;2742:2;2732:6;2729:1;2725:14;2721:2;2717:23;2713:32;2710:45;2707:65;;;2768:1;2765;2758:12;2707:65;2799:2;2795;2791:11;2781:21;;2821:6;2811:16;;;;;2846:38;2880:2;2869:9;2865:18;2846:38;:::i;:::-;2836:48;;2931:2;2920:9;2916:18;2903:32;2893:42;;2982:3;2971:9;2967:19;2954:33;2944:43;;2098:895;;;;;;;;:::o;2998:186::-;3057:6;3110:2;3098:9;3089:7;3085:23;3081:32;3078:52;;;3126:1;3123;3116:12;3078:52;3149:29;3168:9;3149:29;:::i;3602:180::-;3661:6;3714:2;3702:9;3693:7;3689:23;3685:32;3682:52;;;3730:1;3727;3720:12;3682:52;-1:-1:-1;3753:23:19;;3602:180;-1:-1:-1;3602:180:19:o;5709:184::-;5761:77;5758:1;5751:88;5858:4;5855:1;5848:15;5882:4;5879:1;5872:15;5898:125;5963:9;;;5984:10;;;5981:36;;;5997:18;;:::i;7098:128::-;7165:9;;;7186:11;;;7183:37;;;7200:18;;:::i;8276:277::-;8343:6;8396:2;8384:9;8375:7;8371:23;8367:32;8364:52;;;8412:1;8409;8402:12;8364:52;8444:9;8438:16;8497:5;8490:13;8483:21;8476:5;8473:32;8463:60;;8519:1;8516;8509:12;8558:184;8610:77;8607:1;8600:88;8707:4;8704:1;8697:15;8731:4;8728:1;8721:15;8747:195;8786:3;8817:66;8810:5;8807:77;8804:103;;8887:18;;:::i;:::-;-1:-1:-1;8934:1:19;8923:13;;8747:195::o;8947:331::-;9052:9;9063;9105:8;9093:10;9090:24;9087:44;;;9127:1;9124;9117:12;9087:44;9156:6;9146:8;9143:20;9140:40;;;9176:1;9173;9166:12;9140:40;-1:-1:-1;;9202:23:19;;;9247:25;;;;;-1:-1:-1;8947:331:19:o"},"gasEstimates":{"creation":{"codeDepositCost":"1009000","executionCost":"infinite","totalCost":"infinite"},"external":{"MINT_SUPPLY()":"infinite","REWARD_CONTRACT()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","claim(bytes32,bytes32[],address,uint256,uint256)":"infinite","claimStatus(bytes32)":"2505","claimWindows(bytes32)":"6757","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","noOfTokensClaimed()":"2362","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"MINT_SUPPLY()":"9dfbcde8","REWARD_CONTRACT()":"3a5af339","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","claim(bytes32,bytes32[],address,uint256,uint256)":"3ec6004f","claimStatus(bytes32)":"e3a0ce09","claimWindows(bytes32)":"dc45def6","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","noOfTokensClaimed()":"ba65912e","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintSupply\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalClaimed\",\"type\":\"uint256\"}],\"name\":\"ExceededMintSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"SetEpochMerkleRoot\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINT_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IERC1155Mintable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noOfTokensClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"details\":\"Reverts if the epoch ID does not existReverts if the claim window is closed or has not yet opened.Reverts if the proof provided for the claim is invalid.Reverts if the payout has already been claimed.Reverts if the number of tokens claimed exceeds the mint supply.\",\"params\":{\"epochId\":\"The epoch ID for the claim.\",\"id\":\"The ID of the token to claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\",\"value\":\"The value of the token to claim.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if the _msgSender() is not the owner.Reverts if the epoch ID has already been set.Emits a SetEpochMerkleRoot event.\",\"params\":{\"endTime\":\"The end time of the claim window.     \",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,address,uint256,uint256)\":[{\"notice\":\"Thrown when the payout has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Thrown when the epoch ID exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Thrown when the epoch ID does not exist.\"}],\"ExceededMintSupply(bytes32,address,uint256,uint256,uint256)\":[{\"notice\":\"Thrown when the number of tokens claimed exceeds the mint supply.\"}],\"InvalidProof(bytes32,address,uint256,uint256)\":[{\"notice\":\"Thrown when the proof provided for the claim is invalid.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,address,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a claim window is set.\"}},\"kind\":\"user\",\"methods\":{\"MINT_SUPPLY()\":{\"notice\":\"The total number of tokens that can be minted in this contract.\"},\"REWARD_CONTRACT()\":{\"notice\":\"The ERC1155Mintable reward contract.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"notice\":\"Claims the payout for a specific epoch.\"},\"claimStatus(bytes32)\":{\"notice\":\"Mapping from leafhash to the claim status.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"noOfTokensClaimed()\":{\"notice\":\"The total number of tokens that have been claimed.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":\"AnichessERC1155MerkleClaimMock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x7c8f90c1f72ccdd900c212f4d0067907c906e4a64856f1b67fee7f7ec13e1f74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is Context, IERC173 {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual override returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual override {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xd408d65cc5a0377e5310695c67400dfbd397d6537398d384a70f09b3bfdf8262\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xc938fcb56171d690dde7435baa80efac146f31165fbad01b6b7db82386b1b893\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        require(sender == previousOwner, \\\"Ownership: not the owner\\\");\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        require(account == s.contractOwner, \\\"Ownership: not the owner\\\");\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd8c069442d3de596ee13824f700ef4d640e1429aeaa6b82bfd919f177c656fb3\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view override returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xef423b77e65093f86e7f7ffc35e41f7008304976a7334bb3f9049db69d43eae9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x200c309a198b4f2d5d09ee3ef155ebdb8d8075e205dab2d973139c7ac01c8785\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Reverts if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        require(interfaceId != ILLEGAL_INTERFACE_ID, \\\"InterfaceDetection: wrong value\\\");\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa16ca8fae4e72b9e4ba99df2efe41889f330544ac611b65a92b1a358d334fce2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _forwarderRegistry;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual override returns (bool) {\\n        return forwarder == address(_forwarderRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x342d82e87a2083375ce1a2143d2eceaacc4b3c4881192d655168f812034ab62a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _forwarderRegistry;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _forwarderRegistry = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_forwarderRegistry) || _forwarderRegistry.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xa2e302ddf63a84a87c669bf722ca3071136c545ab836f4a727e88c74ffbf08e2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xc3568432dcadfdcda315a80e0f7edec9b3d751c68ea00c671e86571d02b57e9c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xe3487e6d79da78bc0ea5b4649ca9cc7a0376800280e3e389a5e70fc7ced74d00\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0801057ee04e34e7600d05383d0cbd6f62433028e9d597cf30c672540c2bdfc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        require(currentVersion.value < phase, \\\"Storage: phase reached\\\");\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x15087049c228af4a35975ffcb40747ebceefac58be278a7f2903a9f70c54fa63\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5190c92c.\\ninterface IERC1155Mintable {\\n    /// @notice Safely mints some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance of `id` overflows.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to mint.\\n    /// @param value Amount of token to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeMint(address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely mints a batch of tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `to`'s balance overflows for one of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155batchReceived} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to mint.\\n    /// @param values Amounts of tokens to mint.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchMint(address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xb1629ac1cd8a9dbe400d5ab7b4ac0955e0003209cc5745909c29f1f4bc891434\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessERC1155MerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess ERC1155 Merkle Claim Contract\\n * @dev This contract allows users to claim rewards based on a Merkle proof, which verifies that they are\\n * @dev entitled to the rewards without revealing the entire list of recipients.\\n */\\ncontract AnichessERC1155MerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice The ERC1155Mintable reward contract.\\n    IERC1155Mintable public immutable REWARD_CONTRACT;\\n\\n    /// @notice The total number of tokens that can be minted in this contract.\\n    uint256 public immutable MINT_SUPPLY;\\n\\n    /// @notice The total number of tokens that have been claimed.\\n    uint256 public noOfTokensClaimed;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 => ClaimWindow) public claimWindows;\\n\\n    /// @notice Mapping from leafhash to the claim status.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice Emitted when a payout is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, address indexed recipient, bytes32 merkleRoot, uint256 id, uint256 value);\\n\\n    /// @notice Emitted when a claim window is set.\\n    event SetEpochMerkleRoot(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 endTime);\\n\\n    /// @notice Thrown when the payout has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, address recipient, uint256 id, uint256 value);\\n\\n    /// @notice Thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient, uint256 id, uint256 value);\\n\\n    /// @notice Thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Thrown when the number of tokens claimed exceeds the mint supply.\\n    error ExceededMintSupply(bytes32 epochId, address recipient, uint256 id, uint256 value, uint256 totalClaimed);\\n\\n    /// @notice Thrown when the epoch ID exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /**\\n     * @notice Constructor for the AnichessERC1155MerkleClaim contract.\\n     * @param mintSupply The total number of tokens that can be minted in this contract.\\n     * @param rewardContract The ERC1155Mintable reward contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        MINT_SUPPLY = mintSupply;\\n        REWARD_CONTRACT = rewardContract;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if the _msgSender() is not the owner.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a SetEpochMerkleRoot event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.     \\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit SetEpochMerkleRoot(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch.\\n     * @dev Reverts if the epoch ID does not exist\\n     * @dev Reverts if the claim window is closed or has not yet opened.\\n     * @dev Reverts if the proof provided for the claim is invalid.\\n     * @dev Reverts if the payout has already been claimed.\\n     * @dev Reverts if the number of tokens claimed exceeds the mint supply.\\n     * @param epochId The epoch ID for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @param id The ID of the token to claim.\\n     * @param value The value of the token to claim.\\n     */\\n    function claim(bytes32 epochId, bytes32[] calldata proof, address recipient, uint256 id, uint256 value) external {\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            revert EpochIdNotExists(epochId);\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        }\\n\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, id, value));\\n        if (!proof.verify(claimWindow.merkleRoot, leaf)) revert InvalidProof(epochId, recipient, id, value);\\n\\n        if (claimStatus[leaf]) revert AlreadyClaimed(epochId, recipient, id, value);\\n\\n        uint256 prevNoOfTokensClaimed = noOfTokensClaimed;\\n        if (prevNoOfTokensClaimed + value > MINT_SUPPLY) {\\n            revert ExceededMintSupply(epochId, recipient, id, value, prevNoOfTokensClaimed + value);\\n        }\\n\\n        noOfTokensClaimed = prevNoOfTokensClaimed + value;\\n        claimStatus[leaf] = true;\\n\\n        REWARD_CONTRACT.safeMint(recipient, id, value, \\\"\\\");\\n\\n        emit PayoutClaimed(epochId, recipient, claimWindow.merkleRoot, id, value);\\n    }\\n}\\n\",\"keccak256\":\"0xa6c17ef97c9d4f22695cdd3b5bc25740f0b3034a0d5b8f5adeb433b4d5e9e0fd\",\"license\":\"MIT\"},\"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {AnichessERC1155MerkleClaim} from \\\"../../merkleClaim/AnichessERC1155MerkleClaim.sol\\\";\\nimport {IERC1155Mintable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Mintable.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract AnichessERC1155MerkleClaimMock is AnichessERC1155MerkleClaim {\\n    constructor(\\n        uint256 mintSupply,\\n        IERC1155Mintable rewardContract,\\n        IForwarderRegistry forwarderRegistry\\n    ) AnichessERC1155MerkleClaim(mintSupply, rewardContract, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x476c4dbd18c9b836cf92fbf3fa06c2a74ade732c52eece4e7d9ab2cda30e643e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1375,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"noOfTokensClaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":1381,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)1365_storage)"},{"astId":1386,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)1365_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct AnichessERC1155MerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)1365_storage"},"t_struct(ClaimWindow)1365_storage":{"encoding":"inplace","label":"struct AnichessERC1155MerkleClaim.ClaimWindow","members":[{"astId":1360,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":1362,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":1364,"contract":"contracts/mocks/merkleClaim/AnichessERC1155MerkleClaimMock.sol:AnichessERC1155MerkleClaimMock","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,address,uint256,uint256)":[{"notice":"Thrown when the payout has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Thrown when the epoch ID exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Thrown when the epoch ID does not exist."}],"ExceededMintSupply(bytes32,address,uint256,uint256,uint256)":[{"notice":"Thrown when the number of tokens claimed exceeds the mint supply."}],"InvalidProof(bytes32,address,uint256,uint256)":[{"notice":"Thrown when the proof provided for the claim is invalid."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Thrown when the claim window is closed or has not yet opened."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,address,bytes32,uint256,uint256)":{"notice":"Emitted when a payout is claimed."},"SetEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Emitted when a claim window is set."}},"kind":"user","methods":{"MINT_SUPPLY()":{"notice":"The total number of tokens that can be minted in this contract."},"REWARD_CONTRACT()":{"notice":"The ERC1155Mintable reward contract."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"claim(bytes32,bytes32[],address,uint256,uint256)":{"notice":"Claims the payout for a specific epoch."},"claimStatus(bytes32)":{"notice":"Mapping from leafhash to the claim status."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"noOfTokensClaimed()":{"notice":"The total number of tokens that have been claimed."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}