{"id":"0ff91915e5a818d8a213020f1da280e7","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (\n            msg.sender == address(_FORWARDER_REGISTRY) ||\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\n        ) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Meta-Transactions Forwarder Registry.\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @param target The target contract.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Address {\n    /// @notice Checks if the address is a deployed smart contract.\n    /// @param addr The address to check.\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\n    function hasBytecode(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size != 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library of standard hash functions.\n *\n * _Available since v5.1._\n */\nlibrary Hashes {\n    /**\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n     *\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n     */\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\n    }\n\n    /**\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\n     */\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly (\"memory-safe\") {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\n\npragma solidity ^0.8.20;\n\nimport {Hashes} from \"./Hashes.sol\";\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the Merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\n * against this attack out of the box.\n *\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\n * that access memory in an unsafe way.\n *\n * NOTE: This library supports proof verification for merkle trees built using\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n * leaf inclusion in trees built using non-commutative hashing functions requires\n * additional logic that is not supported by this library.\n */\nlibrary MerkleProof {\n    /**\n     *@dev The multiproof provided is not valid.\n     */\n    error MerkleProofInvalidMultiproof();\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with the default hashing function.\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProof(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in memory with a custom hashing function.\n     */\n    function processProof(\n        bytes32[] memory proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with the default hashing function.\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processProofCalldata(proof, leaf, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leaves & pre-images are assumed to be sorted.\n     *\n     * This version handles proofs in calldata with a custom hashing function.\n     */\n    function processProofCalldata(\n        bytes32[] calldata proof,\n        bytes32 leaf,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = hasher(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProof}.\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in memory with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with the default hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * This version handles multiproofs in calldata with a custom hashing function.\n     *\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n     * validating the leaves elsewhere.\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves,\n        function(bytes32, bytes32) view returns (bytes32) hasher\n    ) internal view returns (bytes32 merkleRoot) {\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the Merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 proofFlagsLen = proofFlags.length;\n\n        // Check proof validity.\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\n            revert MerkleProofInvalidMultiproof();\n        }\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value from the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i]\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\n                : proof[proofPos++];\n            hashes[i] = hasher(a, b);\n        }\n\n        if (proofFlagsLen > 0) {\n            if (proofPos != proof.length) {\n                revert MerkleProofInvalidMultiproof();\n            }\n            unchecked {\n                return hashes[proofFlagsLen - 1];\n            }\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IERC20SafeTransfers} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\n\ncontract ERC20ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];    \n\n    /// @notice The status of the claim\n    enum ClaimError {\n        NoError, // 0\n        EpochIdNotExists, // 1\n        OutOfClaimWindow, // 2\n        AlreadyClaimed // 3\n    }\n\n    /// @notice The claim window struct.\n    struct ClaimWindow {\n        bytes32 merkleRoot;\n        uint256 startTime;\n        uint256 endTime;\n    }\n\n    /// @notice a reference to the reward token contract\n    IERC20SafeTransfers public immutable ERC20_TOKEN;\n\n    /// @notice a reference to the staking pool contract\n    address public immutable STAKING_POOL;\n\n    /// @notice The address of the token holder wallet.\n    address public tokenHolderWallet;\n\n    /// @notice Mapping from the epoch ID to the claim window.\n    mapping(bytes32 epochId => ClaimWindow) public claimWindows;\n\n    /// @notice leaf hash to claimed state\n    mapping(bytes32 leaf => bool claimed) public claimed;\n\n    /// @notice Event emitted when the token holder wallet is set.\n    /// @param newTokenHolderWallet The address of the new token holder wallet.\n    event TokenHolderWalletSet(address indexed newTokenHolderWallet);\n\n    /// @notice Event emitted when a claim window is set.\n    /// @param epochId The unique epoch ID associated with the specified claim window.\n    /// @param merkleRoot The merkle root in the claim window.\n    /// @param startTime The start time of the claim window.\n    /// @param endTime The end time of the claim window.\n    event EpochMerkleRootSet(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 indexed endTime);\n\n    /// @notice Emitted when a payout is claimed.\n    /// @param epochId The unique epoch ID associated with the claim window.\n    /// @param root The merkle root of the claim window.\n    /// @param recipient The recipient of the checkmate token.\n    /// @param amount The amount of checkmate token is claimed.\n    event PayoutClaimed(bytes32 indexed epochId, bytes32 indexed root, address indexed recipient, uint256 amount);\n\n    /// @notice Thrown when the checkmate token contract address is zero.\n    error InvalidERC20Token();\n\n    /// @notice Thrown when the staking pool address is zero.\n    error InvalidStakingPool();\n\n    /// @notice Thrown when the merkle root is zero.\n    error InvalidMerkleRoot();\n\n    /// @notice Error thrown when the claim window is invalid.\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\n\n    /// @notice Error thrown when the epoch ID already exists.\n    error EpochIdAlreadyExists(bytes32 epochId);\n\n    /// @notice Error thrown when the proof provided for the claim is invalid.\n    error InvalidProof(bytes32 epochId, address recipient, uint256 amount);\n\n    /// @notice Error thrown when the epoch ID does not exist.\n    error EpochIdNotExists(bytes32 epochId);\n\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\n\n    /// @notice Error thrown when the leaf has already been claimed.\n    error AlreadyClaimed(bytes32 epochId, bytes32 leaf);\n\n    constructor(\n        address erc20Token_,\n        address stakingPool_,\n        address tokenHolderWallet_,\n        IForwarderRegistry forwarderRegistry_\n    ) ForwarderRegistryContext(forwarderRegistry_) ContractOwnership(msg.sender) {\n        if (erc20Token_ == address(0)) {\n            revert InvalidERC20Token();\n        }\n        ERC20_TOKEN = IERC20SafeTransfers(erc20Token_);\n\n        if (stakingPool_ == address(0)) {\n            revert InvalidStakingPool();\n        }\n        STAKING_POOL = stakingPool_;\n\n        tokenHolderWallet = tokenHolderWallet_;\n        emit TokenHolderWalletSet(tokenHolderWallet_);\n    }\n\n    /**\n     * @notice Sets the merkle root for a specific epoch with start and end time.\n     * @dev Reverts if _msgSender() is not the owner.\n     * @dev Reverts if the merkle root is zero.\n     * @dev Reverts if the claim window is invalid.\n     * @dev Reverts if the epoch ID has already been set.\n     * @dev Emits a {EpochMerkleRootSet} event.\n     * @param epochId The epoch ID for the claim.\n     * @param merkleRoot The Merkle root of the claim.\n     * @param startTime The start time of the claim window.\n     * @param endTime The end time of the claim window.\n     */\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        if (merkleRoot == bytes32(0)) {\n            revert InvalidMerkleRoot();\n        }\n\n        if (startTime >= endTime || endTime <= block.timestamp) {\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\n        }\n\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\n            revert EpochIdAlreadyExists(epochId);\n        }\n\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\n\n        emit EpochMerkleRootSet(epochId, merkleRoot, startTime, endTime);\n    }\n\n    /**\n     * @notice Sets the token holder wallet address.\n     * @dev Reverts if _msgSender() is not the owner.\n     * @dev Emits a {TokenHolderWalletSet} event.\n     * @param newTokenHolderWallet The address of the new token holder wallet.\n     */\n    function setTokenHolderWallet(address newTokenHolderWallet) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        tokenHolderWallet = newTokenHolderWallet;\n        emit TokenHolderWalletSet(newTokenHolderWallet);\n    }\n\n    /**\n     * @notice Claims the payout for a specific epoch and stake.\n     * @dev Reverts with {EpochIdNotExists} if epoch id does not exist.\n     * @dev Reverts with {OutOfClaimWindow} if current block time is beyond claim window.\n     * @dev Reverts with {AlreadyClaimed} if the specified payout has already been claimed.\n     * @dev Reverts with {InvalidProof} if the merkle proof has failed the verification.\n     * @dev Reverts with {TransferFailed} if checkmate token transfer fails.\n     * @dev Emits a {PayoutClaimed} event.\n     * @param epochId The unique epoch ID associated with the claim window.\n     * @param recipient The recipient of the checkmate token.\n     * @param amount The amount of checkmate token to be claimed.\n     * @param proof The Merkle proof for the claim.\n     */\n    function claimAndStake(bytes32 epochId, address recipient, uint256 amount, bytes32[] calldata proof) external {\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, amount));\n        ClaimWindow storage claimWindow = claimWindows[epochId];\n\n        ClaimError canClaimResult = _canClaim(claimWindow, leaf);\n        if (canClaimResult == ClaimError.EpochIdNotExists) {\n            revert EpochIdNotExists(epochId);\n        } else if (canClaimResult == ClaimError.OutOfClaimWindow) {\n            revert OutOfClaimWindow(epochId, block.timestamp);\n        } else if (canClaimResult == ClaimError.AlreadyClaimed) {\n            revert AlreadyClaimed(epochId, leaf);\n        }\n\n        bytes32 root = claimWindow.merkleRoot;\n        if (!proof.verifyCalldata(root, leaf)) {\n            revert InvalidProof(epochId, recipient, amount);\n        }\n\n        claimed[leaf] = true;\n\n        ERC20_TOKEN.safeTransferFrom(tokenHolderWallet, STAKING_POOL, amount, abi.encode(recipient));\n        emit PayoutClaimed(epochId, root, recipient, amount);\n    }\n\n    /**\n     * @notice Checks if a recipient can claim a reward for a given epoch id\n     * @param epochId The unique epoch ID associated with the claim window.\n     * @param recipient The recipient of the checkmate token.\n     * @param amount The amount of checkmate token to be claimed.\n     */\n    function canClaim(bytes32 epochId, address recipient, uint256 amount) external view returns (ClaimError) {\n        return _canClaim(claimWindows[epochId], keccak256(abi.encodePacked(epochId, recipient, amount)));\n    }\n\n    /**\n     * @notice\n     * 1) Returns ClaimError.EpochIdNotExists if merkle root of the claim window has not been set,\n     * 2) Returns ClaimError.OutOfClaimWindow if current time is beyond start time and end time of the claim window,\n     * 3) Returns ClaimError.AlreadyClaimed if recipient has already claimed,\n     * 4) Returns ClaimError.ExceededMintSupply if number of token claimed equals to total supply, and\n     * 5) Returns ClaimError.NoError otherwise.\n     * @param claimWindow The claim window of the claim.\n     * @param leaf The leaf of the claim.\n     */\n\n    function _canClaim(ClaimWindow storage claimWindow, bytes32 leaf) internal view returns (ClaimError) {\n        if (claimWindow.merkleRoot == bytes32(0)) {\n            return ClaimError.EpochIdNotExists;\n        }\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\n            return ClaimError.OutOfClaimWindow;\n        }\n        if (claimed[leaf]) {\n            return ClaimError.AlreadyClaimed;\n        }\n\n        return ClaimError.NoError;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"},"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {ERC20ClaimWindowMerkleClaim} from \"../../merkleClaim/ERC20ClaimWindowMerkleClaim.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\n\ncontract ERC20ClaimWindowMerkleClaimMock is ERC20ClaimWindowMerkleClaim {\n    constructor(\n        address erc20Token_,\n        address stakingPool_,\n        address tokenHolderWallet_,\n        IForwarderRegistry forwarderRegistry_\n    ) ERC20ClaimWindowMerkleClaim(erc20Token_, stakingPool_, tokenHolderWallet_, forwarderRegistry_) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[394],"InterfaceDetection":[424]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":395,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":425,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":424,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":424,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,424,441,80,912,136],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"632:31:0"},"referencedDeclaration":167,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":237,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$167_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,429],"usedEvents":[115]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[912],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[394],"IERC173":[136]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":137,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":395,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":913,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":136,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":912,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,912,136],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"644:31:1"},"referencedDeclaration":167,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[135],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":314,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$167_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[129],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":894,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":301,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$167_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[115]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotPendingContractOwner":[99],"NotTargetContractOwner":[106]},"id":107,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:138:3","text":"@notice Thrown when an account is not the pending contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"61848752","id":99,"name":"NotPendingContractOwner","nameLocation":"374:23:3","nodeType":"ErrorDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"account","nameLocation":"406:7:3","nodeType":"VariableDeclaration","scope":99,"src":"398:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"397:17:3"},"src":"368:47:3"},{"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"417:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":106,"name":"NotTargetContractOwner","nameLocation":"617:22:3","nodeType":"ErrorDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"targetContract","nameLocation":"648:14:3","nodeType":"VariableDeclaration","scope":106,"src":"640:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"account","nameLocation":"672:7:3","nodeType":"VariableDeclaration","scope":106,"src":"664:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:41:3"},"src":"611:70:3"}],"src":"32:650:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferPending":[120],"OwnershipTransferred":[115]},"id":121,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":108,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":109,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":115,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":111,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":115,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":110,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":113,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":115,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":112,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"},{"anonymous":false,"documentation":{"id":116,"nodeType":"StructuredDocumentation","src":"299:121:4","text":"@notice Emitted when a new contract owner is pending.\n @param pendingOwner the address of the new contract owner."},"eventSelector":"fcf6b9a1f453b7c06ba4f44b1f8c38b02e8b90a7bd35bd0d5c43e2deb547f568","id":120,"name":"OwnershipTransferPending","nameLocation":"426:24:4","nodeType":"EventDefinition","parameters":{"id":119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":118,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"467:12:4","nodeType":"VariableDeclaration","scope":120,"src":"451:28:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":117,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:30:4"},"src":"420:61:4"}],"src":"32:450:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[136]},"id":137,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":122,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":123,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":136,"linearizedBaseContracts":[136],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":129,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":136,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":135,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":131,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":133,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":135,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":132,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":136,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":137,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[882],"ContractOwnershipStorage":[394],"IERC173":[136],"InterfaceDetectionStorage":[542],"NotContractOwner":[94],"NotTargetContractOwner":[106],"OwnershipTransferred":[115],"ProxyInitialization":[832],"TargetIsNotAContract":[87]},"id":395,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":138,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":107,"src":"58:97:6","symbolAliases":[{"foreign":{"id":139,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":140,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":142,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":121,"src":"217:66:6","symbolAliases":[{"foreign":{"id":144,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":137,"src":"284:52:6","symbolAliases":[{"foreign":{"id":146,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":883,"src":"337:60:6","symbolAliases":[{"foreign":{"id":148,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":833,"src":"398:84:6","symbolAliases":[{"foreign":{"id":150,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"406:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":395,"sourceUnit":543,"src":"483:104:6","symbolAliases":[{"foreign":{"id":152,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"491:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":394,"linearizedBaseContracts":[394],"name":"ContractOwnershipStorage","nameLocation":"597:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":156,"libraryName":{"id":154,"name":"Address","nameLocations":["634:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":882,"src":"634:7:6"},"nodeType":"UsingForDirective","src":"628:26:6","typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":160,"libraryName":{"id":157,"name":"ContractOwnershipStorage","nameLocations":["665:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"665:24:6"},"nodeType":"UsingForDirective","src":"659:67:6","typeName":{"id":159,"nodeType":"UserDefinedTypeName","pathNode":{"id":158,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:6","719:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"694:31:6"},"referencedDeclaration":167,"src":"694:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":164,"libraryName":{"id":161,"name":"InterfaceDetectionStorage","nameLocations":["737:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"737:25:6"},"nodeType":"UsingForDirective","src":"731:69:6","typeName":{"id":163,"nodeType":"UserDefinedTypeName","pathNode":{"id":162,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:6","793:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"767:32:6"},"referencedDeclaration":452,"src":"767:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":167,"members":[{"constant":false,"id":166,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:6","nodeType":"VariableDeclaration","scope":167,"src":"830:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":165,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:6","nodeType":"StructDefinition","scope":394,"src":"806:52:6","visibility":"public"},{"constant":true,"id":180,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:6","nodeType":"VariableDeclaration","scope":394,"src":"864:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":168,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":173,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":172,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":171,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:6","typeDescriptions":{}}},"id":176,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":169,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":193,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:6","nodeType":"VariableDeclaration","scope":394,"src":"998:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":181,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":186,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":188,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":185,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":184,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:6","typeDescriptions":{}}},"id":189,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":183,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":182,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:6","typeDescriptions":{}}},"id":192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":236,"nodeType":"Block","src":"1635:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":202,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1649:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":203,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:6","typeDescriptions":{}}},"id":206,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":223,"nodeType":"IfStatement","src":"1645:152:6","trueBody":{"id":222,"nodeType":"Block","src":"1677:120:6","statements":[{"expression":{"id":212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":208,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"1691:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":166,"src":"1691:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":211,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1709:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":213,"nodeType":"ExpressionStatement","src":"1691:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1769:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1761:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":215,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:6","typeDescriptions":{}}},"id":218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1761:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":219,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":199,"src":"1773:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":214,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"1740:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"EmitStatement","src":"1735:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":230,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"1868:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$136_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$136_$","typeString":"type(contract IERC173)"}],"id":229,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1863:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1863:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$136","typeString":"type(contract IERC173)"}},"id":232,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1877:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1863:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1890:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":224,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"1806:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$542_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1832:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":541,"src":"1806:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":228,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1841:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":495,"src":"1806:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$452_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":235,"nodeType":"ExpressionStatement","src":"1806:89:6"}]},"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"1133:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":237,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:6","nodeType":"FunctionDefinition","parameters":{"id":200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"s","nameLocation":"1601:1:6","nodeType":"VariableDeclaration","scope":237,"src":"1586:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":196,"nodeType":"UserDefinedTypeName","pathNode":{"id":195,"name":"Layout","nameLocations":["1586:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"1586:6:6"},"referencedDeclaration":167,"src":"1586:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":199,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:6","nodeType":"VariableDeclaration","scope":237,"src":"1604:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":198,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:6"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[],"src":"1635:0:6"},"scope":394,"src":"1561:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":259,"nodeType":"Block","src":"2567:112:6","statements":[{"expression":{"arguments":[{"id":249,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":193,"src":"2606:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2629:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":246,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":832,"src":"2577:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$832_$","typeString":"type(library ProxyInitialization)"}},"id":248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2597:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":831,"src":"2577:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":252,"nodeType":"ExpressionStatement","src":"2577:54:6"},{"expression":{"arguments":[{"id":256,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":243,"src":"2659:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":253,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"2641:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":255,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":237,"src":"2641:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$167_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":258,"nodeType":"ExpressionStatement","src":"2641:31:6"}]},"documentation":{"id":238,"nodeType":"StructuredDocumentation","src":"1908:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":260,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2508:9:6","nodeType":"FunctionDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":241,"mutability":"mutable","name":"s","nameLocation":"2533:1:6","nodeType":"VariableDeclaration","scope":260,"src":"2518:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":240,"nodeType":"UserDefinedTypeName","pathNode":{"id":239,"name":"Layout","nameLocations":["2518:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"2518:6:6"},"referencedDeclaration":167,"src":"2518:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"initialOwner","nameLocation":"2544:12:6","nodeType":"VariableDeclaration","scope":260,"src":"2536:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2517:40:6"},"returnParameters":{"id":245,"nodeType":"ParameterList","parameters":[],"src":"2567:0:6"},"scope":394,"src":"2499:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":300,"nodeType":"Block","src":"3142:281:6","statements":[{"assignments":[272],"declarations":[{"constant":false,"id":272,"mutability":"mutable","name":"previousOwner","nameLocation":"3160:13:6","nodeType":"VariableDeclaration","scope":300,"src":"3152:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":271,"name":"address","nodeType":"ElementaryTypeName","src":"3152:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":275,"initialValue":{"expression":{"id":273,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3176:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":274,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3178:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":166,"src":"3176:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3152:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":276,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3205:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":277,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3215:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3205:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":283,"nodeType":"IfStatement","src":"3201:60:6","trueBody":{"errorCall":{"arguments":[{"id":280,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"3254:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":279,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3237:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":281,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3237:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":282,"nodeType":"RevertStatement","src":"3230:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3275:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"3292:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3275:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":299,"nodeType":"IfStatement","src":"3271:146:6","trueBody":{"id":298,"nodeType":"Block","src":"3302:115:6","statements":[{"expression":{"id":291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":287,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":264,"src":"3316:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3318:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":166,"src":"3316:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":290,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"3334:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3316:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":292,"nodeType":"ExpressionStatement","src":"3316:26:6"},{"eventCall":{"arguments":[{"id":294,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":272,"src":"3382:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":295,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"3397:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":293,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"3361:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3361:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":297,"nodeType":"EmitStatement","src":"3356:50:6"}]}}]},"documentation":{"id":261,"nodeType":"StructuredDocumentation","src":"2685:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":301,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3063:17:6","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":264,"mutability":"mutable","name":"s","nameLocation":"3096:1:6","nodeType":"VariableDeclaration","scope":301,"src":"3081:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":263,"nodeType":"UserDefinedTypeName","pathNode":{"id":262,"name":"Layout","nameLocations":["3081:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"3081:6:6"},"referencedDeclaration":167,"src":"3081:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":266,"mutability":"mutable","name":"sender","nameLocation":"3107:6:6","nodeType":"VariableDeclaration","scope":301,"src":"3099:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":268,"mutability":"mutable","name":"newOwner","nameLocation":"3123:8:6","nodeType":"VariableDeclaration","scope":301,"src":"3115:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":267,"name":"address","nodeType":"ElementaryTypeName","src":"3115:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3080:52:6"},"returnParameters":{"id":270,"nodeType":"ParameterList","parameters":[],"src":"3142:0:6"},"scope":394,"src":"3054:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":313,"nodeType":"Block","src":"3629:39:6","statements":[{"expression":{"expression":{"id":310,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":305,"src":"3646:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":311,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3648:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":166,"src":"3646:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":309,"id":312,"nodeType":"Return","src":"3639:22:6"}]},"documentation":{"id":302,"nodeType":"StructuredDocumentation","src":"3429:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":314,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3559:5:6","nodeType":"FunctionDefinition","parameters":{"id":306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"s","nameLocation":"3580:1:6","nodeType":"VariableDeclaration","scope":314,"src":"3565:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":304,"nodeType":"UserDefinedTypeName","pathNode":{"id":303,"name":"Layout","nameLocations":["3565:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"3565:6:6"},"referencedDeclaration":167,"src":"3565:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3564:18:6"},"returnParameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"contractOwner","nameLocation":"3614:13:6","nodeType":"VariableDeclaration","scope":314,"src":"3606:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"3606:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3605:23:6"},"scope":394,"src":"3550:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":341,"nodeType":"Block","src":"4064:154:6","statements":[{"condition":{"id":327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4078:29:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4079:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4094:11:6","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":881,"src":"4079:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4079:28:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":332,"nodeType":"IfStatement","src":"4074:78:6","trueBody":{"errorCall":{"arguments":[{"id":329,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4137:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":328,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4116:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4116:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":331,"nodeType":"RevertStatement","src":"4109:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":334,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"4177:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":333,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"4169:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$136_$","typeString":"type(contract IERC173)"}},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$136","typeString":"contract IERC173"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4193:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":135,"src":"4169:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":338,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":319,"src":"4204:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4169:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":323,"id":340,"nodeType":"Return","src":"4162:49:6"}]},"documentation":{"id":315,"nodeType":"StructuredDocumentation","src":"3674:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":342,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3949:21:6","nodeType":"FunctionDefinition","parameters":{"id":320,"nodeType":"ParameterList","parameters":[{"constant":false,"id":317,"mutability":"mutable","name":"targetContract","nameLocation":"3979:14:6","nodeType":"VariableDeclaration","scope":342,"src":"3971:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":316,"name":"address","nodeType":"ElementaryTypeName","src":"3971:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":319,"mutability":"mutable","name":"account","nameLocation":"4003:7:6","nodeType":"VariableDeclaration","scope":342,"src":"3995:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":318,"name":"address","nodeType":"ElementaryTypeName","src":"3995:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3970:41:6"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4040:22:6","nodeType":"VariableDeclaration","scope":342,"src":"4035:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":321,"name":"bool","nodeType":"ElementaryTypeName","src":"4035:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4034:29:6"},"scope":394,"src":"3940:278:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":360,"nodeType":"Block","src":"4489:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":351,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"4503:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":352,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"4514:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":353,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4516:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":166,"src":"4514:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4503:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":359,"nodeType":"IfStatement","src":"4499:64:6","trueBody":{"errorCall":{"arguments":[{"id":356,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":348,"src":"4555:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":355,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4538:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4538:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":358,"nodeType":"RevertStatement","src":"4531:32:6"}}]},"documentation":{"id":343,"nodeType":"StructuredDocumentation","src":"4224:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":361,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4417:22:6","nodeType":"FunctionDefinition","parameters":{"id":349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":346,"mutability":"mutable","name":"s","nameLocation":"4455:1:6","nodeType":"VariableDeclaration","scope":361,"src":"4440:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":345,"nodeType":"UserDefinedTypeName","pathNode":{"id":344,"name":"Layout","nameLocations":["4440:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"4440:6:6"},"referencedDeclaration":167,"src":"4440:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":348,"mutability":"mutable","name":"account","nameLocation":"4466:7:6","nodeType":"VariableDeclaration","scope":361,"src":"4458:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"4458:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4439:35:6"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[],"src":"4489:0:6"},"scope":394,"src":"4408:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":380,"nodeType":"Block","src":"4930:124:6","statements":[{"condition":{"id":373,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4944:47:6","subExpression":{"arguments":[{"id":370,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"4967:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4983:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":369,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"4945:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4945:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":379,"nodeType":"IfStatement","src":"4940:107:6","trueBody":{"errorCall":{"arguments":[{"id":375,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":364,"src":"5023:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":376,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"5039:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":374,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"5000:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":377,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5000:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":378,"nodeType":"RevertStatement","src":"4993:54:6"}}]},"documentation":{"id":362,"nodeType":"StructuredDocumentation","src":"4576:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":381,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4846:28:6","nodeType":"FunctionDefinition","parameters":{"id":367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":364,"mutability":"mutable","name":"targetContract","nameLocation":"4883:14:6","nodeType":"VariableDeclaration","scope":381,"src":"4875:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":363,"name":"address","nodeType":"ElementaryTypeName","src":"4875:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":366,"mutability":"mutable","name":"account","nameLocation":"4907:7:6","nodeType":"VariableDeclaration","scope":381,"src":"4899:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"4899:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4874:41:6"},"returnParameters":{"id":368,"nodeType":"ParameterList","parameters":[],"src":"4930:0:6"},"scope":394,"src":"4837:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":392,"nodeType":"Block","src":"5119:115:6","statements":[{"assignments":[388],"declarations":[{"constant":false,"id":388,"mutability":"mutable","name":"position","nameLocation":"5137:8:6","nodeType":"VariableDeclaration","scope":392,"src":"5129:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":387,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5129:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":390,"initialValue":{"id":389,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":180,"src":"5148:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5129:38:6"},{"AST":{"nativeSrc":"5186:42:6","nodeType":"YulBlock","src":"5186:42:6","statements":[{"nativeSrc":"5200:18:6","nodeType":"YulAssignment","src":"5200:18:6","value":{"name":"position","nativeSrc":"5210:8:6","nodeType":"YulIdentifier","src":"5210:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5200:6:6","nodeType":"YulIdentifier","src":"5200:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":388,"isOffset":false,"isSlot":false,"src":"5210:8:6","valueSize":1},{"declaration":385,"isOffset":false,"isSlot":true,"src":"5200:6:6","suffix":"slot","valueSize":1}],"id":391,"nodeType":"InlineAssembly","src":"5177:51:6"}]},"id":393,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5069:6:6","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[],"src":"5075:2:6"},"returnParameters":{"id":386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"s","nameLocation":"5116:1:6","nodeType":"VariableDeclaration","scope":393,"src":"5101:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":384,"nodeType":"UserDefinedTypeName","pathNode":{"id":383,"name":"Layout","nameLocations":["5101:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"5101:6:6"},"referencedDeclaration":167,"src":"5101:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5100:18:6"},"scope":394,"src":"5060:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":395,"src":"589:4647:6","usedErrors":[],"usedEvents":[]}],"src":"32:5205:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[441],"InterfaceDetection":[424],"InterfaceDetectionStorage":[542]},"id":425,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":396,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":398,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":425,"sourceUnit":442,"src":"58:49:7","symbolAliases":[{"foreign":{"id":397,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":400,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":425,"sourceUnit":543,"src":"108:84:7","symbolAliases":[{"foreign":{"id":399,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":402,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":441,"src":"425:7:7"},"id":403,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":401,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":424,"linearizedBaseContracts":[424,441],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":407,"libraryName":{"id":404,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":542,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":406,"nodeType":"UserDefinedTypeName","pathNode":{"id":405,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"475:32:7"},"referencedDeclaration":452,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[440],"body":{"id":422,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":419,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":415,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":542,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$542_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":541,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":418,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":529,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$452_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$452_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":420,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":414,"id":421,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":408,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":423,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":423,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":409,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":423,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":412,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":424,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":425,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[429]},"id":430,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":426,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":427,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":429,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":428,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[441]},"id":442,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":431,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":432,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":441,"linearizedBaseContracts":[441],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":433,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":440,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":436,"nodeType":"ParameterList","parameters":[{"constant":false,"id":435,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":440,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":434,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":439,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":440,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":437,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":441,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":442,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[441],"IllegalInterfaceId":[429],"InterfaceDetectionStorage":[542]},"id":543,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":443,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":445,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":543,"sourceUnit":430,"src":"58:76:10","symbolAliases":[{"foreign":{"id":444,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":447,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":543,"sourceUnit":442,"src":"135:52:10","symbolAliases":[{"foreign":{"id":446,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":542,"linearizedBaseContracts":[542],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":452,"members":[{"constant":false,"id":451,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":452,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":450,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":448,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":449,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":542,"src":"229:74:10","visibility":"public"},{"constant":true,"id":465,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":542,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":463,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":458,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":457,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":456,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":455,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":468,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":542,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":466,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":467,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":494,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":479,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":480,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":485,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":482,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":429,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":484,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":486,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":472,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":489,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":451,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":490,"indexExpression":{"id":488,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":474,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":491,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":476,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":493,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":469,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":495,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":472,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":495,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":471,"nodeType":"UserDefinedTypeName","pathNode":{"id":470,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"804:6:10"},"referencedDeclaration":452,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":474,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":495,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":473,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":476,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":495,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":475,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":478,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":542,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":528,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":506,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":507,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":468,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":511,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":505,"id":510,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":513,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":515,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":441,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$441_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$441_$","typeString":"type(contract IERC165)"}],"id":514,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":516,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$441","typeString":"type(contract IERC165)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":522,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":521,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":505,"id":520,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":523,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":499,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":524,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":451,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":526,"indexExpression":{"id":525,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":501,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":505,"id":527,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":496,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":529,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":502,"nodeType":"ParameterList","parameters":[{"constant":false,"id":499,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":529,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":498,"nodeType":"UserDefinedTypeName","pathNode":{"id":497,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"1386:6:10"},"referencedDeclaration":452,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":501,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":529,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":500,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":529,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":503,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":542,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":540,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[536],"declarations":[{"constant":false,"id":536,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":540,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":535,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":538,"initialValue":{"id":537,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":465,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":536,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":533,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":539,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":541,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":530,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[{"constant":false,"id":533,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":541,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":532,"nodeType":"UserDefinedTypeName","pathNode":{"id":531,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":452,"src":"1746:6:10"},"referencedDeclaration":452,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$452_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":542,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":543,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[591],"ForwarderRegistryContextBase":[719],"IERC2771":[731],"IForwarderRegistry":[747]},"id":592,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":544,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":546,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":592,"sourceUnit":748,"src":"58:71:11","symbolAliases":[{"foreign":{"id":545,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":548,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":592,"sourceUnit":732,"src":"130:51:11","symbolAliases":[{"foreign":{"id":547,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":731,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":550,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":592,"sourceUnit":720,"src":"182:85:11","symbolAliases":[{"foreign":{"id":549,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":552,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"575:28:11"},"id":553,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":554,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":731,"src":"605:8:11"},"id":555,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":551,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":591,"linearizedBaseContracts":[591,731,719],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":564,"nodeType":"Block","src":"720:2:11","statements":[]},"id":565,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":561,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":558,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"id":562,"kind":"baseConstructorSpecifier","modifierName":{"id":560,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":558,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":565,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":557,"nodeType":"UserDefinedTypeName","pathNode":{"id":556,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"632:18:11"},"referencedDeclaration":747,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":563,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":591,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":573,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":571,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":570,"id":572,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":574,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":574,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":568,"nodeType":"UserDefinedTypeName","pathNode":{"id":567,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"780:18:11"},"referencedDeclaration":747,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":591,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[730],"body":{"id":589,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":582,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":577,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":585,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}],"id":584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":583,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":581,"id":588,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":575,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":590,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":590,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":576,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":581,"nodeType":"ParameterList","parameters":[{"constant":false,"id":580,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":590,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":579,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":591,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":592,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[776],"ForwarderRegistryContextBase":[719],"IForwarderRegistry":[747]},"id":720,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":593,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":595,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":720,"sourceUnit":748,"src":"58:74:12","symbolAliases":[{"foreign":{"id":594,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":720,"sourceUnit":777,"src":"133:67:12","symbolAliases":[{"foreign":{"id":596,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":598,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":719,"linearizedBaseContracts":[719],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":601,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":719,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":600,"nodeType":"UserDefinedTypeName","pathNode":{"id":599,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"498:18:12"},"referencedDeclaration":747,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":611,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":607,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":608,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"id":610,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":612,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":612,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":603,"nodeType":"UserDefinedTypeName","pathNode":{"id":602,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"574:18:12"},"referencedDeclaration":747,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":606,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":719,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":665,"nodeType":"Block","src":"846:698:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":618,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":620,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":623,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":633,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":632,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":629,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":617,"id":631,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[635],"declarations":[{"constant":false,"id":635,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":665,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":634,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":639,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":636,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$776_$","typeString":"type(library ERC2771Calldata)"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":758,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":657,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":644,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}],"id":643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":645,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":649,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":650,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":654,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1464:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$719","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$719","typeString":"contract ForwarderRegistryContextBase"}],"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1456:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":652,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:12","typeDescriptions":{}}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1456:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":647,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":746,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:74:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:120:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":661,"nodeType":"IfStatement","src":"1346:164:12","trueBody":{"id":660,"nodeType":"Block","src":"1472:38:12","statements":[{"expression":{"id":658,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":635,"src":"1493:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":617,"id":659,"nodeType":"Return","src":"1486:13:12"}]}},{"expression":{"expression":{"id":662,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1527:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1531:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1527:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":617,"id":664,"nodeType":"Return","src":"1520:17:12"}]},"documentation":{"id":613,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":666,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":666,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":719,"src":"784:760:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":717,"nodeType":"Block","src":"1725:717:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":672,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1926:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1930:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1926:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":674,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1940:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1940:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1926:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":677,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1953:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1957:4:12","memberName":"data","nodeType":"MemberAccess","src":"1953:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1962:6:12","memberName":"length","nodeType":"MemberAccess","src":"1953:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":680,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1971:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1953:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1926:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":687,"nodeType":"IfStatement","src":"1922:93:12","trueBody":{"id":686,"nodeType":"Block","src":"1975:40:12","statements":[{"expression":{"expression":{"id":683,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1996:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:4:12","memberName":"data","nodeType":"MemberAccess","src":"1996:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":671,"id":685,"nodeType":"Return","src":"1989:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":688,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2189:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2193:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2189:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":692,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2211:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}],"id":691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2203:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":690,"name":"address","nodeType":"ElementaryTypeName","src":"2203:7:12","typeDescriptions":{}}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2189:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":697,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"2287:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$776_$","typeString":"type(library ERC2771Calldata)"}},"id":698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2303:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":758,"src":"2287:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":699,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":700,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2316:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2316:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":704,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2336:4:12","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$719","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$719","typeString":"contract ForwarderRegistryContextBase"}],"id":703,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2328:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":702,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:12","typeDescriptions":{}}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2328:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":695,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":601,"src":"2247:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2267:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":746,"src":"2247:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:95:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2189:153:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":713,"nodeType":"IfStatement","src":"2172:238:12","trueBody":{"id":712,"nodeType":"Block","src":"2353:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":708,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"2374:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$776_$","typeString":"type(library ERC2771Calldata)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2390:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":775,"src":"2374:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":710,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2374:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":671,"id":711,"nodeType":"Return","src":"2367:32:12"}]}},{"expression":{"expression":{"id":714,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2427:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2431:4:12","memberName":"data","nodeType":"MemberAccess","src":"2427:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":671,"id":716,"nodeType":"Return","src":"2420:15:12"}]},"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"1550:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":718,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1667:8:12","nodeType":"FunctionDefinition","parameters":{"id":668,"nodeType":"ParameterList","parameters":[],"src":"1675:2:12"},"returnParameters":{"id":671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":718,"src":"1709:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":669,"name":"bytes","nodeType":"ElementaryTypeName","src":"1709:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:16:12"},"scope":719,"src":"1658:784:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":720,"src":"445:1999:12","usedErrors":[],"usedEvents":[]}],"src":"32:2413:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[731]},"id":732,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":721,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":722,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":731,"linearizedBaseContracts":[731],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":723,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":730,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":725,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":730,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":729,"nodeType":"ParameterList","parameters":[{"constant":false,"id":728,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":730,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":727,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":731,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":732,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[747]},"id":748,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":733,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":734,"nodeType":"StructuredDocumentation","src":"58:49:14","text":"@title Meta-Transactions Forwarder Registry."},"fullyImplemented":false,"id":747,"linearizedBaseContracts":[747],"name":"IForwarderRegistry","nameLocation":"117:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"142:390:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @param target The target contract.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."},"functionSelector":"019a2028","id":746,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"546:19:14","nodeType":"FunctionDefinition","parameters":{"id":742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"sender","nameLocation":"574:6:14","nodeType":"VariableDeclaration","scope":746,"src":"566:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"forwarder","nameLocation":"590:9:14","nodeType":"VariableDeclaration","scope":746,"src":"582:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":738,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":741,"mutability":"mutable","name":"target","nameLocation":"609:6:14","nodeType":"VariableDeclaration","scope":746,"src":"601:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":740,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"565:51:14"},"returnParameters":{"id":745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":744,"mutability":"mutable","name":"isApproved","nameLocation":"645:10:14","nodeType":"VariableDeclaration","scope":746,"src":"640:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":743,"name":"bool","nodeType":"ElementaryTypeName","src":"640:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"639:17:14"},"scope":747,"src":"537:120:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":748,"src":"107:552:14","usedErrors":[],"usedEvents":[]}],"src":"32:628:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[776]},"id":777,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":749,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":750,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":776,"linearizedBaseContracts":[776],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":757,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":754,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":756,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":751,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":758,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":752,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":754,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":758,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":753,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":776,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":774,"nodeType":"Block","src":"679:89:15","statements":[{"id":773,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":764,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":765,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":766,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":769,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":763,"id":772,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":775,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":775,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":761,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":776,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":777,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[785]},"id":786,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":778,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":779,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":785,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":784,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":785,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":780,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":783,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":785,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":782,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[785],"ProxyInitialization":[832],"StorageSlot":[1036]},"id":833,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":787,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":789,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":833,"sourceUnit":786,"src":"58:92:17","symbolAliases":[{"foreign":{"id":788,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":791,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":833,"sourceUnit":1037,"src":"151:74:17","symbolAliases":[{"foreign":{"id":790,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":792,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":832,"linearizedBaseContracts":[832],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":830,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[804],"declarations":[{"constant":false,"id":804,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":830,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":803,"nodeType":"UserDefinedTypeName","pathNode":{"id":802,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":927,"src":"745:23:17"},"referencedDeclaration":927,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":809,"initialValue":{"arguments":[{"id":807,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":795,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":805,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1036,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1036_$","typeString":"type(library StorageSlot)"}},"id":806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":980,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$927_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[811],"declarations":[{"constant":false,"id":811,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":830,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":810,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":814,"initialValue":{"expression":{"id":812,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":813,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":926,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":815,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":816,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":823,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":819,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":811,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":820,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":818,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":785,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":822,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":824,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":826,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":926,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":827,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":797,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":829,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":831,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":798,"nodeType":"ParameterList","parameters":[{"constant":false,"id":795,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":831,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":797,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":831,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":796,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":799,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":832,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":833,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","exportedSymbols":{"IERC20SafeTransfers":[862]},"id":863,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":834,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20SafeTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"58:192:18","text":"@title ERC20 Token Standard, optional extension: Safe Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x53f41a97."},"fullyImplemented":false,"id":862,"linearizedBaseContracts":[862],"name":"IERC20SafeTransfers","nameLocation":"260:19:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":836,"nodeType":"StructuredDocumentation","src":"286:697:18","text":"@notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"eb795549","id":847,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"997:12:18","nodeType":"FunctionDefinition","parameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":838,"mutability":"mutable","name":"to","nameLocation":"1018:2:18","nodeType":"VariableDeclaration","scope":847,"src":"1010:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":837,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":840,"mutability":"mutable","name":"value","nameLocation":"1030:5:18","nodeType":"VariableDeclaration","scope":847,"src":"1022:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":839,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":842,"mutability":"mutable","name":"data","nameLocation":"1052:4:18","nodeType":"VariableDeclaration","scope":847,"src":"1037:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":841,"name":"bytes","nodeType":"ElementaryTypeName","src":"1037:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:48:18"},"returnParameters":{"id":846,"nodeType":"ParameterList","parameters":[{"constant":false,"id":845,"mutability":"mutable","name":"result","nameLocation":"1081:6:18","nodeType":"VariableDeclaration","scope":847,"src":"1076:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":844,"name":"bool","nodeType":"ElementaryTypeName","src":"1076:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1075:13:18"},"scope":862,"src":"988:101:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":848,"nodeType":"StructuredDocumentation","src":"1095:1009:18","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"b88d4fde","id":861,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2118:16:18","nodeType":"FunctionDefinition","parameters":{"id":857,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"from","nameLocation":"2143:4:18","nodeType":"VariableDeclaration","scope":861,"src":"2135:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":849,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"to","nameLocation":"2157:2:18","nodeType":"VariableDeclaration","scope":861,"src":"2149:10:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":851,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"value","nameLocation":"2169:5:18","nodeType":"VariableDeclaration","scope":861,"src":"2161:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"2161:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":856,"mutability":"mutable","name":"data","nameLocation":"2191:4:18","nodeType":"VariableDeclaration","scope":861,"src":"2176:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":855,"name":"bytes","nodeType":"ElementaryTypeName","src":"2176:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2134:62:18"},"returnParameters":{"id":860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":859,"mutability":"mutable","name":"result","nameLocation":"2220:6:18","nodeType":"VariableDeclaration","scope":861,"src":"2215:11:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":858,"name":"bool","nodeType":"ElementaryTypeName","src":"2215:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2214:13:18"},"scope":862,"src":"2109:119:18","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":863,"src":"250:1980:18","usedErrors":[],"usedEvents":[]}],"src":"32:2199:18"},"id":18},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","exportedSymbols":{"Address":[882]},"id":883,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":864,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":882,"linearizedBaseContracts":[882],"name":"Address","nameLocation":"66:7:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":880,"nodeType":"Block","src":"344:122:19","statements":[{"assignments":[873],"declarations":[{"constant":false,"id":873,"mutability":"mutable","name":"size","nameLocation":"362:4:19","nodeType":"VariableDeclaration","scope":880,"src":"354:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":872,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":874,"nodeType":"VariableDeclarationStatement","src":"354:12:19"},{"AST":{"nativeSrc":"385:49:19","nodeType":"YulBlock","src":"385:49:19","statements":[{"nativeSrc":"399:25:19","nodeType":"YulAssignment","src":"399:25:19","value":{"arguments":[{"name":"addr","nativeSrc":"419:4:19","nodeType":"YulIdentifier","src":"419:4:19"}],"functionName":{"name":"extcodesize","nativeSrc":"407:11:19","nodeType":"YulIdentifier","src":"407:11:19"},"nativeSrc":"407:17:19","nodeType":"YulFunctionCall","src":"407:17:19"},"variableNames":[{"name":"size","nativeSrc":"399:4:19","nodeType":"YulIdentifier","src":"399:4:19"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":867,"isOffset":false,"isSlot":false,"src":"419:4:19","valueSize":1},{"declaration":873,"isOffset":false,"isSlot":false,"src":"399:4:19","valueSize":1}],"id":875,"nodeType":"InlineAssembly","src":"376:58:19"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":876,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"450:4:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"458:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"450:9:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":871,"id":879,"nodeType":"Return","src":"443:16:19"}]},"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"80:195:19","text":"@notice Checks if the address is a deployed smart contract.\n @param addr The address to check.\n @return hasBytecode True if `addr` is a deployed smart contract, false otherwise."},"id":881,"implemented":true,"kind":"function","modifiers":[],"name":"hasBytecode","nameLocation":"289:11:19","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"addr","nameLocation":"309:4:19","nodeType":"VariableDeclaration","scope":881,"src":"301:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"300:14:19"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":881,"src":"338:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":869,"name":"bool","nodeType":"ElementaryTypeName","src":"338:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"337:6:19"},"scope":882,"src":"280:186:19","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":883,"src":"58:410:19","usedErrors":[],"usedEvents":[]}],"src":"32:437:19"},"id":19},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[912]},"id":913,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":884,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:20"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":885,"nodeType":"StructuredDocumentation","src":"127:496:20","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":912,"linearizedBaseContracts":[912],"name":"Context","nameLocation":"642:7:20","nodeType":"ContractDefinition","nodes":[{"body":{"id":893,"nodeType":"Block","src":"718:34:20","statements":[{"expression":{"expression":{"id":890,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:20","memberName":"sender","nodeType":"MemberAccess","src":"735:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":889,"id":892,"nodeType":"Return","src":"728:17:20"}]},"id":894,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:20","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"675:2:20"},"returnParameters":{"id":889,"nodeType":"ParameterList","parameters":[{"constant":false,"id":888,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":894,"src":"709:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":887,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:20"},"scope":912,"src":"656:96:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":902,"nodeType":"Block","src":"825:32:20","statements":[{"expression":{"expression":{"id":899,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:20","memberName":"data","nodeType":"MemberAccess","src":"842:8:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":898,"id":901,"nodeType":"Return","src":"835:15:20"}]},"id":903,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:20","nodeType":"FunctionDefinition","parameters":{"id":895,"nodeType":"ParameterList","parameters":[],"src":"775:2:20"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":903,"src":"809:14:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":896,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:20"},"scope":912,"src":"758:99:20","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":910,"nodeType":"Block","src":"935:25:20","statements":[{"expression":{"hexValue":"30","id":908,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:20","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":907,"id":909,"nodeType":"Return","src":"945:8:20"}]},"id":911,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:20","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[],"src":"892:2:20"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":911,"src":"926:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:20"},"scope":912,"src":"863:97:20","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":913,"src":"624:338:20","usedErrors":[],"usedEvents":[]}],"src":"101:862:20"},"id":20},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1036]},"id":1037,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":914,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":915,"nodeType":"StructuredDocumentation","src":"219:1187:21","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":1036,"linearizedBaseContracts":[1036],"name":"StorageSlot","nameLocation":"1415:11:21","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":918,"members":[{"constant":false,"id":917,"mutability":"mutable","name":"value","nameLocation":"1470:5:21","nodeType":"VariableDeclaration","scope":918,"src":"1462:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":916,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1440:11:21","nodeType":"StructDefinition","scope":1036,"src":"1433:49:21","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":921,"members":[{"constant":false,"id":920,"mutability":"mutable","name":"value","nameLocation":"1522:5:21","nodeType":"VariableDeclaration","scope":921,"src":"1517:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":919,"name":"bool","nodeType":"ElementaryTypeName","src":"1517:4:21","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1495:11:21","nodeType":"StructDefinition","scope":1036,"src":"1488:46:21","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":924,"members":[{"constant":false,"id":923,"mutability":"mutable","name":"value","nameLocation":"1577:5:21","nodeType":"VariableDeclaration","scope":924,"src":"1569:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1547:11:21","nodeType":"StructDefinition","scope":1036,"src":"1540:49:21","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":927,"members":[{"constant":false,"id":926,"mutability":"mutable","name":"value","nameLocation":"1632:5:21","nodeType":"VariableDeclaration","scope":927,"src":"1624:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":925,"name":"uint256","nodeType":"ElementaryTypeName","src":"1624:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1602:11:21","nodeType":"StructDefinition","scope":1036,"src":"1595:49:21","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":930,"members":[{"constant":false,"id":929,"mutability":"mutable","name":"value","nameLocation":"1685:5:21","nodeType":"VariableDeclaration","scope":930,"src":"1678:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":928,"name":"int256","nodeType":"ElementaryTypeName","src":"1678:6:21","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1657:10:21","nodeType":"StructDefinition","scope":1036,"src":"1650:47:21","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":933,"members":[{"constant":false,"id":932,"mutability":"mutable","name":"value","nameLocation":"1738:5:21","nodeType":"VariableDeclaration","scope":933,"src":"1731:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":931,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1710:10:21","nodeType":"StructDefinition","scope":1036,"src":"1703:47:21","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":936,"members":[{"constant":false,"id":935,"mutability":"mutable","name":"value","nameLocation":"1789:5:21","nodeType":"VariableDeclaration","scope":936,"src":"1783:11:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":934,"name":"bytes","nodeType":"ElementaryTypeName","src":"1783:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1763:9:21","nodeType":"StructDefinition","scope":1036,"src":"1756:45:21","visibility":"public"},{"body":{"id":946,"nodeType":"Block","src":"1983:79:21","statements":[{"AST":{"nativeSrc":"2018:38:21","nodeType":"YulBlock","src":"2018:38:21","statements":[{"nativeSrc":"2032:14:21","nodeType":"YulAssignment","src":"2032:14:21","value":{"name":"slot","nativeSrc":"2042:4:21","nodeType":"YulIdentifier","src":"2042:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"2032:6:21","nodeType":"YulIdentifier","src":"2032:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":943,"isOffset":false,"isSlot":true,"src":"2032:6:21","suffix":"slot","valueSize":1},{"declaration":939,"isOffset":false,"isSlot":false,"src":"2042:4:21","valueSize":1}],"flags":["memory-safe"],"id":945,"nodeType":"InlineAssembly","src":"1993:63:21"}]},"documentation":{"id":937,"nodeType":"StructuredDocumentation","src":"1807:87:21","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":947,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1908:14:21","nodeType":"FunctionDefinition","parameters":{"id":940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":939,"mutability":"mutable","name":"slot","nameLocation":"1931:4:21","nodeType":"VariableDeclaration","scope":947,"src":"1923:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1923:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1922:14:21"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"r","nameLocation":"1980:1:21","nodeType":"VariableDeclaration","scope":947,"src":"1960:21:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$918_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":942,"nodeType":"UserDefinedTypeName","pathNode":{"id":941,"name":"AddressSlot","nameLocations":["1960:11:21"],"nodeType":"IdentifierPath","referencedDeclaration":918,"src":"1960:11:21"},"referencedDeclaration":918,"src":"1960:11:21","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$918_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:23:21"},"scope":1036,"src":"1899:163:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":957,"nodeType":"Block","src":"2243:79:21","statements":[{"AST":{"nativeSrc":"2278:38:21","nodeType":"YulBlock","src":"2278:38:21","statements":[{"nativeSrc":"2292:14:21","nodeType":"YulAssignment","src":"2292:14:21","value":{"name":"slot","nativeSrc":"2302:4:21","nodeType":"YulIdentifier","src":"2302:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"2292:6:21","nodeType":"YulIdentifier","src":"2292:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":954,"isOffset":false,"isSlot":true,"src":"2292:6:21","suffix":"slot","valueSize":1},{"declaration":950,"isOffset":false,"isSlot":false,"src":"2302:4:21","valueSize":1}],"flags":["memory-safe"],"id":956,"nodeType":"InlineAssembly","src":"2253:63:21"}]},"documentation":{"id":948,"nodeType":"StructuredDocumentation","src":"2068:86:21","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":958,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2168:14:21","nodeType":"FunctionDefinition","parameters":{"id":951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":950,"mutability":"mutable","name":"slot","nameLocation":"2191:4:21","nodeType":"VariableDeclaration","scope":958,"src":"2183:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2183:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2182:14:21"},"returnParameters":{"id":955,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"r","nameLocation":"2240:1:21","nodeType":"VariableDeclaration","scope":958,"src":"2220:21:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$921_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":953,"nodeType":"UserDefinedTypeName","pathNode":{"id":952,"name":"BooleanSlot","nameLocations":["2220:11:21"],"nodeType":"IdentifierPath","referencedDeclaration":921,"src":"2220:11:21"},"referencedDeclaration":921,"src":"2220:11:21","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$921_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2219:23:21"},"scope":1036,"src":"2159:163:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":968,"nodeType":"Block","src":"2503:79:21","statements":[{"AST":{"nativeSrc":"2538:38:21","nodeType":"YulBlock","src":"2538:38:21","statements":[{"nativeSrc":"2552:14:21","nodeType":"YulAssignment","src":"2552:14:21","value":{"name":"slot","nativeSrc":"2562:4:21","nodeType":"YulIdentifier","src":"2562:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"2552:6:21","nodeType":"YulIdentifier","src":"2552:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":965,"isOffset":false,"isSlot":true,"src":"2552:6:21","suffix":"slot","valueSize":1},{"declaration":961,"isOffset":false,"isSlot":false,"src":"2562:4:21","valueSize":1}],"flags":["memory-safe"],"id":967,"nodeType":"InlineAssembly","src":"2513:63:21"}]},"documentation":{"id":959,"nodeType":"StructuredDocumentation","src":"2328:86:21","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":969,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2428:14:21","nodeType":"FunctionDefinition","parameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"slot","nameLocation":"2451:4:21","nodeType":"VariableDeclaration","scope":969,"src":"2443:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":960,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2442:14:21"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"r","nameLocation":"2500:1:21","nodeType":"VariableDeclaration","scope":969,"src":"2480:21:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$924_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":964,"nodeType":"UserDefinedTypeName","pathNode":{"id":963,"name":"Bytes32Slot","nameLocations":["2480:11:21"],"nodeType":"IdentifierPath","referencedDeclaration":924,"src":"2480:11:21"},"referencedDeclaration":924,"src":"2480:11:21","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$924_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2479:23:21"},"scope":1036,"src":"2419:163:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"2763:79:21","statements":[{"AST":{"nativeSrc":"2798:38:21","nodeType":"YulBlock","src":"2798:38:21","statements":[{"nativeSrc":"2812:14:21","nodeType":"YulAssignment","src":"2812:14:21","value":{"name":"slot","nativeSrc":"2822:4:21","nodeType":"YulIdentifier","src":"2822:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"2812:6:21","nodeType":"YulIdentifier","src":"2812:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":976,"isOffset":false,"isSlot":true,"src":"2812:6:21","suffix":"slot","valueSize":1},{"declaration":972,"isOffset":false,"isSlot":false,"src":"2822:4:21","valueSize":1}],"flags":["memory-safe"],"id":978,"nodeType":"InlineAssembly","src":"2773:63:21"}]},"documentation":{"id":970,"nodeType":"StructuredDocumentation","src":"2588:86:21","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2688:14:21","nodeType":"FunctionDefinition","parameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"slot","nameLocation":"2711:4:21","nodeType":"VariableDeclaration","scope":980,"src":"2703:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":971,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2703:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2702:14:21"},"returnParameters":{"id":977,"nodeType":"ParameterList","parameters":[{"constant":false,"id":976,"mutability":"mutable","name":"r","nameLocation":"2760:1:21","nodeType":"VariableDeclaration","scope":980,"src":"2740:21:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":975,"nodeType":"UserDefinedTypeName","pathNode":{"id":974,"name":"Uint256Slot","nameLocations":["2740:11:21"],"nodeType":"IdentifierPath","referencedDeclaration":927,"src":"2740:11:21"},"referencedDeclaration":927,"src":"2740:11:21","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$927_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2739:23:21"},"scope":1036,"src":"2679:163:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":990,"nodeType":"Block","src":"3020:79:21","statements":[{"AST":{"nativeSrc":"3055:38:21","nodeType":"YulBlock","src":"3055:38:21","statements":[{"nativeSrc":"3069:14:21","nodeType":"YulAssignment","src":"3069:14:21","value":{"name":"slot","nativeSrc":"3079:4:21","nodeType":"YulIdentifier","src":"3079:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"3069:6:21","nodeType":"YulIdentifier","src":"3069:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":987,"isOffset":false,"isSlot":true,"src":"3069:6:21","suffix":"slot","valueSize":1},{"declaration":983,"isOffset":false,"isSlot":false,"src":"3079:4:21","valueSize":1}],"flags":["memory-safe"],"id":989,"nodeType":"InlineAssembly","src":"3030:63:21"}]},"documentation":{"id":981,"nodeType":"StructuredDocumentation","src":"2848:85:21","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":991,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"2947:13:21","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"slot","nameLocation":"2969:4:21","nodeType":"VariableDeclaration","scope":991,"src":"2961:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":982,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2961:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2960:14:21"},"returnParameters":{"id":988,"nodeType":"ParameterList","parameters":[{"constant":false,"id":987,"mutability":"mutable","name":"r","nameLocation":"3017:1:21","nodeType":"VariableDeclaration","scope":991,"src":"2998:20:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$930_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":986,"nodeType":"UserDefinedTypeName","pathNode":{"id":985,"name":"Int256Slot","nameLocations":["2998:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":930,"src":"2998:10:21"},"referencedDeclaration":930,"src":"2998:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$930_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"2997:22:21"},"scope":1036,"src":"2938:161:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1001,"nodeType":"Block","src":"3277:79:21","statements":[{"AST":{"nativeSrc":"3312:38:21","nodeType":"YulBlock","src":"3312:38:21","statements":[{"nativeSrc":"3326:14:21","nodeType":"YulAssignment","src":"3326:14:21","value":{"name":"slot","nativeSrc":"3336:4:21","nodeType":"YulIdentifier","src":"3336:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"3326:6:21","nodeType":"YulIdentifier","src":"3326:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":998,"isOffset":false,"isSlot":true,"src":"3326:6:21","suffix":"slot","valueSize":1},{"declaration":994,"isOffset":false,"isSlot":false,"src":"3336:4:21","valueSize":1}],"flags":["memory-safe"],"id":1000,"nodeType":"InlineAssembly","src":"3287:63:21"}]},"documentation":{"id":992,"nodeType":"StructuredDocumentation","src":"3105:85:21","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":1002,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3204:13:21","nodeType":"FunctionDefinition","parameters":{"id":995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":994,"mutability":"mutable","name":"slot","nameLocation":"3226:4:21","nodeType":"VariableDeclaration","scope":1002,"src":"3218:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3217:14:21"},"returnParameters":{"id":999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":998,"mutability":"mutable","name":"r","nameLocation":"3274:1:21","nodeType":"VariableDeclaration","scope":1002,"src":"3255:20:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$933_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":997,"nodeType":"UserDefinedTypeName","pathNode":{"id":996,"name":"StringSlot","nameLocations":["3255:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":933,"src":"3255:10:21"},"referencedDeclaration":933,"src":"3255:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$933_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3254:22:21"},"scope":1036,"src":"3195:161:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1012,"nodeType":"Block","src":"3558:85:21","statements":[{"AST":{"nativeSrc":"3593:44:21","nodeType":"YulBlock","src":"3593:44:21","statements":[{"nativeSrc":"3607:20:21","nodeType":"YulAssignment","src":"3607:20:21","value":{"name":"store.slot","nativeSrc":"3617:10:21","nodeType":"YulIdentifier","src":"3617:10:21"},"variableNames":[{"name":"r.slot","nativeSrc":"3607:6:21","nodeType":"YulIdentifier","src":"3607:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1009,"isOffset":false,"isSlot":true,"src":"3607:6:21","suffix":"slot","valueSize":1},{"declaration":1005,"isOffset":false,"isSlot":true,"src":"3617:10:21","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":1011,"nodeType":"InlineAssembly","src":"3568:69:21"}]},"documentation":{"id":1003,"nodeType":"StructuredDocumentation","src":"3362:101:21","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1013,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3477:13:21","nodeType":"FunctionDefinition","parameters":{"id":1006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"store","nameLocation":"3506:5:21","nodeType":"VariableDeclaration","scope":1013,"src":"3491:20:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1004,"name":"string","nodeType":"ElementaryTypeName","src":"3491:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3490:22:21"},"returnParameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1009,"mutability":"mutable","name":"r","nameLocation":"3555:1:21","nodeType":"VariableDeclaration","scope":1013,"src":"3536:20:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$933_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1008,"nodeType":"UserDefinedTypeName","pathNode":{"id":1007,"name":"StringSlot","nameLocations":["3536:10:21"],"nodeType":"IdentifierPath","referencedDeclaration":933,"src":"3536:10:21"},"referencedDeclaration":933,"src":"3536:10:21","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$933_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3535:22:21"},"scope":1036,"src":"3468:175:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"3818:79:21","statements":[{"AST":{"nativeSrc":"3853:38:21","nodeType":"YulBlock","src":"3853:38:21","statements":[{"nativeSrc":"3867:14:21","nodeType":"YulAssignment","src":"3867:14:21","value":{"name":"slot","nativeSrc":"3877:4:21","nodeType":"YulIdentifier","src":"3877:4:21"},"variableNames":[{"name":"r.slot","nativeSrc":"3867:6:21","nodeType":"YulIdentifier","src":"3867:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1020,"isOffset":false,"isSlot":true,"src":"3867:6:21","suffix":"slot","valueSize":1},{"declaration":1016,"isOffset":false,"isSlot":false,"src":"3877:4:21","valueSize":1}],"flags":["memory-safe"],"id":1022,"nodeType":"InlineAssembly","src":"3828:63:21"}]},"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"3649:84:21","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3747:12:21","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1016,"mutability":"mutable","name":"slot","nameLocation":"3768:4:21","nodeType":"VariableDeclaration","scope":1024,"src":"3760:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1015,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3760:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3759:14:21"},"returnParameters":{"id":1021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1020,"mutability":"mutable","name":"r","nameLocation":"3815:1:21","nodeType":"VariableDeclaration","scope":1024,"src":"3797:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$936_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1019,"nodeType":"UserDefinedTypeName","pathNode":{"id":1018,"name":"BytesSlot","nameLocations":["3797:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":936,"src":"3797:9:21"},"referencedDeclaration":936,"src":"3797:9:21","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$936_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3796:21:21"},"scope":1036,"src":"3738:159:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1034,"nodeType":"Block","src":"4094:85:21","statements":[{"AST":{"nativeSrc":"4129:44:21","nodeType":"YulBlock","src":"4129:44:21","statements":[{"nativeSrc":"4143:20:21","nodeType":"YulAssignment","src":"4143:20:21","value":{"name":"store.slot","nativeSrc":"4153:10:21","nodeType":"YulIdentifier","src":"4153:10:21"},"variableNames":[{"name":"r.slot","nativeSrc":"4143:6:21","nodeType":"YulIdentifier","src":"4143:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1031,"isOffset":false,"isSlot":true,"src":"4143:6:21","suffix":"slot","valueSize":1},{"declaration":1027,"isOffset":false,"isSlot":true,"src":"4153:10:21","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":1033,"nodeType":"InlineAssembly","src":"4104:69:21"}]},"documentation":{"id":1025,"nodeType":"StructuredDocumentation","src":"3903:99:21","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1035,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4016:12:21","nodeType":"FunctionDefinition","parameters":{"id":1028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"store","nameLocation":"4043:5:21","nodeType":"VariableDeclaration","scope":1035,"src":"4029:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1026,"name":"bytes","nodeType":"ElementaryTypeName","src":"4029:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4028:21:21"},"returnParameters":{"id":1032,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1031,"mutability":"mutable","name":"r","nameLocation":"4091:1:21","nodeType":"VariableDeclaration","scope":1035,"src":"4073:19:21","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$936_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1030,"nodeType":"UserDefinedTypeName","pathNode":{"id":1029,"name":"BytesSlot","nameLocations":["4073:9:21"],"nodeType":"IdentifierPath","referencedDeclaration":936,"src":"4073:9:21"},"referencedDeclaration":936,"src":"4073:9:21","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$936_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4072:21:21"},"scope":1036,"src":"4007:172:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1037,"src":"1407:2774:21","usedErrors":[],"usedEvents":[]}],"src":"193:3989:21"},"id":21},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","exportedSymbols":{"Hashes":[1076]},"id":1077,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1038,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"113:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Hashes","contractDependencies":[],"contractKind":"library","documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"139:81:22","text":" @dev Library of standard hash functions.\n _Available since v5.1._"},"fullyImplemented":true,"id":1076,"linearizedBaseContracts":[1076],"name":"Hashes","nameLocation":"229:6:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1062,"nodeType":"Block","src":"588:85:22","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1049,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"605:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1050,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"609:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"605:5:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1057,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"661:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1058,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"664:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1056,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"641:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"641:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"605:61:22","trueExpression":{"arguments":[{"id":1053,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1042,"src":"633:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1054,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1044,"src":"636:1:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1052,"name":"_efficientKeccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1075,"src":"613:19:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"613:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1048,"id":1061,"nodeType":"Return","src":"598:68:22"}]},"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"242:257:22","text":" @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\n NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]."},"id":1063,"implemented":true,"kind":"function","modifiers":[],"name":"commutativeKeccak256","nameLocation":"513:20:22","nodeType":"FunctionDefinition","parameters":{"id":1045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1042,"mutability":"mutable","name":"a","nameLocation":"542:1:22","nodeType":"VariableDeclaration","scope":1063,"src":"534:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1041,"name":"bytes32","nodeType":"ElementaryTypeName","src":"534:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1044,"mutability":"mutable","name":"b","nameLocation":"553:1:22","nodeType":"VariableDeclaration","scope":1063,"src":"545:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1043,"name":"bytes32","nodeType":"ElementaryTypeName","src":"545:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"533:22:22"},"returnParameters":{"id":1048,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1063,"src":"579:7:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"578:9:22"},"scope":1076,"src":"504:169:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1074,"nodeType":"Block","src":"881:151:22","statements":[{"AST":{"nativeSrc":"916:110:22","nodeType":"YulBlock","src":"916:110:22","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"937:4:22","nodeType":"YulLiteral","src":"937:4:22","type":"","value":"0x00"},{"name":"a","nativeSrc":"943:1:22","nodeType":"YulIdentifier","src":"943:1:22"}],"functionName":{"name":"mstore","nativeSrc":"930:6:22","nodeType":"YulIdentifier","src":"930:6:22"},"nativeSrc":"930:15:22","nodeType":"YulFunctionCall","src":"930:15:22"},"nativeSrc":"930:15:22","nodeType":"YulExpressionStatement","src":"930:15:22"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"965:4:22","nodeType":"YulLiteral","src":"965:4:22","type":"","value":"0x20"},{"name":"b","nativeSrc":"971:1:22","nodeType":"YulIdentifier","src":"971:1:22"}],"functionName":{"name":"mstore","nativeSrc":"958:6:22","nodeType":"YulIdentifier","src":"958:6:22"},"nativeSrc":"958:15:22","nodeType":"YulFunctionCall","src":"958:15:22"},"nativeSrc":"958:15:22","nodeType":"YulExpressionStatement","src":"958:15:22"},{"nativeSrc":"986:30:22","nodeType":"YulAssignment","src":"986:30:22","value":{"arguments":[{"kind":"number","nativeSrc":"1005:4:22","nodeType":"YulLiteral","src":"1005:4:22","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1011:4:22","nodeType":"YulLiteral","src":"1011:4:22","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"995:9:22","nodeType":"YulIdentifier","src":"995:9:22"},"nativeSrc":"995:21:22","nodeType":"YulFunctionCall","src":"995:21:22"},"variableNames":[{"name":"value","nativeSrc":"986:5:22","nodeType":"YulIdentifier","src":"986:5:22"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1066,"isOffset":false,"isSlot":false,"src":"943:1:22","valueSize":1},{"declaration":1068,"isOffset":false,"isSlot":false,"src":"971:1:22","valueSize":1},{"declaration":1071,"isOffset":false,"isSlot":false,"src":"986:5:22","valueSize":1}],"flags":["memory-safe"],"id":1073,"nodeType":"InlineAssembly","src":"891:135:22"}]},"documentation":{"id":1064,"nodeType":"StructuredDocumentation","src":"679:109:22","text":" @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory."},"id":1075,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientKeccak256","nameLocation":"802:19:22","nodeType":"FunctionDefinition","parameters":{"id":1069,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"mutability":"mutable","name":"a","nameLocation":"830:1:22","nodeType":"VariableDeclaration","scope":1075,"src":"822:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1065,"name":"bytes32","nodeType":"ElementaryTypeName","src":"822:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1068,"mutability":"mutable","name":"b","nameLocation":"841:1:22","nodeType":"VariableDeclaration","scope":1075,"src":"833:9:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1067,"name":"bytes32","nodeType":"ElementaryTypeName","src":"833:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"821:22:22"},"returnParameters":{"id":1072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1071,"mutability":"mutable","name":"value","nameLocation":"874:5:22","nodeType":"VariableDeclaration","scope":1075,"src":"866:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1070,"name":"bytes32","nodeType":"ElementaryTypeName","src":"866:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"865:15:22"},"scope":1076,"src":"793:239:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1077,"src":"221:813:22","usedErrors":[],"usedEvents":[]}],"src":"113:922:22"},"id":22},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"Hashes":[1076],"MerkleProof":[2149]},"id":2150,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1078,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"206:24:23"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/Hashes.sol","file":"./Hashes.sol","id":1080,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2150,"sourceUnit":1077,"src":"232:36:23","symbolAliases":[{"foreign":{"id":1079,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"240:6:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"270:1082:23","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the Merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates Merkle trees that are safe\n against this attack out of the box.\n IMPORTANT: Consider memory side-effects when using custom hashing functions\n that access memory in an unsafe way.\n NOTE: This library supports proof verification for merkle trees built using\n custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\n leaf inclusion in trees built using non-commutative hashing functions requires\n additional logic that is not supported by this library."},"fullyImplemented":true,"id":2149,"linearizedBaseContracts":[2149],"name":"MerkleProof","nameLocation":"1361:11:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1082,"nodeType":"StructuredDocumentation","src":"1379:60:23","text":"@dev The multiproof provided is not valid."},"errorSelector":"35140492","id":1084,"name":"MerkleProofInvalidMultiproof","nameLocation":"1450:28:23","nodeType":"ErrorDefinition","parameters":{"id":1083,"nodeType":"ParameterList","parameters":[],"src":"1478:2:23"},"src":"1444:37:23"},{"body":{"id":1104,"nodeType":"Block","src":"1999:57:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1098,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1088,"src":"2029:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1099,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"2036:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1097,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[1146,1228],"referencedDeclaration":1146,"src":"2016:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2016:25:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1101,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"2045:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2016:33:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1096,"id":1103,"nodeType":"Return","src":"2009:40:23"}]},"documentation":{"id":1085,"nodeType":"StructuredDocumentation","src":"1487:410:23","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":1105,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1911:6:23","nodeType":"FunctionDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"mutability":"mutable","name":"proof","nameLocation":"1935:5:23","nodeType":"VariableDeclaration","scope":1105,"src":"1918:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1086,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1918:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1087,"nodeType":"ArrayTypeName","src":"1918:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1090,"mutability":"mutable","name":"root","nameLocation":"1950:4:23","nodeType":"VariableDeclaration","scope":1105,"src":"1942:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1089,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1942:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1092,"mutability":"mutable","name":"leaf","nameLocation":"1964:4:23","nodeType":"VariableDeclaration","scope":1105,"src":"1956:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1091,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1956:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1917:52:23"},"returnParameters":{"id":1096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1095,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1105,"src":"1993:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1094,"name":"bool","nodeType":"ElementaryTypeName","src":"1993:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1992:6:23"},"scope":2149,"src":"1902:154:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1145,"nodeType":"Block","src":"2549:216:23","statements":[{"assignments":[1117],"declarations":[{"constant":false,"id":1117,"mutability":"mutable","name":"computedHash","nameLocation":"2567:12:23","nodeType":"VariableDeclaration","scope":1145,"src":"2559:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1116,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2559:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1119,"initialValue":{"id":1118,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1111,"src":"2582:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2559:27:23"},{"body":{"id":1141,"nodeType":"Block","src":"2639:91:23","statements":[{"expression":{"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1131,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"2653:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1134,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"2696:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1135,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"2710:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1137,"indexExpression":{"id":1136,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"2716:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2710:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1132,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"2668:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$1076_$","typeString":"type(library Hashes)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2675:20:23","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":1063,"src":"2668:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2668:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2653:66:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1140,"nodeType":"ExpressionStatement","src":"2653:66:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1124,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"2616:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1125,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1109,"src":"2620:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2626:6:23","memberName":"length","nodeType":"MemberAccess","src":"2620:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2616:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1142,"initializationExpression":{"assignments":[1121],"declarations":[{"constant":false,"id":1121,"mutability":"mutable","name":"i","nameLocation":"2609:1:23","nodeType":"VariableDeclaration","scope":1142,"src":"2601:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1120,"name":"uint256","nodeType":"ElementaryTypeName","src":"2601:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1123,"initialValue":{"hexValue":"30","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2613:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2601:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2634:3:23","subExpression":{"id":1128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1121,"src":"2634:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1130,"nodeType":"ExpressionStatement","src":"2634:3:23"},"nodeType":"ForStatement","src":"2596:134:23"},{"expression":{"id":1143,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1117,"src":"2746:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1115,"id":1144,"nodeType":"Return","src":"2739:19:23"}]},"documentation":{"id":1106,"nodeType":"StructuredDocumentation","src":"2062:390:23","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with the default hashing function."},"id":1146,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2466:12:23","nodeType":"FunctionDefinition","parameters":{"id":1112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"proof","nameLocation":"2496:5:23","nodeType":"VariableDeclaration","scope":1146,"src":"2479:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1107,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2479:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1108,"nodeType":"ArrayTypeName","src":"2479:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"leaf","nameLocation":"2511:4:23","nodeType":"VariableDeclaration","scope":1146,"src":"2503:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1110,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2478:38:23"},"returnParameters":{"id":1115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1114,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1146,"src":"2540:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1113,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2540:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2539:9:23"},"scope":2149,"src":"2457:308:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1177,"nodeType":"Block","src":"3376:65:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1170,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"3406:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1171,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1154,"src":"3413:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1172,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"3419:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1169,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[1146,1228],"referencedDeclaration":1228,"src":"3393:12:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3393:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1174,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1152,"src":"3430:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3393:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1168,"id":1176,"nodeType":"Return","src":"3386:48:23"}]},"documentation":{"id":1147,"nodeType":"StructuredDocumentation","src":"2771:407:23","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":1178,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"3192:6:23","nodeType":"FunctionDefinition","parameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1150,"mutability":"mutable","name":"proof","nameLocation":"3225:5:23","nodeType":"VariableDeclaration","scope":1178,"src":"3208:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1148,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3208:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1149,"nodeType":"ArrayTypeName","src":"3208:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1152,"mutability":"mutable","name":"root","nameLocation":"3248:4:23","nodeType":"VariableDeclaration","scope":1178,"src":"3240:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1151,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3240:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1154,"mutability":"mutable","name":"leaf","nameLocation":"3270:4:23","nodeType":"VariableDeclaration","scope":1178,"src":"3262:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1153,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3262:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"hasher","nameLocation":"3334:6:23","nodeType":"VariableDeclaration","scope":1178,"src":"3284:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1163,"nodeType":"FunctionTypeName","parameterTypes":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"3293:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3293:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1158,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"3302:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1157,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3302:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3292:18:23"},"returnParameterTypes":{"id":1162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1163,"src":"3325:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1160,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3325:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3324:9:23"},"src":"3284:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3198:148:23"},"returnParameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1178,"src":"3370:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1166,"name":"bool","nodeType":"ElementaryTypeName","src":"3370:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3369:6:23"},"scope":2149,"src":"3183:258:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1227,"nodeType":"Block","src":"4019:195:23","statements":[{"assignments":[1200],"declarations":[{"constant":false,"id":1200,"mutability":"mutable","name":"computedHash","nameLocation":"4037:12:23","nodeType":"VariableDeclaration","scope":1227,"src":"4029:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1199,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4029:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1202,"initialValue":{"id":1201,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1184,"src":"4052:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4029:27:23"},{"body":{"id":1223,"nodeType":"Block","src":"4109:70:23","statements":[{"expression":{"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1214,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"4123:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1216,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"4145:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1217,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"4159:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1219,"indexExpression":{"id":1218,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4165:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4159:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1215,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"4138:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4123:45:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1222,"nodeType":"ExpressionStatement","src":"4123:45:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1207,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4086:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1208,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1182,"src":"4090:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:6:23","memberName":"length","nodeType":"MemberAccess","src":"4090:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4086:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1224,"initializationExpression":{"assignments":[1204],"declarations":[{"constant":false,"id":1204,"mutability":"mutable","name":"i","nameLocation":"4079:1:23","nodeType":"VariableDeclaration","scope":1224,"src":"4071:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1203,"name":"uint256","nodeType":"ElementaryTypeName","src":"4071:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1206,"initialValue":{"hexValue":"30","id":1205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4083:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4071:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4104:3:23","subExpression":{"id":1211,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"4104:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1213,"nodeType":"ExpressionStatement","src":"4104:3:23"},"nodeType":"ForStatement","src":"4066:113:23"},{"expression":{"id":1225,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1200,"src":"4195:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1198,"id":1226,"nodeType":"Return","src":"4188:19:23"}]},"documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"3447:387:23","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in memory with a custom hashing function."},"id":1228,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"3848:12:23","nodeType":"FunctionDefinition","parameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"proof","nameLocation":"3887:5:23","nodeType":"VariableDeclaration","scope":1228,"src":"3870:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1180,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3870:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1181,"nodeType":"ArrayTypeName","src":"3870:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1184,"mutability":"mutable","name":"leaf","nameLocation":"3910:4:23","nodeType":"VariableDeclaration","scope":1228,"src":"3902:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1183,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3902:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"hasher","nameLocation":"3974:6:23","nodeType":"VariableDeclaration","scope":1228,"src":"3924:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1193,"nodeType":"FunctionTypeName","parameterTypes":{"id":1189,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"3933:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3933:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1188,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"3942:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3942:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3932:18:23"},"returnParameterTypes":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1193,"src":"3965:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1190,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3965:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3964:9:23"},"src":"3924:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"3860:126:23"},"returnParameters":{"id":1198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1228,"src":"4010:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1196,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4010:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4009:9:23"},"scope":2149,"src":"3839:375:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1248,"nodeType":"Block","src":"4744:65:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1242,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"4782:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1243,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"4789:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1241,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1290,1372],"referencedDeclaration":1290,"src":"4761:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1244,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4761:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1245,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"4798:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4761:41:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1240,"id":1247,"nodeType":"Return","src":"4754:48:23"}]},"documentation":{"id":1229,"nodeType":"StructuredDocumentation","src":"4220:412:23","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":1249,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"4646:14:23","nodeType":"FunctionDefinition","parameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"proof","nameLocation":"4680:5:23","nodeType":"VariableDeclaration","scope":1249,"src":"4661:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1230,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4661:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1231,"nodeType":"ArrayTypeName","src":"4661:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"root","nameLocation":"4695:4:23","nodeType":"VariableDeclaration","scope":1249,"src":"4687:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1233,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4687:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"leaf","nameLocation":"4709:4:23","nodeType":"VariableDeclaration","scope":1249,"src":"4701:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4701:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4660:54:23"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1249,"src":"4738:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1238,"name":"bool","nodeType":"ElementaryTypeName","src":"4738:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4737:6:23"},"scope":2149,"src":"4637:172:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1289,"nodeType":"Block","src":"5314:216:23","statements":[{"assignments":[1261],"declarations":[{"constant":false,"id":1261,"mutability":"mutable","name":"computedHash","nameLocation":"5332:12:23","nodeType":"VariableDeclaration","scope":1289,"src":"5324:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1260,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5324:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1263,"initialValue":{"id":1262,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"5347:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5324:27:23"},{"body":{"id":1285,"nodeType":"Block","src":"5404:91:23","statements":[{"expression":{"id":1283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1275,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"5418:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1278,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"5461:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1279,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"5475:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1281,"indexExpression":{"id":1280,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"5481:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5475:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1276,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"5433:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$1076_$","typeString":"type(library Hashes)"}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5440:20:23","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":1063,"src":"5433:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5433:51:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5418:66:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1284,"nodeType":"ExpressionStatement","src":"5418:66:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1268,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"5381:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1269,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"5385:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5391:6:23","memberName":"length","nodeType":"MemberAccess","src":"5385:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5381:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1286,"initializationExpression":{"assignments":[1265],"declarations":[{"constant":false,"id":1265,"mutability":"mutable","name":"i","nameLocation":"5374:1:23","nodeType":"VariableDeclaration","scope":1286,"src":"5366:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1264,"name":"uint256","nodeType":"ElementaryTypeName","src":"5366:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1267,"initialValue":{"hexValue":"30","id":1266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5378:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5366:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5399:3:23","subExpression":{"id":1272,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1265,"src":"5399:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1274,"nodeType":"ExpressionStatement","src":"5399:3:23"},"nodeType":"ForStatement","src":"5361:134:23"},{"expression":{"id":1287,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"5511:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1259,"id":1288,"nodeType":"Return","src":"5504:19:23"}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"4815:392:23","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with the default hashing function."},"id":1290,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"5221:20:23","nodeType":"FunctionDefinition","parameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1253,"mutability":"mutable","name":"proof","nameLocation":"5261:5:23","nodeType":"VariableDeclaration","scope":1290,"src":"5242:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5242:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1252,"nodeType":"ArrayTypeName","src":"5242:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1255,"mutability":"mutable","name":"leaf","nameLocation":"5276:4:23","nodeType":"VariableDeclaration","scope":1290,"src":"5268:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1254,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5268:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5241:40:23"},"returnParameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1258,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1290,"src":"5305:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1257,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5305:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5304:9:23"},"scope":2149,"src":"5212:318:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1321,"nodeType":"Block","src":"6153:73:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1314,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1294,"src":"6191:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1315,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1298,"src":"6198:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1316,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1308,"src":"6204:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1313,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1290,1372],"referencedDeclaration":1372,"src":"6170:20:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6170:41:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1318,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1296,"src":"6215:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6170:49:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1312,"id":1320,"nodeType":"Return","src":"6163:56:23"}]},"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"5536:409:23","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":1322,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"5959:14:23","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1294,"mutability":"mutable","name":"proof","nameLocation":"6002:5:23","nodeType":"VariableDeclaration","scope":1322,"src":"5983:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1292,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5983:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1293,"nodeType":"ArrayTypeName","src":"5983:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1296,"mutability":"mutable","name":"root","nameLocation":"6025:4:23","nodeType":"VariableDeclaration","scope":1322,"src":"6017:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1295,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6017:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1298,"mutability":"mutable","name":"leaf","nameLocation":"6047:4:23","nodeType":"VariableDeclaration","scope":1322,"src":"6039:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1297,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6039:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1308,"mutability":"mutable","name":"hasher","nameLocation":"6111:6:23","nodeType":"VariableDeclaration","scope":1322,"src":"6061:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1307,"nodeType":"FunctionTypeName","parameterTypes":{"id":1303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"6070:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6070:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"6079:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1301,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6079:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6069:18:23"},"returnParameterTypes":{"id":1306,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1305,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1307,"src":"6102:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6102:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6101:9:23"},"src":"6061:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"5973:150:23"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1311,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1322,"src":"6147:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1310,"name":"bool","nodeType":"ElementaryTypeName","src":"6147:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6146:6:23"},"scope":2149,"src":"5950:276:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1371,"nodeType":"Block","src":"6816:195:23","statements":[{"assignments":[1344],"declarations":[{"constant":false,"id":1344,"mutability":"mutable","name":"computedHash","nameLocation":"6834:12:23","nodeType":"VariableDeclaration","scope":1371,"src":"6826:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6826:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1346,"initialValue":{"id":1345,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"6849:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6826:27:23"},{"body":{"id":1367,"nodeType":"Block","src":"6906:70:23","statements":[{"expression":{"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1358,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"6920:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1360,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"6942:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1361,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"6956:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1363,"indexExpression":{"id":1362,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"6962:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6956:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1359,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"6935:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6935:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6920:45:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1366,"nodeType":"ExpressionStatement","src":"6920:45:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1351,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"6883:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1352,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1326,"src":"6887:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6893:6:23","memberName":"length","nodeType":"MemberAccess","src":"6887:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6883:16:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1368,"initializationExpression":{"assignments":[1348],"declarations":[{"constant":false,"id":1348,"mutability":"mutable","name":"i","nameLocation":"6876:1:23","nodeType":"VariableDeclaration","scope":1368,"src":"6868:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"6868:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1350,"initialValue":{"hexValue":"30","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6880:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6868:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6901:3:23","subExpression":{"id":1355,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"6901:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1357,"nodeType":"ExpressionStatement","src":"6901:3:23"},"nodeType":"ForStatement","src":"6863:113:23"},{"expression":{"id":1369,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"6992:12:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1342,"id":1370,"nodeType":"Return","src":"6985:19:23"}]},"documentation":{"id":1323,"nodeType":"StructuredDocumentation","src":"6232:389:23","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leaves & pre-images are assumed to be sorted.\n This version handles proofs in calldata with a custom hashing function."},"id":1372,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"6635:20:23","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1326,"mutability":"mutable","name":"proof","nameLocation":"6684:5:23","nodeType":"VariableDeclaration","scope":1372,"src":"6665:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1324,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6665:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1325,"nodeType":"ArrayTypeName","src":"6665:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"leaf","nameLocation":"6707:4:23","nodeType":"VariableDeclaration","scope":1372,"src":"6699:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6699:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1338,"mutability":"mutable","name":"hasher","nameLocation":"6771:6:23","nodeType":"VariableDeclaration","scope":1372,"src":"6721:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1337,"nodeType":"FunctionTypeName","parameterTypes":{"id":1333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1330,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"6730:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1329,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6730:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"6739:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1331,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6739:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6729:18:23"},"returnParameterTypes":{"id":1336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1335,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"6762:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1334,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6762:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6761:9:23"},"src":"6721:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"6655:128:23"},"returnParameters":{"id":1342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1372,"src":"6807:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6807:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6806:9:23"},"scope":2149,"src":"6626:385:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1397,"nodeType":"Block","src":"7797:76:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1390,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"7832:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1391,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1379,"src":"7839:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1392,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"7851:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1389,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[1556,1760],"referencedDeclaration":1556,"src":"7814:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1393,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7814:44:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1394,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1381,"src":"7862:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"7814:52:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1388,"id":1396,"nodeType":"Return","src":"7807:59:23"}]},"documentation":{"id":1373,"nodeType":"StructuredDocumentation","src":"7017:593:23","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":1398,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"7624:16:23","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1376,"mutability":"mutable","name":"proof","nameLocation":"7667:5:23","nodeType":"VariableDeclaration","scope":1398,"src":"7650:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7650:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1375,"nodeType":"ArrayTypeName","src":"7650:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"proofFlags","nameLocation":"7696:10:23","nodeType":"VariableDeclaration","scope":1398,"src":"7682:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1377,"name":"bool","nodeType":"ElementaryTypeName","src":"7682:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1378,"nodeType":"ArrayTypeName","src":"7682:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1381,"mutability":"mutable","name":"root","nameLocation":"7724:4:23","nodeType":"VariableDeclaration","scope":1398,"src":"7716:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1380,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7716:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"leaves","nameLocation":"7755:6:23","nodeType":"VariableDeclaration","scope":1398,"src":"7738:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1382,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7738:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1383,"nodeType":"ArrayTypeName","src":"7738:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7640:127:23"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1398,"src":"7791:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1386,"name":"bool","nodeType":"ElementaryTypeName","src":"7791:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7790:6:23"},"scope":2149,"src":"7615:258:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1555,"nodeType":"Block","src":"9159:2104:23","statements":[{"assignments":[1414],"declarations":[{"constant":false,"id":1414,"mutability":"mutable","name":"leavesLen","nameLocation":"9551:9:23","nodeType":"VariableDeclaration","scope":1555,"src":"9543:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1413,"name":"uint256","nodeType":"ElementaryTypeName","src":"9543:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1417,"initialValue":{"expression":{"id":1415,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"9563:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9570:6:23","memberName":"length","nodeType":"MemberAccess","src":"9563:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9543:33:23"},{"assignments":[1419],"declarations":[{"constant":false,"id":1419,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"9594:13:23","nodeType":"VariableDeclaration","scope":1555,"src":"9586:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1418,"name":"uint256","nodeType":"ElementaryTypeName","src":"9586:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1422,"initialValue":{"expression":{"id":1420,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"9610:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9621:6:23","memberName":"length","nodeType":"MemberAccess","src":"9610:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9586:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1423,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"9675:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1424,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"9687:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9693:6:23","memberName":"length","nodeType":"MemberAccess","src":"9687:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1429,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1427,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"9703:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9703:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9675:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1435,"nodeType":"IfStatement","src":"9671:113:23","trueBody":{"id":1434,"nodeType":"Block","src":"9722:62:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1431,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"9743:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1432,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9743:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1433,"nodeType":"RevertStatement","src":"9736:37:23"}]}},{"assignments":[1440],"declarations":[{"constant":false,"id":1440,"mutability":"mutable","name":"hashes","nameLocation":"10045:6:23","nodeType":"VariableDeclaration","scope":1555,"src":"10028:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1438,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10028:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1439,"nodeType":"ArrayTypeName","src":"10028:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1446,"initialValue":{"arguments":[{"id":1444,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"10068:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1443,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"10054:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1441,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10058:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1442,"nodeType":"ArrayTypeName","src":"10058:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10054:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"10028:54:23"},{"assignments":[1448],"declarations":[{"constant":false,"id":1448,"mutability":"mutable","name":"leafPos","nameLocation":"10100:7:23","nodeType":"VariableDeclaration","scope":1555,"src":"10092:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1447,"name":"uint256","nodeType":"ElementaryTypeName","src":"10092:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1450,"initialValue":{"hexValue":"30","id":1449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10110:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10092:19:23"},{"assignments":[1452],"declarations":[{"constant":false,"id":1452,"mutability":"mutable","name":"hashPos","nameLocation":"10129:7:23","nodeType":"VariableDeclaration","scope":1555,"src":"10121:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1451,"name":"uint256","nodeType":"ElementaryTypeName","src":"10121:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1454,"initialValue":{"hexValue":"30","id":1453,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10139:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10121:19:23"},{"assignments":[1456],"declarations":[{"constant":false,"id":1456,"mutability":"mutable","name":"proofPos","nameLocation":"10158:8:23","nodeType":"VariableDeclaration","scope":1555,"src":"10150:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1455,"name":"uint256","nodeType":"ElementaryTypeName","src":"10150:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1458,"initialValue":{"hexValue":"30","id":1457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10169:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10150:20:23"},{"body":{"id":1518,"nodeType":"Block","src":"10590:310:23","statements":[{"assignments":[1470],"declarations":[{"constant":false,"id":1470,"mutability":"mutable","name":"a","nameLocation":"10612:1:23","nodeType":"VariableDeclaration","scope":1518,"src":"10604:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1469,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10604:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1483,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1471,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"10616:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1472,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"10626:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10616:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1478,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"10658:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1481,"indexExpression":{"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10665:9:23","subExpression":{"id":1479,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"10665:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10658:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10616:59:23","trueExpression":{"baseExpression":{"id":1474,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"10638:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1477,"indexExpression":{"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10645:9:23","subExpression":{"id":1475,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"10645:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10638:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10604:71:23"},{"assignments":[1485],"declarations":[{"constant":false,"id":1485,"mutability":"mutable","name":"b","nameLocation":"10697:1:23","nodeType":"VariableDeclaration","scope":1518,"src":"10689:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1484,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10689:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1507,"initialValue":{"condition":{"baseExpression":{"id":1486,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"10701:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1488,"indexExpression":{"id":1487,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"10712:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10701:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1502,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"10813:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1505,"indexExpression":{"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10819:10:23","subExpression":{"id":1503,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"10819:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10813:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10701:129:23","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1489,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"10734:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1490,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"10744:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10734:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1496,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"10776:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1499,"indexExpression":{"id":1498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10783:9:23","subExpression":{"id":1497,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1452,"src":"10783:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10776:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10734:59:23","trueExpression":{"baseExpression":{"id":1492,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"10756:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1495,"indexExpression":{"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10763:9:23","subExpression":{"id":1493,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"10763:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10756:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10733:61:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"10689:141:23"},{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1508,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"10844:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1510,"indexExpression":{"id":1509,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"10851:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10844:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1513,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1470,"src":"10884:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1514,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"10887:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1511,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"10856:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$1076_$","typeString":"type(library Hashes)"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10863:20:23","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":1063,"src":"10856:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10856:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"10844:45:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1517,"nodeType":"ExpressionStatement","src":"10844:45:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1463,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"10566:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1464,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"10570:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10566:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1519,"initializationExpression":{"assignments":[1460],"declarations":[{"constant":false,"id":1460,"mutability":"mutable","name":"i","nameLocation":"10559:1:23","nodeType":"VariableDeclaration","scope":1519,"src":"10551:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1459,"name":"uint256","nodeType":"ElementaryTypeName","src":"10551:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1462,"initialValue":{"hexValue":"30","id":1461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10563:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10551:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10585:3:23","subExpression":{"id":1466,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"10585:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"nodeType":"ExpressionStatement","src":"10585:3:23"},"nodeType":"ForStatement","src":"10546:354:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1520,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"10914:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1521,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10930:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10914:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1540,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1414,"src":"11155:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11167:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11155:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1552,"nodeType":"Block","src":"11217:40:23","statements":[{"expression":{"baseExpression":{"id":1548,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"11238:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1550,"indexExpression":{"hexValue":"30","id":1549,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11244:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11238:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1412,"id":1551,"nodeType":"Return","src":"11231:15:23"}]},"id":1553,"nodeType":"IfStatement","src":"11151:106:23","trueBody":{"id":1547,"nodeType":"Block","src":"11170:41:23","statements":[{"expression":{"baseExpression":{"id":1543,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1408,"src":"11191:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1545,"indexExpression":{"hexValue":"30","id":1544,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11198:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11191:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1412,"id":1546,"nodeType":"Return","src":"11184:16:23"}]}},"id":1554,"nodeType":"IfStatement","src":"10910:347:23","trueBody":{"id":1539,"nodeType":"Block","src":"10933:212:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1523,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"10951:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1524,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1402,"src":"10963:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10969:6:23","memberName":"length","nodeType":"MemberAccess","src":"10963:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10951:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1531,"nodeType":"IfStatement","src":"10947:100:23","trueBody":{"id":1530,"nodeType":"Block","src":"10977:70:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1527,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"11002:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11002:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1529,"nodeType":"RevertStatement","src":"10995:37:23"}]}},{"id":1538,"nodeType":"UncheckedBlock","src":"11060:75:23","statements":[{"expression":{"baseExpression":{"id":1532,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1440,"src":"11095:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1536,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1533,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1419,"src":"11102:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11118:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"11102:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11095:25:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1412,"id":1537,"nodeType":"Return","src":"11088:32:23"}]}]}}]},"documentation":{"id":1399,"nodeType":"StructuredDocumentation","src":"7879:1100:23","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1556,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"8993:17:23","nodeType":"FunctionDefinition","parameters":{"id":1409,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1402,"mutability":"mutable","name":"proof","nameLocation":"9037:5:23","nodeType":"VariableDeclaration","scope":1556,"src":"9020:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1400,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9020:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1401,"nodeType":"ArrayTypeName","src":"9020:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"proofFlags","nameLocation":"9066:10:23","nodeType":"VariableDeclaration","scope":1556,"src":"9052:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1403,"name":"bool","nodeType":"ElementaryTypeName","src":"9052:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1404,"nodeType":"ArrayTypeName","src":"9052:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1408,"mutability":"mutable","name":"leaves","nameLocation":"9103:6:23","nodeType":"VariableDeclaration","scope":1556,"src":"9086:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9086:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1407,"nodeType":"ArrayTypeName","src":"9086:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"9010:105:23"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"merkleRoot","nameLocation":"9147:10:23","nodeType":"VariableDeclaration","scope":1556,"src":"9139:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9139:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9138:20:23"},"scope":2149,"src":"8984:2279:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1592,"nodeType":"Block","src":"12112:84:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1584,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"12147:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1585,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1563,"src":"12154:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1586,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1568,"src":"12166:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1587,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1578,"src":"12174:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1583,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[1556,1760],"referencedDeclaration":1760,"src":"12129:17:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12129:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1589,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"12185:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"12129:60:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1582,"id":1591,"nodeType":"Return","src":"12122:67:23"}]},"documentation":{"id":1557,"nodeType":"StructuredDocumentation","src":"11269:590:23","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProof}."},"id":1593,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"11873:16:23","nodeType":"FunctionDefinition","parameters":{"id":1579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"proof","nameLocation":"11916:5:23","nodeType":"VariableDeclaration","scope":1593,"src":"11899:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1558,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11899:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1559,"nodeType":"ArrayTypeName","src":"11899:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1563,"mutability":"mutable","name":"proofFlags","nameLocation":"11945:10:23","nodeType":"VariableDeclaration","scope":1593,"src":"11931:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1561,"name":"bool","nodeType":"ElementaryTypeName","src":"11931:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1562,"nodeType":"ArrayTypeName","src":"11931:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"root","nameLocation":"11973:4:23","nodeType":"VariableDeclaration","scope":1593,"src":"11965:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11965:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1568,"mutability":"mutable","name":"leaves","nameLocation":"12004:6:23","nodeType":"VariableDeclaration","scope":1593,"src":"11987:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11987:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1567,"nodeType":"ArrayTypeName","src":"11987:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1578,"mutability":"mutable","name":"hasher","nameLocation":"12070:6:23","nodeType":"VariableDeclaration","scope":1593,"src":"12020:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1577,"nodeType":"FunctionTypeName","parameterTypes":{"id":1573,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1577,"src":"12029:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1569,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12029:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1572,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1577,"src":"12038:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1571,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12038:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12028:18:23"},"returnParameterTypes":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1575,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1577,"src":"12061:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1574,"name":"bytes32","nodeType":"ElementaryTypeName","src":"12061:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"12060:9:23"},"src":"12020:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"11889:193:23"},"returnParameters":{"id":1582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1581,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1593,"src":"12106:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1580,"name":"bool","nodeType":"ElementaryTypeName","src":"12106:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12105:6:23"},"scope":2149,"src":"11864:332:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1759,"nodeType":"Block","src":"13545:2083:23","statements":[{"assignments":[1619],"declarations":[{"constant":false,"id":1619,"mutability":"mutable","name":"leavesLen","nameLocation":"13937:9:23","nodeType":"VariableDeclaration","scope":1759,"src":"13929:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"13929:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1622,"initialValue":{"expression":{"id":1620,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"13949:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13956:6:23","memberName":"length","nodeType":"MemberAccess","src":"13949:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13929:33:23"},{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"13980:13:23","nodeType":"VariableDeclaration","scope":1759,"src":"13972:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"13972:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1627,"initialValue":{"expression":{"id":1625,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"13996:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1626,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14007:6:23","memberName":"length","nodeType":"MemberAccess","src":"13996:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13972:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1628,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"14061:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1629,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"14073:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14079:6:23","memberName":"length","nodeType":"MemberAccess","src":"14073:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1632,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"14089:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14105:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"14089:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14061:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1640,"nodeType":"IfStatement","src":"14057:113:23","trueBody":{"id":1639,"nodeType":"Block","src":"14108:62:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1636,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"14129:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1638,"nodeType":"RevertStatement","src":"14122:37:23"}]}},{"assignments":[1645],"declarations":[{"constant":false,"id":1645,"mutability":"mutable","name":"hashes","nameLocation":"14431:6:23","nodeType":"VariableDeclaration","scope":1759,"src":"14414:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1643,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14414:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1644,"nodeType":"ArrayTypeName","src":"14414:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1651,"initialValue":{"arguments":[{"id":1649,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"14454:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"14440:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1646,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14444:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1647,"nodeType":"ArrayTypeName","src":"14444:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14440:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"14414:54:23"},{"assignments":[1653],"declarations":[{"constant":false,"id":1653,"mutability":"mutable","name":"leafPos","nameLocation":"14486:7:23","nodeType":"VariableDeclaration","scope":1759,"src":"14478:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"14478:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1655,"initialValue":{"hexValue":"30","id":1654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14496:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14478:19:23"},{"assignments":[1657],"declarations":[{"constant":false,"id":1657,"mutability":"mutable","name":"hashPos","nameLocation":"14515:7:23","nodeType":"VariableDeclaration","scope":1759,"src":"14507:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"14507:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1659,"initialValue":{"hexValue":"30","id":1658,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14525:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14507:19:23"},{"assignments":[1661],"declarations":[{"constant":false,"id":1661,"mutability":"mutable","name":"proofPos","nameLocation":"14544:8:23","nodeType":"VariableDeclaration","scope":1759,"src":"14536:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1660,"name":"uint256","nodeType":"ElementaryTypeName","src":"14536:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1663,"initialValue":{"hexValue":"30","id":1662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14555:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14536:20:23"},{"body":{"id":1722,"nodeType":"Block","src":"14976:289:23","statements":[{"assignments":[1675],"declarations":[{"constant":false,"id":1675,"mutability":"mutable","name":"a","nameLocation":"14998:1:23","nodeType":"VariableDeclaration","scope":1722,"src":"14990:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1674,"name":"bytes32","nodeType":"ElementaryTypeName","src":"14990:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1688,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1676,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"15002:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1677,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"15012:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15002:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1683,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"15044:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1686,"indexExpression":{"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15051:9:23","subExpression":{"id":1684,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"15051:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15044:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15002:59:23","trueExpression":{"baseExpression":{"id":1679,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"15024:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1682,"indexExpression":{"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15031:9:23","subExpression":{"id":1680,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"15031:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15024:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"14990:71:23"},{"assignments":[1690],"declarations":[{"constant":false,"id":1690,"mutability":"mutable","name":"b","nameLocation":"15083:1:23","nodeType":"VariableDeclaration","scope":1722,"src":"15075:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"15075:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1712,"initialValue":{"condition":{"baseExpression":{"id":1691,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1600,"src":"15087:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1693,"indexExpression":{"id":1692,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"15098:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15087:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1707,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"15199:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1710,"indexExpression":{"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15205:10:23","subExpression":{"id":1708,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"15205:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15199:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15087:129:23","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1694,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"15120:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1695,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"15130:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15120:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1701,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"15162:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1704,"indexExpression":{"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15169:9:23","subExpression":{"id":1702,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"15169:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15162:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"15120:59:23","trueExpression":{"baseExpression":{"id":1697,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"15142:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1700,"indexExpression":{"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"15149:9:23","subExpression":{"id":1698,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"15149:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15142:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1706,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"15119:61:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"15075:141:23"},{"expression":{"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1713,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"15230:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1715,"indexExpression":{"id":1714,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"15237:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15230:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1717,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"15249:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1718,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1690,"src":"15252:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1716,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1613,"src":"15242:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15242:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"15230:24:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1721,"nodeType":"ExpressionStatement","src":"15230:24:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"14952:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1669,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"14956:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14952:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1723,"initializationExpression":{"assignments":[1665],"declarations":[{"constant":false,"id":1665,"mutability":"mutable","name":"i","nameLocation":"14945:1:23","nodeType":"VariableDeclaration","scope":1723,"src":"14937:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1664,"name":"uint256","nodeType":"ElementaryTypeName","src":"14937:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1667,"initialValue":{"hexValue":"30","id":1666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14949:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"14937:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"14971:3:23","subExpression":{"id":1671,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1665,"src":"14971:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1673,"nodeType":"ExpressionStatement","src":"14971:3:23"},"nodeType":"ForStatement","src":"14932:333:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1724,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"15279:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15295:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15279:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1744,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"15520:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15532:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15520:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1756,"nodeType":"Block","src":"15582:40:23","statements":[{"expression":{"baseExpression":{"id":1752,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"15603:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1754,"indexExpression":{"hexValue":"30","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15609:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15603:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1617,"id":1755,"nodeType":"Return","src":"15596:15:23"}]},"id":1757,"nodeType":"IfStatement","src":"15516:106:23","trueBody":{"id":1751,"nodeType":"Block","src":"15535:41:23","statements":[{"expression":{"baseExpression":{"id":1747,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"15556:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1749,"indexExpression":{"hexValue":"30","id":1748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15563:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15556:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1617,"id":1750,"nodeType":"Return","src":"15549:16:23"}]}},"id":1758,"nodeType":"IfStatement","src":"15275:347:23","trueBody":{"id":1743,"nodeType":"Block","src":"15298:212:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1727,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"15316:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1728,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1597,"src":"15328:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15334:6:23","memberName":"length","nodeType":"MemberAccess","src":"15328:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15316:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1735,"nodeType":"IfStatement","src":"15312:100:23","trueBody":{"id":1734,"nodeType":"Block","src":"15342:70:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1731,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"15367:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15367:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1733,"nodeType":"RevertStatement","src":"15360:37:23"}]}},{"id":1742,"nodeType":"UncheckedBlock","src":"15425:75:23","statements":[{"expression":{"baseExpression":{"id":1736,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"15460:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1740,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1737,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"15467:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15483:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"15467:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"15460:25:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1617,"id":1741,"nodeType":"Return","src":"15453:32:23"}]}]}}]},"documentation":{"id":1594,"nodeType":"StructuredDocumentation","src":"12202:1097:23","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in memory with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1760,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"13313:17:23","nodeType":"FunctionDefinition","parameters":{"id":1614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1597,"mutability":"mutable","name":"proof","nameLocation":"13357:5:23","nodeType":"VariableDeclaration","scope":1760,"src":"13340:22:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13340:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1596,"nodeType":"ArrayTypeName","src":"13340:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1600,"mutability":"mutable","name":"proofFlags","nameLocation":"13386:10:23","nodeType":"VariableDeclaration","scope":1760,"src":"13372:24:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1598,"name":"bool","nodeType":"ElementaryTypeName","src":"13372:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1599,"nodeType":"ArrayTypeName","src":"13372:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1603,"mutability":"mutable","name":"leaves","nameLocation":"13423:6:23","nodeType":"VariableDeclaration","scope":1760,"src":"13406:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1601,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13406:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1602,"nodeType":"ArrayTypeName","src":"13406:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1613,"mutability":"mutable","name":"hasher","nameLocation":"13489:6:23","nodeType":"VariableDeclaration","scope":1760,"src":"13439:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1612,"nodeType":"FunctionTypeName","parameterTypes":{"id":1608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1605,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"13448:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1604,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13448:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1607,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"13457:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1606,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13457:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13447:18:23"},"returnParameterTypes":{"id":1611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"13480:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13480:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13479:9:23"},"src":"13439:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"13330:171:23"},"returnParameters":{"id":1617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1616,"mutability":"mutable","name":"merkleRoot","nameLocation":"13533:10:23","nodeType":"VariableDeclaration","scope":1760,"src":"13525:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1615,"name":"bytes32","nodeType":"ElementaryTypeName","src":"13525:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"13524:20:23"},"scope":2149,"src":"13304:2324:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1785,"nodeType":"Block","src":"16436:84:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1778,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"16479:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1779,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1767,"src":"16486:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1780,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1772,"src":"16498:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1777,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1944,2148],"referencedDeclaration":1944,"src":"16453:25:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16453:52:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1782,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"16509:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"16453:60:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1776,"id":1784,"nodeType":"Return","src":"16446:67:23"}]},"documentation":{"id":1761,"nodeType":"StructuredDocumentation","src":"15634:603:23","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1786,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"16251:24:23","nodeType":"FunctionDefinition","parameters":{"id":1773,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1764,"mutability":"mutable","name":"proof","nameLocation":"16304:5:23","nodeType":"VariableDeclaration","scope":1786,"src":"16285:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16285:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1763,"nodeType":"ArrayTypeName","src":"16285:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1767,"mutability":"mutable","name":"proofFlags","nameLocation":"16335:10:23","nodeType":"VariableDeclaration","scope":1786,"src":"16319:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1765,"name":"bool","nodeType":"ElementaryTypeName","src":"16319:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1766,"nodeType":"ArrayTypeName","src":"16319:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1769,"mutability":"mutable","name":"root","nameLocation":"16363:4:23","nodeType":"VariableDeclaration","scope":1786,"src":"16355:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1768,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16355:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1772,"mutability":"mutable","name":"leaves","nameLocation":"16394:6:23","nodeType":"VariableDeclaration","scope":1786,"src":"16377:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"16377:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1771,"nodeType":"ArrayTypeName","src":"16377:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"16275:131:23"},"returnParameters":{"id":1776,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1775,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1786,"src":"16430:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1774,"name":"bool","nodeType":"ElementaryTypeName","src":"16430:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"16429:6:23"},"scope":2149,"src":"16242:278:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1943,"nodeType":"Block","src":"17820:2104:23","statements":[{"assignments":[1802],"declarations":[{"constant":false,"id":1802,"mutability":"mutable","name":"leavesLen","nameLocation":"18212:9:23","nodeType":"VariableDeclaration","scope":1943,"src":"18204:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"18204:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1805,"initialValue":{"expression":{"id":1803,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"18224:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18231:6:23","memberName":"length","nodeType":"MemberAccess","src":"18224:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18204:33:23"},{"assignments":[1807],"declarations":[{"constant":false,"id":1807,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"18255:13:23","nodeType":"VariableDeclaration","scope":1943,"src":"18247:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1806,"name":"uint256","nodeType":"ElementaryTypeName","src":"18247:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1810,"initialValue":{"expression":{"id":1808,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"18271:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18282:6:23","memberName":"length","nodeType":"MemberAccess","src":"18271:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18247:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"18336:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1812,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"18348:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18354:6:23","memberName":"length","nodeType":"MemberAccess","src":"18348:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1815,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"18364:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1816,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18380:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"18364:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18336:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1823,"nodeType":"IfStatement","src":"18332:113:23","trueBody":{"id":1822,"nodeType":"Block","src":"18383:62:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1819,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"18404:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18404:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1821,"nodeType":"RevertStatement","src":"18397:37:23"}]}},{"assignments":[1828],"declarations":[{"constant":false,"id":1828,"mutability":"mutable","name":"hashes","nameLocation":"18706:6:23","nodeType":"VariableDeclaration","scope":1943,"src":"18689:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18689:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1827,"nodeType":"ArrayTypeName","src":"18689:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1834,"initialValue":{"arguments":[{"id":1832,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"18729:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1831,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"18715:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1829,"name":"bytes32","nodeType":"ElementaryTypeName","src":"18719:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1830,"nodeType":"ArrayTypeName","src":"18719:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18715:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"18689:54:23"},{"assignments":[1836],"declarations":[{"constant":false,"id":1836,"mutability":"mutable","name":"leafPos","nameLocation":"18761:7:23","nodeType":"VariableDeclaration","scope":1943,"src":"18753:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"18753:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1838,"initialValue":{"hexValue":"30","id":1837,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18771:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18753:19:23"},{"assignments":[1840],"declarations":[{"constant":false,"id":1840,"mutability":"mutable","name":"hashPos","nameLocation":"18790:7:23","nodeType":"VariableDeclaration","scope":1943,"src":"18782:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"18782:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1842,"initialValue":{"hexValue":"30","id":1841,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18800:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18782:19:23"},{"assignments":[1844],"declarations":[{"constant":false,"id":1844,"mutability":"mutable","name":"proofPos","nameLocation":"18819:8:23","nodeType":"VariableDeclaration","scope":1943,"src":"18811:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"18811:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1846,"initialValue":{"hexValue":"30","id":1845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18830:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"18811:20:23"},{"body":{"id":1906,"nodeType":"Block","src":"19251:310:23","statements":[{"assignments":[1858],"declarations":[{"constant":false,"id":1858,"mutability":"mutable","name":"a","nameLocation":"19273:1:23","nodeType":"VariableDeclaration","scope":1906,"src":"19265:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1857,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19265:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1871,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1859,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"19277:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1860,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"19287:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19277:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1866,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"19319:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1869,"indexExpression":{"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19326:9:23","subExpression":{"id":1867,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"19326:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19319:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19277:59:23","trueExpression":{"baseExpression":{"id":1862,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"19299:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1865,"indexExpression":{"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19306:9:23","subExpression":{"id":1863,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"19306:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19299:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19265:71:23"},{"assignments":[1873],"declarations":[{"constant":false,"id":1873,"mutability":"mutable","name":"b","nameLocation":"19358:1:23","nodeType":"VariableDeclaration","scope":1906,"src":"19350:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1872,"name":"bytes32","nodeType":"ElementaryTypeName","src":"19350:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1895,"initialValue":{"condition":{"baseExpression":{"id":1874,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"19362:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1876,"indexExpression":{"id":1875,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"19373:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19362:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1890,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"19474:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1893,"indexExpression":{"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19480:10:23","subExpression":{"id":1891,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"19480:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19474:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19362:129:23","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1879,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1877,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"19395:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1878,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"19405:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19395:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1884,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"19437:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1887,"indexExpression":{"id":1886,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19444:9:23","subExpression":{"id":1885,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"19444:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19437:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"19395:59:23","trueExpression":{"baseExpression":{"id":1880,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"19417:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1883,"indexExpression":{"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19424:9:23","subExpression":{"id":1881,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"19424:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19417:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":1889,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"19394:61:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"19350:141:23"},{"expression":{"id":1904,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1896,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"19505:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1898,"indexExpression":{"id":1897,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"19512:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19505:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1901,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"19545:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1902,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1873,"src":"19548:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1899,"name":"Hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"19517:6:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Hashes_$1076_$","typeString":"type(library Hashes)"}},"id":1900,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19524:20:23","memberName":"commutativeKeccak256","nodeType":"MemberAccess","referencedDeclaration":1063,"src":"19517:27:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19517:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"19505:45:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1905,"nodeType":"ExpressionStatement","src":"19505:45:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1851,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"19227:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1852,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"19231:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19227:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1907,"initializationExpression":{"assignments":[1848],"declarations":[{"constant":false,"id":1848,"mutability":"mutable","name":"i","nameLocation":"19220:1:23","nodeType":"VariableDeclaration","scope":1907,"src":"19212:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1847,"name":"uint256","nodeType":"ElementaryTypeName","src":"19212:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1850,"initialValue":{"hexValue":"30","id":1849,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19224:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"19212:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"19246:3:23","subExpression":{"id":1854,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"19246:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1856,"nodeType":"ExpressionStatement","src":"19246:3:23"},"nodeType":"ForStatement","src":"19207:354:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1908,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"19575:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19591:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19575:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1928,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"19816:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1929,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19828:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19816:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1940,"nodeType":"Block","src":"19878:40:23","statements":[{"expression":{"baseExpression":{"id":1936,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"19899:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1938,"indexExpression":{"hexValue":"30","id":1937,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19905:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19899:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1800,"id":1939,"nodeType":"Return","src":"19892:15:23"}]},"id":1941,"nodeType":"IfStatement","src":"19812:106:23","trueBody":{"id":1935,"nodeType":"Block","src":"19831:41:23","statements":[{"expression":{"baseExpression":{"id":1931,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1796,"src":"19852:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1933,"indexExpression":{"hexValue":"30","id":1932,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19859:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19852:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1800,"id":1934,"nodeType":"Return","src":"19845:16:23"}]}},"id":1942,"nodeType":"IfStatement","src":"19571:347:23","trueBody":{"id":1927,"nodeType":"Block","src":"19594:212:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1911,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"19612:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1912,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1790,"src":"19624:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"19630:6:23","memberName":"length","nodeType":"MemberAccess","src":"19624:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19612:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1919,"nodeType":"IfStatement","src":"19608:100:23","trueBody":{"id":1918,"nodeType":"Block","src":"19638:70:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1915,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"19663:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19663:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1917,"nodeType":"RevertStatement","src":"19656:37:23"}]}},{"id":1926,"nodeType":"UncheckedBlock","src":"19721:75:23","statements":[{"expression":{"baseExpression":{"id":1920,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1828,"src":"19756:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1924,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1921,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"19763:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19779:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"19763:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"19756:25:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1800,"id":1925,"nodeType":"Return","src":"19749:32:23"}]}]}}]},"documentation":{"id":1787,"nodeType":"StructuredDocumentation","src":"16526:1102:23","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with the default hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":1944,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"17642:25:23","nodeType":"FunctionDefinition","parameters":{"id":1797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1790,"mutability":"mutable","name":"proof","nameLocation":"17696:5:23","nodeType":"VariableDeclaration","scope":1944,"src":"17677:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17677:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1789,"nodeType":"ArrayTypeName","src":"17677:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1793,"mutability":"mutable","name":"proofFlags","nameLocation":"17727:10:23","nodeType":"VariableDeclaration","scope":1944,"src":"17711:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1791,"name":"bool","nodeType":"ElementaryTypeName","src":"17711:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1792,"nodeType":"ArrayTypeName","src":"17711:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"leaves","nameLocation":"17764:6:23","nodeType":"VariableDeclaration","scope":1944,"src":"17747:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17747:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1795,"nodeType":"ArrayTypeName","src":"17747:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"17667:109:23"},"returnParameters":{"id":1800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1799,"mutability":"mutable","name":"merkleRoot","nameLocation":"17808:10:23","nodeType":"VariableDeclaration","scope":1944,"src":"17800:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1798,"name":"bytes32","nodeType":"ElementaryTypeName","src":"17800:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"17799:20:23"},"scope":2149,"src":"17633:2291:23","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1980,"nodeType":"Block","src":"20795:92:23","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1972,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1948,"src":"20838:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1973,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1951,"src":"20845:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1974,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1956,"src":"20857:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1975,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1966,"src":"20865:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}],"id":1971,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[1944,2148],"referencedDeclaration":2148,"src":"20812:25:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32)) view returns (bytes32)"}},"id":1976,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20812:60:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1977,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1953,"src":"20876:4:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"20812:68:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1970,"id":1979,"nodeType":"Return","src":"20805:75:23"}]},"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"19930:600:23","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\n NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\n The `leaves` must be validated independently. See {processMultiProofCalldata}."},"id":1981,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"20544:24:23","nodeType":"FunctionDefinition","parameters":{"id":1967,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1948,"mutability":"mutable","name":"proof","nameLocation":"20597:5:23","nodeType":"VariableDeclaration","scope":1981,"src":"20578:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1946,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20578:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1947,"nodeType":"ArrayTypeName","src":"20578:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1951,"mutability":"mutable","name":"proofFlags","nameLocation":"20628:10:23","nodeType":"VariableDeclaration","scope":1981,"src":"20612:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1949,"name":"bool","nodeType":"ElementaryTypeName","src":"20612:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1950,"nodeType":"ArrayTypeName","src":"20612:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1953,"mutability":"mutable","name":"root","nameLocation":"20656:4:23","nodeType":"VariableDeclaration","scope":1981,"src":"20648:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20648:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1956,"mutability":"mutable","name":"leaves","nameLocation":"20687:6:23","nodeType":"VariableDeclaration","scope":1981,"src":"20670:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1954,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20670:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1955,"nodeType":"ArrayTypeName","src":"20670:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1966,"mutability":"mutable","name":"hasher","nameLocation":"20753:6:23","nodeType":"VariableDeclaration","scope":1981,"src":"20703:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":1965,"nodeType":"FunctionTypeName","parameterTypes":{"id":1961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1965,"src":"20712:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1957,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20712:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1960,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1965,"src":"20721:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20721:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20711:18:23"},"returnParameterTypes":{"id":1964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1965,"src":"20744:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1962,"name":"bytes32","nodeType":"ElementaryTypeName","src":"20744:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"20743:9:23"},"src":"20703:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"20568:197:23"},"returnParameters":{"id":1970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1969,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1981,"src":"20789:4:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1968,"name":"bool","nodeType":"ElementaryTypeName","src":"20789:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"20788:6:23"},"scope":2149,"src":"20535:352:23","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2147,"nodeType":"Block","src":"22250:2083:23","statements":[{"assignments":[2007],"declarations":[{"constant":false,"id":2007,"mutability":"mutable","name":"leavesLen","nameLocation":"22642:9:23","nodeType":"VariableDeclaration","scope":2147,"src":"22634:17:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"22634:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2010,"initialValue":{"expression":{"id":2008,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"22654:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22661:6:23","memberName":"length","nodeType":"MemberAccess","src":"22654:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22634:33:23"},{"assignments":[2012],"declarations":[{"constant":false,"id":2012,"mutability":"mutable","name":"proofFlagsLen","nameLocation":"22685:13:23","nodeType":"VariableDeclaration","scope":2147,"src":"22677:21:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"22677:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2015,"initialValue":{"expression":{"id":2013,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"22701:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22712:6:23","memberName":"length","nodeType":"MemberAccess","src":"22701:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22677:41:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2016,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"22766:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":2017,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"22778:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2018,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22784:6:23","memberName":"length","nodeType":"MemberAccess","src":"22778:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:24:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2020,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"22794:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22810:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"22794:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22766:45:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2028,"nodeType":"IfStatement","src":"22762:113:23","trueBody":{"id":2027,"nodeType":"Block","src":"22813:62:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2024,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"22834:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22834:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2026,"nodeType":"RevertStatement","src":"22827:37:23"}]}},{"assignments":[2033],"declarations":[{"constant":false,"id":2033,"mutability":"mutable","name":"hashes","nameLocation":"23136:6:23","nodeType":"VariableDeclaration","scope":2147,"src":"23119:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2031,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23119:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2032,"nodeType":"ArrayTypeName","src":"23119:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":2039,"initialValue":{"arguments":[{"id":2037,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"23159:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"23145:13:23","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":2034,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23149:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2035,"nodeType":"ArrayTypeName","src":"23149:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":2038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23145:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"23119:54:23"},{"assignments":[2041],"declarations":[{"constant":false,"id":2041,"mutability":"mutable","name":"leafPos","nameLocation":"23191:7:23","nodeType":"VariableDeclaration","scope":2147,"src":"23183:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2040,"name":"uint256","nodeType":"ElementaryTypeName","src":"23183:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2043,"initialValue":{"hexValue":"30","id":2042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23201:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23183:19:23"},{"assignments":[2045],"declarations":[{"constant":false,"id":2045,"mutability":"mutable","name":"hashPos","nameLocation":"23220:7:23","nodeType":"VariableDeclaration","scope":2147,"src":"23212:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2044,"name":"uint256","nodeType":"ElementaryTypeName","src":"23212:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2047,"initialValue":{"hexValue":"30","id":2046,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23230:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23212:19:23"},{"assignments":[2049],"declarations":[{"constant":false,"id":2049,"mutability":"mutable","name":"proofPos","nameLocation":"23249:8:23","nodeType":"VariableDeclaration","scope":2147,"src":"23241:16:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2048,"name":"uint256","nodeType":"ElementaryTypeName","src":"23241:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2051,"initialValue":{"hexValue":"30","id":2050,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23260:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23241:20:23"},{"body":{"id":2110,"nodeType":"Block","src":"23681:289:23","statements":[{"assignments":[2063],"declarations":[{"constant":false,"id":2063,"mutability":"mutable","name":"a","nameLocation":"23703:1:23","nodeType":"VariableDeclaration","scope":2110,"src":"23695:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2062,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23695:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2076,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"23707:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2065,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"23717:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23707:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2071,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"23749:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2074,"indexExpression":{"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23756:9:23","subExpression":{"id":2072,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"23756:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23749:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23707:59:23","trueExpression":{"baseExpression":{"id":2067,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"23729:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2070,"indexExpression":{"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23736:9:23","subExpression":{"id":2068,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"23736:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23729:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23695:71:23"},{"assignments":[2078],"declarations":[{"constant":false,"id":2078,"mutability":"mutable","name":"b","nameLocation":"23788:1:23","nodeType":"VariableDeclaration","scope":2110,"src":"23780:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2077,"name":"bytes32","nodeType":"ElementaryTypeName","src":"23780:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2100,"initialValue":{"condition":{"baseExpression":{"id":2079,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"23792:10:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":2081,"indexExpression":{"id":2080,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"23803:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23792:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2095,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"23904:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2098,"indexExpression":{"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23910:10:23","subExpression":{"id":2096,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"23910:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23904:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23792:129:23","trueExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2082,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"23825:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2083,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"23835:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23825:19:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2089,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"23867:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2092,"indexExpression":{"id":2091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23874:9:23","subExpression":{"id":2090,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"23874:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23867:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"23825:59:23","trueExpression":{"baseExpression":{"id":2085,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"23847:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2088,"indexExpression":{"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23854:9:23","subExpression":{"id":2086,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"23854:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23847:17:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":2094,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"23824:61:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"23780:141:23"},{"expression":{"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2101,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"23935:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2103,"indexExpression":{"id":2102,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"23942:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23935:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2105,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2063,"src":"23954:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2106,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"23957:1:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2104,"name":"hasher","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"23947:6:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"}},"id":2107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23947:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"23935:24:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2109,"nodeType":"ExpressionStatement","src":"23935:24:23"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2056,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"23657:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2057,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"23661:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23657:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2111,"initializationExpression":{"assignments":[2053],"declarations":[{"constant":false,"id":2053,"mutability":"mutable","name":"i","nameLocation":"23650:1:23","nodeType":"VariableDeclaration","scope":2111,"src":"23642:9:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"23642:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2055,"initialValue":{"hexValue":"30","id":2054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23654:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"23642:13:23"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"23676:3:23","subExpression":{"id":2059,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"23676:1:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2061,"nodeType":"ExpressionStatement","src":"23676:3:23"},"nodeType":"ForStatement","src":"23637:333:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2112,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"23984:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24000:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"23984:17:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2132,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"24225:9:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24237:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"24225:13:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2144,"nodeType":"Block","src":"24287:40:23","statements":[{"expression":{"baseExpression":{"id":2140,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"24308:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2142,"indexExpression":{"hexValue":"30","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24314:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24308:8:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2005,"id":2143,"nodeType":"Return","src":"24301:15:23"}]},"id":2145,"nodeType":"IfStatement","src":"24221:106:23","trueBody":{"id":2139,"nodeType":"Block","src":"24240:41:23","statements":[{"expression":{"baseExpression":{"id":2135,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"24261:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2137,"indexExpression":{"hexValue":"30","id":2136,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24268:1:23","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24261:9:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2005,"id":2138,"nodeType":"Return","src":"24254:16:23"}]}},"id":2146,"nodeType":"IfStatement","src":"23980:347:23","trueBody":{"id":2131,"nodeType":"Block","src":"24003:212:23","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2115,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"24021:8:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2116,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"24033:5:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"24039:6:23","memberName":"length","nodeType":"MemberAccess","src":"24033:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24021:24:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2123,"nodeType":"IfStatement","src":"24017:100:23","trueBody":{"id":2122,"nodeType":"Block","src":"24047:70:23","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2119,"name":"MerkleProofInvalidMultiproof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"24072:28:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24072:30:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2121,"nodeType":"RevertStatement","src":"24065:37:23"}]}},{"id":2130,"nodeType":"UncheckedBlock","src":"24130:75:23","statements":[{"expression":{"baseExpression":{"id":2124,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2033,"src":"24165:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":2128,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2125,"name":"proofFlagsLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2012,"src":"24172:13:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24188:1:23","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"24172:17:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24165:25:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2005,"id":2129,"nodeType":"Return","src":"24158:32:23"}]}]}}]},"documentation":{"id":1982,"nodeType":"StructuredDocumentation","src":"20893:1099:23","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n This version handles multiproofs in calldata with a custom hashing function.\n CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\n and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\n validating the leaves elsewhere."},"id":2148,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"22006:25:23","nodeType":"FunctionDefinition","parameters":{"id":2002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1985,"mutability":"mutable","name":"proof","nameLocation":"22060:5:23","nodeType":"VariableDeclaration","scope":2148,"src":"22041:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1983,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22041:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1984,"nodeType":"ArrayTypeName","src":"22041:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1988,"mutability":"mutable","name":"proofFlags","nameLocation":"22091:10:23","nodeType":"VariableDeclaration","scope":2148,"src":"22075:26:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"22075:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1987,"nodeType":"ArrayTypeName","src":"22075:6:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"leaves","nameLocation":"22128:6:23","nodeType":"VariableDeclaration","scope":2148,"src":"22111:23:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1989,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22111:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1990,"nodeType":"ArrayTypeName","src":"22111:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2001,"mutability":"mutable","name":"hasher","nameLocation":"22194:6:23","nodeType":"VariableDeclaration","scope":2148,"src":"22144:56:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"typeName":{"id":2000,"nodeType":"FunctionTypeName","parameterTypes":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1993,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2000,"src":"22153:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22153:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2000,"src":"22162:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1994,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22162:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22152:18:23"},"returnParameterTypes":{"id":1999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2000,"src":"22185:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1997,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22185:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22184:9:23"},"src":"22144:56:23","stateMutability":"view","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) view returns (bytes32)"},"visibility":"internal"},"visibility":"internal"}],"src":"22031:175:23"},"returnParameters":{"id":2005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"merkleRoot","nameLocation":"22238:10:23","nodeType":"VariableDeclaration","scope":2148,"src":"22230:18:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2003,"name":"bytes32","nodeType":"ElementaryTypeName","src":"22230:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"22229:20:23"},"scope":2149,"src":"21997:2336:23","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2150,"src":"1353:22982:23","usedErrors":[1084],"usedEvents":[]}],"src":"206:24130:23"},"id":23},"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol":{"ast":{"absolutePath":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol","exportedSymbols":{"Context":[912],"ContractOwnership":[32],"ContractOwnershipStorage":[394],"ERC20ClaimWindowMerkleClaim":[2684],"ForwarderRegistryContext":[591],"ForwarderRegistryContextBase":[719],"IERC20SafeTransfers":[862],"IForwarderRegistry":[747],"MerkleProof":[2149]},"id":2685,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2151,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","id":2153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":863,"src":"57:121:24","symbolAliases":[{"foreign":{"id":2152,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"65:19:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":2150,"src":"179:87:24","symbolAliases":[{"foreign":{"id":2154,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2149,"src":"187:11:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":33,"src":"267:101:24","symbolAliases":[{"foreign":{"id":2156,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"275:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":395,"src":"369:125:24","symbolAliases":[{"foreign":{"id":2158,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"377:24:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":913,"src":"495:66:24","symbolAliases":[{"foreign":{"id":2160,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":912,"src":"503:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":748,"src":"562:114:24","symbolAliases":[{"foreign":{"id":2162,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"570:18:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":592,"src":"677:115:24","symbolAliases":[{"foreign":{"id":2164,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"685:24:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2685,"sourceUnit":720,"src":"793:128:24","symbolAliases":[{"foreign":{"id":2166,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"801:28:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2168,"name":"ForwarderRegistryContext","nameLocations":["963:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"963:24:24"},"id":2169,"nodeType":"InheritanceSpecifier","src":"963:24:24"},{"baseName":{"id":2170,"name":"ContractOwnership","nameLocations":["989:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"989:17:24"},"id":2171,"nodeType":"InheritanceSpecifier","src":"989:17:24"}],"canonicalName":"ERC20ClaimWindowMerkleClaim","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2684,"linearizedBaseContracts":[2684,32,424,441,80,912,136,591,731,719],"name":"ERC20ClaimWindowMerkleClaim","nameLocation":"932:27:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2175,"libraryName":{"id":2172,"name":"ContractOwnershipStorage","nameLocations":["1019:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":394,"src":"1019:24:24"},"nodeType":"UsingForDirective","src":"1013:67:24","typeName":{"id":2174,"nodeType":"UserDefinedTypeName","pathNode":{"id":2173,"name":"ContractOwnershipStorage.Layout","nameLocations":["1048:24:24","1073:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":167,"src":"1048:31:24"},"referencedDeclaration":167,"src":"1048:31:24","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":2179,"libraryName":{"id":2176,"name":"MerkleProof","nameLocations":["1091:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":2149,"src":"1091:11:24"},"nodeType":"UsingForDirective","src":"1085:32:24","typeName":{"baseType":{"id":2177,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1107:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2178,"nodeType":"ArrayTypeName","src":"1107:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"canonicalName":"ERC20ClaimWindowMerkleClaim.ClaimError","documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"1127:35:24","text":"@notice The status of the claim"},"id":2185,"members":[{"id":2181,"name":"NoError","nameLocation":"1193:7:24","nodeType":"EnumValue","src":"1193:7:24"},{"id":2182,"name":"EpochIdNotExists","nameLocation":"1215:16:24","nodeType":"EnumValue","src":"1215:16:24"},{"id":2183,"name":"OutOfClaimWindow","nameLocation":"1246:16:24","nodeType":"EnumValue","src":"1246:16:24"},{"id":2184,"name":"AlreadyClaimed","nameLocation":"1277:14:24","nodeType":"EnumValue","src":"1277:14:24"}],"name":"ClaimError","nameLocation":"1172:10:24","nodeType":"EnumDefinition","src":"1167:135:24"},{"canonicalName":"ERC20ClaimWindowMerkleClaim.ClaimWindow","documentation":{"id":2186,"nodeType":"StructuredDocumentation","src":"1308:36:24","text":"@notice The claim window struct."},"id":2193,"members":[{"constant":false,"id":2188,"mutability":"mutable","name":"merkleRoot","nameLocation":"1386:10:24","nodeType":"VariableDeclaration","scope":2193,"src":"1378:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1378:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2190,"mutability":"mutable","name":"startTime","nameLocation":"1414:9:24","nodeType":"VariableDeclaration","scope":2193,"src":"1406:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2189,"name":"uint256","nodeType":"ElementaryTypeName","src":"1406:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2192,"mutability":"mutable","name":"endTime","nameLocation":"1441:7:24","nodeType":"VariableDeclaration","scope":2193,"src":"1433:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2191,"name":"uint256","nodeType":"ElementaryTypeName","src":"1433:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"ClaimWindow","nameLocation":"1356:11:24","nodeType":"StructDefinition","scope":2684,"src":"1349:106:24","visibility":"public"},{"constant":false,"documentation":{"id":2194,"nodeType":"StructuredDocumentation","src":"1461:52:24","text":"@notice a reference to the reward token contract"},"functionSelector":"efc4c631","id":2197,"mutability":"immutable","name":"ERC20_TOKEN","nameLocation":"1555:11:24","nodeType":"VariableDeclaration","scope":2684,"src":"1518:48:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"IERC20SafeTransfers","nameLocations":["1518:19:24"],"nodeType":"IdentifierPath","referencedDeclaration":862,"src":"1518:19:24"},"referencedDeclaration":862,"src":"1518:19:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"}},"visibility":"public"},{"constant":false,"documentation":{"id":2198,"nodeType":"StructuredDocumentation","src":"1573:52:24","text":"@notice a reference to the staking pool contract"},"functionSelector":"14ae36ae","id":2200,"mutability":"immutable","name":"STAKING_POOL","nameLocation":"1655:12:24","nodeType":"VariableDeclaration","scope":2684,"src":"1630:37:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2199,"name":"address","nodeType":"ElementaryTypeName","src":"1630:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":2201,"nodeType":"StructuredDocumentation","src":"1674:51:24","text":"@notice The address of the token holder wallet."},"functionSelector":"fbb0f673","id":2203,"mutability":"mutable","name":"tokenHolderWallet","nameLocation":"1745:17:24","nodeType":"VariableDeclaration","scope":2684,"src":"1730:32:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"1730:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"documentation":{"id":2204,"nodeType":"StructuredDocumentation","src":"1769:58:24","text":"@notice Mapping from the epoch ID to the claim window."},"functionSelector":"dc45def6","id":2209,"mutability":"mutable","name":"claimWindows","nameLocation":"1879:12:24","nodeType":"VariableDeclaration","scope":2684,"src":"1832:59:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow)"},"typeName":{"id":2208,"keyName":"epochId","keyNameLocation":"1848:7:24","keyType":{"id":2205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1840:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1832:39:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2207,"nodeType":"UserDefinedTypeName","pathNode":{"id":2206,"name":"ClaimWindow","nameLocations":["1859:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":2193,"src":"1859:11:24"},"referencedDeclaration":2193,"src":"1859:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow"}}},"visibility":"public"},{"constant":false,"documentation":{"id":2210,"nodeType":"StructuredDocumentation","src":"1898:38:24","text":"@notice leaf hash to claimed state"},"functionSelector":"cc3c0f06","id":2214,"mutability":"mutable","name":"claimed","nameLocation":"1986:7:24","nodeType":"VariableDeclaration","scope":2684,"src":"1941:52:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2213,"keyName":"leaf","keyNameLocation":"1957:4:24","keyType":{"id":2211,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1949:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1941:37:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"claimed","valueNameLocation":"1970:7:24","valueType":{"id":2212,"name":"bool","nodeType":"ElementaryTypeName","src":"1965:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":2215,"nodeType":"StructuredDocumentation","src":"2000:142:24","text":"@notice Event emitted when the token holder wallet is set.\n @param newTokenHolderWallet The address of the new token holder wallet."},"eventSelector":"329827290d5ca169f07779e969ad40b6df3087f6c12c9467c96f1a88316a5bdb","id":2219,"name":"TokenHolderWalletSet","nameLocation":"2153:20:24","nodeType":"EventDefinition","parameters":{"id":2218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2217,"indexed":true,"mutability":"mutable","name":"newTokenHolderWallet","nameLocation":"2190:20:24","nodeType":"VariableDeclaration","scope":2219,"src":"2174:36:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2216,"name":"address","nodeType":"ElementaryTypeName","src":"2174:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2173:38:24"},"src":"2147:65:24"},{"anonymous":false,"documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"2218:321:24","text":"@notice Event emitted when a claim window is set.\n @param epochId The unique epoch ID associated with the specified claim window.\n @param merkleRoot The merkle root in the claim window.\n @param startTime The start time of the claim window.\n @param endTime The end time of the claim window."},"eventSelector":"97df4a2fb6656595bc6eb616c2068e9d50031428ef69d8849590bc9f3dec620b","id":2230,"name":"EpochMerkleRootSet","nameLocation":"2550:18:24","nodeType":"EventDefinition","parameters":{"id":2229,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"2585:7:24","nodeType":"VariableDeclaration","scope":2230,"src":"2569:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2569:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2224,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"2610:10:24","nodeType":"VariableDeclaration","scope":2230,"src":"2594:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2594:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2226,"indexed":false,"mutability":"mutable","name":"startTime","nameLocation":"2630:9:24","nodeType":"VariableDeclaration","scope":2230,"src":"2622:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2225,"name":"uint256","nodeType":"ElementaryTypeName","src":"2622:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2228,"indexed":true,"mutability":"mutable","name":"endTime","nameLocation":"2657:7:24","nodeType":"VariableDeclaration","scope":2230,"src":"2641:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2227,"name":"uint256","nodeType":"ElementaryTypeName","src":"2641:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2568:97:24"},"src":"2544:122:24"},{"anonymous":false,"documentation":{"id":2231,"nodeType":"StructuredDocumentation","src":"2672:306:24","text":"@notice Emitted when a payout is claimed.\n @param epochId The unique epoch ID associated with the claim window.\n @param root The merkle root of the claim window.\n @param recipient The recipient of the checkmate token.\n @param amount The amount of checkmate token is claimed."},"eventSelector":"06da15703c9baa6922f6a2f40fe90a03f70a24b9113edd75f913454a45d996cd","id":2241,"name":"PayoutClaimed","nameLocation":"2989:13:24","nodeType":"EventDefinition","parameters":{"id":2240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"indexed":true,"mutability":"mutable","name":"epochId","nameLocation":"3019:7:24","nodeType":"VariableDeclaration","scope":2241,"src":"3003:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2232,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3003:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2235,"indexed":true,"mutability":"mutable","name":"root","nameLocation":"3044:4:24","nodeType":"VariableDeclaration","scope":2241,"src":"3028:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2234,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3028:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2237,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3066:9:24","nodeType":"VariableDeclaration","scope":2241,"src":"3050:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2236,"name":"address","nodeType":"ElementaryTypeName","src":"3050:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2239,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"3085:6:24","nodeType":"VariableDeclaration","scope":2241,"src":"3077:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2238,"name":"uint256","nodeType":"ElementaryTypeName","src":"3077:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3002:90:24"},"src":"2983:110:24"},{"documentation":{"id":2242,"nodeType":"StructuredDocumentation","src":"3099:69:24","text":"@notice Thrown when the checkmate token contract address is zero."},"errorSelector":"9904b624","id":2244,"name":"InvalidERC20Token","nameLocation":"3179:17:24","nodeType":"ErrorDefinition","parameters":{"id":2243,"nodeType":"ParameterList","parameters":[],"src":"3196:2:24"},"src":"3173:26:24"},{"documentation":{"id":2245,"nodeType":"StructuredDocumentation","src":"3205:57:24","text":"@notice Thrown when the staking pool address is zero."},"errorSelector":"3b106f85","id":2247,"name":"InvalidStakingPool","nameLocation":"3273:18:24","nodeType":"ErrorDefinition","parameters":{"id":2246,"nodeType":"ParameterList","parameters":[],"src":"3291:2:24"},"src":"3267:27:24"},{"documentation":{"id":2248,"nodeType":"StructuredDocumentation","src":"3300:48:24","text":"@notice Thrown when the merkle root is zero."},"errorSelector":"9dd854d3","id":2250,"name":"InvalidMerkleRoot","nameLocation":"3359:17:24","nodeType":"ErrorDefinition","parameters":{"id":2249,"nodeType":"ParameterList","parameters":[],"src":"3376:2:24"},"src":"3353:26:24"},{"documentation":{"id":2251,"nodeType":"StructuredDocumentation","src":"3385:58:24","text":"@notice Error thrown when the claim window is invalid."},"errorSelector":"790c7cef","id":2259,"name":"InvalidClaimWindow","nameLocation":"3454:18:24","nodeType":"ErrorDefinition","parameters":{"id":2258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"startTime","nameLocation":"3481:9:24","nodeType":"VariableDeclaration","scope":2259,"src":"3473:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"3473:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2255,"mutability":"mutable","name":"endTime","nameLocation":"3500:7:24","nodeType":"VariableDeclaration","scope":2259,"src":"3492:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2254,"name":"uint256","nodeType":"ElementaryTypeName","src":"3492:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2257,"mutability":"mutable","name":"currentTime","nameLocation":"3517:11:24","nodeType":"VariableDeclaration","scope":2259,"src":"3509:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2256,"name":"uint256","nodeType":"ElementaryTypeName","src":"3509:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3472:57:24"},"src":"3448:82:24"},{"documentation":{"id":2260,"nodeType":"StructuredDocumentation","src":"3536:58:24","text":"@notice Error thrown when the epoch ID already exists."},"errorSelector":"ed10979d","id":2264,"name":"EpochIdAlreadyExists","nameLocation":"3605:20:24","nodeType":"ErrorDefinition","parameters":{"id":2263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2262,"mutability":"mutable","name":"epochId","nameLocation":"3634:7:24","nodeType":"VariableDeclaration","scope":2264,"src":"3626:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3626:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3625:17:24"},"src":"3599:44:24"},{"documentation":{"id":2265,"nodeType":"StructuredDocumentation","src":"3649:74:24","text":"@notice Error thrown when the proof provided for the claim is invalid."},"errorSelector":"cc55900d","id":2273,"name":"InvalidProof","nameLocation":"3734:12:24","nodeType":"ErrorDefinition","parameters":{"id":2272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2267,"mutability":"mutable","name":"epochId","nameLocation":"3755:7:24","nodeType":"VariableDeclaration","scope":2273,"src":"3747:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2266,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3747:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2269,"mutability":"mutable","name":"recipient","nameLocation":"3772:9:24","nodeType":"VariableDeclaration","scope":2273,"src":"3764:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2268,"name":"address","nodeType":"ElementaryTypeName","src":"3764:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2271,"mutability":"mutable","name":"amount","nameLocation":"3791:6:24","nodeType":"VariableDeclaration","scope":2273,"src":"3783:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2270,"name":"uint256","nodeType":"ElementaryTypeName","src":"3783:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3746:52:24"},"src":"3728:71:24"},{"documentation":{"id":2274,"nodeType":"StructuredDocumentation","src":"3805:58:24","text":"@notice Error thrown when the epoch ID does not exist."},"errorSelector":"84f229dc","id":2278,"name":"EpochIdNotExists","nameLocation":"3874:16:24","nodeType":"ErrorDefinition","parameters":{"id":2277,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2276,"mutability":"mutable","name":"epochId","nameLocation":"3899:7:24","nodeType":"VariableDeclaration","scope":2278,"src":"3891:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2275,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3891:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3890:17:24"},"src":"3868:40:24"},{"documentation":{"id":2279,"nodeType":"StructuredDocumentation","src":"3914:79:24","text":"@notice Error thrown when the claim window is closed or has not yet opened."},"errorSelector":"dbeb4f4d","id":2285,"name":"OutOfClaimWindow","nameLocation":"4004:16:24","nodeType":"ErrorDefinition","parameters":{"id":2284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2281,"mutability":"mutable","name":"epochId","nameLocation":"4029:7:24","nodeType":"VariableDeclaration","scope":2285,"src":"4021:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2280,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4021:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2283,"mutability":"mutable","name":"currentTime","nameLocation":"4046:11:24","nodeType":"VariableDeclaration","scope":2285,"src":"4038:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2282,"name":"uint256","nodeType":"ElementaryTypeName","src":"4038:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4020:38:24"},"src":"3998:61:24"},{"documentation":{"id":2286,"nodeType":"StructuredDocumentation","src":"4065:64:24","text":"@notice Error thrown when the leaf has already been claimed."},"errorSelector":"dc20789f","id":2292,"name":"AlreadyClaimed","nameLocation":"4140:14:24","nodeType":"ErrorDefinition","parameters":{"id":2291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2288,"mutability":"mutable","name":"epochId","nameLocation":"4163:7:24","nodeType":"VariableDeclaration","scope":2292,"src":"4155:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2287,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4155:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2290,"mutability":"mutable","name":"leaf","nameLocation":"4180:4:24","nodeType":"VariableDeclaration","scope":2292,"src":"4172:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2289,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4172:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4154:31:24"},"src":"4134:52:24"},{"body":{"id":2351,"nodeType":"Block","src":"4427:389:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2311,"name":"erc20Token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"4441:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2314,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4464:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4456:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2312,"name":"address","nodeType":"ElementaryTypeName","src":"4456:7:24","typeDescriptions":{}}},"id":2315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4456:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4441:25:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2321,"nodeType":"IfStatement","src":"4437:82:24","trueBody":{"id":2320,"nodeType":"Block","src":"4468:51:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2317,"name":"InvalidERC20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2244,"src":"4489:17:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4489:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2319,"nodeType":"RevertStatement","src":"4482:26:24"}]}},{"expression":{"id":2326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2322,"name":"ERC20_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"4528:11:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2324,"name":"erc20Token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2294,"src":"4562:11:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2323,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":862,"src":"4542:19:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$862_$","typeString":"type(contract IERC20SafeTransfers)"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4542:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"}},"src":"4528:46:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"}},"id":2327,"nodeType":"ExpressionStatement","src":"4528:46:24"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2333,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2328,"name":"stakingPool_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"4589:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2331,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4613:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2330,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4605:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2329,"name":"address","nodeType":"ElementaryTypeName","src":"4605:7:24","typeDescriptions":{}}},"id":2332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4605:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4589:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2338,"nodeType":"IfStatement","src":"4585:84:24","trueBody":{"id":2337,"nodeType":"Block","src":"4617:52:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2334,"name":"InvalidStakingPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2247,"src":"4638:18:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2336,"nodeType":"RevertStatement","src":"4631:27:24"}]}},{"expression":{"id":2341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2339,"name":"STAKING_POOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"4678:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2340,"name":"stakingPool_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2296,"src":"4693:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4678:27:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2342,"nodeType":"ExpressionStatement","src":"4678:27:24"},{"expression":{"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2343,"name":"tokenHolderWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"4716:17:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2344,"name":"tokenHolderWallet_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"4736:18:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4716:38:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2346,"nodeType":"ExpressionStatement","src":"4716:38:24"},{"eventCall":{"arguments":[{"id":2348,"name":"tokenHolderWallet_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2298,"src":"4790:18:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2347,"name":"TokenHolderWalletSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"4769:20:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4769:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2350,"nodeType":"EmitStatement","src":"4764:45:24"}]},"id":2352,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2304,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"4377:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"id":2305,"kind":"baseConstructorSpecifier","modifierName":{"id":2303,"name":"ForwarderRegistryContext","nameLocations":["4352:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":591,"src":"4352:24:24"},"nodeType":"ModifierInvocation","src":"4352:44:24"},{"arguments":[{"expression":{"id":2307,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4415:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4419:6:24","memberName":"sender","nodeType":"MemberAccess","src":"4415:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2309,"kind":"baseConstructorSpecifier","modifierName":{"id":2306,"name":"ContractOwnership","nameLocations":["4397:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"4397:17:24"},"nodeType":"ModifierInvocation","src":"4397:29:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2294,"mutability":"mutable","name":"erc20Token_","nameLocation":"4221:11:24","nodeType":"VariableDeclaration","scope":2352,"src":"4213:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2293,"name":"address","nodeType":"ElementaryTypeName","src":"4213:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2296,"mutability":"mutable","name":"stakingPool_","nameLocation":"4250:12:24","nodeType":"VariableDeclaration","scope":2352,"src":"4242:20:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2295,"name":"address","nodeType":"ElementaryTypeName","src":"4242:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2298,"mutability":"mutable","name":"tokenHolderWallet_","nameLocation":"4280:18:24","nodeType":"VariableDeclaration","scope":2352,"src":"4272:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2297,"name":"address","nodeType":"ElementaryTypeName","src":"4272:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"4327:18:24","nodeType":"VariableDeclaration","scope":2352,"src":"4308:37:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":2300,"nodeType":"UserDefinedTypeName","pathNode":{"id":2299,"name":"IForwarderRegistry","nameLocations":["4308:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"4308:18:24"},"referencedDeclaration":747,"src":"4308:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"4203:148:24"},"returnParameters":{"id":2310,"nodeType":"ParameterList","parameters":[],"src":"4427:0:24"},"scope":2684,"src":"4192:624:24","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2433,"nodeType":"Block","src":"5511:607:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2369,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2669],"referencedDeclaration":2669,"src":"5578:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5578:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2364,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"5521:24:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5546:6:24","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"5521:31:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5521:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5555:22:24","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":361,"src":"5521:56:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$167_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5521:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2372,"nodeType":"ExpressionStatement","src":"5521:70:24"},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2373,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"5606:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5628:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5620:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2374,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5620:7:24","typeDescriptions":{}}},"id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5606:24:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2383,"nodeType":"IfStatement","src":"5602:81:24","trueBody":{"id":2382,"nodeType":"Block","src":"5632:51:24","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2379,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2250,"src":"5653:17:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5653:19:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2381,"nodeType":"RevertStatement","src":"5646:26:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2386,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2384,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5697:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2385,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"5710:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5697:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2387,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"5721:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2388,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5732:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5738:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5732:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5721:26:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5697:50:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2400,"nodeType":"IfStatement","src":"5693:143:24","trueBody":{"id":2399,"nodeType":"Block","src":"5749:87:24","statements":[{"errorCall":{"arguments":[{"id":2393,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"5789:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2394,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"5800:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2395,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5809:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2396,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5815:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5809:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2392,"name":"InvalidClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2259,"src":"5770:18:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256,uint256) pure returns (error)"}},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5770:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2398,"nodeType":"RevertStatement","src":"5763:62:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":2401,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"5850:12:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2403,"indexExpression":{"id":2402,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5863:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5850:21:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"id":2404,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5872:10:24","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2188,"src":"5850:32:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":2407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5894:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2406,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5886:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2405,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5886:7:24","typeDescriptions":{}}},"id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5886:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5850:46:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2415,"nodeType":"IfStatement","src":"5846:113:24","trueBody":{"id":2414,"nodeType":"Block","src":"5898:61:24","statements":[{"errorCall":{"arguments":[{"id":2411,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5940:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2410,"name":"EpochIdAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"5919:20:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":2412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5919:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2413,"nodeType":"RevertStatement","src":"5912:36:24"}]}},{"expression":{"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2416,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"5969:12:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2418,"indexExpression":{"id":2417,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"5982:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5969:21:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2420,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6005:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2421,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"6017:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2422,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"6028:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2419,"name":"ClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2193,"src":"5993:11:24","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ClaimWindow_$2193_storage_ptr_$","typeString":"type(struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer)"}},"id":2423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5993:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_memory_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow memory"}},"src":"5969:67:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"id":2425,"nodeType":"ExpressionStatement","src":"5969:67:24"},{"eventCall":{"arguments":[{"id":2427,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"6071:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2428,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"6080:10:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2429,"name":"startTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2359,"src":"6092:9:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2430,"name":"endTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2361,"src":"6103:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2426,"name":"EpochMerkleRootSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"6052:18:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,uint256,uint256)"}},"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6052:59:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2432,"nodeType":"EmitStatement","src":"6047:64:24"}]},"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"4822:574:24","text":" @notice Sets the merkle root for a specific epoch with start and end time.\n @dev Reverts if _msgSender() is not the owner.\n @dev Reverts if the merkle root is zero.\n @dev Reverts if the claim window is invalid.\n @dev Reverts if the epoch ID has already been set.\n @dev Emits a {EpochMerkleRootSet} event.\n @param epochId The epoch ID for the claim.\n @param merkleRoot The Merkle root of the claim.\n @param startTime The start time of the claim window.\n @param endTime The end time of the claim window."},"functionSelector":"0328a8fc","id":2434,"implemented":true,"kind":"function","modifiers":[],"name":"setEpochMerkleRoot","nameLocation":"5410:18:24","nodeType":"FunctionDefinition","parameters":{"id":2362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"epochId","nameLocation":"5437:7:24","nodeType":"VariableDeclaration","scope":2434,"src":"5429:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5429:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"merkleRoot","nameLocation":"5454:10:24","nodeType":"VariableDeclaration","scope":2434,"src":"5446:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5446:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2359,"mutability":"mutable","name":"startTime","nameLocation":"5474:9:24","nodeType":"VariableDeclaration","scope":2434,"src":"5466:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2358,"name":"uint256","nodeType":"ElementaryTypeName","src":"5466:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2361,"mutability":"mutable","name":"endTime","nameLocation":"5493:7:24","nodeType":"VariableDeclaration","scope":2434,"src":"5485:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2360,"name":"uint256","nodeType":"ElementaryTypeName","src":"5485:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5428:73:24"},"returnParameters":{"id":2363,"nodeType":"ParameterList","parameters":[],"src":"5511:0:24"},"scope":2684,"src":"5401:717:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2457,"nodeType":"Block","src":"6445:194:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2445,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2669],"referencedDeclaration":2669,"src":"6512:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6512:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2440,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":394,"src":"6455:24:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$394_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6480:6:24","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":393,"src":"6455:31:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$167_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2444,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6489:22:24","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":361,"src":"6455:56:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$167_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$167_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2447,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6455:70:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2448,"nodeType":"ExpressionStatement","src":"6455:70:24"},{"expression":{"id":2451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2449,"name":"tokenHolderWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"6535:17:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2450,"name":"newTokenHolderWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6555:20:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6535:40:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2452,"nodeType":"ExpressionStatement","src":"6535:40:24"},{"eventCall":{"arguments":[{"id":2454,"name":"newTokenHolderWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2437,"src":"6611:20:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2453,"name":"TokenHolderWalletSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2219,"src":"6590:20:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":2455,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6590:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2456,"nodeType":"EmitStatement","src":"6585:47:24"}]},"documentation":{"id":2435,"nodeType":"StructuredDocumentation","src":"6124:247:24","text":" @notice Sets the token holder wallet address.\n @dev Reverts if _msgSender() is not the owner.\n @dev Emits a {TokenHolderWalletSet} event.\n @param newTokenHolderWallet The address of the new token holder wallet."},"functionSelector":"ec7f7494","id":2458,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenHolderWallet","nameLocation":"6385:20:24","nodeType":"FunctionDefinition","parameters":{"id":2438,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2437,"mutability":"mutable","name":"newTokenHolderWallet","nameLocation":"6414:20:24","nodeType":"VariableDeclaration","scope":2458,"src":"6406:28:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2436,"name":"address","nodeType":"ElementaryTypeName","src":"6406:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6405:30:24"},"returnParameters":{"id":2439,"nodeType":"ParameterList","parameters":[],"src":"6445:0:24"},"scope":2684,"src":"6376:263:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2574,"nodeType":"Block","src":"7555:947:24","statements":[{"assignments":[2472],"declarations":[{"constant":false,"id":2472,"mutability":"mutable","name":"leaf","nameLocation":"7573:4:24","nodeType":"VariableDeclaration","scope":2574,"src":"7565:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2471,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7565:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2481,"initialValue":{"arguments":[{"arguments":[{"id":2476,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7607:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2477,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"7616:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2478,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"7627:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2474,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7590:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7594:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"7590:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2473,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7580:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7580:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7565:70:24"},{"assignments":[2484],"declarations":[{"constant":false,"id":2484,"mutability":"mutable","name":"claimWindow","nameLocation":"7665:11:24","nodeType":"VariableDeclaration","scope":2574,"src":"7645:31:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow"},"typeName":{"id":2483,"nodeType":"UserDefinedTypeName","pathNode":{"id":2482,"name":"ClaimWindow","nameLocations":["7645:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":2193,"src":"7645:11:24"},"referencedDeclaration":2193,"src":"7645:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow"}},"visibility":"internal"}],"id":2488,"initialValue":{"baseExpression":{"id":2485,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"7679:12:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2487,"indexExpression":{"id":2486,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7692:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7679:21:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"}},"nodeType":"VariableDeclarationStatement","src":"7645:55:24"},{"assignments":[2491],"declarations":[{"constant":false,"id":2491,"mutability":"mutable","name":"canClaimResult","nameLocation":"7722:14:24","nodeType":"VariableDeclaration","scope":2574,"src":"7711:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"typeName":{"id":2490,"nodeType":"UserDefinedTypeName","pathNode":{"id":2489,"name":"ClaimError","nameLocations":["7711:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":2185,"src":"7711:10:24"},"referencedDeclaration":2185,"src":"7711:10:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"visibility":"internal"}],"id":2496,"initialValue":{"arguments":[{"id":2493,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"7749:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},{"id":2494,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"7762:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2492,"name":"_canClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"7739:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_ClaimWindow_$2193_storage_ptr_$_t_bytes32_$returns$_t_enum$_ClaimError_$2185_$","typeString":"function (struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer,bytes32) view returns (enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7739:28:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"nodeType":"VariableDeclarationStatement","src":"7711:56:24"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2497,"name":"canClaimResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"7781:14:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2498,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"7799:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7810:16:24","memberName":"EpochIdNotExists","nodeType":"MemberAccess","referencedDeclaration":2182,"src":"7799:27:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"src":"7781:45:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"id":2509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2506,"name":"canClaimResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"7895:14:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2507,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"7913:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7924:16:24","memberName":"OutOfClaimWindow","nodeType":"MemberAccess","referencedDeclaration":2183,"src":"7913:27:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"src":"7895:45:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2517,"name":"canClaimResult","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"8026:14:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2518,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8044:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2519,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8055:14:24","memberName":"AlreadyClaimed","nodeType":"MemberAccess","referencedDeclaration":2184,"src":"8044:25:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"src":"8026:43:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2527,"nodeType":"IfStatement","src":"8022:110:24","trueBody":{"id":2526,"nodeType":"Block","src":"8071:61:24","statements":[{"errorCall":{"arguments":[{"id":2522,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8107:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2523,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8116:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2521,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2292,"src":"8092:14:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32,bytes32) pure returns (error)"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8092:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2525,"nodeType":"RevertStatement","src":"8085:36:24"}]}},"id":2528,"nodeType":"IfStatement","src":"7891:241:24","trueBody":{"id":2516,"nodeType":"Block","src":"7942:74:24","statements":[{"errorCall":{"arguments":[{"id":2511,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7980:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":2512,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"7989:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7995:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"7989:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2510,"name":"OutOfClaimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2285,"src":"7963:16:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_uint256_$returns$_t_error_$","typeString":"function (bytes32,uint256) pure returns (error)"}},"id":2514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7963:42:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2515,"nodeType":"RevertStatement","src":"7956:49:24"}]}},"id":2529,"nodeType":"IfStatement","src":"7777:355:24","trueBody":{"id":2505,"nodeType":"Block","src":"7828:57:24","statements":[{"errorCall":{"arguments":[{"id":2502,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7866:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2501,"name":"EpochIdNotExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2278,"src":"7849:16:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$_t_error_$","typeString":"function (bytes32) pure returns (error)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7849:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2504,"nodeType":"RevertStatement","src":"7842:32:24"}]}},{"assignments":[2531],"declarations":[{"constant":false,"id":2531,"mutability":"mutable","name":"root","nameLocation":"8150:4:24","nodeType":"VariableDeclaration","scope":2574,"src":"8142:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2530,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8142:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2534,"initialValue":{"expression":{"id":2532,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2484,"src":"8157:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":2533,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8169:10:24","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2188,"src":"8157:22:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8142:37:24"},{"condition":{"id":2540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8193:33:24","subExpression":{"arguments":[{"id":2537,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"8215:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2538,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8221:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2535,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2468,"src":"8194:5:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8200:14:24","memberName":"verifyCalldata","nodeType":"MemberAccess","referencedDeclaration":1249,"src":"8194:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_calldata_ptr_$","typeString":"function (bytes32[] calldata,bytes32,bytes32) pure returns (bool)"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8194:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"nodeType":"IfStatement","src":"8189:111:24","trueBody":{"id":2547,"nodeType":"Block","src":"8228:72:24","statements":[{"errorCall":{"arguments":[{"id":2542,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8262:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2543,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8271:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2544,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"8282:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2541,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2273,"src":"8249:12:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$_t_uint256_$returns$_t_error_$","typeString":"function (bytes32,address,uint256) pure returns (error)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:40:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2546,"nodeType":"RevertStatement","src":"8242:47:24"}]}},{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2549,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"8310:7:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2551,"indexExpression":{"id":2550,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"8318:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8310:13:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2552,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"8326:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"8310:20:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2554,"nodeType":"ExpressionStatement","src":"8310:20:24"},{"expression":{"arguments":[{"id":2558,"name":"tokenHolderWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2203,"src":"8370:17:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2559,"name":"STAKING_POOL","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2200,"src":"8389:12:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2560,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"8403:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2563,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8422:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2561,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8411:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8415:6:24","memberName":"encode","nodeType":"MemberAccess","src":"8411:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8411:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2555,"name":"ERC20_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"8341:11:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20SafeTransfers_$862","typeString":"contract IERC20SafeTransfers"}},"id":2557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8353:16:24","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":861,"src":"8341:28:24","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8341:92:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2566,"nodeType":"ExpressionStatement","src":"8341:92:24"},{"eventCall":{"arguments":[{"id":2568,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"8462:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2569,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2531,"src":"8471:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2570,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"8477:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2571,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"8488:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2567,"name":"PayoutClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2241,"src":"8448:13:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,bytes32,address,uint256)"}},"id":2572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8448:47:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2573,"nodeType":"EmitStatement","src":"8443:52:24"}]},"documentation":{"id":2459,"nodeType":"StructuredDocumentation","src":"6645:795:24","text":" @notice Claims the payout for a specific epoch and stake.\n @dev Reverts with {EpochIdNotExists} if epoch id does not exist.\n @dev Reverts with {OutOfClaimWindow} if current block time is beyond claim window.\n @dev Reverts with {AlreadyClaimed} if the specified payout has already been claimed.\n @dev Reverts with {InvalidProof} if the merkle proof has failed the verification.\n @dev Reverts with {TransferFailed} if checkmate token transfer fails.\n @dev Emits a {PayoutClaimed} event.\n @param epochId The unique epoch ID associated with the claim window.\n @param recipient The recipient of the checkmate token.\n @param amount The amount of checkmate token to be claimed.\n @param proof The Merkle proof for the claim."},"functionSelector":"563cac28","id":2575,"implemented":true,"kind":"function","modifiers":[],"name":"claimAndStake","nameLocation":"7454:13:24","nodeType":"FunctionDefinition","parameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2461,"mutability":"mutable","name":"epochId","nameLocation":"7476:7:24","nodeType":"VariableDeclaration","scope":2575,"src":"7468:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2460,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7468:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"recipient","nameLocation":"7493:9:24","nodeType":"VariableDeclaration","scope":2575,"src":"7485:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2462,"name":"address","nodeType":"ElementaryTypeName","src":"7485:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"amount","nameLocation":"7512:6:24","nodeType":"VariableDeclaration","scope":2575,"src":"7504:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2464,"name":"uint256","nodeType":"ElementaryTypeName","src":"7504:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2468,"mutability":"mutable","name":"proof","nameLocation":"7539:5:24","nodeType":"VariableDeclaration","scope":2575,"src":"7520:24:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2466,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7520:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2467,"nodeType":"ArrayTypeName","src":"7520:9:24","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"7467:78:24"},"returnParameters":{"id":2470,"nodeType":"ParameterList","parameters":[],"src":"7555:0:24"},"scope":2684,"src":"7445:1057:24","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2602,"nodeType":"Block","src":"8910:113:24","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2589,"name":"claimWindows","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"8937:12:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_struct$_ClaimWindow_$2193_storage_$","typeString":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref)"}},"id":2591,"indexExpression":{"id":2590,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"8950:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8937:21:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"}},{"arguments":[{"arguments":[{"id":2595,"name":"epochId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2578,"src":"8987:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2596,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2580,"src":"8996:9:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2597,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2582,"src":"9007:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2593,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8970:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2594,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8974:12:24","memberName":"encodePacked","nodeType":"MemberAccess","src":"8970:16:24","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8970:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2592,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8960:9:24","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8960:55:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage ref"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2588,"name":"_canClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2655,"src":"8927:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_ClaimWindow_$2193_storage_ptr_$_t_bytes32_$returns$_t_enum$_ClaimError_$2185_$","typeString":"function (struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer,bytes32) view returns (enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8927:89:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"functionReturnParameters":2587,"id":2601,"nodeType":"Return","src":"8920:96:24"}]},"documentation":{"id":2576,"nodeType":"StructuredDocumentation","src":"8508:292:24","text":" @notice Checks if a recipient can claim a reward for a given epoch id\n @param epochId The unique epoch ID associated with the claim window.\n @param recipient The recipient of the checkmate token.\n @param amount The amount of checkmate token to be claimed."},"functionSelector":"d6a3138b","id":2603,"implemented":true,"kind":"function","modifiers":[],"name":"canClaim","nameLocation":"8814:8:24","nodeType":"FunctionDefinition","parameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2578,"mutability":"mutable","name":"epochId","nameLocation":"8831:7:24","nodeType":"VariableDeclaration","scope":2603,"src":"8823:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8823:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2580,"mutability":"mutable","name":"recipient","nameLocation":"8848:9:24","nodeType":"VariableDeclaration","scope":2603,"src":"8840:17:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2579,"name":"address","nodeType":"ElementaryTypeName","src":"8840:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2582,"mutability":"mutable","name":"amount","nameLocation":"8867:6:24","nodeType":"VariableDeclaration","scope":2603,"src":"8859:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2581,"name":"uint256","nodeType":"ElementaryTypeName","src":"8859:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8822:52:24"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2603,"src":"8898:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"typeName":{"id":2585,"nodeType":"UserDefinedTypeName","pathNode":{"id":2584,"name":"ClaimError","nameLocations":["8898:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":2185,"src":"8898:10:24"},"referencedDeclaration":2185,"src":"8898:10:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"visibility":"internal"}],"src":"8897:12:24"},"scope":2684,"src":"8805:218:24","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2654,"nodeType":"Block","src":"9706:392:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2615,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"9720:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":2616,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9732:10:24","memberName":"merkleRoot","nodeType":"MemberAccess","referencedDeclaration":2188,"src":"9720:22:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9754:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2618,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9746:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9746:7:24","typeDescriptions":{}}},"id":2620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9746:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"9720:36:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2626,"nodeType":"IfStatement","src":"9716:101:24","trueBody":{"id":2625,"nodeType":"Block","src":"9758:59:24","statements":[{"expression":{"expression":{"id":2622,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"9779:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2623,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9790:16:24","memberName":"EpochIdNotExists","nodeType":"MemberAccess","referencedDeclaration":2182,"src":"9779:27:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"functionReturnParameters":2614,"id":2624,"nodeType":"Return","src":"9772:34:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2637,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2627,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9830:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9836:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"9830:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2629,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"9848:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":2630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9860:9:24","memberName":"startTime","nodeType":"MemberAccess","referencedDeclaration":2190,"src":"9848:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9830:39:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2632,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9873:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9879:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"9873:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"expression":{"id":2634,"name":"claimWindow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2607,"src":"9891:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer"}},"id":2635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9903:7:24","memberName":"endTime","nodeType":"MemberAccess","referencedDeclaration":2192,"src":"9891:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9873:37:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9830:80:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2642,"nodeType":"IfStatement","src":"9826:145:24","trueBody":{"id":2641,"nodeType":"Block","src":"9912:59:24","statements":[{"expression":{"expression":{"id":2638,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"9933:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9944:16:24","memberName":"OutOfClaimWindow","nodeType":"MemberAccess","referencedDeclaration":2183,"src":"9933:27:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"functionReturnParameters":2614,"id":2640,"nodeType":"Return","src":"9926:34:24"}]}},{"condition":{"baseExpression":{"id":2643,"name":"claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2214,"src":"9984:7:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2645,"indexExpression":{"id":2644,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2609,"src":"9992:4:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9984:13:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2650,"nodeType":"IfStatement","src":"9980:76:24","trueBody":{"id":2649,"nodeType":"Block","src":"9999:57:24","statements":[{"expression":{"expression":{"id":2646,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"10020:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10031:14:24","memberName":"AlreadyClaimed","nodeType":"MemberAccess","referencedDeclaration":2184,"src":"10020:25:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"functionReturnParameters":2614,"id":2648,"nodeType":"Return","src":"10013:32:24"}]}},{"expression":{"expression":{"id":2651,"name":"ClaimError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"10073:10:24","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_ClaimError_$2185_$","typeString":"type(enum ERC20ClaimWindowMerkleClaim.ClaimError)"}},"id":2652,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10084:7:24","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":2181,"src":"10073:18:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"functionReturnParameters":2614,"id":2653,"nodeType":"Return","src":"10066:25:24"}]},"documentation":{"id":2604,"nodeType":"StructuredDocumentation","src":"9029:570:24","text":" @notice\n 1) Returns ClaimError.EpochIdNotExists if merkle root of the claim window has not been set,\n 2) Returns ClaimError.OutOfClaimWindow if current time is beyond start time and end time of the claim window,\n 3) Returns ClaimError.AlreadyClaimed if recipient has already claimed,\n 4) Returns ClaimError.ExceededMintSupply if number of token claimed equals to total supply, and\n 5) Returns ClaimError.NoError otherwise.\n @param claimWindow The claim window of the claim.\n @param leaf The leaf of the claim."},"id":2655,"implemented":true,"kind":"function","modifiers":[],"name":"_canClaim","nameLocation":"9614:9:24","nodeType":"FunctionDefinition","parameters":{"id":2610,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2607,"mutability":"mutable","name":"claimWindow","nameLocation":"9644:11:24","nodeType":"VariableDeclaration","scope":2655,"src":"9624:31:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow"},"typeName":{"id":2606,"nodeType":"UserDefinedTypeName","pathNode":{"id":2605,"name":"ClaimWindow","nameLocations":["9624:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":2193,"src":"9624:11:24"},"referencedDeclaration":2193,"src":"9624:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_ClaimWindow_$2193_storage_ptr","typeString":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow"}},"visibility":"internal"},{"constant":false,"id":2609,"mutability":"mutable","name":"leaf","nameLocation":"9665:4:24","nodeType":"VariableDeclaration","scope":2655,"src":"9657:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2608,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9657:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9623:47:24"},"returnParameters":{"id":2614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2613,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2655,"src":"9694:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"},"typeName":{"id":2612,"nodeType":"UserDefinedTypeName","pathNode":{"id":2611,"name":"ClaimError","nameLocations":["9694:10:24"],"nodeType":"IdentifierPath","referencedDeclaration":2185,"src":"9694:10:24"},"referencedDeclaration":2185,"src":"9694:10:24","typeDescriptions":{"typeIdentifier":"t_enum$_ClaimError_$2185","typeString":"enum ERC20ClaimWindowMerkleClaim.ClaimError"}},"visibility":"internal"}],"src":"9693:12:24"},"scope":2684,"src":"9605:493:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"baseFunctions":[666,894],"body":{"id":2668,"nodeType":"Block","src":"10263:65:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2664,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"10280:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$719_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10309:10:24","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":666,"src":"10280:39:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2663,"id":2667,"nodeType":"Return","src":"10273:48:24"}]},"documentation":{"id":2656,"nodeType":"StructuredDocumentation","src":"10104:44:24","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2669,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"10162:10:24","nodeType":"FunctionDefinition","overrides":{"id":2660,"nodeType":"OverrideSpecifier","overrides":[{"id":2658,"name":"Context","nameLocations":["10206:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":912,"src":"10206:7:24"},{"id":2659,"name":"ForwarderRegistryContextBase","nameLocations":["10215:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"10215:28:24"}],"src":"10197:47:24"},"parameters":{"id":2657,"nodeType":"ParameterList","parameters":[],"src":"10172:2:24"},"returnParameters":{"id":2663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2662,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2669,"src":"10254:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2661,"name":"address","nodeType":"ElementaryTypeName","src":"10254:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10253:9:24"},"scope":2684,"src":"10153:175:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[718,903],"body":{"id":2682,"nodeType":"Block","src":"10498:63:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2678,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":719,"src":"10515:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$719_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10544:8:24","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":718,"src":"10515:37:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10515:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2677,"id":2681,"nodeType":"Return","src":"10508:46:24"}]},"documentation":{"id":2670,"nodeType":"StructuredDocumentation","src":"10334:44:24","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2683,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"10392:8:24","nodeType":"FunctionDefinition","overrides":{"id":2674,"nodeType":"OverrideSpecifier","overrides":[{"id":2672,"name":"Context","nameLocations":["10434:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":912,"src":"10434:7:24"},{"id":2673,"name":"ForwarderRegistryContextBase","nameLocations":["10443:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":719,"src":"10443:28:24"}],"src":"10425:47:24"},"parameters":{"id":2671,"nodeType":"ParameterList","parameters":[],"src":"10400:2:24"},"returnParameters":{"id":2677,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2676,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2683,"src":"10482:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2675,"name":"bytes","nodeType":"ElementaryTypeName","src":"10482:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"10481:16:24"},"scope":2684,"src":"10383:178:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2685,"src":"923:9640:24","usedErrors":[94,429,2244,2247,2250,2259,2264,2273,2278,2285,2292],"usedEvents":[115,2219,2230,2241]}],"src":"32:10532:24"},"id":24},"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol":{"ast":{"absolutePath":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol","exportedSymbols":{"ERC20ClaimWindowMerkleClaim":[2684],"ERC20ClaimWindowMerkleClaimMock":[2731],"IForwarderRegistry":[747]},"id":2732,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2686,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:25"},{"absolutePath":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol","file":"../../merkleClaim/ERC20ClaimWindowMerkleClaim.sol","id":2688,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2732,"sourceUnit":2685,"src":"57:94:25","symbolAliases":[{"foreign":{"id":2687,"name":"ERC20ClaimWindowMerkleClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2684,"src":"65:27:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2732,"sourceUnit":748,"src":"152:114:25","symbolAliases":[{"foreign":{"id":2689,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"160:18:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2691,"name":"ERC20ClaimWindowMerkleClaim","nameLocations":["312:27:25"],"nodeType":"IdentifierPath","referencedDeclaration":2684,"src":"312:27:25"},"id":2692,"nodeType":"InheritanceSpecifier","src":"312:27:25"}],"canonicalName":"ERC20ClaimWindowMerkleClaimMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":2731,"linearizedBaseContracts":[2731,2684,32,424,441,80,912,136,591,731,719],"name":"ERC20ClaimWindowMerkleClaimMock","nameLocation":"277:31:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":2710,"nodeType":"Block","src":"601:2:25","statements":[]},"id":2711,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2704,"name":"erc20Token_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"534:11:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2705,"name":"stakingPool_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"547:12:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2706,"name":"tokenHolderWallet_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"561:18:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2707,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"581:18:25","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}}],"id":2708,"kind":"baseConstructorSpecifier","modifierName":{"id":2703,"name":"ERC20ClaimWindowMerkleClaim","nameLocations":["506:27:25"],"nodeType":"IdentifierPath","referencedDeclaration":2684,"src":"506:27:25"},"nodeType":"ModifierInvocation","src":"506:94:25"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2694,"mutability":"mutable","name":"erc20Token_","nameLocation":"375:11:25","nodeType":"VariableDeclaration","scope":2711,"src":"367:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2693,"name":"address","nodeType":"ElementaryTypeName","src":"367:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"stakingPool_","nameLocation":"404:12:25","nodeType":"VariableDeclaration","scope":2711,"src":"396:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2695,"name":"address","nodeType":"ElementaryTypeName","src":"396:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2698,"mutability":"mutable","name":"tokenHolderWallet_","nameLocation":"434:18:25","nodeType":"VariableDeclaration","scope":2711,"src":"426:26:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2697,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2701,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"481:18:25","nodeType":"VariableDeclaration","scope":2711,"src":"462:37:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"},"typeName":{"id":2700,"nodeType":"UserDefinedTypeName","pathNode":{"id":2699,"name":"IForwarderRegistry","nameLocations":["462:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":747,"src":"462:18:25"},"referencedDeclaration":747,"src":"462:18:25","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$747","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"357:148:25"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[],"src":"601:0:25"},"scope":2731,"src":"346:257:25","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2719,"nodeType":"Block","src":"664:36:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2716,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2669],"referencedDeclaration":2669,"src":"681:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"681:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2715,"id":2718,"nodeType":"Return","src":"674:19:25"}]},"functionSelector":"d1a91ff2","id":2720,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"618:11:25","nodeType":"FunctionDefinition","parameters":{"id":2712,"nodeType":"ParameterList","parameters":[],"src":"629:2:25"},"returnParameters":{"id":2715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2714,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2720,"src":"655:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2713,"name":"address","nodeType":"ElementaryTypeName","src":"655:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"654:9:25"},"scope":2731,"src":"609:91:25","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2729,"nodeType":"Block","src":"876:34:25","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2726,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[2683],"referencedDeclaration":2683,"src":"893:8:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"893:10:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2725,"id":2728,"nodeType":"Return","src":"886:17:25"}]},"documentation":{"id":2721,"nodeType":"StructuredDocumentation","src":"706:105:25","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":2730,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"825:9:25","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[],"src":"834:2:25"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2730,"src":"860:14:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2723,"name":"bytes","nodeType":"ElementaryTypeName","src":"860:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"859:16:25"},"scope":2731,"src":"816:94:25","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2732,"src":"268:644:25","usedErrors":[94,429,2244,2247,2250,2259,2264,2273,2278,2285,2292],"usedEvents":[115,2219,2230,2241]}],"src":"32:881:25"},"id":25}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4647:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isApprovedForwarder(address,address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account.","target":"The target contract."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."}}},"title":"Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address,address)":"019a2028"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\",\"target\":\"The target contract.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\"}}},\"title\":\"Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"IERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Safe Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Safe Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":\"IERC20SafeTransfers\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:410:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"hasBytecode(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1407:2774:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getInt256Slot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/Hashes.sol":{"Hashes":{"abi":[],"devdoc":{"details":"Library of standard hash functions. _Available since v5.1._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023e756b69c1ebac6c888c4ddd61fdac4cac45146c946352e2a3338beab609cd164736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0xE7 JUMP 0xB6 SWAP13 0x1E 0xBA 0xC6 0xC8 DUP9 0xC4 0xDD 0xD6 0x1F 0xDA 0xC4 0xCA 0xC4 MLOAD CHAINID 0xC9 CHAINID CALLDATALOAD 0x2E 0x2A CALLER CODESIZE 0xBE 0xAB PUSH1 0x9C 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"221:813:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;221:813:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122023e756b69c1ebac6c888c4ddd61fdac4cac45146c946352e2a3338beab609cd164736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x23 0xE7 JUMP 0xB6 SWAP13 0x1E 0xBA 0xC6 0xC8 DUP9 0xC4 0xDD 0xD6 0x1F 0xDA 0xC4 0xCA 0xC4 MLOAD CHAINID 0xC9 CHAINID CALLDATALOAD 0x2E 0x2A CALLER CODESIZE 0xBE 0xAB PUSH1 0x9C 0xD1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"221:813:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientKeccak256(bytes32,bytes32)":"infinite","commutativeKeccak256(bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library of standard hash functions. _Available since v5.1._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":\"Hashes\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[{"inputs":[],"name":"MerkleProofInvalidMultiproof","type":"error"}],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.","errors":{"MerkleProofInvalidMultiproof()":[{"details":"The multiproof provided is not valid."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de7ead9276d491b3c971e476d2c63d48954ed8d6dd0cde16d3ab2cdc275282ca64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH31 0xAD9276D491B3C971E476D2C63D48954ED8D6DD0CDE16D3AB2CDC275282CA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1353:22982:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220de7ead9276d491b3c971e476d2c63d48954ed8d6dd0cde16d3ab2cdc275282ca64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE PUSH31 0xAD9276D491B3C971E476D2C63D48954ED8D6DD0CDE16D3AB2CDC275282CA64 PUSH20 0x6F6C634300081C00330000000000000000000000 ","sourceMap":"1353:22982:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory,function (bytes32,bytes32) view returns (bytes32))":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProof(bytes32[] memory,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32,function (bytes32,bytes32) view returns (bytes32))":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MerkleProofInvalidMultiproof\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the Merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates Merkle trees that are safe against this attack out of the box. IMPORTANT: Consider memory side-effects when using custom hashing functions that access memory in an unsafe way. NOTE: This library supports proof verification for merkle trees built using custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving leaf inclusion in trees built using non-commutative hashing functions requires additional logic that is not supported by this library.\",\"errors\":{\"MerkleProofInvalidMultiproof()\":[{\"details\":\"The multiproof provided is not valid.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Hashes} from \\\"./Hashes.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n *\\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\\n * that access memory in an unsafe way.\\n *\\n * NOTE: This library supports proof verification for merkle trees built using\\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\\n * leaf inclusion in trees built using non-commutative hashing functions requires\\n * additional logic that is not supported by this library.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProof(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProofCalldata(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol":{"ERC20ClaimWindowMerkleClaim":{"abi":[{"inputs":[{"internalType":"address","name":"erc20Token_","type":"address"},{"internalType":"address","name":"stakingPool_","type":"address"},{"internalType":"address","name":"tokenHolderWallet_","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[],"name":"InvalidERC20Token","type":"error"},{"inputs":[],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[],"name":"InvalidStakingPool","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"EpochMerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newTokenHolderWallet","type":"address"}],"name":"TokenHolderWalletSet","type":"event"},{"inputs":[],"name":"ERC20_TOKEN","outputs":[{"internalType":"contract IERC20SafeTransfers","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_POOL","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"canClaim","outputs":[{"internalType":"enum ERC20ClaimWindowMerkleClaim.ClaimError","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimAndStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newTokenHolderWallet","type":"address"}],"name":"setTokenHolderWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenHolderWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)":{"params":{"endTime":"The end time of the claim window.","epochId":"The unique epoch ID associated with the specified claim window.","merkleRoot":"The merkle root in the claim window.","startTime":"The start time of the claim window."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,bytes32,address,uint256)":{"params":{"amount":"The amount of checkmate token is claimed.","epochId":"The unique epoch ID associated with the claim window.","recipient":"The recipient of the checkmate token.","root":"The merkle root of the claim window."}},"TokenHolderWalletSet(address)":{"params":{"newTokenHolderWallet":"The address of the new token holder wallet."}}},"kind":"dev","methods":{"canClaim(bytes32,address,uint256)":{"params":{"amount":"The amount of checkmate token to be claimed.","epochId":"The unique epoch ID associated with the claim window.","recipient":"The recipient of the checkmate token."}},"claimAndStake(bytes32,address,uint256,bytes32[])":{"details":"Reverts with {EpochIdNotExists} if epoch id does not exist.Reverts with {OutOfClaimWindow} if current block time is beyond claim window.Reverts with {AlreadyClaimed} if the specified payout has already been claimed.Reverts with {InvalidProof} if the merkle proof has failed the verification.Reverts with {TransferFailed} if checkmate token transfer fails.Emits a {PayoutClaimed} event.","params":{"amount":"The amount of checkmate token to be claimed.","epochId":"The unique epoch ID associated with the claim window.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the checkmate token."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if _msgSender() is not the owner.Reverts if the merkle root is zero.Reverts if the claim window is invalid.Reverts if the epoch ID has already been set.Emits a {EpochMerkleRootSet} event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"setTokenHolderWallet(address)":{"details":"Reverts if _msgSender() is not the owner.Emits a {TokenHolderWalletSet} event.","params":{"newTokenHolderWallet":"The address of the new token holder wallet."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2352":{"entryPoint":null,"id":2352,"parameterSlots":4,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_565":{"entryPoint":null,"id":565,"parameterSlots":1,"returnSlots":0},"@_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":0},"@constructorInit_237":{"entryPoint":300,"id":237,"parameterSlots":2,"returnSlots":0},"@layout_393":{"entryPoint":248,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":418,"id":541,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_495":{"entryPoint":464,"id":495,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory":{"entryPoint":580,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":675,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":556,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1062:26","nodeType":"YulBlock","src":"0:1062:26","statements":[{"nativeSrc":"6:3:26","nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nativeSrc":"59:86:26","nodeType":"YulBlock","src":"59:86:26","statements":[{"body":{"nativeSrc":"123:16:26","nodeType":"YulBlock","src":"123:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:26","nodeType":"YulLiteral","src":"132:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:26","nodeType":"YulLiteral","src":"135:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:26","nodeType":"YulIdentifier","src":"125:6:26"},"nativeSrc":"125:12:26","nodeType":"YulFunctionCall","src":"125:12:26"},"nativeSrc":"125:12:26","nodeType":"YulExpressionStatement","src":"125:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:26","nodeType":"YulIdentifier","src":"82:5:26"},{"arguments":[{"name":"value","nativeSrc":"93:5:26","nodeType":"YulIdentifier","src":"93:5:26"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:26","nodeType":"YulLiteral","src":"108:3:26","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:26","nodeType":"YulLiteral","src":"113:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:26","nodeType":"YulIdentifier","src":"104:3:26"},"nativeSrc":"104:11:26","nodeType":"YulFunctionCall","src":"104:11:26"},{"kind":"number","nativeSrc":"117:1:26","nodeType":"YulLiteral","src":"117:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:26","nodeType":"YulIdentifier","src":"100:3:26"},"nativeSrc":"100:19:26","nodeType":"YulFunctionCall","src":"100:19:26"}],"functionName":{"name":"and","nativeSrc":"89:3:26","nodeType":"YulIdentifier","src":"89:3:26"},"nativeSrc":"89:31:26","nodeType":"YulFunctionCall","src":"89:31:26"}],"functionName":{"name":"eq","nativeSrc":"79:2:26","nodeType":"YulIdentifier","src":"79:2:26"},"nativeSrc":"79:42:26","nodeType":"YulFunctionCall","src":"79:42:26"}],"functionName":{"name":"iszero","nativeSrc":"72:6:26","nodeType":"YulIdentifier","src":"72:6:26"},"nativeSrc":"72:50:26","nodeType":"YulFunctionCall","src":"72:50:26"},"nativeSrc":"69:70:26","nodeType":"YulIf","src":"69:70:26"}]},"name":"validator_revert_address","nativeSrc":"14:131:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:26","nodeType":"YulTypedName","src":"48:5:26","type":""}],"src":"14:131:26"},{"body":{"nativeSrc":"308:522:26","nodeType":"YulBlock","src":"308:522:26","statements":[{"body":{"nativeSrc":"355:16:26","nodeType":"YulBlock","src":"355:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"364:1:26","nodeType":"YulLiteral","src":"364:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"367:1:26","nodeType":"YulLiteral","src":"367:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"357:6:26","nodeType":"YulIdentifier","src":"357:6:26"},"nativeSrc":"357:12:26","nodeType":"YulFunctionCall","src":"357:12:26"},"nativeSrc":"357:12:26","nodeType":"YulExpressionStatement","src":"357:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"329:7:26","nodeType":"YulIdentifier","src":"329:7:26"},{"name":"headStart","nativeSrc":"338:9:26","nodeType":"YulIdentifier","src":"338:9:26"}],"functionName":{"name":"sub","nativeSrc":"325:3:26","nodeType":"YulIdentifier","src":"325:3:26"},"nativeSrc":"325:23:26","nodeType":"YulFunctionCall","src":"325:23:26"},{"kind":"number","nativeSrc":"350:3:26","nodeType":"YulLiteral","src":"350:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"321:3:26","nodeType":"YulIdentifier","src":"321:3:26"},"nativeSrc":"321:33:26","nodeType":"YulFunctionCall","src":"321:33:26"},"nativeSrc":"318:53:26","nodeType":"YulIf","src":"318:53:26"},{"nativeSrc":"380:29:26","nodeType":"YulVariableDeclaration","src":"380:29:26","value":{"arguments":[{"name":"headStart","nativeSrc":"399:9:26","nodeType":"YulIdentifier","src":"399:9:26"}],"functionName":{"name":"mload","nativeSrc":"393:5:26","nodeType":"YulIdentifier","src":"393:5:26"},"nativeSrc":"393:16:26","nodeType":"YulFunctionCall","src":"393:16:26"},"variables":[{"name":"value","nativeSrc":"384:5:26","nodeType":"YulTypedName","src":"384:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"443:5:26","nodeType":"YulIdentifier","src":"443:5:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"418:24:26","nodeType":"YulIdentifier","src":"418:24:26"},"nativeSrc":"418:31:26","nodeType":"YulFunctionCall","src":"418:31:26"},"nativeSrc":"418:31:26","nodeType":"YulExpressionStatement","src":"418:31:26"},{"nativeSrc":"458:15:26","nodeType":"YulAssignment","src":"458:15:26","value":{"name":"value","nativeSrc":"468:5:26","nodeType":"YulIdentifier","src":"468:5:26"},"variableNames":[{"name":"value0","nativeSrc":"458:6:26","nodeType":"YulIdentifier","src":"458:6:26"}]},{"nativeSrc":"482:40:26","nodeType":"YulVariableDeclaration","src":"482:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"507:9:26","nodeType":"YulIdentifier","src":"507:9:26"},{"kind":"number","nativeSrc":"518:2:26","nodeType":"YulLiteral","src":"518:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"503:3:26","nodeType":"YulIdentifier","src":"503:3:26"},"nativeSrc":"503:18:26","nodeType":"YulFunctionCall","src":"503:18:26"}],"functionName":{"name":"mload","nativeSrc":"497:5:26","nodeType":"YulIdentifier","src":"497:5:26"},"nativeSrc":"497:25:26","nodeType":"YulFunctionCall","src":"497:25:26"},"variables":[{"name":"value_1","nativeSrc":"486:7:26","nodeType":"YulTypedName","src":"486:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"556:7:26","nodeType":"YulIdentifier","src":"556:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"531:24:26","nodeType":"YulIdentifier","src":"531:24:26"},"nativeSrc":"531:33:26","nodeType":"YulFunctionCall","src":"531:33:26"},"nativeSrc":"531:33:26","nodeType":"YulExpressionStatement","src":"531:33:26"},{"nativeSrc":"573:17:26","nodeType":"YulAssignment","src":"573:17:26","value":{"name":"value_1","nativeSrc":"583:7:26","nodeType":"YulIdentifier","src":"583:7:26"},"variableNames":[{"name":"value1","nativeSrc":"573:6:26","nodeType":"YulIdentifier","src":"573:6:26"}]},{"nativeSrc":"599:40:26","nodeType":"YulVariableDeclaration","src":"599:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"624:9:26","nodeType":"YulIdentifier","src":"624:9:26"},{"kind":"number","nativeSrc":"635:2:26","nodeType":"YulLiteral","src":"635:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"620:3:26","nodeType":"YulIdentifier","src":"620:3:26"},"nativeSrc":"620:18:26","nodeType":"YulFunctionCall","src":"620:18:26"}],"functionName":{"name":"mload","nativeSrc":"614:5:26","nodeType":"YulIdentifier","src":"614:5:26"},"nativeSrc":"614:25:26","nodeType":"YulFunctionCall","src":"614:25:26"},"variables":[{"name":"value_2","nativeSrc":"603:7:26","nodeType":"YulTypedName","src":"603:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"673:7:26","nodeType":"YulIdentifier","src":"673:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"648:24:26","nodeType":"YulIdentifier","src":"648:24:26"},"nativeSrc":"648:33:26","nodeType":"YulFunctionCall","src":"648:33:26"},"nativeSrc":"648:33:26","nodeType":"YulExpressionStatement","src":"648:33:26"},{"nativeSrc":"690:17:26","nodeType":"YulAssignment","src":"690:17:26","value":{"name":"value_2","nativeSrc":"700:7:26","nodeType":"YulIdentifier","src":"700:7:26"},"variableNames":[{"name":"value2","nativeSrc":"690:6:26","nodeType":"YulIdentifier","src":"690:6:26"}]},{"nativeSrc":"716:40:26","nodeType":"YulVariableDeclaration","src":"716:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"741:9:26","nodeType":"YulIdentifier","src":"741:9:26"},{"kind":"number","nativeSrc":"752:2:26","nodeType":"YulLiteral","src":"752:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"737:3:26","nodeType":"YulIdentifier","src":"737:3:26"},"nativeSrc":"737:18:26","nodeType":"YulFunctionCall","src":"737:18:26"}],"functionName":{"name":"mload","nativeSrc":"731:5:26","nodeType":"YulIdentifier","src":"731:5:26"},"nativeSrc":"731:25:26","nodeType":"YulFunctionCall","src":"731:25:26"},"variables":[{"name":"value_3","nativeSrc":"720:7:26","nodeType":"YulTypedName","src":"720:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"790:7:26","nodeType":"YulIdentifier","src":"790:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"765:24:26","nodeType":"YulIdentifier","src":"765:24:26"},"nativeSrc":"765:33:26","nodeType":"YulFunctionCall","src":"765:33:26"},"nativeSrc":"765:33:26","nodeType":"YulExpressionStatement","src":"765:33:26"},{"nativeSrc":"807:17:26","nodeType":"YulAssignment","src":"807:17:26","value":{"name":"value_3","nativeSrc":"817:7:26","nodeType":"YulIdentifier","src":"817:7:26"},"variableNames":[{"name":"value3","nativeSrc":"807:6:26","nodeType":"YulIdentifier","src":"807:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory","nativeSrc":"150:680:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"250:9:26","nodeType":"YulTypedName","src":"250:9:26","type":""},{"name":"dataEnd","nativeSrc":"261:7:26","nodeType":"YulTypedName","src":"261:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"273:6:26","nodeType":"YulTypedName","src":"273:6:26","type":""},{"name":"value1","nativeSrc":"281:6:26","nodeType":"YulTypedName","src":"281:6:26","type":""},{"name":"value2","nativeSrc":"289:6:26","nodeType":"YulTypedName","src":"289:6:26","type":""},{"name":"value3","nativeSrc":"297:6:26","nodeType":"YulTypedName","src":"297:6:26","type":""}],"src":"150:680:26"},{"body":{"nativeSrc":"884:176:26","nodeType":"YulBlock","src":"884:176:26","statements":[{"nativeSrc":"894:17:26","nodeType":"YulAssignment","src":"894:17:26","value":{"arguments":[{"name":"x","nativeSrc":"906:1:26","nodeType":"YulIdentifier","src":"906:1:26"},{"name":"y","nativeSrc":"909:1:26","nodeType":"YulIdentifier","src":"909:1:26"}],"functionName":{"name":"sub","nativeSrc":"902:3:26","nodeType":"YulIdentifier","src":"902:3:26"},"nativeSrc":"902:9:26","nodeType":"YulFunctionCall","src":"902:9:26"},"variableNames":[{"name":"diff","nativeSrc":"894:4:26","nodeType":"YulIdentifier","src":"894:4:26"}]},{"body":{"nativeSrc":"943:111:26","nodeType":"YulBlock","src":"943:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"964:1:26","nodeType":"YulLiteral","src":"964:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"971:3:26","nodeType":"YulLiteral","src":"971:3:26","type":"","value":"224"},{"kind":"number","nativeSrc":"976:10:26","nodeType":"YulLiteral","src":"976:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"967:3:26","nodeType":"YulIdentifier","src":"967:3:26"},"nativeSrc":"967:20:26","nodeType":"YulFunctionCall","src":"967:20:26"}],"functionName":{"name":"mstore","nativeSrc":"957:6:26","nodeType":"YulIdentifier","src":"957:6:26"},"nativeSrc":"957:31:26","nodeType":"YulFunctionCall","src":"957:31:26"},"nativeSrc":"957:31:26","nodeType":"YulExpressionStatement","src":"957:31:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1008:1:26","nodeType":"YulLiteral","src":"1008:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"1011:4:26","nodeType":"YulLiteral","src":"1011:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1001:6:26","nodeType":"YulIdentifier","src":"1001:6:26"},"nativeSrc":"1001:15:26","nodeType":"YulFunctionCall","src":"1001:15:26"},"nativeSrc":"1001:15:26","nodeType":"YulExpressionStatement","src":"1001:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1036:1:26","nodeType":"YulLiteral","src":"1036:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"1039:4:26","nodeType":"YulLiteral","src":"1039:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1029:6:26","nodeType":"YulIdentifier","src":"1029:6:26"},"nativeSrc":"1029:15:26","nodeType":"YulFunctionCall","src":"1029:15:26"},"nativeSrc":"1029:15:26","nodeType":"YulExpressionStatement","src":"1029:15:26"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"926:4:26","nodeType":"YulIdentifier","src":"926:4:26"},{"name":"x","nativeSrc":"932:1:26","nodeType":"YulIdentifier","src":"932:1:26"}],"functionName":{"name":"gt","nativeSrc":"923:2:26","nodeType":"YulIdentifier","src":"923:2:26"},"nativeSrc":"923:11:26","nodeType":"YulFunctionCall","src":"923:11:26"},"nativeSrc":"920:134:26","nodeType":"YulIf","src":"920:134:26"}]},"name":"checked_sub_t_uint256","nativeSrc":"835:225:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"866:1:26","nodeType":"YulTypedName","src":"866:1:26","type":""},{"name":"y","nativeSrc":"869:1:26","nodeType":"YulTypedName","src":"869:1:26","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"875:4:26","nodeType":"YulTypedName","src":"875:4:26","type":""}],"src":"835:225:26"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let value_3 := mload(add(headStart, 96))\n        validator_revert_address(value_3)\n        value3 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x14C3 CODESIZE SUB DUP1 PUSH2 0x14C3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x244 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH2 0x4F DUP2 PUSH2 0x49 PUSH2 0xF8 JUMP JUMPDEST SWAP1 PUSH2 0x12C JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x77 JUMPI PUSH1 0x40 MLOAD PUSH4 0x26412D89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0xA0 MSTORE DUP4 AND PUSH2 0xA4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B106F85 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0xC0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 DUP5 AND SWAP2 DUP3 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 SWAP1 LOG2 POP POP POP POP PUSH2 0x2C4 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x126 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2A3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x182 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x19E PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x197 PUSH2 0x1A2 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D0 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x126 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2A3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1FE JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x241 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x25A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x265 DUP2 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x276 DUP2 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x287 DUP2 PUSH2 0x22C JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x298 DUP2 PUSH2 0x22C JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x126 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x11AD PUSH2 0x316 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x131 ADD MSTORE PUSH2 0x6E4 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2AA ADD MSTORE PUSH2 0x6B7 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x17A ADD MSTORE DUP2 DUP2 PUSH2 0x1C1 ADD MSTORE DUP2 DUP2 PUSH2 0xCB1 ADD MSTORE PUSH2 0xD3F ADD MSTORE PUSH2 0x11AD PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC3C0F06 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEC7F7494 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEC7F7494 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEFC4C631 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0xFBB0F673 EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xD6A3138B EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x563CAC28 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x14AE36AE EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0xE71 JUMP JUMPDEST PUSH2 0x319 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x153 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH32 0x0 PUSH2 0x153 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0xECC JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1BF CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x102 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x23C PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0xF99 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x153 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2DA CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x153 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x313 DUP3 PUSH2 0x30D PUSH2 0x937 JUMP JUMPDEST SWAP1 PUSH2 0x965 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x332 PUSH2 0x324 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x32C PUSH2 0xA49 JUMP JUMPDEST SWAP1 PUSH2 0xA77 JUMP JUMPDEST DUP3 PUSH2 0x369 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9DD854D300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x378 JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 SWAP1 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE MLOAD DUP2 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH32 0x97DF4A2FB6656595BC6EB616C2068E9D50031428EF69D8849590BC9F3DEC620B SWAP1 PUSH2 0x480 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP8 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP3 DUP5 ADD MSTORE PUSH1 0x54 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x74 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 SWAP1 PUSH2 0x4FF DUP3 DUP5 PUSH2 0xAE6 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x515 JUMPI PUSH2 0x515 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x54F JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x563 JUMPI PUSH2 0x563 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x5A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC20789F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3BB JUMP JUMPDEST DUP2 SLOAD PUSH2 0x606 DUP7 DUP7 DUP4 DUP8 PUSH2 0xB41 JUMP JUMPDEST PUSH2 0x662 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCC55900D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND SWAP4 PUSH4 0xB88D4FDE SWAP4 SWAP2 AND SWAP2 PUSH32 0x0 SWAP2 DUP13 SWAP2 PUSH2 0x72E SWAP2 DUP16 SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x77B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79F SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP11 PUSH32 0x6DA15703C9BAA6922F6A2F40FE90A03F70A24B9113EDD75F913454A45D996CD DUP11 PUSH1 0x40 MLOAD PUSH2 0x7EA SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x824 PUSH2 0x80A PUSH2 0xA49 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP3 ADD DUP5 SWAP1 MSTORE PUSH2 0x899 SWAP2 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xAE6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8AC PUSH2 0x324 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x934 PUSH2 0x924 PUSH2 0xA3F JUMP JUMPDEST DUP3 PUSH2 0x92D PUSH2 0xA49 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB59 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9B5 JUMPI POP PUSH1 0x0 PUSH2 0x313 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA06 JUMPI POP PUSH1 0x1 PUSH2 0x313 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x824 PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x110E JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xAE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xAF7 JUMPI POP PUSH1 0x1 PUSH2 0x313 JUMP JUMPDEST DUP3 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0xB0C JUMPI POP DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xB19 JUMPI POP PUSH1 0x2 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB38 JUMPI POP PUSH1 0x3 PUSH2 0x313 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB4F DUP7 DUP7 DUP6 PUSH2 0xDBB JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xBC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC68 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC7E JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC88 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDAA JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAA SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST ISZERO PUSH2 0xDB4 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF4 JUMPI PUSH2 0xDEA DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xDDE JUMPI PUSH2 0xDDE PUSH2 0x1148 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xDFD JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDC0 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE19 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xEE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0xEF4 PUSH1 0x20 DUP8 ADD PUSH2 0xEA3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xF28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xF54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE28 DUP3 PUSH2 0xEA3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0xFBE PUSH1 0x20 DUP6 ADD PUSH2 0xEA3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x1039 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AB JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x108E JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x313 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x184FCB63A384ED33693536C967FA0A57566FE6A1AD46E55357753923506E0 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"923:9640:24:-:0;;;4192:624;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;4415:10:24;1008:63:0;4415:10:24;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;4441:25:24;::::2;4437:82;;4489:19;;-1:-1:-1::0;;;4489:19:24::2;;;;;;;;;;;4437:82;-1:-1:-1::0;;;;;4528:46:24;;::::2;;::::0;4589:26;::::2;4585:84;;4638:20;;-1:-1:-1::0;;;4638:20:24::2;;;;;;;;;;;4585:84;-1:-1:-1::0;;;;;4678:27:24;;::::2;;::::0;4716:17:::2;:38:::0;;-1:-1:-1;;;;;;4716:38:24::2;::::0;;::::2;::::0;;::::2;::::0;;4769:40:::2;::::0;::::2;::::0;4716:17;4769:40:::2;4192:624:::0;;;;923:9640;;5060:174:6;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:6:o;1561:341::-;-1:-1:-1;;;;;1649:26:6;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:6;-1:-1:-1;;;;;1691:30:6;;;;;;;1740:46;;-1:-1:-1;;1740:46:6;;-1:-1:-1;;1740:46:6;1645:152;1806:89;-1:-1:-1;;;1890:4:6;1806:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:131:26:-;-1:-1:-1;;;;;89:31:26;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:680::-;273:6;281;289;297;350:3;338:9;329:7;325:23;321:33;318:53;;;367:1;364;357:12;318:53;399:9;393:16;418:31;443:5;418:31;:::i;:::-;518:2;503:18;;497:25;468:5;;-1:-1:-1;531:33:26;497:25;531:33;:::i;:::-;635:2;620:18;;614:25;583:7;;-1:-1:-1;648:33:26;614:25;648:33;:::i;:::-;752:2;737:18;;731:25;700:7;;-1:-1:-1;765:33:26;731:25;765:33;:::i;:::-;150:680;;;;-1:-1:-1;150:680:26;;-1:-1:-1;;150:680:26:o;835:225::-;902:9;;;923:11;;;920:134;;;976:10;971:3;967:20;964:1;957:31;1011:4;1008:1;1001:15;1039:4;1036:1;1029:15;835:225;923:9640:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ERC20_TOKEN_2197":{"entryPoint":null,"id":2197,"parameterSlots":0,"returnSlots":0},"@STAKING_POOL_2200":{"entryPoint":null,"id":2200,"parameterSlots":0,"returnSlots":0},"@_canClaim_2655":{"entryPoint":2790,"id":2655,"parameterSlots":2,"returnSlots":1},"@_efficientKeccak256_1075":{"entryPoint":null,"id":1075,"parameterSlots":2,"returnSlots":1},"@_msgSender_2669":{"entryPoint":2623,"id":2669,"parameterSlots":0,"returnSlots":1},"@_msgSender_666":{"entryPoint":3182,"id":666,"parameterSlots":0,"returnSlots":1},"@canClaim_2603":{"entryPoint":2089,"id":2603,"parameterSlots":3,"returnSlots":1},"@claimAndStake_2575":{"entryPoint":1166,"id":2575,"parameterSlots":5,"returnSlots":0},"@claimWindows_2209":{"entryPoint":null,"id":2209,"parameterSlots":0,"returnSlots":0},"@claimed_2214":{"entryPoint":null,"id":2214,"parameterSlots":0,"returnSlots":0},"@commutativeKeccak256_1063":{"entryPoint":3581,"id":1063,"parameterSlots":2,"returnSlots":1},"@enforceIsContractOwner_361":{"entryPoint":2679,"id":361,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_574":{"entryPoint":null,"id":574,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_590":{"entryPoint":null,"id":590,"parameterSlots":1,"returnSlots":1},"@layout_393":{"entryPoint":2633,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":2359,"id":541,"parameterSlots":0,"returnSlots":1},"@msgSender_758":{"entryPoint":null,"id":758,"parameterSlots":0,"returnSlots":1},"@owner_314":{"entryPoint":null,"id":314,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":2045,"id":62,"parameterSlots":0,"returnSlots":1},"@processProofCalldata_1290":{"entryPoint":3515,"id":1290,"parameterSlots":3,"returnSlots":1},"@setEpochMerkleRoot_2434":{"entryPoint":793,"id":2434,"parameterSlots":4,"returnSlots":0},"@setTokenHolderWallet_2458":{"entryPoint":2209,"id":2458,"parameterSlots":1,"returnSlots":0},"@supportsInterface_423":{"entryPoint":767,"id":423,"parameterSlots":1,"returnSlots":1},"@supportsInterface_529":{"entryPoint":2405,"id":529,"parameterSlots":2,"returnSlots":1},"@tokenHolderWallet_2203":{"entryPoint":null,"id":2203,"parameterSlots":0,"returnSlots":0},"@transferOwnership_301":{"entryPoint":2905,"id":301,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2329,"id":79,"parameterSlots":1,"returnSlots":0},"@verifyCalldata_1249":{"entryPoint":2881,"id":1249,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":3747,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3941,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4332,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3968,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_addresst_uint256":{"entryPoint":3993,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":3788,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":3697,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3631,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4159,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed":{"entryPoint":4094,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4366,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":4047,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4424,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8868:26","nodeType":"YulBlock","src":"0:8868:26","statements":[{"nativeSrc":"6:3:26","nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nativeSrc":"83:263:26","nodeType":"YulBlock","src":"83:263:26","statements":[{"body":{"nativeSrc":"129:16:26","nodeType":"YulBlock","src":"129:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:26","nodeType":"YulLiteral","src":"138:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:26","nodeType":"YulLiteral","src":"141:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:26","nodeType":"YulIdentifier","src":"131:6:26"},"nativeSrc":"131:12:26","nodeType":"YulFunctionCall","src":"131:12:26"},"nativeSrc":"131:12:26","nodeType":"YulExpressionStatement","src":"131:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:26","nodeType":"YulIdentifier","src":"104:7:26"},{"name":"headStart","nativeSrc":"113:9:26","nodeType":"YulIdentifier","src":"113:9:26"}],"functionName":{"name":"sub","nativeSrc":"100:3:26","nodeType":"YulIdentifier","src":"100:3:26"},"nativeSrc":"100:23:26","nodeType":"YulFunctionCall","src":"100:23:26"},{"kind":"number","nativeSrc":"125:2:26","nodeType":"YulLiteral","src":"125:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:26","nodeType":"YulIdentifier","src":"96:3:26"},"nativeSrc":"96:32:26","nodeType":"YulFunctionCall","src":"96:32:26"},"nativeSrc":"93:52:26","nodeType":"YulIf","src":"93:52:26"},{"nativeSrc":"154:36:26","nodeType":"YulVariableDeclaration","src":"154:36:26","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:26","nodeType":"YulIdentifier","src":"180:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:26","nodeType":"YulIdentifier","src":"167:12:26"},"nativeSrc":"167:23:26","nodeType":"YulFunctionCall","src":"167:23:26"},"variables":[{"name":"value","nativeSrc":"158:5:26","nodeType":"YulTypedName","src":"158:5:26","type":""}]},{"body":{"nativeSrc":"300:16:26","nodeType":"YulBlock","src":"300:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:26","nodeType":"YulLiteral","src":"309:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:26","nodeType":"YulLiteral","src":"312:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:26","nodeType":"YulIdentifier","src":"302:6:26"},"nativeSrc":"302:12:26","nodeType":"YulFunctionCall","src":"302:12:26"},"nativeSrc":"302:12:26","nodeType":"YulExpressionStatement","src":"302:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:26","nodeType":"YulIdentifier","src":"212:5:26"},{"arguments":[{"name":"value","nativeSrc":"223:5:26","nodeType":"YulIdentifier","src":"223:5:26"},{"kind":"number","nativeSrc":"230:66:26","nodeType":"YulLiteral","src":"230:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:26","nodeType":"YulIdentifier","src":"219:3:26"},"nativeSrc":"219:78:26","nodeType":"YulFunctionCall","src":"219:78:26"}],"functionName":{"name":"eq","nativeSrc":"209:2:26","nodeType":"YulIdentifier","src":"209:2:26"},"nativeSrc":"209:89:26","nodeType":"YulFunctionCall","src":"209:89:26"}],"functionName":{"name":"iszero","nativeSrc":"202:6:26","nodeType":"YulIdentifier","src":"202:6:26"},"nativeSrc":"202:97:26","nodeType":"YulFunctionCall","src":"202:97:26"},"nativeSrc":"199:117:26","nodeType":"YulIf","src":"199:117:26"},{"nativeSrc":"325:15:26","nodeType":"YulAssignment","src":"325:15:26","value":{"name":"value","nativeSrc":"335:5:26","nodeType":"YulIdentifier","src":"335:5:26"},"variableNames":[{"name":"value0","nativeSrc":"325:6:26","nodeType":"YulIdentifier","src":"325:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:26","nodeType":"YulTypedName","src":"49:9:26","type":""},{"name":"dataEnd","nativeSrc":"60:7:26","nodeType":"YulTypedName","src":"60:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:26","nodeType":"YulTypedName","src":"72:6:26","type":""}],"src":"14:332:26"},{"body":{"nativeSrc":"446:92:26","nodeType":"YulBlock","src":"446:92:26","statements":[{"nativeSrc":"456:26:26","nodeType":"YulAssignment","src":"456:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:26","nodeType":"YulIdentifier","src":"468:9:26"},{"kind":"number","nativeSrc":"479:2:26","nodeType":"YulLiteral","src":"479:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:26","nodeType":"YulIdentifier","src":"464:3:26"},"nativeSrc":"464:18:26","nodeType":"YulFunctionCall","src":"464:18:26"},"variableNames":[{"name":"tail","nativeSrc":"456:4:26","nodeType":"YulIdentifier","src":"456:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:26","nodeType":"YulIdentifier","src":"498:9:26"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:26","nodeType":"YulIdentifier","src":"523:6:26"}],"functionName":{"name":"iszero","nativeSrc":"516:6:26","nodeType":"YulIdentifier","src":"516:6:26"},"nativeSrc":"516:14:26","nodeType":"YulFunctionCall","src":"516:14:26"}],"functionName":{"name":"iszero","nativeSrc":"509:6:26","nodeType":"YulIdentifier","src":"509:6:26"},"nativeSrc":"509:22:26","nodeType":"YulFunctionCall","src":"509:22:26"}],"functionName":{"name":"mstore","nativeSrc":"491:6:26","nodeType":"YulIdentifier","src":"491:6:26"},"nativeSrc":"491:41:26","nodeType":"YulFunctionCall","src":"491:41:26"},"nativeSrc":"491:41:26","nodeType":"YulExpressionStatement","src":"491:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:26","nodeType":"YulTypedName","src":"415:9:26","type":""},{"name":"value0","nativeSrc":"426:6:26","nodeType":"YulTypedName","src":"426:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:26","nodeType":"YulTypedName","src":"437:4:26","type":""}],"src":"351:187:26"},{"body":{"nativeSrc":"664:466:26","nodeType":"YulBlock","src":"664:466:26","statements":[{"body":{"nativeSrc":"711:16:26","nodeType":"YulBlock","src":"711:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:26","nodeType":"YulLiteral","src":"720:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:26","nodeType":"YulLiteral","src":"723:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:26","nodeType":"YulIdentifier","src":"713:6:26"},"nativeSrc":"713:12:26","nodeType":"YulFunctionCall","src":"713:12:26"},"nativeSrc":"713:12:26","nodeType":"YulExpressionStatement","src":"713:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:26","nodeType":"YulIdentifier","src":"685:7:26"},{"name":"headStart","nativeSrc":"694:9:26","nodeType":"YulIdentifier","src":"694:9:26"}],"functionName":{"name":"sub","nativeSrc":"681:3:26","nodeType":"YulIdentifier","src":"681:3:26"},"nativeSrc":"681:23:26","nodeType":"YulFunctionCall","src":"681:23:26"},{"kind":"number","nativeSrc":"706:3:26","nodeType":"YulLiteral","src":"706:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:26","nodeType":"YulIdentifier","src":"677:3:26"},"nativeSrc":"677:33:26","nodeType":"YulFunctionCall","src":"677:33:26"},"nativeSrc":"674:53:26","nodeType":"YulIf","src":"674:53:26"},{"nativeSrc":"736:14:26","nodeType":"YulVariableDeclaration","src":"736:14:26","value":{"kind":"number","nativeSrc":"749:1:26","nodeType":"YulLiteral","src":"749:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"740:5:26","nodeType":"YulTypedName","src":"740:5:26","type":""}]},{"nativeSrc":"759:32:26","nodeType":"YulAssignment","src":"759:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"781:9:26","nodeType":"YulIdentifier","src":"781:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"768:12:26","nodeType":"YulIdentifier","src":"768:12:26"},"nativeSrc":"768:23:26","nodeType":"YulFunctionCall","src":"768:23:26"},"variableNames":[{"name":"value","nativeSrc":"759:5:26","nodeType":"YulIdentifier","src":"759:5:26"}]},{"nativeSrc":"800:15:26","nodeType":"YulAssignment","src":"800:15:26","value":{"name":"value","nativeSrc":"810:5:26","nodeType":"YulIdentifier","src":"810:5:26"},"variableNames":[{"name":"value0","nativeSrc":"800:6:26","nodeType":"YulIdentifier","src":"800:6:26"}]},{"nativeSrc":"824:16:26","nodeType":"YulVariableDeclaration","src":"824:16:26","value":{"kind":"number","nativeSrc":"839:1:26","nodeType":"YulLiteral","src":"839:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"828:7:26","nodeType":"YulTypedName","src":"828:7:26","type":""}]},{"nativeSrc":"849:43:26","nodeType":"YulAssignment","src":"849:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"877:9:26","nodeType":"YulIdentifier","src":"877:9:26"},{"kind":"number","nativeSrc":"888:2:26","nodeType":"YulLiteral","src":"888:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"873:3:26","nodeType":"YulIdentifier","src":"873:3:26"},"nativeSrc":"873:18:26","nodeType":"YulFunctionCall","src":"873:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"860:12:26","nodeType":"YulIdentifier","src":"860:12:26"},"nativeSrc":"860:32:26","nodeType":"YulFunctionCall","src":"860:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"849:7:26","nodeType":"YulIdentifier","src":"849:7:26"}]},{"nativeSrc":"901:17:26","nodeType":"YulAssignment","src":"901:17:26","value":{"name":"value_1","nativeSrc":"911:7:26","nodeType":"YulIdentifier","src":"911:7:26"},"variableNames":[{"name":"value1","nativeSrc":"901:6:26","nodeType":"YulIdentifier","src":"901:6:26"}]},{"nativeSrc":"927:16:26","nodeType":"YulVariableDeclaration","src":"927:16:26","value":{"kind":"number","nativeSrc":"942:1:26","nodeType":"YulLiteral","src":"942:1:26","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"931:7:26","nodeType":"YulTypedName","src":"931:7:26","type":""}]},{"nativeSrc":"952:43:26","nodeType":"YulAssignment","src":"952:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"980:9:26","nodeType":"YulIdentifier","src":"980:9:26"},{"kind":"number","nativeSrc":"991:2:26","nodeType":"YulLiteral","src":"991:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"976:3:26","nodeType":"YulIdentifier","src":"976:3:26"},"nativeSrc":"976:18:26","nodeType":"YulFunctionCall","src":"976:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"963:12:26","nodeType":"YulIdentifier","src":"963:12:26"},"nativeSrc":"963:32:26","nodeType":"YulFunctionCall","src":"963:32:26"},"variableNames":[{"name":"value_2","nativeSrc":"952:7:26","nodeType":"YulIdentifier","src":"952:7:26"}]},{"nativeSrc":"1004:17:26","nodeType":"YulAssignment","src":"1004:17:26","value":{"name":"value_2","nativeSrc":"1014:7:26","nodeType":"YulIdentifier","src":"1014:7:26"},"variableNames":[{"name":"value2","nativeSrc":"1004:6:26","nodeType":"YulIdentifier","src":"1004:6:26"}]},{"nativeSrc":"1030:16:26","nodeType":"YulVariableDeclaration","src":"1030:16:26","value":{"kind":"number","nativeSrc":"1045:1:26","nodeType":"YulLiteral","src":"1045:1:26","type":"","value":"0"},"variables":[{"name":"value_3","nativeSrc":"1034:7:26","nodeType":"YulTypedName","src":"1034:7:26","type":""}]},{"nativeSrc":"1055:43:26","nodeType":"YulAssignment","src":"1055:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1083:9:26","nodeType":"YulIdentifier","src":"1083:9:26"},{"kind":"number","nativeSrc":"1094:2:26","nodeType":"YulLiteral","src":"1094:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1079:3:26","nodeType":"YulIdentifier","src":"1079:3:26"},"nativeSrc":"1079:18:26","nodeType":"YulFunctionCall","src":"1079:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"1066:12:26","nodeType":"YulIdentifier","src":"1066:12:26"},"nativeSrc":"1066:32:26","nodeType":"YulFunctionCall","src":"1066:32:26"},"variableNames":[{"name":"value_3","nativeSrc":"1055:7:26","nodeType":"YulIdentifier","src":"1055:7:26"}]},{"nativeSrc":"1107:17:26","nodeType":"YulAssignment","src":"1107:17:26","value":{"name":"value_3","nativeSrc":"1117:7:26","nodeType":"YulIdentifier","src":"1117:7:26"},"variableNames":[{"name":"value3","nativeSrc":"1107:6:26","nodeType":"YulIdentifier","src":"1107:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:587:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:26","nodeType":"YulTypedName","src":"606:9:26","type":""},{"name":"dataEnd","nativeSrc":"617:7:26","nodeType":"YulTypedName","src":"617:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:26","nodeType":"YulTypedName","src":"629:6:26","type":""},{"name":"value1","nativeSrc":"637:6:26","nodeType":"YulTypedName","src":"637:6:26","type":""},{"name":"value2","nativeSrc":"645:6:26","nodeType":"YulTypedName","src":"645:6:26","type":""},{"name":"value3","nativeSrc":"653:6:26","nodeType":"YulTypedName","src":"653:6:26","type":""}],"src":"543:587:26"},{"body":{"nativeSrc":"1236:125:26","nodeType":"YulBlock","src":"1236:125:26","statements":[{"nativeSrc":"1246:26:26","nodeType":"YulAssignment","src":"1246:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"1258:9:26","nodeType":"YulIdentifier","src":"1258:9:26"},{"kind":"number","nativeSrc":"1269:2:26","nodeType":"YulLiteral","src":"1269:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1254:3:26","nodeType":"YulIdentifier","src":"1254:3:26"},"nativeSrc":"1254:18:26","nodeType":"YulFunctionCall","src":"1254:18:26"},"variableNames":[{"name":"tail","nativeSrc":"1246:4:26","nodeType":"YulIdentifier","src":"1246:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1288:9:26","nodeType":"YulIdentifier","src":"1288:9:26"},{"arguments":[{"name":"value0","nativeSrc":"1303:6:26","nodeType":"YulIdentifier","src":"1303:6:26"},{"kind":"number","nativeSrc":"1311:42:26","nodeType":"YulLiteral","src":"1311:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1299:3:26","nodeType":"YulIdentifier","src":"1299:3:26"},"nativeSrc":"1299:55:26","nodeType":"YulFunctionCall","src":"1299:55:26"}],"functionName":{"name":"mstore","nativeSrc":"1281:6:26","nodeType":"YulIdentifier","src":"1281:6:26"},"nativeSrc":"1281:74:26","nodeType":"YulFunctionCall","src":"1281:74:26"},"nativeSrc":"1281:74:26","nodeType":"YulExpressionStatement","src":"1281:74:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1135:226:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1205:9:26","nodeType":"YulTypedName","src":"1205:9:26","type":""},{"name":"value0","nativeSrc":"1216:6:26","nodeType":"YulTypedName","src":"1216:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1227:4:26","nodeType":"YulTypedName","src":"1227:4:26","type":""}],"src":"1135:226:26"},{"body":{"nativeSrc":"1493:125:26","nodeType":"YulBlock","src":"1493:125:26","statements":[{"nativeSrc":"1503:26:26","nodeType":"YulAssignment","src":"1503:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"1515:9:26","nodeType":"YulIdentifier","src":"1515:9:26"},{"kind":"number","nativeSrc":"1526:2:26","nodeType":"YulLiteral","src":"1526:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1511:3:26","nodeType":"YulIdentifier","src":"1511:3:26"},"nativeSrc":"1511:18:26","nodeType":"YulFunctionCall","src":"1511:18:26"},"variableNames":[{"name":"tail","nativeSrc":"1503:4:26","nodeType":"YulIdentifier","src":"1503:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1545:9:26","nodeType":"YulIdentifier","src":"1545:9:26"},{"arguments":[{"name":"value0","nativeSrc":"1560:6:26","nodeType":"YulIdentifier","src":"1560:6:26"},{"kind":"number","nativeSrc":"1568:42:26","nodeType":"YulLiteral","src":"1568:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1556:3:26","nodeType":"YulIdentifier","src":"1556:3:26"},"nativeSrc":"1556:55:26","nodeType":"YulFunctionCall","src":"1556:55:26"}],"functionName":{"name":"mstore","nativeSrc":"1538:6:26","nodeType":"YulIdentifier","src":"1538:6:26"},"nativeSrc":"1538:74:26","nodeType":"YulFunctionCall","src":"1538:74:26"},"nativeSrc":"1538:74:26","nodeType":"YulExpressionStatement","src":"1538:74:26"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed","nativeSrc":"1366:252:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1462:9:26","nodeType":"YulTypedName","src":"1462:9:26","type":""},{"name":"value0","nativeSrc":"1473:6:26","nodeType":"YulTypedName","src":"1473:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1484:4:26","nodeType":"YulTypedName","src":"1484:4:26","type":""}],"src":"1366:252:26"},{"body":{"nativeSrc":"1672:147:26","nodeType":"YulBlock","src":"1672:147:26","statements":[{"nativeSrc":"1682:29:26","nodeType":"YulAssignment","src":"1682:29:26","value":{"arguments":[{"name":"offset","nativeSrc":"1704:6:26","nodeType":"YulIdentifier","src":"1704:6:26"}],"functionName":{"name":"calldataload","nativeSrc":"1691:12:26","nodeType":"YulIdentifier","src":"1691:12:26"},"nativeSrc":"1691:20:26","nodeType":"YulFunctionCall","src":"1691:20:26"},"variableNames":[{"name":"value","nativeSrc":"1682:5:26","nodeType":"YulIdentifier","src":"1682:5:26"}]},{"body":{"nativeSrc":"1797:16:26","nodeType":"YulBlock","src":"1797:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1806:1:26","nodeType":"YulLiteral","src":"1806:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"1809:1:26","nodeType":"YulLiteral","src":"1809:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1799:6:26","nodeType":"YulIdentifier","src":"1799:6:26"},"nativeSrc":"1799:12:26","nodeType":"YulFunctionCall","src":"1799:12:26"},"nativeSrc":"1799:12:26","nodeType":"YulExpressionStatement","src":"1799:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1733:5:26","nodeType":"YulIdentifier","src":"1733:5:26"},{"arguments":[{"name":"value","nativeSrc":"1744:5:26","nodeType":"YulIdentifier","src":"1744:5:26"},{"kind":"number","nativeSrc":"1751:42:26","nodeType":"YulLiteral","src":"1751:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1740:3:26","nodeType":"YulIdentifier","src":"1740:3:26"},"nativeSrc":"1740:54:26","nodeType":"YulFunctionCall","src":"1740:54:26"}],"functionName":{"name":"eq","nativeSrc":"1730:2:26","nodeType":"YulIdentifier","src":"1730:2:26"},"nativeSrc":"1730:65:26","nodeType":"YulFunctionCall","src":"1730:65:26"}],"functionName":{"name":"iszero","nativeSrc":"1723:6:26","nodeType":"YulIdentifier","src":"1723:6:26"},"nativeSrc":"1723:73:26","nodeType":"YulFunctionCall","src":"1723:73:26"},"nativeSrc":"1720:93:26","nodeType":"YulIf","src":"1720:93:26"}]},"name":"abi_decode_address","nativeSrc":"1623:196:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1651:6:26","nodeType":"YulTypedName","src":"1651:6:26","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1662:5:26","nodeType":"YulTypedName","src":"1662:5:26","type":""}],"src":"1623:196:26"},{"body":{"nativeSrc":"1980:763:26","nodeType":"YulBlock","src":"1980:763:26","statements":[{"body":{"nativeSrc":"2027:16:26","nodeType":"YulBlock","src":"2027:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2036:1:26","nodeType":"YulLiteral","src":"2036:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2039:1:26","nodeType":"YulLiteral","src":"2039:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2029:6:26","nodeType":"YulIdentifier","src":"2029:6:26"},"nativeSrc":"2029:12:26","nodeType":"YulFunctionCall","src":"2029:12:26"},"nativeSrc":"2029:12:26","nodeType":"YulExpressionStatement","src":"2029:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2001:7:26","nodeType":"YulIdentifier","src":"2001:7:26"},{"name":"headStart","nativeSrc":"2010:9:26","nodeType":"YulIdentifier","src":"2010:9:26"}],"functionName":{"name":"sub","nativeSrc":"1997:3:26","nodeType":"YulIdentifier","src":"1997:3:26"},"nativeSrc":"1997:23:26","nodeType":"YulFunctionCall","src":"1997:23:26"},{"kind":"number","nativeSrc":"2022:3:26","nodeType":"YulLiteral","src":"2022:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1993:3:26","nodeType":"YulIdentifier","src":"1993:3:26"},"nativeSrc":"1993:33:26","nodeType":"YulFunctionCall","src":"1993:33:26"},"nativeSrc":"1990:53:26","nodeType":"YulIf","src":"1990:53:26"},{"nativeSrc":"2052:14:26","nodeType":"YulVariableDeclaration","src":"2052:14:26","value":{"kind":"number","nativeSrc":"2065:1:26","nodeType":"YulLiteral","src":"2065:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2056:5:26","nodeType":"YulTypedName","src":"2056:5:26","type":""}]},{"nativeSrc":"2075:32:26","nodeType":"YulAssignment","src":"2075:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"2097:9:26","nodeType":"YulIdentifier","src":"2097:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"2084:12:26","nodeType":"YulIdentifier","src":"2084:12:26"},"nativeSrc":"2084:23:26","nodeType":"YulFunctionCall","src":"2084:23:26"},"variableNames":[{"name":"value","nativeSrc":"2075:5:26","nodeType":"YulIdentifier","src":"2075:5:26"}]},{"nativeSrc":"2116:15:26","nodeType":"YulAssignment","src":"2116:15:26","value":{"name":"value","nativeSrc":"2126:5:26","nodeType":"YulIdentifier","src":"2126:5:26"},"variableNames":[{"name":"value0","nativeSrc":"2116:6:26","nodeType":"YulIdentifier","src":"2116:6:26"}]},{"nativeSrc":"2140:48:26","nodeType":"YulAssignment","src":"2140:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2173:9:26","nodeType":"YulIdentifier","src":"2173:9:26"},{"kind":"number","nativeSrc":"2184:2:26","nodeType":"YulLiteral","src":"2184:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2169:3:26","nodeType":"YulIdentifier","src":"2169:3:26"},"nativeSrc":"2169:18:26","nodeType":"YulFunctionCall","src":"2169:18:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2150:18:26","nodeType":"YulIdentifier","src":"2150:18:26"},"nativeSrc":"2150:38:26","nodeType":"YulFunctionCall","src":"2150:38:26"},"variableNames":[{"name":"value1","nativeSrc":"2140:6:26","nodeType":"YulIdentifier","src":"2140:6:26"}]},{"nativeSrc":"2197:16:26","nodeType":"YulVariableDeclaration","src":"2197:16:26","value":{"kind":"number","nativeSrc":"2212:1:26","nodeType":"YulLiteral","src":"2212:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"2201:7:26","nodeType":"YulTypedName","src":"2201:7:26","type":""}]},{"nativeSrc":"2222:43:26","nodeType":"YulAssignment","src":"2222:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2250:9:26","nodeType":"YulIdentifier","src":"2250:9:26"},{"kind":"number","nativeSrc":"2261:2:26","nodeType":"YulLiteral","src":"2261:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2246:3:26","nodeType":"YulIdentifier","src":"2246:3:26"},"nativeSrc":"2246:18:26","nodeType":"YulFunctionCall","src":"2246:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"2233:12:26","nodeType":"YulIdentifier","src":"2233:12:26"},"nativeSrc":"2233:32:26","nodeType":"YulFunctionCall","src":"2233:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"2222:7:26","nodeType":"YulIdentifier","src":"2222:7:26"}]},{"nativeSrc":"2274:17:26","nodeType":"YulAssignment","src":"2274:17:26","value":{"name":"value_1","nativeSrc":"2284:7:26","nodeType":"YulIdentifier","src":"2284:7:26"},"variableNames":[{"name":"value2","nativeSrc":"2274:6:26","nodeType":"YulIdentifier","src":"2274:6:26"}]},{"nativeSrc":"2300:46:26","nodeType":"YulVariableDeclaration","src":"2300:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2331:9:26","nodeType":"YulIdentifier","src":"2331:9:26"},{"kind":"number","nativeSrc":"2342:2:26","nodeType":"YulLiteral","src":"2342:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2327:3:26","nodeType":"YulIdentifier","src":"2327:3:26"},"nativeSrc":"2327:18:26","nodeType":"YulFunctionCall","src":"2327:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"2314:12:26","nodeType":"YulIdentifier","src":"2314:12:26"},"nativeSrc":"2314:32:26","nodeType":"YulFunctionCall","src":"2314:32:26"},"variables":[{"name":"offset","nativeSrc":"2304:6:26","nodeType":"YulTypedName","src":"2304:6:26","type":""}]},{"body":{"nativeSrc":"2389:16:26","nodeType":"YulBlock","src":"2389:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2398:1:26","nodeType":"YulLiteral","src":"2398:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2401:1:26","nodeType":"YulLiteral","src":"2401:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2391:6:26","nodeType":"YulIdentifier","src":"2391:6:26"},"nativeSrc":"2391:12:26","nodeType":"YulFunctionCall","src":"2391:12:26"},"nativeSrc":"2391:12:26","nodeType":"YulExpressionStatement","src":"2391:12:26"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2361:6:26","nodeType":"YulIdentifier","src":"2361:6:26"},{"kind":"number","nativeSrc":"2369:18:26","nodeType":"YulLiteral","src":"2369:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2358:2:26","nodeType":"YulIdentifier","src":"2358:2:26"},"nativeSrc":"2358:30:26","nodeType":"YulFunctionCall","src":"2358:30:26"},"nativeSrc":"2355:50:26","nodeType":"YulIf","src":"2355:50:26"},{"nativeSrc":"2414:32:26","nodeType":"YulVariableDeclaration","src":"2414:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"2428:9:26","nodeType":"YulIdentifier","src":"2428:9:26"},{"name":"offset","nativeSrc":"2439:6:26","nodeType":"YulIdentifier","src":"2439:6:26"}],"functionName":{"name":"add","nativeSrc":"2424:3:26","nodeType":"YulIdentifier","src":"2424:3:26"},"nativeSrc":"2424:22:26","nodeType":"YulFunctionCall","src":"2424:22:26"},"variables":[{"name":"_1","nativeSrc":"2418:2:26","nodeType":"YulTypedName","src":"2418:2:26","type":""}]},{"body":{"nativeSrc":"2494:16:26","nodeType":"YulBlock","src":"2494:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2503:1:26","nodeType":"YulLiteral","src":"2503:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2506:1:26","nodeType":"YulLiteral","src":"2506:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2496:6:26","nodeType":"YulIdentifier","src":"2496:6:26"},"nativeSrc":"2496:12:26","nodeType":"YulFunctionCall","src":"2496:12:26"},"nativeSrc":"2496:12:26","nodeType":"YulExpressionStatement","src":"2496:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"2473:2:26","nodeType":"YulIdentifier","src":"2473:2:26"},{"kind":"number","nativeSrc":"2477:4:26","nodeType":"YulLiteral","src":"2477:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2469:3:26","nodeType":"YulIdentifier","src":"2469:3:26"},"nativeSrc":"2469:13:26","nodeType":"YulFunctionCall","src":"2469:13:26"},{"name":"dataEnd","nativeSrc":"2484:7:26","nodeType":"YulIdentifier","src":"2484:7:26"}],"functionName":{"name":"slt","nativeSrc":"2465:3:26","nodeType":"YulIdentifier","src":"2465:3:26"},"nativeSrc":"2465:27:26","nodeType":"YulFunctionCall","src":"2465:27:26"}],"functionName":{"name":"iszero","nativeSrc":"2458:6:26","nodeType":"YulIdentifier","src":"2458:6:26"},"nativeSrc":"2458:35:26","nodeType":"YulFunctionCall","src":"2458:35:26"},"nativeSrc":"2455:55:26","nodeType":"YulIf","src":"2455:55:26"},{"nativeSrc":"2519:30:26","nodeType":"YulVariableDeclaration","src":"2519:30:26","value":{"arguments":[{"name":"_1","nativeSrc":"2546:2:26","nodeType":"YulIdentifier","src":"2546:2:26"}],"functionName":{"name":"calldataload","nativeSrc":"2533:12:26","nodeType":"YulIdentifier","src":"2533:12:26"},"nativeSrc":"2533:16:26","nodeType":"YulFunctionCall","src":"2533:16:26"},"variables":[{"name":"length","nativeSrc":"2523:6:26","nodeType":"YulTypedName","src":"2523:6:26","type":""}]},{"body":{"nativeSrc":"2592:16:26","nodeType":"YulBlock","src":"2592:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2601:1:26","nodeType":"YulLiteral","src":"2601:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2604:1:26","nodeType":"YulLiteral","src":"2604:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2594:6:26","nodeType":"YulIdentifier","src":"2594:6:26"},"nativeSrc":"2594:12:26","nodeType":"YulFunctionCall","src":"2594:12:26"},"nativeSrc":"2594:12:26","nodeType":"YulExpressionStatement","src":"2594:12:26"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2564:6:26","nodeType":"YulIdentifier","src":"2564:6:26"},{"kind":"number","nativeSrc":"2572:18:26","nodeType":"YulLiteral","src":"2572:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2561:2:26","nodeType":"YulIdentifier","src":"2561:2:26"},"nativeSrc":"2561:30:26","nodeType":"YulFunctionCall","src":"2561:30:26"},"nativeSrc":"2558:50:26","nodeType":"YulIf","src":"2558:50:26"},{"body":{"nativeSrc":"2666:16:26","nodeType":"YulBlock","src":"2666:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2675:1:26","nodeType":"YulLiteral","src":"2675:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2678:1:26","nodeType":"YulLiteral","src":"2678:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2668:6:26","nodeType":"YulIdentifier","src":"2668:6:26"},"nativeSrc":"2668:12:26","nodeType":"YulFunctionCall","src":"2668:12:26"},"nativeSrc":"2668:12:26","nodeType":"YulExpressionStatement","src":"2668:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"2631:2:26","nodeType":"YulIdentifier","src":"2631:2:26"},{"arguments":[{"kind":"number","nativeSrc":"2639:1:26","nodeType":"YulLiteral","src":"2639:1:26","type":"","value":"5"},{"name":"length","nativeSrc":"2642:6:26","nodeType":"YulIdentifier","src":"2642:6:26"}],"functionName":{"name":"shl","nativeSrc":"2635:3:26","nodeType":"YulIdentifier","src":"2635:3:26"},"nativeSrc":"2635:14:26","nodeType":"YulFunctionCall","src":"2635:14:26"}],"functionName":{"name":"add","nativeSrc":"2627:3:26","nodeType":"YulIdentifier","src":"2627:3:26"},"nativeSrc":"2627:23:26","nodeType":"YulFunctionCall","src":"2627:23:26"},{"kind":"number","nativeSrc":"2652:2:26","nodeType":"YulLiteral","src":"2652:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2623:3:26","nodeType":"YulIdentifier","src":"2623:3:26"},"nativeSrc":"2623:32:26","nodeType":"YulFunctionCall","src":"2623:32:26"},{"name":"dataEnd","nativeSrc":"2657:7:26","nodeType":"YulIdentifier","src":"2657:7:26"}],"functionName":{"name":"gt","nativeSrc":"2620:2:26","nodeType":"YulIdentifier","src":"2620:2:26"},"nativeSrc":"2620:45:26","nodeType":"YulFunctionCall","src":"2620:45:26"},"nativeSrc":"2617:65:26","nodeType":"YulIf","src":"2617:65:26"},{"nativeSrc":"2691:21:26","nodeType":"YulAssignment","src":"2691:21:26","value":{"arguments":[{"name":"_1","nativeSrc":"2705:2:26","nodeType":"YulIdentifier","src":"2705:2:26"},{"kind":"number","nativeSrc":"2709:2:26","nodeType":"YulLiteral","src":"2709:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2701:3:26","nodeType":"YulIdentifier","src":"2701:3:26"},"nativeSrc":"2701:11:26","nodeType":"YulFunctionCall","src":"2701:11:26"},"variableNames":[{"name":"value3","nativeSrc":"2691:6:26","nodeType":"YulIdentifier","src":"2691:6:26"}]},{"nativeSrc":"2721:16:26","nodeType":"YulAssignment","src":"2721:16:26","value":{"name":"length","nativeSrc":"2731:6:26","nodeType":"YulIdentifier","src":"2731:6:26"},"variableNames":[{"name":"value4","nativeSrc":"2721:6:26","nodeType":"YulIdentifier","src":"2721:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"1824:919:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1914:9:26","nodeType":"YulTypedName","src":"1914:9:26","type":""},{"name":"dataEnd","nativeSrc":"1925:7:26","nodeType":"YulTypedName","src":"1925:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1937:6:26","nodeType":"YulTypedName","src":"1937:6:26","type":""},{"name":"value1","nativeSrc":"1945:6:26","nodeType":"YulTypedName","src":"1945:6:26","type":""},{"name":"value2","nativeSrc":"1953:6:26","nodeType":"YulTypedName","src":"1953:6:26","type":""},{"name":"value3","nativeSrc":"1961:6:26","nodeType":"YulTypedName","src":"1961:6:26","type":""},{"name":"value4","nativeSrc":"1969:6:26","nodeType":"YulTypedName","src":"1969:6:26","type":""}],"src":"1824:919:26"},{"body":{"nativeSrc":"2818:116:26","nodeType":"YulBlock","src":"2818:116:26","statements":[{"body":{"nativeSrc":"2864:16:26","nodeType":"YulBlock","src":"2864:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2873:1:26","nodeType":"YulLiteral","src":"2873:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2876:1:26","nodeType":"YulLiteral","src":"2876:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2866:6:26","nodeType":"YulIdentifier","src":"2866:6:26"},"nativeSrc":"2866:12:26","nodeType":"YulFunctionCall","src":"2866:12:26"},"nativeSrc":"2866:12:26","nodeType":"YulExpressionStatement","src":"2866:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2839:7:26","nodeType":"YulIdentifier","src":"2839:7:26"},{"name":"headStart","nativeSrc":"2848:9:26","nodeType":"YulIdentifier","src":"2848:9:26"}],"functionName":{"name":"sub","nativeSrc":"2835:3:26","nodeType":"YulIdentifier","src":"2835:3:26"},"nativeSrc":"2835:23:26","nodeType":"YulFunctionCall","src":"2835:23:26"},{"kind":"number","nativeSrc":"2860:2:26","nodeType":"YulLiteral","src":"2860:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2831:3:26","nodeType":"YulIdentifier","src":"2831:3:26"},"nativeSrc":"2831:32:26","nodeType":"YulFunctionCall","src":"2831:32:26"},"nativeSrc":"2828:52:26","nodeType":"YulIf","src":"2828:52:26"},{"nativeSrc":"2889:39:26","nodeType":"YulAssignment","src":"2889:39:26","value":{"arguments":[{"name":"headStart","nativeSrc":"2918:9:26","nodeType":"YulIdentifier","src":"2918:9:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2899:18:26","nodeType":"YulIdentifier","src":"2899:18:26"},"nativeSrc":"2899:29:26","nodeType":"YulFunctionCall","src":"2899:29:26"},"variableNames":[{"name":"value0","nativeSrc":"2889:6:26","nodeType":"YulIdentifier","src":"2889:6:26"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2748:186:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2784:9:26","nodeType":"YulTypedName","src":"2784:9:26","type":""},{"name":"dataEnd","nativeSrc":"2795:7:26","nodeType":"YulTypedName","src":"2795:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2807:6:26","nodeType":"YulTypedName","src":"2807:6:26","type":""}],"src":"2748:186:26"},{"body":{"nativeSrc":"3009:156:26","nodeType":"YulBlock","src":"3009:156:26","statements":[{"body":{"nativeSrc":"3055:16:26","nodeType":"YulBlock","src":"3055:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3064:1:26","nodeType":"YulLiteral","src":"3064:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3067:1:26","nodeType":"YulLiteral","src":"3067:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3057:6:26","nodeType":"YulIdentifier","src":"3057:6:26"},"nativeSrc":"3057:12:26","nodeType":"YulFunctionCall","src":"3057:12:26"},"nativeSrc":"3057:12:26","nodeType":"YulExpressionStatement","src":"3057:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3030:7:26","nodeType":"YulIdentifier","src":"3030:7:26"},{"name":"headStart","nativeSrc":"3039:9:26","nodeType":"YulIdentifier","src":"3039:9:26"}],"functionName":{"name":"sub","nativeSrc":"3026:3:26","nodeType":"YulIdentifier","src":"3026:3:26"},"nativeSrc":"3026:23:26","nodeType":"YulFunctionCall","src":"3026:23:26"},{"kind":"number","nativeSrc":"3051:2:26","nodeType":"YulLiteral","src":"3051:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3022:3:26","nodeType":"YulIdentifier","src":"3022:3:26"},"nativeSrc":"3022:32:26","nodeType":"YulFunctionCall","src":"3022:32:26"},"nativeSrc":"3019:52:26","nodeType":"YulIf","src":"3019:52:26"},{"nativeSrc":"3080:14:26","nodeType":"YulVariableDeclaration","src":"3080:14:26","value":{"kind":"number","nativeSrc":"3093:1:26","nodeType":"YulLiteral","src":"3093:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3084:5:26","nodeType":"YulTypedName","src":"3084:5:26","type":""}]},{"nativeSrc":"3103:32:26","nodeType":"YulAssignment","src":"3103:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3125:9:26","nodeType":"YulIdentifier","src":"3125:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"3112:12:26","nodeType":"YulIdentifier","src":"3112:12:26"},"nativeSrc":"3112:23:26","nodeType":"YulFunctionCall","src":"3112:23:26"},"variableNames":[{"name":"value","nativeSrc":"3103:5:26","nodeType":"YulIdentifier","src":"3103:5:26"}]},{"nativeSrc":"3144:15:26","nodeType":"YulAssignment","src":"3144:15:26","value":{"name":"value","nativeSrc":"3154:5:26","nodeType":"YulIdentifier","src":"3154:5:26"},"variableNames":[{"name":"value0","nativeSrc":"3144:6:26","nodeType":"YulIdentifier","src":"3144:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2939:226:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2975:9:26","nodeType":"YulTypedName","src":"2975:9:26","type":""},{"name":"dataEnd","nativeSrc":"2986:7:26","nodeType":"YulTypedName","src":"2986:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2998:6:26","nodeType":"YulTypedName","src":"2998:6:26","type":""}],"src":"2939:226:26"},{"body":{"nativeSrc":"3274:316:26","nodeType":"YulBlock","src":"3274:316:26","statements":[{"body":{"nativeSrc":"3320:16:26","nodeType":"YulBlock","src":"3320:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3329:1:26","nodeType":"YulLiteral","src":"3329:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3332:1:26","nodeType":"YulLiteral","src":"3332:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3322:6:26","nodeType":"YulIdentifier","src":"3322:6:26"},"nativeSrc":"3322:12:26","nodeType":"YulFunctionCall","src":"3322:12:26"},"nativeSrc":"3322:12:26","nodeType":"YulExpressionStatement","src":"3322:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3295:7:26","nodeType":"YulIdentifier","src":"3295:7:26"},{"name":"headStart","nativeSrc":"3304:9:26","nodeType":"YulIdentifier","src":"3304:9:26"}],"functionName":{"name":"sub","nativeSrc":"3291:3:26","nodeType":"YulIdentifier","src":"3291:3:26"},"nativeSrc":"3291:23:26","nodeType":"YulFunctionCall","src":"3291:23:26"},{"kind":"number","nativeSrc":"3316:2:26","nodeType":"YulLiteral","src":"3316:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3287:3:26","nodeType":"YulIdentifier","src":"3287:3:26"},"nativeSrc":"3287:32:26","nodeType":"YulFunctionCall","src":"3287:32:26"},"nativeSrc":"3284:52:26","nodeType":"YulIf","src":"3284:52:26"},{"nativeSrc":"3345:14:26","nodeType":"YulVariableDeclaration","src":"3345:14:26","value":{"kind":"number","nativeSrc":"3358:1:26","nodeType":"YulLiteral","src":"3358:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3349:5:26","nodeType":"YulTypedName","src":"3349:5:26","type":""}]},{"nativeSrc":"3368:32:26","nodeType":"YulAssignment","src":"3368:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3390:9:26","nodeType":"YulIdentifier","src":"3390:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"3377:12:26","nodeType":"YulIdentifier","src":"3377:12:26"},"nativeSrc":"3377:23:26","nodeType":"YulFunctionCall","src":"3377:23:26"},"variableNames":[{"name":"value","nativeSrc":"3368:5:26","nodeType":"YulIdentifier","src":"3368:5:26"}]},{"nativeSrc":"3409:15:26","nodeType":"YulAssignment","src":"3409:15:26","value":{"name":"value","nativeSrc":"3419:5:26","nodeType":"YulIdentifier","src":"3419:5:26"},"variableNames":[{"name":"value0","nativeSrc":"3409:6:26","nodeType":"YulIdentifier","src":"3409:6:26"}]},{"nativeSrc":"3433:48:26","nodeType":"YulAssignment","src":"3433:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3466:9:26","nodeType":"YulIdentifier","src":"3466:9:26"},{"kind":"number","nativeSrc":"3477:2:26","nodeType":"YulLiteral","src":"3477:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3462:3:26","nodeType":"YulIdentifier","src":"3462:3:26"},"nativeSrc":"3462:18:26","nodeType":"YulFunctionCall","src":"3462:18:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3443:18:26","nodeType":"YulIdentifier","src":"3443:18:26"},"nativeSrc":"3443:38:26","nodeType":"YulFunctionCall","src":"3443:38:26"},"variableNames":[{"name":"value1","nativeSrc":"3433:6:26","nodeType":"YulIdentifier","src":"3433:6:26"}]},{"nativeSrc":"3490:16:26","nodeType":"YulVariableDeclaration","src":"3490:16:26","value":{"kind":"number","nativeSrc":"3505:1:26","nodeType":"YulLiteral","src":"3505:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"3494:7:26","nodeType":"YulTypedName","src":"3494:7:26","type":""}]},{"nativeSrc":"3515:43:26","nodeType":"YulAssignment","src":"3515:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3543:9:26","nodeType":"YulIdentifier","src":"3543:9:26"},{"kind":"number","nativeSrc":"3554:2:26","nodeType":"YulLiteral","src":"3554:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3539:3:26","nodeType":"YulIdentifier","src":"3539:3:26"},"nativeSrc":"3539:18:26","nodeType":"YulFunctionCall","src":"3539:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"3526:12:26","nodeType":"YulIdentifier","src":"3526:12:26"},"nativeSrc":"3526:32:26","nodeType":"YulFunctionCall","src":"3526:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"3515:7:26","nodeType":"YulIdentifier","src":"3515:7:26"}]},{"nativeSrc":"3567:17:26","nodeType":"YulAssignment","src":"3567:17:26","value":{"name":"value_1","nativeSrc":"3577:7:26","nodeType":"YulIdentifier","src":"3577:7:26"},"variableNames":[{"name":"value2","nativeSrc":"3567:6:26","nodeType":"YulIdentifier","src":"3567:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256","nativeSrc":"3170:420:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3224:9:26","nodeType":"YulTypedName","src":"3224:9:26","type":""},{"name":"dataEnd","nativeSrc":"3235:7:26","nodeType":"YulTypedName","src":"3235:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3247:6:26","nodeType":"YulTypedName","src":"3247:6:26","type":""},{"name":"value1","nativeSrc":"3255:6:26","nodeType":"YulTypedName","src":"3255:6:26","type":""},{"name":"value2","nativeSrc":"3263:6:26","nodeType":"YulTypedName","src":"3263:6:26","type":""}],"src":"3170:420:26"},{"body":{"nativeSrc":"3627:152:26","nodeType":"YulBlock","src":"3627:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3644:1:26","nodeType":"YulLiteral","src":"3644:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3647:77:26","nodeType":"YulLiteral","src":"3647:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3637:6:26","nodeType":"YulIdentifier","src":"3637:6:26"},"nativeSrc":"3637:88:26","nodeType":"YulFunctionCall","src":"3637:88:26"},"nativeSrc":"3637:88:26","nodeType":"YulExpressionStatement","src":"3637:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3741:1:26","nodeType":"YulLiteral","src":"3741:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"3744:4:26","nodeType":"YulLiteral","src":"3744:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"3734:6:26","nodeType":"YulIdentifier","src":"3734:6:26"},"nativeSrc":"3734:15:26","nodeType":"YulFunctionCall","src":"3734:15:26"},"nativeSrc":"3734:15:26","nodeType":"YulExpressionStatement","src":"3734:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3765:1:26","nodeType":"YulLiteral","src":"3765:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3768:4:26","nodeType":"YulLiteral","src":"3768:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"3758:6:26","nodeType":"YulIdentifier","src":"3758:6:26"},"nativeSrc":"3758:15:26","nodeType":"YulFunctionCall","src":"3758:15:26"},"nativeSrc":"3758:15:26","nodeType":"YulExpressionStatement","src":"3758:15:26"}]},"name":"panic_error_0x21","nativeSrc":"3595:184:26","nodeType":"YulFunctionDefinition","src":"3595:184:26"},{"body":{"nativeSrc":"3898:286:26","nodeType":"YulBlock","src":"3898:286:26","statements":[{"nativeSrc":"3908:26:26","nodeType":"YulAssignment","src":"3908:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3920:9:26","nodeType":"YulIdentifier","src":"3920:9:26"},{"kind":"number","nativeSrc":"3931:2:26","nodeType":"YulLiteral","src":"3931:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3916:3:26","nodeType":"YulIdentifier","src":"3916:3:26"},"nativeSrc":"3916:18:26","nodeType":"YulFunctionCall","src":"3916:18:26"},"variableNames":[{"name":"tail","nativeSrc":"3908:4:26","nodeType":"YulIdentifier","src":"3908:4:26"}]},{"body":{"nativeSrc":"3976:168:26","nodeType":"YulBlock","src":"3976:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3997:1:26","nodeType":"YulLiteral","src":"3997:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4000:77:26","nodeType":"YulLiteral","src":"4000:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"3990:6:26","nodeType":"YulIdentifier","src":"3990:6:26"},"nativeSrc":"3990:88:26","nodeType":"YulFunctionCall","src":"3990:88:26"},"nativeSrc":"3990:88:26","nodeType":"YulExpressionStatement","src":"3990:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4098:1:26","nodeType":"YulLiteral","src":"4098:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"4101:4:26","nodeType":"YulLiteral","src":"4101:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"4091:6:26","nodeType":"YulIdentifier","src":"4091:6:26"},"nativeSrc":"4091:15:26","nodeType":"YulFunctionCall","src":"4091:15:26"},"nativeSrc":"4091:15:26","nodeType":"YulExpressionStatement","src":"4091:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4126:1:26","nodeType":"YulLiteral","src":"4126:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4129:4:26","nodeType":"YulLiteral","src":"4129:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4119:6:26","nodeType":"YulIdentifier","src":"4119:6:26"},"nativeSrc":"4119:15:26","nodeType":"YulFunctionCall","src":"4119:15:26"},"nativeSrc":"4119:15:26","nodeType":"YulExpressionStatement","src":"4119:15:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"3956:6:26","nodeType":"YulIdentifier","src":"3956:6:26"},{"kind":"number","nativeSrc":"3964:1:26","nodeType":"YulLiteral","src":"3964:1:26","type":"","value":"4"}],"functionName":{"name":"lt","nativeSrc":"3953:2:26","nodeType":"YulIdentifier","src":"3953:2:26"},"nativeSrc":"3953:13:26","nodeType":"YulFunctionCall","src":"3953:13:26"}],"functionName":{"name":"iszero","nativeSrc":"3946:6:26","nodeType":"YulIdentifier","src":"3946:6:26"},"nativeSrc":"3946:21:26","nodeType":"YulFunctionCall","src":"3946:21:26"},"nativeSrc":"3943:201:26","nodeType":"YulIf","src":"3943:201:26"},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4160:9:26","nodeType":"YulIdentifier","src":"4160:9:26"},{"name":"value0","nativeSrc":"4171:6:26","nodeType":"YulIdentifier","src":"4171:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4153:6:26","nodeType":"YulIdentifier","src":"4153:6:26"},"nativeSrc":"4153:25:26","nodeType":"YulFunctionCall","src":"4153:25:26"},"nativeSrc":"4153:25:26","nodeType":"YulExpressionStatement","src":"4153:25:26"}]},"name":"abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed","nativeSrc":"3784:400:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3867:9:26","nodeType":"YulTypedName","src":"3867:9:26","type":""},{"name":"value0","nativeSrc":"3878:6:26","nodeType":"YulTypedName","src":"3878:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3889:4:26","nodeType":"YulTypedName","src":"3889:4:26","type":""}],"src":"3784:400:26"},{"body":{"nativeSrc":"4346:162:26","nodeType":"YulBlock","src":"4346:162:26","statements":[{"nativeSrc":"4356:26:26","nodeType":"YulAssignment","src":"4356:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"4368:9:26","nodeType":"YulIdentifier","src":"4368:9:26"},{"kind":"number","nativeSrc":"4379:2:26","nodeType":"YulLiteral","src":"4379:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4364:3:26","nodeType":"YulIdentifier","src":"4364:3:26"},"nativeSrc":"4364:18:26","nodeType":"YulFunctionCall","src":"4364:18:26"},"variableNames":[{"name":"tail","nativeSrc":"4356:4:26","nodeType":"YulIdentifier","src":"4356:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4398:9:26","nodeType":"YulIdentifier","src":"4398:9:26"},{"name":"value0","nativeSrc":"4409:6:26","nodeType":"YulIdentifier","src":"4409:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4391:6:26","nodeType":"YulIdentifier","src":"4391:6:26"},"nativeSrc":"4391:25:26","nodeType":"YulFunctionCall","src":"4391:25:26"},"nativeSrc":"4391:25:26","nodeType":"YulExpressionStatement","src":"4391:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4436:9:26","nodeType":"YulIdentifier","src":"4436:9:26"},{"kind":"number","nativeSrc":"4447:2:26","nodeType":"YulLiteral","src":"4447:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4432:3:26","nodeType":"YulIdentifier","src":"4432:3:26"},"nativeSrc":"4432:18:26","nodeType":"YulFunctionCall","src":"4432:18:26"},{"name":"value1","nativeSrc":"4452:6:26","nodeType":"YulIdentifier","src":"4452:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4425:6:26","nodeType":"YulIdentifier","src":"4425:6:26"},"nativeSrc":"4425:34:26","nodeType":"YulFunctionCall","src":"4425:34:26"},"nativeSrc":"4425:34:26","nodeType":"YulExpressionStatement","src":"4425:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4479:9:26","nodeType":"YulIdentifier","src":"4479:9:26"},{"kind":"number","nativeSrc":"4490:2:26","nodeType":"YulLiteral","src":"4490:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4475:3:26","nodeType":"YulIdentifier","src":"4475:3:26"},"nativeSrc":"4475:18:26","nodeType":"YulFunctionCall","src":"4475:18:26"},{"name":"value2","nativeSrc":"4495:6:26","nodeType":"YulIdentifier","src":"4495:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4468:6:26","nodeType":"YulIdentifier","src":"4468:6:26"},"nativeSrc":"4468:34:26","nodeType":"YulFunctionCall","src":"4468:34:26"},"nativeSrc":"4468:34:26","nodeType":"YulExpressionStatement","src":"4468:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4189:319:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4299:9:26","nodeType":"YulTypedName","src":"4299:9:26","type":""},{"name":"value2","nativeSrc":"4310:6:26","nodeType":"YulTypedName","src":"4310:6:26","type":""},{"name":"value1","nativeSrc":"4318:6:26","nodeType":"YulTypedName","src":"4318:6:26","type":""},{"name":"value0","nativeSrc":"4326:6:26","nodeType":"YulTypedName","src":"4326:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4337:4:26","nodeType":"YulTypedName","src":"4337:4:26","type":""}],"src":"4189:319:26"},{"body":{"nativeSrc":"4641:125:26","nodeType":"YulBlock","src":"4641:125:26","statements":[{"nativeSrc":"4651:26:26","nodeType":"YulAssignment","src":"4651:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"4663:9:26","nodeType":"YulIdentifier","src":"4663:9:26"},{"kind":"number","nativeSrc":"4674:2:26","nodeType":"YulLiteral","src":"4674:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4659:3:26","nodeType":"YulIdentifier","src":"4659:3:26"},"nativeSrc":"4659:18:26","nodeType":"YulFunctionCall","src":"4659:18:26"},"variableNames":[{"name":"tail","nativeSrc":"4651:4:26","nodeType":"YulIdentifier","src":"4651:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4693:9:26","nodeType":"YulIdentifier","src":"4693:9:26"},{"arguments":[{"name":"value0","nativeSrc":"4708:6:26","nodeType":"YulIdentifier","src":"4708:6:26"},{"kind":"number","nativeSrc":"4716:42:26","nodeType":"YulLiteral","src":"4716:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4704:3:26","nodeType":"YulIdentifier","src":"4704:3:26"},"nativeSrc":"4704:55:26","nodeType":"YulFunctionCall","src":"4704:55:26"}],"functionName":{"name":"mstore","nativeSrc":"4686:6:26","nodeType":"YulIdentifier","src":"4686:6:26"},"nativeSrc":"4686:74:26","nodeType":"YulFunctionCall","src":"4686:74:26"},"nativeSrc":"4686:74:26","nodeType":"YulExpressionStatement","src":"4686:74:26"}]},"name":"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed","nativeSrc":"4513:253:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4610:9:26","nodeType":"YulTypedName","src":"4610:9:26","type":""},{"name":"value0","nativeSrc":"4621:6:26","nodeType":"YulTypedName","src":"4621:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4632:4:26","nodeType":"YulTypedName","src":"4632:4:26","type":""}],"src":"4513:253:26"},{"body":{"nativeSrc":"4928:162:26","nodeType":"YulBlock","src":"4928:162:26","statements":[{"nativeSrc":"4938:26:26","nodeType":"YulAssignment","src":"4938:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"4950:9:26","nodeType":"YulIdentifier","src":"4950:9:26"},{"kind":"number","nativeSrc":"4961:2:26","nodeType":"YulLiteral","src":"4961:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4946:3:26","nodeType":"YulIdentifier","src":"4946:3:26"},"nativeSrc":"4946:18:26","nodeType":"YulFunctionCall","src":"4946:18:26"},"variableNames":[{"name":"tail","nativeSrc":"4938:4:26","nodeType":"YulIdentifier","src":"4938:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4980:9:26","nodeType":"YulIdentifier","src":"4980:9:26"},{"name":"value0","nativeSrc":"4991:6:26","nodeType":"YulIdentifier","src":"4991:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4973:6:26","nodeType":"YulIdentifier","src":"4973:6:26"},"nativeSrc":"4973:25:26","nodeType":"YulFunctionCall","src":"4973:25:26"},"nativeSrc":"4973:25:26","nodeType":"YulExpressionStatement","src":"4973:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5018:9:26","nodeType":"YulIdentifier","src":"5018:9:26"},{"kind":"number","nativeSrc":"5029:2:26","nodeType":"YulLiteral","src":"5029:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5014:3:26","nodeType":"YulIdentifier","src":"5014:3:26"},"nativeSrc":"5014:18:26","nodeType":"YulFunctionCall","src":"5014:18:26"},{"name":"value1","nativeSrc":"5034:6:26","nodeType":"YulIdentifier","src":"5034:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5007:6:26","nodeType":"YulIdentifier","src":"5007:6:26"},"nativeSrc":"5007:34:26","nodeType":"YulFunctionCall","src":"5007:34:26"},"nativeSrc":"5007:34:26","nodeType":"YulExpressionStatement","src":"5007:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5061:9:26","nodeType":"YulIdentifier","src":"5061:9:26"},{"kind":"number","nativeSrc":"5072:2:26","nodeType":"YulLiteral","src":"5072:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5057:3:26","nodeType":"YulIdentifier","src":"5057:3:26"},"nativeSrc":"5057:18:26","nodeType":"YulFunctionCall","src":"5057:18:26"},{"name":"value2","nativeSrc":"5077:6:26","nodeType":"YulIdentifier","src":"5077:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5050:6:26","nodeType":"YulIdentifier","src":"5050:6:26"},"nativeSrc":"5050:34:26","nodeType":"YulFunctionCall","src":"5050:34:26"},"nativeSrc":"5050:34:26","nodeType":"YulExpressionStatement","src":"5050:34:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4771:319:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4881:9:26","nodeType":"YulTypedName","src":"4881:9:26","type":""},{"name":"value2","nativeSrc":"4892:6:26","nodeType":"YulTypedName","src":"4892:6:26","type":""},{"name":"value1","nativeSrc":"4900:6:26","nodeType":"YulTypedName","src":"4900:6:26","type":""},{"name":"value0","nativeSrc":"4908:6:26","nodeType":"YulTypedName","src":"4908:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4919:4:26","nodeType":"YulTypedName","src":"4919:4:26","type":""}],"src":"4771:319:26"},{"body":{"nativeSrc":"5196:76:26","nodeType":"YulBlock","src":"5196:76:26","statements":[{"nativeSrc":"5206:26:26","nodeType":"YulAssignment","src":"5206:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5218:9:26","nodeType":"YulIdentifier","src":"5218:9:26"},{"kind":"number","nativeSrc":"5229:2:26","nodeType":"YulLiteral","src":"5229:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5214:3:26","nodeType":"YulIdentifier","src":"5214:3:26"},"nativeSrc":"5214:18:26","nodeType":"YulFunctionCall","src":"5214:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5206:4:26","nodeType":"YulIdentifier","src":"5206:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5248:9:26","nodeType":"YulIdentifier","src":"5248:9:26"},{"name":"value0","nativeSrc":"5259:6:26","nodeType":"YulIdentifier","src":"5259:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5241:6:26","nodeType":"YulIdentifier","src":"5241:6:26"},"nativeSrc":"5241:25:26","nodeType":"YulFunctionCall","src":"5241:25:26"},"nativeSrc":"5241:25:26","nodeType":"YulExpressionStatement","src":"5241:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"5095:177:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5165:9:26","nodeType":"YulTypedName","src":"5165:9:26","type":""},{"name":"value0","nativeSrc":"5176:6:26","nodeType":"YulTypedName","src":"5176:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5187:4:26","nodeType":"YulTypedName","src":"5187:4:26","type":""}],"src":"5095:177:26"},{"body":{"nativeSrc":"5378:76:26","nodeType":"YulBlock","src":"5378:76:26","statements":[{"nativeSrc":"5388:26:26","nodeType":"YulAssignment","src":"5388:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5400:9:26","nodeType":"YulIdentifier","src":"5400:9:26"},{"kind":"number","nativeSrc":"5411:2:26","nodeType":"YulLiteral","src":"5411:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5396:3:26","nodeType":"YulIdentifier","src":"5396:3:26"},"nativeSrc":"5396:18:26","nodeType":"YulFunctionCall","src":"5396:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5388:4:26","nodeType":"YulIdentifier","src":"5388:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5430:9:26","nodeType":"YulIdentifier","src":"5430:9:26"},{"name":"value0","nativeSrc":"5441:6:26","nodeType":"YulIdentifier","src":"5441:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5423:6:26","nodeType":"YulIdentifier","src":"5423:6:26"},"nativeSrc":"5423:25:26","nodeType":"YulFunctionCall","src":"5423:25:26"},"nativeSrc":"5423:25:26","nodeType":"YulExpressionStatement","src":"5423:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5277:177:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5347:9:26","nodeType":"YulTypedName","src":"5347:9:26","type":""},{"name":"value0","nativeSrc":"5358:6:26","nodeType":"YulTypedName","src":"5358:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5369:4:26","nodeType":"YulTypedName","src":"5369:4:26","type":""}],"src":"5277:177:26"},{"body":{"nativeSrc":"5634:219:26","nodeType":"YulBlock","src":"5634:219:26","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5651:3:26","nodeType":"YulIdentifier","src":"5651:3:26"},{"name":"value0","nativeSrc":"5656:6:26","nodeType":"YulIdentifier","src":"5656:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5644:6:26","nodeType":"YulIdentifier","src":"5644:6:26"},"nativeSrc":"5644:19:26","nodeType":"YulFunctionCall","src":"5644:19:26"},"nativeSrc":"5644:19:26","nodeType":"YulExpressionStatement","src":"5644:19:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5683:3:26","nodeType":"YulIdentifier","src":"5683:3:26"},{"kind":"number","nativeSrc":"5688:2:26","nodeType":"YulLiteral","src":"5688:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5679:3:26","nodeType":"YulIdentifier","src":"5679:3:26"},"nativeSrc":"5679:12:26","nodeType":"YulFunctionCall","src":"5679:12:26"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5701:2:26","nodeType":"YulLiteral","src":"5701:2:26","type":"","value":"96"},{"name":"value1","nativeSrc":"5705:6:26","nodeType":"YulIdentifier","src":"5705:6:26"}],"functionName":{"name":"shl","nativeSrc":"5697:3:26","nodeType":"YulIdentifier","src":"5697:3:26"},"nativeSrc":"5697:15:26","nodeType":"YulFunctionCall","src":"5697:15:26"},{"kind":"number","nativeSrc":"5714:66:26","nodeType":"YulLiteral","src":"5714:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"5693:3:26","nodeType":"YulIdentifier","src":"5693:3:26"},"nativeSrc":"5693:88:26","nodeType":"YulFunctionCall","src":"5693:88:26"}],"functionName":{"name":"mstore","nativeSrc":"5672:6:26","nodeType":"YulIdentifier","src":"5672:6:26"},"nativeSrc":"5672:110:26","nodeType":"YulFunctionCall","src":"5672:110:26"},"nativeSrc":"5672:110:26","nodeType":"YulExpressionStatement","src":"5672:110:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5802:3:26","nodeType":"YulIdentifier","src":"5802:3:26"},{"kind":"number","nativeSrc":"5807:2:26","nodeType":"YulLiteral","src":"5807:2:26","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"5798:3:26","nodeType":"YulIdentifier","src":"5798:3:26"},"nativeSrc":"5798:12:26","nodeType":"YulFunctionCall","src":"5798:12:26"},{"name":"value2","nativeSrc":"5812:6:26","nodeType":"YulIdentifier","src":"5812:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5791:6:26","nodeType":"YulIdentifier","src":"5791:6:26"},"nativeSrc":"5791:28:26","nodeType":"YulFunctionCall","src":"5791:28:26"},"nativeSrc":"5791:28:26","nodeType":"YulExpressionStatement","src":"5791:28:26"},{"nativeSrc":"5828:19:26","nodeType":"YulAssignment","src":"5828:19:26","value":{"arguments":[{"name":"pos","nativeSrc":"5839:3:26","nodeType":"YulIdentifier","src":"5839:3:26"},{"kind":"number","nativeSrc":"5844:2:26","nodeType":"YulLiteral","src":"5844:2:26","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"5835:3:26","nodeType":"YulIdentifier","src":"5835:3:26"},"nativeSrc":"5835:12:26","nodeType":"YulFunctionCall","src":"5835:12:26"},"variableNames":[{"name":"end","nativeSrc":"5828:3:26","nodeType":"YulIdentifier","src":"5828:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"5459:394:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5594:3:26","nodeType":"YulTypedName","src":"5594:3:26","type":""},{"name":"value2","nativeSrc":"5599:6:26","nodeType":"YulTypedName","src":"5599:6:26","type":""},{"name":"value1","nativeSrc":"5607:6:26","nodeType":"YulTypedName","src":"5607:6:26","type":""},{"name":"value0","nativeSrc":"5615:6:26","nodeType":"YulTypedName","src":"5615:6:26","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5626:3:26","nodeType":"YulTypedName","src":"5626:3:26","type":""}],"src":"5459:394:26"},{"body":{"nativeSrc":"5987:119:26","nodeType":"YulBlock","src":"5987:119:26","statements":[{"nativeSrc":"5997:26:26","nodeType":"YulAssignment","src":"5997:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6009:9:26","nodeType":"YulIdentifier","src":"6009:9:26"},{"kind":"number","nativeSrc":"6020:2:26","nodeType":"YulLiteral","src":"6020:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6005:3:26","nodeType":"YulIdentifier","src":"6005:3:26"},"nativeSrc":"6005:18:26","nodeType":"YulFunctionCall","src":"6005:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5997:4:26","nodeType":"YulIdentifier","src":"5997:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6039:9:26","nodeType":"YulIdentifier","src":"6039:9:26"},{"name":"value0","nativeSrc":"6050:6:26","nodeType":"YulIdentifier","src":"6050:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6032:6:26","nodeType":"YulIdentifier","src":"6032:6:26"},"nativeSrc":"6032:25:26","nodeType":"YulFunctionCall","src":"6032:25:26"},"nativeSrc":"6032:25:26","nodeType":"YulExpressionStatement","src":"6032:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6077:9:26","nodeType":"YulIdentifier","src":"6077:9:26"},{"kind":"number","nativeSrc":"6088:2:26","nodeType":"YulLiteral","src":"6088:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6073:3:26","nodeType":"YulIdentifier","src":"6073:3:26"},"nativeSrc":"6073:18:26","nodeType":"YulFunctionCall","src":"6073:18:26"},{"name":"value1","nativeSrc":"6093:6:26","nodeType":"YulIdentifier","src":"6093:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6066:6:26","nodeType":"YulIdentifier","src":"6066:6:26"},"nativeSrc":"6066:34:26","nodeType":"YulFunctionCall","src":"6066:34:26"},"nativeSrc":"6066:34:26","nodeType":"YulExpressionStatement","src":"6066:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"5858:248:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5948:9:26","nodeType":"YulTypedName","src":"5948:9:26","type":""},{"name":"value1","nativeSrc":"5959:6:26","nodeType":"YulTypedName","src":"5959:6:26","type":""},{"name":"value0","nativeSrc":"5967:6:26","nodeType":"YulTypedName","src":"5967:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5978:4:26","nodeType":"YulTypedName","src":"5978:4:26","type":""}],"src":"5858:248:26"},{"body":{"nativeSrc":"6240:119:26","nodeType":"YulBlock","src":"6240:119:26","statements":[{"nativeSrc":"6250:26:26","nodeType":"YulAssignment","src":"6250:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6262:9:26","nodeType":"YulIdentifier","src":"6262:9:26"},{"kind":"number","nativeSrc":"6273:2:26","nodeType":"YulLiteral","src":"6273:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6258:3:26","nodeType":"YulIdentifier","src":"6258:3:26"},"nativeSrc":"6258:18:26","nodeType":"YulFunctionCall","src":"6258:18:26"},"variableNames":[{"name":"tail","nativeSrc":"6250:4:26","nodeType":"YulIdentifier","src":"6250:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6292:9:26","nodeType":"YulIdentifier","src":"6292:9:26"},{"name":"value0","nativeSrc":"6303:6:26","nodeType":"YulIdentifier","src":"6303:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6285:6:26","nodeType":"YulIdentifier","src":"6285:6:26"},"nativeSrc":"6285:25:26","nodeType":"YulFunctionCall","src":"6285:25:26"},"nativeSrc":"6285:25:26","nodeType":"YulExpressionStatement","src":"6285:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6330:9:26","nodeType":"YulIdentifier","src":"6330:9:26"},{"kind":"number","nativeSrc":"6341:2:26","nodeType":"YulLiteral","src":"6341:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6326:3:26","nodeType":"YulIdentifier","src":"6326:3:26"},"nativeSrc":"6326:18:26","nodeType":"YulFunctionCall","src":"6326:18:26"},{"name":"value1","nativeSrc":"6346:6:26","nodeType":"YulIdentifier","src":"6346:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6319:6:26","nodeType":"YulIdentifier","src":"6319:6:26"},"nativeSrc":"6319:34:26","nodeType":"YulFunctionCall","src":"6319:34:26"},"nativeSrc":"6319:34:26","nodeType":"YulExpressionStatement","src":"6319:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"6111:248:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6201:9:26","nodeType":"YulTypedName","src":"6201:9:26","type":""},{"name":"value1","nativeSrc":"6212:6:26","nodeType":"YulTypedName","src":"6212:6:26","type":""},{"name":"value0","nativeSrc":"6220:6:26","nodeType":"YulTypedName","src":"6220:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6231:4:26","nodeType":"YulTypedName","src":"6231:4:26","type":""}],"src":"6111:248:26"},{"body":{"nativeSrc":"6521:211:26","nodeType":"YulBlock","src":"6521:211:26","statements":[{"nativeSrc":"6531:26:26","nodeType":"YulAssignment","src":"6531:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6543:9:26","nodeType":"YulIdentifier","src":"6543:9:26"},{"kind":"number","nativeSrc":"6554:2:26","nodeType":"YulLiteral","src":"6554:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6539:3:26","nodeType":"YulIdentifier","src":"6539:3:26"},"nativeSrc":"6539:18:26","nodeType":"YulFunctionCall","src":"6539:18:26"},"variableNames":[{"name":"tail","nativeSrc":"6531:4:26","nodeType":"YulIdentifier","src":"6531:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6573:9:26","nodeType":"YulIdentifier","src":"6573:9:26"},{"name":"value0","nativeSrc":"6584:6:26","nodeType":"YulIdentifier","src":"6584:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6566:6:26","nodeType":"YulIdentifier","src":"6566:6:26"},"nativeSrc":"6566:25:26","nodeType":"YulFunctionCall","src":"6566:25:26"},"nativeSrc":"6566:25:26","nodeType":"YulExpressionStatement","src":"6566:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6611:9:26","nodeType":"YulIdentifier","src":"6611:9:26"},{"kind":"number","nativeSrc":"6622:2:26","nodeType":"YulLiteral","src":"6622:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6607:3:26","nodeType":"YulIdentifier","src":"6607:3:26"},"nativeSrc":"6607:18:26","nodeType":"YulFunctionCall","src":"6607:18:26"},{"arguments":[{"name":"value1","nativeSrc":"6631:6:26","nodeType":"YulIdentifier","src":"6631:6:26"},{"kind":"number","nativeSrc":"6639:42:26","nodeType":"YulLiteral","src":"6639:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6627:3:26","nodeType":"YulIdentifier","src":"6627:3:26"},"nativeSrc":"6627:55:26","nodeType":"YulFunctionCall","src":"6627:55:26"}],"functionName":{"name":"mstore","nativeSrc":"6600:6:26","nodeType":"YulIdentifier","src":"6600:6:26"},"nativeSrc":"6600:83:26","nodeType":"YulFunctionCall","src":"6600:83:26"},"nativeSrc":"6600:83:26","nodeType":"YulExpressionStatement","src":"6600:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6703:9:26","nodeType":"YulIdentifier","src":"6703:9:26"},{"kind":"number","nativeSrc":"6714:2:26","nodeType":"YulLiteral","src":"6714:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6699:3:26","nodeType":"YulIdentifier","src":"6699:3:26"},"nativeSrc":"6699:18:26","nodeType":"YulFunctionCall","src":"6699:18:26"},{"name":"value2","nativeSrc":"6719:6:26","nodeType":"YulIdentifier","src":"6719:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6692:6:26","nodeType":"YulIdentifier","src":"6692:6:26"},"nativeSrc":"6692:34:26","nodeType":"YulFunctionCall","src":"6692:34:26"},"nativeSrc":"6692:34:26","nodeType":"YulExpressionStatement","src":"6692:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed","nativeSrc":"6364:368:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6474:9:26","nodeType":"YulTypedName","src":"6474:9:26","type":""},{"name":"value2","nativeSrc":"6485:6:26","nodeType":"YulTypedName","src":"6485:6:26","type":""},{"name":"value1","nativeSrc":"6493:6:26","nodeType":"YulTypedName","src":"6493:6:26","type":""},{"name":"value0","nativeSrc":"6501:6:26","nodeType":"YulTypedName","src":"6501:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6512:4:26","nodeType":"YulTypedName","src":"6512:4:26","type":""}],"src":"6364:368:26"},{"body":{"nativeSrc":"6940:697:26","nodeType":"YulBlock","src":"6940:697:26","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6957:9:26","nodeType":"YulIdentifier","src":"6957:9:26"},{"arguments":[{"name":"value0","nativeSrc":"6972:6:26","nodeType":"YulIdentifier","src":"6972:6:26"},{"kind":"number","nativeSrc":"6980:42:26","nodeType":"YulLiteral","src":"6980:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6968:3:26","nodeType":"YulIdentifier","src":"6968:3:26"},"nativeSrc":"6968:55:26","nodeType":"YulFunctionCall","src":"6968:55:26"}],"functionName":{"name":"mstore","nativeSrc":"6950:6:26","nodeType":"YulIdentifier","src":"6950:6:26"},"nativeSrc":"6950:74:26","nodeType":"YulFunctionCall","src":"6950:74:26"},"nativeSrc":"6950:74:26","nodeType":"YulExpressionStatement","src":"6950:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7044:9:26","nodeType":"YulIdentifier","src":"7044:9:26"},{"kind":"number","nativeSrc":"7055:2:26","nodeType":"YulLiteral","src":"7055:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7040:3:26","nodeType":"YulIdentifier","src":"7040:3:26"},"nativeSrc":"7040:18:26","nodeType":"YulFunctionCall","src":"7040:18:26"},{"arguments":[{"name":"value1","nativeSrc":"7064:6:26","nodeType":"YulIdentifier","src":"7064:6:26"},{"kind":"number","nativeSrc":"7072:42:26","nodeType":"YulLiteral","src":"7072:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7060:3:26","nodeType":"YulIdentifier","src":"7060:3:26"},"nativeSrc":"7060:55:26","nodeType":"YulFunctionCall","src":"7060:55:26"}],"functionName":{"name":"mstore","nativeSrc":"7033:6:26","nodeType":"YulIdentifier","src":"7033:6:26"},"nativeSrc":"7033:83:26","nodeType":"YulFunctionCall","src":"7033:83:26"},"nativeSrc":"7033:83:26","nodeType":"YulExpressionStatement","src":"7033:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7136:9:26","nodeType":"YulIdentifier","src":"7136:9:26"},{"kind":"number","nativeSrc":"7147:2:26","nodeType":"YulLiteral","src":"7147:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7132:3:26","nodeType":"YulIdentifier","src":"7132:3:26"},"nativeSrc":"7132:18:26","nodeType":"YulFunctionCall","src":"7132:18:26"},{"name":"value2","nativeSrc":"7152:6:26","nodeType":"YulIdentifier","src":"7152:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7125:6:26","nodeType":"YulIdentifier","src":"7125:6:26"},"nativeSrc":"7125:34:26","nodeType":"YulFunctionCall","src":"7125:34:26"},"nativeSrc":"7125:34:26","nodeType":"YulExpressionStatement","src":"7125:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7179:9:26","nodeType":"YulIdentifier","src":"7179:9:26"},{"kind":"number","nativeSrc":"7190:2:26","nodeType":"YulLiteral","src":"7190:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7175:3:26","nodeType":"YulIdentifier","src":"7175:3:26"},"nativeSrc":"7175:18:26","nodeType":"YulFunctionCall","src":"7175:18:26"},{"kind":"number","nativeSrc":"7195:3:26","nodeType":"YulLiteral","src":"7195:3:26","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"7168:6:26","nodeType":"YulIdentifier","src":"7168:6:26"},"nativeSrc":"7168:31:26","nodeType":"YulFunctionCall","src":"7168:31:26"},"nativeSrc":"7168:31:26","nodeType":"YulExpressionStatement","src":"7168:31:26"},{"nativeSrc":"7208:27:26","nodeType":"YulVariableDeclaration","src":"7208:27:26","value":{"arguments":[{"name":"value3","nativeSrc":"7228:6:26","nodeType":"YulIdentifier","src":"7228:6:26"}],"functionName":{"name":"mload","nativeSrc":"7222:5:26","nodeType":"YulIdentifier","src":"7222:5:26"},"nativeSrc":"7222:13:26","nodeType":"YulFunctionCall","src":"7222:13:26"},"variables":[{"name":"length","nativeSrc":"7212:6:26","nodeType":"YulTypedName","src":"7212:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7255:9:26","nodeType":"YulIdentifier","src":"7255:9:26"},{"kind":"number","nativeSrc":"7266:3:26","nodeType":"YulLiteral","src":"7266:3:26","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7251:3:26","nodeType":"YulIdentifier","src":"7251:3:26"},"nativeSrc":"7251:19:26","nodeType":"YulFunctionCall","src":"7251:19:26"},{"name":"length","nativeSrc":"7272:6:26","nodeType":"YulIdentifier","src":"7272:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7244:6:26","nodeType":"YulIdentifier","src":"7244:6:26"},"nativeSrc":"7244:35:26","nodeType":"YulFunctionCall","src":"7244:35:26"},"nativeSrc":"7244:35:26","nodeType":"YulExpressionStatement","src":"7244:35:26"},{"nativeSrc":"7288:10:26","nodeType":"YulVariableDeclaration","src":"7288:10:26","value":{"kind":"number","nativeSrc":"7297:1:26","nodeType":"YulLiteral","src":"7297:1:26","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7292:1:26","nodeType":"YulTypedName","src":"7292:1:26","type":""}]},{"body":{"nativeSrc":"7357:91:26","nodeType":"YulBlock","src":"7357:91:26","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7386:9:26","nodeType":"YulIdentifier","src":"7386:9:26"},{"name":"i","nativeSrc":"7397:1:26","nodeType":"YulIdentifier","src":"7397:1:26"}],"functionName":{"name":"add","nativeSrc":"7382:3:26","nodeType":"YulIdentifier","src":"7382:3:26"},"nativeSrc":"7382:17:26","nodeType":"YulFunctionCall","src":"7382:17:26"},{"kind":"number","nativeSrc":"7401:3:26","nodeType":"YulLiteral","src":"7401:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7378:3:26","nodeType":"YulIdentifier","src":"7378:3:26"},"nativeSrc":"7378:27:26","nodeType":"YulFunctionCall","src":"7378:27:26"},{"arguments":[{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"7421:6:26","nodeType":"YulIdentifier","src":"7421:6:26"},{"name":"i","nativeSrc":"7429:1:26","nodeType":"YulIdentifier","src":"7429:1:26"}],"functionName":{"name":"add","nativeSrc":"7417:3:26","nodeType":"YulIdentifier","src":"7417:3:26"},"nativeSrc":"7417:14:26","nodeType":"YulFunctionCall","src":"7417:14:26"},{"kind":"number","nativeSrc":"7433:2:26","nodeType":"YulLiteral","src":"7433:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7413:3:26","nodeType":"YulIdentifier","src":"7413:3:26"},"nativeSrc":"7413:23:26","nodeType":"YulFunctionCall","src":"7413:23:26"}],"functionName":{"name":"mload","nativeSrc":"7407:5:26","nodeType":"YulIdentifier","src":"7407:5:26"},"nativeSrc":"7407:30:26","nodeType":"YulFunctionCall","src":"7407:30:26"}],"functionName":{"name":"mstore","nativeSrc":"7371:6:26","nodeType":"YulIdentifier","src":"7371:6:26"},"nativeSrc":"7371:67:26","nodeType":"YulFunctionCall","src":"7371:67:26"},"nativeSrc":"7371:67:26","nodeType":"YulExpressionStatement","src":"7371:67:26"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7318:1:26","nodeType":"YulIdentifier","src":"7318:1:26"},{"name":"length","nativeSrc":"7321:6:26","nodeType":"YulIdentifier","src":"7321:6:26"}],"functionName":{"name":"lt","nativeSrc":"7315:2:26","nodeType":"YulIdentifier","src":"7315:2:26"},"nativeSrc":"7315:13:26","nodeType":"YulFunctionCall","src":"7315:13:26"},"nativeSrc":"7307:141:26","nodeType":"YulForLoop","post":{"nativeSrc":"7329:19:26","nodeType":"YulBlock","src":"7329:19:26","statements":[{"nativeSrc":"7331:15:26","nodeType":"YulAssignment","src":"7331:15:26","value":{"arguments":[{"name":"i","nativeSrc":"7340:1:26","nodeType":"YulIdentifier","src":"7340:1:26"},{"kind":"number","nativeSrc":"7343:2:26","nodeType":"YulLiteral","src":"7343:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7336:3:26","nodeType":"YulIdentifier","src":"7336:3:26"},"nativeSrc":"7336:10:26","nodeType":"YulFunctionCall","src":"7336:10:26"},"variableNames":[{"name":"i","nativeSrc":"7331:1:26","nodeType":"YulIdentifier","src":"7331:1:26"}]}]},"pre":{"nativeSrc":"7311:3:26","nodeType":"YulBlock","src":"7311:3:26","statements":[]},"src":"7307:141:26"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7472:9:26","nodeType":"YulIdentifier","src":"7472:9:26"},{"name":"length","nativeSrc":"7483:6:26","nodeType":"YulIdentifier","src":"7483:6:26"}],"functionName":{"name":"add","nativeSrc":"7468:3:26","nodeType":"YulIdentifier","src":"7468:3:26"},"nativeSrc":"7468:22:26","nodeType":"YulFunctionCall","src":"7468:22:26"},{"kind":"number","nativeSrc":"7492:3:26","nodeType":"YulLiteral","src":"7492:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7464:3:26","nodeType":"YulIdentifier","src":"7464:3:26"},"nativeSrc":"7464:32:26","nodeType":"YulFunctionCall","src":"7464:32:26"},{"kind":"number","nativeSrc":"7498:1:26","nodeType":"YulLiteral","src":"7498:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7457:6:26","nodeType":"YulIdentifier","src":"7457:6:26"},"nativeSrc":"7457:43:26","nodeType":"YulFunctionCall","src":"7457:43:26"},"nativeSrc":"7457:43:26","nodeType":"YulExpressionStatement","src":"7457:43:26"},{"nativeSrc":"7509:122:26","nodeType":"YulAssignment","src":"7509:122:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7525:9:26","nodeType":"YulIdentifier","src":"7525:9:26"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"7544:6:26","nodeType":"YulIdentifier","src":"7544:6:26"},{"kind":"number","nativeSrc":"7552:2:26","nodeType":"YulLiteral","src":"7552:2:26","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"7540:3:26","nodeType":"YulIdentifier","src":"7540:3:26"},"nativeSrc":"7540:15:26","nodeType":"YulFunctionCall","src":"7540:15:26"},{"kind":"number","nativeSrc":"7557:66:26","nodeType":"YulLiteral","src":"7557:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"7536:3:26","nodeType":"YulIdentifier","src":"7536:3:26"},"nativeSrc":"7536:88:26","nodeType":"YulFunctionCall","src":"7536:88:26"}],"functionName":{"name":"add","nativeSrc":"7521:3:26","nodeType":"YulIdentifier","src":"7521:3:26"},"nativeSrc":"7521:104:26","nodeType":"YulFunctionCall","src":"7521:104:26"},{"kind":"number","nativeSrc":"7627:3:26","nodeType":"YulLiteral","src":"7627:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7517:3:26","nodeType":"YulIdentifier","src":"7517:3:26"},"nativeSrc":"7517:114:26","nodeType":"YulFunctionCall","src":"7517:114:26"},"variableNames":[{"name":"tail","nativeSrc":"7509:4:26","nodeType":"YulIdentifier","src":"7509:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"6737:900:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6885:9:26","nodeType":"YulTypedName","src":"6885:9:26","type":""},{"name":"value3","nativeSrc":"6896:6:26","nodeType":"YulTypedName","src":"6896:6:26","type":""},{"name":"value2","nativeSrc":"6904:6:26","nodeType":"YulTypedName","src":"6904:6:26","type":""},{"name":"value1","nativeSrc":"6912:6:26","nodeType":"YulTypedName","src":"6912:6:26","type":""},{"name":"value0","nativeSrc":"6920:6:26","nodeType":"YulTypedName","src":"6920:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6931:4:26","nodeType":"YulTypedName","src":"6931:4:26","type":""}],"src":"6737:900:26"},{"body":{"nativeSrc":"7720:199:26","nodeType":"YulBlock","src":"7720:199:26","statements":[{"body":{"nativeSrc":"7766:16:26","nodeType":"YulBlock","src":"7766:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7775:1:26","nodeType":"YulLiteral","src":"7775:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"7778:1:26","nodeType":"YulLiteral","src":"7778:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7768:6:26","nodeType":"YulIdentifier","src":"7768:6:26"},"nativeSrc":"7768:12:26","nodeType":"YulFunctionCall","src":"7768:12:26"},"nativeSrc":"7768:12:26","nodeType":"YulExpressionStatement","src":"7768:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7741:7:26","nodeType":"YulIdentifier","src":"7741:7:26"},{"name":"headStart","nativeSrc":"7750:9:26","nodeType":"YulIdentifier","src":"7750:9:26"}],"functionName":{"name":"sub","nativeSrc":"7737:3:26","nodeType":"YulIdentifier","src":"7737:3:26"},"nativeSrc":"7737:23:26","nodeType":"YulFunctionCall","src":"7737:23:26"},{"kind":"number","nativeSrc":"7762:2:26","nodeType":"YulLiteral","src":"7762:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7733:3:26","nodeType":"YulIdentifier","src":"7733:3:26"},"nativeSrc":"7733:32:26","nodeType":"YulFunctionCall","src":"7733:32:26"},"nativeSrc":"7730:52:26","nodeType":"YulIf","src":"7730:52:26"},{"nativeSrc":"7791:29:26","nodeType":"YulVariableDeclaration","src":"7791:29:26","value":{"arguments":[{"name":"headStart","nativeSrc":"7810:9:26","nodeType":"YulIdentifier","src":"7810:9:26"}],"functionName":{"name":"mload","nativeSrc":"7804:5:26","nodeType":"YulIdentifier","src":"7804:5:26"},"nativeSrc":"7804:16:26","nodeType":"YulFunctionCall","src":"7804:16:26"},"variables":[{"name":"value","nativeSrc":"7795:5:26","nodeType":"YulTypedName","src":"7795:5:26","type":""}]},{"body":{"nativeSrc":"7873:16:26","nodeType":"YulBlock","src":"7873:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7882:1:26","nodeType":"YulLiteral","src":"7882:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"7885:1:26","nodeType":"YulLiteral","src":"7885:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7875:6:26","nodeType":"YulIdentifier","src":"7875:6:26"},"nativeSrc":"7875:12:26","nodeType":"YulFunctionCall","src":"7875:12:26"},"nativeSrc":"7875:12:26","nodeType":"YulExpressionStatement","src":"7875:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7842:5:26","nodeType":"YulIdentifier","src":"7842:5:26"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7863:5:26","nodeType":"YulIdentifier","src":"7863:5:26"}],"functionName":{"name":"iszero","nativeSrc":"7856:6:26","nodeType":"YulIdentifier","src":"7856:6:26"},"nativeSrc":"7856:13:26","nodeType":"YulFunctionCall","src":"7856:13:26"}],"functionName":{"name":"iszero","nativeSrc":"7849:6:26","nodeType":"YulIdentifier","src":"7849:6:26"},"nativeSrc":"7849:21:26","nodeType":"YulFunctionCall","src":"7849:21:26"}],"functionName":{"name":"eq","nativeSrc":"7839:2:26","nodeType":"YulIdentifier","src":"7839:2:26"},"nativeSrc":"7839:32:26","nodeType":"YulFunctionCall","src":"7839:32:26"}],"functionName":{"name":"iszero","nativeSrc":"7832:6:26","nodeType":"YulIdentifier","src":"7832:6:26"},"nativeSrc":"7832:40:26","nodeType":"YulFunctionCall","src":"7832:40:26"},"nativeSrc":"7829:60:26","nodeType":"YulIf","src":"7829:60:26"},{"nativeSrc":"7898:15:26","nodeType":"YulAssignment","src":"7898:15:26","value":{"name":"value","nativeSrc":"7908:5:26","nodeType":"YulIdentifier","src":"7908:5:26"},"variableNames":[{"name":"value0","nativeSrc":"7898:6:26","nodeType":"YulIdentifier","src":"7898:6:26"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"7642:277:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7686:9:26","nodeType":"YulTypedName","src":"7686:9:26","type":""},{"name":"dataEnd","nativeSrc":"7697:7:26","nodeType":"YulTypedName","src":"7697:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7709:6:26","nodeType":"YulTypedName","src":"7709:6:26","type":""}],"src":"7642:277:26"},{"body":{"nativeSrc":"7973:233:26","nodeType":"YulBlock","src":"7973:233:26","statements":[{"nativeSrc":"7983:17:26","nodeType":"YulAssignment","src":"7983:17:26","value":{"arguments":[{"name":"x","nativeSrc":"7995:1:26","nodeType":"YulIdentifier","src":"7995:1:26"},{"name":"y","nativeSrc":"7998:1:26","nodeType":"YulIdentifier","src":"7998:1:26"}],"functionName":{"name":"sub","nativeSrc":"7991:3:26","nodeType":"YulIdentifier","src":"7991:3:26"},"nativeSrc":"7991:9:26","nodeType":"YulFunctionCall","src":"7991:9:26"},"variableNames":[{"name":"diff","nativeSrc":"7983:4:26","nodeType":"YulIdentifier","src":"7983:4:26"}]},{"body":{"nativeSrc":"8032:168:26","nodeType":"YulBlock","src":"8032:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8053:1:26","nodeType":"YulLiteral","src":"8053:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8056:77:26","nodeType":"YulLiteral","src":"8056:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8046:6:26","nodeType":"YulIdentifier","src":"8046:6:26"},"nativeSrc":"8046:88:26","nodeType":"YulFunctionCall","src":"8046:88:26"},"nativeSrc":"8046:88:26","nodeType":"YulExpressionStatement","src":"8046:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8154:1:26","nodeType":"YulLiteral","src":"8154:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"8157:4:26","nodeType":"YulLiteral","src":"8157:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8147:6:26","nodeType":"YulIdentifier","src":"8147:6:26"},"nativeSrc":"8147:15:26","nodeType":"YulFunctionCall","src":"8147:15:26"},"nativeSrc":"8147:15:26","nodeType":"YulExpressionStatement","src":"8147:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8182:1:26","nodeType":"YulLiteral","src":"8182:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8185:4:26","nodeType":"YulLiteral","src":"8185:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8175:6:26","nodeType":"YulIdentifier","src":"8175:6:26"},"nativeSrc":"8175:15:26","nodeType":"YulFunctionCall","src":"8175:15:26"},"nativeSrc":"8175:15:26","nodeType":"YulExpressionStatement","src":"8175:15:26"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8015:4:26","nodeType":"YulIdentifier","src":"8015:4:26"},{"name":"x","nativeSrc":"8021:1:26","nodeType":"YulIdentifier","src":"8021:1:26"}],"functionName":{"name":"gt","nativeSrc":"8012:2:26","nodeType":"YulIdentifier","src":"8012:2:26"},"nativeSrc":"8012:11:26","nodeType":"YulFunctionCall","src":"8012:11:26"},"nativeSrc":"8009:191:26","nodeType":"YulIf","src":"8009:191:26"}]},"name":"checked_sub_t_uint256","nativeSrc":"7924:282:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7955:1:26","nodeType":"YulTypedName","src":"7955:1:26","type":""},{"name":"y","nativeSrc":"7958:1:26","nodeType":"YulTypedName","src":"7958:1:26","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"7964:4:26","nodeType":"YulTypedName","src":"7964:4:26","type":""}],"src":"7924:282:26"},{"body":{"nativeSrc":"8368:309:26","nodeType":"YulBlock","src":"8368:309:26","statements":[{"nativeSrc":"8378:26:26","nodeType":"YulAssignment","src":"8378:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"8390:9:26","nodeType":"YulIdentifier","src":"8390:9:26"},{"kind":"number","nativeSrc":"8401:2:26","nodeType":"YulLiteral","src":"8401:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8386:3:26","nodeType":"YulIdentifier","src":"8386:3:26"},"nativeSrc":"8386:18:26","nodeType":"YulFunctionCall","src":"8386:18:26"},"variableNames":[{"name":"tail","nativeSrc":"8378:4:26","nodeType":"YulIdentifier","src":"8378:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8420:9:26","nodeType":"YulIdentifier","src":"8420:9:26"},{"arguments":[{"name":"value0","nativeSrc":"8435:6:26","nodeType":"YulIdentifier","src":"8435:6:26"},{"kind":"number","nativeSrc":"8443:42:26","nodeType":"YulLiteral","src":"8443:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8431:3:26","nodeType":"YulIdentifier","src":"8431:3:26"},"nativeSrc":"8431:55:26","nodeType":"YulFunctionCall","src":"8431:55:26"}],"functionName":{"name":"mstore","nativeSrc":"8413:6:26","nodeType":"YulIdentifier","src":"8413:6:26"},"nativeSrc":"8413:74:26","nodeType":"YulFunctionCall","src":"8413:74:26"},"nativeSrc":"8413:74:26","nodeType":"YulExpressionStatement","src":"8413:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8507:9:26","nodeType":"YulIdentifier","src":"8507:9:26"},{"kind":"number","nativeSrc":"8518:2:26","nodeType":"YulLiteral","src":"8518:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8503:3:26","nodeType":"YulIdentifier","src":"8503:3:26"},"nativeSrc":"8503:18:26","nodeType":"YulFunctionCall","src":"8503:18:26"},{"arguments":[{"name":"value1","nativeSrc":"8527:6:26","nodeType":"YulIdentifier","src":"8527:6:26"},{"kind":"number","nativeSrc":"8535:42:26","nodeType":"YulLiteral","src":"8535:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8523:3:26","nodeType":"YulIdentifier","src":"8523:3:26"},"nativeSrc":"8523:55:26","nodeType":"YulFunctionCall","src":"8523:55:26"}],"functionName":{"name":"mstore","nativeSrc":"8496:6:26","nodeType":"YulIdentifier","src":"8496:6:26"},"nativeSrc":"8496:83:26","nodeType":"YulFunctionCall","src":"8496:83:26"},"nativeSrc":"8496:83:26","nodeType":"YulExpressionStatement","src":"8496:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8599:9:26","nodeType":"YulIdentifier","src":"8599:9:26"},{"kind":"number","nativeSrc":"8610:2:26","nodeType":"YulLiteral","src":"8610:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8595:3:26","nodeType":"YulIdentifier","src":"8595:3:26"},"nativeSrc":"8595:18:26","nodeType":"YulFunctionCall","src":"8595:18:26"},{"arguments":[{"name":"value2","nativeSrc":"8619:6:26","nodeType":"YulIdentifier","src":"8619:6:26"},{"kind":"number","nativeSrc":"8627:42:26","nodeType":"YulLiteral","src":"8627:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8615:3:26","nodeType":"YulIdentifier","src":"8615:3:26"},"nativeSrc":"8615:55:26","nodeType":"YulFunctionCall","src":"8615:55:26"}],"functionName":{"name":"mstore","nativeSrc":"8588:6:26","nodeType":"YulIdentifier","src":"8588:6:26"},"nativeSrc":"8588:83:26","nodeType":"YulFunctionCall","src":"8588:83:26"},"nativeSrc":"8588:83:26","nodeType":"YulExpressionStatement","src":"8588:83:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"8211:466:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8321:9:26","nodeType":"YulTypedName","src":"8321:9:26","type":""},{"name":"value2","nativeSrc":"8332:6:26","nodeType":"YulTypedName","src":"8332:6:26","type":""},{"name":"value1","nativeSrc":"8340:6:26","nodeType":"YulTypedName","src":"8340:6:26","type":""},{"name":"value0","nativeSrc":"8348:6:26","nodeType":"YulTypedName","src":"8348:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8359:4:26","nodeType":"YulTypedName","src":"8359:4:26","type":""}],"src":"8211:466:26"},{"body":{"nativeSrc":"8714:152:26","nodeType":"YulBlock","src":"8714:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8731:1:26","nodeType":"YulLiteral","src":"8731:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8734:77:26","nodeType":"YulLiteral","src":"8734:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8724:6:26","nodeType":"YulIdentifier","src":"8724:6:26"},"nativeSrc":"8724:88:26","nodeType":"YulFunctionCall","src":"8724:88:26"},"nativeSrc":"8724:88:26","nodeType":"YulExpressionStatement","src":"8724:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8828:1:26","nodeType":"YulLiteral","src":"8828:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"8831:4:26","nodeType":"YulLiteral","src":"8831:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"8821:6:26","nodeType":"YulIdentifier","src":"8821:6:26"},"nativeSrc":"8821:15:26","nodeType":"YulFunctionCall","src":"8821:15:26"},"nativeSrc":"8821:15:26","nodeType":"YulExpressionStatement","src":"8821:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8852:1:26","nodeType":"YulLiteral","src":"8852:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8855:4:26","nodeType":"YulLiteral","src":"8855:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8845:6:26","nodeType":"YulIdentifier","src":"8845:6:26"},"nativeSrc":"8845:15:26","nodeType":"YulFunctionCall","src":"8845:15:26"},"nativeSrc":"8845:15:26","nodeType":"YulExpressionStatement","src":"8845:15:26"}]},"name":"panic_error_0x32","nativeSrc":"8682:184:26","nodeType":"YulFunctionDefinition","src":"8682:184:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 96))\n        value3 := value_3\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 64))\n        value2 := value_1\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_1, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 64))\n        value2 := value_1\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 4))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(add(headStart, i), 160), mload(add(add(value3, i), 32)))\n        }\n        mstore(add(add(headStart, length), 160), 0)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 160)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"601":[{"length":32,"start":378},{"length":32,"start":449},{"length":32,"start":3249},{"length":32,"start":3391}],"2197":[{"length":32,"start":682},{"length":32,"start":1719}],"2200":[{"length":32,"start":305},{"length":32,"start":1764}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC3C0F06 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xEC7F7494 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEC7F7494 EQ PUSH2 0x292 JUMPI DUP1 PUSH4 0xEFC4C631 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2CC JUMPI DUP1 PUSH4 0xFBB0F673 EQ PUSH2 0x2DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x206 JUMPI DUP1 PUSH4 0xD6A3138B EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B4C9F16 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0x563CAC28 EQ PUSH2 0x19E JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1B1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x117 JUMPI DUP1 PUSH4 0x14AE36AE EQ PUSH2 0x12C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x102 PUSH2 0xFD CALLDATASIZE PUSH1 0x4 PUSH2 0xE2F JUMP JUMPDEST PUSH2 0x2FF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x12A PUSH2 0x125 CALLDATASIZE PUSH1 0x4 PUSH2 0xE71 JUMP JUMPDEST PUSH2 0x319 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x153 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x10E JUMP JUMPDEST PUSH32 0x0 PUSH2 0x153 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x1AC CALLDATASIZE PUSH1 0x4 PUSH2 0xECC JUMP JUMPDEST PUSH2 0x48E JUMP JUMPDEST PUSH2 0x102 PUSH2 0x1BF CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x7FD JUMP JUMPDEST PUSH2 0x102 PUSH2 0x214 CALLDATASIZE PUSH1 0x4 PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x23C PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0xF99 JUMP JUMPDEST PUSH2 0x829 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x10E SWAP2 SWAP1 PUSH2 0xFFE JUMP JUMPDEST PUSH2 0x277 PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0xF80 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x10E JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH2 0x8A1 JUMP JUMPDEST PUSH2 0x153 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x12A PUSH2 0x2DA CALLDATASIZE PUSH1 0x4 PUSH2 0xF65 JUMP JUMPDEST PUSH2 0x919 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x153 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x313 DUP3 PUSH2 0x30D PUSH2 0x937 JUMP JUMPDEST SWAP1 PUSH2 0x965 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x332 PUSH2 0x324 PUSH2 0xA3F JUMP JUMPDEST PUSH2 0x32C PUSH2 0xA49 JUMP JUMPDEST SWAP1 PUSH2 0xA77 JUMP JUMPDEST DUP3 PUSH2 0x369 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9DD854D300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x378 JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x3C4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x40D JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 SWAP1 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE MLOAD DUP2 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH32 0x97DF4A2FB6656595BC6EB616C2068E9D50031428EF69D8849590BC9F3DEC620B SWAP1 PUSH2 0x480 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP8 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP3 DUP5 ADD MSTORE PUSH1 0x54 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x74 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 SWAP1 PUSH2 0x4FF DUP3 DUP5 PUSH2 0xAE6 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x515 JUMPI PUSH2 0x515 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x54F JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x563 JUMPI PUSH2 0x563 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x5A3 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5B7 JUMPI PUSH2 0x5B7 PUSH2 0xFCF JUMP JUMPDEST SUB PUSH2 0x5F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC20789F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3BB JUMP JUMPDEST DUP2 SLOAD PUSH2 0x606 DUP7 DUP7 DUP4 DUP8 PUSH2 0xB41 JUMP JUMPDEST PUSH2 0x662 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCC55900D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3BB JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND SWAP4 PUSH4 0xB88D4FDE SWAP4 SWAP2 AND SWAP2 PUSH32 0x0 SWAP2 DUP13 SWAP2 PUSH2 0x72E SWAP2 DUP16 SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x75C SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x103F JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x77B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x79F SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP11 PUSH32 0x6DA15703C9BAA6922F6A2F40FE90A03F70A24B9113EDD75F913454A45D996CD DUP11 PUSH1 0x40 MLOAD PUSH2 0x7EA SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x824 PUSH2 0x80A PUSH2 0xA49 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP3 ADD DUP5 SWAP1 MSTORE PUSH2 0x899 SWAP2 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xAE6 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8AC PUSH2 0x324 PUSH2 0xA3F JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x934 PUSH2 0x924 PUSH2 0xA3F JUMP JUMPDEST DUP3 PUSH2 0x92D PUSH2 0xA49 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xB59 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x110E JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9B5 JUMPI POP PUSH1 0x0 PUSH2 0x313 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA06 JUMPI POP PUSH1 0x1 PUSH2 0x313 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x824 PUSH2 0xC6E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x313 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x110E JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xAE2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xAF7 JUMPI POP PUSH1 0x1 PUSH2 0x313 JUMP JUMPDEST DUP3 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0xB0C JUMPI POP DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xB19 JUMPI POP PUSH1 0x2 PUSH2 0x313 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB38 JUMPI POP PUSH1 0x3 PUSH2 0x313 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB4F DUP7 DUP7 DUP6 PUSH2 0xDBB JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xBC6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3BB JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xC68 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xC7E JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xC88 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xDAA JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xD86 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDAA SWAP2 SWAP1 PUSH2 0x10EC JUMP JUMPDEST ISZERO PUSH2 0xDB4 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xDF4 JUMPI PUSH2 0xDEA DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xDDE JUMPI PUSH2 0xDDE PUSH2 0x1148 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xDFD JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDC0 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xE19 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xE28 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xE87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEC7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xEE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0xEF4 PUSH1 0x20 DUP8 ADD PUSH2 0xEA3 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0xF28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0xF54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF77 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE28 DUP3 PUSH2 0xEA3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xFAE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0xFBE PUSH1 0x20 DUP6 ADD PUSH2 0xEA3 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x1039 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x10AB JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x108E JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x313 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x184FCB63A384ED33693536C967FA0A57566FE6A1AD46E55357753923506E0 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"923:9640:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:26;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;5401:717:24;;;;;;:::i;:::-;;:::i;:::-;;1630:37;;;;;;;;1311:42:26;1299:55;;;1281:74;;1269:2;1254:18;1630:37:24;1135:226:26;728:115:11;817:19;728:115;;7445:1057:24;;;;;;:::i;:::-;;:::i;878:149:11:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;710:120:1;;;:::i;1941:52:24:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;8805:218;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1832:59::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4391:25:26;;;4447:2;4432:18;;4425:34;;;;4475:18;;;4468:34;4379:2;4364:18;1832:59:24;4189:319:26;6376:263:24;;;;;;:::i;:::-;;:::i;1518:48::-;;;;;864:152:1;;;;;;:::i;:::-;;:::i;1730:32:24:-;;;;;;;;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;5401:717:24:-;5521:70;5578:12;:10;:12::i;:::-;5521:33;:31;:33::i;:::-;:56;;:70::i;:::-;5606:10;5602:81;;5653:19;;;;;;;;;;;;;;5602:81;5710:7;5697:9;:20;;:50;;;;5732:15;5721:7;:26;;5697:50;5693:143;;;5770:55;;;;;;;;4391:25:26;;;4432:18;;;4425:34;;;5809:15:24;4475:18:26;;;4468:34;4364:18;;5770:55:24;;;;;;;;5693:143;5894:1;5850:21;;;:12;:21;;;;;:32;:46;5846:113;;5919:29;;;;;;;;5241:25:26;;;5214:18;;5919:29:24;5095:177:26;5846:113:24;5993:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5969:21:24;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;6052:59;6028:7;;6005:10;;5982:7;;6052:59;;;;6017:9;5241:25:26;;5229:2;5214:18;;5095:177;6052:59:24;;;;;;;;5401:717;;;;:::o;7445:1057::-;7590:44;;;;;;;5644:19:26;;;5701:2;5697:15;;;5714:66;5693:88;5679:12;;;5672:110;5798:12;;;;5791:28;;;7590:44:24;;;;;;;;;;5835:12:26;;;;7590:44:24;;7580:55;;;;;;;;;-1:-1:-1;7679:21:24;;;:12;:21;;;;;;;7739:28;7679:21;7580:55;7739:9;:28::i;:::-;7711:56;-1:-1:-1;7799:27:24;7781:14;:45;;;;;;;;:::i;:::-;;7777:355;;7849:25;;;;;;;;5241::26;;;5214:18;;7849:25:24;5095:177:26;7777:355:24;7913:27;7895:14;:45;;;;;;;;:::i;:::-;;7891:241;;7963:42;;;;;;;;6032:25:26;;;7989:15:24;6073:18:26;;;6066:34;6005:18;;7963:42:24;5858:248:26;7891:241:24;8044:25;8026:14;:43;;;;;;;;:::i;:::-;;8022:110;;8092:29;;;;;;;;6032:25:26;;;6073:18;;;6066:34;;;6005:18;;8092:29:24;5858:248:26;8022:110:24;8157:22;;8194:32;:5;;8157:22;8221:4;8194:20;:32::i;:::-;8189:111;;8249:40;;;;;;;;6566:25:26;;;6639:42;6627:55;;6607:18;;;6600:83;6699:18;;;6692:34;;;6539:18;;8249:40:24;6364:368:26;8189:111:24;8310:13;;;;:7;:13;;;;;;;;:20;;;;8326:4;8310:20;;;8370:17;;8411:21;;8341:28;:11;:28;;;;;8370:17;;;8389:12;;8403:6;;8411:21;;8422:9;;8411:21;1311:42:26;1299:55;;;;1281:74;;1269:2;1254:18;;1135:226;8411:21:24;;;;;;;;;;;;;8341:92;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8477:9;8448:47;;8471:4;8462:7;8448:47;8488:6;8448:47;;;;5241:25:26;;5229:2;5214:18;;5095:177;8448:47:24;;;;;;;;7555:947;;;;7445:1057;;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:6;;;;3550:118;782:41:1;775:48;;710:120;:::o;8805:218:24:-;8898:10;8937:21;;;:12;:21;;;;;;;;8970:44;;;;;5644:19:26;;;5714:66;5701:2;5697:15;;;5693:88;5679:12;;;5672:110;;;;5798:12;;;5791:28;;;8927:89:24;;5835:12:26;;8970:44:24;;;;;;;;;;;;8960:55;;;;;;8927:9;:89::i;:::-;8920:96;8805:218;-1:-1:-1;;;;8805:218:24:o;6376:263::-;6455:70;6512:12;:10;:12::i;6455:70::-;6535:17;:40;;;;;;;;;;;;6590:42;;6535:40;;6590:42;;;6376:263;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;10153:175:24:-;10254:7;10280:41;:39;:41::i;5060:174:6:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1311:42:26;1299:55;;4538:25:6;;;1281:74:26;1254:18;;4538:25:6;1135:226:26;4499:64:6;4408:162;;:::o;9605:493:24:-;9720:22;;9694:10;;9716:101;;-1:-1:-1;9779:27:24;9772:34;;9716:101;9848:11;:21;;;9830:15;:39;:80;;;;9891:11;:19;;;9873:15;:37;9830:80;9826:145;;;-1:-1:-1;9933:27:24;9926:34;;9826:145;9984:13;;;;:7;:13;;;;;;;;9980:76;;;-1:-1:-1;10020:25:24;10013:32;;9980:76;-1:-1:-1;10073:18:24;9605:493;;;;:::o;4637:172:23:-;4738:4;4798;4761:33;4782:5;;4789:4;4761:20;:33::i;:::-;:41;;4637:172;-1:-1:-1;;;;;4637:172:23:o;3054:369:6:-;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1311:42:26;1299:55;;3237:24:6;;;1281:74:26;1254:18;;3237:24:6;1135:226:26;3201:60:6;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:6;3271:146;3142:281;3054:369;;;:::o;784:760:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:760::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:12;;;;;:39;8431:55:26;;;1396:74:12;;;8413::26;1444:10:12;8503:18:26;;;8496:83;1464:4:12;8595:18:26;;;8588:83;1396:19:12;:39;;;;8386:18:26;;1396:74:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:12:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;5212:318:23:-;5305:7;5347:4;5305:7;5361:134;5381:16;;;5361:134;;;5433:51;5461:12;5475:5;;5481:1;5475:8;;;;;;;:::i;:::-;;;;;;;5433:27;:51::i;:::-;5418:66;-1:-1:-1;5399:3:23;;5361:134;;;-1:-1:-1;5511:12:23;5212:318;-1:-1:-1;;;;5212:318:23:o;504:169:22:-;579:7;609:1;605;:5;:61;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;605:61;;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;613:25;598:68;504:169;-1:-1:-1;;;504:169:22:o;14:332:26:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:587;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;768:23:26;;;888:2;873:18;;860:32;;-1:-1:-1;991:2:26;976:18;;963:32;;1094:2;1079:18;1066:32;;-1:-1:-1;543:587:26;-1:-1:-1;543:587:26:o;1623:196::-;1691:20;;1751:42;1740:54;;1730:65;;1720:93;;1809:1;1806;1799:12;1720:93;1623:196;;;:::o;1824:919::-;1937:6;1945;1953;1961;1969;2022:3;2010:9;2001:7;1997:23;1993:33;1990:53;;;2039:1;2036;2029:12;1990:53;2084:23;;;-1:-1:-1;2150:38:26;2184:2;2169:18;;2150:38;:::i;:::-;2140:48;-1:-1:-1;2261:2:26;2246:18;;2233:32;;-1:-1:-1;2342:2:26;2327:18;;2314:32;2369:18;2358:30;;2355:50;;;2401:1;2398;2391:12;2355:50;2424:22;;2477:4;2469:13;;2465:27;-1:-1:-1;2455:55:26;;2506:1;2503;2496:12;2455:55;2546:2;2533:16;2572:18;2564:6;2561:30;2558:50;;;2604:1;2601;2594:12;2558:50;2657:7;2652:2;2642:6;2639:1;2635:14;2631:2;2627:23;2623:32;2620:45;2617:65;;;2678:1;2675;2668:12;2617:65;1824:919;;;;-1:-1:-1;1824:919:26;;-1:-1:-1;;;2709:2:26;2701:11;;2731:6;1824:919::o;2748:186::-;2807:6;2860:2;2848:9;2839:7;2835:23;2831:32;2828:52;;;2876:1;2873;2866:12;2828:52;2899:29;2918:9;2899:29;:::i;2939:226::-;2998:6;3051:2;3039:9;3030:7;3026:23;3022:32;3019:52;;;3067:1;3064;3057:12;3019:52;-1:-1:-1;3112:23:26;;2939:226;-1:-1:-1;2939:226:26:o;3170:420::-;3247:6;3255;3263;3316:2;3304:9;3295:7;3291:23;3287:32;3284:52;;;3332:1;3329;3322:12;3284:52;3377:23;;;-1:-1:-1;3443:38:26;3477:2;3462:18;;3443:38;:::i;:::-;3170:420;;3433:48;;-1:-1:-1;;;3554:2:26;3539:18;;;;3526:32;;3170:420::o;3595:184::-;3647:77;3644:1;3637:88;3744:4;3741:1;3734:15;3768:4;3765:1;3758:15;3784:400;3931:2;3916:18;;3964:1;3953:13;;3943:201;;4000:77;3997:1;3990:88;4101:4;4098:1;4091:15;4129:4;4126:1;4119:15;3943:201;4153:25;;;3784:400;:::o;6737:900::-;6980:42;6972:6;6968:55;6957:9;6950:74;7072:42;7064:6;7060:55;7055:2;7044:9;7040:18;7033:83;7152:6;7147:2;7136:9;7132:18;7125:34;7195:3;7190:2;7179:9;7175:18;7168:31;6931:4;7228:6;7222:13;7272:6;7266:3;7255:9;7251:19;7244:35;7297:1;7307:141;7321:6;7318:1;7315:13;7307:141;;;7433:2;7417:14;;;7413:23;;7407:30;7401:3;7382:17;;;7378:27;7371:67;7336:10;7307:141;;;7311:3;7498:1;7492:3;7483:6;7472:9;7468:22;7464:32;7457:43;7627:3;7557:66;7552:2;7544:6;7540:15;7536:88;7525:9;7521:104;7517:114;7509:122;;;6737:900;;;;;;;:::o;7642:277::-;7709:6;7762:2;7750:9;7741:7;7737:23;7733:32;7730:52;;;7778:1;7775;7768:12;7730:52;7810:9;7804:16;7863:5;7856:13;7849:21;7842:5;7839:32;7829:60;;7885:1;7882;7875:12;7924:282;7991:9;;;8012:11;;;8009:191;;;8056:77;8053:1;8046:88;8157:4;8154:1;8147:15;8185:4;8182:1;8175:15;8682:184;8734:77;8731:1;8724:88;8831:4;8828:1;8821:15;8855:4;8852:1;8845:15"},"gasEstimates":{"creation":{"codeDepositCost":"905000","executionCost":"infinite","totalCost":"infinite"},"external":{"ERC20_TOKEN()":"infinite","STAKING_POOL()":"infinite","canClaim(bytes32,address,uint256)":"9411","claimAndStake(bytes32,address,uint256,bytes32[])":"infinite","claimWindows(bytes32)":"6780","claimed(bytes32)":"2462","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","setTokenHolderWallet(address)":"infinite","supportsInterface(bytes4)":"infinite","tokenHolderWallet()":"2401","transferOwnership(address)":"infinite"},"internal":{"_canClaim(struct ERC20ClaimWindowMerkleClaim.ClaimWindow storage pointer,bytes32)":"8620","_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"ERC20_TOKEN()":"efc4c631","STAKING_POOL()":"14ae36ae","canClaim(bytes32,address,uint256)":"d6a3138b","claimAndStake(bytes32,address,uint256,bytes32[])":"563cac28","claimWindows(bytes32)":"dc45def6","claimed(bytes32)":"cc3c0f06","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","setTokenHolderWallet(address)":"ec7f7494","supportsInterface(bytes4)":"01ffc9a7","tokenHolderWallet()":"fbb0f673","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolderWallet_\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"EpochMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenHolderWallet\",\"type\":\"address\"}],\"name\":\"TokenHolderWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20SafeTransfers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"enum ERC20ClaimWindowMerkleClaim.ClaimError\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenHolderWallet\",\"type\":\"address\"}],\"name\":\"setTokenHolderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)\":{\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The unique epoch ID associated with the specified claim window.\",\"merkleRoot\":\"The merkle root in the claim window.\",\"startTime\":\"The start time of the claim window.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount of checkmate token is claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"recipient\":\"The recipient of the checkmate token.\",\"root\":\"The merkle root of the claim window.\"}},\"TokenHolderWalletSet(address)\":{\"params\":{\"newTokenHolderWallet\":\"The address of the new token holder wallet.\"}}},\"kind\":\"dev\",\"methods\":{\"canClaim(bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount of checkmate token to be claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"recipient\":\"The recipient of the checkmate token.\"}},\"claimAndStake(bytes32,address,uint256,bytes32[])\":{\"details\":\"Reverts with {EpochIdNotExists} if epoch id does not exist.Reverts with {OutOfClaimWindow} if current block time is beyond claim window.Reverts with {AlreadyClaimed} if the specified payout has already been claimed.Reverts with {InvalidProof} if the merkle proof has failed the verification.Reverts with {TransferFailed} if checkmate token transfer fails.Emits a {PayoutClaimed} event.\",\"params\":{\"amount\":\"The amount of checkmate token to be claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the checkmate token.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if _msgSender() is not the owner.Reverts if the merkle root is zero.Reverts if the claim window is invalid.Reverts if the epoch ID has already been set.Emits a {EpochMerkleRootSet} event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"setTokenHolderWallet(address)\":{\"details\":\"Reverts if _msgSender() is not the owner.Emits a {TokenHolderWalletSet} event.\",\"params\":{\"newTokenHolderWallet\":\"The address of the new token holder wallet.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,bytes32)\":[{\"notice\":\"Error thrown when the leaf has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidClaimWindow(uint256,uint256,uint256)\":[{\"notice\":\"Error thrown when the claim window is invalid.\"}],\"InvalidERC20Token()\":[{\"notice\":\"Thrown when the checkmate token contract address is zero.\"}],\"InvalidMerkleRoot()\":[{\"notice\":\"Thrown when the merkle root is zero.\"}],\"InvalidProof(bytes32,address,uint256)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"InvalidStakingPool()\":[{\"notice\":\"Thrown when the staking pool address is zero.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,bytes32,address,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"TokenHolderWalletSet(address)\":{\"notice\":\"Event emitted when the token holder wallet is set.\"}},\"kind\":\"user\",\"methods\":{\"ERC20_TOKEN()\":{\"notice\":\"a reference to the reward token contract\"},\"STAKING_POOL()\":{\"notice\":\"a reference to the staking pool contract\"},\"canClaim(bytes32,address,uint256)\":{\"notice\":\"Checks if a recipient can claim a reward for a given epoch id\"},\"claimAndStake(bytes32,address,uint256,bytes32[])\":{\"notice\":\"Claims the payout for a specific epoch and stake.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"claimed(bytes32)\":{\"notice\":\"leaf hash to claimed state\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"setTokenHolderWallet(address)\":{\"notice\":\"Sets the token holder wallet address.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"tokenHolderWallet()\":{\"notice\":\"The address of the token holder wallet.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol\":\"ERC20ClaimWindowMerkleClaim\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Hashes} from \\\"./Hashes.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n *\\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\\n * that access memory in an unsafe way.\\n *\\n * NOTE: This library supports proof verification for merkle trees built using\\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\\n * leaf inclusion in trees built using non-commutative hashing functions requires\\n * additional logic that is not supported by this library.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProof(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProofCalldata(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\"},\"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\ncontract ERC20ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];    \\n\\n    /// @notice The status of the claim\\n    enum ClaimError {\\n        NoError, // 0\\n        EpochIdNotExists, // 1\\n        OutOfClaimWindow, // 2\\n        AlreadyClaimed // 3\\n    }\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice a reference to the reward token contract\\n    IERC20SafeTransfers public immutable ERC20_TOKEN;\\n\\n    /// @notice a reference to the staking pool contract\\n    address public immutable STAKING_POOL;\\n\\n    /// @notice The address of the token holder wallet.\\n    address public tokenHolderWallet;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 epochId => ClaimWindow) public claimWindows;\\n\\n    /// @notice leaf hash to claimed state\\n    mapping(bytes32 leaf => bool claimed) public claimed;\\n\\n    /// @notice Event emitted when the token holder wallet is set.\\n    /// @param newTokenHolderWallet The address of the new token holder wallet.\\n    event TokenHolderWalletSet(address indexed newTokenHolderWallet);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    /// @param epochId The unique epoch ID associated with the specified claim window.\\n    /// @param merkleRoot The merkle root in the claim window.\\n    /// @param startTime The start time of the claim window.\\n    /// @param endTime The end time of the claim window.\\n    event EpochMerkleRootSet(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 indexed endTime);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param epochId The unique epoch ID associated with the claim window.\\n    /// @param root The merkle root of the claim window.\\n    /// @param recipient The recipient of the checkmate token.\\n    /// @param amount The amount of checkmate token is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, bytes32 indexed root, address indexed recipient, uint256 amount);\\n\\n    /// @notice Thrown when the checkmate token contract address is zero.\\n    error InvalidERC20Token();\\n\\n    /// @notice Thrown when the staking pool address is zero.\\n    error InvalidStakingPool();\\n\\n    /// @notice Thrown when the merkle root is zero.\\n    error InvalidMerkleRoot();\\n\\n    /// @notice Error thrown when the claim window is invalid.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient, uint256 amount);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the leaf has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, bytes32 leaf);\\n\\n    constructor(\\n        address erc20Token_,\\n        address stakingPool_,\\n        address tokenHolderWallet_,\\n        IForwarderRegistry forwarderRegistry_\\n    ) ForwarderRegistryContext(forwarderRegistry_) ContractOwnership(msg.sender) {\\n        if (erc20Token_ == address(0)) {\\n            revert InvalidERC20Token();\\n        }\\n        ERC20_TOKEN = IERC20SafeTransfers(erc20Token_);\\n\\n        if (stakingPool_ == address(0)) {\\n            revert InvalidStakingPool();\\n        }\\n        STAKING_POOL = stakingPool_;\\n\\n        tokenHolderWallet = tokenHolderWallet_;\\n        emit TokenHolderWalletSet(tokenHolderWallet_);\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if _msgSender() is not the owner.\\n     * @dev Reverts if the merkle root is zero.\\n     * @dev Reverts if the claim window is invalid.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a {EpochMerkleRootSet} event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (merkleRoot == bytes32(0)) {\\n            revert InvalidMerkleRoot();\\n        }\\n\\n        if (startTime >= endTime || endTime <= block.timestamp) {\\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\\n        }\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit EpochMerkleRootSet(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Sets the token holder wallet address.\\n     * @dev Reverts if _msgSender() is not the owner.\\n     * @dev Emits a {TokenHolderWalletSet} event.\\n     * @param newTokenHolderWallet The address of the new token holder wallet.\\n     */\\n    function setTokenHolderWallet(address newTokenHolderWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        tokenHolderWallet = newTokenHolderWallet;\\n        emit TokenHolderWalletSet(newTokenHolderWallet);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch and stake.\\n     * @dev Reverts with {EpochIdNotExists} if epoch id does not exist.\\n     * @dev Reverts with {OutOfClaimWindow} if current block time is beyond claim window.\\n     * @dev Reverts with {AlreadyClaimed} if the specified payout has already been claimed.\\n     * @dev Reverts with {InvalidProof} if the merkle proof has failed the verification.\\n     * @dev Reverts with {TransferFailed} if checkmate token transfer fails.\\n     * @dev Emits a {PayoutClaimed} event.\\n     * @param epochId The unique epoch ID associated with the claim window.\\n     * @param recipient The recipient of the checkmate token.\\n     * @param amount The amount of checkmate token to be claimed.\\n     * @param proof The Merkle proof for the claim.\\n     */\\n    function claimAndStake(bytes32 epochId, address recipient, uint256 amount, bytes32[] calldata proof) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, amount));\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n\\n        ClaimError canClaimResult = _canClaim(claimWindow, leaf);\\n        if (canClaimResult == ClaimError.EpochIdNotExists) {\\n            revert EpochIdNotExists(epochId);\\n        } else if (canClaimResult == ClaimError.OutOfClaimWindow) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        } else if (canClaimResult == ClaimError.AlreadyClaimed) {\\n            revert AlreadyClaimed(epochId, leaf);\\n        }\\n\\n        bytes32 root = claimWindow.merkleRoot;\\n        if (!proof.verifyCalldata(root, leaf)) {\\n            revert InvalidProof(epochId, recipient, amount);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        ERC20_TOKEN.safeTransferFrom(tokenHolderWallet, STAKING_POOL, amount, abi.encode(recipient));\\n        emit PayoutClaimed(epochId, root, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Checks if a recipient can claim a reward for a given epoch id\\n     * @param epochId The unique epoch ID associated with the claim window.\\n     * @param recipient The recipient of the checkmate token.\\n     * @param amount The amount of checkmate token to be claimed.\\n     */\\n    function canClaim(bytes32 epochId, address recipient, uint256 amount) external view returns (ClaimError) {\\n        return _canClaim(claimWindows[epochId], keccak256(abi.encodePacked(epochId, recipient, amount)));\\n    }\\n\\n    /**\\n     * @notice\\n     * 1) Returns ClaimError.EpochIdNotExists if merkle root of the claim window has not been set,\\n     * 2) Returns ClaimError.OutOfClaimWindow if current time is beyond start time and end time of the claim window,\\n     * 3) Returns ClaimError.AlreadyClaimed if recipient has already claimed,\\n     * 4) Returns ClaimError.ExceededMintSupply if number of token claimed equals to total supply, and\\n     * 5) Returns ClaimError.NoError otherwise.\\n     * @param claimWindow The claim window of the claim.\\n     * @param leaf The leaf of the claim.\\n     */\\n\\n    function _canClaim(ClaimWindow storage claimWindow, bytes32 leaf) internal view returns (ClaimError) {\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            return ClaimError.EpochIdNotExists;\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            return ClaimError.OutOfClaimWindow;\\n        }\\n        if (claimed[leaf]) {\\n            return ClaimError.AlreadyClaimed;\\n        }\\n\\n        return ClaimError.NoError;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x157b1e998aa99b4c5da87c9ec73f8080dcfc8a9ff9268c2df3ea45796fd23bf2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2203,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"tokenHolderWallet","offset":0,"slot":"0","type":"t_address"},{"astId":2209,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)2193_storage)"},{"astId":2214,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)2193_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)2193_storage"},"t_struct(ClaimWindow)2193_storage":{"encoding":"inplace","label":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow","members":[{"astId":2188,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2190,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":2192,"contract":"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol:ERC20ClaimWindowMerkleClaim","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,bytes32)":[{"notice":"Error thrown when the leaf has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidClaimWindow(uint256,uint256,uint256)":[{"notice":"Error thrown when the claim window is invalid."}],"InvalidERC20Token()":[{"notice":"Thrown when the checkmate token contract address is zero."}],"InvalidMerkleRoot()":[{"notice":"Thrown when the merkle root is zero."}],"InvalidProof(bytes32,address,uint256)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"InvalidStakingPool()":[{"notice":"Thrown when the staking pool address is zero."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,bytes32,address,uint256)":{"notice":"Emitted when a payout is claimed."},"TokenHolderWalletSet(address)":{"notice":"Event emitted when the token holder wallet is set."}},"kind":"user","methods":{"ERC20_TOKEN()":{"notice":"a reference to the reward token contract"},"STAKING_POOL()":{"notice":"a reference to the staking pool contract"},"canClaim(bytes32,address,uint256)":{"notice":"Checks if a recipient can claim a reward for a given epoch id"},"claimAndStake(bytes32,address,uint256,bytes32[])":{"notice":"Claims the payout for a specific epoch and stake."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"claimed(bytes32)":{"notice":"leaf hash to claimed state"},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"setTokenHolderWallet(address)":{"notice":"Sets the token holder wallet address."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"tokenHolderWallet()":{"notice":"The address of the token holder wallet."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol":{"ERC20ClaimWindowMerkleClaimMock":{"abi":[{"inputs":[{"internalType":"address","name":"erc20Token_","type":"address"},{"internalType":"address","name":"stakingPool_","type":"address"},{"internalType":"address","name":"tokenHolderWallet_","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry_","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdAlreadyExists","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"EpochIdNotExists","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"InvalidClaimWindow","type":"error"},{"inputs":[],"name":"InvalidERC20Token","type":"error"},{"inputs":[],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[],"name":"InvalidStakingPool","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"uint256","name":"currentTime","type":"uint256"}],"name":"OutOfClaimWindow","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"indexed":false,"internalType":"uint256","name":"startTime","type":"uint256"},{"indexed":true,"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"EpochMerkleRootSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"epochId","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"root","type":"bytes32"},{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"PayoutClaimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"newTokenHolderWallet","type":"address"}],"name":"TokenHolderWalletSet","type":"event"},{"inputs":[],"name":"ERC20_TOKEN","outputs":[{"internalType":"contract IERC20SafeTransfers","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_POOL","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"canClaim","outputs":[{"internalType":"enum ERC20ClaimWindowMerkleClaim.ClaimError","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"claimAndStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"}],"name":"claimWindows","outputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"name":"claimed","outputs":[{"internalType":"bool","name":"claimed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"epochId","type":"bytes32"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"uint256","name":"startTime","type":"uint256"},{"internalType":"uint256","name":"endTime","type":"uint256"}],"name":"setEpochMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newTokenHolderWallet","type":"address"}],"name":"setTokenHolderWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"tokenHolderWallet","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)":{"params":{"endTime":"The end time of the claim window.","epochId":"The unique epoch ID associated with the specified claim window.","merkleRoot":"The merkle root in the claim window.","startTime":"The start time of the claim window."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutClaimed(bytes32,bytes32,address,uint256)":{"params":{"amount":"The amount of checkmate token is claimed.","epochId":"The unique epoch ID associated with the claim window.","recipient":"The recipient of the checkmate token.","root":"The merkle root of the claim window."}},"TokenHolderWalletSet(address)":{"params":{"newTokenHolderWallet":"The address of the new token holder wallet."}}},"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"canClaim(bytes32,address,uint256)":{"params":{"amount":"The amount of checkmate token to be claimed.","epochId":"The unique epoch ID associated with the claim window.","recipient":"The recipient of the checkmate token."}},"claimAndStake(bytes32,address,uint256,bytes32[])":{"details":"Reverts with {EpochIdNotExists} if epoch id does not exist.Reverts with {OutOfClaimWindow} if current block time is beyond claim window.Reverts with {AlreadyClaimed} if the specified payout has already been claimed.Reverts with {InvalidProof} if the merkle proof has failed the verification.Reverts with {TransferFailed} if checkmate token transfer fails.Emits a {PayoutClaimed} event.","params":{"amount":"The amount of checkmate token to be claimed.","epochId":"The unique epoch ID associated with the claim window.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the checkmate token."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"details":"Reverts if _msgSender() is not the owner.Reverts if the merkle root is zero.Reverts if the claim window is invalid.Reverts if the epoch ID has already been set.Emits a {EpochMerkleRootSet} event.","params":{"endTime":"The end time of the claim window.","epochId":"The epoch ID for the claim.","merkleRoot":"The Merkle root of the claim.","startTime":"The start time of the claim window."}},"setTokenHolderWallet(address)":{"details":"Reverts if _msgSender() is not the owner.Emits a {TokenHolderWalletSet} event.","params":{"newTokenHolderWallet":"The address of the new token holder wallet."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_2352":{"entryPoint":null,"id":2352,"parameterSlots":4,"returnSlots":0},"@_2711":{"entryPoint":null,"id":2711,"parameterSlots":4,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_565":{"entryPoint":null,"id":565,"parameterSlots":1,"returnSlots":0},"@_612":{"entryPoint":null,"id":612,"parameterSlots":1,"returnSlots":0},"@constructorInit_237":{"entryPoint":308,"id":237,"parameterSlots":2,"returnSlots":0},"@layout_393":{"entryPoint":256,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":426,"id":541,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_495":{"entryPoint":472,"id":495,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory":{"entryPoint":588,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":683,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":564,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1062:26","nodeType":"YulBlock","src":"0:1062:26","statements":[{"nativeSrc":"6:3:26","nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nativeSrc":"59:86:26","nodeType":"YulBlock","src":"59:86:26","statements":[{"body":{"nativeSrc":"123:16:26","nodeType":"YulBlock","src":"123:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:26","nodeType":"YulLiteral","src":"132:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:26","nodeType":"YulLiteral","src":"135:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:26","nodeType":"YulIdentifier","src":"125:6:26"},"nativeSrc":"125:12:26","nodeType":"YulFunctionCall","src":"125:12:26"},"nativeSrc":"125:12:26","nodeType":"YulExpressionStatement","src":"125:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:26","nodeType":"YulIdentifier","src":"82:5:26"},{"arguments":[{"name":"value","nativeSrc":"93:5:26","nodeType":"YulIdentifier","src":"93:5:26"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:26","nodeType":"YulLiteral","src":"108:3:26","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:26","nodeType":"YulLiteral","src":"113:1:26","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:26","nodeType":"YulIdentifier","src":"104:3:26"},"nativeSrc":"104:11:26","nodeType":"YulFunctionCall","src":"104:11:26"},{"kind":"number","nativeSrc":"117:1:26","nodeType":"YulLiteral","src":"117:1:26","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:26","nodeType":"YulIdentifier","src":"100:3:26"},"nativeSrc":"100:19:26","nodeType":"YulFunctionCall","src":"100:19:26"}],"functionName":{"name":"and","nativeSrc":"89:3:26","nodeType":"YulIdentifier","src":"89:3:26"},"nativeSrc":"89:31:26","nodeType":"YulFunctionCall","src":"89:31:26"}],"functionName":{"name":"eq","nativeSrc":"79:2:26","nodeType":"YulIdentifier","src":"79:2:26"},"nativeSrc":"79:42:26","nodeType":"YulFunctionCall","src":"79:42:26"}],"functionName":{"name":"iszero","nativeSrc":"72:6:26","nodeType":"YulIdentifier","src":"72:6:26"},"nativeSrc":"72:50:26","nodeType":"YulFunctionCall","src":"72:50:26"},"nativeSrc":"69:70:26","nodeType":"YulIf","src":"69:70:26"}]},"name":"validator_revert_address","nativeSrc":"14:131:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:26","nodeType":"YulTypedName","src":"48:5:26","type":""}],"src":"14:131:26"},{"body":{"nativeSrc":"308:522:26","nodeType":"YulBlock","src":"308:522:26","statements":[{"body":{"nativeSrc":"355:16:26","nodeType":"YulBlock","src":"355:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"364:1:26","nodeType":"YulLiteral","src":"364:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"367:1:26","nodeType":"YulLiteral","src":"367:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"357:6:26","nodeType":"YulIdentifier","src":"357:6:26"},"nativeSrc":"357:12:26","nodeType":"YulFunctionCall","src":"357:12:26"},"nativeSrc":"357:12:26","nodeType":"YulExpressionStatement","src":"357:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"329:7:26","nodeType":"YulIdentifier","src":"329:7:26"},{"name":"headStart","nativeSrc":"338:9:26","nodeType":"YulIdentifier","src":"338:9:26"}],"functionName":{"name":"sub","nativeSrc":"325:3:26","nodeType":"YulIdentifier","src":"325:3:26"},"nativeSrc":"325:23:26","nodeType":"YulFunctionCall","src":"325:23:26"},{"kind":"number","nativeSrc":"350:3:26","nodeType":"YulLiteral","src":"350:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"321:3:26","nodeType":"YulIdentifier","src":"321:3:26"},"nativeSrc":"321:33:26","nodeType":"YulFunctionCall","src":"321:33:26"},"nativeSrc":"318:53:26","nodeType":"YulIf","src":"318:53:26"},{"nativeSrc":"380:29:26","nodeType":"YulVariableDeclaration","src":"380:29:26","value":{"arguments":[{"name":"headStart","nativeSrc":"399:9:26","nodeType":"YulIdentifier","src":"399:9:26"}],"functionName":{"name":"mload","nativeSrc":"393:5:26","nodeType":"YulIdentifier","src":"393:5:26"},"nativeSrc":"393:16:26","nodeType":"YulFunctionCall","src":"393:16:26"},"variables":[{"name":"value","nativeSrc":"384:5:26","nodeType":"YulTypedName","src":"384:5:26","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"443:5:26","nodeType":"YulIdentifier","src":"443:5:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"418:24:26","nodeType":"YulIdentifier","src":"418:24:26"},"nativeSrc":"418:31:26","nodeType":"YulFunctionCall","src":"418:31:26"},"nativeSrc":"418:31:26","nodeType":"YulExpressionStatement","src":"418:31:26"},{"nativeSrc":"458:15:26","nodeType":"YulAssignment","src":"458:15:26","value":{"name":"value","nativeSrc":"468:5:26","nodeType":"YulIdentifier","src":"468:5:26"},"variableNames":[{"name":"value0","nativeSrc":"458:6:26","nodeType":"YulIdentifier","src":"458:6:26"}]},{"nativeSrc":"482:40:26","nodeType":"YulVariableDeclaration","src":"482:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"507:9:26","nodeType":"YulIdentifier","src":"507:9:26"},{"kind":"number","nativeSrc":"518:2:26","nodeType":"YulLiteral","src":"518:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"503:3:26","nodeType":"YulIdentifier","src":"503:3:26"},"nativeSrc":"503:18:26","nodeType":"YulFunctionCall","src":"503:18:26"}],"functionName":{"name":"mload","nativeSrc":"497:5:26","nodeType":"YulIdentifier","src":"497:5:26"},"nativeSrc":"497:25:26","nodeType":"YulFunctionCall","src":"497:25:26"},"variables":[{"name":"value_1","nativeSrc":"486:7:26","nodeType":"YulTypedName","src":"486:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"556:7:26","nodeType":"YulIdentifier","src":"556:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"531:24:26","nodeType":"YulIdentifier","src":"531:24:26"},"nativeSrc":"531:33:26","nodeType":"YulFunctionCall","src":"531:33:26"},"nativeSrc":"531:33:26","nodeType":"YulExpressionStatement","src":"531:33:26"},{"nativeSrc":"573:17:26","nodeType":"YulAssignment","src":"573:17:26","value":{"name":"value_1","nativeSrc":"583:7:26","nodeType":"YulIdentifier","src":"583:7:26"},"variableNames":[{"name":"value1","nativeSrc":"573:6:26","nodeType":"YulIdentifier","src":"573:6:26"}]},{"nativeSrc":"599:40:26","nodeType":"YulVariableDeclaration","src":"599:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"624:9:26","nodeType":"YulIdentifier","src":"624:9:26"},{"kind":"number","nativeSrc":"635:2:26","nodeType":"YulLiteral","src":"635:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"620:3:26","nodeType":"YulIdentifier","src":"620:3:26"},"nativeSrc":"620:18:26","nodeType":"YulFunctionCall","src":"620:18:26"}],"functionName":{"name":"mload","nativeSrc":"614:5:26","nodeType":"YulIdentifier","src":"614:5:26"},"nativeSrc":"614:25:26","nodeType":"YulFunctionCall","src":"614:25:26"},"variables":[{"name":"value_2","nativeSrc":"603:7:26","nodeType":"YulTypedName","src":"603:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"673:7:26","nodeType":"YulIdentifier","src":"673:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"648:24:26","nodeType":"YulIdentifier","src":"648:24:26"},"nativeSrc":"648:33:26","nodeType":"YulFunctionCall","src":"648:33:26"},"nativeSrc":"648:33:26","nodeType":"YulExpressionStatement","src":"648:33:26"},{"nativeSrc":"690:17:26","nodeType":"YulAssignment","src":"690:17:26","value":{"name":"value_2","nativeSrc":"700:7:26","nodeType":"YulIdentifier","src":"700:7:26"},"variableNames":[{"name":"value2","nativeSrc":"690:6:26","nodeType":"YulIdentifier","src":"690:6:26"}]},{"nativeSrc":"716:40:26","nodeType":"YulVariableDeclaration","src":"716:40:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"741:9:26","nodeType":"YulIdentifier","src":"741:9:26"},{"kind":"number","nativeSrc":"752:2:26","nodeType":"YulLiteral","src":"752:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"737:3:26","nodeType":"YulIdentifier","src":"737:3:26"},"nativeSrc":"737:18:26","nodeType":"YulFunctionCall","src":"737:18:26"}],"functionName":{"name":"mload","nativeSrc":"731:5:26","nodeType":"YulIdentifier","src":"731:5:26"},"nativeSrc":"731:25:26","nodeType":"YulFunctionCall","src":"731:25:26"},"variables":[{"name":"value_3","nativeSrc":"720:7:26","nodeType":"YulTypedName","src":"720:7:26","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"790:7:26","nodeType":"YulIdentifier","src":"790:7:26"}],"functionName":{"name":"validator_revert_address","nativeSrc":"765:24:26","nodeType":"YulIdentifier","src":"765:24:26"},"nativeSrc":"765:33:26","nodeType":"YulFunctionCall","src":"765:33:26"},"nativeSrc":"765:33:26","nodeType":"YulExpressionStatement","src":"765:33:26"},{"nativeSrc":"807:17:26","nodeType":"YulAssignment","src":"807:17:26","value":{"name":"value_3","nativeSrc":"817:7:26","nodeType":"YulIdentifier","src":"817:7:26"},"variableNames":[{"name":"value3","nativeSrc":"807:6:26","nodeType":"YulIdentifier","src":"807:6:26"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory","nativeSrc":"150:680:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"250:9:26","nodeType":"YulTypedName","src":"250:9:26","type":""},{"name":"dataEnd","nativeSrc":"261:7:26","nodeType":"YulTypedName","src":"261:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"273:6:26","nodeType":"YulTypedName","src":"273:6:26","type":""},{"name":"value1","nativeSrc":"281:6:26","nodeType":"YulTypedName","src":"281:6:26","type":""},{"name":"value2","nativeSrc":"289:6:26","nodeType":"YulTypedName","src":"289:6:26","type":""},{"name":"value3","nativeSrc":"297:6:26","nodeType":"YulTypedName","src":"297:6:26","type":""}],"src":"150:680:26"},{"body":{"nativeSrc":"884:176:26","nodeType":"YulBlock","src":"884:176:26","statements":[{"nativeSrc":"894:17:26","nodeType":"YulAssignment","src":"894:17:26","value":{"arguments":[{"name":"x","nativeSrc":"906:1:26","nodeType":"YulIdentifier","src":"906:1:26"},{"name":"y","nativeSrc":"909:1:26","nodeType":"YulIdentifier","src":"909:1:26"}],"functionName":{"name":"sub","nativeSrc":"902:3:26","nodeType":"YulIdentifier","src":"902:3:26"},"nativeSrc":"902:9:26","nodeType":"YulFunctionCall","src":"902:9:26"},"variableNames":[{"name":"diff","nativeSrc":"894:4:26","nodeType":"YulIdentifier","src":"894:4:26"}]},{"body":{"nativeSrc":"943:111:26","nodeType":"YulBlock","src":"943:111:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"964:1:26","nodeType":"YulLiteral","src":"964:1:26","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"971:3:26","nodeType":"YulLiteral","src":"971:3:26","type":"","value":"224"},{"kind":"number","nativeSrc":"976:10:26","nodeType":"YulLiteral","src":"976:10:26","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"967:3:26","nodeType":"YulIdentifier","src":"967:3:26"},"nativeSrc":"967:20:26","nodeType":"YulFunctionCall","src":"967:20:26"}],"functionName":{"name":"mstore","nativeSrc":"957:6:26","nodeType":"YulIdentifier","src":"957:6:26"},"nativeSrc":"957:31:26","nodeType":"YulFunctionCall","src":"957:31:26"},"nativeSrc":"957:31:26","nodeType":"YulExpressionStatement","src":"957:31:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1008:1:26","nodeType":"YulLiteral","src":"1008:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"1011:4:26","nodeType":"YulLiteral","src":"1011:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1001:6:26","nodeType":"YulIdentifier","src":"1001:6:26"},"nativeSrc":"1001:15:26","nodeType":"YulFunctionCall","src":"1001:15:26"},"nativeSrc":"1001:15:26","nodeType":"YulExpressionStatement","src":"1001:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1036:1:26","nodeType":"YulLiteral","src":"1036:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"1039:4:26","nodeType":"YulLiteral","src":"1039:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1029:6:26","nodeType":"YulIdentifier","src":"1029:6:26"},"nativeSrc":"1029:15:26","nodeType":"YulFunctionCall","src":"1029:15:26"},"nativeSrc":"1029:15:26","nodeType":"YulExpressionStatement","src":"1029:15:26"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"926:4:26","nodeType":"YulIdentifier","src":"926:4:26"},{"name":"x","nativeSrc":"932:1:26","nodeType":"YulIdentifier","src":"932:1:26"}],"functionName":{"name":"gt","nativeSrc":"923:2:26","nodeType":"YulIdentifier","src":"923:2:26"},"nativeSrc":"923:11:26","nodeType":"YulFunctionCall","src":"923:11:26"},"nativeSrc":"920:134:26","nodeType":"YulIf","src":"920:134:26"}]},"name":"checked_sub_t_uint256","nativeSrc":"835:225:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"866:1:26","nodeType":"YulTypedName","src":"866:1:26","type":""},{"name":"y","nativeSrc":"869:1:26","nodeType":"YulTypedName","src":"869:1:26","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"875:4:26","nodeType":"YulTypedName","src":"875:4:26","type":""}],"src":"835:225:26"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_contract$_IForwarderRegistry_$747_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        let value_3 := mload(add(headStart, 96))\n        validator_revert_address(value_3)\n        value3 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e060405234801561001057600080fd5b5060405161174d38038061174d83398101604081905261002f9161024c565b6001600160a01b03811660805283838383336100538161004d610100565b90610134565b506001600160a01b03841661007b576040516326412d8960e21b815260040160405180910390fd5b6001600160a01b0380851660a05283166100a857604051633b106f8560e01b815260040160405180910390fd5b6001600160a01b0383811660c052600080546001600160a01b03191691841691821781556040517f329827290d5ca169f07779e969ad40b6df3087f6c12c9467c96f1a88316a5bdb9190a250505050505050506102cc565b60008061012e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6102ab565b92915050565b6001600160a01b0381161561018a5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101a66307f5828d60e41b600161019f6101aa565b91906101d8565b5050565b60008061012e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6102ab565b600160e01b6001600160e01b0319831601610206576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b038116811461024957600080fd5b50565b6000806000806080858703121561026257600080fd5b845161026d81610234565b602086015190945061027e81610234565b604086015190935061028f81610234565b60608601519092506102a081610234565b939692955090935050565b8181038181111561012e57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05161142161032c60003960008181610147015261072b0152600081816102de01526106fe015260008181610190015281816101ed01528181610d0d01528181610d9b01528181610e4e0152610e8c01526114216000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063cc3c0f0611610097578063ec7f749411610066578063ec7f7494146102c6578063efc4c631146102d9578063f2fde38b14610300578063fbb0f6731461031357600080fd5b8063cc3c0f0614610232578063d1a91ff214610255578063d6a3138b1461025d578063dc45def61461027d57600080fd5b806331e66e1e116100d357806331e66e1e146101b4578063563cac28146101ca578063572b6c05146101dd5780638da5cb5b1461022a57600080fd5b806301ffc9a7146101055780630328a8fc1461012d57806314ae36ae146101425780632b4c9f161461018e575b600080fd5b61011861011336600461102c565b610333565b60405190151581526020015b60405180910390f35b61014061013b36600461106e565b61034d565b005b6101697f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610124565b7f0000000000000000000000000000000000000000000000000000000000000000610169565b6101bc6104c2565b6040516101249291906110a0565b6101406101d8366004611116565b6104d5565b6101186101eb3660046111af565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b610169610844565b6101186102403660046111ca565b60026020526000908152604090205460ff1681565b610169610870565b61027061026b3660046111e3565b61087a565b6040516101249190611248565b6102ab61028b3660046111ca565b600160208190526000918252604090912080549181015460029091015483565b60408051938452602084019290925290820152606001610124565b6101406102d43660046111af565b6108f2565b6101697f000000000000000000000000000000000000000000000000000000000000000081565b61014061030e3660046111af565b61096a565b6000546101699073ffffffffffffffffffffffffffffffffffffffff1681565b600061034782610341610988565b906109b6565b92915050565b610366610358610a90565b610360610a9a565b90610ac8565b8261039d576040517f9dd854d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80821015806103ac5750428111155b156103f8576040517f790c7cef00000000000000000000000000000000000000000000000000000000815260048101839052602481018290524260448201526064015b60405180910390fd5b60008481526001602052604090205415610441576040517fed10979d000000000000000000000000000000000000000000000000000000008152600481018590526024016103ef565b60408051606081018252848152602080820185815282840185815260008981526001938490528590209351845590519183019190915551600290910155518190849086907f97df4a2fb6656595bc6eb616c2068e9d50031428ef69d8849590bc9f3dec620b906104b49087815260200190565b60405180910390a450505050565b3660006104cd610b37565b915091509091565b604080516020808201889052606087901b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016828401526054808301879052835180840390910181526074909201835281519181019190912060008881526001909252918120906105468284610b42565b9050600181600381111561055c5761055c611219565b03610596576040517f84f229dc000000000000000000000000000000000000000000000000000000008152600481018990526024016103ef565b60028160038111156105aa576105aa611219565b036105ea576040517fdbeb4f4d000000000000000000000000000000000000000000000000000000008152600481018990524260248201526044016103ef565b60038160038111156105fe576105fe611219565b0361063f576040517fdc20789f00000000000000000000000000000000000000000000000000000000815260048101899052602481018490526044016103ef565b815461064d86868387610b9d565b6106a9576040517fcc55900d000000000000000000000000000000000000000000000000000000008152600481018a905273ffffffffffffffffffffffffffffffffffffffff89166024820152604481018890526064016103ef565b600084815260026020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559154915173ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169363b88d4fde939116917f0000000000000000000000000000000000000000000000000000000000000000918c91610775918f910173ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b6040516020818303038152906040526040518563ffffffff1660e01b81526004016107a39493929190611289565b6020604051808303816000875af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e69190611336565b508773ffffffffffffffffffffffffffffffffffffffff16818a7f06da15703c9baa6922f6a2f40fe90a03f70a24b9113edd75f913454a45d996cd8a60405161083191815260200190565b60405180910390a4505050505050505050565b600061086b610851610a9a565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600061086b610a90565b600083815260016020908152604080832081519283018790527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606087901b1691830191909152605482018490526108ea9160740160405160208183030381529060405280519060200120610b42565b949350505050565b6108fd610358610a90565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117825560405190917f329827290d5ca169f07779e969ad40b6df3087f6c12c9467c96f1a88316a5bdb91a250565b610985610975610a90565b8261097e610a9a565b9190610bb5565b50565b60008061034760017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611358565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a0657506000610347565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a5757506001610347565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600061086b610cca565b60008061034760017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611358565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610b33576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016103ef565b5050565b3660006104cd610e17565b8154600090610b5357506001610347565b8260010154421080610b685750826002015442115b15610b7557506002610347565b60008281526002602052604090205460ff1615610b9457506003610347565b50600092915050565b600082610bab868685610f87565b1495945050505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610c22576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016103ef565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cc45783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600033321480610cda5750601836105b15610ce457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610e0657506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa158015610de2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e069190611336565b15610e1057919050565b3391505090565b36600033321480610e285750601836105b15610e365750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480610f71575073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663019a2028367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152306044820152606401602060405180830381865afa158015610f4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f719190611336565b15610f7e576104cd610fc9565b50600091369150565b600081815b84811015610fc057610fb682878784818110610faa57610faa611392565b90506020020135610ffa565b9150600101610f8c565b50949350505050565b3660006104cd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec83018284816113c1565b6000818310611016576000828152602084905260409020611025565b60008381526020839052604090205b9392505050565b60006020828403121561103e57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461102557600080fd5b6000806000806080858703121561108457600080fd5b5050823594602084013594506040840135936060013592509050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461111157600080fd5b919050565b60008060008060006080868803121561112e57600080fd5b8535945061113e602087016110ed565b935060408601359250606086013567ffffffffffffffff81111561116157600080fd5b8601601f8101881361117257600080fd5b803567ffffffffffffffff81111561118957600080fd5b8860208260051b840101111561119e57600080fd5b959894975092955050506020019190565b6000602082840312156111c157600080fd5b611025826110ed565b6000602082840312156111dc57600080fd5b5035919050565b6000806000606084860312156111f857600080fd5b83359250611208602085016110ed565b929592945050506040919091013590565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160048310611283577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b73ffffffffffffffffffffffffffffffffffffffff8516815273ffffffffffffffffffffffffffffffffffffffff84166020820152826040820152608060608201526000825180608084015260005b818110156112f557602081860181015160a08684010152016112d8565b50600060a0828501015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505095945050505050565b60006020828403121561134857600080fd5b8151801515811461102557600080fd5b81810381811115610347577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080858511156113d157600080fd5b838611156113de57600080fd5b505082019391909203915056fea2646970667358221220e87597b3be084ff56941d09115accd7e918be850b5cb9139c6fff7b5a7b8858064736f6c634300081c0033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x174D CODESIZE SUB DUP1 PUSH2 0x174D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x24C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP4 DUP4 DUP4 DUP4 CALLER PUSH2 0x53 DUP2 PUSH2 0x4D PUSH2 0x100 JUMP JUMPDEST SWAP1 PUSH2 0x134 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x7B JUMPI PUSH1 0x40 MLOAD PUSH4 0x26412D89 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0xA0 MSTORE DUP4 AND PUSH2 0xA8 JUMPI PUSH1 0x40 MLOAD PUSH4 0x3B106F85 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0xC0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 DUP5 AND SWAP2 DUP3 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 SWAP1 LOG2 POP POP POP POP POP POP POP POP PUSH2 0x2CC JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2AB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x18A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x1A6 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x19F PUSH2 0x1AA JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1D8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x12E PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2AB JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x206 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x249 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x262 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x26D DUP2 PUSH2 0x234 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x27E DUP2 PUSH2 0x234 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH2 0x28F DUP2 PUSH2 0x234 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH2 0x2A0 DUP2 PUSH2 0x234 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x12E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x1421 PUSH2 0x32C PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x147 ADD MSTORE PUSH2 0x72B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2DE ADD MSTORE PUSH2 0x6FE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x190 ADD MSTORE DUP2 DUP2 PUSH2 0x1ED ADD MSTORE DUP2 DUP2 PUSH2 0xD0D ADD MSTORE DUP2 DUP2 PUSH2 0xD9B ADD MSTORE DUP2 DUP2 PUSH2 0xE4E ADD MSTORE PUSH2 0xE8C ADD MSTORE PUSH2 0x1421 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC3C0F06 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEC7F7494 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEC7F7494 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEFC4C631 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0xFBB0F673 EQ PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xD6A3138B EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x563CAC28 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x14AE36AE EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x102C JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x169 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x169 JUMP JUMPDEST PUSH2 0x1BC PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP3 SWAP2 SWAP1 PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x844 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x11CA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x87A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x11CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x8F2 JUMP JUMPDEST PUSH2 0x169 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x169 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x347 DUP3 PUSH2 0x341 PUSH2 0x988 JUMP JUMPDEST SWAP1 PUSH2 0x9B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x366 PUSH2 0x358 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x360 PUSH2 0xA9A JUMP JUMPDEST SWAP1 PUSH2 0xAC8 JUMP JUMPDEST DUP3 PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x9DD854D300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x3AC JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 SWAP1 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE MLOAD DUP2 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH32 0x97DF4A2FB6656595BC6EB616C2068E9D50031428EF69D8849590BC9F3DEC620B SWAP1 PUSH2 0x4B4 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH2 0xB37 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP8 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP3 DUP5 ADD MSTORE PUSH1 0x54 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x74 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 SWAP1 PUSH2 0x546 DUP3 DUP5 PUSH2 0xB42 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x55C JUMPI PUSH2 0x55C PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5AA JUMPI PUSH2 0x5AA PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5FE JUMPI PUSH2 0x5FE PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x63F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC20789F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3EF JUMP JUMPDEST DUP2 SLOAD PUSH2 0x64D DUP7 DUP7 DUP4 DUP8 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x6A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCC55900D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND SWAP4 PUSH4 0xB88D4FDE SWAP4 SWAP2 AND SWAP2 PUSH32 0x0 SWAP2 DUP13 SWAP2 PUSH2 0x775 SWAP2 DUP16 SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1289 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E6 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP11 PUSH32 0x6DA15703C9BAA6922F6A2F40FE90A03F70A24B9113EDD75F913454A45D996CD DUP11 PUSH1 0x40 MLOAD PUSH2 0x831 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0x851 PUSH2 0xA9A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP3 ADD DUP5 SWAP1 MSTORE PUSH2 0x8EA SWAP2 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xB42 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8FD PUSH2 0x358 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x985 PUSH2 0x975 PUSH2 0xA90 JUMP JUMPDEST DUP3 PUSH2 0x97E PUSH2 0xA9A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x347 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1358 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA06 JUMPI POP PUSH1 0x0 PUSH2 0x347 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA57 JUMPI POP PUSH1 0x1 PUSH2 0x347 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x347 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1358 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xB33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH2 0xE17 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xB53 JUMPI POP PUSH1 0x1 PUSH2 0x347 JUMP JUMPDEST DUP3 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0xB68 JUMPI POP DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xB75 JUMPI POP PUSH1 0x2 PUSH2 0x347 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB94 JUMPI POP PUSH1 0x3 PUSH2 0x347 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBAB DUP7 DUP7 DUP6 PUSH2 0xF87 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCDA JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCE4 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE06 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE06 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST ISZERO PUSH2 0xE10 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE28 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE36 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xF71 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x19A2028 CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF71 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST ISZERO PUSH2 0xF7E JUMPI PUSH2 0x4CD PUSH2 0xFC9 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xFC0 JUMPI PUSH2 0xFB6 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xFAA JUMPI PUSH2 0xFAA PUSH2 0x1392 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xFFA JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xF8C JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x13C1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1016 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1025 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x112E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x113E PUSH1 0x20 DUP8 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x119E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1025 DUP3 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x1208 PUSH1 0x20 DUP6 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x1283 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x12D8 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x13DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 PUSH22 0x97B3BE084FF56941D09115ACCD7E918BE850B5CB9139 0xC6 SELFDESTRUCT 0xF7 0xB5 0xA7 0xB8 DUP6 DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"268:644:25:-:0;;;346:257;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;534:11:25;547:12;561:18;581;4415:10:24;1008:63:0;4415:10:24;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;4441:25:24;::::2;4437:82;;4489:19;;-1:-1:-1::0;;;4489:19:24::2;;;;;;;;;;;4437:82;-1:-1:-1::0;;;;;4528:46:24;;::::2;;::::0;4589:26;::::2;4585:84;;4638:20;;-1:-1:-1::0;;;4638:20:24::2;;;;;;;;;;;4585:84;-1:-1:-1::0;;;;;4678:27:24;;::::2;;::::0;4716:17:::2;:38:::0;;-1:-1:-1;;;;;;4716:38:24::2;::::0;;::::2;::::0;;::::2;::::0;;4769:40:::2;::::0;::::2;::::0;4716:17;4769:40:::2;4192:624:::0;;;;346:257:25;;;;268:644;;5060:174:6;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:6:o;1561:341::-;-1:-1:-1;;;;;1649:26:6;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:6;-1:-1:-1;;;;;1691:30:6;;;;;;;1740:46;;-1:-1:-1;;1740:46:6;;-1:-1:-1;;1740:46:6;1645:152;1806:89;-1:-1:-1;;;1890:4:6;1806:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1561:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:131:26:-;-1:-1:-1;;;;;89:31:26;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:680::-;273:6;281;289;297;350:3;338:9;329:7;325:23;321:33;318:53;;;367:1;364;357:12;318:53;399:9;393:16;418:31;443:5;418:31;:::i;:::-;518:2;503:18;;497:25;468:5;;-1:-1:-1;531:33:26;497:25;531:33;:::i;:::-;635:2;620:18;;614:25;583:7;;-1:-1:-1;648:33:26;614:25;648:33;:::i;:::-;752:2;737:18;;731:25;700:7;;-1:-1:-1;765:33:26;731:25;765:33;:::i;:::-;150:680;;;;-1:-1:-1;150:680:26;;-1:-1:-1;;150:680:26:o;835:225::-;902:9;;;923:11;;;920:134;;;976:10;971:3;967:20;964:1;957:31;1011:4;1008:1;1001:15;1039:4;1036:1;1029:15;835:225;268:644:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@ERC20_TOKEN_2197":{"entryPoint":null,"id":2197,"parameterSlots":0,"returnSlots":0},"@STAKING_POOL_2200":{"entryPoint":null,"id":2200,"parameterSlots":0,"returnSlots":0},"@__msgData_2730":{"entryPoint":1218,"id":2730,"parameterSlots":0,"returnSlots":2},"@__msgSender_2720":{"entryPoint":2160,"id":2720,"parameterSlots":0,"returnSlots":1},"@_canClaim_2655":{"entryPoint":2882,"id":2655,"parameterSlots":2,"returnSlots":1},"@_efficientKeccak256_1075":{"entryPoint":null,"id":1075,"parameterSlots":2,"returnSlots":1},"@_msgData_2683":{"entryPoint":2871,"id":2683,"parameterSlots":0,"returnSlots":2},"@_msgData_718":{"entryPoint":3607,"id":718,"parameterSlots":0,"returnSlots":2},"@_msgSender_2669":{"entryPoint":2704,"id":2669,"parameterSlots":0,"returnSlots":1},"@_msgSender_666":{"entryPoint":3274,"id":666,"parameterSlots":0,"returnSlots":1},"@canClaim_2603":{"entryPoint":2170,"id":2603,"parameterSlots":3,"returnSlots":1},"@claimAndStake_2575":{"entryPoint":1237,"id":2575,"parameterSlots":5,"returnSlots":0},"@claimWindows_2209":{"entryPoint":null,"id":2209,"parameterSlots":0,"returnSlots":0},"@claimed_2214":{"entryPoint":null,"id":2214,"parameterSlots":0,"returnSlots":0},"@commutativeKeccak256_1063":{"entryPoint":4090,"id":1063,"parameterSlots":2,"returnSlots":1},"@enforceIsContractOwner_361":{"entryPoint":2760,"id":361,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_574":{"entryPoint":null,"id":574,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_590":{"entryPoint":null,"id":590,"parameterSlots":1,"returnSlots":1},"@layout_393":{"entryPoint":2714,"id":393,"parameterSlots":0,"returnSlots":1},"@layout_541":{"entryPoint":2440,"id":541,"parameterSlots":0,"returnSlots":1},"@msgData_775":{"entryPoint":4041,"id":775,"parameterSlots":0,"returnSlots":2},"@msgSender_758":{"entryPoint":null,"id":758,"parameterSlots":0,"returnSlots":1},"@owner_314":{"entryPoint":null,"id":314,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":2116,"id":62,"parameterSlots":0,"returnSlots":1},"@processProofCalldata_1290":{"entryPoint":3975,"id":1290,"parameterSlots":3,"returnSlots":1},"@setEpochMerkleRoot_2434":{"entryPoint":845,"id":2434,"parameterSlots":4,"returnSlots":0},"@setTokenHolderWallet_2458":{"entryPoint":2290,"id":2458,"parameterSlots":1,"returnSlots":0},"@supportsInterface_423":{"entryPoint":819,"id":423,"parameterSlots":1,"returnSlots":1},"@supportsInterface_529":{"entryPoint":2486,"id":529,"parameterSlots":2,"returnSlots":1},"@tokenHolderWallet_2203":{"entryPoint":null,"id":2203,"parameterSlots":0,"returnSlots":0},"@transferOwnership_301":{"entryPoint":2997,"id":301,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2410,"id":79,"parameterSlots":1,"returnSlots":0},"@verifyCalldata_1249":{"entryPoint":2973,"id":1249,"parameterSlots":4,"returnSlots":1},"abi_decode_address":{"entryPoint":4333,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":4527,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4918,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4554,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_addresst_uint256":{"entryPoint":4579,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr":{"entryPoint":4374,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256":{"entryPoint":4206,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":4140,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4745,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":4256,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed":{"entryPoint":4680,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":5057,"id":null,"parameterSlots":4,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":4952,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":4633,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5010,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9656:26","nodeType":"YulBlock","src":"0:9656:26","statements":[{"nativeSrc":"6:3:26","nodeType":"YulBlock","src":"6:3:26","statements":[]},{"body":{"nativeSrc":"83:263:26","nodeType":"YulBlock","src":"83:263:26","statements":[{"body":{"nativeSrc":"129:16:26","nodeType":"YulBlock","src":"129:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:26","nodeType":"YulLiteral","src":"138:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:26","nodeType":"YulLiteral","src":"141:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:26","nodeType":"YulIdentifier","src":"131:6:26"},"nativeSrc":"131:12:26","nodeType":"YulFunctionCall","src":"131:12:26"},"nativeSrc":"131:12:26","nodeType":"YulExpressionStatement","src":"131:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:26","nodeType":"YulIdentifier","src":"104:7:26"},{"name":"headStart","nativeSrc":"113:9:26","nodeType":"YulIdentifier","src":"113:9:26"}],"functionName":{"name":"sub","nativeSrc":"100:3:26","nodeType":"YulIdentifier","src":"100:3:26"},"nativeSrc":"100:23:26","nodeType":"YulFunctionCall","src":"100:23:26"},{"kind":"number","nativeSrc":"125:2:26","nodeType":"YulLiteral","src":"125:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:26","nodeType":"YulIdentifier","src":"96:3:26"},"nativeSrc":"96:32:26","nodeType":"YulFunctionCall","src":"96:32:26"},"nativeSrc":"93:52:26","nodeType":"YulIf","src":"93:52:26"},{"nativeSrc":"154:36:26","nodeType":"YulVariableDeclaration","src":"154:36:26","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:26","nodeType":"YulIdentifier","src":"180:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:26","nodeType":"YulIdentifier","src":"167:12:26"},"nativeSrc":"167:23:26","nodeType":"YulFunctionCall","src":"167:23:26"},"variables":[{"name":"value","nativeSrc":"158:5:26","nodeType":"YulTypedName","src":"158:5:26","type":""}]},{"body":{"nativeSrc":"300:16:26","nodeType":"YulBlock","src":"300:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:26","nodeType":"YulLiteral","src":"309:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:26","nodeType":"YulLiteral","src":"312:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:26","nodeType":"YulIdentifier","src":"302:6:26"},"nativeSrc":"302:12:26","nodeType":"YulFunctionCall","src":"302:12:26"},"nativeSrc":"302:12:26","nodeType":"YulExpressionStatement","src":"302:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:26","nodeType":"YulIdentifier","src":"212:5:26"},{"arguments":[{"name":"value","nativeSrc":"223:5:26","nodeType":"YulIdentifier","src":"223:5:26"},{"kind":"number","nativeSrc":"230:66:26","nodeType":"YulLiteral","src":"230:66:26","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:26","nodeType":"YulIdentifier","src":"219:3:26"},"nativeSrc":"219:78:26","nodeType":"YulFunctionCall","src":"219:78:26"}],"functionName":{"name":"eq","nativeSrc":"209:2:26","nodeType":"YulIdentifier","src":"209:2:26"},"nativeSrc":"209:89:26","nodeType":"YulFunctionCall","src":"209:89:26"}],"functionName":{"name":"iszero","nativeSrc":"202:6:26","nodeType":"YulIdentifier","src":"202:6:26"},"nativeSrc":"202:97:26","nodeType":"YulFunctionCall","src":"202:97:26"},"nativeSrc":"199:117:26","nodeType":"YulIf","src":"199:117:26"},{"nativeSrc":"325:15:26","nodeType":"YulAssignment","src":"325:15:26","value":{"name":"value","nativeSrc":"335:5:26","nodeType":"YulIdentifier","src":"335:5:26"},"variableNames":[{"name":"value0","nativeSrc":"325:6:26","nodeType":"YulIdentifier","src":"325:6:26"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:26","nodeType":"YulTypedName","src":"49:9:26","type":""},{"name":"dataEnd","nativeSrc":"60:7:26","nodeType":"YulTypedName","src":"60:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:26","nodeType":"YulTypedName","src":"72:6:26","type":""}],"src":"14:332:26"},{"body":{"nativeSrc":"446:92:26","nodeType":"YulBlock","src":"446:92:26","statements":[{"nativeSrc":"456:26:26","nodeType":"YulAssignment","src":"456:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:26","nodeType":"YulIdentifier","src":"468:9:26"},{"kind":"number","nativeSrc":"479:2:26","nodeType":"YulLiteral","src":"479:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:26","nodeType":"YulIdentifier","src":"464:3:26"},"nativeSrc":"464:18:26","nodeType":"YulFunctionCall","src":"464:18:26"},"variableNames":[{"name":"tail","nativeSrc":"456:4:26","nodeType":"YulIdentifier","src":"456:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:26","nodeType":"YulIdentifier","src":"498:9:26"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:26","nodeType":"YulIdentifier","src":"523:6:26"}],"functionName":{"name":"iszero","nativeSrc":"516:6:26","nodeType":"YulIdentifier","src":"516:6:26"},"nativeSrc":"516:14:26","nodeType":"YulFunctionCall","src":"516:14:26"}],"functionName":{"name":"iszero","nativeSrc":"509:6:26","nodeType":"YulIdentifier","src":"509:6:26"},"nativeSrc":"509:22:26","nodeType":"YulFunctionCall","src":"509:22:26"}],"functionName":{"name":"mstore","nativeSrc":"491:6:26","nodeType":"YulIdentifier","src":"491:6:26"},"nativeSrc":"491:41:26","nodeType":"YulFunctionCall","src":"491:41:26"},"nativeSrc":"491:41:26","nodeType":"YulExpressionStatement","src":"491:41:26"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:26","nodeType":"YulTypedName","src":"415:9:26","type":""},{"name":"value0","nativeSrc":"426:6:26","nodeType":"YulTypedName","src":"426:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:26","nodeType":"YulTypedName","src":"437:4:26","type":""}],"src":"351:187:26"},{"body":{"nativeSrc":"664:466:26","nodeType":"YulBlock","src":"664:466:26","statements":[{"body":{"nativeSrc":"711:16:26","nodeType":"YulBlock","src":"711:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"720:1:26","nodeType":"YulLiteral","src":"720:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"723:1:26","nodeType":"YulLiteral","src":"723:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"713:6:26","nodeType":"YulIdentifier","src":"713:6:26"},"nativeSrc":"713:12:26","nodeType":"YulFunctionCall","src":"713:12:26"},"nativeSrc":"713:12:26","nodeType":"YulExpressionStatement","src":"713:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"685:7:26","nodeType":"YulIdentifier","src":"685:7:26"},{"name":"headStart","nativeSrc":"694:9:26","nodeType":"YulIdentifier","src":"694:9:26"}],"functionName":{"name":"sub","nativeSrc":"681:3:26","nodeType":"YulIdentifier","src":"681:3:26"},"nativeSrc":"681:23:26","nodeType":"YulFunctionCall","src":"681:23:26"},{"kind":"number","nativeSrc":"706:3:26","nodeType":"YulLiteral","src":"706:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"677:3:26","nodeType":"YulIdentifier","src":"677:3:26"},"nativeSrc":"677:33:26","nodeType":"YulFunctionCall","src":"677:33:26"},"nativeSrc":"674:53:26","nodeType":"YulIf","src":"674:53:26"},{"nativeSrc":"736:14:26","nodeType":"YulVariableDeclaration","src":"736:14:26","value":{"kind":"number","nativeSrc":"749:1:26","nodeType":"YulLiteral","src":"749:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"740:5:26","nodeType":"YulTypedName","src":"740:5:26","type":""}]},{"nativeSrc":"759:32:26","nodeType":"YulAssignment","src":"759:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"781:9:26","nodeType":"YulIdentifier","src":"781:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"768:12:26","nodeType":"YulIdentifier","src":"768:12:26"},"nativeSrc":"768:23:26","nodeType":"YulFunctionCall","src":"768:23:26"},"variableNames":[{"name":"value","nativeSrc":"759:5:26","nodeType":"YulIdentifier","src":"759:5:26"}]},{"nativeSrc":"800:15:26","nodeType":"YulAssignment","src":"800:15:26","value":{"name":"value","nativeSrc":"810:5:26","nodeType":"YulIdentifier","src":"810:5:26"},"variableNames":[{"name":"value0","nativeSrc":"800:6:26","nodeType":"YulIdentifier","src":"800:6:26"}]},{"nativeSrc":"824:16:26","nodeType":"YulVariableDeclaration","src":"824:16:26","value":{"kind":"number","nativeSrc":"839:1:26","nodeType":"YulLiteral","src":"839:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"828:7:26","nodeType":"YulTypedName","src":"828:7:26","type":""}]},{"nativeSrc":"849:43:26","nodeType":"YulAssignment","src":"849:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"877:9:26","nodeType":"YulIdentifier","src":"877:9:26"},{"kind":"number","nativeSrc":"888:2:26","nodeType":"YulLiteral","src":"888:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"873:3:26","nodeType":"YulIdentifier","src":"873:3:26"},"nativeSrc":"873:18:26","nodeType":"YulFunctionCall","src":"873:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"860:12:26","nodeType":"YulIdentifier","src":"860:12:26"},"nativeSrc":"860:32:26","nodeType":"YulFunctionCall","src":"860:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"849:7:26","nodeType":"YulIdentifier","src":"849:7:26"}]},{"nativeSrc":"901:17:26","nodeType":"YulAssignment","src":"901:17:26","value":{"name":"value_1","nativeSrc":"911:7:26","nodeType":"YulIdentifier","src":"911:7:26"},"variableNames":[{"name":"value1","nativeSrc":"901:6:26","nodeType":"YulIdentifier","src":"901:6:26"}]},{"nativeSrc":"927:16:26","nodeType":"YulVariableDeclaration","src":"927:16:26","value":{"kind":"number","nativeSrc":"942:1:26","nodeType":"YulLiteral","src":"942:1:26","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"931:7:26","nodeType":"YulTypedName","src":"931:7:26","type":""}]},{"nativeSrc":"952:43:26","nodeType":"YulAssignment","src":"952:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"980:9:26","nodeType":"YulIdentifier","src":"980:9:26"},{"kind":"number","nativeSrc":"991:2:26","nodeType":"YulLiteral","src":"991:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"976:3:26","nodeType":"YulIdentifier","src":"976:3:26"},"nativeSrc":"976:18:26","nodeType":"YulFunctionCall","src":"976:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"963:12:26","nodeType":"YulIdentifier","src":"963:12:26"},"nativeSrc":"963:32:26","nodeType":"YulFunctionCall","src":"963:32:26"},"variableNames":[{"name":"value_2","nativeSrc":"952:7:26","nodeType":"YulIdentifier","src":"952:7:26"}]},{"nativeSrc":"1004:17:26","nodeType":"YulAssignment","src":"1004:17:26","value":{"name":"value_2","nativeSrc":"1014:7:26","nodeType":"YulIdentifier","src":"1014:7:26"},"variableNames":[{"name":"value2","nativeSrc":"1004:6:26","nodeType":"YulIdentifier","src":"1004:6:26"}]},{"nativeSrc":"1030:16:26","nodeType":"YulVariableDeclaration","src":"1030:16:26","value":{"kind":"number","nativeSrc":"1045:1:26","nodeType":"YulLiteral","src":"1045:1:26","type":"","value":"0"},"variables":[{"name":"value_3","nativeSrc":"1034:7:26","nodeType":"YulTypedName","src":"1034:7:26","type":""}]},{"nativeSrc":"1055:43:26","nodeType":"YulAssignment","src":"1055:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1083:9:26","nodeType":"YulIdentifier","src":"1083:9:26"},{"kind":"number","nativeSrc":"1094:2:26","nodeType":"YulLiteral","src":"1094:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1079:3:26","nodeType":"YulIdentifier","src":"1079:3:26"},"nativeSrc":"1079:18:26","nodeType":"YulFunctionCall","src":"1079:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"1066:12:26","nodeType":"YulIdentifier","src":"1066:12:26"},"nativeSrc":"1066:32:26","nodeType":"YulFunctionCall","src":"1066:32:26"},"variableNames":[{"name":"value_3","nativeSrc":"1055:7:26","nodeType":"YulIdentifier","src":"1055:7:26"}]},{"nativeSrc":"1107:17:26","nodeType":"YulAssignment","src":"1107:17:26","value":{"name":"value_3","nativeSrc":"1117:7:26","nodeType":"YulIdentifier","src":"1117:7:26"},"variableNames":[{"name":"value3","nativeSrc":"1107:6:26","nodeType":"YulIdentifier","src":"1107:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256","nativeSrc":"543:587:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"606:9:26","nodeType":"YulTypedName","src":"606:9:26","type":""},{"name":"dataEnd","nativeSrc":"617:7:26","nodeType":"YulTypedName","src":"617:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"629:6:26","nodeType":"YulTypedName","src":"629:6:26","type":""},{"name":"value1","nativeSrc":"637:6:26","nodeType":"YulTypedName","src":"637:6:26","type":""},{"name":"value2","nativeSrc":"645:6:26","nodeType":"YulTypedName","src":"645:6:26","type":""},{"name":"value3","nativeSrc":"653:6:26","nodeType":"YulTypedName","src":"653:6:26","type":""}],"src":"543:587:26"},{"body":{"nativeSrc":"1236:125:26","nodeType":"YulBlock","src":"1236:125:26","statements":[{"nativeSrc":"1246:26:26","nodeType":"YulAssignment","src":"1246:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"1258:9:26","nodeType":"YulIdentifier","src":"1258:9:26"},{"kind":"number","nativeSrc":"1269:2:26","nodeType":"YulLiteral","src":"1269:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1254:3:26","nodeType":"YulIdentifier","src":"1254:3:26"},"nativeSrc":"1254:18:26","nodeType":"YulFunctionCall","src":"1254:18:26"},"variableNames":[{"name":"tail","nativeSrc":"1246:4:26","nodeType":"YulIdentifier","src":"1246:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1288:9:26","nodeType":"YulIdentifier","src":"1288:9:26"},{"arguments":[{"name":"value0","nativeSrc":"1303:6:26","nodeType":"YulIdentifier","src":"1303:6:26"},{"kind":"number","nativeSrc":"1311:42:26","nodeType":"YulLiteral","src":"1311:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1299:3:26","nodeType":"YulIdentifier","src":"1299:3:26"},"nativeSrc":"1299:55:26","nodeType":"YulFunctionCall","src":"1299:55:26"}],"functionName":{"name":"mstore","nativeSrc":"1281:6:26","nodeType":"YulIdentifier","src":"1281:6:26"},"nativeSrc":"1281:74:26","nodeType":"YulFunctionCall","src":"1281:74:26"},"nativeSrc":"1281:74:26","nodeType":"YulExpressionStatement","src":"1281:74:26"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1135:226:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1205:9:26","nodeType":"YulTypedName","src":"1205:9:26","type":""},{"name":"value0","nativeSrc":"1216:6:26","nodeType":"YulTypedName","src":"1216:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1227:4:26","nodeType":"YulTypedName","src":"1227:4:26","type":""}],"src":"1135:226:26"},{"body":{"nativeSrc":"1493:125:26","nodeType":"YulBlock","src":"1493:125:26","statements":[{"nativeSrc":"1503:26:26","nodeType":"YulAssignment","src":"1503:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"1515:9:26","nodeType":"YulIdentifier","src":"1515:9:26"},{"kind":"number","nativeSrc":"1526:2:26","nodeType":"YulLiteral","src":"1526:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1511:3:26","nodeType":"YulIdentifier","src":"1511:3:26"},"nativeSrc":"1511:18:26","nodeType":"YulFunctionCall","src":"1511:18:26"},"variableNames":[{"name":"tail","nativeSrc":"1503:4:26","nodeType":"YulIdentifier","src":"1503:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1545:9:26","nodeType":"YulIdentifier","src":"1545:9:26"},{"arguments":[{"name":"value0","nativeSrc":"1560:6:26","nodeType":"YulIdentifier","src":"1560:6:26"},{"kind":"number","nativeSrc":"1568:42:26","nodeType":"YulLiteral","src":"1568:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1556:3:26","nodeType":"YulIdentifier","src":"1556:3:26"},"nativeSrc":"1556:55:26","nodeType":"YulFunctionCall","src":"1556:55:26"}],"functionName":{"name":"mstore","nativeSrc":"1538:6:26","nodeType":"YulIdentifier","src":"1538:6:26"},"nativeSrc":"1538:74:26","nodeType":"YulFunctionCall","src":"1538:74:26"},"nativeSrc":"1538:74:26","nodeType":"YulExpressionStatement","src":"1538:74:26"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed","nativeSrc":"1366:252:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1462:9:26","nodeType":"YulTypedName","src":"1462:9:26","type":""},{"name":"value0","nativeSrc":"1473:6:26","nodeType":"YulTypedName","src":"1473:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1484:4:26","nodeType":"YulTypedName","src":"1484:4:26","type":""}],"src":"1366:252:26"},{"body":{"nativeSrc":"1752:318:26","nodeType":"YulBlock","src":"1752:318:26","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1769:9:26","nodeType":"YulIdentifier","src":"1769:9:26"},{"kind":"number","nativeSrc":"1780:2:26","nodeType":"YulLiteral","src":"1780:2:26","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1762:6:26","nodeType":"YulIdentifier","src":"1762:6:26"},"nativeSrc":"1762:21:26","nodeType":"YulFunctionCall","src":"1762:21:26"},"nativeSrc":"1762:21:26","nodeType":"YulExpressionStatement","src":"1762:21:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1803:9:26","nodeType":"YulIdentifier","src":"1803:9:26"},{"kind":"number","nativeSrc":"1814:2:26","nodeType":"YulLiteral","src":"1814:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1799:3:26","nodeType":"YulIdentifier","src":"1799:3:26"},"nativeSrc":"1799:18:26","nodeType":"YulFunctionCall","src":"1799:18:26"},{"name":"value1","nativeSrc":"1819:6:26","nodeType":"YulIdentifier","src":"1819:6:26"}],"functionName":{"name":"mstore","nativeSrc":"1792:6:26","nodeType":"YulIdentifier","src":"1792:6:26"},"nativeSrc":"1792:34:26","nodeType":"YulFunctionCall","src":"1792:34:26"},"nativeSrc":"1792:34:26","nodeType":"YulExpressionStatement","src":"1792:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1852:9:26","nodeType":"YulIdentifier","src":"1852:9:26"},{"kind":"number","nativeSrc":"1863:2:26","nodeType":"YulLiteral","src":"1863:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1848:3:26","nodeType":"YulIdentifier","src":"1848:3:26"},"nativeSrc":"1848:18:26","nodeType":"YulFunctionCall","src":"1848:18:26"},{"name":"value0","nativeSrc":"1868:6:26","nodeType":"YulIdentifier","src":"1868:6:26"},{"name":"value1","nativeSrc":"1876:6:26","nodeType":"YulIdentifier","src":"1876:6:26"}],"functionName":{"name":"calldatacopy","nativeSrc":"1835:12:26","nodeType":"YulIdentifier","src":"1835:12:26"},"nativeSrc":"1835:48:26","nodeType":"YulFunctionCall","src":"1835:48:26"},"nativeSrc":"1835:48:26","nodeType":"YulExpressionStatement","src":"1835:48:26"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1907:9:26","nodeType":"YulIdentifier","src":"1907:9:26"},{"name":"value1","nativeSrc":"1918:6:26","nodeType":"YulIdentifier","src":"1918:6:26"}],"functionName":{"name":"add","nativeSrc":"1903:3:26","nodeType":"YulIdentifier","src":"1903:3:26"},"nativeSrc":"1903:22:26","nodeType":"YulFunctionCall","src":"1903:22:26"},{"kind":"number","nativeSrc":"1927:2:26","nodeType":"YulLiteral","src":"1927:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1899:3:26","nodeType":"YulIdentifier","src":"1899:3:26"},"nativeSrc":"1899:31:26","nodeType":"YulFunctionCall","src":"1899:31:26"},{"kind":"number","nativeSrc":"1932:1:26","nodeType":"YulLiteral","src":"1932:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1892:6:26","nodeType":"YulIdentifier","src":"1892:6:26"},"nativeSrc":"1892:42:26","nodeType":"YulFunctionCall","src":"1892:42:26"},"nativeSrc":"1892:42:26","nodeType":"YulExpressionStatement","src":"1892:42:26"},{"nativeSrc":"1943:121:26","nodeType":"YulAssignment","src":"1943:121:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1959:9:26","nodeType":"YulIdentifier","src":"1959:9:26"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1978:6:26","nodeType":"YulIdentifier","src":"1978:6:26"},{"kind":"number","nativeSrc":"1986:2:26","nodeType":"YulLiteral","src":"1986:2:26","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1974:3:26","nodeType":"YulIdentifier","src":"1974:3:26"},"nativeSrc":"1974:15:26","nodeType":"YulFunctionCall","src":"1974:15:26"},{"kind":"number","nativeSrc":"1991:66:26","nodeType":"YulLiteral","src":"1991:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1970:3:26","nodeType":"YulIdentifier","src":"1970:3:26"},"nativeSrc":"1970:88:26","nodeType":"YulFunctionCall","src":"1970:88:26"}],"functionName":{"name":"add","nativeSrc":"1955:3:26","nodeType":"YulIdentifier","src":"1955:3:26"},"nativeSrc":"1955:104:26","nodeType":"YulFunctionCall","src":"1955:104:26"},{"kind":"number","nativeSrc":"2061:2:26","nodeType":"YulLiteral","src":"2061:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1951:3:26","nodeType":"YulIdentifier","src":"1951:3:26"},"nativeSrc":"1951:113:26","nodeType":"YulFunctionCall","src":"1951:113:26"},"variableNames":[{"name":"tail","nativeSrc":"1943:4:26","nodeType":"YulIdentifier","src":"1943:4:26"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1623:447:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1713:9:26","nodeType":"YulTypedName","src":"1713:9:26","type":""},{"name":"value1","nativeSrc":"1724:6:26","nodeType":"YulTypedName","src":"1724:6:26","type":""},{"name":"value0","nativeSrc":"1732:6:26","nodeType":"YulTypedName","src":"1732:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1743:4:26","nodeType":"YulTypedName","src":"1743:4:26","type":""}],"src":"1623:447:26"},{"body":{"nativeSrc":"2124:147:26","nodeType":"YulBlock","src":"2124:147:26","statements":[{"nativeSrc":"2134:29:26","nodeType":"YulAssignment","src":"2134:29:26","value":{"arguments":[{"name":"offset","nativeSrc":"2156:6:26","nodeType":"YulIdentifier","src":"2156:6:26"}],"functionName":{"name":"calldataload","nativeSrc":"2143:12:26","nodeType":"YulIdentifier","src":"2143:12:26"},"nativeSrc":"2143:20:26","nodeType":"YulFunctionCall","src":"2143:20:26"},"variableNames":[{"name":"value","nativeSrc":"2134:5:26","nodeType":"YulIdentifier","src":"2134:5:26"}]},{"body":{"nativeSrc":"2249:16:26","nodeType":"YulBlock","src":"2249:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2258:1:26","nodeType":"YulLiteral","src":"2258:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2261:1:26","nodeType":"YulLiteral","src":"2261:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2251:6:26","nodeType":"YulIdentifier","src":"2251:6:26"},"nativeSrc":"2251:12:26","nodeType":"YulFunctionCall","src":"2251:12:26"},"nativeSrc":"2251:12:26","nodeType":"YulExpressionStatement","src":"2251:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2185:5:26","nodeType":"YulIdentifier","src":"2185:5:26"},{"arguments":[{"name":"value","nativeSrc":"2196:5:26","nodeType":"YulIdentifier","src":"2196:5:26"},{"kind":"number","nativeSrc":"2203:42:26","nodeType":"YulLiteral","src":"2203:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2192:3:26","nodeType":"YulIdentifier","src":"2192:3:26"},"nativeSrc":"2192:54:26","nodeType":"YulFunctionCall","src":"2192:54:26"}],"functionName":{"name":"eq","nativeSrc":"2182:2:26","nodeType":"YulIdentifier","src":"2182:2:26"},"nativeSrc":"2182:65:26","nodeType":"YulFunctionCall","src":"2182:65:26"}],"functionName":{"name":"iszero","nativeSrc":"2175:6:26","nodeType":"YulIdentifier","src":"2175:6:26"},"nativeSrc":"2175:73:26","nodeType":"YulFunctionCall","src":"2175:73:26"},"nativeSrc":"2172:93:26","nodeType":"YulIf","src":"2172:93:26"}]},"name":"abi_decode_address","nativeSrc":"2075:196:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2103:6:26","nodeType":"YulTypedName","src":"2103:6:26","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2114:5:26","nodeType":"YulTypedName","src":"2114:5:26","type":""}],"src":"2075:196:26"},{"body":{"nativeSrc":"2432:763:26","nodeType":"YulBlock","src":"2432:763:26","statements":[{"body":{"nativeSrc":"2479:16:26","nodeType":"YulBlock","src":"2479:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2488:1:26","nodeType":"YulLiteral","src":"2488:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2491:1:26","nodeType":"YulLiteral","src":"2491:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2481:6:26","nodeType":"YulIdentifier","src":"2481:6:26"},"nativeSrc":"2481:12:26","nodeType":"YulFunctionCall","src":"2481:12:26"},"nativeSrc":"2481:12:26","nodeType":"YulExpressionStatement","src":"2481:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2453:7:26","nodeType":"YulIdentifier","src":"2453:7:26"},{"name":"headStart","nativeSrc":"2462:9:26","nodeType":"YulIdentifier","src":"2462:9:26"}],"functionName":{"name":"sub","nativeSrc":"2449:3:26","nodeType":"YulIdentifier","src":"2449:3:26"},"nativeSrc":"2449:23:26","nodeType":"YulFunctionCall","src":"2449:23:26"},{"kind":"number","nativeSrc":"2474:3:26","nodeType":"YulLiteral","src":"2474:3:26","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2445:3:26","nodeType":"YulIdentifier","src":"2445:3:26"},"nativeSrc":"2445:33:26","nodeType":"YulFunctionCall","src":"2445:33:26"},"nativeSrc":"2442:53:26","nodeType":"YulIf","src":"2442:53:26"},{"nativeSrc":"2504:14:26","nodeType":"YulVariableDeclaration","src":"2504:14:26","value":{"kind":"number","nativeSrc":"2517:1:26","nodeType":"YulLiteral","src":"2517:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2508:5:26","nodeType":"YulTypedName","src":"2508:5:26","type":""}]},{"nativeSrc":"2527:32:26","nodeType":"YulAssignment","src":"2527:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"2549:9:26","nodeType":"YulIdentifier","src":"2549:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"2536:12:26","nodeType":"YulIdentifier","src":"2536:12:26"},"nativeSrc":"2536:23:26","nodeType":"YulFunctionCall","src":"2536:23:26"},"variableNames":[{"name":"value","nativeSrc":"2527:5:26","nodeType":"YulIdentifier","src":"2527:5:26"}]},{"nativeSrc":"2568:15:26","nodeType":"YulAssignment","src":"2568:15:26","value":{"name":"value","nativeSrc":"2578:5:26","nodeType":"YulIdentifier","src":"2578:5:26"},"variableNames":[{"name":"value0","nativeSrc":"2568:6:26","nodeType":"YulIdentifier","src":"2568:6:26"}]},{"nativeSrc":"2592:48:26","nodeType":"YulAssignment","src":"2592:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2625:9:26","nodeType":"YulIdentifier","src":"2625:9:26"},{"kind":"number","nativeSrc":"2636:2:26","nodeType":"YulLiteral","src":"2636:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2621:3:26","nodeType":"YulIdentifier","src":"2621:3:26"},"nativeSrc":"2621:18:26","nodeType":"YulFunctionCall","src":"2621:18:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2602:18:26","nodeType":"YulIdentifier","src":"2602:18:26"},"nativeSrc":"2602:38:26","nodeType":"YulFunctionCall","src":"2602:38:26"},"variableNames":[{"name":"value1","nativeSrc":"2592:6:26","nodeType":"YulIdentifier","src":"2592:6:26"}]},{"nativeSrc":"2649:16:26","nodeType":"YulVariableDeclaration","src":"2649:16:26","value":{"kind":"number","nativeSrc":"2664:1:26","nodeType":"YulLiteral","src":"2664:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"2653:7:26","nodeType":"YulTypedName","src":"2653:7:26","type":""}]},{"nativeSrc":"2674:43:26","nodeType":"YulAssignment","src":"2674:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2702:9:26","nodeType":"YulIdentifier","src":"2702:9:26"},{"kind":"number","nativeSrc":"2713:2:26","nodeType":"YulLiteral","src":"2713:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2698:3:26","nodeType":"YulIdentifier","src":"2698:3:26"},"nativeSrc":"2698:18:26","nodeType":"YulFunctionCall","src":"2698:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"2685:12:26","nodeType":"YulIdentifier","src":"2685:12:26"},"nativeSrc":"2685:32:26","nodeType":"YulFunctionCall","src":"2685:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"2674:7:26","nodeType":"YulIdentifier","src":"2674:7:26"}]},{"nativeSrc":"2726:17:26","nodeType":"YulAssignment","src":"2726:17:26","value":{"name":"value_1","nativeSrc":"2736:7:26","nodeType":"YulIdentifier","src":"2736:7:26"},"variableNames":[{"name":"value2","nativeSrc":"2726:6:26","nodeType":"YulIdentifier","src":"2726:6:26"}]},{"nativeSrc":"2752:46:26","nodeType":"YulVariableDeclaration","src":"2752:46:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2783:9:26","nodeType":"YulIdentifier","src":"2783:9:26"},{"kind":"number","nativeSrc":"2794:2:26","nodeType":"YulLiteral","src":"2794:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2779:3:26","nodeType":"YulIdentifier","src":"2779:3:26"},"nativeSrc":"2779:18:26","nodeType":"YulFunctionCall","src":"2779:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"2766:12:26","nodeType":"YulIdentifier","src":"2766:12:26"},"nativeSrc":"2766:32:26","nodeType":"YulFunctionCall","src":"2766:32:26"},"variables":[{"name":"offset","nativeSrc":"2756:6:26","nodeType":"YulTypedName","src":"2756:6:26","type":""}]},{"body":{"nativeSrc":"2841:16:26","nodeType":"YulBlock","src":"2841:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2850:1:26","nodeType":"YulLiteral","src":"2850:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2853:1:26","nodeType":"YulLiteral","src":"2853:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2843:6:26","nodeType":"YulIdentifier","src":"2843:6:26"},"nativeSrc":"2843:12:26","nodeType":"YulFunctionCall","src":"2843:12:26"},"nativeSrc":"2843:12:26","nodeType":"YulExpressionStatement","src":"2843:12:26"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2813:6:26","nodeType":"YulIdentifier","src":"2813:6:26"},{"kind":"number","nativeSrc":"2821:18:26","nodeType":"YulLiteral","src":"2821:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2810:2:26","nodeType":"YulIdentifier","src":"2810:2:26"},"nativeSrc":"2810:30:26","nodeType":"YulFunctionCall","src":"2810:30:26"},"nativeSrc":"2807:50:26","nodeType":"YulIf","src":"2807:50:26"},{"nativeSrc":"2866:32:26","nodeType":"YulVariableDeclaration","src":"2866:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"2880:9:26","nodeType":"YulIdentifier","src":"2880:9:26"},{"name":"offset","nativeSrc":"2891:6:26","nodeType":"YulIdentifier","src":"2891:6:26"}],"functionName":{"name":"add","nativeSrc":"2876:3:26","nodeType":"YulIdentifier","src":"2876:3:26"},"nativeSrc":"2876:22:26","nodeType":"YulFunctionCall","src":"2876:22:26"},"variables":[{"name":"_1","nativeSrc":"2870:2:26","nodeType":"YulTypedName","src":"2870:2:26","type":""}]},{"body":{"nativeSrc":"2946:16:26","nodeType":"YulBlock","src":"2946:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2955:1:26","nodeType":"YulLiteral","src":"2955:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"2958:1:26","nodeType":"YulLiteral","src":"2958:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2948:6:26","nodeType":"YulIdentifier","src":"2948:6:26"},"nativeSrc":"2948:12:26","nodeType":"YulFunctionCall","src":"2948:12:26"},"nativeSrc":"2948:12:26","nodeType":"YulExpressionStatement","src":"2948:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"2925:2:26","nodeType":"YulIdentifier","src":"2925:2:26"},{"kind":"number","nativeSrc":"2929:4:26","nodeType":"YulLiteral","src":"2929:4:26","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2921:3:26","nodeType":"YulIdentifier","src":"2921:3:26"},"nativeSrc":"2921:13:26","nodeType":"YulFunctionCall","src":"2921:13:26"},{"name":"dataEnd","nativeSrc":"2936:7:26","nodeType":"YulIdentifier","src":"2936:7:26"}],"functionName":{"name":"slt","nativeSrc":"2917:3:26","nodeType":"YulIdentifier","src":"2917:3:26"},"nativeSrc":"2917:27:26","nodeType":"YulFunctionCall","src":"2917:27:26"}],"functionName":{"name":"iszero","nativeSrc":"2910:6:26","nodeType":"YulIdentifier","src":"2910:6:26"},"nativeSrc":"2910:35:26","nodeType":"YulFunctionCall","src":"2910:35:26"},"nativeSrc":"2907:55:26","nodeType":"YulIf","src":"2907:55:26"},{"nativeSrc":"2971:30:26","nodeType":"YulVariableDeclaration","src":"2971:30:26","value":{"arguments":[{"name":"_1","nativeSrc":"2998:2:26","nodeType":"YulIdentifier","src":"2998:2:26"}],"functionName":{"name":"calldataload","nativeSrc":"2985:12:26","nodeType":"YulIdentifier","src":"2985:12:26"},"nativeSrc":"2985:16:26","nodeType":"YulFunctionCall","src":"2985:16:26"},"variables":[{"name":"length","nativeSrc":"2975:6:26","nodeType":"YulTypedName","src":"2975:6:26","type":""}]},{"body":{"nativeSrc":"3044:16:26","nodeType":"YulBlock","src":"3044:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3053:1:26","nodeType":"YulLiteral","src":"3053:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3056:1:26","nodeType":"YulLiteral","src":"3056:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3046:6:26","nodeType":"YulIdentifier","src":"3046:6:26"},"nativeSrc":"3046:12:26","nodeType":"YulFunctionCall","src":"3046:12:26"},"nativeSrc":"3046:12:26","nodeType":"YulExpressionStatement","src":"3046:12:26"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3016:6:26","nodeType":"YulIdentifier","src":"3016:6:26"},{"kind":"number","nativeSrc":"3024:18:26","nodeType":"YulLiteral","src":"3024:18:26","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3013:2:26","nodeType":"YulIdentifier","src":"3013:2:26"},"nativeSrc":"3013:30:26","nodeType":"YulFunctionCall","src":"3013:30:26"},"nativeSrc":"3010:50:26","nodeType":"YulIf","src":"3010:50:26"},{"body":{"nativeSrc":"3118:16:26","nodeType":"YulBlock","src":"3118:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3127:1:26","nodeType":"YulLiteral","src":"3127:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3130:1:26","nodeType":"YulLiteral","src":"3130:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3120:6:26","nodeType":"YulIdentifier","src":"3120:6:26"},"nativeSrc":"3120:12:26","nodeType":"YulFunctionCall","src":"3120:12:26"},"nativeSrc":"3120:12:26","nodeType":"YulExpressionStatement","src":"3120:12:26"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"3083:2:26","nodeType":"YulIdentifier","src":"3083:2:26"},{"arguments":[{"kind":"number","nativeSrc":"3091:1:26","nodeType":"YulLiteral","src":"3091:1:26","type":"","value":"5"},{"name":"length","nativeSrc":"3094:6:26","nodeType":"YulIdentifier","src":"3094:6:26"}],"functionName":{"name":"shl","nativeSrc":"3087:3:26","nodeType":"YulIdentifier","src":"3087:3:26"},"nativeSrc":"3087:14:26","nodeType":"YulFunctionCall","src":"3087:14:26"}],"functionName":{"name":"add","nativeSrc":"3079:3:26","nodeType":"YulIdentifier","src":"3079:3:26"},"nativeSrc":"3079:23:26","nodeType":"YulFunctionCall","src":"3079:23:26"},{"kind":"number","nativeSrc":"3104:2:26","nodeType":"YulLiteral","src":"3104:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3075:3:26","nodeType":"YulIdentifier","src":"3075:3:26"},"nativeSrc":"3075:32:26","nodeType":"YulFunctionCall","src":"3075:32:26"},{"name":"dataEnd","nativeSrc":"3109:7:26","nodeType":"YulIdentifier","src":"3109:7:26"}],"functionName":{"name":"gt","nativeSrc":"3072:2:26","nodeType":"YulIdentifier","src":"3072:2:26"},"nativeSrc":"3072:45:26","nodeType":"YulFunctionCall","src":"3072:45:26"},"nativeSrc":"3069:65:26","nodeType":"YulIf","src":"3069:65:26"},{"nativeSrc":"3143:21:26","nodeType":"YulAssignment","src":"3143:21:26","value":{"arguments":[{"name":"_1","nativeSrc":"3157:2:26","nodeType":"YulIdentifier","src":"3157:2:26"},{"kind":"number","nativeSrc":"3161:2:26","nodeType":"YulLiteral","src":"3161:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3153:3:26","nodeType":"YulIdentifier","src":"3153:3:26"},"nativeSrc":"3153:11:26","nodeType":"YulFunctionCall","src":"3153:11:26"},"variableNames":[{"name":"value3","nativeSrc":"3143:6:26","nodeType":"YulIdentifier","src":"3143:6:26"}]},{"nativeSrc":"3173:16:26","nodeType":"YulAssignment","src":"3173:16:26","value":{"name":"length","nativeSrc":"3183:6:26","nodeType":"YulIdentifier","src":"3183:6:26"},"variableNames":[{"name":"value4","nativeSrc":"3173:6:26","nodeType":"YulIdentifier","src":"3173:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr","nativeSrc":"2276:919:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2366:9:26","nodeType":"YulTypedName","src":"2366:9:26","type":""},{"name":"dataEnd","nativeSrc":"2377:7:26","nodeType":"YulTypedName","src":"2377:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2389:6:26","nodeType":"YulTypedName","src":"2389:6:26","type":""},{"name":"value1","nativeSrc":"2397:6:26","nodeType":"YulTypedName","src":"2397:6:26","type":""},{"name":"value2","nativeSrc":"2405:6:26","nodeType":"YulTypedName","src":"2405:6:26","type":""},{"name":"value3","nativeSrc":"2413:6:26","nodeType":"YulTypedName","src":"2413:6:26","type":""},{"name":"value4","nativeSrc":"2421:6:26","nodeType":"YulTypedName","src":"2421:6:26","type":""}],"src":"2276:919:26"},{"body":{"nativeSrc":"3270:116:26","nodeType":"YulBlock","src":"3270:116:26","statements":[{"body":{"nativeSrc":"3316:16:26","nodeType":"YulBlock","src":"3316:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3325:1:26","nodeType":"YulLiteral","src":"3325:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3328:1:26","nodeType":"YulLiteral","src":"3328:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3318:6:26","nodeType":"YulIdentifier","src":"3318:6:26"},"nativeSrc":"3318:12:26","nodeType":"YulFunctionCall","src":"3318:12:26"},"nativeSrc":"3318:12:26","nodeType":"YulExpressionStatement","src":"3318:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3291:7:26","nodeType":"YulIdentifier","src":"3291:7:26"},{"name":"headStart","nativeSrc":"3300:9:26","nodeType":"YulIdentifier","src":"3300:9:26"}],"functionName":{"name":"sub","nativeSrc":"3287:3:26","nodeType":"YulIdentifier","src":"3287:3:26"},"nativeSrc":"3287:23:26","nodeType":"YulFunctionCall","src":"3287:23:26"},{"kind":"number","nativeSrc":"3312:2:26","nodeType":"YulLiteral","src":"3312:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3283:3:26","nodeType":"YulIdentifier","src":"3283:3:26"},"nativeSrc":"3283:32:26","nodeType":"YulFunctionCall","src":"3283:32:26"},"nativeSrc":"3280:52:26","nodeType":"YulIf","src":"3280:52:26"},{"nativeSrc":"3341:39:26","nodeType":"YulAssignment","src":"3341:39:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3370:9:26","nodeType":"YulIdentifier","src":"3370:9:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3351:18:26","nodeType":"YulIdentifier","src":"3351:18:26"},"nativeSrc":"3351:29:26","nodeType":"YulFunctionCall","src":"3351:29:26"},"variableNames":[{"name":"value0","nativeSrc":"3341:6:26","nodeType":"YulIdentifier","src":"3341:6:26"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3200:186:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3236:9:26","nodeType":"YulTypedName","src":"3236:9:26","type":""},{"name":"dataEnd","nativeSrc":"3247:7:26","nodeType":"YulTypedName","src":"3247:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3259:6:26","nodeType":"YulTypedName","src":"3259:6:26","type":""}],"src":"3200:186:26"},{"body":{"nativeSrc":"3461:156:26","nodeType":"YulBlock","src":"3461:156:26","statements":[{"body":{"nativeSrc":"3507:16:26","nodeType":"YulBlock","src":"3507:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3516:1:26","nodeType":"YulLiteral","src":"3516:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3519:1:26","nodeType":"YulLiteral","src":"3519:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3509:6:26","nodeType":"YulIdentifier","src":"3509:6:26"},"nativeSrc":"3509:12:26","nodeType":"YulFunctionCall","src":"3509:12:26"},"nativeSrc":"3509:12:26","nodeType":"YulExpressionStatement","src":"3509:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3482:7:26","nodeType":"YulIdentifier","src":"3482:7:26"},{"name":"headStart","nativeSrc":"3491:9:26","nodeType":"YulIdentifier","src":"3491:9:26"}],"functionName":{"name":"sub","nativeSrc":"3478:3:26","nodeType":"YulIdentifier","src":"3478:3:26"},"nativeSrc":"3478:23:26","nodeType":"YulFunctionCall","src":"3478:23:26"},{"kind":"number","nativeSrc":"3503:2:26","nodeType":"YulLiteral","src":"3503:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3474:3:26","nodeType":"YulIdentifier","src":"3474:3:26"},"nativeSrc":"3474:32:26","nodeType":"YulFunctionCall","src":"3474:32:26"},"nativeSrc":"3471:52:26","nodeType":"YulIf","src":"3471:52:26"},{"nativeSrc":"3532:14:26","nodeType":"YulVariableDeclaration","src":"3532:14:26","value":{"kind":"number","nativeSrc":"3545:1:26","nodeType":"YulLiteral","src":"3545:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3536:5:26","nodeType":"YulTypedName","src":"3536:5:26","type":""}]},{"nativeSrc":"3555:32:26","nodeType":"YulAssignment","src":"3555:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3577:9:26","nodeType":"YulIdentifier","src":"3577:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"3564:12:26","nodeType":"YulIdentifier","src":"3564:12:26"},"nativeSrc":"3564:23:26","nodeType":"YulFunctionCall","src":"3564:23:26"},"variableNames":[{"name":"value","nativeSrc":"3555:5:26","nodeType":"YulIdentifier","src":"3555:5:26"}]},{"nativeSrc":"3596:15:26","nodeType":"YulAssignment","src":"3596:15:26","value":{"name":"value","nativeSrc":"3606:5:26","nodeType":"YulIdentifier","src":"3606:5:26"},"variableNames":[{"name":"value0","nativeSrc":"3596:6:26","nodeType":"YulIdentifier","src":"3596:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"3391:226:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3427:9:26","nodeType":"YulTypedName","src":"3427:9:26","type":""},{"name":"dataEnd","nativeSrc":"3438:7:26","nodeType":"YulTypedName","src":"3438:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3450:6:26","nodeType":"YulTypedName","src":"3450:6:26","type":""}],"src":"3391:226:26"},{"body":{"nativeSrc":"3726:316:26","nodeType":"YulBlock","src":"3726:316:26","statements":[{"body":{"nativeSrc":"3772:16:26","nodeType":"YulBlock","src":"3772:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3781:1:26","nodeType":"YulLiteral","src":"3781:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"3784:1:26","nodeType":"YulLiteral","src":"3784:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3774:6:26","nodeType":"YulIdentifier","src":"3774:6:26"},"nativeSrc":"3774:12:26","nodeType":"YulFunctionCall","src":"3774:12:26"},"nativeSrc":"3774:12:26","nodeType":"YulExpressionStatement","src":"3774:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3747:7:26","nodeType":"YulIdentifier","src":"3747:7:26"},{"name":"headStart","nativeSrc":"3756:9:26","nodeType":"YulIdentifier","src":"3756:9:26"}],"functionName":{"name":"sub","nativeSrc":"3743:3:26","nodeType":"YulIdentifier","src":"3743:3:26"},"nativeSrc":"3743:23:26","nodeType":"YulFunctionCall","src":"3743:23:26"},{"kind":"number","nativeSrc":"3768:2:26","nodeType":"YulLiteral","src":"3768:2:26","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3739:3:26","nodeType":"YulIdentifier","src":"3739:3:26"},"nativeSrc":"3739:32:26","nodeType":"YulFunctionCall","src":"3739:32:26"},"nativeSrc":"3736:52:26","nodeType":"YulIf","src":"3736:52:26"},{"nativeSrc":"3797:14:26","nodeType":"YulVariableDeclaration","src":"3797:14:26","value":{"kind":"number","nativeSrc":"3810:1:26","nodeType":"YulLiteral","src":"3810:1:26","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3801:5:26","nodeType":"YulTypedName","src":"3801:5:26","type":""}]},{"nativeSrc":"3820:32:26","nodeType":"YulAssignment","src":"3820:32:26","value":{"arguments":[{"name":"headStart","nativeSrc":"3842:9:26","nodeType":"YulIdentifier","src":"3842:9:26"}],"functionName":{"name":"calldataload","nativeSrc":"3829:12:26","nodeType":"YulIdentifier","src":"3829:12:26"},"nativeSrc":"3829:23:26","nodeType":"YulFunctionCall","src":"3829:23:26"},"variableNames":[{"name":"value","nativeSrc":"3820:5:26","nodeType":"YulIdentifier","src":"3820:5:26"}]},{"nativeSrc":"3861:15:26","nodeType":"YulAssignment","src":"3861:15:26","value":{"name":"value","nativeSrc":"3871:5:26","nodeType":"YulIdentifier","src":"3871:5:26"},"variableNames":[{"name":"value0","nativeSrc":"3861:6:26","nodeType":"YulIdentifier","src":"3861:6:26"}]},{"nativeSrc":"3885:48:26","nodeType":"YulAssignment","src":"3885:48:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3918:9:26","nodeType":"YulIdentifier","src":"3918:9:26"},{"kind":"number","nativeSrc":"3929:2:26","nodeType":"YulLiteral","src":"3929:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3914:3:26","nodeType":"YulIdentifier","src":"3914:3:26"},"nativeSrc":"3914:18:26","nodeType":"YulFunctionCall","src":"3914:18:26"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3895:18:26","nodeType":"YulIdentifier","src":"3895:18:26"},"nativeSrc":"3895:38:26","nodeType":"YulFunctionCall","src":"3895:38:26"},"variableNames":[{"name":"value1","nativeSrc":"3885:6:26","nodeType":"YulIdentifier","src":"3885:6:26"}]},{"nativeSrc":"3942:16:26","nodeType":"YulVariableDeclaration","src":"3942:16:26","value":{"kind":"number","nativeSrc":"3957:1:26","nodeType":"YulLiteral","src":"3957:1:26","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"3946:7:26","nodeType":"YulTypedName","src":"3946:7:26","type":""}]},{"nativeSrc":"3967:43:26","nodeType":"YulAssignment","src":"3967:43:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3995:9:26","nodeType":"YulIdentifier","src":"3995:9:26"},{"kind":"number","nativeSrc":"4006:2:26","nodeType":"YulLiteral","src":"4006:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3991:3:26","nodeType":"YulIdentifier","src":"3991:3:26"},"nativeSrc":"3991:18:26","nodeType":"YulFunctionCall","src":"3991:18:26"}],"functionName":{"name":"calldataload","nativeSrc":"3978:12:26","nodeType":"YulIdentifier","src":"3978:12:26"},"nativeSrc":"3978:32:26","nodeType":"YulFunctionCall","src":"3978:32:26"},"variableNames":[{"name":"value_1","nativeSrc":"3967:7:26","nodeType":"YulIdentifier","src":"3967:7:26"}]},{"nativeSrc":"4019:17:26","nodeType":"YulAssignment","src":"4019:17:26","value":{"name":"value_1","nativeSrc":"4029:7:26","nodeType":"YulIdentifier","src":"4029:7:26"},"variableNames":[{"name":"value2","nativeSrc":"4019:6:26","nodeType":"YulIdentifier","src":"4019:6:26"}]}]},"name":"abi_decode_tuple_t_bytes32t_addresst_uint256","nativeSrc":"3622:420:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3676:9:26","nodeType":"YulTypedName","src":"3676:9:26","type":""},{"name":"dataEnd","nativeSrc":"3687:7:26","nodeType":"YulTypedName","src":"3687:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3699:6:26","nodeType":"YulTypedName","src":"3699:6:26","type":""},{"name":"value1","nativeSrc":"3707:6:26","nodeType":"YulTypedName","src":"3707:6:26","type":""},{"name":"value2","nativeSrc":"3715:6:26","nodeType":"YulTypedName","src":"3715:6:26","type":""}],"src":"3622:420:26"},{"body":{"nativeSrc":"4079:152:26","nodeType":"YulBlock","src":"4079:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4096:1:26","nodeType":"YulLiteral","src":"4096:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4099:77:26","nodeType":"YulLiteral","src":"4099:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4089:6:26","nodeType":"YulIdentifier","src":"4089:6:26"},"nativeSrc":"4089:88:26","nodeType":"YulFunctionCall","src":"4089:88:26"},"nativeSrc":"4089:88:26","nodeType":"YulExpressionStatement","src":"4089:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4193:1:26","nodeType":"YulLiteral","src":"4193:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"4196:4:26","nodeType":"YulLiteral","src":"4196:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"4186:6:26","nodeType":"YulIdentifier","src":"4186:6:26"},"nativeSrc":"4186:15:26","nodeType":"YulFunctionCall","src":"4186:15:26"},"nativeSrc":"4186:15:26","nodeType":"YulExpressionStatement","src":"4186:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4217:1:26","nodeType":"YulLiteral","src":"4217:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4220:4:26","nodeType":"YulLiteral","src":"4220:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4210:6:26","nodeType":"YulIdentifier","src":"4210:6:26"},"nativeSrc":"4210:15:26","nodeType":"YulFunctionCall","src":"4210:15:26"},"nativeSrc":"4210:15:26","nodeType":"YulExpressionStatement","src":"4210:15:26"}]},"name":"panic_error_0x21","nativeSrc":"4047:184:26","nodeType":"YulFunctionDefinition","src":"4047:184:26"},{"body":{"nativeSrc":"4350:286:26","nodeType":"YulBlock","src":"4350:286:26","statements":[{"nativeSrc":"4360:26:26","nodeType":"YulAssignment","src":"4360:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"4372:9:26","nodeType":"YulIdentifier","src":"4372:9:26"},{"kind":"number","nativeSrc":"4383:2:26","nodeType":"YulLiteral","src":"4383:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4368:3:26","nodeType":"YulIdentifier","src":"4368:3:26"},"nativeSrc":"4368:18:26","nodeType":"YulFunctionCall","src":"4368:18:26"},"variableNames":[{"name":"tail","nativeSrc":"4360:4:26","nodeType":"YulIdentifier","src":"4360:4:26"}]},{"body":{"nativeSrc":"4428:168:26","nodeType":"YulBlock","src":"4428:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4449:1:26","nodeType":"YulLiteral","src":"4449:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4452:77:26","nodeType":"YulLiteral","src":"4452:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4442:6:26","nodeType":"YulIdentifier","src":"4442:6:26"},"nativeSrc":"4442:88:26","nodeType":"YulFunctionCall","src":"4442:88:26"},"nativeSrc":"4442:88:26","nodeType":"YulExpressionStatement","src":"4442:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4550:1:26","nodeType":"YulLiteral","src":"4550:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"4553:4:26","nodeType":"YulLiteral","src":"4553:4:26","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"4543:6:26","nodeType":"YulIdentifier","src":"4543:6:26"},"nativeSrc":"4543:15:26","nodeType":"YulFunctionCall","src":"4543:15:26"},"nativeSrc":"4543:15:26","nodeType":"YulExpressionStatement","src":"4543:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4578:1:26","nodeType":"YulLiteral","src":"4578:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"4581:4:26","nodeType":"YulLiteral","src":"4581:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4571:6:26","nodeType":"YulIdentifier","src":"4571:6:26"},"nativeSrc":"4571:15:26","nodeType":"YulFunctionCall","src":"4571:15:26"},"nativeSrc":"4571:15:26","nodeType":"YulExpressionStatement","src":"4571:15:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"4408:6:26","nodeType":"YulIdentifier","src":"4408:6:26"},{"kind":"number","nativeSrc":"4416:1:26","nodeType":"YulLiteral","src":"4416:1:26","type":"","value":"4"}],"functionName":{"name":"lt","nativeSrc":"4405:2:26","nodeType":"YulIdentifier","src":"4405:2:26"},"nativeSrc":"4405:13:26","nodeType":"YulFunctionCall","src":"4405:13:26"}],"functionName":{"name":"iszero","nativeSrc":"4398:6:26","nodeType":"YulIdentifier","src":"4398:6:26"},"nativeSrc":"4398:21:26","nodeType":"YulFunctionCall","src":"4398:21:26"},"nativeSrc":"4395:201:26","nodeType":"YulIf","src":"4395:201:26"},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4612:9:26","nodeType":"YulIdentifier","src":"4612:9:26"},{"name":"value0","nativeSrc":"4623:6:26","nodeType":"YulIdentifier","src":"4623:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4605:6:26","nodeType":"YulIdentifier","src":"4605:6:26"},"nativeSrc":"4605:25:26","nodeType":"YulFunctionCall","src":"4605:25:26"},"nativeSrc":"4605:25:26","nodeType":"YulExpressionStatement","src":"4605:25:26"}]},"name":"abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed","nativeSrc":"4236:400:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4319:9:26","nodeType":"YulTypedName","src":"4319:9:26","type":""},{"name":"value0","nativeSrc":"4330:6:26","nodeType":"YulTypedName","src":"4330:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4341:4:26","nodeType":"YulTypedName","src":"4341:4:26","type":""}],"src":"4236:400:26"},{"body":{"nativeSrc":"4798:162:26","nodeType":"YulBlock","src":"4798:162:26","statements":[{"nativeSrc":"4808:26:26","nodeType":"YulAssignment","src":"4808:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"4820:9:26","nodeType":"YulIdentifier","src":"4820:9:26"},{"kind":"number","nativeSrc":"4831:2:26","nodeType":"YulLiteral","src":"4831:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4816:3:26","nodeType":"YulIdentifier","src":"4816:3:26"},"nativeSrc":"4816:18:26","nodeType":"YulFunctionCall","src":"4816:18:26"},"variableNames":[{"name":"tail","nativeSrc":"4808:4:26","nodeType":"YulIdentifier","src":"4808:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4850:9:26","nodeType":"YulIdentifier","src":"4850:9:26"},{"name":"value0","nativeSrc":"4861:6:26","nodeType":"YulIdentifier","src":"4861:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4843:6:26","nodeType":"YulIdentifier","src":"4843:6:26"},"nativeSrc":"4843:25:26","nodeType":"YulFunctionCall","src":"4843:25:26"},"nativeSrc":"4843:25:26","nodeType":"YulExpressionStatement","src":"4843:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4888:9:26","nodeType":"YulIdentifier","src":"4888:9:26"},{"kind":"number","nativeSrc":"4899:2:26","nodeType":"YulLiteral","src":"4899:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4884:3:26","nodeType":"YulIdentifier","src":"4884:3:26"},"nativeSrc":"4884:18:26","nodeType":"YulFunctionCall","src":"4884:18:26"},{"name":"value1","nativeSrc":"4904:6:26","nodeType":"YulIdentifier","src":"4904:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4877:6:26","nodeType":"YulIdentifier","src":"4877:6:26"},"nativeSrc":"4877:34:26","nodeType":"YulFunctionCall","src":"4877:34:26"},"nativeSrc":"4877:34:26","nodeType":"YulExpressionStatement","src":"4877:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4931:9:26","nodeType":"YulIdentifier","src":"4931:9:26"},{"kind":"number","nativeSrc":"4942:2:26","nodeType":"YulLiteral","src":"4942:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4927:3:26","nodeType":"YulIdentifier","src":"4927:3:26"},"nativeSrc":"4927:18:26","nodeType":"YulFunctionCall","src":"4927:18:26"},{"name":"value2","nativeSrc":"4947:6:26","nodeType":"YulIdentifier","src":"4947:6:26"}],"functionName":{"name":"mstore","nativeSrc":"4920:6:26","nodeType":"YulIdentifier","src":"4920:6:26"},"nativeSrc":"4920:34:26","nodeType":"YulFunctionCall","src":"4920:34:26"},"nativeSrc":"4920:34:26","nodeType":"YulExpressionStatement","src":"4920:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"4641:319:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4751:9:26","nodeType":"YulTypedName","src":"4751:9:26","type":""},{"name":"value2","nativeSrc":"4762:6:26","nodeType":"YulTypedName","src":"4762:6:26","type":""},{"name":"value1","nativeSrc":"4770:6:26","nodeType":"YulTypedName","src":"4770:6:26","type":""},{"name":"value0","nativeSrc":"4778:6:26","nodeType":"YulTypedName","src":"4778:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4789:4:26","nodeType":"YulTypedName","src":"4789:4:26","type":""}],"src":"4641:319:26"},{"body":{"nativeSrc":"5093:125:26","nodeType":"YulBlock","src":"5093:125:26","statements":[{"nativeSrc":"5103:26:26","nodeType":"YulAssignment","src":"5103:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5115:9:26","nodeType":"YulIdentifier","src":"5115:9:26"},{"kind":"number","nativeSrc":"5126:2:26","nodeType":"YulLiteral","src":"5126:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5111:3:26","nodeType":"YulIdentifier","src":"5111:3:26"},"nativeSrc":"5111:18:26","nodeType":"YulFunctionCall","src":"5111:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5103:4:26","nodeType":"YulIdentifier","src":"5103:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5145:9:26","nodeType":"YulIdentifier","src":"5145:9:26"},{"arguments":[{"name":"value0","nativeSrc":"5160:6:26","nodeType":"YulIdentifier","src":"5160:6:26"},{"kind":"number","nativeSrc":"5168:42:26","nodeType":"YulLiteral","src":"5168:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5156:3:26","nodeType":"YulIdentifier","src":"5156:3:26"},"nativeSrc":"5156:55:26","nodeType":"YulFunctionCall","src":"5156:55:26"}],"functionName":{"name":"mstore","nativeSrc":"5138:6:26","nodeType":"YulIdentifier","src":"5138:6:26"},"nativeSrc":"5138:74:26","nodeType":"YulFunctionCall","src":"5138:74:26"},"nativeSrc":"5138:74:26","nodeType":"YulExpressionStatement","src":"5138:74:26"}]},"name":"abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed","nativeSrc":"4965:253:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5062:9:26","nodeType":"YulTypedName","src":"5062:9:26","type":""},{"name":"value0","nativeSrc":"5073:6:26","nodeType":"YulTypedName","src":"5073:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5084:4:26","nodeType":"YulTypedName","src":"5084:4:26","type":""}],"src":"4965:253:26"},{"body":{"nativeSrc":"5380:162:26","nodeType":"YulBlock","src":"5380:162:26","statements":[{"nativeSrc":"5390:26:26","nodeType":"YulAssignment","src":"5390:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5402:9:26","nodeType":"YulIdentifier","src":"5402:9:26"},{"kind":"number","nativeSrc":"5413:2:26","nodeType":"YulLiteral","src":"5413:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5398:3:26","nodeType":"YulIdentifier","src":"5398:3:26"},"nativeSrc":"5398:18:26","nodeType":"YulFunctionCall","src":"5398:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5390:4:26","nodeType":"YulIdentifier","src":"5390:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5432:9:26","nodeType":"YulIdentifier","src":"5432:9:26"},{"name":"value0","nativeSrc":"5443:6:26","nodeType":"YulIdentifier","src":"5443:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5425:6:26","nodeType":"YulIdentifier","src":"5425:6:26"},"nativeSrc":"5425:25:26","nodeType":"YulFunctionCall","src":"5425:25:26"},"nativeSrc":"5425:25:26","nodeType":"YulExpressionStatement","src":"5425:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5470:9:26","nodeType":"YulIdentifier","src":"5470:9:26"},{"kind":"number","nativeSrc":"5481:2:26","nodeType":"YulLiteral","src":"5481:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5466:3:26","nodeType":"YulIdentifier","src":"5466:3:26"},"nativeSrc":"5466:18:26","nodeType":"YulFunctionCall","src":"5466:18:26"},{"name":"value1","nativeSrc":"5486:6:26","nodeType":"YulIdentifier","src":"5486:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5459:6:26","nodeType":"YulIdentifier","src":"5459:6:26"},"nativeSrc":"5459:34:26","nodeType":"YulFunctionCall","src":"5459:34:26"},"nativeSrc":"5459:34:26","nodeType":"YulExpressionStatement","src":"5459:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5513:9:26","nodeType":"YulIdentifier","src":"5513:9:26"},{"kind":"number","nativeSrc":"5524:2:26","nodeType":"YulLiteral","src":"5524:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5509:3:26","nodeType":"YulIdentifier","src":"5509:3:26"},"nativeSrc":"5509:18:26","nodeType":"YulFunctionCall","src":"5509:18:26"},{"name":"value2","nativeSrc":"5529:6:26","nodeType":"YulIdentifier","src":"5529:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5502:6:26","nodeType":"YulIdentifier","src":"5502:6:26"},"nativeSrc":"5502:34:26","nodeType":"YulFunctionCall","src":"5502:34:26"},"nativeSrc":"5502:34:26","nodeType":"YulExpressionStatement","src":"5502:34:26"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"5223:319:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5333:9:26","nodeType":"YulTypedName","src":"5333:9:26","type":""},{"name":"value2","nativeSrc":"5344:6:26","nodeType":"YulTypedName","src":"5344:6:26","type":""},{"name":"value1","nativeSrc":"5352:6:26","nodeType":"YulTypedName","src":"5352:6:26","type":""},{"name":"value0","nativeSrc":"5360:6:26","nodeType":"YulTypedName","src":"5360:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5371:4:26","nodeType":"YulTypedName","src":"5371:4:26","type":""}],"src":"5223:319:26"},{"body":{"nativeSrc":"5648:76:26","nodeType":"YulBlock","src":"5648:76:26","statements":[{"nativeSrc":"5658:26:26","nodeType":"YulAssignment","src":"5658:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5670:9:26","nodeType":"YulIdentifier","src":"5670:9:26"},{"kind":"number","nativeSrc":"5681:2:26","nodeType":"YulLiteral","src":"5681:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5666:3:26","nodeType":"YulIdentifier","src":"5666:3:26"},"nativeSrc":"5666:18:26","nodeType":"YulFunctionCall","src":"5666:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5658:4:26","nodeType":"YulIdentifier","src":"5658:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5700:9:26","nodeType":"YulIdentifier","src":"5700:9:26"},{"name":"value0","nativeSrc":"5711:6:26","nodeType":"YulIdentifier","src":"5711:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5693:6:26","nodeType":"YulIdentifier","src":"5693:6:26"},"nativeSrc":"5693:25:26","nodeType":"YulFunctionCall","src":"5693:25:26"},"nativeSrc":"5693:25:26","nodeType":"YulExpressionStatement","src":"5693:25:26"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"5547:177:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5617:9:26","nodeType":"YulTypedName","src":"5617:9:26","type":""},{"name":"value0","nativeSrc":"5628:6:26","nodeType":"YulTypedName","src":"5628:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5639:4:26","nodeType":"YulTypedName","src":"5639:4:26","type":""}],"src":"5547:177:26"},{"body":{"nativeSrc":"5830:76:26","nodeType":"YulBlock","src":"5830:76:26","statements":[{"nativeSrc":"5840:26:26","nodeType":"YulAssignment","src":"5840:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"5852:9:26","nodeType":"YulIdentifier","src":"5852:9:26"},{"kind":"number","nativeSrc":"5863:2:26","nodeType":"YulLiteral","src":"5863:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5848:3:26","nodeType":"YulIdentifier","src":"5848:3:26"},"nativeSrc":"5848:18:26","nodeType":"YulFunctionCall","src":"5848:18:26"},"variableNames":[{"name":"tail","nativeSrc":"5840:4:26","nodeType":"YulIdentifier","src":"5840:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5882:9:26","nodeType":"YulIdentifier","src":"5882:9:26"},{"name":"value0","nativeSrc":"5893:6:26","nodeType":"YulIdentifier","src":"5893:6:26"}],"functionName":{"name":"mstore","nativeSrc":"5875:6:26","nodeType":"YulIdentifier","src":"5875:6:26"},"nativeSrc":"5875:25:26","nodeType":"YulFunctionCall","src":"5875:25:26"},"nativeSrc":"5875:25:26","nodeType":"YulExpressionStatement","src":"5875:25:26"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"5729:177:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5799:9:26","nodeType":"YulTypedName","src":"5799:9:26","type":""},{"name":"value0","nativeSrc":"5810:6:26","nodeType":"YulTypedName","src":"5810:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5821:4:26","nodeType":"YulTypedName","src":"5821:4:26","type":""}],"src":"5729:177:26"},{"body":{"nativeSrc":"6086:219:26","nodeType":"YulBlock","src":"6086:219:26","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6103:3:26","nodeType":"YulIdentifier","src":"6103:3:26"},{"name":"value0","nativeSrc":"6108:6:26","nodeType":"YulIdentifier","src":"6108:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6096:6:26","nodeType":"YulIdentifier","src":"6096:6:26"},"nativeSrc":"6096:19:26","nodeType":"YulFunctionCall","src":"6096:19:26"},"nativeSrc":"6096:19:26","nodeType":"YulExpressionStatement","src":"6096:19:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6135:3:26","nodeType":"YulIdentifier","src":"6135:3:26"},{"kind":"number","nativeSrc":"6140:2:26","nodeType":"YulLiteral","src":"6140:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6131:3:26","nodeType":"YulIdentifier","src":"6131:3:26"},"nativeSrc":"6131:12:26","nodeType":"YulFunctionCall","src":"6131:12:26"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"6153:2:26","nodeType":"YulLiteral","src":"6153:2:26","type":"","value":"96"},{"name":"value1","nativeSrc":"6157:6:26","nodeType":"YulIdentifier","src":"6157:6:26"}],"functionName":{"name":"shl","nativeSrc":"6149:3:26","nodeType":"YulIdentifier","src":"6149:3:26"},"nativeSrc":"6149:15:26","nodeType":"YulFunctionCall","src":"6149:15:26"},{"kind":"number","nativeSrc":"6166:66:26","nodeType":"YulLiteral","src":"6166:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"6145:3:26","nodeType":"YulIdentifier","src":"6145:3:26"},"nativeSrc":"6145:88:26","nodeType":"YulFunctionCall","src":"6145:88:26"}],"functionName":{"name":"mstore","nativeSrc":"6124:6:26","nodeType":"YulIdentifier","src":"6124:6:26"},"nativeSrc":"6124:110:26","nodeType":"YulFunctionCall","src":"6124:110:26"},"nativeSrc":"6124:110:26","nodeType":"YulExpressionStatement","src":"6124:110:26"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6254:3:26","nodeType":"YulIdentifier","src":"6254:3:26"},{"kind":"number","nativeSrc":"6259:2:26","nodeType":"YulLiteral","src":"6259:2:26","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"6250:3:26","nodeType":"YulIdentifier","src":"6250:3:26"},"nativeSrc":"6250:12:26","nodeType":"YulFunctionCall","src":"6250:12:26"},{"name":"value2","nativeSrc":"6264:6:26","nodeType":"YulIdentifier","src":"6264:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6243:6:26","nodeType":"YulIdentifier","src":"6243:6:26"},"nativeSrc":"6243:28:26","nodeType":"YulFunctionCall","src":"6243:28:26"},"nativeSrc":"6243:28:26","nodeType":"YulExpressionStatement","src":"6243:28:26"},{"nativeSrc":"6280:19:26","nodeType":"YulAssignment","src":"6280:19:26","value":{"arguments":[{"name":"pos","nativeSrc":"6291:3:26","nodeType":"YulIdentifier","src":"6291:3:26"},{"kind":"number","nativeSrc":"6296:2:26","nodeType":"YulLiteral","src":"6296:2:26","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"6287:3:26","nodeType":"YulIdentifier","src":"6287:3:26"},"nativeSrc":"6287:12:26","nodeType":"YulFunctionCall","src":"6287:12:26"},"variableNames":[{"name":"end","nativeSrc":"6280:3:26","nodeType":"YulIdentifier","src":"6280:3:26"}]}]},"name":"abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"5911:394:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"6046:3:26","nodeType":"YulTypedName","src":"6046:3:26","type":""},{"name":"value2","nativeSrc":"6051:6:26","nodeType":"YulTypedName","src":"6051:6:26","type":""},{"name":"value1","nativeSrc":"6059:6:26","nodeType":"YulTypedName","src":"6059:6:26","type":""},{"name":"value0","nativeSrc":"6067:6:26","nodeType":"YulTypedName","src":"6067:6:26","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6078:3:26","nodeType":"YulTypedName","src":"6078:3:26","type":""}],"src":"5911:394:26"},{"body":{"nativeSrc":"6439:119:26","nodeType":"YulBlock","src":"6439:119:26","statements":[{"nativeSrc":"6449:26:26","nodeType":"YulAssignment","src":"6449:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6461:9:26","nodeType":"YulIdentifier","src":"6461:9:26"},{"kind":"number","nativeSrc":"6472:2:26","nodeType":"YulLiteral","src":"6472:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6457:3:26","nodeType":"YulIdentifier","src":"6457:3:26"},"nativeSrc":"6457:18:26","nodeType":"YulFunctionCall","src":"6457:18:26"},"variableNames":[{"name":"tail","nativeSrc":"6449:4:26","nodeType":"YulIdentifier","src":"6449:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6491:9:26","nodeType":"YulIdentifier","src":"6491:9:26"},{"name":"value0","nativeSrc":"6502:6:26","nodeType":"YulIdentifier","src":"6502:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6484:6:26","nodeType":"YulIdentifier","src":"6484:6:26"},"nativeSrc":"6484:25:26","nodeType":"YulFunctionCall","src":"6484:25:26"},"nativeSrc":"6484:25:26","nodeType":"YulExpressionStatement","src":"6484:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6529:9:26","nodeType":"YulIdentifier","src":"6529:9:26"},{"kind":"number","nativeSrc":"6540:2:26","nodeType":"YulLiteral","src":"6540:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6525:3:26","nodeType":"YulIdentifier","src":"6525:3:26"},"nativeSrc":"6525:18:26","nodeType":"YulFunctionCall","src":"6525:18:26"},{"name":"value1","nativeSrc":"6545:6:26","nodeType":"YulIdentifier","src":"6545:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6518:6:26","nodeType":"YulIdentifier","src":"6518:6:26"},"nativeSrc":"6518:34:26","nodeType":"YulFunctionCall","src":"6518:34:26"},"nativeSrc":"6518:34:26","nodeType":"YulExpressionStatement","src":"6518:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"6310:248:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6400:9:26","nodeType":"YulTypedName","src":"6400:9:26","type":""},{"name":"value1","nativeSrc":"6411:6:26","nodeType":"YulTypedName","src":"6411:6:26","type":""},{"name":"value0","nativeSrc":"6419:6:26","nodeType":"YulTypedName","src":"6419:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6430:4:26","nodeType":"YulTypedName","src":"6430:4:26","type":""}],"src":"6310:248:26"},{"body":{"nativeSrc":"6692:119:26","nodeType":"YulBlock","src":"6692:119:26","statements":[{"nativeSrc":"6702:26:26","nodeType":"YulAssignment","src":"6702:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6714:9:26","nodeType":"YulIdentifier","src":"6714:9:26"},{"kind":"number","nativeSrc":"6725:2:26","nodeType":"YulLiteral","src":"6725:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6710:3:26","nodeType":"YulIdentifier","src":"6710:3:26"},"nativeSrc":"6710:18:26","nodeType":"YulFunctionCall","src":"6710:18:26"},"variableNames":[{"name":"tail","nativeSrc":"6702:4:26","nodeType":"YulIdentifier","src":"6702:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6744:9:26","nodeType":"YulIdentifier","src":"6744:9:26"},{"name":"value0","nativeSrc":"6755:6:26","nodeType":"YulIdentifier","src":"6755:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6737:6:26","nodeType":"YulIdentifier","src":"6737:6:26"},"nativeSrc":"6737:25:26","nodeType":"YulFunctionCall","src":"6737:25:26"},"nativeSrc":"6737:25:26","nodeType":"YulExpressionStatement","src":"6737:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6782:9:26","nodeType":"YulIdentifier","src":"6782:9:26"},{"kind":"number","nativeSrc":"6793:2:26","nodeType":"YulLiteral","src":"6793:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6778:3:26","nodeType":"YulIdentifier","src":"6778:3:26"},"nativeSrc":"6778:18:26","nodeType":"YulFunctionCall","src":"6778:18:26"},{"name":"value1","nativeSrc":"6798:6:26","nodeType":"YulIdentifier","src":"6798:6:26"}],"functionName":{"name":"mstore","nativeSrc":"6771:6:26","nodeType":"YulIdentifier","src":"6771:6:26"},"nativeSrc":"6771:34:26","nodeType":"YulFunctionCall","src":"6771:34:26"},"nativeSrc":"6771:34:26","nodeType":"YulExpressionStatement","src":"6771:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"6563:248:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6653:9:26","nodeType":"YulTypedName","src":"6653:9:26","type":""},{"name":"value1","nativeSrc":"6664:6:26","nodeType":"YulTypedName","src":"6664:6:26","type":""},{"name":"value0","nativeSrc":"6672:6:26","nodeType":"YulTypedName","src":"6672:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6683:4:26","nodeType":"YulTypedName","src":"6683:4:26","type":""}],"src":"6563:248:26"},{"body":{"nativeSrc":"6973:211:26","nodeType":"YulBlock","src":"6973:211:26","statements":[{"nativeSrc":"6983:26:26","nodeType":"YulAssignment","src":"6983:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"6995:9:26","nodeType":"YulIdentifier","src":"6995:9:26"},{"kind":"number","nativeSrc":"7006:2:26","nodeType":"YulLiteral","src":"7006:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6991:3:26","nodeType":"YulIdentifier","src":"6991:3:26"},"nativeSrc":"6991:18:26","nodeType":"YulFunctionCall","src":"6991:18:26"},"variableNames":[{"name":"tail","nativeSrc":"6983:4:26","nodeType":"YulIdentifier","src":"6983:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7025:9:26","nodeType":"YulIdentifier","src":"7025:9:26"},{"name":"value0","nativeSrc":"7036:6:26","nodeType":"YulIdentifier","src":"7036:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7018:6:26","nodeType":"YulIdentifier","src":"7018:6:26"},"nativeSrc":"7018:25:26","nodeType":"YulFunctionCall","src":"7018:25:26"},"nativeSrc":"7018:25:26","nodeType":"YulExpressionStatement","src":"7018:25:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7063:9:26","nodeType":"YulIdentifier","src":"7063:9:26"},{"kind":"number","nativeSrc":"7074:2:26","nodeType":"YulLiteral","src":"7074:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7059:3:26","nodeType":"YulIdentifier","src":"7059:3:26"},"nativeSrc":"7059:18:26","nodeType":"YulFunctionCall","src":"7059:18:26"},{"arguments":[{"name":"value1","nativeSrc":"7083:6:26","nodeType":"YulIdentifier","src":"7083:6:26"},{"kind":"number","nativeSrc":"7091:42:26","nodeType":"YulLiteral","src":"7091:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7079:3:26","nodeType":"YulIdentifier","src":"7079:3:26"},"nativeSrc":"7079:55:26","nodeType":"YulFunctionCall","src":"7079:55:26"}],"functionName":{"name":"mstore","nativeSrc":"7052:6:26","nodeType":"YulIdentifier","src":"7052:6:26"},"nativeSrc":"7052:83:26","nodeType":"YulFunctionCall","src":"7052:83:26"},"nativeSrc":"7052:83:26","nodeType":"YulExpressionStatement","src":"7052:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7155:9:26","nodeType":"YulIdentifier","src":"7155:9:26"},{"kind":"number","nativeSrc":"7166:2:26","nodeType":"YulLiteral","src":"7166:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7151:3:26","nodeType":"YulIdentifier","src":"7151:3:26"},"nativeSrc":"7151:18:26","nodeType":"YulFunctionCall","src":"7151:18:26"},{"name":"value2","nativeSrc":"7171:6:26","nodeType":"YulIdentifier","src":"7171:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7144:6:26","nodeType":"YulIdentifier","src":"7144:6:26"},"nativeSrc":"7144:34:26","nodeType":"YulFunctionCall","src":"7144:34:26"},"nativeSrc":"7144:34:26","nodeType":"YulExpressionStatement","src":"7144:34:26"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed","nativeSrc":"6816:368:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6926:9:26","nodeType":"YulTypedName","src":"6926:9:26","type":""},{"name":"value2","nativeSrc":"6937:6:26","nodeType":"YulTypedName","src":"6937:6:26","type":""},{"name":"value1","nativeSrc":"6945:6:26","nodeType":"YulTypedName","src":"6945:6:26","type":""},{"name":"value0","nativeSrc":"6953:6:26","nodeType":"YulTypedName","src":"6953:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6964:4:26","nodeType":"YulTypedName","src":"6964:4:26","type":""}],"src":"6816:368:26"},{"body":{"nativeSrc":"7392:697:26","nodeType":"YulBlock","src":"7392:697:26","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7409:9:26","nodeType":"YulIdentifier","src":"7409:9:26"},{"arguments":[{"name":"value0","nativeSrc":"7424:6:26","nodeType":"YulIdentifier","src":"7424:6:26"},{"kind":"number","nativeSrc":"7432:42:26","nodeType":"YulLiteral","src":"7432:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7420:3:26","nodeType":"YulIdentifier","src":"7420:3:26"},"nativeSrc":"7420:55:26","nodeType":"YulFunctionCall","src":"7420:55:26"}],"functionName":{"name":"mstore","nativeSrc":"7402:6:26","nodeType":"YulIdentifier","src":"7402:6:26"},"nativeSrc":"7402:74:26","nodeType":"YulFunctionCall","src":"7402:74:26"},"nativeSrc":"7402:74:26","nodeType":"YulExpressionStatement","src":"7402:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7496:9:26","nodeType":"YulIdentifier","src":"7496:9:26"},{"kind":"number","nativeSrc":"7507:2:26","nodeType":"YulLiteral","src":"7507:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7492:3:26","nodeType":"YulIdentifier","src":"7492:3:26"},"nativeSrc":"7492:18:26","nodeType":"YulFunctionCall","src":"7492:18:26"},{"arguments":[{"name":"value1","nativeSrc":"7516:6:26","nodeType":"YulIdentifier","src":"7516:6:26"},{"kind":"number","nativeSrc":"7524:42:26","nodeType":"YulLiteral","src":"7524:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7512:3:26","nodeType":"YulIdentifier","src":"7512:3:26"},"nativeSrc":"7512:55:26","nodeType":"YulFunctionCall","src":"7512:55:26"}],"functionName":{"name":"mstore","nativeSrc":"7485:6:26","nodeType":"YulIdentifier","src":"7485:6:26"},"nativeSrc":"7485:83:26","nodeType":"YulFunctionCall","src":"7485:83:26"},"nativeSrc":"7485:83:26","nodeType":"YulExpressionStatement","src":"7485:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7588:9:26","nodeType":"YulIdentifier","src":"7588:9:26"},{"kind":"number","nativeSrc":"7599:2:26","nodeType":"YulLiteral","src":"7599:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7584:3:26","nodeType":"YulIdentifier","src":"7584:3:26"},"nativeSrc":"7584:18:26","nodeType":"YulFunctionCall","src":"7584:18:26"},{"name":"value2","nativeSrc":"7604:6:26","nodeType":"YulIdentifier","src":"7604:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7577:6:26","nodeType":"YulIdentifier","src":"7577:6:26"},"nativeSrc":"7577:34:26","nodeType":"YulFunctionCall","src":"7577:34:26"},"nativeSrc":"7577:34:26","nodeType":"YulExpressionStatement","src":"7577:34:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7631:9:26","nodeType":"YulIdentifier","src":"7631:9:26"},{"kind":"number","nativeSrc":"7642:2:26","nodeType":"YulLiteral","src":"7642:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7627:3:26","nodeType":"YulIdentifier","src":"7627:3:26"},"nativeSrc":"7627:18:26","nodeType":"YulFunctionCall","src":"7627:18:26"},{"kind":"number","nativeSrc":"7647:3:26","nodeType":"YulLiteral","src":"7647:3:26","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"7620:6:26","nodeType":"YulIdentifier","src":"7620:6:26"},"nativeSrc":"7620:31:26","nodeType":"YulFunctionCall","src":"7620:31:26"},"nativeSrc":"7620:31:26","nodeType":"YulExpressionStatement","src":"7620:31:26"},{"nativeSrc":"7660:27:26","nodeType":"YulVariableDeclaration","src":"7660:27:26","value":{"arguments":[{"name":"value3","nativeSrc":"7680:6:26","nodeType":"YulIdentifier","src":"7680:6:26"}],"functionName":{"name":"mload","nativeSrc":"7674:5:26","nodeType":"YulIdentifier","src":"7674:5:26"},"nativeSrc":"7674:13:26","nodeType":"YulFunctionCall","src":"7674:13:26"},"variables":[{"name":"length","nativeSrc":"7664:6:26","nodeType":"YulTypedName","src":"7664:6:26","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7707:9:26","nodeType":"YulIdentifier","src":"7707:9:26"},{"kind":"number","nativeSrc":"7718:3:26","nodeType":"YulLiteral","src":"7718:3:26","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7703:3:26","nodeType":"YulIdentifier","src":"7703:3:26"},"nativeSrc":"7703:19:26","nodeType":"YulFunctionCall","src":"7703:19:26"},{"name":"length","nativeSrc":"7724:6:26","nodeType":"YulIdentifier","src":"7724:6:26"}],"functionName":{"name":"mstore","nativeSrc":"7696:6:26","nodeType":"YulIdentifier","src":"7696:6:26"},"nativeSrc":"7696:35:26","nodeType":"YulFunctionCall","src":"7696:35:26"},"nativeSrc":"7696:35:26","nodeType":"YulExpressionStatement","src":"7696:35:26"},{"nativeSrc":"7740:10:26","nodeType":"YulVariableDeclaration","src":"7740:10:26","value":{"kind":"number","nativeSrc":"7749:1:26","nodeType":"YulLiteral","src":"7749:1:26","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"7744:1:26","nodeType":"YulTypedName","src":"7744:1:26","type":""}]},{"body":{"nativeSrc":"7809:91:26","nodeType":"YulBlock","src":"7809:91:26","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7838:9:26","nodeType":"YulIdentifier","src":"7838:9:26"},{"name":"i","nativeSrc":"7849:1:26","nodeType":"YulIdentifier","src":"7849:1:26"}],"functionName":{"name":"add","nativeSrc":"7834:3:26","nodeType":"YulIdentifier","src":"7834:3:26"},"nativeSrc":"7834:17:26","nodeType":"YulFunctionCall","src":"7834:17:26"},{"kind":"number","nativeSrc":"7853:3:26","nodeType":"YulLiteral","src":"7853:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7830:3:26","nodeType":"YulIdentifier","src":"7830:3:26"},"nativeSrc":"7830:27:26","nodeType":"YulFunctionCall","src":"7830:27:26"},{"arguments":[{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"7873:6:26","nodeType":"YulIdentifier","src":"7873:6:26"},{"name":"i","nativeSrc":"7881:1:26","nodeType":"YulIdentifier","src":"7881:1:26"}],"functionName":{"name":"add","nativeSrc":"7869:3:26","nodeType":"YulIdentifier","src":"7869:3:26"},"nativeSrc":"7869:14:26","nodeType":"YulFunctionCall","src":"7869:14:26"},{"kind":"number","nativeSrc":"7885:2:26","nodeType":"YulLiteral","src":"7885:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7865:3:26","nodeType":"YulIdentifier","src":"7865:3:26"},"nativeSrc":"7865:23:26","nodeType":"YulFunctionCall","src":"7865:23:26"}],"functionName":{"name":"mload","nativeSrc":"7859:5:26","nodeType":"YulIdentifier","src":"7859:5:26"},"nativeSrc":"7859:30:26","nodeType":"YulFunctionCall","src":"7859:30:26"}],"functionName":{"name":"mstore","nativeSrc":"7823:6:26","nodeType":"YulIdentifier","src":"7823:6:26"},"nativeSrc":"7823:67:26","nodeType":"YulFunctionCall","src":"7823:67:26"},"nativeSrc":"7823:67:26","nodeType":"YulExpressionStatement","src":"7823:67:26"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"7770:1:26","nodeType":"YulIdentifier","src":"7770:1:26"},{"name":"length","nativeSrc":"7773:6:26","nodeType":"YulIdentifier","src":"7773:6:26"}],"functionName":{"name":"lt","nativeSrc":"7767:2:26","nodeType":"YulIdentifier","src":"7767:2:26"},"nativeSrc":"7767:13:26","nodeType":"YulFunctionCall","src":"7767:13:26"},"nativeSrc":"7759:141:26","nodeType":"YulForLoop","post":{"nativeSrc":"7781:19:26","nodeType":"YulBlock","src":"7781:19:26","statements":[{"nativeSrc":"7783:15:26","nodeType":"YulAssignment","src":"7783:15:26","value":{"arguments":[{"name":"i","nativeSrc":"7792:1:26","nodeType":"YulIdentifier","src":"7792:1:26"},{"kind":"number","nativeSrc":"7795:2:26","nodeType":"YulLiteral","src":"7795:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7788:3:26","nodeType":"YulIdentifier","src":"7788:3:26"},"nativeSrc":"7788:10:26","nodeType":"YulFunctionCall","src":"7788:10:26"},"variableNames":[{"name":"i","nativeSrc":"7783:1:26","nodeType":"YulIdentifier","src":"7783:1:26"}]}]},"pre":{"nativeSrc":"7763:3:26","nodeType":"YulBlock","src":"7763:3:26","statements":[]},"src":"7759:141:26"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7924:9:26","nodeType":"YulIdentifier","src":"7924:9:26"},{"name":"length","nativeSrc":"7935:6:26","nodeType":"YulIdentifier","src":"7935:6:26"}],"functionName":{"name":"add","nativeSrc":"7920:3:26","nodeType":"YulIdentifier","src":"7920:3:26"},"nativeSrc":"7920:22:26","nodeType":"YulFunctionCall","src":"7920:22:26"},{"kind":"number","nativeSrc":"7944:3:26","nodeType":"YulLiteral","src":"7944:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7916:3:26","nodeType":"YulIdentifier","src":"7916:3:26"},"nativeSrc":"7916:32:26","nodeType":"YulFunctionCall","src":"7916:32:26"},{"kind":"number","nativeSrc":"7950:1:26","nodeType":"YulLiteral","src":"7950:1:26","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7909:6:26","nodeType":"YulIdentifier","src":"7909:6:26"},"nativeSrc":"7909:43:26","nodeType":"YulFunctionCall","src":"7909:43:26"},"nativeSrc":"7909:43:26","nodeType":"YulExpressionStatement","src":"7909:43:26"},{"nativeSrc":"7961:122:26","nodeType":"YulAssignment","src":"7961:122:26","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7977:9:26","nodeType":"YulIdentifier","src":"7977:9:26"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"7996:6:26","nodeType":"YulIdentifier","src":"7996:6:26"},{"kind":"number","nativeSrc":"8004:2:26","nodeType":"YulLiteral","src":"8004:2:26","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"7992:3:26","nodeType":"YulIdentifier","src":"7992:3:26"},"nativeSrc":"7992:15:26","nodeType":"YulFunctionCall","src":"7992:15:26"},{"kind":"number","nativeSrc":"8009:66:26","nodeType":"YulLiteral","src":"8009:66:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"7988:3:26","nodeType":"YulIdentifier","src":"7988:3:26"},"nativeSrc":"7988:88:26","nodeType":"YulFunctionCall","src":"7988:88:26"}],"functionName":{"name":"add","nativeSrc":"7973:3:26","nodeType":"YulIdentifier","src":"7973:3:26"},"nativeSrc":"7973:104:26","nodeType":"YulFunctionCall","src":"7973:104:26"},{"kind":"number","nativeSrc":"8079:3:26","nodeType":"YulLiteral","src":"8079:3:26","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"7969:3:26","nodeType":"YulIdentifier","src":"7969:3:26"},"nativeSrc":"7969:114:26","nodeType":"YulFunctionCall","src":"7969:114:26"},"variableNames":[{"name":"tail","nativeSrc":"7961:4:26","nodeType":"YulIdentifier","src":"7961:4:26"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"7189:900:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7337:9:26","nodeType":"YulTypedName","src":"7337:9:26","type":""},{"name":"value3","nativeSrc":"7348:6:26","nodeType":"YulTypedName","src":"7348:6:26","type":""},{"name":"value2","nativeSrc":"7356:6:26","nodeType":"YulTypedName","src":"7356:6:26","type":""},{"name":"value1","nativeSrc":"7364:6:26","nodeType":"YulTypedName","src":"7364:6:26","type":""},{"name":"value0","nativeSrc":"7372:6:26","nodeType":"YulTypedName","src":"7372:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7383:4:26","nodeType":"YulTypedName","src":"7383:4:26","type":""}],"src":"7189:900:26"},{"body":{"nativeSrc":"8172:199:26","nodeType":"YulBlock","src":"8172:199:26","statements":[{"body":{"nativeSrc":"8218:16:26","nodeType":"YulBlock","src":"8218:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8227:1:26","nodeType":"YulLiteral","src":"8227:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8230:1:26","nodeType":"YulLiteral","src":"8230:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8220:6:26","nodeType":"YulIdentifier","src":"8220:6:26"},"nativeSrc":"8220:12:26","nodeType":"YulFunctionCall","src":"8220:12:26"},"nativeSrc":"8220:12:26","nodeType":"YulExpressionStatement","src":"8220:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8193:7:26","nodeType":"YulIdentifier","src":"8193:7:26"},{"name":"headStart","nativeSrc":"8202:9:26","nodeType":"YulIdentifier","src":"8202:9:26"}],"functionName":{"name":"sub","nativeSrc":"8189:3:26","nodeType":"YulIdentifier","src":"8189:3:26"},"nativeSrc":"8189:23:26","nodeType":"YulFunctionCall","src":"8189:23:26"},{"kind":"number","nativeSrc":"8214:2:26","nodeType":"YulLiteral","src":"8214:2:26","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8185:3:26","nodeType":"YulIdentifier","src":"8185:3:26"},"nativeSrc":"8185:32:26","nodeType":"YulFunctionCall","src":"8185:32:26"},"nativeSrc":"8182:52:26","nodeType":"YulIf","src":"8182:52:26"},{"nativeSrc":"8243:29:26","nodeType":"YulVariableDeclaration","src":"8243:29:26","value":{"arguments":[{"name":"headStart","nativeSrc":"8262:9:26","nodeType":"YulIdentifier","src":"8262:9:26"}],"functionName":{"name":"mload","nativeSrc":"8256:5:26","nodeType":"YulIdentifier","src":"8256:5:26"},"nativeSrc":"8256:16:26","nodeType":"YulFunctionCall","src":"8256:16:26"},"variables":[{"name":"value","nativeSrc":"8247:5:26","nodeType":"YulTypedName","src":"8247:5:26","type":""}]},{"body":{"nativeSrc":"8325:16:26","nodeType":"YulBlock","src":"8325:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8334:1:26","nodeType":"YulLiteral","src":"8334:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8337:1:26","nodeType":"YulLiteral","src":"8337:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8327:6:26","nodeType":"YulIdentifier","src":"8327:6:26"},"nativeSrc":"8327:12:26","nodeType":"YulFunctionCall","src":"8327:12:26"},"nativeSrc":"8327:12:26","nodeType":"YulExpressionStatement","src":"8327:12:26"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8294:5:26","nodeType":"YulIdentifier","src":"8294:5:26"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8315:5:26","nodeType":"YulIdentifier","src":"8315:5:26"}],"functionName":{"name":"iszero","nativeSrc":"8308:6:26","nodeType":"YulIdentifier","src":"8308:6:26"},"nativeSrc":"8308:13:26","nodeType":"YulFunctionCall","src":"8308:13:26"}],"functionName":{"name":"iszero","nativeSrc":"8301:6:26","nodeType":"YulIdentifier","src":"8301:6:26"},"nativeSrc":"8301:21:26","nodeType":"YulFunctionCall","src":"8301:21:26"}],"functionName":{"name":"eq","nativeSrc":"8291:2:26","nodeType":"YulIdentifier","src":"8291:2:26"},"nativeSrc":"8291:32:26","nodeType":"YulFunctionCall","src":"8291:32:26"}],"functionName":{"name":"iszero","nativeSrc":"8284:6:26","nodeType":"YulIdentifier","src":"8284:6:26"},"nativeSrc":"8284:40:26","nodeType":"YulFunctionCall","src":"8284:40:26"},"nativeSrc":"8281:60:26","nodeType":"YulIf","src":"8281:60:26"},{"nativeSrc":"8350:15:26","nodeType":"YulAssignment","src":"8350:15:26","value":{"name":"value","nativeSrc":"8360:5:26","nodeType":"YulIdentifier","src":"8360:5:26"},"variableNames":[{"name":"value0","nativeSrc":"8350:6:26","nodeType":"YulIdentifier","src":"8350:6:26"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8094:277:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8138:9:26","nodeType":"YulTypedName","src":"8138:9:26","type":""},{"name":"dataEnd","nativeSrc":"8149:7:26","nodeType":"YulTypedName","src":"8149:7:26","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8161:6:26","nodeType":"YulTypedName","src":"8161:6:26","type":""}],"src":"8094:277:26"},{"body":{"nativeSrc":"8425:233:26","nodeType":"YulBlock","src":"8425:233:26","statements":[{"nativeSrc":"8435:17:26","nodeType":"YulAssignment","src":"8435:17:26","value":{"arguments":[{"name":"x","nativeSrc":"8447:1:26","nodeType":"YulIdentifier","src":"8447:1:26"},{"name":"y","nativeSrc":"8450:1:26","nodeType":"YulIdentifier","src":"8450:1:26"}],"functionName":{"name":"sub","nativeSrc":"8443:3:26","nodeType":"YulIdentifier","src":"8443:3:26"},"nativeSrc":"8443:9:26","nodeType":"YulFunctionCall","src":"8443:9:26"},"variableNames":[{"name":"diff","nativeSrc":"8435:4:26","nodeType":"YulIdentifier","src":"8435:4:26"}]},{"body":{"nativeSrc":"8484:168:26","nodeType":"YulBlock","src":"8484:168:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8505:1:26","nodeType":"YulLiteral","src":"8505:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8508:77:26","nodeType":"YulLiteral","src":"8508:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8498:6:26","nodeType":"YulIdentifier","src":"8498:6:26"},"nativeSrc":"8498:88:26","nodeType":"YulFunctionCall","src":"8498:88:26"},"nativeSrc":"8498:88:26","nodeType":"YulExpressionStatement","src":"8498:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8606:1:26","nodeType":"YulLiteral","src":"8606:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"8609:4:26","nodeType":"YulLiteral","src":"8609:4:26","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8599:6:26","nodeType":"YulIdentifier","src":"8599:6:26"},"nativeSrc":"8599:15:26","nodeType":"YulFunctionCall","src":"8599:15:26"},"nativeSrc":"8599:15:26","nodeType":"YulExpressionStatement","src":"8599:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8634:1:26","nodeType":"YulLiteral","src":"8634:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"8637:4:26","nodeType":"YulLiteral","src":"8637:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8627:6:26","nodeType":"YulIdentifier","src":"8627:6:26"},"nativeSrc":"8627:15:26","nodeType":"YulFunctionCall","src":"8627:15:26"},"nativeSrc":"8627:15:26","nodeType":"YulExpressionStatement","src":"8627:15:26"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8467:4:26","nodeType":"YulIdentifier","src":"8467:4:26"},{"name":"x","nativeSrc":"8473:1:26","nodeType":"YulIdentifier","src":"8473:1:26"}],"functionName":{"name":"gt","nativeSrc":"8464:2:26","nodeType":"YulIdentifier","src":"8464:2:26"},"nativeSrc":"8464:11:26","nodeType":"YulFunctionCall","src":"8464:11:26"},"nativeSrc":"8461:191:26","nodeType":"YulIf","src":"8461:191:26"}]},"name":"checked_sub_t_uint256","nativeSrc":"8376:282:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8407:1:26","nodeType":"YulTypedName","src":"8407:1:26","type":""},{"name":"y","nativeSrc":"8410:1:26","nodeType":"YulTypedName","src":"8410:1:26","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8416:4:26","nodeType":"YulTypedName","src":"8416:4:26","type":""}],"src":"8376:282:26"},{"body":{"nativeSrc":"8820:309:26","nodeType":"YulBlock","src":"8820:309:26","statements":[{"nativeSrc":"8830:26:26","nodeType":"YulAssignment","src":"8830:26:26","value":{"arguments":[{"name":"headStart","nativeSrc":"8842:9:26","nodeType":"YulIdentifier","src":"8842:9:26"},{"kind":"number","nativeSrc":"8853:2:26","nodeType":"YulLiteral","src":"8853:2:26","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8838:3:26","nodeType":"YulIdentifier","src":"8838:3:26"},"nativeSrc":"8838:18:26","nodeType":"YulFunctionCall","src":"8838:18:26"},"variableNames":[{"name":"tail","nativeSrc":"8830:4:26","nodeType":"YulIdentifier","src":"8830:4:26"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8872:9:26","nodeType":"YulIdentifier","src":"8872:9:26"},{"arguments":[{"name":"value0","nativeSrc":"8887:6:26","nodeType":"YulIdentifier","src":"8887:6:26"},{"kind":"number","nativeSrc":"8895:42:26","nodeType":"YulLiteral","src":"8895:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8883:3:26","nodeType":"YulIdentifier","src":"8883:3:26"},"nativeSrc":"8883:55:26","nodeType":"YulFunctionCall","src":"8883:55:26"}],"functionName":{"name":"mstore","nativeSrc":"8865:6:26","nodeType":"YulIdentifier","src":"8865:6:26"},"nativeSrc":"8865:74:26","nodeType":"YulFunctionCall","src":"8865:74:26"},"nativeSrc":"8865:74:26","nodeType":"YulExpressionStatement","src":"8865:74:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8959:9:26","nodeType":"YulIdentifier","src":"8959:9:26"},{"kind":"number","nativeSrc":"8970:2:26","nodeType":"YulLiteral","src":"8970:2:26","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8955:3:26","nodeType":"YulIdentifier","src":"8955:3:26"},"nativeSrc":"8955:18:26","nodeType":"YulFunctionCall","src":"8955:18:26"},{"arguments":[{"name":"value1","nativeSrc":"8979:6:26","nodeType":"YulIdentifier","src":"8979:6:26"},{"kind":"number","nativeSrc":"8987:42:26","nodeType":"YulLiteral","src":"8987:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8975:3:26","nodeType":"YulIdentifier","src":"8975:3:26"},"nativeSrc":"8975:55:26","nodeType":"YulFunctionCall","src":"8975:55:26"}],"functionName":{"name":"mstore","nativeSrc":"8948:6:26","nodeType":"YulIdentifier","src":"8948:6:26"},"nativeSrc":"8948:83:26","nodeType":"YulFunctionCall","src":"8948:83:26"},"nativeSrc":"8948:83:26","nodeType":"YulExpressionStatement","src":"8948:83:26"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9051:9:26","nodeType":"YulIdentifier","src":"9051:9:26"},{"kind":"number","nativeSrc":"9062:2:26","nodeType":"YulLiteral","src":"9062:2:26","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9047:3:26","nodeType":"YulIdentifier","src":"9047:3:26"},"nativeSrc":"9047:18:26","nodeType":"YulFunctionCall","src":"9047:18:26"},{"arguments":[{"name":"value2","nativeSrc":"9071:6:26","nodeType":"YulIdentifier","src":"9071:6:26"},{"kind":"number","nativeSrc":"9079:42:26","nodeType":"YulLiteral","src":"9079:42:26","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9067:3:26","nodeType":"YulIdentifier","src":"9067:3:26"},"nativeSrc":"9067:55:26","nodeType":"YulFunctionCall","src":"9067:55:26"}],"functionName":{"name":"mstore","nativeSrc":"9040:6:26","nodeType":"YulIdentifier","src":"9040:6:26"},"nativeSrc":"9040:83:26","nodeType":"YulFunctionCall","src":"9040:83:26"},"nativeSrc":"9040:83:26","nodeType":"YulExpressionStatement","src":"9040:83:26"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"8663:466:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8773:9:26","nodeType":"YulTypedName","src":"8773:9:26","type":""},{"name":"value2","nativeSrc":"8784:6:26","nodeType":"YulTypedName","src":"8784:6:26","type":""},{"name":"value1","nativeSrc":"8792:6:26","nodeType":"YulTypedName","src":"8792:6:26","type":""},{"name":"value0","nativeSrc":"8800:6:26","nodeType":"YulTypedName","src":"8800:6:26","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8811:4:26","nodeType":"YulTypedName","src":"8811:4:26","type":""}],"src":"8663:466:26"},{"body":{"nativeSrc":"9166:152:26","nodeType":"YulBlock","src":"9166:152:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9183:1:26","nodeType":"YulLiteral","src":"9183:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"9186:77:26","nodeType":"YulLiteral","src":"9186:77:26","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9176:6:26","nodeType":"YulIdentifier","src":"9176:6:26"},"nativeSrc":"9176:88:26","nodeType":"YulFunctionCall","src":"9176:88:26"},"nativeSrc":"9176:88:26","nodeType":"YulExpressionStatement","src":"9176:88:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9280:1:26","nodeType":"YulLiteral","src":"9280:1:26","type":"","value":"4"},{"kind":"number","nativeSrc":"9283:4:26","nodeType":"YulLiteral","src":"9283:4:26","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"9273:6:26","nodeType":"YulIdentifier","src":"9273:6:26"},"nativeSrc":"9273:15:26","nodeType":"YulFunctionCall","src":"9273:15:26"},"nativeSrc":"9273:15:26","nodeType":"YulExpressionStatement","src":"9273:15:26"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9304:1:26","nodeType":"YulLiteral","src":"9304:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"9307:4:26","nodeType":"YulLiteral","src":"9307:4:26","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9297:6:26","nodeType":"YulIdentifier","src":"9297:6:26"},"nativeSrc":"9297:15:26","nodeType":"YulFunctionCall","src":"9297:15:26"},"nativeSrc":"9297:15:26","nodeType":"YulExpressionStatement","src":"9297:15:26"}]},"name":"panic_error_0x32","nativeSrc":"9134:184:26","nodeType":"YulFunctionDefinition","src":"9134:184:26"},{"body":{"nativeSrc":"9453:201:26","nodeType":"YulBlock","src":"9453:201:26","statements":[{"body":{"nativeSrc":"9491:16:26","nodeType":"YulBlock","src":"9491:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9500:1:26","nodeType":"YulLiteral","src":"9500:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"9503:1:26","nodeType":"YulLiteral","src":"9503:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9493:6:26","nodeType":"YulIdentifier","src":"9493:6:26"},"nativeSrc":"9493:12:26","nodeType":"YulFunctionCall","src":"9493:12:26"},"nativeSrc":"9493:12:26","nodeType":"YulExpressionStatement","src":"9493:12:26"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"9469:10:26","nodeType":"YulIdentifier","src":"9469:10:26"},{"name":"endIndex","nativeSrc":"9481:8:26","nodeType":"YulIdentifier","src":"9481:8:26"}],"functionName":{"name":"gt","nativeSrc":"9466:2:26","nodeType":"YulIdentifier","src":"9466:2:26"},"nativeSrc":"9466:24:26","nodeType":"YulFunctionCall","src":"9466:24:26"},"nativeSrc":"9463:44:26","nodeType":"YulIf","src":"9463:44:26"},{"body":{"nativeSrc":"9540:16:26","nodeType":"YulBlock","src":"9540:16:26","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9549:1:26","nodeType":"YulLiteral","src":"9549:1:26","type":"","value":"0"},{"kind":"number","nativeSrc":"9552:1:26","nodeType":"YulLiteral","src":"9552:1:26","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9542:6:26","nodeType":"YulIdentifier","src":"9542:6:26"},"nativeSrc":"9542:12:26","nodeType":"YulFunctionCall","src":"9542:12:26"},"nativeSrc":"9542:12:26","nodeType":"YulExpressionStatement","src":"9542:12:26"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"9522:8:26","nodeType":"YulIdentifier","src":"9522:8:26"},{"name":"length","nativeSrc":"9532:6:26","nodeType":"YulIdentifier","src":"9532:6:26"}],"functionName":{"name":"gt","nativeSrc":"9519:2:26","nodeType":"YulIdentifier","src":"9519:2:26"},"nativeSrc":"9519:20:26","nodeType":"YulFunctionCall","src":"9519:20:26"},"nativeSrc":"9516:40:26","nodeType":"YulIf","src":"9516:40:26"},{"nativeSrc":"9565:36:26","nodeType":"YulAssignment","src":"9565:36:26","value":{"arguments":[{"name":"offset","nativeSrc":"9582:6:26","nodeType":"YulIdentifier","src":"9582:6:26"},{"name":"startIndex","nativeSrc":"9590:10:26","nodeType":"YulIdentifier","src":"9590:10:26"}],"functionName":{"name":"add","nativeSrc":"9578:3:26","nodeType":"YulIdentifier","src":"9578:3:26"},"nativeSrc":"9578:23:26","nodeType":"YulFunctionCall","src":"9578:23:26"},"variableNames":[{"name":"offsetOut","nativeSrc":"9565:9:26","nodeType":"YulIdentifier","src":"9565:9:26"}]},{"nativeSrc":"9610:38:26","nodeType":"YulAssignment","src":"9610:38:26","value":{"arguments":[{"name":"endIndex","nativeSrc":"9627:8:26","nodeType":"YulIdentifier","src":"9627:8:26"},{"name":"startIndex","nativeSrc":"9637:10:26","nodeType":"YulIdentifier","src":"9637:10:26"}],"functionName":{"name":"sub","nativeSrc":"9623:3:26","nodeType":"YulIdentifier","src":"9623:3:26"},"nativeSrc":"9623:25:26","nodeType":"YulFunctionCall","src":"9623:25:26"},"variableNames":[{"name":"lengthOut","nativeSrc":"9610:9:26","nodeType":"YulIdentifier","src":"9610:9:26"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"9323:331:26","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"9387:6:26","nodeType":"YulTypedName","src":"9387:6:26","type":""},{"name":"length","nativeSrc":"9395:6:26","nodeType":"YulTypedName","src":"9395:6:26","type":""},{"name":"startIndex","nativeSrc":"9403:10:26","nodeType":"YulTypedName","src":"9403:10:26","type":""},{"name":"endIndex","nativeSrc":"9415:8:26","nodeType":"YulTypedName","src":"9415:8:26","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"9428:9:26","nodeType":"YulTypedName","src":"9428:9:26","type":""},{"name":"lengthOut","nativeSrc":"9439:9:26","nodeType":"YulTypedName","src":"9439:9:26","type":""}],"src":"9323:331:26"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 96))\n        value3 := value_3\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$747__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256t_array$_t_bytes32_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 64))\n        value2 := value_1\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if gt(add(add(_1, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_1, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 64))\n        value2 := value_1\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_enum$_ClaimError_$2185__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        if iszero(lt(value0, 4))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x21)\n            revert(0, 0x24)\n        }\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_contract$_IERC20SafeTransfers_$862__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_packed_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, value0)\n        mstore(add(pos, 32), and(shl(96, value1), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_uint256__to_t_bytes32_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        let length := mload(value3)\n        mstore(add(headStart, 128), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(add(headStart, i), 160), mload(add(add(value3, i), 32)))\n        }\n        mstore(add(add(headStart, length), 160), 0)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 160)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":26,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"601":[{"length":32,"start":400},{"length":32,"start":493},{"length":32,"start":3341},{"length":32,"start":3483},{"length":32,"start":3662},{"length":32,"start":3724}],"2197":[{"length":32,"start":734},{"length":32,"start":1790}],"2200":[{"length":32,"start":327},{"length":32,"start":1835}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x100 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xCC3C0F06 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xEC7F7494 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xEC7F7494 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0xEFC4C631 EQ PUSH2 0x2D9 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0xFBB0F673 EQ PUSH2 0x313 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xCC3C0F06 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x255 JUMPI DUP1 PUSH4 0xD6A3138B EQ PUSH2 0x25D JUMPI DUP1 PUSH4 0xDC45DEF6 EQ PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x563CAC28 EQ PUSH2 0x1CA JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x1DD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x22A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x105 JUMPI DUP1 PUSH4 0x328A8FC EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x14AE36AE EQ PUSH2 0x142 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x18E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x113 CALLDATASIZE PUSH1 0x4 PUSH2 0x102C JUMP JUMPDEST PUSH2 0x333 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x140 PUSH2 0x13B CALLDATASIZE PUSH1 0x4 PUSH2 0x106E JUMP JUMPDEST PUSH2 0x34D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x169 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x124 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x169 JUMP JUMPDEST PUSH2 0x1BC PUSH2 0x4C2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP3 SWAP2 SWAP1 PUSH2 0x10A0 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x1D8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1116 JUMP JUMPDEST PUSH2 0x4D5 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x1EB CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x844 JUMP JUMPDEST PUSH2 0x118 PUSH2 0x240 CALLDATASIZE PUSH1 0x4 PUSH2 0x11CA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x169 PUSH2 0x870 JUMP JUMPDEST PUSH2 0x270 PUSH2 0x26B CALLDATASIZE PUSH1 0x4 PUSH2 0x11E3 JUMP JUMPDEST PUSH2 0x87A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x124 SWAP2 SWAP1 PUSH2 0x1248 JUMP JUMPDEST PUSH2 0x2AB PUSH2 0x28B CALLDATASIZE PUSH1 0x4 PUSH2 0x11CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SLOAD DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH2 0x124 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x8F2 JUMP JUMPDEST PUSH2 0x169 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x140 PUSH2 0x30E CALLDATASIZE PUSH1 0x4 PUSH2 0x11AF JUMP JUMPDEST PUSH2 0x96A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x169 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x347 DUP3 PUSH2 0x341 PUSH2 0x988 JUMP JUMPDEST SWAP1 PUSH2 0x9B6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x366 PUSH2 0x358 PUSH2 0xA90 JUMP JUMPDEST PUSH2 0x360 PUSH2 0xA9A JUMP JUMPDEST SWAP1 PUSH2 0xAC8 JUMP JUMPDEST DUP3 PUSH2 0x39D JUMPI PUSH1 0x40 MLOAD PUSH32 0x9DD854D300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 DUP3 LT ISZERO DUP1 PUSH2 0x3AC JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO PUSH2 0x3F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x790C7CEF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE TIMESTAMP PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0x441 JUMPI PUSH1 0x40 MLOAD PUSH32 0xED10979D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x60 DUP2 ADD DUP3 MSTORE DUP5 DUP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP6 DUP2 MSTORE DUP3 DUP5 ADD DUP6 DUP2 MSTORE PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 SWAP1 MSTORE DUP6 SWAP1 KECCAK256 SWAP4 MLOAD DUP5 SSTORE SWAP1 MLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE MLOAD PUSH1 0x2 SWAP1 SWAP2 ADD SSTORE MLOAD DUP2 SWAP1 DUP5 SWAP1 DUP7 SWAP1 PUSH32 0x97DF4A2FB6656595BC6EB616C2068E9D50031428EF69D8849590BC9F3DEC620B SWAP1 PUSH2 0x4B4 SWAP1 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH2 0xB37 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE PUSH1 0x60 DUP8 SWAP1 SHL PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 AND DUP3 DUP5 ADD MSTORE PUSH1 0x54 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x74 SWAP1 SWAP3 ADD DUP4 MSTORE DUP2 MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x1 SWAP1 SWAP3 MSTORE SWAP2 DUP2 KECCAK256 SWAP1 PUSH2 0x546 DUP3 DUP5 PUSH2 0xB42 JUMP JUMPDEST SWAP1 POP PUSH1 0x1 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x55C JUMPI PUSH2 0x55C PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x596 JUMPI PUSH1 0x40 MLOAD PUSH32 0x84F229DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5AA JUMPI PUSH2 0x5AA PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDBEB4F4D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE TIMESTAMP PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x5FE JUMPI PUSH2 0x5FE PUSH2 0x1219 JUMP JUMPDEST SUB PUSH2 0x63F JUMPI PUSH1 0x40 MLOAD PUSH32 0xDC20789F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x3EF JUMP JUMPDEST DUP2 SLOAD PUSH2 0x64D DUP7 DUP7 DUP4 DUP8 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x6A9 JUMPI PUSH1 0x40 MLOAD PUSH32 0xCC55900D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP11 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x3EF JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP2 SLOAD SWAP2 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND SWAP4 PUSH4 0xB88D4FDE SWAP4 SWAP2 AND SWAP2 PUSH32 0x0 SWAP2 DUP13 SWAP2 PUSH2 0x775 SWAP2 DUP16 SWAP2 ADD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7A3 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1289 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7C2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E6 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST POP DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 DUP11 PUSH32 0x6DA15703C9BAA6922F6A2F40FE90A03F70A24B9113EDD75F913454A45D996CD DUP11 PUSH1 0x40 MLOAD PUSH2 0x831 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0x851 PUSH2 0xA9A JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD SWAP3 DUP4 ADD DUP8 SWAP1 MSTORE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP8 SWAP1 SHL AND SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x54 DUP3 ADD DUP5 SWAP1 MSTORE PUSH2 0x8EA SWAP2 PUSH1 0x74 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH2 0xB42 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8FD PUSH2 0x358 PUSH2 0xA90 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 0x40 MLOAD SWAP1 SWAP2 PUSH32 0x329827290D5CA169F07779E969AD40B6DF3087F6C12C9467C96F1A88316A5BDB SWAP2 LOG2 POP JUMP JUMPDEST PUSH2 0x985 PUSH2 0x975 PUSH2 0xA90 JUMP JUMPDEST DUP3 PUSH2 0x97E PUSH2 0xA9A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xBB5 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x347 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1358 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA06 JUMPI POP PUSH1 0x0 PUSH2 0x347 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA57 JUMPI POP PUSH1 0x1 PUSH2 0x347 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x86B PUSH2 0xCCA JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x347 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1358 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xB33 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH2 0xE17 JUMP JUMPDEST DUP2 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xB53 JUMPI POP PUSH1 0x1 PUSH2 0x347 JUMP JUMPDEST DUP3 PUSH1 0x1 ADD SLOAD TIMESTAMP LT DUP1 PUSH2 0xB68 JUMPI POP DUP3 PUSH1 0x2 ADD SLOAD TIMESTAMP GT JUMPDEST ISZERO PUSH2 0xB75 JUMPI POP PUSH1 0x2 PUSH2 0x347 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0xB94 JUMPI POP PUSH1 0x3 PUSH2 0x347 JUMP JUMPDEST POP PUSH1 0x0 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBAB DUP7 DUP7 DUP6 PUSH2 0xF87 JUMP JUMPDEST EQ SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xC22 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x3EF JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC4 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xCDA JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xCE4 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xE06 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xDE2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE06 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST ISZERO PUSH2 0xE10 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE28 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE36 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0xF71 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x19A2028 CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE ADDRESS PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF71 SWAP2 SWAP1 PUSH2 0x1336 JUMP JUMPDEST ISZERO PUSH2 0xF7E JUMPI PUSH2 0x4CD PUSH2 0xFC9 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xFC0 JUMPI PUSH2 0xFB6 DUP3 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0xFAA JUMPI PUSH2 0xFAA PUSH2 0x1392 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xFFA JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xF8C JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4CD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x13C1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1016 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1025 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x103E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1084 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1111 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x112E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH2 0x113E PUSH1 0x20 DUP8 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 ADD PUSH1 0x1F DUP2 ADD DUP9 SGT PUSH2 0x1172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1189 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP9 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP5 ADD ADD GT ISZERO PUSH2 0x119E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 POP POP POP PUSH1 0x20 ADD SWAP2 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1025 DUP3 PUSH2 0x10ED JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x11DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x11F8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH2 0x1208 PUSH1 0x20 DUP6 ADD PUSH2 0x10ED JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x4 DUP4 LT PUSH2 0x1283 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 DUP3 MLOAD DUP1 PUSH1 0x80 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x12F5 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD PUSH1 0xA0 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x12D8 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA0 DUP3 DUP6 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x347 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x13D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x13DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE8 PUSH22 0x97B3BE084FF56941D09115ACCD7E918BE850B5CB9139 0xC6 SELFDESTRUCT 0xF7 0xB5 0xA7 0xB8 DUP6 DUP1 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"268:644:25:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:26;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;5401:717:24;;;;;;:::i;:::-;;:::i;:::-;;1630:37;;;;;;;;1311:42:26;1299:55;;;1281:74;;1269:2;1254:18;1630:37:24;1135:226:26;728:115:11;817:19;728:115;;816:94:25;;;:::i;:::-;;;;;;;;:::i;7445:1057:24:-;;;;;;:::i;:::-;;:::i;878:149:11:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;710:120:1;;;:::i;1941:52:24:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;609:91:25;;;:::i;8805:218:24:-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1832:59::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4843:25:26;;;4899:2;4884:18;;4877:34;;;;4927:18;;;4920:34;4831:2;4816:18;1832:59:24;4641:319:26;6376:263:24;;;;;;:::i;:::-;;:::i;1518:48::-;;;;;864:152:1;;;;;;:::i;:::-;;:::i;1730:32:24:-;;;;;;;;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;5401:717:24:-;5521:70;5578:12;:10;:12::i;:::-;5521:33;:31;:33::i;:::-;:56;;:70::i;:::-;5606:10;5602:81;;5653:19;;;;;;;;;;;;;;5602:81;5710:7;5697:9;:20;;:50;;;;5732:15;5721:7;:26;;5697:50;5693:143;;;5770:55;;;;;;;;4843:25:26;;;4884:18;;;4877:34;;;5809:15:24;4927:18:26;;;4920:34;4816:18;;5770:55:24;;;;;;;;5693:143;5894:1;5850:21;;;:12;:21;;;;;:32;:46;5846:113;;5919:29;;;;;;;;5693:25:26;;;5666:18;;5919:29:24;5547:177:26;5846:113:24;5993:43;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5969:21:24;;;:12;:21;;;;;;;:67;;;;;;;;;;;;;;;;;;;6052:59;6028:7;;6005:10;;5982:7;;6052:59;;;;6017:9;5693:25:26;;5681:2;5666:18;;5547:177;6052:59:24;;;;;;;;5401:717;;;;:::o;816:94:25:-;860:14;;893:10;:8;:10::i;:::-;886:17;;;;816:94;;:::o;7445:1057:24:-;7590:44;;;;;;;6096:19:26;;;6153:2;6149:15;;;6166:66;6145:88;6131:12;;;6124:110;6250:12;;;;6243:28;;;7590:44:24;;;;;;;;;;6287:12:26;;;;7590:44:24;;7580:55;;;;;;;;;-1:-1:-1;7679:21:24;;;:12;:21;;;;;;;7739:28;7679:21;7580:55;7739:9;:28::i;:::-;7711:56;-1:-1:-1;7799:27:24;7781:14;:45;;;;;;;;:::i;:::-;;7777:355;;7849:25;;;;;;;;5693::26;;;5666:18;;7849:25:24;5547:177:26;7777:355:24;7913:27;7895:14;:45;;;;;;;;:::i;:::-;;7891:241;;7963:42;;;;;;;;6484:25:26;;;7989:15:24;6525:18:26;;;6518:34;6457:18;;7963:42:24;6310:248:26;7891:241:24;8044:25;8026:14;:43;;;;;;;;:::i;:::-;;8022:110;;8092:29;;;;;;;;6484:25:26;;;6525:18;;;6518:34;;;6457:18;;8092:29:24;6310:248:26;8022:110:24;8157:22;;8194:32;:5;;8157:22;8221:4;8194:20;:32::i;:::-;8189:111;;8249:40;;;;;;;;7018:25:26;;;7091:42;7079:55;;7059:18;;;7052:83;7151:18;;;7144:34;;;6991:18;;8249:40:24;6816:368:26;8189:111:24;8310:13;;;;:7;:13;;;;;;;;:20;;;;8326:4;8310:20;;;8370:17;;8411:21;;8341:28;:11;:28;;;;;8370:17;;;8389:12;;8403:6;;8411:21;;8422:9;;8411:21;1311:42:26;1299:55;;;;1281:74;;1269:2;1254:18;;1135:226;8411:21:24;;;;;;;;;;;;;8341:92;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;8477:9;8448:47;;8471:4;8462:7;8448:47;8488:6;8448:47;;;;5693:25:26;;5681:2;5666:18;;5547:177;8448:47:24;;;;;;;;7555:947;;;;7445:1057;;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:6;;;;3550:118;782:41:1;775:48;;710:120;:::o;609:91:25:-;655:7;681:12;:10;:12::i;8805:218:24:-;8898:10;8937:21;;;:12;:21;;;;;;;;8970:44;;;;;6096:19:26;;;6166:66;6153:2;6149:15;;;6145:88;6131:12;;;6124:110;;;;6250:12;;;6243:28;;;8927:89:24;;6287:12:26;;8970:44:24;;;;;;;;;;;;8960:55;;;;;;8927:9;:89::i;:::-;8920:96;8805:218;-1:-1:-1;;;;8805:218:24:o;6376:263::-;6455:70;6512:12;:10;:12::i;6455:70::-;6535:17;:40;;;;;;;;;;;;6590:42;;6535:40;;6590:42;;;6376:263;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;10153:175:24:-;10254:7;10280:41;:39;:41::i;5060:174:6:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1311:42:26;1299:55;;4538:25:6;;;1281:74:26;1254:18;;4538:25:6;1135:226:26;4499:64:6;4408:162;;:::o;10383:178:24:-;10482:14;;10515:39;:37;:39::i;9605:493::-;9720:22;;9694:10;;9716:101;;-1:-1:-1;9779:27:24;9772:34;;9716:101;9848:11;:21;;;9830:15;:39;:80;;;;9891:11;:19;;;9873:15;:37;9830:80;9826:145;;;-1:-1:-1;9933:27:24;9926:34;;9826:145;9984:13;;;;:7;:13;;;;;;;;9980:76;;;-1:-1:-1;10020:25:24;10013:32;;9980:76;-1:-1:-1;10073:18:24;9605:493;;;;:::o;4637:172:23:-;4738:4;4798;4761:33;4782:5;;4789:4;4761:20;:33::i;:::-;:41;;4637:172;-1:-1:-1;;;;;4637:172:23:o;3054:369:6:-;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1311:42:26;1299:55;;3237:24:6;;;1281:74:26;1254:18;;3237:24:6;1135:226:26;3201:60:6;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:6;3271:146;3142:281;3054:369;;;:::o;784:760:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:760::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:12;;;;;:39;8883:55:26;;;1396:74:12;;;8865::26;1444:10:12;8955:18:26;;;8948:83;1464:4:12;9047:18:26;;;9040:83;1396:19:12;:39;;;;8838:18:26;;1396:74:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:12:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;1658:784::-;1709:14;;1926:10;1940:9;1926:23;;:47;;-1:-1:-1;1971:2:12;1953:8;:20;1926:47;1922:93;;;-1:-1:-1;1996:8:12;;;;-1:-1:-1;1658:784:12:o;1922:93::-;2189:10;:42;2211:19;2189:42;;;:153;;-1:-1:-1;2247:39:12;:19;:39;;466:14:15;462:23;;449:37;445:2;441:46;2247:95:12;;;;;;;;;;8895:42:26;8883:55;;;2247:95:12;;;8865:74:26;2316:10:12;8955:18:26;;;8948:83;2336:4:12;9047:18:26;;;9040:83;8838:18;;2247:95:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2172:238;;;2374:25;:23;:25::i;2172:238::-;-1:-1:-1;2427:8:12;;;;-1:-1:-1;1658:784:12:o;5212:318:23:-;5305:7;5347:4;5305:7;5361:134;5381:16;;;5361:134;;;5433:51;5461:12;5475:5;;5481:1;5475:8;;;;;;;:::i;:::-;;;;;;;5433:27;:51::i;:::-;5418:66;-1:-1:-1;5399:3:23;;5361:134;;;-1:-1:-1;5511:12:23;5212:318;-1:-1:-1;;;;5212:318:23:o;616:152:15:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;504:169:22:-;579:7;609:1;605;:5;:61;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;605:61;;;866:13;930:15;;;965:4;958:15;;;1011:4;995:21;;613:25;598:68;504:169;-1:-1:-1;;;504:169:22:o;14:332:26:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:587;629:6;637;645;653;706:3;694:9;685:7;681:23;677:33;674:53;;;723:1;720;713:12;674:53;-1:-1:-1;;768:23:26;;;888:2;873:18;;860:32;;-1:-1:-1;991:2:26;976:18;;963:32;;1094:2;1079:18;1066:32;;-1:-1:-1;543:587:26;-1:-1:-1;543:587:26:o;1623:447::-;1780:2;1769:9;1762:21;1819:6;1814:2;1803:9;1799:18;1792:34;1876:6;1868;1863:2;1852:9;1848:18;1835:48;1932:1;1903:22;;;1927:2;1899:31;;;1892:42;;;;1986:2;1974:15;;;1991:66;1970:88;1955:104;1951:113;;1623:447;-1:-1:-1;1623:447:26:o;2075:196::-;2143:20;;2203:42;2192:54;;2182:65;;2172:93;;2261:1;2258;2251:12;2172:93;2075:196;;;:::o;2276:919::-;2389:6;2397;2405;2413;2421;2474:3;2462:9;2453:7;2449:23;2445:33;2442:53;;;2491:1;2488;2481:12;2442:53;2536:23;;;-1:-1:-1;2602:38:26;2636:2;2621:18;;2602:38;:::i;:::-;2592:48;-1:-1:-1;2713:2:26;2698:18;;2685:32;;-1:-1:-1;2794:2:26;2779:18;;2766:32;2821:18;2810:30;;2807:50;;;2853:1;2850;2843:12;2807:50;2876:22;;2929:4;2921:13;;2917:27;-1:-1:-1;2907:55:26;;2958:1;2955;2948:12;2907:55;2998:2;2985:16;3024:18;3016:6;3013:30;3010:50;;;3056:1;3053;3046:12;3010:50;3109:7;3104:2;3094:6;3091:1;3087:14;3083:2;3079:23;3075:32;3072:45;3069:65;;;3130:1;3127;3120:12;3069:65;2276:919;;;;-1:-1:-1;2276:919:26;;-1:-1:-1;;;3161:2:26;3153:11;;3183:6;2276:919::o;3200:186::-;3259:6;3312:2;3300:9;3291:7;3287:23;3283:32;3280:52;;;3328:1;3325;3318:12;3280:52;3351:29;3370:9;3351:29;:::i;3391:226::-;3450:6;3503:2;3491:9;3482:7;3478:23;3474:32;3471:52;;;3519:1;3516;3509:12;3471:52;-1:-1:-1;3564:23:26;;3391:226;-1:-1:-1;3391:226:26:o;3622:420::-;3699:6;3707;3715;3768:2;3756:9;3747:7;3743:23;3739:32;3736:52;;;3784:1;3781;3774:12;3736:52;3829:23;;;-1:-1:-1;3895:38:26;3929:2;3914:18;;3895:38;:::i;:::-;3622:420;;3885:48;;-1:-1:-1;;;4006:2:26;3991:18;;;;3978:32;;3622:420::o;4047:184::-;4099:77;4096:1;4089:88;4196:4;4193:1;4186:15;4220:4;4217:1;4210:15;4236:400;4383:2;4368:18;;4416:1;4405:13;;4395:201;;4452:77;4449:1;4442:88;4553:4;4550:1;4543:15;4581:4;4578:1;4571:15;4395:201;4605:25;;;4236:400;:::o;7189:900::-;7432:42;7424:6;7420:55;7409:9;7402:74;7524:42;7516:6;7512:55;7507:2;7496:9;7492:18;7485:83;7604:6;7599:2;7588:9;7584:18;7577:34;7647:3;7642:2;7631:9;7627:18;7620:31;7383:4;7680:6;7674:13;7724:6;7718:3;7707:9;7703:19;7696:35;7749:1;7759:141;7773:6;7770:1;7767:13;7759:141;;;7885:2;7869:14;;;7865:23;;7859:30;7853:3;7834:17;;;7830:27;7823:67;7788:10;7759:141;;;7763:3;7950:1;7944:3;7935:6;7924:9;7920:22;7916:32;7909:43;8079:3;8009:66;8004:2;7996:6;7992:15;7988:88;7977:9;7973:104;7969:114;7961:122;;;7189:900;;;;;;;:::o;8094:277::-;8161:6;8214:2;8202:9;8193:7;8189:23;8185:32;8182:52;;;8230:1;8227;8220:12;8182:52;8262:9;8256:16;8315:5;8308:13;8301:21;8294:5;8291:32;8281:60;;8337:1;8334;8327:12;8376:282;8443:9;;;8464:11;;;8461:191;;;8508:77;8505:1;8498:88;8609:4;8606:1;8599:15;8637:4;8634:1;8627:15;9134:184;9186:77;9183:1;9176:88;9283:4;9280:1;9273:15;9307:4;9304:1;9297:15;9323:331;9428:9;9439;9481:8;9469:10;9466:24;9463:44;;;9503:1;9500;9493:12;9463:44;9532:6;9522:8;9519:20;9516:40;;;9552:1;9549;9542:12;9516:40;-1:-1:-1;;9578:23:26;;;9623:25;;;;;-1:-1:-1;9323:331:26:o"},"gasEstimates":{"creation":{"codeDepositCost":"1030600","executionCost":"infinite","totalCost":"infinite"},"external":{"ERC20_TOKEN()":"infinite","STAKING_POOL()":"infinite","__msgData()":"infinite","__msgSender()":"infinite","canClaim(bytes32,address,uint256)":"9433","claimAndStake(bytes32,address,uint256,bytes32[])":"infinite","claimWindows(bytes32)":"6802","claimed(bytes32)":"2462","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","owner()":"infinite","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"infinite","setTokenHolderWallet(address)":"infinite","supportsInterface(bytes4)":"infinite","tokenHolderWallet()":"2401","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"ERC20_TOKEN()":"efc4c631","STAKING_POOL()":"14ae36ae","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","canClaim(bytes32,address,uint256)":"d6a3138b","claimAndStake(bytes32,address,uint256,bytes32[])":"563cac28","claimWindows(bytes32)":"dc45def6","claimed(bytes32)":"cc3c0f06","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","owner()":"8da5cb5b","setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":"0328a8fc","setTokenHolderWallet(address)":"ec7f7494","supportsInterface(bytes4)":"01ffc9a7","tokenHolderWallet()":"fbb0f673","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"erc20Token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolderWallet_\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"EpochIdNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"InvalidClaimWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Token\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakingPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"}],\"name\":\"OutOfClaimWindow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"EpochMerkleRootSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PayoutClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTokenHolderWallet\",\"type\":\"address\"}],\"name\":\"TokenHolderWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ERC20_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20SafeTransfers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"canClaim\",\"outputs\":[{\"internalType\":\"enum ERC20ClaimWindowMerkleClaim.ClaimError\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"claimAndStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"}],\"name\":\"claimWindows\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"epochId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"}],\"name\":\"setEpochMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenHolderWallet\",\"type\":\"address\"}],\"name\":\"setTokenHolderWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenHolderWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)\":{\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The unique epoch ID associated with the specified claim window.\",\"merkleRoot\":\"The merkle root in the claim window.\",\"startTime\":\"The start time of the claim window.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutClaimed(bytes32,bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount of checkmate token is claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"recipient\":\"The recipient of the checkmate token.\",\"root\":\"The merkle root of the claim window.\"}},\"TokenHolderWalletSet(address)\":{\"params\":{\"newTokenHolderWallet\":\"The address of the new token holder wallet.\"}}},\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"canClaim(bytes32,address,uint256)\":{\"params\":{\"amount\":\"The amount of checkmate token to be claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"recipient\":\"The recipient of the checkmate token.\"}},\"claimAndStake(bytes32,address,uint256,bytes32[])\":{\"details\":\"Reverts with {EpochIdNotExists} if epoch id does not exist.Reverts with {OutOfClaimWindow} if current block time is beyond claim window.Reverts with {AlreadyClaimed} if the specified payout has already been claimed.Reverts with {InvalidProof} if the merkle proof has failed the verification.Reverts with {TransferFailed} if checkmate token transfer fails.Emits a {PayoutClaimed} event.\",\"params\":{\"amount\":\"The amount of checkmate token to be claimed.\",\"epochId\":\"The unique epoch ID associated with the claim window.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the checkmate token.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"details\":\"Reverts if _msgSender() is not the owner.Reverts if the merkle root is zero.Reverts if the claim window is invalid.Reverts if the epoch ID has already been set.Emits a {EpochMerkleRootSet} event.\",\"params\":{\"endTime\":\"The end time of the claim window.\",\"epochId\":\"The epoch ID for the claim.\",\"merkleRoot\":\"The Merkle root of the claim.\",\"startTime\":\"The start time of the claim window.\"}},\"setTokenHolderWallet(address)\":{\"details\":\"Reverts if _msgSender() is not the owner.Emits a {TokenHolderWalletSet} event.\",\"params\":{\"newTokenHolderWallet\":\"The address of the new token holder wallet.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(bytes32,bytes32)\":[{\"notice\":\"Error thrown when the leaf has already been claimed.\"}],\"EpochIdAlreadyExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID already exists.\"}],\"EpochIdNotExists(bytes32)\":[{\"notice\":\"Error thrown when the epoch ID does not exist.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidClaimWindow(uint256,uint256,uint256)\":[{\"notice\":\"Error thrown when the claim window is invalid.\"}],\"InvalidERC20Token()\":[{\"notice\":\"Thrown when the checkmate token contract address is zero.\"}],\"InvalidMerkleRoot()\":[{\"notice\":\"Thrown when the merkle root is zero.\"}],\"InvalidProof(bytes32,address,uint256)\":[{\"notice\":\"Error thrown when the proof provided for the claim is invalid.\"}],\"InvalidStakingPool()\":[{\"notice\":\"Thrown when the staking pool address is zero.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"OutOfClaimWindow(bytes32,uint256)\":[{\"notice\":\"Error thrown when the claim window is closed or has not yet opened.\"}]},\"events\":{\"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Event emitted when a claim window is set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutClaimed(bytes32,bytes32,address,uint256)\":{\"notice\":\"Emitted when a payout is claimed.\"},\"TokenHolderWalletSet(address)\":{\"notice\":\"Event emitted when the token holder wallet is set.\"}},\"kind\":\"user\",\"methods\":{\"ERC20_TOKEN()\":{\"notice\":\"a reference to the reward token contract\"},\"STAKING_POOL()\":{\"notice\":\"a reference to the staking pool contract\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"canClaim(bytes32,address,uint256)\":{\"notice\":\"Checks if a recipient can claim a reward for a given epoch id\"},\"claimAndStake(bytes32,address,uint256,bytes32[])\":{\"notice\":\"Claims the payout for a specific epoch and stake.\"},\"claimWindows(bytes32)\":{\"notice\":\"Mapping from the epoch ID to the claim window.\"},\"claimed(bytes32)\":{\"notice\":\"leaf hash to claimed state\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Sets the merkle root for a specific epoch with start and end time.\"},\"setTokenHolderWallet(address)\":{\"notice\":\"Sets the token holder wallet address.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"tokenHolderWallet()\":{\"notice\":\"The address of the token holder wallet.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol\":\"ERC20ClaimWindowMerkleClaimMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x64640017e49828821da95aaf0a1486476eafaeca7289eb69c693c44f8104fffb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/Hashes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/Hashes.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library of standard hash functions.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Hashes {\\n    /**\\n     * @dev Commutative Keccak256 hash of a sorted pair of bytes32. Frequently used when working with merkle proofs.\\n     *\\n     * NOTE: Equivalent to the `standardNodeHash` in our https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n     */\\n    function commutativeKeccak256(bytes32 a, bytes32 b) internal pure returns (bytes32) {\\n        return a < b ? _efficientKeccak256(a, b) : _efficientKeccak256(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientKeccak256(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631dc1958d5308bd2d9f91190bbcde4f9ffb9d9401ce8d358c17b35f1a942bb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MerkleProof.sol)\\n// This file was procedurally generated from scripts/generate/templates/MerkleProof.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Hashes} from \\\"./Hashes.sol\\\";\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n *\\n * IMPORTANT: Consider memory side-effects when using custom hashing functions\\n * that access memory in an unsafe way.\\n *\\n * NOTE: This library supports proof verification for merkle trees built using\\n * custom _commutative_ hashing functions (i.e. `H(a, b) == H(b, a)`). Proving\\n * leaf inclusion in trees built using non-commutative hashing functions requires\\n * additional logic that is not supported by this library.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with the default hashing function.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProof(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in memory with a custom hashing function.\\n     */\\n    function processProof(\\n        bytes32[] memory proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with the default hashing function.\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = Hashes.commutativeKeccak256(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processProofCalldata(proof, leaf, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leaves & pre-images are assumed to be sorted.\\n     *\\n     * This version handles proofs in calldata with a custom hashing function.\\n     */\\n    function processProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 leaf,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = hasher(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProof}.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in memory with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with the default hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = Hashes.commutativeKeccak256(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * NOTE: Consider the case where `root == proof[0] && leaves.length == 0` as it will return `true`.\\n     * The `leaves` must be validated independently. See {processMultiProofCalldata}.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves, hasher) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * This version handles multiproofs in calldata with a custom hashing function.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * NOTE: The _empty set_ (i.e. the case where `proof.length == 1 && leaves.length == 0`) is considered a no-op,\\n     * and therefore a valid multiproof (i.e. it returns `proof[0]`). Consider disallowing this case if you're not\\n     * validating the leaves elsewhere.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves,\\n        function(bytes32, bytes32) view returns (bytes32) hasher\\n    ) internal view returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofFlagsLen = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proof.length != proofFlagsLen + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](proofFlagsLen);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < proofFlagsLen; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = hasher(a, b);\\n        }\\n\\n        if (proofFlagsLen > 0) {\\n            if (proofPos != proof.length) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[proofFlagsLen - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36a0c409c437a753cac9b92b75f93b0fbe92803bf2c8ff1517e54b247f166134\",\"license\":\"MIT\"},\"contracts/merkleClaim/ERC20ClaimWindowMerkleClaim.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IERC20SafeTransfers} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\n\\ncontract ERC20ClaimWindowMerkleClaim is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];    \\n\\n    /// @notice The status of the claim\\n    enum ClaimError {\\n        NoError, // 0\\n        EpochIdNotExists, // 1\\n        OutOfClaimWindow, // 2\\n        AlreadyClaimed // 3\\n    }\\n\\n    /// @notice The claim window struct.\\n    struct ClaimWindow {\\n        bytes32 merkleRoot;\\n        uint256 startTime;\\n        uint256 endTime;\\n    }\\n\\n    /// @notice a reference to the reward token contract\\n    IERC20SafeTransfers public immutable ERC20_TOKEN;\\n\\n    /// @notice a reference to the staking pool contract\\n    address public immutable STAKING_POOL;\\n\\n    /// @notice The address of the token holder wallet.\\n    address public tokenHolderWallet;\\n\\n    /// @notice Mapping from the epoch ID to the claim window.\\n    mapping(bytes32 epochId => ClaimWindow) public claimWindows;\\n\\n    /// @notice leaf hash to claimed state\\n    mapping(bytes32 leaf => bool claimed) public claimed;\\n\\n    /// @notice Event emitted when the token holder wallet is set.\\n    /// @param newTokenHolderWallet The address of the new token holder wallet.\\n    event TokenHolderWalletSet(address indexed newTokenHolderWallet);\\n\\n    /// @notice Event emitted when a claim window is set.\\n    /// @param epochId The unique epoch ID associated with the specified claim window.\\n    /// @param merkleRoot The merkle root in the claim window.\\n    /// @param startTime The start time of the claim window.\\n    /// @param endTime The end time of the claim window.\\n    event EpochMerkleRootSet(bytes32 indexed epochId, bytes32 indexed merkleRoot, uint256 startTime, uint256 indexed endTime);\\n\\n    /// @notice Emitted when a payout is claimed.\\n    /// @param epochId The unique epoch ID associated with the claim window.\\n    /// @param root The merkle root of the claim window.\\n    /// @param recipient The recipient of the checkmate token.\\n    /// @param amount The amount of checkmate token is claimed.\\n    event PayoutClaimed(bytes32 indexed epochId, bytes32 indexed root, address indexed recipient, uint256 amount);\\n\\n    /// @notice Thrown when the checkmate token contract address is zero.\\n    error InvalidERC20Token();\\n\\n    /// @notice Thrown when the staking pool address is zero.\\n    error InvalidStakingPool();\\n\\n    /// @notice Thrown when the merkle root is zero.\\n    error InvalidMerkleRoot();\\n\\n    /// @notice Error thrown when the claim window is invalid.\\n    error InvalidClaimWindow(uint256 startTime, uint256 endTime, uint256 currentTime);\\n\\n    /// @notice Error thrown when the epoch ID already exists.\\n    error EpochIdAlreadyExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the proof provided for the claim is invalid.\\n    error InvalidProof(bytes32 epochId, address recipient, uint256 amount);\\n\\n    /// @notice Error thrown when the epoch ID does not exist.\\n    error EpochIdNotExists(bytes32 epochId);\\n\\n    /// @notice Error thrown when the claim window is closed or has not yet opened.\\n    error OutOfClaimWindow(bytes32 epochId, uint256 currentTime);\\n\\n    /// @notice Error thrown when the leaf has already been claimed.\\n    error AlreadyClaimed(bytes32 epochId, bytes32 leaf);\\n\\n    constructor(\\n        address erc20Token_,\\n        address stakingPool_,\\n        address tokenHolderWallet_,\\n        IForwarderRegistry forwarderRegistry_\\n    ) ForwarderRegistryContext(forwarderRegistry_) ContractOwnership(msg.sender) {\\n        if (erc20Token_ == address(0)) {\\n            revert InvalidERC20Token();\\n        }\\n        ERC20_TOKEN = IERC20SafeTransfers(erc20Token_);\\n\\n        if (stakingPool_ == address(0)) {\\n            revert InvalidStakingPool();\\n        }\\n        STAKING_POOL = stakingPool_;\\n\\n        tokenHolderWallet = tokenHolderWallet_;\\n        emit TokenHolderWalletSet(tokenHolderWallet_);\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root for a specific epoch with start and end time.\\n     * @dev Reverts if _msgSender() is not the owner.\\n     * @dev Reverts if the merkle root is zero.\\n     * @dev Reverts if the claim window is invalid.\\n     * @dev Reverts if the epoch ID has already been set.\\n     * @dev Emits a {EpochMerkleRootSet} event.\\n     * @param epochId The epoch ID for the claim.\\n     * @param merkleRoot The Merkle root of the claim.\\n     * @param startTime The start time of the claim window.\\n     * @param endTime The end time of the claim window.\\n     */\\n    function setEpochMerkleRoot(bytes32 epochId, bytes32 merkleRoot, uint256 startTime, uint256 endTime) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (merkleRoot == bytes32(0)) {\\n            revert InvalidMerkleRoot();\\n        }\\n\\n        if (startTime >= endTime || endTime <= block.timestamp) {\\n            revert InvalidClaimWindow(startTime, endTime, block.timestamp);\\n        }\\n\\n        if (claimWindows[epochId].merkleRoot != bytes32(0)) {\\n            revert EpochIdAlreadyExists(epochId);\\n        }\\n\\n        claimWindows[epochId] = ClaimWindow(merkleRoot, startTime, endTime);\\n\\n        emit EpochMerkleRootSet(epochId, merkleRoot, startTime, endTime);\\n    }\\n\\n    /**\\n     * @notice Sets the token holder wallet address.\\n     * @dev Reverts if _msgSender() is not the owner.\\n     * @dev Emits a {TokenHolderWalletSet} event.\\n     * @param newTokenHolderWallet The address of the new token holder wallet.\\n     */\\n    function setTokenHolderWallet(address newTokenHolderWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        tokenHolderWallet = newTokenHolderWallet;\\n        emit TokenHolderWalletSet(newTokenHolderWallet);\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific epoch and stake.\\n     * @dev Reverts with {EpochIdNotExists} if epoch id does not exist.\\n     * @dev Reverts with {OutOfClaimWindow} if current block time is beyond claim window.\\n     * @dev Reverts with {AlreadyClaimed} if the specified payout has already been claimed.\\n     * @dev Reverts with {InvalidProof} if the merkle proof has failed the verification.\\n     * @dev Reverts with {TransferFailed} if checkmate token transfer fails.\\n     * @dev Emits a {PayoutClaimed} event.\\n     * @param epochId The unique epoch ID associated with the claim window.\\n     * @param recipient The recipient of the checkmate token.\\n     * @param amount The amount of checkmate token to be claimed.\\n     * @param proof The Merkle proof for the claim.\\n     */\\n    function claimAndStake(bytes32 epochId, address recipient, uint256 amount, bytes32[] calldata proof) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(epochId, recipient, amount));\\n        ClaimWindow storage claimWindow = claimWindows[epochId];\\n\\n        ClaimError canClaimResult = _canClaim(claimWindow, leaf);\\n        if (canClaimResult == ClaimError.EpochIdNotExists) {\\n            revert EpochIdNotExists(epochId);\\n        } else if (canClaimResult == ClaimError.OutOfClaimWindow) {\\n            revert OutOfClaimWindow(epochId, block.timestamp);\\n        } else if (canClaimResult == ClaimError.AlreadyClaimed) {\\n            revert AlreadyClaimed(epochId, leaf);\\n        }\\n\\n        bytes32 root = claimWindow.merkleRoot;\\n        if (!proof.verifyCalldata(root, leaf)) {\\n            revert InvalidProof(epochId, recipient, amount);\\n        }\\n\\n        claimed[leaf] = true;\\n\\n        ERC20_TOKEN.safeTransferFrom(tokenHolderWallet, STAKING_POOL, amount, abi.encode(recipient));\\n        emit PayoutClaimed(epochId, root, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Checks if a recipient can claim a reward for a given epoch id\\n     * @param epochId The unique epoch ID associated with the claim window.\\n     * @param recipient The recipient of the checkmate token.\\n     * @param amount The amount of checkmate token to be claimed.\\n     */\\n    function canClaim(bytes32 epochId, address recipient, uint256 amount) external view returns (ClaimError) {\\n        return _canClaim(claimWindows[epochId], keccak256(abi.encodePacked(epochId, recipient, amount)));\\n    }\\n\\n    /**\\n     * @notice\\n     * 1) Returns ClaimError.EpochIdNotExists if merkle root of the claim window has not been set,\\n     * 2) Returns ClaimError.OutOfClaimWindow if current time is beyond start time and end time of the claim window,\\n     * 3) Returns ClaimError.AlreadyClaimed if recipient has already claimed,\\n     * 4) Returns ClaimError.ExceededMintSupply if number of token claimed equals to total supply, and\\n     * 5) Returns ClaimError.NoError otherwise.\\n     * @param claimWindow The claim window of the claim.\\n     * @param leaf The leaf of the claim.\\n     */\\n\\n    function _canClaim(ClaimWindow storage claimWindow, bytes32 leaf) internal view returns (ClaimError) {\\n        if (claimWindow.merkleRoot == bytes32(0)) {\\n            return ClaimError.EpochIdNotExists;\\n        }\\n        if (block.timestamp < claimWindow.startTime || block.timestamp > claimWindow.endTime) {\\n            return ClaimError.OutOfClaimWindow;\\n        }\\n        if (claimed[leaf]) {\\n            return ClaimError.AlreadyClaimed;\\n        }\\n\\n        return ClaimError.NoError;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x157b1e998aa99b4c5da87c9ec73f8080dcfc8a9ff9268c2df3ea45796fd23bf2\",\"license\":\"MIT\"},\"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ERC20ClaimWindowMerkleClaim} from \\\"../../merkleClaim/ERC20ClaimWindowMerkleClaim.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\ncontract ERC20ClaimWindowMerkleClaimMock is ERC20ClaimWindowMerkleClaim {\\n    constructor(\\n        address erc20Token_,\\n        address stakingPool_,\\n        address tokenHolderWallet_,\\n        IForwarderRegistry forwarderRegistry_\\n    ) ERC20ClaimWindowMerkleClaim(erc20Token_, stakingPool_, tokenHolderWallet_, forwarderRegistry_) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xfdd30917c3b89ca39ec027d968e7441990eacabe288416f51fb354614ff9b8ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2203,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"tokenHolderWallet","offset":0,"slot":"0","type":"t_address"},{"astId":2209,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"claimWindows","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_struct(ClaimWindow)2193_storage)"},{"astId":2214,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"claimed","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_bytes32,t_struct(ClaimWindow)2193_storage)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => struct ERC20ClaimWindowMerkleClaim.ClaimWindow)","numberOfBytes":"32","value":"t_struct(ClaimWindow)2193_storage"},"t_struct(ClaimWindow)2193_storage":{"encoding":"inplace","label":"struct ERC20ClaimWindowMerkleClaim.ClaimWindow","members":[{"astId":2188,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"merkleRoot","offset":0,"slot":"0","type":"t_bytes32"},{"astId":2190,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"startTime","offset":0,"slot":"1","type":"t_uint256"},{"astId":2192,"contract":"contracts/mocks/merkleClaim/ERC20ClaimWindowMerkleClaimMock.sol:ERC20ClaimWindowMerkleClaimMock","label":"endTime","offset":0,"slot":"2","type":"t_uint256"}],"numberOfBytes":"96"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(bytes32,bytes32)":[{"notice":"Error thrown when the leaf has already been claimed."}],"EpochIdAlreadyExists(bytes32)":[{"notice":"Error thrown when the epoch ID already exists."}],"EpochIdNotExists(bytes32)":[{"notice":"Error thrown when the epoch ID does not exist."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidClaimWindow(uint256,uint256,uint256)":[{"notice":"Error thrown when the claim window is invalid."}],"InvalidERC20Token()":[{"notice":"Thrown when the checkmate token contract address is zero."}],"InvalidMerkleRoot()":[{"notice":"Thrown when the merkle root is zero."}],"InvalidProof(bytes32,address,uint256)":[{"notice":"Error thrown when the proof provided for the claim is invalid."}],"InvalidStakingPool()":[{"notice":"Thrown when the staking pool address is zero."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"OutOfClaimWindow(bytes32,uint256)":[{"notice":"Error thrown when the claim window is closed or has not yet opened."}]},"events":{"EpochMerkleRootSet(bytes32,bytes32,uint256,uint256)":{"notice":"Event emitted when a claim window is set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutClaimed(bytes32,bytes32,address,uint256)":{"notice":"Emitted when a payout is claimed."},"TokenHolderWalletSet(address)":{"notice":"Event emitted when the token holder wallet is set."}},"kind":"user","methods":{"ERC20_TOKEN()":{"notice":"a reference to the reward token contract"},"STAKING_POOL()":{"notice":"a reference to the staking pool contract"},"__msgData()":{"notice":"Internal function to access the current msg.data."},"canClaim(bytes32,address,uint256)":{"notice":"Checks if a recipient can claim a reward for a given epoch id"},"claimAndStake(bytes32,address,uint256,bytes32[])":{"notice":"Claims the payout for a specific epoch and stake."},"claimWindows(bytes32)":{"notice":"Mapping from the epoch ID to the claim window."},"claimed(bytes32)":{"notice":"leaf hash to claimed state"},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"setEpochMerkleRoot(bytes32,bytes32,uint256,uint256)":{"notice":"Sets the merkle root for a specific epoch with start and end time."},"setTokenHolderWallet(address)":{"notice":"Sets the token holder wallet address."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"tokenHolderWallet()":{"notice":"The address of the token holder wallet."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}