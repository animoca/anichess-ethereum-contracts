{"id":"a25132bb861b6b5875adda87097cb285","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\ninterface IERC1155 {\n    /// @notice Safely transfers some token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n    /// @dev Emits a {TransferSingle} event.\n    /// @param from Current token owner.\n    /// @param to Address of the new token owner.\n    /// @param id Identifier of the token to transfer.\n    /// @param value Amount of token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /// @notice Safely transfers a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n    /// @dev Emits a {TransferBatch} event.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new tokens owner.\n    /// @param ids Identifiers of the tokens to transfer.\n    /// @param values Amounts of tokens to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\n\n    /// @notice Enables or disables an operator's approval.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator Address of the operator.\n    /// @param approved True to approve the operator, false to revoke its approval.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Retrieves the approval status of an operator for a given owner.\n    /// @param owner Address of the authorisation giver.\n    /// @param operator Address of the operator.\n    /// @return approved True if the operator is approved, false if not.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\n\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\n    /// @param owner The account to retrieve the balance of.\n    /// @param id The identifier to retrieve the balance of.\n    /// @return balance The balance of `id` owned by account `owner`.\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\n\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\n    /// @dev Reverts if `owners` and `ids` have different lengths.\n    /// @param owners The addresses of the token holders\n    /// @param ids The identifiers to retrieve the balance of.\n    /// @return balances The balances of `ids` owned by accounts `owners`.\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"},"contracts/burn/AnichessOrbsBurnPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {AnichessMultiplier} from \"../merkleClaim/AnichessMultiplier.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title Anichess Orbs Burn Pool Contract\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n * @dev The rewards are calculated based on the total amount of tokens burned in the previous cycle.\n */\ncontract AnichessOrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    /// @notice The IERC1155Burnable erc1155 contracts.\n    IERC1155Burnable public immutable TOKEN;\n\n    /// @notice The initial time of the contract.\n    uint256 public immutable INITIAL_TIME;\n\n    /// @notice The duration of each cycle.\n    uint256 public immutable CYCLE_DURATION;\n\n    /// @notice The maximum cycle.\n    uint256 public immutable MAX_CYCLE;\n\n    /// @notice The IERC1155 erc1155 contract for unlocking the token multiplier.\n    IERC1155Burnable public immutable MULTIPLIER_TOKEN;\n\n    /// @notice The token ID for unlocking the token multiplier.\n    uint256 public immutable MULTIPLIER_TOKEN_ID;\n\n    /// @notice The Merkle root of the leaderboard multiplier claim.\n    bytes32 public immutable MERKLE_ROOT;\n\n    /// @notice The token multiplier.\n    uint256 public immutable TOKEN_MULTIPLIER;\n\n    /// @notice The list of tiers to decide the reward pool.\n    uint256[] public tiers;\n\n    /// @notice The list of rewards for each tier.\n    uint256[] public tierRewards;\n\n    /// @notice The total amount of ASH burned in each cycle.\n    mapping(uint256 => uint256) totalAshByCycle;\n\n    /// @notice The total amount of ASH burned by each user in each cycle.\n    mapping(uint256 => mapping(address => uint256)) public userAshByCycle;\n\n    /// @notice The claim status for the leaderboard multiplier.\n    mapping(bytes32 => bool) public claimStatus;\n\n    /// @notice The leaderboard multipliers for each user.\n    mapping(address => uint256) public leaderboardMultiplers;\n\n    /// @notice The token multiplier unlock status for each user.\n    mapping(address => bool) public tokenMultiplerUnlockStatus;\n\n    /// @notice The token weights.\n    mapping(uint256 => uint256) tokenWeights;\n\n    /// @notice Event emitted when tokens are burnt.\n    event TokensBurnt(\n        address indexed burner,\n        uint256 indexed cycle,\n        uint256 timestamp,\n        uint256[] ids,\n        uint256[] values,\n        uint256 totalAsh,\n        uint256 multiplier\n    );\n\n    /// @notice Event emitted when the leaderboard multiplier is claimed.\n    event ClaimLeaderboardMultiplier(address indexed recipient, uint256 multiplier);\n\n    /// @notice Event emitted when the token multiplier is unlocked.\n    event UnlockTokenMultiplier(address wallet, uint256 timestamp);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the array lengths are inconsistent.\n    error InconsistentArrays();\n\n    /// @notice Error thrown when the tiers are incorrect.\n    error IncorrectTiers();\n\n    /// @notice Error thrown when the token is not approved.\n    error InvalidToken();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    /// @notice Error thrown when the token amount is invalid.\n    error InvalidTokenAmount(uint256 amount, uint256 expectedAmount);\n\n    /// @notice Error thrown when the payout has already been claimed.\n    error AlreadyClaimedLeaderboardMultiplier(address recipient);\n\n    /// @notice Error thrown when the wallet already has the token multiplier unlocked.\n    error AlreadyUnlockedTokenMultiplier(address wallet);\n\n    /// @notice Error thrown when the proof is invalid.\n    error InvalidProof();\n\n    /// @notice Error thrown when the tiers are already set.\n    error AlreadySetTiers();\n\n    /// @notice Error thrown when the token weight is already set.\n    error AlreadySetTokenWeight(uint256 tokenId);\n\n    /**\n     * @notice Constructor for the ERC1155TokenBurn contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param token The IERC1155Burnable erc1155 contract.\n     * @param merkleRoot The Merkle root of the leaderboard multiplier claim.\n     * @param multiplierToken The IERC1155Burnable erc1155 contract for unlocking the token multiplier.\n     * @param multiplierTokenId The token ID for unlocking the token multiplier.\n     * @param tokenMultiplier The token multiplier.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        IERC1155Burnable token,\n        bytes32 merkleRoot,\n        IERC1155Burnable multiplierToken,\n        uint256 multiplierTokenId,\n        uint256 tokenMultiplier,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\n        INITIAL_TIME = initialTime;\n        CYCLE_DURATION = cycleDuration;\n        MAX_CYCLE = maxCycle;\n        MERKLE_ROOT = merkleRoot;\n        MULTIPLIER_TOKEN = multiplierToken;\n        MULTIPLIER_TOKEN_ID = multiplierTokenId;\n        TOKEN = token;\n        TOKEN_MULTIPLIER = tokenMultiplier;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Set the tiers and rewards.\n     * @param _tiers The list of tiers.\n     * @param _tierRewards The list of rewards for each tier.\n     * @dev Throws if the lengths of tiers and rewards are inconsistent.\n     * @dev Throws if the tiers are empty.\n     * @dev Throws if the tiers are already set.\n     * @dev Throws if the tiers are not in increasing order.\n     * @dev Throws if the rewards are not in increasing order.\n     */\n    function setTiers(uint256[] calldata _tiers, uint256[] calldata _tierRewards) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (_tiers.length != _tierRewards.length) {\n            revert InconsistentArrays();\n        }\n\n        if (_tiers.length == 0) {\n            revert IncorrectTiers();\n        }\n        if (tiers.length > 0) {\n            revert AlreadySetTiers();\n        }\n\n        // check if tiers are in increasing order\n        for (uint256 i = 1; i < _tiers.length; i++) {\n            if (_tiers[i] < _tiers[i - 1]) {\n                revert IncorrectTiers();\n            }\n            if (_tierRewards[i] < _tierRewards[i - 1]) {\n                revert IncorrectTiers();\n            }\n        }\n        tiers = _tiers;\n        tierRewards = _tierRewards;\n    }\n\n    /**\n     * @notice Set the token weights.\n     * @param tokenIds The token IDs.\n     * @param weights The weights for each token.\n     * @dev Throws if the lengths of token IDs and weights are inconsistent.\n     */\n    function setTokensWeight(uint256[] memory tokenIds, uint256[] memory weights) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (tokenIds.length != weights.length) {\n            revert InconsistentArrays();\n        }\n\n        for (uint256 i = 0; i < tokenIds.length; i++) {\n            if (tokenWeights[i] > 0) {\n                revert AlreadySetTokenWeight(tokenIds[i]);\n            }\n            tokenWeights[i] = weights[i];\n        }\n    }\n\n    /**\n     * @notice Get the multiplier for the user.\n     * @param wallet The wallet address.\n     * @return multiplier The multiplier for the user.\n     */\n    function getMultiplier(address wallet) public view returns (uint256 multiplier) {\n        uint256 leaderboardMultiplier = leaderboardMultiplers[wallet];\n        multiplier = leaderboardMultiplier == 0 ? 1 : leaderboardMultiplier;\n        bool isTokenMultiplierUnlocked = tokenMultiplerUnlockStatus[wallet];\n        if (isTokenMultiplierUnlocked) {\n            multiplier *= TOKEN_MULTIPLIER;\n        }\n    }\n\n    /**\n     * @notice Get the current cycle.\n     * @return cycle The current cycle.\n     */\n    function currentCycle() public view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n    /**\n     * @notice Get the reward for the cycle.\n     * @param cycle The cycle number.\n     * @return reward The reward for the cycle.\n     * @dev Throws if the cycle is invalid.\n     */\n    function getCycleReward(uint256 cycle) public view returns (uint256) {\n        if (cycle > currentCycle() || cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 prevTotalAsh = cycle == 0 ? 0 : totalAshByCycle[cycle - 1];\n\n        for (uint256 i = 1; i <= tiers.length; i++) {\n            if (prevTotalAsh < tiers[i]) {\n                return tierRewards[i - 1];\n            }\n        }\n        return tierRewards[tiers.length - 1];\n    }\n\n    /**\n     * @notice Get the user reward for the cycle.\n     * @param cycle The cycle number.\n     * @param wallet The wallet address.\n     * @return reward The reward for the user.\n     * @dev Throws if the cycle is invalid.\n     */\n    function getUserReward(uint256 cycle, address wallet) external view returns (uint256) {\n        if (cycle > currentCycle() || cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n        uint256 cycleReward = getCycleReward(cycle);\n        uint256 userAsh = userAshByCycle[cycle][wallet];\n        return (userAsh * cycleReward) / totalAshByCycle[cycle];\n    }\n\n    /**\n     * @notice Claims the leaderboard multiplier\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The recipient of the payout.\n     * @param multiplier The multiplier for the recipient.\n     * @dev Throws if the payout has already been claimed.\n     * @dev Throws if the proof is invalid.\n     */\n    function claimLeaderboardMultiplier(bytes32[] calldata proof, address recipient, uint256 multiplier) external {\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, multiplier));\n        if (claimStatus[leaf]) {\n            revert AlreadyClaimedLeaderboardMultiplier(recipient);\n        }\n        if (!proof.verify(MERKLE_ROOT, leaf)) {\n            revert InvalidProof();\n        }\n\n        leaderboardMultiplers[recipient] = multiplier;\n        claimStatus[leaf] = true;\n\n        emit ClaimLeaderboardMultiplier(recipient, multiplier);\n    }\n\n    /**\n     * @notice Unlock the token multiplier by burning the multiplier token.\n     * @param from The wallet address.\n     * @param id The token ID.\n     * @param value The token value.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     * @dev Throws if the token multiplier is already unlocked.\n     */\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata) external override returns (bytes4) {\n        if (msg.sender != address(MULTIPLIER_TOKEN)) {\n            revert InvalidToken();\n        }\n        if (id != MULTIPLIER_TOKEN_ID) {\n            revert InvalidTokenId(msg.sender, id);\n        }\n\n        if (value != 1) {\n            revert InvalidTokenAmount(value, 1);\n        }\n        if (tokenMultiplerUnlockStatus[from]) {\n            revert AlreadyUnlockedTokenMultiplier(from);\n        }\n\n        tokenMultiplerUnlockStatus[from] = true;\n\n        emit UnlockTokenMultiplier(from, block.timestamp);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @notice Burn the tokens and calculate the ash.\n     * @param from The wallet address.\n     * @param ids The token IDs to burn.\n     * @param values The amount of tokens to burn.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the cycle is invalid.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata\n    ) external override returns (bytes4) {\n        if (msg.sender != address(TOKEN)) {\n            revert InvalidToken();\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 totalAsh = 0;\n        // calculate total burned\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 weight = tokenWeights[ids[i]];\n            if (weight == 0) {\n                revert InvalidTokenId(msg.sender, ids[i]);\n            }\n            totalAsh += (values[i] * weight);\n        }\n\n        // get the multiplier\n        address[] memory multiplierTokens;\n        multiplierTokens[0] = address(MULTIPLIER_TOKEN);\n        uint256[] memory multiplierTokenIds;\n        multiplierTokenIds[0] = MULTIPLIER_TOKEN_ID;\n        uint256 multiplier = getMultiplier(from);\n        totalAsh *= multiplier;\n\n        // update the user status\n        userAshByCycle[cycle][from] += totalAsh;\n        // update the pool status\n        totalAshByCycle[cycle] += totalAsh;\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(from, ids, values);\n        emit TokensBurnt(from, cycle, block.timestamp, ids, values, totalAsh, multiplier);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"},"contracts/merkleClaim/AnichessMultiplier.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {IERC1155} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/**\n * @title Anichess Multiplier Merkle Claim Contract\n * @dev This contract allows users to claim multiplier based on a Merkle proof\n */\ncontract AnichessMultiplier is ForwarderRegistryContext, ContractOwnership {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using MerkleProof for bytes32[];\n\n    mapping(address => uint256) public multipliers;\n    mapping(bytes32 => bool) public merkleRoots;\n    mapping(bytes32 => bool) public claimStatus;\n    mapping(address => mapping(uint256 => uint256)) public tokenMultipliers;\n\n    /// @notice Event emitted when a merkle root is set.\n    event SetMerkleRoot(bytes32 indexed merkleRoot);\n    event Claimed(address indexed recipient, uint256 indexed batchId, uint256 multiplier);\n\n    /// @notice Error thrown when the payout has already been claimed.\n    error AlreadyClaimed(address recipient, uint256 batchId);\n    error InvalidProof(address recipient, uint256 batchId);\n\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\n\n    error InvalidMerkleRoot(bytes32 merkleRoot);\n\n    error InvalidMultiplier(uint256 multiplier);\n\n    /// @notice Error thrown when the array lengths are inconsistent.\n    error InconsistentArrays();\n\n    /**\n     * @notice Constructor for the AnichessMultiplierMerkleClaim contract.\n     * @param forwarderRegistry The forwarder registry contract.\n     */\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {}\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    function _baseMultiplier(address wallet) internal view returns (uint256) {\n        uint256 walletMultiplier = multipliers[wallet];\n        return walletMultiplier == 0 ? 1 : walletMultiplier;\n    }\n\n    function getMultiplier(address wallet, address[] calldata tokens, uint256[] calldata ids) external view returns (uint256 multiplier) {\n        multiplier = _baseMultiplier(wallet);\n\n        if (tokens.length != ids.length) {\n            revert InconsistentArrays();\n        }\n\n        // for each token, check if the wallet has the token and if so, multiply the multiplier\n        for (uint256 i = 0; i < tokens.length; i++) {\n            for (uint256 j = 0; j < ids.length; j++) {\n                if (IERC1155(tokens[i]).balanceOf(wallet, ids[j]) > 0) {\n                    multiplier *= tokenMultipliers[tokens[i]][ids[j]];\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Sets the merkle root\n     * @param merkleRoot The Merkle root of the claim.\n     */\n    function setMerkleRoot(bytes32 merkleRoot) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n\n        if (merkleRoots[merkleRoot]) {\n            revert MerkleRootAlreadyExists(merkleRoot);\n        }\n\n        merkleRoots[merkleRoot] = true;\n        emit SetMerkleRoot(merkleRoot);\n    }\n\n    function setTokenMultipliers(address[] calldata tokens, uint256[][] calldata tokenIds, uint256[][] calldata _multipliers) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (tokens.length != tokenIds.length || tokens.length != _multipliers.length) {\n            revert InconsistentArrays();\n        }\n\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokenIds[i].length != _multipliers[i].length) {\n                revert InconsistentArrays();\n            }\n\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\n                tokenMultipliers[tokens[i]][tokenIds[i][j]] = _multipliers[i][j];\n            }\n        }\n    }\n\n    /**\n     * @notice Claims the payout for a specific merkleRoot.\n     * @param merkleRoot The Merkle root for the claim.\n     * @param proof The Merkle proof for the claim.\n     * @param recipient The recipient of the payout.\n     */\n    function claim(bytes32 merkleRoot, bytes32[] calldata proof, address recipient, uint256 multiplier, uint256 batchId) external {\n        if (!merkleRoots[merkleRoot]) {\n            revert InvalidMerkleRoot(merkleRoot);\n        }\n        if (multipliers[recipient] >= multiplier) {\n            revert InvalidMultiplier(multiplier);\n        }\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, multiplier, batchId));\n        if (claimStatus[leaf]) {\n            revert AlreadyClaimed(recipient, batchId);\n        }\n        if (!proof.verify(merkleRoot, leaf)) {\n            revert InvalidProof(recipient, batchId);\n        }\n\n        multipliers[recipient] = multiplier;\n        claimStatus[leaf] = true;\n\n        emit Claimed(recipient, batchId, multiplier);\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,1338,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[1338],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":1339,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,1338,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1328,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[1316],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[812],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":1317,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1316,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":813,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":1316,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$812_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":811,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":1004,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC2771":[713],"IForwarderRegistry":[727]},"id":582,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":536,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":728,"src":"58:71:11","symbolAliases":[{"foreign":{"id":535,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":538,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":714,"src":"130:51:11","symbolAliases":[{"foreign":{"id":537,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"138:8:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":540,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":582,"sourceUnit":702,"src":"182:85:11","symbolAliases":[{"foreign":{"id":539,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"190:28:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":542,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"575:28:11"},"id":543,"nodeType":"InheritanceSpecifier","src":"575:28:11"},{"baseName":{"id":544,"name":"IERC2771","nameLocations":["605:8:11"],"nodeType":"IdentifierPath","referencedDeclaration":713,"src":"605:8:11"},"id":545,"nodeType":"InheritanceSpecifier","src":"605:8:11"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":541,"nodeType":"StructuredDocumentation","src":"269:260:11","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":581,"linearizedBaseContracts":[581,713,701],"name":"ForwarderRegistryContext","nameLocation":"547:24:11","nodeType":"ContractDefinition","nodes":[{"body":{"id":554,"nodeType":"Block","src":"720:2:11","statements":[]},"id":555,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":551,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"700:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":552,"kind":"baseConstructorSpecifier","modifierName":{"id":550,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:11"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"671:28:11"},"nodeType":"ModifierInvocation","src":"671:48:11"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":549,"nodeType":"ParameterList","parameters":[{"constant":false,"id":548,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:11","nodeType":"VariableDeclaration","scope":555,"src":"632:37:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":547,"nodeType":"UserDefinedTypeName","pathNode":{"id":546,"name":"IForwarderRegistry","nameLocations":["632:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"632:18:11"},"referencedDeclaration":727,"src":"632:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:11"},"returnParameters":{"id":553,"nodeType":"ParameterList","parameters":[],"src":"720:0:11"},"scope":581,"src":"620:102:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":563,"nodeType":"Block","src":"800:43:11","statements":[{"expression":{"id":561,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"817:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":560,"id":562,"nodeType":"Return","src":"810:26:11"}]},"functionSelector":"2b4c9f16","id":564,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:11","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[],"src":"754:2:11"},"returnParameters":{"id":560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":564,"src":"780:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":558,"nodeType":"UserDefinedTypeName","pathNode":{"id":557,"name":"IForwarderRegistry","nameLocations":["780:18:11"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"780:18:11"},"referencedDeclaration":727,"src":"780:18:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:11"},"scope":581,"src":"728:115:11","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[712],"body":{"id":579,"nodeType":"Block","src":"962:65:11","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":572,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"979:9:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":575,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1000:19:11","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":574,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":573,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:11","typeDescriptions":{}}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":571,"id":578,"nodeType":"Return","src":"972:48:11"}]},"documentation":{"id":565,"nodeType":"StructuredDocumentation","src":"849:24:11","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":580,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:11","nodeType":"FunctionDefinition","parameters":{"id":568,"nodeType":"ParameterList","parameters":[{"constant":false,"id":567,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:11","nodeType":"VariableDeclaration","scope":580,"src":"906:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":566,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:11"},"returnParameters":{"id":571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":580,"src":"956:4:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":569,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:11"},"scope":581,"src":"878:149:11","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":582,"src":"529:500:11","usedErrors":[],"usedEvents":[]}],"src":"32:998:11"},"id":11},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[756],"ForwarderRegistryContextBase":[701],"IForwarderRegistry":[727]},"id":702,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":583,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":585,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":728,"src":"58:74:12","symbolAliases":[{"foreign":{"id":584,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"66:18:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":587,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":702,"sourceUnit":757,"src":"133:67:12","symbolAliases":[{"foreign":{"id":586,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"141:15:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":588,"nodeType":"StructuredDocumentation","src":"202:243:12","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":701,"linearizedBaseContracts":[701],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:12","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":591,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:12","nodeType":"VariableDeclaration","scope":701,"src":"498:57:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":590,"nodeType":"UserDefinedTypeName","pathNode":{"id":589,"name":"IForwarderRegistry","nameLocations":["498:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"498:18:12"},"referencedDeclaration":727,"src":"498:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":601,"nodeType":"Block","src":"612:56:12","statements":[{"expression":{"id":599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":597,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"622:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":598,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"644:17:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"src":"622:39:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":600,"nodeType":"ExpressionStatement","src":"622:39:12"}]},"id":602,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:12","nodeType":"VariableDeclaration","scope":602,"src":"574:36:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":593,"nodeType":"UserDefinedTypeName","pathNode":{"id":592,"name":"IForwarderRegistry","nameLocations":["574:18:12"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"574:18:12"},"referencedDeclaration":727,"src":"574:18:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:12"},"returnParameters":{"id":596,"nodeType":"ParameterList","parameters":[],"src":"612:0:12"},"scope":701,"src":"562:106:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"846:683:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":612,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":610,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":613,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:12","memberName":"data","nodeType":"MemberAccess","src":"1074:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:12","memberName":"length","nodeType":"MemberAccess","src":"1074:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":623,"nodeType":"IfStatement","src":"1043:95:12","trueBody":{"id":622,"nodeType":"Block","src":"1096:42:12","statements":[{"expression":{"expression":{"id":619,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":620,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":621,"nodeType":"Return","src":"1110:17:12"}]}},{"assignments":[625],"declarations":[{"constant":false,"id":625,"mutability":"mutable","name":"sender","nameLocation":"1156:6:12","nodeType":"VariableDeclaration","scope":651,"src":"1148:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":624,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":629,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":626,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"1165:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"1165:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:12"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":630,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":631,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":634,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1372:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":633,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:12","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1436:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":640,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":637,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"1396:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":638,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"1396:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":647,"nodeType":"IfStatement","src":"1346:149:12","trueBody":{"id":646,"nodeType":"Block","src":"1457:38:12","statements":[{"expression":{"id":644,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"1478:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":645,"nodeType":"Return","src":"1471:13:12"}]}},{"expression":{"expression":{"id":648,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":607,"id":650,"nodeType":"Return","src":"1505:17:12"}]},"documentation":{"id":603,"nodeType":"StructuredDocumentation","src":"674:105:12","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:12","nodeType":"FunctionDefinition","parameters":{"id":604,"nodeType":"ParameterList","parameters":[],"src":"803:2:12"},"returnParameters":{"id":607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":652,"src":"837:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":605,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:12"},"scope":701,"src":"784:745:12","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":699,"nodeType":"Block","src":"1710:668:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":658,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:12","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":660,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:12","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:12","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":663,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:12","memberName":"data","nodeType":"MemberAccess","src":"1938:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:12","memberName":"length","nodeType":"MemberAccess","src":"1938:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:12","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":673,"nodeType":"IfStatement","src":"1907:93:12","trueBody":{"id":672,"nodeType":"Block","src":"1960:40:12","statements":[{"expression":{"expression":{"id":669,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:12","memberName":"data","nodeType":"MemberAccess","src":"1981:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":671,"nodeType":"Return","src":"1974:15:12"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":674,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":678,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2183:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}],"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":676,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:12","typeDescriptions":{}}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":683,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2247:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:12","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":738,"src":"2247:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":686,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:12","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":681,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"2207:19:12","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:12","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":726,"src":"2207:39:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":695,"nodeType":"IfStatement","src":"2157:189:12","trueBody":{"id":694,"nodeType":"Block","src":"2289:57:12","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":690,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":756,"src":"2310:15:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$756_$","typeString":"type(library ERC2771Calldata)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:12","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":755,"src":"2310:23:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":693,"nodeType":"Return","src":"2303:32:12"}]}},{"expression":{"expression":{"id":696,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:12","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:12","memberName":"data","nodeType":"MemberAccess","src":"2363:8:12","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":657,"id":698,"nodeType":"Return","src":"2356:15:12"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"1535:103:12","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":700,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:12","nodeType":"FunctionDefinition","parameters":{"id":654,"nodeType":"ParameterList","parameters":[],"src":"1660:2:12"},"returnParameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":700,"src":"1694:14:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":655,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:12"},"scope":701,"src":"1643:735:12","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":702,"src":"445:1935:12","usedErrors":[],"usedEvents":[]}],"src":"32:2349:12"},"id":12},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[713]},"id":714,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":703,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":704,"nodeType":"StructuredDocumentation","src":"58:110:13","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":713,"linearizedBaseContracts":[713],"name":"IERC2771","nameLocation":"178:8:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":705,"nodeType":"StructuredDocumentation","src":"193:171:13","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":712,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":707,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:13","nodeType":"VariableDeclaration","scope":712,"src":"397:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:13","nodeType":"VariableDeclaration","scope":712,"src":"439:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":709,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:13"},"scope":713,"src":"369:86:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":714,"src":"168:289:13","usedErrors":[],"usedEvents":[]}],"src":"32:426:13"},"id":13},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[727]},"id":728,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":715,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":716,"nodeType":"StructuredDocumentation","src":"58:143:14","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":727,"linearizedBaseContracts":[727],"name":"IForwarderRegistry","nameLocation":"211:18:14","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":717,"nodeType":"StructuredDocumentation","src":"236:314:14","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:14","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":719,"mutability":"mutable","name":"sender","nameLocation":"592:6:14","nodeType":"VariableDeclaration","scope":726,"src":"584:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":718,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":721,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:14","nodeType":"VariableDeclaration","scope":726,"src":"600:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":720,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:14"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:14","nodeType":"VariableDeclaration","scope":726,"src":"642:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:14"},"scope":727,"src":"555:104:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":728,"src":"201:460:14","usedErrors":[],"usedEvents":[]}],"src":"32:630:14"},"id":14},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[756]},"id":757,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":729,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":730,"nodeType":"StructuredDocumentation","src":"58:144:15","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":756,"linearizedBaseContracts":[756],"name":"ERC2771Calldata","nameLocation":"210:15:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":737,"nodeType":"Block","src":"398:105:15","statements":[{"AST":{"nativeSrc":"417:80:15","nodeType":"YulBlock","src":"417:80:15","statements":[{"nativeSrc":"431:56:15","nodeType":"YulAssignment","src":"431:56:15","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:15","nodeType":"YulLiteral","src":"445:2:15","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:15","nodeType":"YulIdentifier","src":"466:12:15"},"nativeSrc":"466:14:15","nodeType":"YulFunctionCall","src":"466:14:15"},{"kind":"number","nativeSrc":"482:2:15","nodeType":"YulLiteral","src":"482:2:15","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:15","nodeType":"YulIdentifier","src":"462:3:15"},"nativeSrc":"462:23:15","nodeType":"YulFunctionCall","src":"462:23:15"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:15","nodeType":"YulIdentifier","src":"449:12:15"},"nativeSrc":"449:37:15","nodeType":"YulFunctionCall","src":"449:37:15"}],"functionName":{"name":"shr","nativeSrc":"441:3:15","nodeType":"YulIdentifier","src":"441:3:15"},"nativeSrc":"441:46:15","nodeType":"YulFunctionCall","src":"441:46:15"},"variableNames":[{"name":"sender","nativeSrc":"431:6:15","nodeType":"YulIdentifier","src":"431:6:15"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":734,"isOffset":false,"isSlot":false,"src":"431:6:15","valueSize":1}],"id":736,"nodeType":"InlineAssembly","src":"408:89:15"}]},"documentation":{"id":731,"nodeType":"StructuredDocumentation","src":"232:101:15","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":738,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:15","nodeType":"FunctionDefinition","parameters":{"id":732,"nodeType":"ParameterList","parameters":[],"src":"356:2:15"},"returnParameters":{"id":735,"nodeType":"ParameterList","parameters":[{"constant":false,"id":734,"mutability":"mutable","name":"sender","nameLocation":"390:6:15","nodeType":"VariableDeclaration","scope":738,"src":"382:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":733,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:15"},"scope":756,"src":"338:165:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":754,"nodeType":"Block","src":"679:89:15","statements":[{"id":753,"nodeType":"UncheckedBlock","src":"689:73:15","statements":[{"expression":{"baseExpression":{"expression":{"id":744,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:15","memberName":"data","nodeType":"MemberAccess","src":"720:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":746,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:15","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:15","memberName":"data","nodeType":"MemberAccess","src":"730:8:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:15","memberName":"length","nodeType":"MemberAccess","src":"730:15:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:15","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:15","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":743,"id":752,"nodeType":"Return","src":"713:38:15"}]}]},"documentation":{"id":739,"nodeType":"StructuredDocumentation","src":"509:102:15","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":755,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:15","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[],"src":"632:2:15"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"data","nameLocation":"673:4:15","nodeType":"VariableDeclaration","scope":755,"src":"658:19:15","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":741,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:15"},"scope":756,"src":"616:152:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":757,"src":"202:568:15","usedErrors":[],"usedEvents":[]}],"src":"32:739:15"},"id":15},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765]},"id":766,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":758,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"58:179:16","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":765,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:16","nodeType":"ErrorDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":761,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:16","nodeType":"VariableDeclaration","scope":765,"src":"277:20:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":760,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":763,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:16","nodeType":"VariableDeclaration","scope":765,"src":"299:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":762,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:16"},"src":"237:80:16"}],"src":"32:286:16"},"id":16},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[765],"ProxyInitialization":[812],"StorageSlot":[1398]},"id":813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":767,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":766,"src":"58:92:17","symbolAliases":[{"foreign":{"id":768,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"66:33:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":813,"sourceUnit":1399,"src":"151:74:17","symbolAliases":[{"foreign":{"id":770,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"159:11:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"227:92:17","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":812,"linearizedBaseContracts":[812],"name":"ProxyInitialization","nameLocation":"327:19:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":810,"nodeType":"Block","src":"735:294:17","statements":[{"assignments":[784],"declarations":[{"constant":false,"id":784,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:17","nodeType":"VariableDeclaration","scope":810,"src":"745:46:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:17","757:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":1353,"src":"745:23:17"},"referencedDeclaration":1353,"src":"745:23:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":789,"initialValue":{"arguments":[{"id":787,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"821:11:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":785,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1398,"src":"794:11:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1398_$","typeString":"type(library StorageSlot)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:17","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1397,"src":"794:26:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$1353_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:17"},{"assignments":[791],"declarations":[{"constant":false,"id":791,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:17","nodeType":"VariableDeclaration","scope":810,"src":"843:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":790,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":794,"initialValue":{"expression":{"id":792,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"866:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":793,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1352,"src":"866:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:17"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":795,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"900:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":796,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"916:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":803,"nodeType":"IfStatement","src":"896:88:17","trueBody":{"errorCall":{"arguments":[{"id":799,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"964:12:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":800,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"978:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":798,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":765,"src":"930:33:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":801,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":802,"nodeType":"RevertStatement","src":"923:61:17"}},{"expression":{"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":804,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"994:14:17","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":806,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:17","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":1352,"src":"994:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":807,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"1017:5:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":809,"nodeType":"ExpressionStatement","src":"994:28:17"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"353:314:17","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":811,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:17","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:17","nodeType":"VariableDeclaration","scope":811,"src":"690:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":774,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"phase","nameLocation":"719:5:17","nodeType":"VariableDeclaration","scope":811,"src":"711:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":776,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:17"},"returnParameters":{"id":779,"nodeType":"ParameterList","parameters":[],"src":"735:0:17"},"scope":812,"src":"672:357:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":813,"src":"319:712:17","usedErrors":[],"usedEvents":[]}],"src":"32:1000:17"},"id":17},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[847],"IERC1155TokenReceiver":[986],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":848,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":814,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":816,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":987,"src":"58:77:18","symbolAliases":[{"foreign":{"id":815,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"66:21:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":818,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":533,"src":"136:104:18","symbolAliases":[{"foreign":{"id":817,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"144:25:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":820,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":848,"sourceUnit":415,"src":"241:80:18","symbolAliases":[{"foreign":{"id":819,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"249:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":822,"name":"IERC1155TokenReceiver","nameLocations":["541:21:18"],"nodeType":"IdentifierPath","referencedDeclaration":986,"src":"541:21:18"},"id":823,"nodeType":"InheritanceSpecifier","src":"541:21:18"},{"baseName":{"id":824,"name":"InterfaceDetection","nameLocations":["564:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"564:18:18"},"id":825,"nodeType":"InheritanceSpecifier","src":"564:18:18"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":821,"nodeType":"StructuredDocumentation","src":"323:176:18","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":847,"linearizedBaseContracts":[847,414,431,986],"name":"ERC1155TokenReceiver","nameLocation":"517:20:18","nodeType":"ContractDefinition","nodes":[{"global":false,"id":829,"libraryName":{"id":826,"name":"InterfaceDetectionStorage","nameLocations":["595:25:18"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"595:25:18"},"nodeType":"UsingForDirective","src":"589:69:18","typeName":{"id":828,"nodeType":"UserDefinedTypeName","pathNode":{"id":827,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:18","651:6:18"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"625:32:18"},"referencedDeclaration":442,"src":"625:32:18","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":845,"nodeType":"Block","src":"770:120:18","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":839,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":986,"src":"842:21:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$986_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$986_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":838,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:18","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$986","typeString":"type(contract IERC1155TokenReceiver)"}},"id":841,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:18","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:18","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":833,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"780:25:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:18","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"780:32:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:18","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"780:56:18","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":844,"nodeType":"ExpressionStatement","src":"780:103:18"}]},"documentation":{"id":830,"nodeType":"StructuredDocumentation","src":"664:87:18","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":846,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[],"src":"767:2:18"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"770:0:18"},"scope":847,"src":"756:134:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":848,"src":"499:393:18","usedErrors":[419],"usedEvents":[]}],"src":"32:861:18"},"id":18},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","exportedSymbols":{"IERC1155":[922]},"id":923,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":849,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155","contractDependencies":[],"contractKind":"interface","documentation":{"id":850,"nodeType":"StructuredDocumentation","src":"58:195:19","text":"@title ERC1155 Multi Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26."},"fullyImplemented":false,"id":922,"linearizedBaseContracts":[922],"name":"IERC1155","nameLocation":"263:8:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":851,"nodeType":"StructuredDocumentation","src":"278:689:19","text":"@notice Safely transfers some token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\n @dev Emits a {TransferSingle} event.\n @param from Current token owner.\n @param to Address of the new token owner.\n @param id Identifier of the token to transfer.\n @param value Amount of token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"f242432a","id":864,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"981:16:19","nodeType":"FunctionDefinition","parameters":{"id":862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":853,"mutability":"mutable","name":"from","nameLocation":"1006:4:19","nodeType":"VariableDeclaration","scope":864,"src":"998:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":852,"name":"address","nodeType":"ElementaryTypeName","src":"998:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":855,"mutability":"mutable","name":"to","nameLocation":"1020:2:19","nodeType":"VariableDeclaration","scope":864,"src":"1012:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":854,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":857,"mutability":"mutable","name":"id","nameLocation":"1032:2:19","nodeType":"VariableDeclaration","scope":864,"src":"1024:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":856,"name":"uint256","nodeType":"ElementaryTypeName","src":"1024:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":859,"mutability":"mutable","name":"value","nameLocation":"1044:5:19","nodeType":"VariableDeclaration","scope":864,"src":"1036:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1036:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":861,"mutability":"mutable","name":"data","nameLocation":"1066:4:19","nodeType":"VariableDeclaration","scope":864,"src":"1051:19:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":860,"name":"bytes","nodeType":"ElementaryTypeName","src":"1051:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"997:74:19"},"returnParameters":{"id":863,"nodeType":"ParameterList","parameters":[],"src":"1080:0:19"},"scope":922,"src":"972:109:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"1087:784:19","text":"@notice Safely transfers a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\n @dev Emits a {TransferBatch} event.\n @param from Current tokens owner.\n @param to Address of the new tokens owner.\n @param ids Identifiers of the tokens to transfer.\n @param values Amounts of tokens to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"2eb2c2d6","id":880,"implemented":false,"kind":"function","modifiers":[],"name":"safeBatchTransferFrom","nameLocation":"1885:21:19","nodeType":"FunctionDefinition","parameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"from","nameLocation":"1915:4:19","nodeType":"VariableDeclaration","scope":880,"src":"1907:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":866,"name":"address","nodeType":"ElementaryTypeName","src":"1907:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":869,"mutability":"mutable","name":"to","nameLocation":"1929:2:19","nodeType":"VariableDeclaration","scope":880,"src":"1921:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":868,"name":"address","nodeType":"ElementaryTypeName","src":"1921:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":872,"mutability":"mutable","name":"ids","nameLocation":"1952:3:19","nodeType":"VariableDeclaration","scope":880,"src":"1933:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1933:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":871,"nodeType":"ArrayTypeName","src":"1933:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"values","nameLocation":"1976:6:19","nodeType":"VariableDeclaration","scope":880,"src":"1957:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":873,"name":"uint256","nodeType":"ElementaryTypeName","src":"1957:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":874,"nodeType":"ArrayTypeName","src":"1957:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"data","nameLocation":"1999:4:19","nodeType":"VariableDeclaration","scope":880,"src":"1984:19:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":876,"name":"bytes","nodeType":"ElementaryTypeName","src":"1984:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1906:98:19"},"returnParameters":{"id":879,"nodeType":"ParameterList","parameters":[],"src":"2013:0:19"},"scope":922,"src":"1876:138:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"2020:234:19","text":"@notice Enables or disables an operator's approval.\n @dev Emits an {ApprovalForAll} event.\n @param operator Address of the operator.\n @param approved True to approve the operator, false to revoke its approval."},"functionSelector":"a22cb465","id":888,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"2268:17:19","nodeType":"FunctionDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"operator","nameLocation":"2294:8:19","nodeType":"VariableDeclaration","scope":888,"src":"2286:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":882,"name":"address","nodeType":"ElementaryTypeName","src":"2286:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":885,"mutability":"mutable","name":"approved","nameLocation":"2309:8:19","nodeType":"VariableDeclaration","scope":888,"src":"2304:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":884,"name":"bool","nodeType":"ElementaryTypeName","src":"2304:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2285:33:19"},"returnParameters":{"id":887,"nodeType":"ParameterList","parameters":[],"src":"2327:0:19"},"scope":922,"src":"2259:69:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"2334:254:19","text":"@notice Retrieves the approval status of an operator for a given owner.\n @param owner Address of the authorisation giver.\n @param operator Address of the operator.\n @return approved True if the operator is approved, false if not."},"functionSelector":"e985e9c5","id":898,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"2602:16:19","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":891,"mutability":"mutable","name":"owner","nameLocation":"2627:5:19","nodeType":"VariableDeclaration","scope":898,"src":"2619:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":890,"name":"address","nodeType":"ElementaryTypeName","src":"2619:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":893,"mutability":"mutable","name":"operator","nameLocation":"2642:8:19","nodeType":"VariableDeclaration","scope":898,"src":"2634:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":892,"name":"address","nodeType":"ElementaryTypeName","src":"2634:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2618:33:19"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"approved","nameLocation":"2680:8:19","nodeType":"VariableDeclaration","scope":898,"src":"2675:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2674:15:19"},"scope":922,"src":"2593:97:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":899,"nodeType":"StructuredDocumentation","src":"2696:259:19","text":"@notice Retrieves the balance of `id` owned by account `owner`.\n @param owner The account to retrieve the balance of.\n @param id The identifier to retrieve the balance of.\n @return balance The balance of `id` owned by account `owner`."},"functionSelector":"00fdd58e","id":908,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2969:9:19","nodeType":"FunctionDefinition","parameters":{"id":904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":901,"mutability":"mutable","name":"owner","nameLocation":"2987:5:19","nodeType":"VariableDeclaration","scope":908,"src":"2979:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":900,"name":"address","nodeType":"ElementaryTypeName","src":"2979:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":903,"mutability":"mutable","name":"id","nameLocation":"3002:2:19","nodeType":"VariableDeclaration","scope":908,"src":"2994:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":902,"name":"uint256","nodeType":"ElementaryTypeName","src":"2994:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2978:27:19"},"returnParameters":{"id":907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":906,"mutability":"mutable","name":"balance","nameLocation":"3037:7:19","nodeType":"VariableDeclaration","scope":908,"src":"3029:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":905,"name":"uint256","nodeType":"ElementaryTypeName","src":"3029:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3028:17:19"},"scope":922,"src":"2960:86:19","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":909,"nodeType":"StructuredDocumentation","src":"3052:333:19","text":"@notice Retrieves the balances of `ids` owned by accounts `owners`.\n @dev Reverts if `owners` and `ids` have different lengths.\n @param owners The addresses of the token holders\n @param ids The identifiers to retrieve the balance of.\n @return balances The balances of `ids` owned by accounts `owners`."},"functionSelector":"4e1273f4","id":921,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOfBatch","nameLocation":"3399:14:19","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":912,"mutability":"mutable","name":"owners","nameLocation":"3433:6:19","nodeType":"VariableDeclaration","scope":921,"src":"3414:25:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":910,"name":"address","nodeType":"ElementaryTypeName","src":"3414:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":911,"nodeType":"ArrayTypeName","src":"3414:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"ids","nameLocation":"3460:3:19","nodeType":"VariableDeclaration","scope":921,"src":"3441:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"3441:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":914,"nodeType":"ArrayTypeName","src":"3441:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3413:51:19"},"returnParameters":{"id":920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":919,"mutability":"mutable","name":"balances","nameLocation":"3505:8:19","nodeType":"VariableDeclaration","scope":921,"src":"3488:25:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":917,"name":"uint256","nodeType":"ElementaryTypeName","src":"3488:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":918,"nodeType":"ArrayTypeName","src":"3488:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3487:27:19"},"scope":922,"src":"3390:125:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":923,"src":"253:3264:19","usedErrors":[],"usedEvents":[]}],"src":"32:3486:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[948]},"id":949,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":924,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":925,"nodeType":"StructuredDocumentation","src":"59:196:20","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":948,"linearizedBaseContracts":[948],"name":"IERC1155Burnable","nameLocation":"265:16:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"288:391:20","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":935,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:20","nodeType":"FunctionDefinition","parameters":{"id":933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":928,"mutability":"mutable","name":"from","nameLocation":"710:4:20","nodeType":"VariableDeclaration","scope":935,"src":"702:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":927,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":930,"mutability":"mutable","name":"id","nameLocation":"724:2:20","nodeType":"VariableDeclaration","scope":935,"src":"716:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":929,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"value","nameLocation":"736:5:20","nodeType":"VariableDeclaration","scope":935,"src":"728:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":931,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:20"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[],"src":"751:0:20"},"scope":948,"src":"684:68:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":936,"nodeType":"StructuredDocumentation","src":"758:478:20","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":947,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:20","nodeType":"FunctionDefinition","parameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"from","nameLocation":"1272:4:20","nodeType":"VariableDeclaration","scope":947,"src":"1264:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":937,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"ids","nameLocation":"1297:3:20","nodeType":"VariableDeclaration","scope":947,"src":"1278:22:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":939,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":940,"nodeType":"ArrayTypeName","src":"1278:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":944,"mutability":"mutable","name":"values","nameLocation":"1321:6:20","nodeType":"VariableDeclaration","scope":947,"src":"1302:25:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":942,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":943,"nodeType":"ArrayTypeName","src":"1302:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:20"},"returnParameters":{"id":946,"nodeType":"ParameterList","parameters":[],"src":"1337:0:20"},"scope":948,"src":"1241:97:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":949,"src":"255:1085:20","usedErrors":[],"usedEvents":[]}],"src":"33:1308:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[986]},"id":987,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":950,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":951,"nodeType":"StructuredDocumentation","src":"58:284:21","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":986,"linearizedBaseContracts":[986],"name":"IERC1155TokenReceiver","nameLocation":"352:21:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":952,"nodeType":"StructuredDocumentation","src":"380:914:21","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":967,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:21","nodeType":"FunctionDefinition","parameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":954,"mutability":"mutable","name":"operator","nameLocation":"1334:8:21","nodeType":"VariableDeclaration","scope":967,"src":"1326:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":953,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":956,"mutability":"mutable","name":"from","nameLocation":"1352:4:21","nodeType":"VariableDeclaration","scope":967,"src":"1344:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"id","nameLocation":"1366:2:21","nodeType":"VariableDeclaration","scope":967,"src":"1358:10:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":957,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1378:5:21","nodeType":"VariableDeclaration","scope":967,"src":"1370:13:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":962,"mutability":"mutable","name":"data","nameLocation":"1400:4:21","nodeType":"VariableDeclaration","scope":967,"src":"1385:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":961,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:21"},"returnParameters":{"id":966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":965,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:21","nodeType":"VariableDeclaration","scope":967,"src":"1424:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":964,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:21"},"scope":986,"src":"1299:144:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":968,"nodeType":"StructuredDocumentation","src":"1449:1062:21","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":985,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:21","nodeType":"FunctionDefinition","parameters":{"id":981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":970,"mutability":"mutable","name":"operator","nameLocation":"2565:8:21","nodeType":"VariableDeclaration","scope":985,"src":"2557:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":969,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":972,"mutability":"mutable","name":"from","nameLocation":"2591:4:21","nodeType":"VariableDeclaration","scope":985,"src":"2583:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":971,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":975,"mutability":"mutable","name":"ids","nameLocation":"2624:3:21","nodeType":"VariableDeclaration","scope":985,"src":"2605:22:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":973,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":974,"nodeType":"ArrayTypeName","src":"2605:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":978,"mutability":"mutable","name":"values","nameLocation":"2656:6:21","nodeType":"VariableDeclaration","scope":985,"src":"2637:25:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":976,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":977,"nodeType":"ArrayTypeName","src":"2637:9:21","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":980,"mutability":"mutable","name":"data","nameLocation":"2687:4:21","nodeType":"VariableDeclaration","scope":985,"src":"2672:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":979,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:21"},"returnParameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":983,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:21","nodeType":"VariableDeclaration","scope":985,"src":"2716:17:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":982,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:21"},"scope":986,"src":"2516:219:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":987,"src":"342:2395:21","usedErrors":[],"usedEvents":[]}],"src":"32:2706:21"},"id":21},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1316]},"id":1317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":988,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:22"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":989,"nodeType":"StructuredDocumentation","src":"126:67:22","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1316,"linearizedBaseContracts":[1316],"name":"Address","nameLocation":"202:7:22","nodeType":"ContractDefinition","nodes":[{"body":{"id":1003,"nodeType":"Block","src":"1241:254:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":997,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"1465:7:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":998,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:22","memberName":"code","nodeType":"MemberAccess","src":"1465:12:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:22","memberName":"length","nodeType":"MemberAccess","src":"1465:19:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1000,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":996,"id":1002,"nodeType":"Return","src":"1458:30:22"}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"216:954:22","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1004,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:22","nodeType":"FunctionDefinition","parameters":{"id":993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"account","nameLocation":"1203:7:22","nodeType":"VariableDeclaration","scope":1004,"src":"1195:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:22"},"returnParameters":{"id":996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":995,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1004,"src":"1235:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":994,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:22"},"scope":1316,"src":"1175:320:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"2483:241:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1015,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1316","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1316","typeString":"library Address"}],"id":1014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1013,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:22","typeDescriptions":{}}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:22","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1018,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"2526:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1020,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1012,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1021,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1022,"nodeType":"ExpressionStatement","src":"2493:73:22"},{"assignments":[1024,null],"declarations":[{"constant":false,"id":1024,"mutability":"mutable","name":"success","nameLocation":"2583:7:22","nodeType":"VariableDeclaration","scope":1037,"src":"2578:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1023,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1031,"initialValue":{"arguments":[{"hexValue":"","id":1029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1025,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"2596:9:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:22","memberName":"call","nodeType":"MemberAccess","src":"2596:14:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1027,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"2618:6:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:22"},{"expression":{"arguments":[{"id":1033,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1024,"src":"2647:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1034,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1032,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1035,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1036,"nodeType":"ExpressionStatement","src":"2639:78:22"}]},"documentation":{"id":1005,"nodeType":"StructuredDocumentation","src":"1501:906:22","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:22","nodeType":"FunctionDefinition","parameters":{"id":1010,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1007,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:22","nodeType":"VariableDeclaration","scope":1038,"src":"2431:25:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1006,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1009,"mutability":"mutable","name":"amount","nameLocation":"2466:6:22","nodeType":"VariableDeclaration","scope":1038,"src":"2458:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:22"},"returnParameters":{"id":1011,"nodeType":"ParameterList","parameters":[],"src":"2483:0:22"},"scope":1316,"src":"2412:312:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1055,"nodeType":"Block","src":"3555:96:22","statements":[{"expression":{"arguments":[{"id":1049,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"3594:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1050,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"3602:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1051,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1048,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1096,1140],"referencedDeclaration":1140,"src":"3572:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1047,"id":1054,"nodeType":"Return","src":"3565:79:22"}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"2730:731:22","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1056,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:22","nodeType":"FunctionDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"target","nameLocation":"3496:6:22","nodeType":"VariableDeclaration","scope":1056,"src":"3488:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1043,"mutability":"mutable","name":"data","nameLocation":"3517:4:22","nodeType":"VariableDeclaration","scope":1056,"src":"3504:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1042,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:22"},"returnParameters":{"id":1047,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1046,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1056,"src":"3541:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1045,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:22"},"scope":1316,"src":"3466:185:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1075,"nodeType":"Block","src":"4020:76:22","statements":[{"expression":{"arguments":[{"id":1069,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1059,"src":"4059:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1070,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"4067:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1071,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1072,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1063,"src":"4076:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1068,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1096,1140],"referencedDeclaration":1140,"src":"4037:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1067,"id":1074,"nodeType":"Return","src":"4030:59:22"}]},"documentation":{"id":1057,"nodeType":"StructuredDocumentation","src":"3657:211:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1076,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:22","nodeType":"FunctionDefinition","parameters":{"id":1064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1059,"mutability":"mutable","name":"target","nameLocation":"3912:6:22","nodeType":"VariableDeclaration","scope":1076,"src":"3904:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1058,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1061,"mutability":"mutable","name":"data","nameLocation":"3941:4:22","nodeType":"VariableDeclaration","scope":1076,"src":"3928:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1060,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1063,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:22","nodeType":"VariableDeclaration","scope":1076,"src":"3955:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1062,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:22"},"returnParameters":{"id":1067,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1066,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1076,"src":"4006:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1065,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:22"},"scope":1316,"src":"3873:223:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1095,"nodeType":"Block","src":"4601:111:22","statements":[{"expression":{"arguments":[{"id":1089,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"4640:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1090,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"4648:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1091,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"4654:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1092,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1088,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1096,1140],"referencedDeclaration":1140,"src":"4618:21:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1087,"id":1094,"nodeType":"Return","src":"4611:94:22"}]},"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"4102:351:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1096,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:22","nodeType":"FunctionDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1079,"mutability":"mutable","name":"target","nameLocation":"4506:6:22","nodeType":"VariableDeclaration","scope":1096,"src":"4498:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1078,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1081,"mutability":"mutable","name":"data","nameLocation":"4535:4:22","nodeType":"VariableDeclaration","scope":1096,"src":"4522:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1080,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1083,"mutability":"mutable","name":"value","nameLocation":"4557:5:22","nodeType":"VariableDeclaration","scope":1096,"src":"4549:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:22"},"returnParameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1096,"src":"4587:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1085,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:22"},"scope":1316,"src":"4458:254:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1139,"nodeType":"Block","src":"5139:267:22","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1113,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:22","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1316","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1316","typeString":"library Address"}],"id":1112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:22","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1111,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:22","typeDescriptions":{}}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:22","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1116,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"5182:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1110,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1120,"nodeType":"ExpressionStatement","src":"5149:81:22"},{"assignments":[1122,1124],"declarations":[{"constant":false,"id":1122,"mutability":"mutable","name":"success","nameLocation":"5246:7:22","nodeType":"VariableDeclaration","scope":1139,"src":"5241:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1121,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1124,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:22","nodeType":"VariableDeclaration","scope":1139,"src":"5255:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1123,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1131,"initialValue":{"arguments":[{"id":1129,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"5308:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1125,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"5282:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:22","memberName":"call","nodeType":"MemberAccess","src":"5282:11:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1127,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1103,"src":"5301:5:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:22","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:22"},{"expression":{"arguments":[{"id":1133,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1099,"src":"5357:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1134,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"5365:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1135,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"5374:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1136,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1105,"src":"5386:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1132,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"5330:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1109,"id":1138,"nodeType":"Return","src":"5323:76:22"}]},"documentation":{"id":1097,"nodeType":"StructuredDocumentation","src":"4718:237:22","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1140,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:22","nodeType":"FunctionDefinition","parameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1099,"mutability":"mutable","name":"target","nameLocation":"5008:6:22","nodeType":"VariableDeclaration","scope":1140,"src":"5000:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1098,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1101,"mutability":"mutable","name":"data","nameLocation":"5037:4:22","nodeType":"VariableDeclaration","scope":1140,"src":"5024:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1100,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1103,"mutability":"mutable","name":"value","nameLocation":"5059:5:22","nodeType":"VariableDeclaration","scope":1140,"src":"5051:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1102,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1105,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:22","nodeType":"VariableDeclaration","scope":1140,"src":"5074:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1104,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:22"},"returnParameters":{"id":1109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1108,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1140,"src":"5125:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1107,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:22"},"scope":1316,"src":"4960:446:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1156,"nodeType":"Block","src":"5683:97:22","statements":[{"expression":{"arguments":[{"id":1151,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"5719:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1152,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"5727:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1150,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1157,1186],"referencedDeclaration":1186,"src":"5700:18:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1149,"id":1155,"nodeType":"Return","src":"5693:80:22"}]},"documentation":{"id":1141,"nodeType":"StructuredDocumentation","src":"5412:166:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1157,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:22","nodeType":"FunctionDefinition","parameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"target","nameLocation":"5619:6:22","nodeType":"VariableDeclaration","scope":1157,"src":"5611:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1142,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"data","nameLocation":"5640:4:22","nodeType":"VariableDeclaration","scope":1157,"src":"5627:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1144,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:22"},"returnParameters":{"id":1149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1157,"src":"5669:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1147,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:22"},"scope":1316,"src":"5583:197:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1185,"nodeType":"Block","src":"6122:168:22","statements":[{"assignments":[1170,1172],"declarations":[{"constant":false,"id":1170,"mutability":"mutable","name":"success","nameLocation":"6138:7:22","nodeType":"VariableDeclaration","scope":1185,"src":"6133:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1169,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1172,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:22","nodeType":"VariableDeclaration","scope":1185,"src":"6147:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1171,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1177,"initialValue":{"arguments":[{"id":1175,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"6192:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1173,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"6174:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:22","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:22","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:22"},{"expression":{"arguments":[{"id":1179,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"6241:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1180,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1170,"src":"6249:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1181,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1172,"src":"6258:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1182,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1164,"src":"6270:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1178,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"6214:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1183,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1168,"id":1184,"nodeType":"Return","src":"6207:76:22"}]},"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"5786:173:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1186,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:22","nodeType":"FunctionDefinition","parameters":{"id":1165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"target","nameLocation":"6009:6:22","nodeType":"VariableDeclaration","scope":1186,"src":"6001:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1162,"mutability":"mutable","name":"data","nameLocation":"6038:4:22","nodeType":"VariableDeclaration","scope":1186,"src":"6025:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1161,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1164,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:22","nodeType":"VariableDeclaration","scope":1186,"src":"6052:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1163,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:22"},"returnParameters":{"id":1168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1167,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1186,"src":"6108:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1166,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:22"},"scope":1316,"src":"5964:326:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1202,"nodeType":"Block","src":"6566:101:22","statements":[{"expression":{"arguments":[{"id":1197,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1189,"src":"6604:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1198,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"6612:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1196,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1203,1232],"referencedDeclaration":1232,"src":"6583:20:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1195,"id":1201,"nodeType":"Return","src":"6576:84:22"}]},"documentation":{"id":1187,"nodeType":"StructuredDocumentation","src":"6296:168:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1203,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:22","nodeType":"FunctionDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1189,"mutability":"mutable","name":"target","nameLocation":"6507:6:22","nodeType":"VariableDeclaration","scope":1203,"src":"6499:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1188,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1191,"mutability":"mutable","name":"data","nameLocation":"6528:4:22","nodeType":"VariableDeclaration","scope":1203,"src":"6515:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1190,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:22"},"returnParameters":{"id":1195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1203,"src":"6552:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:22"},"scope":1316,"src":"6469:198:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"7008:170:22","statements":[{"assignments":[1216,1218],"declarations":[{"constant":false,"id":1216,"mutability":"mutable","name":"success","nameLocation":"7024:7:22","nodeType":"VariableDeclaration","scope":1231,"src":"7019:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1215,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1218,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:22","nodeType":"VariableDeclaration","scope":1231,"src":"7033:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1217,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1223,"initialValue":{"arguments":[{"id":1221,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1208,"src":"7080:4:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1219,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"7060:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:22","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:22","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:22"},{"expression":{"arguments":[{"id":1225,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"7129:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1226,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"7137:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1227,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"7146:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1228,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"7158:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1224,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1271,"src":"7102:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1214,"id":1230,"nodeType":"Return","src":"7095:76:22"}]},"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"6673:175:22","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:22","nodeType":"FunctionDefinition","parameters":{"id":1211,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"target","nameLocation":"6900:6:22","nodeType":"VariableDeclaration","scope":1232,"src":"6892:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1205,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1208,"mutability":"mutable","name":"data","nameLocation":"6929:4:22","nodeType":"VariableDeclaration","scope":1232,"src":"6916:17:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1207,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1210,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:22","nodeType":"VariableDeclaration","scope":1232,"src":"6943:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1209,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:22"},"returnParameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1232,"src":"6994:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:22"},"scope":1316,"src":"6853:325:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1270,"nodeType":"Block","src":"7660:434:22","statements":[{"condition":{"id":1246,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1237,"src":"7674:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1268,"nodeType":"Block","src":"8030:58:22","statements":[{"expression":{"arguments":[{"id":1264,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"8052:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1265,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"8064:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1263,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"8044:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1267,"nodeType":"ExpressionStatement","src":"8044:33:22"}]},"id":1269,"nodeType":"IfStatement","src":"7670:418:22","trueBody":{"id":1262,"nodeType":"Block","src":"7683:341:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1247,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"7701:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:22","memberName":"length","nodeType":"MemberAccess","src":"7701:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1259,"nodeType":"IfStatement","src":"7697:286:22","trueBody":{"id":1258,"nodeType":"Block","src":"7725:258:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":1253,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1235,"src":"7927:6:22","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1252,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1004,"src":"7916:10:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1254,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1251,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1257,"nodeType":"ExpressionStatement","src":"7908:60:22"}]}},{"expression":{"id":1260,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"8003:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1245,"id":1261,"nodeType":"Return","src":"7996:17:22"}]}}]},"documentation":{"id":1233,"nodeType":"StructuredDocumentation","src":"7184:277:22","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1271,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:22","nodeType":"FunctionDefinition","parameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1235,"mutability":"mutable","name":"target","nameLocation":"7519:6:22","nodeType":"VariableDeclaration","scope":1271,"src":"7511:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1234,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1237,"mutability":"mutable","name":"success","nameLocation":"7540:7:22","nodeType":"VariableDeclaration","scope":1271,"src":"7535:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1236,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1239,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:22","nodeType":"VariableDeclaration","scope":1271,"src":"7557:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1238,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1241,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:22","nodeType":"VariableDeclaration","scope":1271,"src":"7590:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1240,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:22"},"returnParameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1271,"src":"7646:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1243,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:22"},"scope":1316,"src":"7466:628:22","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1294,"nodeType":"Block","src":"8475:135:22","statements":[{"condition":{"id":1283,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1274,"src":"8489:7:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1292,"nodeType":"Block","src":"8546:58:22","statements":[{"expression":{"arguments":[{"id":1288,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"8568:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1289,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"8580:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1287,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"8560:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1291,"nodeType":"ExpressionStatement","src":"8560:33:22"}]},"id":1293,"nodeType":"IfStatement","src":"8485:119:22","trueBody":{"id":1286,"nodeType":"Block","src":"8498:42:22","statements":[{"expression":{"id":1284,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"8519:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1282,"id":1285,"nodeType":"Return","src":"8512:17:22"}]}}]},"documentation":{"id":1272,"nodeType":"StructuredDocumentation","src":"8100:210:22","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1295,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:22","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1274,"mutability":"mutable","name":"success","nameLocation":"8355:7:22","nodeType":"VariableDeclaration","scope":1295,"src":"8350:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1273,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1276,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:22","nodeType":"VariableDeclaration","scope":1295,"src":"8372:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1275,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:22","nodeType":"VariableDeclaration","scope":1295,"src":"8405:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1277,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:22"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1295,"src":"8461:12:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1280,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:22"},"scope":1316,"src":"8315:295:22","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1314,"nodeType":"Block","src":"8699:457:22","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1302,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"8775:10:22","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:22","memberName":"length","nodeType":"MemberAccess","src":"8775:17:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1312,"nodeType":"Block","src":"9105:45:22","statements":[{"expression":{"arguments":[{"id":1309,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"9126:12:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1308,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:22","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1311,"nodeType":"ExpressionStatement","src":"9119:20:22"}]},"id":1313,"nodeType":"IfStatement","src":"8771:379:22","trueBody":{"id":1307,"nodeType":"Block","src":"8798:301:22","statements":[{"AST":{"nativeSrc":"8956:133:22","nodeType":"YulBlock","src":"8956:133:22","statements":[{"nativeSrc":"8974:40:22","nodeType":"YulVariableDeclaration","src":"8974:40:22","value":{"arguments":[{"name":"returndata","nativeSrc":"9003:10:22","nodeType":"YulIdentifier","src":"9003:10:22"}],"functionName":{"name":"mload","nativeSrc":"8997:5:22","nodeType":"YulIdentifier","src":"8997:5:22"},"nativeSrc":"8997:17:22","nodeType":"YulFunctionCall","src":"8997:17:22"},"variables":[{"name":"returndata_size","nativeSrc":"8978:15:22","nodeType":"YulTypedName","src":"8978:15:22","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9042:2:22","nodeType":"YulLiteral","src":"9042:2:22","type":"","value":"32"},{"name":"returndata","nativeSrc":"9046:10:22","nodeType":"YulIdentifier","src":"9046:10:22"}],"functionName":{"name":"add","nativeSrc":"9038:3:22","nodeType":"YulIdentifier","src":"9038:3:22"},"nativeSrc":"9038:19:22","nodeType":"YulFunctionCall","src":"9038:19:22"},{"name":"returndata_size","nativeSrc":"9059:15:22","nodeType":"YulIdentifier","src":"9059:15:22"}],"functionName":{"name":"revert","nativeSrc":"9031:6:22","nodeType":"YulIdentifier","src":"9031:6:22"},"nativeSrc":"9031:44:22","nodeType":"YulFunctionCall","src":"9031:44:22"},"nativeSrc":"9031:44:22","nodeType":"YulExpressionStatement","src":"9031:44:22"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1297,"isOffset":false,"isSlot":false,"src":"9003:10:22","valueSize":1},{"declaration":1297,"isOffset":false,"isSlot":false,"src":"9046:10:22","valueSize":1}],"id":1306,"nodeType":"InlineAssembly","src":"8947:142:22"}]}}]},"id":1315,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:22","nodeType":"FunctionDefinition","parameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1297,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:22","nodeType":"VariableDeclaration","scope":1315,"src":"8633:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1296,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:22","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1299,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:22","nodeType":"VariableDeclaration","scope":1315,"src":"8658:26:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1298,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:22"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[],"src":"8699:0:22"},"scope":1316,"src":"8616:540:22","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1317,"src":"194:8964:22","usedErrors":[],"usedEvents":[]}],"src":"101:9058:22"},"id":22},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1338]},"id":1339,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1318,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:23"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1319,"nodeType":"StructuredDocumentation","src":"111:496:23","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1338,"linearizedBaseContracts":[1338],"name":"Context","nameLocation":"626:7:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1327,"nodeType":"Block","src":"702:34:23","statements":[{"expression":{"expression":{"id":1324,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:23","memberName":"sender","nodeType":"MemberAccess","src":"719:10:23","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1323,"id":1326,"nodeType":"Return","src":"712:17:23"}]},"id":1328,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:23","nodeType":"FunctionDefinition","parameters":{"id":1320,"nodeType":"ParameterList","parameters":[],"src":"659:2:23"},"returnParameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1328,"src":"693:7:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:23","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:23"},"scope":1338,"src":"640:96:23","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1336,"nodeType":"Block","src":"809:32:23","statements":[{"expression":{"expression":{"id":1333,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:23","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:23","memberName":"data","nodeType":"MemberAccess","src":"826:8:23","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1332,"id":1335,"nodeType":"Return","src":"819:15:23"}]},"id":1337,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:23","nodeType":"FunctionDefinition","parameters":{"id":1329,"nodeType":"ParameterList","parameters":[],"src":"759:2:23"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1337,"src":"793:14:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1330,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:23"},"scope":1338,"src":"742:99:23","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1339,"src":"608:235:23","usedErrors":[],"usedEvents":[]}],"src":"86:758:23"},"id":23},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1398]},"id":1399,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1340,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":1341,"nodeType":"StructuredDocumentation","src":"130:1148:24","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._"},"fullyImplemented":true,"id":1398,"linearizedBaseContracts":[1398],"name":"StorageSlot","nameLocation":"1287:11:24","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":1344,"members":[{"constant":false,"id":1343,"mutability":"mutable","name":"value","nameLocation":"1342:5:24","nodeType":"VariableDeclaration","scope":1344,"src":"1334:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1342,"name":"address","nodeType":"ElementaryTypeName","src":"1334:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1312:11:24","nodeType":"StructDefinition","scope":1398,"src":"1305:49:24","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":1347,"members":[{"constant":false,"id":1346,"mutability":"mutable","name":"value","nameLocation":"1394:5:24","nodeType":"VariableDeclaration","scope":1347,"src":"1389:10:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1345,"name":"bool","nodeType":"ElementaryTypeName","src":"1389:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1367:11:24","nodeType":"StructDefinition","scope":1398,"src":"1360:46:24","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":1350,"members":[{"constant":false,"id":1349,"mutability":"mutable","name":"value","nameLocation":"1449:5:24","nodeType":"VariableDeclaration","scope":1350,"src":"1441:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1348,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1441:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1419:11:24","nodeType":"StructDefinition","scope":1398,"src":"1412:49:24","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":1353,"members":[{"constant":false,"id":1352,"mutability":"mutable","name":"value","nameLocation":"1504:5:24","nodeType":"VariableDeclaration","scope":1353,"src":"1496:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1351,"name":"uint256","nodeType":"ElementaryTypeName","src":"1496:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1474:11:24","nodeType":"StructDefinition","scope":1398,"src":"1467:49:24","visibility":"public"},{"body":{"id":1363,"nodeType":"Block","src":"1698:106:24","statements":[{"AST":{"nativeSrc":"1760:38:24","nodeType":"YulBlock","src":"1760:38:24","statements":[{"nativeSrc":"1774:14:24","nodeType":"YulAssignment","src":"1774:14:24","value":{"name":"slot","nativeSrc":"1784:4:24","nodeType":"YulIdentifier","src":"1784:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"1774:6:24","nodeType":"YulIdentifier","src":"1774:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1360,"isOffset":false,"isSlot":true,"src":"1774:6:24","suffix":"slot","valueSize":1},{"declaration":1356,"isOffset":false,"isSlot":false,"src":"1784:4:24","valueSize":1}],"id":1362,"nodeType":"InlineAssembly","src":"1751:47:24"}]},"documentation":{"id":1354,"nodeType":"StructuredDocumentation","src":"1522:87:24","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":1364,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1623:14:24","nodeType":"FunctionDefinition","parameters":{"id":1357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1356,"mutability":"mutable","name":"slot","nameLocation":"1646:4:24","nodeType":"VariableDeclaration","scope":1364,"src":"1638:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1638:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1637:14:24"},"returnParameters":{"id":1361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"r","nameLocation":"1695:1:24","nodeType":"VariableDeclaration","scope":1364,"src":"1675:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1344_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":1359,"nodeType":"UserDefinedTypeName","pathNode":{"id":1358,"name":"AddressSlot","nameLocations":["1675:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1344,"src":"1675:11:24"},"referencedDeclaration":1344,"src":"1675:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$1344_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1674:23:24"},"scope":1398,"src":"1614:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1374,"nodeType":"Block","src":"1986:106:24","statements":[{"AST":{"nativeSrc":"2048:38:24","nodeType":"YulBlock","src":"2048:38:24","statements":[{"nativeSrc":"2062:14:24","nodeType":"YulAssignment","src":"2062:14:24","value":{"name":"slot","nativeSrc":"2072:4:24","nodeType":"YulIdentifier","src":"2072:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2062:6:24","nodeType":"YulIdentifier","src":"2062:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1371,"isOffset":false,"isSlot":true,"src":"2062:6:24","suffix":"slot","valueSize":1},{"declaration":1367,"isOffset":false,"isSlot":false,"src":"2072:4:24","valueSize":1}],"id":1373,"nodeType":"InlineAssembly","src":"2039:47:24"}]},"documentation":{"id":1365,"nodeType":"StructuredDocumentation","src":"1810:87:24","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":1375,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"1911:14:24","nodeType":"FunctionDefinition","parameters":{"id":1368,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1367,"mutability":"mutable","name":"slot","nameLocation":"1934:4:24","nodeType":"VariableDeclaration","scope":1375,"src":"1926:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1366,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1926:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1925:14:24"},"returnParameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1371,"mutability":"mutable","name":"r","nameLocation":"1983:1:24","nodeType":"VariableDeclaration","scope":1375,"src":"1963:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1347_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":1370,"nodeType":"UserDefinedTypeName","pathNode":{"id":1369,"name":"BooleanSlot","nameLocations":["1963:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1347,"src":"1963:11:24"},"referencedDeclaration":1347,"src":"1963:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$1347_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"1962:23:24"},"scope":1398,"src":"1902:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1385,"nodeType":"Block","src":"2274:106:24","statements":[{"AST":{"nativeSrc":"2336:38:24","nodeType":"YulBlock","src":"2336:38:24","statements":[{"nativeSrc":"2350:14:24","nodeType":"YulAssignment","src":"2350:14:24","value":{"name":"slot","nativeSrc":"2360:4:24","nodeType":"YulIdentifier","src":"2360:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2350:6:24","nodeType":"YulIdentifier","src":"2350:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1382,"isOffset":false,"isSlot":true,"src":"2350:6:24","suffix":"slot","valueSize":1},{"declaration":1378,"isOffset":false,"isSlot":false,"src":"2360:4:24","valueSize":1}],"id":1384,"nodeType":"InlineAssembly","src":"2327:47:24"}]},"documentation":{"id":1376,"nodeType":"StructuredDocumentation","src":"2098:87:24","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":1386,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2199:14:24","nodeType":"FunctionDefinition","parameters":{"id":1379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"mutability":"mutable","name":"slot","nameLocation":"2222:4:24","nodeType":"VariableDeclaration","scope":1386,"src":"2214:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2214:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2213:14:24"},"returnParameters":{"id":1383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"r","nameLocation":"2271:1:24","nodeType":"VariableDeclaration","scope":1386,"src":"2251:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1350_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":1381,"nodeType":"UserDefinedTypeName","pathNode":{"id":1380,"name":"Bytes32Slot","nameLocations":["2251:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1350,"src":"2251:11:24"},"referencedDeclaration":1350,"src":"2251:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$1350_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2250:23:24"},"scope":1398,"src":"2190:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1396,"nodeType":"Block","src":"2562:106:24","statements":[{"AST":{"nativeSrc":"2624:38:24","nodeType":"YulBlock","src":"2624:38:24","statements":[{"nativeSrc":"2638:14:24","nodeType":"YulAssignment","src":"2638:14:24","value":{"name":"slot","nativeSrc":"2648:4:24","nodeType":"YulIdentifier","src":"2648:4:24"},"variableNames":[{"name":"r.slot","nativeSrc":"2638:6:24","nodeType":"YulIdentifier","src":"2638:6:24"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1393,"isOffset":false,"isSlot":true,"src":"2638:6:24","suffix":"slot","valueSize":1},{"declaration":1389,"isOffset":false,"isSlot":false,"src":"2648:4:24","valueSize":1}],"id":1395,"nodeType":"InlineAssembly","src":"2615:47:24"}]},"documentation":{"id":1387,"nodeType":"StructuredDocumentation","src":"2386:87:24","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1397,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2487:14:24","nodeType":"FunctionDefinition","parameters":{"id":1390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"slot","nameLocation":"2510:4:24","nodeType":"VariableDeclaration","scope":1397,"src":"2502:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1388,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2502:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2501:14:24"},"returnParameters":{"id":1394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1393,"mutability":"mutable","name":"r","nameLocation":"2559:1:24","nodeType":"VariableDeclaration","scope":1397,"src":"2539:21:24","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1392,"nodeType":"UserDefinedTypeName","pathNode":{"id":1391,"name":"Uint256Slot","nameLocations":["2539:11:24"],"nodeType":"IdentifierPath","referencedDeclaration":1353,"src":"2539:11:24"},"referencedDeclaration":1353,"src":"2539:11:24","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$1353_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2538:23:24"},"scope":1398,"src":"2478:190:24","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1399,"src":"1279:1391:24","usedErrors":[],"usedEvents":[]}],"src":"105:2566:24"},"id":24},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[1900]},"id":1901,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1400,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:25"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":1401,"nodeType":"StructuredDocumentation","src":"143:658:25","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":1900,"linearizedBaseContracts":[1900],"name":"MerkleProof","nameLocation":"810:11:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":1421,"nodeType":"Block","src":"1283:57:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1415,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"1313:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1416,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"1320:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1414,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"1300:12:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1418,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"1329:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1413,"id":1420,"nodeType":"Return","src":"1293:40:25"}]},"documentation":{"id":1402,"nodeType":"StructuredDocumentation","src":"828:323:25","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":1422,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:25","nodeType":"FunctionDefinition","parameters":{"id":1410,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1405,"mutability":"mutable","name":"proof","nameLocation":"1198:5:25","nodeType":"VariableDeclaration","scope":1422,"src":"1181:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1404,"nodeType":"ArrayTypeName","src":"1181:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"root","nameLocation":"1221:4:25","nodeType":"VariableDeclaration","scope":1422,"src":"1213:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1406,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:25","nodeType":"VariableDeclaration","scope":1422,"src":"1235:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:25"},"returnParameters":{"id":1413,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1412,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1422,"src":"1277:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1411,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:25"},"scope":1900,"src":"1156:184:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1442,"nodeType":"Block","src":"1578:65:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1436,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1426,"src":"1616:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1437,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"1623:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1435,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1523,"src":"1595:20:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1439,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1428,"src":"1632:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1434,"id":1441,"nodeType":"Return","src":"1588:48:25"}]},"documentation":{"id":1423,"nodeType":"StructuredDocumentation","src":"1346:90:25","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":1443,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:25","nodeType":"FunctionDefinition","parameters":{"id":1431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1426,"mutability":"mutable","name":"proof","nameLocation":"1493:5:25","nodeType":"VariableDeclaration","scope":1443,"src":"1474:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1425,"nodeType":"ArrayTypeName","src":"1474:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1428,"mutability":"mutable","name":"root","nameLocation":"1516:4:25","nodeType":"VariableDeclaration","scope":1443,"src":"1508:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1427,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1430,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:25","nodeType":"VariableDeclaration","scope":1443,"src":"1530:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1429,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:25"},"returnParameters":{"id":1434,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1443,"src":"1572:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1432,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:25"},"scope":1900,"src":"1441:202:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1482,"nodeType":"Block","src":"2086:198:25","statements":[{"assignments":[1455],"declarations":[{"constant":false,"id":1455,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:25","nodeType":"VariableDeclaration","scope":1482,"src":"2096:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1457,"initialValue":{"id":1456,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"2119:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:25"},{"body":{"id":1478,"nodeType":"Block","src":"2176:73:25","statements":[{"expression":{"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1469,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"2190:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1471,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"2215:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1472,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"2229:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1474,"indexExpression":{"id":1473,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"2235:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1470,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"2205:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1477,"nodeType":"ExpressionStatement","src":"2190:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1462,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"2153:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1463,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1447,"src":"2157:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:25","memberName":"length","nodeType":"MemberAccess","src":"2157:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1479,"initializationExpression":{"assignments":[1459],"declarations":[{"constant":false,"id":1459,"mutability":"mutable","name":"i","nameLocation":"2146:1:25","nodeType":"VariableDeclaration","scope":1479,"src":"2138:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1458,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1461,"initialValue":{"hexValue":"30","id":1460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:25","subExpression":{"id":1466,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1459,"src":"2171:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"nodeType":"ExpressionStatement","src":"2171:3:25"},"nodeType":"ForStatement","src":"2133:116:25"},{"expression":{"id":1480,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"2265:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1453,"id":1481,"nodeType":"Return","src":"2258:19:25"}]},"documentation":{"id":1444,"nodeType":"StructuredDocumentation","src":"1649:340:25","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:25","nodeType":"FunctionDefinition","parameters":{"id":1450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"proof","nameLocation":"2033:5:25","nodeType":"VariableDeclaration","scope":1483,"src":"2016:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1445,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1446,"nodeType":"ArrayTypeName","src":"2016:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1449,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:25","nodeType":"VariableDeclaration","scope":1483,"src":"2040:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1448,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:25"},"returnParameters":{"id":1453,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1452,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1483,"src":"2077:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1451,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:25"},"scope":1900,"src":"1994:290:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1522,"nodeType":"Block","src":"2493:198:25","statements":[{"assignments":[1495],"declarations":[{"constant":false,"id":1495,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:25","nodeType":"VariableDeclaration","scope":1522,"src":"2503:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1494,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1497,"initialValue":{"id":1496,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1489,"src":"2526:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:25"},{"body":{"id":1518,"nodeType":"Block","src":"2583:73:25","statements":[{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1509,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2597:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1511,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2622:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":1512,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"2636:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1514,"indexExpression":{"id":1513,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"2642:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1510,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"2612:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1515,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1517,"nodeType":"ExpressionStatement","src":"2597:48:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1502,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"2560:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1503,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"2564:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:25","memberName":"length","nodeType":"MemberAccess","src":"2564:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1519,"initializationExpression":{"assignments":[1499],"declarations":[{"constant":false,"id":1499,"mutability":"mutable","name":"i","nameLocation":"2553:1:25","nodeType":"VariableDeclaration","scope":1519,"src":"2545:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1498,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1501,"initialValue":{"hexValue":"30","id":1500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:25","subExpression":{"id":1506,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"2578:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1508,"nodeType":"ExpressionStatement","src":"2578:3:25"},"nodeType":"ForStatement","src":"2540:116:25"},{"expression":{"id":1520,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"2672:12:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1493,"id":1521,"nodeType":"Return","src":"2665:19:25"}]},"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"2290:96:25","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":1523,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:25","nodeType":"FunctionDefinition","parameters":{"id":1490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1487,"mutability":"mutable","name":"proof","nameLocation":"2440:5:25","nodeType":"VariableDeclaration","scope":1523,"src":"2421:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1486,"nodeType":"ArrayTypeName","src":"2421:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1489,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:25","nodeType":"VariableDeclaration","scope":1523,"src":"2447:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1488,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:25"},"returnParameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1492,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1523,"src":"2484:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:25"},"scope":1900,"src":"2391:300:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1548,"nodeType":"Block","src":"3234:76:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1541,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1527,"src":"3269:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":1542,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1530,"src":"3276:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":1543,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1535,"src":"3288:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1540,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"3251:17:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1545,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"3299:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1539,"id":1547,"nodeType":"Return","src":"3244:59:25"}]},"documentation":{"id":1524,"nodeType":"StructuredDocumentation","src":"2697:350:25","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1549,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:25","nodeType":"FunctionDefinition","parameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1527,"mutability":"mutable","name":"proof","nameLocation":"3104:5:25","nodeType":"VariableDeclaration","scope":1549,"src":"3087:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1526,"nodeType":"ArrayTypeName","src":"3087:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1530,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:25","nodeType":"VariableDeclaration","scope":1549,"src":"3119:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1528,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1529,"nodeType":"ArrayTypeName","src":"3119:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1532,"mutability":"mutable","name":"root","nameLocation":"3161:4:25","nodeType":"VariableDeclaration","scope":1549,"src":"3153:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1531,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1535,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:25","nodeType":"VariableDeclaration","scope":1549,"src":"3175:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1533,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1534,"nodeType":"ArrayTypeName","src":"3175:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:25"},"returnParameters":{"id":1539,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1538,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1549,"src":"3228:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1537,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:25"},"scope":1900,"src":"3052:258:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1574,"nodeType":"Block","src":"3715:84:25","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1567,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1553,"src":"3758:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":1568,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"3765:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":1569,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1561,"src":"3777:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":1566,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1865,"src":"3732:25:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1571,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1558,"src":"3788:4:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1565,"id":1573,"nodeType":"Return","src":"3725:67:25"}]},"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"3316:200:25","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1575,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:25","nodeType":"FunctionDefinition","parameters":{"id":1562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1553,"mutability":"mutable","name":"proof","nameLocation":"3583:5:25","nodeType":"VariableDeclaration","scope":1575,"src":"3564:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1551,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1552,"nodeType":"ArrayTypeName","src":"3564:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:25","nodeType":"VariableDeclaration","scope":1575,"src":"3598:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1554,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1555,"nodeType":"ArrayTypeName","src":"3598:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1558,"mutability":"mutable","name":"root","nameLocation":"3642:4:25","nodeType":"VariableDeclaration","scope":1575,"src":"3634:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:25","nodeType":"VariableDeclaration","scope":1575,"src":"3656:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1559,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1560,"nodeType":"ArrayTypeName","src":"3656:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:25"},"returnParameters":{"id":1565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1575,"src":"3709:4:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1563,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:25"},"scope":1900,"src":"3521:278:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1719,"nodeType":"Block","src":"4753:1860:25","statements":[{"assignments":[1591],"declarations":[{"constant":false,"id":1591,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:25","nodeType":"VariableDeclaration","scope":1719,"src":"5136:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1590,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1594,"initialValue":{"expression":{"id":1592,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"5156:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:25","memberName":"length","nodeType":"MemberAccess","src":"5156:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:25"},{"assignments":[1596],"declarations":[{"constant":false,"id":1596,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:25","nodeType":"VariableDeclaration","scope":1719,"src":"5179:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1599,"initialValue":{"expression":{"id":1597,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"5201:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:25","memberName":"length","nodeType":"MemberAccess","src":"5201:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1601,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"5270:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1602,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"5282:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:25","memberName":"length","nodeType":"MemberAccess","src":"5282:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1607,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5302:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1609,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1600,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1611,"nodeType":"ExpressionStatement","src":"5262:87:25"},{"assignments":[1616],"declarations":[{"constant":false,"id":1616,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:25","nodeType":"VariableDeclaration","scope":1719,"src":"5594:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1615,"nodeType":"ArrayTypeName","src":"5594:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1622,"initialValue":{"arguments":[{"id":1620,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"5634:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1617,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1618,"nodeType":"ArrayTypeName","src":"5624:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:25"},{"assignments":[1624],"declarations":[{"constant":false,"id":1624,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:25","nodeType":"VariableDeclaration","scope":1719,"src":"5656:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1623,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1626,"initialValue":{"hexValue":"30","id":1625,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:25"},{"assignments":[1628],"declarations":[{"constant":false,"id":1628,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:25","nodeType":"VariableDeclaration","scope":1719,"src":"5685:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1627,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1630,"initialValue":{"hexValue":"30","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:25"},{"assignments":[1632],"declarations":[{"constant":false,"id":1632,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:25","nodeType":"VariableDeclaration","scope":1719,"src":"5714:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1631,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1634,"initialValue":{"hexValue":"30","id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:25"},{"body":{"id":1692,"nodeType":"Block","src":"6151:258:25","statements":[{"assignments":[1646],"declarations":[{"constant":false,"id":1646,"mutability":"mutable","name":"a","nameLocation":"6173:1:25","nodeType":"VariableDeclaration","scope":1692,"src":"6165:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1645,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1659,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1647,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6177:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1648,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6187:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1654,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"6219:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1657,"indexExpression":{"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:25","subExpression":{"id":1655,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6226:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:25","trueExpression":{"baseExpression":{"id":1650,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"6199:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1653,"indexExpression":{"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:25","subExpression":{"id":1651,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6206:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:25"},{"assignments":[1661],"declarations":[{"constant":false,"id":1661,"mutability":"mutable","name":"b","nameLocation":"6258:1:25","nodeType":"VariableDeclaration","scope":1692,"src":"6250:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1660,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1682,"initialValue":{"condition":{"baseExpression":{"id":1662,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1582,"src":"6262:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":1664,"indexExpression":{"id":1663,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"6273:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1677,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6340:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1680,"indexExpression":{"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:25","subExpression":{"id":1678,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1632,"src":"6346:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:25","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1665,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6278:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1666,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6288:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1672,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"6320:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1675,"indexExpression":{"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:25","subExpression":{"id":1673,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"6327:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:25","trueExpression":{"baseExpression":{"id":1668,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"6300:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1671,"indexExpression":{"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:25","subExpression":{"id":1669,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1624,"src":"6307:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:25"},{"expression":{"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1683,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"6371:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1685,"indexExpression":{"id":1684,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"6378:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1687,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"6393:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1688,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1661,"src":"6396:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1686,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"6383:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1691,"nodeType":"ExpressionStatement","src":"6371:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1639,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"6129:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1640,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"6133:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1693,"initializationExpression":{"assignments":[1636],"declarations":[{"constant":false,"id":1636,"mutability":"mutable","name":"i","nameLocation":"6122:1:25","nodeType":"VariableDeclaration","scope":1693,"src":"6114:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1635,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1638,"initialValue":{"hexValue":"30","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:25","subExpression":{"id":1642,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1636,"src":"6146:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"nodeType":"ExpressionStatement","src":"6146:3:25"},"nodeType":"ForStatement","src":"6109:300:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1694,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"6423:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1704,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1591,"src":"6505:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1716,"nodeType":"Block","src":"6567:40:25","statements":[{"expression":{"baseExpression":{"id":1712,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1579,"src":"6588:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1714,"indexExpression":{"hexValue":"30","id":1713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1589,"id":1715,"nodeType":"Return","src":"6581:15:25"}]},"id":1717,"nodeType":"IfStatement","src":"6501:106:25","trueBody":{"id":1711,"nodeType":"Block","src":"6520:41:25","statements":[{"expression":{"baseExpression":{"id":1707,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"6541:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1709,"indexExpression":{"hexValue":"30","id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1589,"id":1710,"nodeType":"Return","src":"6534:16:25"}]}},"id":1718,"nodeType":"IfStatement","src":"6419:188:25","trueBody":{"id":1703,"nodeType":"Block","src":"6440:55:25","statements":[{"expression":{"baseExpression":{"id":1697,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1616,"src":"6461:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1701,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1698,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"6468:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1699,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1589,"id":1702,"nodeType":"Return","src":"6454:30:25"}]}}]},"documentation":{"id":1576,"nodeType":"StructuredDocumentation","src":"3805:768:25","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":1720,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:25","nodeType":"FunctionDefinition","parameters":{"id":1586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1579,"mutability":"mutable","name":"proof","nameLocation":"4631:5:25","nodeType":"VariableDeclaration","scope":1720,"src":"4614:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1577,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1578,"nodeType":"ArrayTypeName","src":"4614:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1582,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:25","nodeType":"VariableDeclaration","scope":1720,"src":"4646:24:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1580,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1581,"nodeType":"ArrayTypeName","src":"4646:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1585,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:25","nodeType":"VariableDeclaration","scope":1720,"src":"4680:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1583,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1584,"nodeType":"ArrayTypeName","src":"4680:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:25"},"returnParameters":{"id":1589,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:25","nodeType":"VariableDeclaration","scope":1720,"src":"4733:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:25"},"scope":1900,"src":"4578:2035:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1864,"nodeType":"Block","src":"7013:1860:25","statements":[{"assignments":[1736],"declarations":[{"constant":false,"id":1736,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:25","nodeType":"VariableDeclaration","scope":1864,"src":"7396:17:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1735,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1739,"initialValue":{"expression":{"id":1737,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"7416:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:25","memberName":"length","nodeType":"MemberAccess","src":"7416:13:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:25"},{"assignments":[1741],"declarations":[{"constant":false,"id":1741,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:25","nodeType":"VariableDeclaration","scope":1864,"src":"7439:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1744,"initialValue":{"expression":{"id":1742,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"7461:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:25","memberName":"length","nodeType":"MemberAccess","src":"7461:17:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:25"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1746,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"7530:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":1747,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"7542:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:25","memberName":"length","nodeType":"MemberAccess","src":"7542:12:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1752,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"7562:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:25","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":1745,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:25","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1756,"nodeType":"ExpressionStatement","src":"7522:87:25"},{"assignments":[1761],"declarations":[{"constant":false,"id":1761,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:25","nodeType":"VariableDeclaration","scope":1864,"src":"7854:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1759,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1760,"nodeType":"ArrayTypeName","src":"7854:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":1767,"initialValue":{"arguments":[{"id":1765,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"7894:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1764,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:25","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":1762,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1763,"nodeType":"ArrayTypeName","src":"7884:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:25"},{"assignments":[1769],"declarations":[{"constant":false,"id":1769,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:25","nodeType":"VariableDeclaration","scope":1864,"src":"7916:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1771,"initialValue":{"hexValue":"30","id":1770,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:25"},{"assignments":[1773],"declarations":[{"constant":false,"id":1773,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:25","nodeType":"VariableDeclaration","scope":1864,"src":"7945:15:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1772,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1775,"initialValue":{"hexValue":"30","id":1774,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:25"},{"assignments":[1777],"declarations":[{"constant":false,"id":1777,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:25","nodeType":"VariableDeclaration","scope":1864,"src":"7974:16:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1776,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1779,"initialValue":{"hexValue":"30","id":1778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:25"},{"body":{"id":1837,"nodeType":"Block","src":"8411:258:25","statements":[{"assignments":[1791],"declarations":[{"constant":false,"id":1791,"mutability":"mutable","name":"a","nameLocation":"8433:1:25","nodeType":"VariableDeclaration","scope":1837,"src":"8425:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1790,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1804,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1792,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"8437:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1793,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8447:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1799,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"8479:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1802,"indexExpression":{"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:25","subExpression":{"id":1800,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"8486:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:25","trueExpression":{"baseExpression":{"id":1795,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"8459:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1798,"indexExpression":{"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:25","subExpression":{"id":1796,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"8466:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:25"},{"assignments":[1806],"declarations":[{"constant":false,"id":1806,"mutability":"mutable","name":"b","nameLocation":"8518:1:25","nodeType":"VariableDeclaration","scope":1837,"src":"8510:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1827,"initialValue":{"condition":{"baseExpression":{"id":1807,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1727,"src":"8522:10:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":1809,"indexExpression":{"id":1808,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"8533:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1822,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8600:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1825,"indexExpression":{"id":1824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:25","subExpression":{"id":1823,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1777,"src":"8606:8:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:25","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1810,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"8538:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1811,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8548:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":1817,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"8580:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1820,"indexExpression":{"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:25","subExpression":{"id":1818,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"8587:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:25","trueExpression":{"baseExpression":{"id":1813,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"8560:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1816,"indexExpression":{"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:25","subExpression":{"id":1814,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"8567:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:25"},{"expression":{"id":1835,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1828,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"8631:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1830,"indexExpression":{"id":1829,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"8638:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1832,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1791,"src":"8653:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1833,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1806,"src":"8656:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1831,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1888,"src":"8643:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1836,"nodeType":"ExpressionStatement","src":"8631:27:25"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"8389:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1785,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"8393:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1838,"initializationExpression":{"assignments":[1781],"declarations":[{"constant":false,"id":1781,"mutability":"mutable","name":"i","nameLocation":"8382:1:25","nodeType":"VariableDeclaration","scope":1838,"src":"8374:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1780,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1783,"initialValue":{"hexValue":"30","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:25"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:25","subExpression":{"id":1787,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1781,"src":"8406:1:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1789,"nodeType":"ExpressionStatement","src":"8406:3:25"},"nodeType":"ForStatement","src":"8369:300:25"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1839,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"8683:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1849,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1736,"src":"8765:9:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1861,"nodeType":"Block","src":"8827:40:25","statements":[{"expression":{"baseExpression":{"id":1857,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"8848:5:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":1859,"indexExpression":{"hexValue":"30","id":1858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1734,"id":1860,"nodeType":"Return","src":"8841:15:25"}]},"id":1862,"nodeType":"IfStatement","src":"8761:106:25","trueBody":{"id":1856,"nodeType":"Block","src":"8780:41:25","statements":[{"expression":{"baseExpression":{"id":1852,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1730,"src":"8801:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1854,"indexExpression":{"hexValue":"30","id":1853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:25","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1734,"id":1855,"nodeType":"Return","src":"8794:16:25"}]}},"id":1863,"nodeType":"IfStatement","src":"8679:188:25","trueBody":{"id":1848,"nodeType":"Block","src":"8700:55:25","statements":[{"expression":{"baseExpression":{"id":1842,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"8721:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1846,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1843,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1741,"src":"8728:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:25","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1734,"id":1847,"nodeType":"Return","src":"8714:30:25"}]}}]},"documentation":{"id":1721,"nodeType":"StructuredDocumentation","src":"6619:202:25","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":1865,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:25","nodeType":"FunctionDefinition","parameters":{"id":1731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1724,"mutability":"mutable","name":"proof","nameLocation":"6889:5:25","nodeType":"VariableDeclaration","scope":1865,"src":"6870:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1722,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1723,"nodeType":"ArrayTypeName","src":"6870:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1727,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:25","nodeType":"VariableDeclaration","scope":1865,"src":"6904:26:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":1725,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1726,"nodeType":"ArrayTypeName","src":"6904:6:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":1730,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:25","nodeType":"VariableDeclaration","scope":1865,"src":"6940:23:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1728,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1729,"nodeType":"ArrayTypeName","src":"6940:9:25","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:25"},"returnParameters":{"id":1734,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1733,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:25","nodeType":"VariableDeclaration","scope":1865,"src":"6993:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:25"},"scope":1900,"src":"6826:2047:25","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1887,"nodeType":"Block","src":"8951:75:25","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1876,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1874,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"8968:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1875,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"8972:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":1882,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"9014:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1883,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"9017:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1881,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"8999:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:25","trueExpression":{"arguments":[{"id":1878,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"8991:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1879,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"8994:1:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1877,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"8976:14:25","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1873,"id":1886,"nodeType":"Return","src":"8961:58:25"}]},"id":1888,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:25","nodeType":"FunctionDefinition","parameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"a","nameLocation":"8906:1:25","nodeType":"VariableDeclaration","scope":1888,"src":"8898:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1869,"mutability":"mutable","name":"b","nameLocation":"8917:1:25","nodeType":"VariableDeclaration","scope":1888,"src":"8909:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1868,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:25"},"returnParameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1888,"src":"8942:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1871,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:25"},"scope":1900,"src":"8879:147:25","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1898,"nodeType":"Block","src":"9115:178:25","statements":[{"AST":{"nativeSrc":"9177:110:25","nodeType":"YulBlock","src":"9177:110:25","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:25","nodeType":"YulLiteral","src":"9198:4:25","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:25","nodeType":"YulIdentifier","src":"9204:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:25","nodeType":"YulIdentifier","src":"9191:6:25"},"nativeSrc":"9191:15:25","nodeType":"YulFunctionCall","src":"9191:15:25"},"nativeSrc":"9191:15:25","nodeType":"YulExpressionStatement","src":"9191:15:25"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:25","nodeType":"YulLiteral","src":"9226:4:25","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:25","nodeType":"YulIdentifier","src":"9232:1:25"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:25","nodeType":"YulIdentifier","src":"9219:6:25"},"nativeSrc":"9219:15:25","nodeType":"YulFunctionCall","src":"9219:15:25"},"nativeSrc":"9219:15:25","nodeType":"YulExpressionStatement","src":"9219:15:25"},{"nativeSrc":"9247:30:25","nodeType":"YulAssignment","src":"9247:30:25","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:25","nodeType":"YulLiteral","src":"9266:4:25","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:25","nodeType":"YulLiteral","src":"9272:4:25","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:25","nodeType":"YulIdentifier","src":"9256:9:25"},"nativeSrc":"9256:21:25","nodeType":"YulFunctionCall","src":"9256:21:25"},"variableNames":[{"name":"value","nativeSrc":"9247:5:25","nodeType":"YulIdentifier","src":"9247:5:25"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1890,"isOffset":false,"isSlot":false,"src":"9204:1:25","valueSize":1},{"declaration":1892,"isOffset":false,"isSlot":false,"src":"9232:1:25","valueSize":1},{"declaration":1895,"isOffset":false,"isSlot":false,"src":"9247:5:25","valueSize":1}],"id":1897,"nodeType":"InlineAssembly","src":"9168:119:25"}]},"id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:25","nodeType":"FunctionDefinition","parameters":{"id":1893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1890,"mutability":"mutable","name":"a","nameLocation":"9064:1:25","nodeType":"VariableDeclaration","scope":1899,"src":"9056:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1892,"mutability":"mutable","name":"b","nameLocation":"9075:1:25","nodeType":"VariableDeclaration","scope":1899,"src":"9067:9:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:25"},"returnParameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1895,"mutability":"mutable","name":"value","nameLocation":"9108:5:25","nodeType":"VariableDeclaration","scope":1899,"src":"9100:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1894,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:25","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:25"},"scope":1900,"src":"9032:261:25","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1901,"src":"802:8493:25","usedErrors":[],"usedEvents":[]}],"src":"118:9178:25"},"id":25},"contracts/burn/AnichessOrbsBurnPool.sol":{"ast":{"absolutePath":"contracts/burn/AnichessOrbsBurnPool.sol","exportedSymbols":{"AnichessMultiplier":[3275],"AnichessOrbsBurnPool":[2813],"Context":[1338],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ERC1155TokenReceiver":[847],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155Burnable":[948],"IForwarderRegistry":[727],"MerkleProof":[1900]},"id":2814,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1902,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":33,"src":"57:101:26","symbolAliases":[{"foreign":{"id":1903,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"65:17:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":1906,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":385,"src":"159:125:26","symbolAliases":[{"foreign":{"id":1905,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"167:24:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":1908,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":848,"src":"285:114:26","symbolAliases":[{"foreign":{"id":1907,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":847,"src":"293:20:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":1910,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":949,"src":"400:117:26","symbolAliases":[{"foreign":{"id":1909,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"408:16:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":1912,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":582,"src":"518:115:26","symbolAliases":[{"foreign":{"id":1911,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"526:24:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":1914,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":702,"src":"634:128:26","symbolAliases":[{"foreign":{"id":1913,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"642:28:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1916,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":728,"src":"763:114:26","symbolAliases":[{"foreign":{"id":1915,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"771:18:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1918,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":1339,"src":"878:66:26","symbolAliases":[{"foreign":{"id":1917,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"886:7:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/merkleClaim/AnichessMultiplier.sol","file":"../merkleClaim/AnichessMultiplier.sol","id":1920,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":3276,"src":"945:73:26","symbolAliases":[{"foreign":{"id":1919,"name":"AnichessMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3275,"src":"953:18:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":1922,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2814,"sourceUnit":1901,"src":"1019:87:26","symbolAliases":[{"foreign":{"id":1921,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"1027:11:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1924,"name":"ForwarderRegistryContext","nameLocations":["1403:24:26"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1403:24:26"},"id":1925,"nodeType":"InheritanceSpecifier","src":"1403:24:26"},{"baseName":{"id":1926,"name":"ERC1155TokenReceiver","nameLocations":["1429:20:26"],"nodeType":"IdentifierPath","referencedDeclaration":847,"src":"1429:20:26"},"id":1927,"nodeType":"InheritanceSpecifier","src":"1429:20:26"},{"baseName":{"id":1928,"name":"ContractOwnership","nameLocations":["1451:17:26"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1451:17:26"},"id":1929,"nodeType":"InheritanceSpecifier","src":"1451:17:26"}],"canonicalName":"AnichessOrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"1108:261:26","text":" @title Anichess Orbs Burn Pool Contract\n @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n @dev The rewards are calculated based on the total amount of tokens burned in the previous cycle."},"fullyImplemented":true,"id":2813,"linearizedBaseContracts":[2813,32,847,414,431,80,1338,126,986,581,713,701],"name":"AnichessOrbsBurnPool","nameLocation":"1379:20:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1933,"libraryName":{"id":1930,"name":"ContractOwnershipStorage","nameLocations":["1481:24:26"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1481:24:26"},"nodeType":"UsingForDirective","src":"1475:67:26","typeName":{"id":1932,"nodeType":"UserDefinedTypeName","pathNode":{"id":1931,"name":"ContractOwnershipStorage.Layout","nameLocations":["1510:24:26","1535:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1510:31:26"},"referencedDeclaration":157,"src":"1510:31:26","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":1937,"libraryName":{"id":1934,"name":"MerkleProof","nameLocations":["1553:11:26"],"nodeType":"IdentifierPath","referencedDeclaration":1900,"src":"1553:11:26"},"nodeType":"UsingForDirective","src":"1547:32:26","typeName":{"baseType":{"id":1935,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1936,"nodeType":"ArrayTypeName","src":"1569:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":false,"documentation":{"id":1938,"nodeType":"StructuredDocumentation","src":"1585:51:26","text":"@notice The IERC1155Burnable erc1155 contracts."},"functionSelector":"82bfefc8","id":1941,"mutability":"immutable","name":"TOKEN","nameLocation":"1675:5:26","nodeType":"VariableDeclaration","scope":2813,"src":"1641:39:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":1940,"nodeType":"UserDefinedTypeName","pathNode":{"id":1939,"name":"IERC1155Burnable","nameLocations":["1641:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"1641:16:26"},"referencedDeclaration":948,"src":"1641:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1942,"nodeType":"StructuredDocumentation","src":"1687:45:26","text":"@notice The initial time of the contract."},"functionSelector":"491bde66","id":1944,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"1762:12:26","nodeType":"VariableDeclaration","scope":2813,"src":"1737:37:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1943,"name":"uint256","nodeType":"ElementaryTypeName","src":"1737:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1945,"nodeType":"StructuredDocumentation","src":"1781:39:26","text":"@notice The duration of each cycle."},"functionSelector":"cd421fbf","id":1947,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"1850:14:26","nodeType":"VariableDeclaration","scope":2813,"src":"1825:39:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1946,"name":"uint256","nodeType":"ElementaryTypeName","src":"1825:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1948,"nodeType":"StructuredDocumentation","src":"1871:30:26","text":"@notice The maximum cycle."},"functionSelector":"043063bc","id":1950,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"1931:9:26","nodeType":"VariableDeclaration","scope":2813,"src":"1906:34:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1949,"name":"uint256","nodeType":"ElementaryTypeName","src":"1906:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"1947:77:26","text":"@notice The IERC1155 erc1155 contract for unlocking the token multiplier."},"functionSelector":"64c19303","id":1954,"mutability":"immutable","name":"MULTIPLIER_TOKEN","nameLocation":"2063:16:26","nodeType":"VariableDeclaration","scope":2813,"src":"2029:50:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":1953,"nodeType":"UserDefinedTypeName","pathNode":{"id":1952,"name":"IERC1155Burnable","nameLocations":["2029:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"2029:16:26"},"referencedDeclaration":948,"src":"2029:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1955,"nodeType":"StructuredDocumentation","src":"2086:60:26","text":"@notice The token ID for unlocking the token multiplier."},"functionSelector":"16a3138b","id":1957,"mutability":"immutable","name":"MULTIPLIER_TOKEN_ID","nameLocation":"2176:19:26","nodeType":"VariableDeclaration","scope":2813,"src":"2151:44:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1956,"name":"uint256","nodeType":"ElementaryTypeName","src":"2151:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1958,"nodeType":"StructuredDocumentation","src":"2202:64:26","text":"@notice The Merkle root of the leaderboard multiplier claim."},"functionSelector":"51e75e8b","id":1960,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"2296:11:26","nodeType":"VariableDeclaration","scope":2813,"src":"2271:36:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2271:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"2314:33:26","text":"@notice The token multiplier."},"functionSelector":"2b093fe9","id":1963,"mutability":"immutable","name":"TOKEN_MULTIPLIER","nameLocation":"2377:16:26","nodeType":"VariableDeclaration","scope":2813,"src":"2352:41:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1962,"name":"uint256","nodeType":"ElementaryTypeName","src":"2352:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"2400:56:26","text":"@notice The list of tiers to decide the reward pool."},"functionSelector":"039af9eb","id":1967,"mutability":"mutable","name":"tiers","nameLocation":"2478:5:26","nodeType":"VariableDeclaration","scope":2813,"src":"2461:22:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1965,"name":"uint256","nodeType":"ElementaryTypeName","src":"2461:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1966,"nodeType":"ArrayTypeName","src":"2461:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"documentation":{"id":1968,"nodeType":"StructuredDocumentation","src":"2490:46:26","text":"@notice The list of rewards for each tier."},"functionSelector":"556c448d","id":1971,"mutability":"mutable","name":"tierRewards","nameLocation":"2558:11:26","nodeType":"VariableDeclaration","scope":2813,"src":"2541:28:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[]"},"typeName":{"baseType":{"id":1969,"name":"uint256","nodeType":"ElementaryTypeName","src":"2541:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1970,"nodeType":"ArrayTypeName","src":"2541:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"public"},{"constant":false,"documentation":{"id":1972,"nodeType":"StructuredDocumentation","src":"2576:57:26","text":"@notice The total amount of ASH burned in each cycle."},"id":1976,"mutability":"mutable","name":"totalAshByCycle","nameLocation":"2666:15:26","nodeType":"VariableDeclaration","scope":2813,"src":"2638:43:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1975,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1973,"name":"uint256","nodeType":"ElementaryTypeName","src":"2646:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2638:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"2657:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"documentation":{"id":1977,"nodeType":"StructuredDocumentation","src":"2688:70:26","text":"@notice The total amount of ASH burned by each user in each cycle."},"functionSelector":"fa9fdc6a","id":1983,"mutability":"mutable","name":"userAshByCycle","nameLocation":"2818:14:26","nodeType":"VariableDeclaration","scope":2813,"src":"2763:69:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":1982,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1978,"name":"uint256","nodeType":"ElementaryTypeName","src":"2771:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2763:47:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1981,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"2790:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2782:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1980,"name":"uint256","nodeType":"ElementaryTypeName","src":"2801:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":1984,"nodeType":"StructuredDocumentation","src":"2839:60:26","text":"@notice The claim status for the leaderboard multiplier."},"functionSelector":"e3a0ce09","id":1988,"mutability":"mutable","name":"claimStatus","nameLocation":"2936:11:26","nodeType":"VariableDeclaration","scope":2813,"src":"2904:43:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":1987,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2912:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"2904:24:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1986,"name":"bool","nodeType":"ElementaryTypeName","src":"2923:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1989,"nodeType":"StructuredDocumentation","src":"2954:54:26","text":"@notice The leaderboard multipliers for each user."},"functionSelector":"70d92882","id":1993,"mutability":"mutable","name":"leaderboardMultiplers","nameLocation":"3048:21:26","nodeType":"VariableDeclaration","scope":2813,"src":"3013:56:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1992,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"3021:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3013:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1991,"name":"uint256","nodeType":"ElementaryTypeName","src":"3032:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1994,"nodeType":"StructuredDocumentation","src":"3076:61:26","text":"@notice The token multiplier unlock status for each user."},"functionSelector":"a5bb3ec1","id":1998,"mutability":"mutable","name":"tokenMultiplerUnlockStatus","nameLocation":"3174:26:26","nodeType":"VariableDeclaration","scope":2813,"src":"3142:58:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"typeName":{"id":1997,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1995,"name":"address","nodeType":"ElementaryTypeName","src":"3150:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3142:24:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1996,"name":"bool","nodeType":"ElementaryTypeName","src":"3161:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1999,"nodeType":"StructuredDocumentation","src":"3207:30:26","text":"@notice The token weights."},"id":2003,"mutability":"mutable","name":"tokenWeights","nameLocation":"3270:12:26","nodeType":"VariableDeclaration","scope":2813,"src":"3242:40:26","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":2002,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2000,"name":"uint256","nodeType":"ElementaryTypeName","src":"3250:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"3242:27:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2001,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"anonymous":false,"documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"3289:48:26","text":"@notice Event emitted when tokens are burnt."},"eventSelector":"3adb63d4fde6845c0b2322e50ebb349a765d70b1756f0c1d1cfa64da74681942","id":2022,"name":"TokensBurnt","nameLocation":"3348:11:26","nodeType":"EventDefinition","parameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"3385:6:26","nodeType":"VariableDeclaration","scope":2022,"src":"3369:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"3369:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2008,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"3417:5:26","nodeType":"VariableDeclaration","scope":2022,"src":"3401:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3401:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2010,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"3440:9:26","nodeType":"VariableDeclaration","scope":2022,"src":"3432:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"3432:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2013,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"3469:3:26","nodeType":"VariableDeclaration","scope":2022,"src":"3459:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2011,"name":"uint256","nodeType":"ElementaryTypeName","src":"3459:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2012,"nodeType":"ArrayTypeName","src":"3459:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2016,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"3492:6:26","nodeType":"VariableDeclaration","scope":2022,"src":"3482:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2014,"name":"uint256","nodeType":"ElementaryTypeName","src":"3482:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2015,"nodeType":"ArrayTypeName","src":"3482:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2018,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"3516:8:26","nodeType":"VariableDeclaration","scope":2022,"src":"3508:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"3508:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2020,"indexed":false,"mutability":"mutable","name":"multiplier","nameLocation":"3542:10:26","nodeType":"VariableDeclaration","scope":2022,"src":"3534:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2019,"name":"uint256","nodeType":"ElementaryTypeName","src":"3534:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3359:199:26"},"src":"3342:217:26"},{"anonymous":false,"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"3565:69:26","text":"@notice Event emitted when the leaderboard multiplier is claimed."},"eventSelector":"ad13a161261d327d2506101e44c2dd1737e7314cd7ed475a2819bdc64c76b857","id":2029,"name":"ClaimLeaderboardMultiplier","nameLocation":"3645:26:26","nodeType":"EventDefinition","parameters":{"id":2028,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2025,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3688:9:26","nodeType":"VariableDeclaration","scope":2029,"src":"3672:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2024,"name":"address","nodeType":"ElementaryTypeName","src":"3672:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2027,"indexed":false,"mutability":"mutable","name":"multiplier","nameLocation":"3707:10:26","nodeType":"VariableDeclaration","scope":2029,"src":"3699:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"3699:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3671:47:26"},"src":"3639:80:26"},{"anonymous":false,"documentation":{"id":2030,"nodeType":"StructuredDocumentation","src":"3725:64:26","text":"@notice Event emitted when the token multiplier is unlocked."},"eventSelector":"2f1cff01c45015e0e6d543724e40ddc5472049fe52ae6a10dda3d2363d38f38b","id":2036,"name":"UnlockTokenMultiplier","nameLocation":"3800:21:26","nodeType":"EventDefinition","parameters":{"id":2035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"indexed":false,"mutability":"mutable","name":"wallet","nameLocation":"3830:6:26","nodeType":"VariableDeclaration","scope":2036,"src":"3822:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2031,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2034,"indexed":false,"mutability":"mutable","name":"timestamp","nameLocation":"3846:9:26","nodeType":"VariableDeclaration","scope":2036,"src":"3838:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2033,"name":"uint256","nodeType":"ElementaryTypeName","src":"3838:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3821:35:26"},"src":"3794:63:26"},{"documentation":{"id":2037,"nodeType":"StructuredDocumentation","src":"3863:54:26","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":2043,"name":"InvalidTokenId","nameLocation":"3928:14:26","nodeType":"ErrorDefinition","parameters":{"id":2042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2039,"mutability":"mutable","name":"token","nameLocation":"3951:5:26","nodeType":"VariableDeclaration","scope":2043,"src":"3943:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2038,"name":"address","nodeType":"ElementaryTypeName","src":"3943:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2041,"mutability":"mutable","name":"tokenId","nameLocation":"3966:7:26","nodeType":"VariableDeclaration","scope":2043,"src":"3958:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2040,"name":"uint256","nodeType":"ElementaryTypeName","src":"3958:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3942:32:26"},"src":"3922:53:26"},{"documentation":{"id":2044,"nodeType":"StructuredDocumentation","src":"3981:65:26","text":"@notice Error thrown when the array lengths are inconsistent."},"errorSelector":"35e83ac3","id":2046,"name":"InconsistentArrays","nameLocation":"4057:18:26","nodeType":"ErrorDefinition","parameters":{"id":2045,"nodeType":"ParameterList","parameters":[],"src":"4075:2:26"},"src":"4051:27:26"},{"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"4084:54:26","text":"@notice Error thrown when the tiers are incorrect."},"errorSelector":"7bd3bbea","id":2049,"name":"IncorrectTiers","nameLocation":"4149:14:26","nodeType":"ErrorDefinition","parameters":{"id":2048,"nodeType":"ParameterList","parameters":[],"src":"4163:2:26"},"src":"4143:23:26"},{"documentation":{"id":2050,"nodeType":"StructuredDocumentation","src":"4172:56:26","text":"@notice Error thrown when the token is not approved."},"errorSelector":"c1ab6dc1","id":2052,"name":"InvalidToken","nameLocation":"4239:12:26","nodeType":"ErrorDefinition","parameters":{"id":2051,"nodeType":"ParameterList","parameters":[],"src":"4251:2:26"},"src":"4233:21:26"},{"documentation":{"id":2053,"nodeType":"StructuredDocumentation","src":"4260:51:26","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":2057,"name":"InvalidCycle","nameLocation":"4322:12:26","nodeType":"ErrorDefinition","parameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2055,"mutability":"mutable","name":"cycle","nameLocation":"4343:5:26","nodeType":"VariableDeclaration","scope":2057,"src":"4335:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"4335:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4334:15:26"},"src":"4316:34:26"},{"documentation":{"id":2058,"nodeType":"StructuredDocumentation","src":"4356:58:26","text":"@notice Error thrown when the token amount is invalid."},"errorSelector":"f789eb2f","id":2064,"name":"InvalidTokenAmount","nameLocation":"4425:18:26","nodeType":"ErrorDefinition","parameters":{"id":2063,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2060,"mutability":"mutable","name":"amount","nameLocation":"4452:6:26","nodeType":"VariableDeclaration","scope":2064,"src":"4444:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"4444:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2062,"mutability":"mutable","name":"expectedAmount","nameLocation":"4468:14:26","nodeType":"VariableDeclaration","scope":2064,"src":"4460:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2061,"name":"uint256","nodeType":"ElementaryTypeName","src":"4460:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4443:40:26"},"src":"4419:65:26"},{"documentation":{"id":2065,"nodeType":"StructuredDocumentation","src":"4490:66:26","text":"@notice Error thrown when the payout has already been claimed."},"errorSelector":"80842243","id":2069,"name":"AlreadyClaimedLeaderboardMultiplier","nameLocation":"4567:35:26","nodeType":"ErrorDefinition","parameters":{"id":2068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2067,"mutability":"mutable","name":"recipient","nameLocation":"4611:9:26","nodeType":"VariableDeclaration","scope":2069,"src":"4603:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2066,"name":"address","nodeType":"ElementaryTypeName","src":"4603:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4602:19:26"},"src":"4561:61:26"},{"documentation":{"id":2070,"nodeType":"StructuredDocumentation","src":"4628:83:26","text":"@notice Error thrown when the wallet already has the token multiplier unlocked."},"errorSelector":"03a00287","id":2074,"name":"AlreadyUnlockedTokenMultiplier","nameLocation":"4722:30:26","nodeType":"ErrorDefinition","parameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"wallet","nameLocation":"4761:6:26","nodeType":"VariableDeclaration","scope":2074,"src":"4753:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2071,"name":"address","nodeType":"ElementaryTypeName","src":"4753:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4752:16:26"},"src":"4716:53:26"},{"documentation":{"id":2075,"nodeType":"StructuredDocumentation","src":"4775:51:26","text":"@notice Error thrown when the proof is invalid."},"errorSelector":"09bde339","id":2077,"name":"InvalidProof","nameLocation":"4837:12:26","nodeType":"ErrorDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[],"src":"4849:2:26"},"src":"4831:21:26"},{"documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"4858:56:26","text":"@notice Error thrown when the tiers are already set."},"errorSelector":"65edd761","id":2080,"name":"AlreadySetTiers","nameLocation":"4925:15:26","nodeType":"ErrorDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[],"src":"4940:2:26"},"src":"4919:24:26"},{"documentation":{"id":2081,"nodeType":"StructuredDocumentation","src":"4949:62:26","text":"@notice Error thrown when the token weight is already set."},"errorSelector":"faf67887","id":2085,"name":"AlreadySetTokenWeight","nameLocation":"5022:21:26","nodeType":"ErrorDefinition","parameters":{"id":2084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2083,"mutability":"mutable","name":"tokenId","nameLocation":"5052:7:26","nodeType":"VariableDeclaration","scope":2085,"src":"5044:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2082,"name":"uint256","nodeType":"ElementaryTypeName","src":"5044:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5043:17:26"},"src":"5016:45:26"},{"body":{"id":2149,"nodeType":"Block","src":"6136:307:26","statements":[{"expression":{"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2117,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"6146:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2118,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2088,"src":"6161:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6146:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2120,"nodeType":"ExpressionStatement","src":"6146:26:26"},{"expression":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2121,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"6182:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2122,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"6199:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6182:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2124,"nodeType":"ExpressionStatement","src":"6182:30:26"},{"expression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2125,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"6222:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2126,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2092,"src":"6234:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6222:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2128,"nodeType":"ExpressionStatement","src":"6222:20:26"},{"expression":{"id":2131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2129,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"6252:11:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2130,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2097,"src":"6266:10:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6252:24:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2132,"nodeType":"ExpressionStatement","src":"6252:24:26"},{"expression":{"id":2135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2133,"name":"MULTIPLIER_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"6286:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2134,"name":"multiplierToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2100,"src":"6305:15:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"src":"6286:34:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2136,"nodeType":"ExpressionStatement","src":"6286:34:26"},{"expression":{"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2137,"name":"MULTIPLIER_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"6330:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2138,"name":"multiplierTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2102,"src":"6352:17:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6330:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2140,"nodeType":"ExpressionStatement","src":"6330:39:26"},{"expression":{"id":2143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2141,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"6379:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2142,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2095,"src":"6387:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"src":"6379:13:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2144,"nodeType":"ExpressionStatement","src":"6379:13:26"},{"expression":{"id":2147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2145,"name":"TOKEN_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"6402:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2146,"name":"tokenMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2104,"src":"6421:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6402:34:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2148,"nodeType":"ExpressionStatement","src":"6402:34:26"}]},"documentation":{"id":2086,"nodeType":"StructuredDocumentation","src":"5067:670:26","text":" @notice Constructor for the ERC1155TokenBurn contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param token The IERC1155Burnable erc1155 contract.\n @param merkleRoot The Merkle root of the leaderboard multiplier claim.\n @param multiplierToken The IERC1155Burnable erc1155 contract for unlocking the token multiplier.\n @param multiplierTokenId The token ID for unlocking the token multiplier.\n @param tokenMultiplier The token multiplier.\n @param forwarderRegistry The forwarder registry contract."},"id":2150,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2110,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2107,"src":"6087:17:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2111,"kind":"baseConstructorSpecifier","modifierName":{"id":2109,"name":"ForwarderRegistryContext","nameLocations":["6062:24:26"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"6062:24:26"},"nodeType":"ModifierInvocation","src":"6062:43:26"},{"arguments":[{"expression":{"id":2113,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6124:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6128:6:26","memberName":"sender","nodeType":"MemberAccess","src":"6124:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2115,"kind":"baseConstructorSpecifier","modifierName":{"id":2112,"name":"ContractOwnership","nameLocations":["6106:17:26"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"6106:17:26"},"nodeType":"ModifierInvocation","src":"6106:29:26"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"initialTime","nameLocation":"5771:11:26","nodeType":"VariableDeclaration","scope":2150,"src":"5763:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2087,"name":"uint256","nodeType":"ElementaryTypeName","src":"5763:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2090,"mutability":"mutable","name":"cycleDuration","nameLocation":"5800:13:26","nodeType":"VariableDeclaration","scope":2150,"src":"5792:21:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"5792:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2092,"mutability":"mutable","name":"maxCycle","nameLocation":"5831:8:26","nodeType":"VariableDeclaration","scope":2150,"src":"5823:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2091,"name":"uint256","nodeType":"ElementaryTypeName","src":"5823:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"token","nameLocation":"5866:5:26","nodeType":"VariableDeclaration","scope":2150,"src":"5849:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":2094,"nodeType":"UserDefinedTypeName","pathNode":{"id":2093,"name":"IERC1155Burnable","nameLocations":["5849:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"5849:16:26"},"referencedDeclaration":948,"src":"5849:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"merkleRoot","nameLocation":"5889:10:26","nodeType":"VariableDeclaration","scope":2150,"src":"5881:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2096,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5881:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2100,"mutability":"mutable","name":"multiplierToken","nameLocation":"5926:15:26","nodeType":"VariableDeclaration","scope":2150,"src":"5909:32:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"},"typeName":{"id":2099,"nodeType":"UserDefinedTypeName","pathNode":{"id":2098,"name":"IERC1155Burnable","nameLocations":["5909:16:26"],"nodeType":"IdentifierPath","referencedDeclaration":948,"src":"5909:16:26"},"referencedDeclaration":948,"src":"5909:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":2102,"mutability":"mutable","name":"multiplierTokenId","nameLocation":"5959:17:26","nodeType":"VariableDeclaration","scope":2150,"src":"5951:25:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2101,"name":"uint256","nodeType":"ElementaryTypeName","src":"5951:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2104,"mutability":"mutable","name":"tokenMultiplier","nameLocation":"5994:15:26","nodeType":"VariableDeclaration","scope":2150,"src":"5986:23:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2103,"name":"uint256","nodeType":"ElementaryTypeName","src":"5986:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2107,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"6038:17:26","nodeType":"VariableDeclaration","scope":2150,"src":"6019:36:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2106,"nodeType":"UserDefinedTypeName","pathNode":{"id":2105,"name":"IForwarderRegistry","nameLocations":["6019:18:26"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"6019:18:26"},"referencedDeclaration":727,"src":"6019:18:26","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"5753:308:26"},"returnParameters":{"id":2116,"nodeType":"ParameterList","parameters":[],"src":"6136:0:26"},"scope":2813,"src":"5742:701:26","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1328],"body":{"id":2163,"nodeType":"Block","src":"6608:65:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2159,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6625:28:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6654:10:26","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"6625:39:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2161,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6625:41:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2158,"id":2162,"nodeType":"Return","src":"6618:48:26"}]},"documentation":{"id":2151,"nodeType":"StructuredDocumentation","src":"6449:44:26","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2164,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"6507:10:26","nodeType":"FunctionDefinition","overrides":{"id":2155,"nodeType":"OverrideSpecifier","overrides":[{"id":2153,"name":"Context","nameLocations":["6551:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"6551:7:26"},{"id":2154,"name":"ForwarderRegistryContextBase","nameLocations":["6560:28:26"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"6560:28:26"}],"src":"6542:47:26"},"parameters":{"id":2152,"nodeType":"ParameterList","parameters":[],"src":"6517:2:26"},"returnParameters":{"id":2158,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2157,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2164,"src":"6599:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2156,"name":"address","nodeType":"ElementaryTypeName","src":"6599:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6598:9:26"},"scope":2813,"src":"6498:175:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1337],"body":{"id":2177,"nodeType":"Block","src":"6843:63:26","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2173,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"6860:28:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6889:8:26","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"6860:37:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6860:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2172,"id":2176,"nodeType":"Return","src":"6853:46:26"}]},"documentation":{"id":2165,"nodeType":"StructuredDocumentation","src":"6679:44:26","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2178,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"6737:8:26","nodeType":"FunctionDefinition","overrides":{"id":2169,"nodeType":"OverrideSpecifier","overrides":[{"id":2167,"name":"Context","nameLocations":["6779:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"6779:7:26"},{"id":2168,"name":"ForwarderRegistryContextBase","nameLocations":["6788:28:26"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"6788:28:26"}],"src":"6770:47:26"},"parameters":{"id":2166,"nodeType":"ParameterList","parameters":[],"src":"6745:2:26"},"returnParameters":{"id":2172,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2171,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2178,"src":"6827:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2170,"name":"bytes","nodeType":"ElementaryTypeName","src":"6827:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6826:16:26"},"scope":2813,"src":"6728:178:26","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2274,"nodeType":"Block","src":"7448:739:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2193,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2164],"referencedDeclaration":2164,"src":"7515:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2194,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7515:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2188,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"7458:24:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7483:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"7458:31:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7458:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2192,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7492:22:26","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"7458:56:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7458:70:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2196,"nodeType":"ExpressionStatement","src":"7458:70:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2201,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2197,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7542:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7549:6:26","memberName":"length","nodeType":"MemberAccess","src":"7542:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2199,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"7559:12:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7572:6:26","memberName":"length","nodeType":"MemberAccess","src":"7559:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:36:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2206,"nodeType":"IfStatement","src":"7538:94:26","trueBody":{"id":2205,"nodeType":"Block","src":"7580:52:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2202,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"7601:18:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7601:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2204,"nodeType":"RevertStatement","src":"7594:27:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2207,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7646:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7653:6:26","memberName":"length","nodeType":"MemberAccess","src":"7646:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7663:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7646:18:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2215,"nodeType":"IfStatement","src":"7642:72:26","trueBody":{"id":2214,"nodeType":"Block","src":"7666:48:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2211,"name":"IncorrectTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"7687:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7687:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2213,"nodeType":"RevertStatement","src":"7680:23:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2216,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"7727:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7733:6:26","memberName":"length","nodeType":"MemberAccess","src":"7727:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2218,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7742:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7727:16:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2224,"nodeType":"IfStatement","src":"7723:71:26","trueBody":{"id":2223,"nodeType":"Block","src":"7745:49:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2220,"name":"AlreadySetTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2080,"src":"7766:15:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7766:17:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2222,"nodeType":"RevertStatement","src":"7759:24:26"}]}},{"body":{"id":2264,"nodeType":"Block","src":"7898:223:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2236,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7916:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2238,"indexExpression":{"id":2237,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"7923:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7916:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2239,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7928:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2243,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2240,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"7935:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7939:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7935:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7928:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7916:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2249,"nodeType":"IfStatement","src":"7912:87:26","trueBody":{"id":2248,"nodeType":"Block","src":"7943:56:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2245,"name":"IncorrectTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"7968:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7968:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2247,"nodeType":"RevertStatement","src":"7961:23:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2250,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8016:12:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2252,"indexExpression":{"id":2251,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"8029:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8016:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2253,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8034:12:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2257,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2254,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"8047:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8051:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8047:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8034:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8016:37:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2263,"nodeType":"IfStatement","src":"8012:99:26","trueBody":{"id":2262,"nodeType":"Block","src":"8055:56:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2259,"name":"IncorrectTiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"8080:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8080:16:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2261,"nodeType":"RevertStatement","src":"8073:23:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"7874:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2230,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"7878:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7885:6:26","memberName":"length","nodeType":"MemberAccess","src":"7878:13:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7874:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2265,"initializationExpression":{"assignments":[2226],"declarations":[{"constant":false,"id":2226,"mutability":"mutable","name":"i","nameLocation":"7867:1:26","nodeType":"VariableDeclaration","scope":2265,"src":"7859:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2225,"name":"uint256","nodeType":"ElementaryTypeName","src":"7859:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2228,"initialValue":{"hexValue":"31","id":2227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7871:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"7859:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2234,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"7893:3:26","subExpression":{"id":2233,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"7893:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2235,"nodeType":"ExpressionStatement","src":"7893:3:26"},"nodeType":"ForStatement","src":"7854:267:26"},{"expression":{"id":2268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2266,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"8130:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2267,"name":"_tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2182,"src":"8138:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"src":"8130:14:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2269,"nodeType":"ExpressionStatement","src":"8130:14:26"},{"expression":{"id":2272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"8154:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2271,"name":"_tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2185,"src":"8168:12:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"src":"8154:26:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2273,"nodeType":"ExpressionStatement","src":"8154:26:26"}]},"documentation":{"id":2179,"nodeType":"StructuredDocumentation","src":"6912:444:26","text":" @notice Set the tiers and rewards.\n @param _tiers The list of tiers.\n @param _tierRewards The list of rewards for each tier.\n @dev Throws if the lengths of tiers and rewards are inconsistent.\n @dev Throws if the tiers are empty.\n @dev Throws if the tiers are already set.\n @dev Throws if the tiers are not in increasing order.\n @dev Throws if the rewards are not in increasing order."},"functionSelector":"1b8ebc3c","id":2275,"implemented":true,"kind":"function","modifiers":[],"name":"setTiers","nameLocation":"7370:8:26","nodeType":"FunctionDefinition","parameters":{"id":2186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2182,"mutability":"mutable","name":"_tiers","nameLocation":"7398:6:26","nodeType":"VariableDeclaration","scope":2275,"src":"7379:25:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2180,"name":"uint256","nodeType":"ElementaryTypeName","src":"7379:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2181,"nodeType":"ArrayTypeName","src":"7379:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2185,"mutability":"mutable","name":"_tierRewards","nameLocation":"7425:12:26","nodeType":"VariableDeclaration","scope":2275,"src":"7406:31:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2183,"name":"uint256","nodeType":"ElementaryTypeName","src":"7406:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2184,"nodeType":"ArrayTypeName","src":"7406:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"7378:60:26"},"returnParameters":{"id":2187,"nodeType":"ParameterList","parameters":[],"src":"7448:0:26"},"scope":2813,"src":"7361:826:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2338,"nodeType":"Block","src":"8499:408:26","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2290,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2164],"referencedDeclaration":2164,"src":"8566:10:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8566:12:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2285,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"8509:24:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8534:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"8509:31:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8509:33:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":2289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8543:22:26","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"8509:56:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8509:70:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2293,"nodeType":"ExpressionStatement","src":"8509:70:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2294,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"8593:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8602:6:26","memberName":"length","nodeType":"MemberAccess","src":"8593:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2296,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"8612:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8620:6:26","memberName":"length","nodeType":"MemberAccess","src":"8612:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8593:33:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2303,"nodeType":"IfStatement","src":"8589:91:26","trueBody":{"id":2302,"nodeType":"Block","src":"8628:52:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2299,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2046,"src":"8649:18:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8649:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2301,"nodeType":"RevertStatement","src":"8642:27:26"}]}},{"body":{"id":2336,"nodeType":"Block","src":"8736:165:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2315,"name":"tokenWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"8754:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2317,"indexExpression":{"id":2316,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8767:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8754:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8772:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8754:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2327,"nodeType":"IfStatement","src":"8750:99:26","trueBody":{"id":2326,"nodeType":"Block","src":"8775:74:26","statements":[{"errorCall":{"arguments":[{"baseExpression":{"id":2321,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"8822:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2323,"indexExpression":{"id":2322,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8831:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8822:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2320,"name":"AlreadySetTokenWeight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2085,"src":"8800:21:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2324,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8800:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2325,"nodeType":"RevertStatement","src":"8793:41:26"}]}},{"expression":{"id":2334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2328,"name":"tokenWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"8862:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2330,"indexExpression":{"id":2329,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8875:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8862:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":2331,"name":"weights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2282,"src":"8880:7:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2333,"indexExpression":{"id":2332,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8888:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8880:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8862:28:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2335,"nodeType":"ExpressionStatement","src":"8862:28:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2308,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8710:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2309,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"8714:8:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8723:6:26","memberName":"length","nodeType":"MemberAccess","src":"8714:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8710:19:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2337,"initializationExpression":{"assignments":[2305],"declarations":[{"constant":false,"id":2305,"mutability":"mutable","name":"i","nameLocation":"8703:1:26","nodeType":"VariableDeclaration","scope":2337,"src":"8695:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2304,"name":"uint256","nodeType":"ElementaryTypeName","src":"8695:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2307,"initialValue":{"hexValue":"30","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8707:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8695:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8731:3:26","subExpression":{"id":2312,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2305,"src":"8731:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2314,"nodeType":"ExpressionStatement","src":"8731:3:26"},"nodeType":"ForStatement","src":"8690:211:26"}]},"documentation":{"id":2276,"nodeType":"StructuredDocumentation","src":"8193:214:26","text":" @notice Set the token weights.\n @param tokenIds The token IDs.\n @param weights The weights for each token.\n @dev Throws if the lengths of token IDs and weights are inconsistent."},"functionSelector":"ad740fa0","id":2339,"implemented":true,"kind":"function","modifiers":[],"name":"setTokensWeight","nameLocation":"8421:15:26","nodeType":"FunctionDefinition","parameters":{"id":2283,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2279,"mutability":"mutable","name":"tokenIds","nameLocation":"8454:8:26","nodeType":"VariableDeclaration","scope":2339,"src":"8437:25:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2277,"name":"uint256","nodeType":"ElementaryTypeName","src":"8437:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2278,"nodeType":"ArrayTypeName","src":"8437:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2282,"mutability":"mutable","name":"weights","nameLocation":"8481:7:26","nodeType":"VariableDeclaration","scope":2339,"src":"8464:24:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2280,"name":"uint256","nodeType":"ElementaryTypeName","src":"8464:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2281,"nodeType":"ArrayTypeName","src":"8464:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"8436:53:26"},"returnParameters":{"id":2284,"nodeType":"ParameterList","parameters":[],"src":"8499:0:26"},"scope":2813,"src":"8412:495:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2375,"nodeType":"Block","src":"9153:327:26","statements":[{"assignments":[2348],"declarations":[{"constant":false,"id":2348,"mutability":"mutable","name":"leaderboardMultiplier","nameLocation":"9171:21:26","nodeType":"VariableDeclaration","scope":2375,"src":"9163:29:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2347,"name":"uint256","nodeType":"ElementaryTypeName","src":"9163:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2352,"initialValue":{"baseExpression":{"id":2349,"name":"leaderboardMultiplers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"9195:21:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2351,"indexExpression":{"id":2350,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"9217:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9195:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9163:61:26"},{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2353,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"9234:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2356,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2354,"name":"leaderboardMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"9247:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2355,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9247:26:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2358,"name":"leaderboardMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2348,"src":"9280:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9247:54:26","trueExpression":{"hexValue":"31","id":2357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9234:67:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"9234:67:26"},{"assignments":[2363],"declarations":[{"constant":false,"id":2363,"mutability":"mutable","name":"isTokenMultiplierUnlocked","nameLocation":"9316:25:26","nodeType":"VariableDeclaration","scope":2375,"src":"9311:30:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2362,"name":"bool","nodeType":"ElementaryTypeName","src":"9311:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2367,"initialValue":{"baseExpression":{"id":2364,"name":"tokenMultiplerUnlockStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"9344:26:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2366,"indexExpression":{"id":2365,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2342,"src":"9371:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9344:34:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"9311:67:26"},{"condition":{"id":2368,"name":"isTokenMultiplierUnlocked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2363,"src":"9392:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2374,"nodeType":"IfStatement","src":"9388:86:26","trueBody":{"id":2373,"nodeType":"Block","src":"9419:55:26","statements":[{"expression":{"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2369,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2345,"src":"9433:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":2370,"name":"TOKEN_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"9447:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9433:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2372,"nodeType":"ExpressionStatement","src":"9433:30:26"}]}}]},"documentation":{"id":2340,"nodeType":"StructuredDocumentation","src":"8913:155:26","text":" @notice Get the multiplier for the user.\n @param wallet The wallet address.\n @return multiplier The multiplier for the user."},"functionSelector":"a9d637e1","id":2376,"implemented":true,"kind":"function","modifiers":[],"name":"getMultiplier","nameLocation":"9082:13:26","nodeType":"FunctionDefinition","parameters":{"id":2343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2342,"mutability":"mutable","name":"wallet","nameLocation":"9104:6:26","nodeType":"VariableDeclaration","scope":2376,"src":"9096:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"9096:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"9095:16:26"},"returnParameters":{"id":2346,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2345,"mutability":"mutable","name":"multiplier","nameLocation":"9141:10:26","nodeType":"VariableDeclaration","scope":2376,"src":"9133:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2344,"name":"uint256","nodeType":"ElementaryTypeName","src":"9133:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9132:20:26"},"scope":2813,"src":"9073:407:26","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2390,"nodeType":"Block","src":"9634:73:26","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2385,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2382,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"9652:5:26","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9658:9:26","memberName":"timestamp","nodeType":"MemberAccess","src":"9652:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2384,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1944,"src":"9670:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9652:30:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2386,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9651:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2387,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"9686:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9651:49:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2381,"id":2389,"nodeType":"Return","src":"9644:56:26"}]},"documentation":{"id":2377,"nodeType":"StructuredDocumentation","src":"9486:89:26","text":" @notice Get the current cycle.\n @return cycle The current cycle."},"functionSelector":"bab2f552","id":2391,"implemented":true,"kind":"function","modifiers":[],"name":"currentCycle","nameLocation":"9589:12:26","nodeType":"FunctionDefinition","parameters":{"id":2378,"nodeType":"ParameterList","parameters":[],"src":"9601:2:26"},"returnParameters":{"id":2381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2391,"src":"9625:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2379,"name":"uint256","nodeType":"ElementaryTypeName","src":"9625:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9624:9:26"},"scope":2813,"src":"9580:127:26","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2459,"nodeType":"Block","src":"9973:404:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2399,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"9987:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2400,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"9995:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9995:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9987:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2405,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2403,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"10013:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2404,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"10021:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10013:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9987:43:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2412,"nodeType":"IfStatement","src":"9983:100:26","trueBody":{"id":2411,"nodeType":"Block","src":"10032:51:26","statements":[{"errorCall":{"arguments":[{"id":2408,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"10066:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2407,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"10053:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10053:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2410,"nodeType":"RevertStatement","src":"10046:26:26"}]}},{"assignments":[2414],"declarations":[{"constant":false,"id":2414,"mutability":"mutable","name":"prevTotalAsh","nameLocation":"10101:12:26","nodeType":"VariableDeclaration","scope":2459,"src":"10093:20:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2413,"name":"uint256","nodeType":"ElementaryTypeName","src":"10093:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2425,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2415,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"10116:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2416,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10125:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10116:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":2419,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"10133:15:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2423,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2420,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2394,"src":"10149:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10157:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10149:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10133:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"10116:43:26","trueExpression":{"hexValue":"30","id":2418,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10129:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10093:66:26"},{"body":{"id":2450,"nodeType":"Block","src":"10214:111:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2437,"name":"prevTotalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2414,"src":"10232:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"baseExpression":{"id":2438,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"10247:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2440,"indexExpression":{"id":2439,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"10253:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10247:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10232:23:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2449,"nodeType":"IfStatement","src":"10228:87:26","trueBody":{"id":2448,"nodeType":"Block","src":"10257:58:26","statements":[{"expression":{"baseExpression":{"id":2442,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"10282:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2446,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"10294:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10298:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10294:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10282:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2398,"id":2447,"nodeType":"Return","src":"10275:25:26"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2430,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"10190:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"expression":{"id":2431,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"10195:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10201:6:26","memberName":"length","nodeType":"MemberAccess","src":"10195:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10190:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2451,"initializationExpression":{"assignments":[2427],"declarations":[{"constant":false,"id":2427,"mutability":"mutable","name":"i","nameLocation":"10183:1:26","nodeType":"VariableDeclaration","scope":2451,"src":"10175:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2426,"name":"uint256","nodeType":"ElementaryTypeName","src":"10175:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2429,"initialValue":{"hexValue":"31","id":2428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10187:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"VariableDeclarationStatement","src":"10175:13:26"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"10209:3:26","subExpression":{"id":2434,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"10209:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2436,"nodeType":"ExpressionStatement","src":"10209:3:26"},"nodeType":"ForStatement","src":"10170:155:26"},{"expression":{"baseExpression":{"id":2452,"name":"tierRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"10341:11:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2457,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2453,"name":"tiers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"10353:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage","typeString":"uint256[] storage ref"}},"id":2454,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10359:6:26","memberName":"length","nodeType":"MemberAccess","src":"10353:12:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10368:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10353:16:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10341:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2398,"id":2458,"nodeType":"Return","src":"10334:36:26"}]},"documentation":{"id":2392,"nodeType":"StructuredDocumentation","src":"9713:186:26","text":" @notice Get the reward for the cycle.\n @param cycle The cycle number.\n @return reward The reward for the cycle.\n @dev Throws if the cycle is invalid."},"functionSelector":"04585ac7","id":2460,"implemented":true,"kind":"function","modifiers":[],"name":"getCycleReward","nameLocation":"9913:14:26","nodeType":"FunctionDefinition","parameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"cycle","nameLocation":"9936:5:26","nodeType":"VariableDeclaration","scope":2460,"src":"9928:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2393,"name":"uint256","nodeType":"ElementaryTypeName","src":"9928:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9927:15:26"},"returnParameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2397,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2460,"src":"9964:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"9964:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9963:9:26"},"scope":2813,"src":"9904:473:26","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":2507,"nodeType":"Block","src":"10705:291:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2470,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10719:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":2471,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"10727:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10727:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10719:22:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2474,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10745:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2475,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"10753:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10745:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"10719:43:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2483,"nodeType":"IfStatement","src":"10715:100:26","trueBody":{"id":2482,"nodeType":"Block","src":"10764:51:26","statements":[{"errorCall":{"arguments":[{"id":2479,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10798:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2478,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"10785:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10785:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2481,"nodeType":"RevertStatement","src":"10778:26:26"}]}},{"assignments":[2485],"declarations":[{"constant":false,"id":2485,"mutability":"mutable","name":"cycleReward","nameLocation":"10832:11:26","nodeType":"VariableDeclaration","scope":2507,"src":"10824:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2484,"name":"uint256","nodeType":"ElementaryTypeName","src":"10824:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2489,"initialValue":{"arguments":[{"id":2487,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10861:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2486,"name":"getCycleReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2460,"src":"10846:14:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) view returns (uint256)"}},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10846:21:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10824:43:26"},{"assignments":[2491],"declarations":[{"constant":false,"id":2491,"mutability":"mutable","name":"userAsh","nameLocation":"10885:7:26","nodeType":"VariableDeclaration","scope":2507,"src":"10877:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2490,"name":"uint256","nodeType":"ElementaryTypeName","src":"10877:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2497,"initialValue":{"baseExpression":{"baseExpression":{"id":2492,"name":"userAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"10895:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2494,"indexExpression":{"id":2493,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10910:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10895:21:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2496,"indexExpression":{"id":2495,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2465,"src":"10917:6:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10895:29:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10877:47:26"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2498,"name":"userAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"10942:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2499,"name":"cycleReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2485,"src":"10952:11:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10942:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2501,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10941:23:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"baseExpression":{"id":2502,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"10967:15:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2504,"indexExpression":{"id":2503,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"10983:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10967:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10941:48:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2469,"id":2506,"nodeType":"Return","src":"10934:55:26"}]},"documentation":{"id":2461,"nodeType":"StructuredDocumentation","src":"10383:231:26","text":" @notice Get the user reward for the cycle.\n @param cycle The cycle number.\n @param wallet The wallet address.\n @return reward The reward for the user.\n @dev Throws if the cycle is invalid."},"functionSelector":"2099920e","id":2508,"implemented":true,"kind":"function","modifiers":[],"name":"getUserReward","nameLocation":"10628:13:26","nodeType":"FunctionDefinition","parameters":{"id":2466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2463,"mutability":"mutable","name":"cycle","nameLocation":"10650:5:26","nodeType":"VariableDeclaration","scope":2508,"src":"10642:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"10642:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2465,"mutability":"mutable","name":"wallet","nameLocation":"10665:6:26","nodeType":"VariableDeclaration","scope":2508,"src":"10657:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2464,"name":"address","nodeType":"ElementaryTypeName","src":"10657:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"10641:31:26"},"returnParameters":{"id":2469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2468,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2508,"src":"10696:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2467,"name":"uint256","nodeType":"ElementaryTypeName","src":"10696:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10695:9:26"},"scope":2813,"src":"10619:377:26","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":2566,"nodeType":"Block","src":"11444:440:26","statements":[{"assignments":[2520],"declarations":[{"constant":false,"id":2520,"mutability":"mutable","name":"leaf","nameLocation":"11462:4:26","nodeType":"VariableDeclaration","scope":2566,"src":"11454:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2519,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11454:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":2528,"initialValue":{"arguments":[{"arguments":[{"id":2524,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11496:9:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2525,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"11507:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2522,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11479:3:26","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2523,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11483:12:26","memberName":"encodePacked","nodeType":"MemberAccess","src":"11479:16:26","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11479:39:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2521,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11469:9:26","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11469:50:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11454:65:26"},{"condition":{"baseExpression":{"id":2529,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"11533:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2531,"indexExpression":{"id":2530,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"11545:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11533:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2537,"nodeType":"IfStatement","src":"11529:101:26","trueBody":{"id":2536,"nodeType":"Block","src":"11552:78:26","statements":[{"errorCall":{"arguments":[{"id":2533,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11609:9:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2532,"name":"AlreadyClaimedLeaderboardMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2069,"src":"11573:35:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11573:46:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2535,"nodeType":"RevertStatement","src":"11566:53:26"}]}},{"condition":{"id":2543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11643:32:26","subExpression":{"arguments":[{"id":2540,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1960,"src":"11657:11:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2541,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"11670:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2538,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"11644:5:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":2539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11650:6:26","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1422,"src":"11644:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":2542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11644:31:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2548,"nodeType":"IfStatement","src":"11639:84:26","trueBody":{"id":2547,"nodeType":"Block","src":"11677:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2544,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2077,"src":"11698:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11698:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2546,"nodeType":"RevertStatement","src":"11691:21:26"}]}},{"expression":{"id":2553,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2549,"name":"leaderboardMultiplers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"11733:21:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2551,"indexExpression":{"id":2550,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11755:9:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11733:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2552,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"11768:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11733:45:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ExpressionStatement","src":"11733:45:26"},{"expression":{"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2555,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"11788:11:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":2557,"indexExpression":{"id":2556,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"11800:4:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11788:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2558,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"11808:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"11788:24:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2560,"nodeType":"ExpressionStatement","src":"11788:24:26"},{"eventCall":{"arguments":[{"id":2562,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"11855:9:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2563,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2516,"src":"11866:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2561,"name":"ClaimLeaderboardMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2029,"src":"11828:26:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11828:49:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2565,"nodeType":"EmitStatement","src":"11823:54:26"}]},"documentation":{"id":2509,"nodeType":"StructuredDocumentation","src":"11002:327:26","text":" @notice Claims the leaderboard multiplier\n @param proof The Merkle proof for the claim.\n @param recipient The recipient of the payout.\n @param multiplier The multiplier for the recipient.\n @dev Throws if the payout has already been claimed.\n @dev Throws if the proof is invalid."},"functionSelector":"496baa47","id":2567,"implemented":true,"kind":"function","modifiers":[],"name":"claimLeaderboardMultiplier","nameLocation":"11343:26:26","nodeType":"FunctionDefinition","parameters":{"id":2517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2512,"mutability":"mutable","name":"proof","nameLocation":"11389:5:26","nodeType":"VariableDeclaration","scope":2567,"src":"11370:24:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":2510,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11370:7:26","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2511,"nodeType":"ArrayTypeName","src":"11370:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":2514,"mutability":"mutable","name":"recipient","nameLocation":"11404:9:26","nodeType":"VariableDeclaration","scope":2567,"src":"11396:17:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2513,"name":"address","nodeType":"ElementaryTypeName","src":"11396:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2516,"mutability":"mutable","name":"multiplier","nameLocation":"11423:10:26","nodeType":"VariableDeclaration","scope":2567,"src":"11415:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2515,"name":"uint256","nodeType":"ElementaryTypeName","src":"11415:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11369:65:26"},"returnParameters":{"id":2518,"nodeType":"ParameterList","parameters":[],"src":"11444:0:26"},"scope":2813,"src":"11334:550:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[967],"body":{"id":2642,"nodeType":"Block","src":"12468:569:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2584,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12482:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12486:6:26","memberName":"sender","nodeType":"MemberAccess","src":"12482:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2588,"name":"MULTIPLIER_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"12504:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2587,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12496:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2586,"name":"address","nodeType":"ElementaryTypeName","src":"12496:7:26","typeDescriptions":{}}},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12496:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12482:39:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2595,"nodeType":"IfStatement","src":"12478:91:26","trueBody":{"id":2594,"nodeType":"Block","src":"12523:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2591,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"12544:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12544:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2593,"nodeType":"RevertStatement","src":"12537:21:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2596,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"12582:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2597,"name":"MULTIPLIER_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"12588:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12582:25:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2606,"nodeType":"IfStatement","src":"12578:93:26","trueBody":{"id":2605,"nodeType":"Block","src":"12609:62:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2600,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"12645:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12649:6:26","memberName":"sender","nodeType":"MemberAccess","src":"12645:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2602,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"12657:2:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2599,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"12630:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2603,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12630:30:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2604,"nodeType":"RevertStatement","src":"12623:37:26"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2607,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"12685:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":2608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12694:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12685:10:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2616,"nodeType":"IfStatement","src":"12681:76:26","trueBody":{"id":2615,"nodeType":"Block","src":"12697:60:26","statements":[{"errorCall":{"arguments":[{"id":2611,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2576,"src":"12737:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12744:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":2610,"name":"InvalidTokenAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2064,"src":"12718:18:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12718:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2614,"nodeType":"RevertStatement","src":"12711:35:26"}]}},{"condition":{"baseExpression":{"id":2617,"name":"tokenMultiplerUnlockStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"12770:26:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2619,"indexExpression":{"id":2618,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"12797:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12770:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2625,"nodeType":"IfStatement","src":"12766:106:26","trueBody":{"id":2624,"nodeType":"Block","src":"12804:68:26","statements":[{"errorCall":{"arguments":[{"id":2621,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"12856:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2620,"name":"AlreadyUnlockedTokenMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2074,"src":"12825:30:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12825:36:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2623,"nodeType":"RevertStatement","src":"12818:43:26"}]}},{"expression":{"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2626,"name":"tokenMultiplerUnlockStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1998,"src":"12882:26:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":2628,"indexExpression":{"id":2627,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"12909:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12882:32:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"12917:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"12882:39:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2631,"nodeType":"ExpressionStatement","src":"12882:39:26"},{"eventCall":{"arguments":[{"id":2633,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2572,"src":"12959:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":2634,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"12965:5:26","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12971:9:26","memberName":"timestamp","nodeType":"MemberAccess","src":"12965:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2632,"name":"UnlockTokenMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2036,"src":"12937:21:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":2636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12937:44:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2637,"nodeType":"EmitStatement","src":"12932:49:26"},{"expression":{"expression":{"expression":{"id":2638,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12999:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_AnichessOrbsBurnPool_$2813","typeString":"contract AnichessOrbsBurnPool"}},"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13004:17:26","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":2643,"src":"12999:22:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"13022:8:26","memberName":"selector","nodeType":"MemberAccess","src":"12999:31:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2583,"id":2641,"nodeType":"Return","src":"12992:38:26"}]},"documentation":{"id":2568,"nodeType":"StructuredDocumentation","src":"11890:445:26","text":" @notice Unlock the token multiplier by burning the multiplier token.\n @param from The wallet address.\n @param id The token ID.\n @param value The token value.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid.\n @dev Throws if the token multiplier is already unlocked."},"functionSelector":"f23a6e61","id":2643,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"12349:17:26","nodeType":"FunctionDefinition","overrides":{"id":2580,"nodeType":"OverrideSpecifier","overrides":[],"src":"12442:8:26"},"parameters":{"id":2579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2570,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2643,"src":"12367:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2569,"name":"address","nodeType":"ElementaryTypeName","src":"12367:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2572,"mutability":"mutable","name":"from","nameLocation":"12384:4:26","nodeType":"VariableDeclaration","scope":2643,"src":"12376:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2571,"name":"address","nodeType":"ElementaryTypeName","src":"12376:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2574,"mutability":"mutable","name":"id","nameLocation":"12398:2:26","nodeType":"VariableDeclaration","scope":2643,"src":"12390:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"12390:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2576,"mutability":"mutable","name":"value","nameLocation":"12410:5:26","nodeType":"VariableDeclaration","scope":2643,"src":"12402:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2575,"name":"uint256","nodeType":"ElementaryTypeName","src":"12402:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2578,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2643,"src":"12417:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2577,"name":"bytes","nodeType":"ElementaryTypeName","src":"12417:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12366:66:26"},"returnParameters":{"id":2583,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2582,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2643,"src":"12460:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2581,"name":"bytes4","nodeType":"ElementaryTypeName","src":"12460:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"12459:8:26"},"scope":2813,"src":"12340:697:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[985],"body":{"id":2811,"nodeType":"Block","src":"13627:1237:26","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2662,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13641:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13645:6:26","memberName":"sender","nodeType":"MemberAccess","src":"13641:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2666,"name":"TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"13663:5:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2665,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13655:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2664,"name":"address","nodeType":"ElementaryTypeName","src":"13655:7:26","typeDescriptions":{}}},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13655:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13641:28:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2673,"nodeType":"IfStatement","src":"13637:80:26","trueBody":{"id":2672,"nodeType":"Block","src":"13671:46:26","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2669,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"13692:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13692:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2671,"nodeType":"RevertStatement","src":"13685:21:26"}]}},{"assignments":[2675],"declarations":[{"constant":false,"id":2675,"mutability":"mutable","name":"cycle","nameLocation":"13735:5:26","nodeType":"VariableDeclaration","scope":2811,"src":"13727:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2674,"name":"uint256","nodeType":"ElementaryTypeName","src":"13727:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2678,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2676,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"13743:12:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13743:14:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13727:30:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2679,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"13771:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2680,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"13779:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13771:17:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2687,"nodeType":"IfStatement","src":"13767:74:26","trueBody":{"id":2686,"nodeType":"Block","src":"13790:51:26","statements":[{"errorCall":{"arguments":[{"id":2683,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"13824:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2682,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"13811:12:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13811:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2685,"nodeType":"RevertStatement","src":"13804:26:26"}]}},{"assignments":[2689],"declarations":[{"constant":false,"id":2689,"mutability":"mutable","name":"totalAsh","nameLocation":"13859:8:26","nodeType":"VariableDeclaration","scope":2811,"src":"13851:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2688,"name":"uint256","nodeType":"ElementaryTypeName","src":"13851:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2691,"initialValue":{"hexValue":"30","id":2690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13870:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13851:20:26"},{"body":{"id":2733,"nodeType":"Block","src":"13956:212:26","statements":[{"assignments":[2704],"declarations":[{"constant":false,"id":2704,"mutability":"mutable","name":"weight","nameLocation":"13978:6:26","nodeType":"VariableDeclaration","scope":2733,"src":"13970:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"13970:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2710,"initialValue":{"baseExpression":{"id":2705,"name":"tokenWeights","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2003,"src":"13987:12:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2709,"indexExpression":{"baseExpression":{"id":2706,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"14000:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2708,"indexExpression":{"id":2707,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"14004:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14000:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13987:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13970:37:26"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2711,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"14025:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14035:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14025:11:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2723,"nodeType":"IfStatement","src":"14021:91:26","trueBody":{"id":2722,"nodeType":"Block","src":"14038:74:26","statements":[{"errorCall":{"arguments":[{"expression":{"id":2715,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14078:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14082:6:26","memberName":"sender","nodeType":"MemberAccess","src":"14078:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2717,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"14090:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2719,"indexExpression":{"id":2718,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"14094:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14090:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2714,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2043,"src":"14063:14:26","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14063:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2721,"nodeType":"RevertStatement","src":"14056:41:26"}]}},{"expression":{"id":2731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2724,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14125:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":2725,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"14138:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2727,"indexExpression":{"id":2726,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"14145:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14138:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2728,"name":"weight","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"14150:6:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14138:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"14137:20:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14125:32:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2732,"nodeType":"ExpressionStatement","src":"14125:32:26"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2696,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"13935:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2697,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"13939:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13943:6:26","memberName":"length","nodeType":"MemberAccess","src":"13939:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13935:14:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2734,"initializationExpression":{"assignments":[2693],"declarations":[{"constant":false,"id":2693,"mutability":"mutable","name":"i","nameLocation":"13928:1:26","nodeType":"VariableDeclaration","scope":2734,"src":"13920:9:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2692,"name":"uint256","nodeType":"ElementaryTypeName","src":"13920:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2695,"initialValue":{"hexValue":"30","id":2694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13932:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13920:13:26"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13951:3:26","subExpression":{"id":2700,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2693,"src":"13951:1:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2702,"nodeType":"ExpressionStatement","src":"13951:3:26"},"nodeType":"ForStatement","src":"13915:253:26"},{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"multiplierTokens","nameLocation":"14225:16:26","nodeType":"VariableDeclaration","scope":2811,"src":"14208:33:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2737,"name":"address","nodeType":"ElementaryTypeName","src":"14208:7:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2738,"nodeType":"ArrayTypeName","src":"14208:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"}],"id":2740,"nodeType":"VariableDeclarationStatement","src":"14208:33:26"},{"expression":{"id":2748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2741,"name":"multiplierTokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"14251:16:26","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2743,"indexExpression":{"hexValue":"30","id":2742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14268:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14251:19:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2746,"name":"MULTIPLIER_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1954,"src":"14281:16:26","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}],"id":2745,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14273:7:26","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2744,"name":"address","nodeType":"ElementaryTypeName","src":"14273:7:26","typeDescriptions":{}}},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14273:25:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14251:47:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2749,"nodeType":"ExpressionStatement","src":"14251:47:26"},{"assignments":[2754],"declarations":[{"constant":false,"id":2754,"mutability":"mutable","name":"multiplierTokenIds","nameLocation":"14325:18:26","nodeType":"VariableDeclaration","scope":2811,"src":"14308:35:26","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2752,"name":"uint256","nodeType":"ElementaryTypeName","src":"14308:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2753,"nodeType":"ArrayTypeName","src":"14308:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"id":2755,"nodeType":"VariableDeclarationStatement","src":"14308:35:26"},{"expression":{"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2756,"name":"multiplierTokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"14353:18:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2758,"indexExpression":{"hexValue":"30","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14372:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14353:21:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2759,"name":"MULTIPLIER_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1957,"src":"14377:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14353:43:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2761,"nodeType":"ExpressionStatement","src":"14353:43:26"},{"assignments":[2763],"declarations":[{"constant":false,"id":2763,"mutability":"mutable","name":"multiplier","nameLocation":"14414:10:26","nodeType":"VariableDeclaration","scope":2811,"src":"14406:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2762,"name":"uint256","nodeType":"ElementaryTypeName","src":"14406:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2767,"initialValue":{"arguments":[{"id":2765,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"14441:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2764,"name":"getMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2376,"src":"14427:13:26","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14427:19:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14406:40:26"},{"expression":{"id":2770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2768,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14456:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":2769,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"14468:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14456:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2771,"nodeType":"ExpressionStatement","src":"14456:22:26"},{"expression":{"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2772,"name":"userAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1983,"src":"14523:14:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":2775,"indexExpression":{"id":2773,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"14538:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14523:21:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2776,"indexExpression":{"id":2774,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"14545:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14523:27:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2777,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14554:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14523:39:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2779,"nodeType":"ExpressionStatement","src":"14523:39:26"},{"expression":{"id":2784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2780,"name":"totalAshByCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1976,"src":"14606:15:26","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2782,"indexExpression":{"id":2781,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"14622:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14606:22:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2783,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14632:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14606:34:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2785,"nodeType":"ExpressionStatement","src":"14606:34:26"},{"expression":{"arguments":[{"id":2791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"14694:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2792,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"14700:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2793,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"14705:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":2787,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"14668:3:26","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14672:6:26","memberName":"sender","nodeType":"MemberAccess","src":"14668:10:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2786,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":948,"src":"14651:16:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$948_$","typeString":"type(contract IERC1155Burnable)"}},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14651:28:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$948","typeString":"contract IERC1155Burnable"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14680:13:26","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":947,"src":"14651:42:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14651:61:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"ExpressionStatement","src":"14651:61:26"},{"eventCall":{"arguments":[{"id":2797,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2648,"src":"14739:4:26","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2798,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2675,"src":"14745:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":2799,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"14752:5:26","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14758:9:26","memberName":"timestamp","nodeType":"MemberAccess","src":"14752:15:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2801,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"14769:3:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2802,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"14774:6:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":2803,"name":"totalAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2689,"src":"14782:8:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2804,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"14792:10:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2796,"name":"TokensBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2022,"src":"14727:11:26","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256[] memory,uint256[] memory,uint256,uint256)"}},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14727:76:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2806,"nodeType":"EmitStatement","src":"14722:81:26"},{"expression":{"expression":{"expression":{"id":2807,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"14821:4:26","typeDescriptions":{"typeIdentifier":"t_contract$_AnichessOrbsBurnPool_$2813","typeString":"contract AnichessOrbsBurnPool"}},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14826:22:26","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":2812,"src":"14821:27:26","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":2809,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14849:8:26","memberName":"selector","nodeType":"MemberAccess","src":"14821:36:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2661,"id":2810,"nodeType":"Return","src":"14814:43:26"}]},"documentation":{"id":2644,"nodeType":"StructuredDocumentation","src":"13043:376:26","text":" @notice Burn the tokens and calculate the ash.\n @param from The wallet address.\n @param ids The token IDs to burn.\n @param values The amount of tokens to burn.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the cycle is invalid."},"functionSelector":"bc197c81","id":2812,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"13433:22:26","nodeType":"FunctionDefinition","overrides":{"id":2658,"nodeType":"OverrideSpecifier","overrides":[],"src":"13601:8:26"},"parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2646,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2812,"src":"13465:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2645,"name":"address","nodeType":"ElementaryTypeName","src":"13465:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2648,"mutability":"mutable","name":"from","nameLocation":"13490:4:26","nodeType":"VariableDeclaration","scope":2812,"src":"13482:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2647,"name":"address","nodeType":"ElementaryTypeName","src":"13482:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"ids","nameLocation":"13523:3:26","nodeType":"VariableDeclaration","scope":2812,"src":"13504:22:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2649,"name":"uint256","nodeType":"ElementaryTypeName","src":"13504:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2650,"nodeType":"ArrayTypeName","src":"13504:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2654,"mutability":"mutable","name":"values","nameLocation":"13555:6:26","nodeType":"VariableDeclaration","scope":2812,"src":"13536:25:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2652,"name":"uint256","nodeType":"ElementaryTypeName","src":"13536:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2653,"nodeType":"ArrayTypeName","src":"13536:9:26","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2812,"src":"13571:14:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2655,"name":"bytes","nodeType":"ElementaryTypeName","src":"13571:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13455:136:26"},"returnParameters":{"id":2661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2812,"src":"13619:6:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2659,"name":"bytes4","nodeType":"ElementaryTypeName","src":"13619:6:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"13618:8:26"},"scope":2813,"src":"13424:1440:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2814,"src":"1370:13496:26","usedErrors":[94,419,2043,2046,2049,2052,2057,2064,2069,2074,2077,2080,2085],"usedEvents":[110,2022,2029,2036]}],"src":"32:14835:26"},"id":26},"contracts/merkleClaim/AnichessMultiplier.sol":{"ast":{"absolutePath":"contracts/merkleClaim/AnichessMultiplier.sol","exportedSymbols":{"AnichessMultiplier":[3275],"Context":[1338],"ContractOwnership":[32],"ContractOwnershipStorage":[384],"ForwarderRegistryContext":[581],"ForwarderRegistryContextBase":[701],"IERC1155":[922],"IForwarderRegistry":[727],"MerkleProof":[1900]},"id":3276,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2815,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:27"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":2817,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":1901,"src":"57:87:27","symbolAliases":[{"foreign":{"id":2816,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1900,"src":"65:11:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol","id":2819,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":923,"src":"145:101:27","symbolAliases":[{"foreign":{"id":2818,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"153:8:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":2821,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":582,"src":"247:115:27","symbolAliases":[{"foreign":{"id":2820,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":581,"src":"255:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2823,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":33,"src":"363:101:27","symbolAliases":[{"foreign":{"id":2822,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"371:17:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":2825,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":385,"src":"465:125:27","symbolAliases":[{"foreign":{"id":2824,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"473:24:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":2827,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":702,"src":"591:128:27","symbolAliases":[{"foreign":{"id":2826,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"599:28:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":2829,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":728,"src":"720:114:27","symbolAliases":[{"foreign":{"id":2828,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":727,"src":"728:18:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":2831,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3276,"sourceUnit":1339,"src":"835:66:27","symbolAliases":[{"foreign":{"id":2830,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"843:7:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2833,"name":"ForwarderRegistryContext","nameLocations":["1073:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"1073:24:27"},"id":2834,"nodeType":"InheritanceSpecifier","src":"1073:24:27"},{"baseName":{"id":2835,"name":"ContractOwnership","nameLocations":["1099:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1099:17:27"},"id":2836,"nodeType":"InheritanceSpecifier","src":"1099:17:27"}],"canonicalName":"AnichessMultiplier","contractDependencies":[],"contractKind":"contract","documentation":{"id":2832,"nodeType":"StructuredDocumentation","src":"903:138:27","text":" @title Anichess Multiplier Merkle Claim Contract\n @dev This contract allows users to claim multiplier based on a Merkle proof"},"fullyImplemented":true,"id":3275,"linearizedBaseContracts":[3275,32,414,431,80,1338,126,581,713,701],"name":"AnichessMultiplier","nameLocation":"1051:18:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2840,"libraryName":{"id":2837,"name":"ContractOwnershipStorage","nameLocations":["1129:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"1129:24:27"},"nodeType":"UsingForDirective","src":"1123:67:27","typeName":{"id":2839,"nodeType":"UserDefinedTypeName","pathNode":{"id":2838,"name":"ContractOwnershipStorage.Layout","nameLocations":["1158:24:27","1183:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1158:31:27"},"referencedDeclaration":157,"src":"1158:31:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":2844,"libraryName":{"id":2841,"name":"MerkleProof","nameLocations":["1201:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":1900,"src":"1201:11:27"},"nodeType":"UsingForDirective","src":"1195:32:27","typeName":{"baseType":{"id":2842,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1217:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2843,"nodeType":"ArrayTypeName","src":"1217:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":false,"functionSelector":"ac524f3d","id":2848,"mutability":"mutable","name":"multipliers","nameLocation":"1268:11:27","nodeType":"VariableDeclaration","scope":3275,"src":"1233:46:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2847,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2845,"name":"address","nodeType":"ElementaryTypeName","src":"1241:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1233:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1252:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"fe5a5377","id":2852,"mutability":"mutable","name":"merkleRoots","nameLocation":"1317:11:27","nodeType":"VariableDeclaration","scope":3275,"src":"1285:43:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2851,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1293:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1285:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2850,"name":"bool","nodeType":"ElementaryTypeName","src":"1304:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"e3a0ce09","id":2856,"mutability":"mutable","name":"claimStatus","nameLocation":"1366:11:27","nodeType":"VariableDeclaration","scope":3275,"src":"1334:43:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"typeName":{"id":2855,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2853,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1342:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1334:24:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2854,"name":"bool","nodeType":"ElementaryTypeName","src":"1353:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"public"},{"constant":false,"functionSelector":"851f3bd2","id":2862,"mutability":"mutable","name":"tokenMultipliers","nameLocation":"1438:16:27","nodeType":"VariableDeclaration","scope":3275,"src":"1383:71:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"typeName":{"id":2861,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2857,"name":"address","nodeType":"ElementaryTypeName","src":"1391:7:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1383:47:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2860,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1410:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1402:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":2863,"nodeType":"StructuredDocumentation","src":"1461:52:27","text":"@notice Event emitted when a merkle root is set."},"eventSelector":"914960aef5e033ce5cae8a7992d4b7a6f0f9741227b66acb67c605b7019f8a46","id":2867,"name":"SetMerkleRoot","nameLocation":"1524:13:27","nodeType":"EventDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"indexed":true,"mutability":"mutable","name":"merkleRoot","nameLocation":"1554:10:27","nodeType":"VariableDeclaration","scope":2867,"src":"1538:26:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1538:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1537:28:27"},"src":"1518:48:27"},{"anonymous":false,"eventSelector":"987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a","id":2875,"name":"Claimed","nameLocation":"1577:7:27","nodeType":"EventDefinition","parameters":{"id":2874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2869,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"1601:9:27","nodeType":"VariableDeclaration","scope":2875,"src":"1585:25:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2868,"name":"address","nodeType":"ElementaryTypeName","src":"1585:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2871,"indexed":true,"mutability":"mutable","name":"batchId","nameLocation":"1628:7:27","nodeType":"VariableDeclaration","scope":2875,"src":"1612:23:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2873,"indexed":false,"mutability":"mutable","name":"multiplier","nameLocation":"1645:10:27","nodeType":"VariableDeclaration","scope":2875,"src":"1637:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1584:72:27"},"src":"1571:86:27"},{"documentation":{"id":2876,"nodeType":"StructuredDocumentation","src":"1663:66:27","text":"@notice Error thrown when the payout has already been claimed."},"errorSelector":"e64ea1da","id":2882,"name":"AlreadyClaimed","nameLocation":"1740:14:27","nodeType":"ErrorDefinition","parameters":{"id":2881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2878,"mutability":"mutable","name":"recipient","nameLocation":"1763:9:27","nodeType":"VariableDeclaration","scope":2882,"src":"1755:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2877,"name":"address","nodeType":"ElementaryTypeName","src":"1755:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2880,"mutability":"mutable","name":"batchId","nameLocation":"1782:7:27","nodeType":"VariableDeclaration","scope":2882,"src":"1774:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2879,"name":"uint256","nodeType":"ElementaryTypeName","src":"1774:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1754:36:27"},"src":"1734:57:27"},{"errorSelector":"adbd6512","id":2888,"name":"InvalidProof","nameLocation":"1802:12:27","nodeType":"ErrorDefinition","parameters":{"id":2887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"recipient","nameLocation":"1823:9:27","nodeType":"VariableDeclaration","scope":2888,"src":"1815:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2883,"name":"address","nodeType":"ElementaryTypeName","src":"1815:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2886,"mutability":"mutable","name":"batchId","nameLocation":"1842:7:27","nodeType":"VariableDeclaration","scope":2888,"src":"1834:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2885,"name":"uint256","nodeType":"ElementaryTypeName","src":"1834:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1814:36:27"},"src":"1796:55:27"},{"errorSelector":"5d35de37","id":2892,"name":"MerkleRootAlreadyExists","nameLocation":"1863:23:27","nodeType":"ErrorDefinition","parameters":{"id":2891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2890,"mutability":"mutable","name":"merkleRoot","nameLocation":"1895:10:27","nodeType":"VariableDeclaration","scope":2892,"src":"1887:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2889,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1887:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1886:20:27"},"src":"1857:50:27"},{"errorSelector":"6d825743","id":2896,"name":"InvalidMerkleRoot","nameLocation":"1919:17:27","nodeType":"ErrorDefinition","parameters":{"id":2895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2894,"mutability":"mutable","name":"merkleRoot","nameLocation":"1945:10:27","nodeType":"VariableDeclaration","scope":2896,"src":"1937:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1937:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1936:20:27"},"src":"1913:44:27"},{"errorSelector":"9f44c9eb","id":2900,"name":"InvalidMultiplier","nameLocation":"1969:17:27","nodeType":"ErrorDefinition","parameters":{"id":2899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2898,"mutability":"mutable","name":"multiplier","nameLocation":"1995:10:27","nodeType":"VariableDeclaration","scope":2900,"src":"1987:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2897,"name":"uint256","nodeType":"ElementaryTypeName","src":"1987:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1986:20:27"},"src":"1963:44:27"},{"documentation":{"id":2901,"nodeType":"StructuredDocumentation","src":"2013:65:27","text":"@notice Error thrown when the array lengths are inconsistent."},"errorSelector":"35e83ac3","id":2903,"name":"InconsistentArrays","nameLocation":"2089:18:27","nodeType":"ErrorDefinition","parameters":{"id":2902,"nodeType":"ParameterList","parameters":[],"src":"2107:2:27"},"src":"2083:27:27"},{"body":{"id":2917,"nodeType":"Block","src":"2396:2:27","statements":[]},"documentation":{"id":2904,"nodeType":"StructuredDocumentation","src":"2116:151:27","text":" @notice Constructor for the AnichessMultiplierMerkleClaim contract.\n @param forwarderRegistry The forwarder registry contract."},"id":2918,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":2910,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2907,"src":"2347:17:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}}],"id":2911,"kind":"baseConstructorSpecifier","modifierName":{"id":2909,"name":"ForwarderRegistryContext","nameLocations":["2322:24:27"],"nodeType":"IdentifierPath","referencedDeclaration":581,"src":"2322:24:27"},"nodeType":"ModifierInvocation","src":"2322:43:27"},{"arguments":[{"expression":{"id":2913,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2384:3:27","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2388:6:27","memberName":"sender","nodeType":"MemberAccess","src":"2384:10:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2915,"kind":"baseConstructorSpecifier","modifierName":{"id":2912,"name":"ContractOwnership","nameLocations":["2366:17:27"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"2366:17:27"},"nodeType":"ModifierInvocation","src":"2366:29:27"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2908,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2907,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2303:17:27","nodeType":"VariableDeclaration","scope":2918,"src":"2284:36:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"},"typeName":{"id":2906,"nodeType":"UserDefinedTypeName","pathNode":{"id":2905,"name":"IForwarderRegistry","nameLocations":["2284:18:27"],"nodeType":"IdentifierPath","referencedDeclaration":727,"src":"2284:18:27"},"referencedDeclaration":727,"src":"2284:18:27","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$727","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"2283:38:27"},"returnParameters":{"id":2916,"nodeType":"ParameterList","parameters":[],"src":"2396:0:27"},"scope":3275,"src":"2272:126:27","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[652,1328],"body":{"id":2931,"nodeType":"Block","src":"2563:65:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2927,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2580:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2609:10:27","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":652,"src":"2580:39:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2580:41:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2926,"id":2930,"nodeType":"Return","src":"2573:48:27"}]},"documentation":{"id":2919,"nodeType":"StructuredDocumentation","src":"2404:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2932,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"2462:10:27","nodeType":"FunctionDefinition","overrides":{"id":2923,"nodeType":"OverrideSpecifier","overrides":[{"id":2921,"name":"Context","nameLocations":["2506:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"2506:7:27"},{"id":2922,"name":"ForwarderRegistryContextBase","nameLocations":["2515:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2515:28:27"}],"src":"2497:47:27"},"parameters":{"id":2920,"nodeType":"ParameterList","parameters":[],"src":"2472:2:27"},"returnParameters":{"id":2926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2932,"src":"2554:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2924,"name":"address","nodeType":"ElementaryTypeName","src":"2554:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2553:9:27"},"scope":3275,"src":"2453:175:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[700,1337],"body":{"id":2945,"nodeType":"Block","src":"2798:63:27","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2941,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2815:28:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$701_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":2942,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2844:8:27","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":700,"src":"2815:37:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2815:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2940,"id":2944,"nodeType":"Return","src":"2808:46:27"}]},"documentation":{"id":2933,"nodeType":"StructuredDocumentation","src":"2634:44:27","text":"@inheritdoc ForwarderRegistryContextBase"},"id":2946,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"2692:8:27","nodeType":"FunctionDefinition","overrides":{"id":2937,"nodeType":"OverrideSpecifier","overrides":[{"id":2935,"name":"Context","nameLocations":["2734:7:27"],"nodeType":"IdentifierPath","referencedDeclaration":1338,"src":"2734:7:27"},{"id":2936,"name":"ForwarderRegistryContextBase","nameLocations":["2743:28:27"],"nodeType":"IdentifierPath","referencedDeclaration":701,"src":"2743:28:27"}],"src":"2725:47:27"},"parameters":{"id":2934,"nodeType":"ParameterList","parameters":[],"src":"2700:2:27"},"returnParameters":{"id":2940,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2939,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2946,"src":"2782:14:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2938,"name":"bytes","nodeType":"ElementaryTypeName","src":"2782:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2781:16:27"},"scope":3275,"src":"2683:178:27","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2966,"nodeType":"Block","src":"2940:124:27","statements":[{"assignments":[2954],"declarations":[{"constant":false,"id":2954,"mutability":"mutable","name":"walletMultiplier","nameLocation":"2958:16:27","nodeType":"VariableDeclaration","scope":2966,"src":"2950:24:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2953,"name":"uint256","nodeType":"ElementaryTypeName","src":"2950:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2958,"initialValue":{"baseExpression":{"id":2955,"name":"multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"2977:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2957,"indexExpression":{"id":2956,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2948,"src":"2989:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2977:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2950:46:27"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2959,"name":"walletMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"3013:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2960,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3033:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3013:21:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2963,"name":"walletMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2954,"src":"3041:16:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3013:44:27","trueExpression":{"hexValue":"31","id":2962,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3037:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2952,"id":2965,"nodeType":"Return","src":"3006:51:27"}]},"id":2967,"implemented":true,"kind":"function","modifiers":[],"name":"_baseMultiplier","nameLocation":"2876:15:27","nodeType":"FunctionDefinition","parameters":{"id":2949,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"wallet","nameLocation":"2900:6:27","nodeType":"VariableDeclaration","scope":2967,"src":"2892:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2947,"name":"address","nodeType":"ElementaryTypeName","src":"2892:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2891:16:27"},"returnParameters":{"id":2952,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2951,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2967,"src":"2931:7:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2950,"name":"uint256","nodeType":"ElementaryTypeName","src":"2931:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2930:9:27"},"scope":3275,"src":"2867:197:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3049,"nodeType":"Block","src":"3203:540:27","statements":[{"expression":{"id":2984,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2980,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"3213:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2982,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"3242:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2981,"name":"_baseMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"3226:15:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":2983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3226:23:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3213:36:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2985,"nodeType":"ExpressionStatement","src":"3213:36:27"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2986,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"3264:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3271:6:27","memberName":"length","nodeType":"MemberAccess","src":"3264:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2988,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3281:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3285:6:27","memberName":"length","nodeType":"MemberAccess","src":"3281:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3264:27:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2995,"nodeType":"IfStatement","src":"3260:85:27","trueBody":{"id":2994,"nodeType":"Block","src":"3293:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2991,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"3314:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3314:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2993,"nodeType":"RevertStatement","src":"3307:27:27"}]}},{"body":{"id":3047,"nodeType":"Block","src":"3495:242:27","statements":[{"body":{"id":3045,"nodeType":"Block","src":"3550:177:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3024,"name":"wallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2969,"src":"3602:6:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3025,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3610:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3027,"indexExpression":{"id":3026,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"3614:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3610:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"baseExpression":{"id":3019,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"3581:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3021,"indexExpression":{"id":3020,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"3588:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3581:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3018,"name":"IERC1155","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"3572:8:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155_$922_$","typeString":"type(contract IERC1155)"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:19:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155_$922","typeString":"contract IERC1155"}},"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3592:9:27","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":908,"src":"3572:29:27","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_uint256_$","typeString":"function (address,uint256) view external returns (uint256)"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:45:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3620:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3572:49:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3044,"nodeType":"IfStatement","src":"3568:145:27","trueBody":{"id":3043,"nodeType":"Block","src":"3623:90:27","statements":[{"expression":{"id":3041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3031,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2978,"src":"3645:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"baseExpression":{"baseExpression":{"id":3032,"name":"tokenMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"3659:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3036,"indexExpression":{"baseExpression":{"id":3033,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"3676:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3035,"indexExpression":{"id":3034,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"3683:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3676:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3659:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3040,"indexExpression":{"baseExpression":{"id":3037,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3687:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3039,"indexExpression":{"id":3038,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"3691:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3687:6:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3659:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3645:49:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3042,"nodeType":"ExpressionStatement","src":"3645:49:27"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3011,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"3529:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3012,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"3533:3:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3537:6:27","memberName":"length","nodeType":"MemberAccess","src":"3533:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3529:14:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3046,"initializationExpression":{"assignments":[3008],"declarations":[{"constant":false,"id":3008,"mutability":"mutable","name":"j","nameLocation":"3522:1:27","nodeType":"VariableDeclaration","scope":3046,"src":"3514:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"3514:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3010,"initialValue":{"hexValue":"30","id":3009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3526:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3514:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3545:3:27","subExpression":{"id":3015,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"3545:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3017,"nodeType":"ExpressionStatement","src":"3545:3:27"},"nodeType":"ForStatement","src":"3509:218:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3000,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"3471:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3001,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2972,"src":"3475:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3482:6:27","memberName":"length","nodeType":"MemberAccess","src":"3475:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3471:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3048,"initializationExpression":{"assignments":[2997],"declarations":[{"constant":false,"id":2997,"mutability":"mutable","name":"i","nameLocation":"3464:1:27","nodeType":"VariableDeclaration","scope":3048,"src":"3456:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2996,"name":"uint256","nodeType":"ElementaryTypeName","src":"3456:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2999,"initialValue":{"hexValue":"30","id":2998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3468:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3456:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3490:3:27","subExpression":{"id":3004,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2997,"src":"3490:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3006,"nodeType":"ExpressionStatement","src":"3490:3:27"},"nodeType":"ForStatement","src":"3451:286:27"}]},"functionSelector":"e18ea418","id":3050,"implemented":true,"kind":"function","modifiers":[],"name":"getMultiplier","nameLocation":"3079:13:27","nodeType":"FunctionDefinition","parameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2969,"mutability":"mutable","name":"wallet","nameLocation":"3101:6:27","nodeType":"VariableDeclaration","scope":3050,"src":"3093:14:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2968,"name":"address","nodeType":"ElementaryTypeName","src":"3093:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2972,"mutability":"mutable","name":"tokens","nameLocation":"3128:6:27","nodeType":"VariableDeclaration","scope":3050,"src":"3109:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2970,"name":"address","nodeType":"ElementaryTypeName","src":"3109:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2971,"nodeType":"ArrayTypeName","src":"3109:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2975,"mutability":"mutable","name":"ids","nameLocation":"3155:3:27","nodeType":"VariableDeclaration","scope":3050,"src":"3136:22:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2973,"name":"uint256","nodeType":"ElementaryTypeName","src":"3136:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2974,"nodeType":"ArrayTypeName","src":"3136:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3092:67:27"},"returnParameters":{"id":2979,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2978,"mutability":"mutable","name":"multiplier","nameLocation":"3191:10:27","nodeType":"VariableDeclaration","scope":3050,"src":"3183:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2977,"name":"uint256","nodeType":"ElementaryTypeName","src":"3183:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3182:20:27"},"scope":3275,"src":"3070:673:27","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":3084,"nodeType":"Block","src":"3908:274:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3061,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2932],"referencedDeclaration":2932,"src":"3975:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3975:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3056,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"3918:24:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3943:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"3918:31:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":3059,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3918:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":3060,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3952:22:27","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"3918:56:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3918:70:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3064,"nodeType":"ExpressionStatement","src":"3918:70:27"},{"condition":{"baseExpression":{"id":3065,"name":"merkleRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"4003:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3067,"indexExpression":{"id":3066,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"4015:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4003:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3073,"nodeType":"IfStatement","src":"3999:96:27","trueBody":{"id":3072,"nodeType":"Block","src":"4028:67:27","statements":[{"errorCall":{"arguments":[{"id":3069,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"4073:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3068,"name":"MerkleRootAlreadyExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2892,"src":"4049:23:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4049:35:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3071,"nodeType":"RevertStatement","src":"4042:42:27"}]}},{"expression":{"id":3078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3074,"name":"merkleRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"4105:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3076,"indexExpression":{"id":3075,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"4117:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4105:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3077,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4131:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"4105:30:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3079,"nodeType":"ExpressionStatement","src":"4105:30:27"},{"eventCall":{"arguments":[{"id":3081,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3053,"src":"4164:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3080,"name":"SetMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2867,"src":"4150:13:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$returns$__$","typeString":"function (bytes32)"}},"id":3082,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4150:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3083,"nodeType":"EmitStatement","src":"4145:30:27"}]},"documentation":{"id":3051,"nodeType":"StructuredDocumentation","src":"3749:102:27","text":" @notice Sets the merkle root\n @param merkleRoot The Merkle root of the claim."},"functionSelector":"7cb64759","id":3085,"implemented":true,"kind":"function","modifiers":[],"name":"setMerkleRoot","nameLocation":"3865:13:27","nodeType":"FunctionDefinition","parameters":{"id":3054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3053,"mutability":"mutable","name":"merkleRoot","nameLocation":"3887:10:27","nodeType":"VariableDeclaration","scope":3085,"src":"3879:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3052,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3879:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3878:20:27"},"returnParameters":{"id":3055,"nodeType":"ParameterList","parameters":[],"src":"3908:0:27"},"scope":3275,"src":"3856:326:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3184,"nodeType":"Block","src":"4319:574:27","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":3104,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[2932],"referencedDeclaration":2932,"src":"4386:10:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":3105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4386:12:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3099,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"4329:24:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":3101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4354:6:27","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"4329:31:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":3102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4329:33:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":3103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4363:22:27","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":351,"src":"4329:56:27","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":3106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4329:70:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3107,"nodeType":"ExpressionStatement","src":"4329:70:27"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3108,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"4413:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4420:6:27","memberName":"length","nodeType":"MemberAccess","src":"4413:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3110,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"4430:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4439:6:27","memberName":"length","nodeType":"MemberAccess","src":"4430:15:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4413:32:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3113,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"4449:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4456:6:27","memberName":"length","nodeType":"MemberAccess","src":"4449:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3115,"name":"_multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"4466:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4479:6:27","memberName":"length","nodeType":"MemberAccess","src":"4466:19:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4449:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4413:72:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3123,"nodeType":"IfStatement","src":"4409:130:27","trueBody":{"id":3122,"nodeType":"Block","src":"4487:52:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"4508:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4508:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"RevertStatement","src":"4501:27:27"}]}},{"body":{"id":3182,"nodeType":"Block","src":"4593:294:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"baseExpression":{"id":3135,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"4611:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3137,"indexExpression":{"id":3136,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4620:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4611:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:27","memberName":"length","nodeType":"MemberAccess","src":"4611:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"baseExpression":{"id":3139,"name":"_multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"4633:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3141,"indexExpression":{"id":3140,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4646:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4633:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4649:6:27","memberName":"length","nodeType":"MemberAccess","src":"4633:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4611:44:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3148,"nodeType":"IfStatement","src":"4607:110:27","trueBody":{"id":3147,"nodeType":"Block","src":"4657:60:27","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3144,"name":"InconsistentArrays","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"4682:18:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4682:20:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3146,"nodeType":"RevertStatement","src":"4675:27:27"}]}},{"body":{"id":3180,"nodeType":"Block","src":"4780:97:27","statements":[{"expression":{"id":3178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":3162,"name":"tokenMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2862,"src":"4798:16:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_uint256_$_t_uint256_$_$","typeString":"mapping(address => mapping(uint256 => uint256))"}},"id":3171,"indexExpression":{"baseExpression":{"id":3163,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"4815:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3165,"indexExpression":{"id":3164,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4822:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4815:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4798:27:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3172,"indexExpression":{"baseExpression":{"baseExpression":{"id":3166,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"4826:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3168,"indexExpression":{"id":3167,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4835:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4826:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3170,"indexExpression":{"id":3169,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4838:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4826:14:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4798:43:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"baseExpression":{"id":3173,"name":"_multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3096,"src":"4844:12:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3175,"indexExpression":{"id":3174,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4857:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4844:15:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3177,"indexExpression":{"id":3176,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4860:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4844:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4798:64:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3179,"nodeType":"ExpressionStatement","src":"4798:64:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3153,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4751:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"baseExpression":{"id":3154,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"4755:8:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[] calldata[] calldata"}},"id":3156,"indexExpression":{"id":3155,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4764:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4755:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4767:6:27","memberName":"length","nodeType":"MemberAccess","src":"4755:18:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4751:22:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3181,"initializationExpression":{"assignments":[3150],"declarations":[{"constant":false,"id":3150,"mutability":"mutable","name":"j","nameLocation":"4744:1:27","nodeType":"VariableDeclaration","scope":3181,"src":"4736:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3149,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3152,"initialValue":{"hexValue":"30","id":3151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4748:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4736:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4775:3:27","subExpression":{"id":3159,"name":"j","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3150,"src":"4775:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3161,"nodeType":"ExpressionStatement","src":"4775:3:27"},"nodeType":"ForStatement","src":"4731:146:27"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4569:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3129,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3088,"src":"4573:6:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4580:6:27","memberName":"length","nodeType":"MemberAccess","src":"4573:13:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4569:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3183,"initializationExpression":{"assignments":[3125],"declarations":[{"constant":false,"id":3125,"mutability":"mutable","name":"i","nameLocation":"4562:1:27","nodeType":"VariableDeclaration","scope":3183,"src":"4554:9:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3124,"name":"uint256","nodeType":"ElementaryTypeName","src":"4554:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3127,"initialValue":{"hexValue":"30","id":3126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4566:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"4554:13:27"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":3133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"4588:3:27","subExpression":{"id":3132,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3125,"src":"4588:1:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3134,"nodeType":"ExpressionStatement","src":"4588:3:27"},"nodeType":"ForStatement","src":"4549:338:27"}]},"functionSelector":"cc668cf0","id":3185,"implemented":true,"kind":"function","modifiers":[],"name":"setTokenMultipliers","nameLocation":"4197:19:27","nodeType":"FunctionDefinition","parameters":{"id":3097,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3088,"mutability":"mutable","name":"tokens","nameLocation":"4236:6:27","nodeType":"VariableDeclaration","scope":3185,"src":"4217:25:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3086,"name":"address","nodeType":"ElementaryTypeName","src":"4217:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3087,"nodeType":"ArrayTypeName","src":"4217:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3092,"mutability":"mutable","name":"tokenIds","nameLocation":"4265:8:27","nodeType":"VariableDeclaration","scope":3185,"src":"4244:29:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":3089,"name":"uint256","nodeType":"ElementaryTypeName","src":"4244:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3090,"nodeType":"ArrayTypeName","src":"4244:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":3091,"nodeType":"ArrayTypeName","src":"4244:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"},{"constant":false,"id":3096,"mutability":"mutable","name":"_multipliers","nameLocation":"4296:12:27","nodeType":"VariableDeclaration","scope":3185,"src":"4275:33:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","typeString":"uint256[][]"},"typeName":{"baseType":{"baseType":{"id":3093,"name":"uint256","nodeType":"ElementaryTypeName","src":"4275:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3094,"nodeType":"ArrayTypeName","src":"4275:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"id":3095,"nodeType":"ArrayTypeName","src":"4275:11:27","typeDescriptions":{"typeIdentifier":"t_array$_t_array$_t_uint256_$dyn_storage_$dyn_storage_ptr","typeString":"uint256[][]"}},"visibility":"internal"}],"src":"4216:93:27"},"returnParameters":{"id":3098,"nodeType":"ParameterList","parameters":[],"src":"4319:0:27"},"scope":3275,"src":"4188:705:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3273,"nodeType":"Block","src":"5262:646:27","statements":[{"condition":{"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5276:24:27","subExpression":{"baseExpression":{"id":3200,"name":"merkleRoots","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2852,"src":"5277:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3202,"indexExpression":{"id":3201,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"5289:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5277:23:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3209,"nodeType":"IfStatement","src":"5272:91:27","trueBody":{"id":3208,"nodeType":"Block","src":"5302:61:27","statements":[{"errorCall":{"arguments":[{"id":3205,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"5341:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3204,"name":"InvalidMerkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2896,"src":"5323:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$returns$__$","typeString":"function (bytes32) pure"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5323:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3207,"nodeType":"RevertStatement","src":"5316:36:27"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":3210,"name":"multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"5376:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3212,"indexExpression":{"id":3211,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5388:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5376:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3213,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"5402:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5376:36:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3220,"nodeType":"IfStatement","src":"5372:103:27","trueBody":{"id":3219,"nodeType":"Block","src":"5414:61:27","statements":[{"errorCall":{"arguments":[{"id":3216,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"5453:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3215,"name":"InvalidMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2900,"src":"5435:17:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5435:29:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3218,"nodeType":"RevertStatement","src":"5428:36:27"}]}},{"assignments":[3222],"declarations":[{"constant":false,"id":3222,"mutability":"mutable","name":"leaf","nameLocation":"5492:4:27","nodeType":"VariableDeclaration","scope":3273,"src":"5484:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3221,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5484:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3231,"initialValue":{"arguments":[{"arguments":[{"id":3226,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5526:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3227,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"5537:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3228,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"5549:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3224,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5509:3:27","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3225,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5513:12:27","memberName":"encodePacked","nodeType":"MemberAccess","src":"5509:16:27","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5509:48:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3223,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5499:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5499:59:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5484:74:27"},{"condition":{"baseExpression":{"id":3232,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"5572:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3234,"indexExpression":{"id":3233,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"5584:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5572:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3241,"nodeType":"IfStatement","src":"5568:89:27","trueBody":{"id":3240,"nodeType":"Block","src":"5591:66:27","statements":[{"errorCall":{"arguments":[{"id":3236,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5627:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3237,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"5638:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3235,"name":"AlreadyClaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2882,"src":"5612:14:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3238,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5612:34:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3239,"nodeType":"RevertStatement","src":"5605:41:27"}]}},{"condition":{"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5670:31:27","subExpression":{"arguments":[{"id":3244,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"5684:10:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3245,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"5696:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3242,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3191,"src":"5671:5:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5677:6:27","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":1422,"src":"5671:12:27","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":3246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5671:30:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3254,"nodeType":"IfStatement","src":"5666:101:27","trueBody":{"id":3253,"nodeType":"Block","src":"5703:64:27","statements":[{"errorCall":{"arguments":[{"id":3249,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5737:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3250,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"5748:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3248,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2888,"src":"5724:12:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5724:32:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3252,"nodeType":"RevertStatement","src":"5717:39:27"}]}},{"expression":{"id":3259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3255,"name":"multipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"5777:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3257,"indexExpression":{"id":3256,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5789:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5777:22:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3258,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"5802:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5777:35:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3260,"nodeType":"ExpressionStatement","src":"5777:35:27"},{"expression":{"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3261,"name":"claimStatus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"5822:11:27","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_bool_$","typeString":"mapping(bytes32 => bool)"}},"id":3263,"indexExpression":{"id":3262,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"5834:4:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5822:17:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":3264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5842:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"5822:24:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3266,"nodeType":"ExpressionStatement","src":"5822:24:27"},{"eventCall":{"arguments":[{"id":3268,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3193,"src":"5870:9:27","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3269,"name":"batchId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3197,"src":"5881:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3270,"name":"multiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3195,"src":"5890:10:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3267,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2875,"src":"5862:7:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":3271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5862:39:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3272,"nodeType":"EmitStatement","src":"5857:44:27"}]},"documentation":{"id":3186,"nodeType":"StructuredDocumentation","src":"4899:232:27","text":" @notice Claims the payout for a specific merkleRoot.\n @param merkleRoot The Merkle root for the claim.\n @param proof The Merkle proof for the claim.\n @param recipient The recipient of the payout."},"functionSelector":"3ec6004f","id":3274,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"5145:5:27","nodeType":"FunctionDefinition","parameters":{"id":3198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3188,"mutability":"mutable","name":"merkleRoot","nameLocation":"5159:10:27","nodeType":"VariableDeclaration","scope":3274,"src":"5151:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5151:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3191,"mutability":"mutable","name":"proof","nameLocation":"5190:5:27","nodeType":"VariableDeclaration","scope":3274,"src":"5171:24:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":3189,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5171:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3190,"nodeType":"ArrayTypeName","src":"5171:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":3193,"mutability":"mutable","name":"recipient","nameLocation":"5205:9:27","nodeType":"VariableDeclaration","scope":3274,"src":"5197:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3192,"name":"address","nodeType":"ElementaryTypeName","src":"5197:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3195,"mutability":"mutable","name":"multiplier","nameLocation":"5224:10:27","nodeType":"VariableDeclaration","scope":3274,"src":"5216:18:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3194,"name":"uint256","nodeType":"ElementaryTypeName","src":"5216:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3197,"mutability":"mutable","name":"batchId","nameLocation":"5244:7:27","nodeType":"VariableDeclaration","scope":3274,"src":"5236:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3196,"name":"uint256","nodeType":"ElementaryTypeName","src":"5236:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5150:102:27"},"returnParameters":{"id":3199,"nodeType":"ParameterList","parameters":[],"src":"5262:0:27"},"scope":3275,"src":"5136:772:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3276,"src":"1042:4868:27","usedErrors":[94,419,2882,2888,2892,2896,2900,2903],"usedEvents":[110,2867,2875]}],"src":"32:5879:27"},"id":27}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220b13c77d5d723f1567ec2c343e72e4fd60e29fe9ad5ee1fec718aafd9b6edf36464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB1 EXTCODECOPY PUSH24 0xD5D723F1567EC2C343E72E4FD60E29FE9AD5EE1FEC718AAF 0xD9 0xB6 0xED RETURN PUSH5 0x64736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202bcc96a031a8498034a490bda487dd350ca42425dd4f0ccb72f1b662e903d1f464736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2B 0xCC SWAP7 LOG0 BALANCE 0xA8 0x49 DUP1 CALLVALUE LOG4 SWAP1 0xBD LOG4 DUP8 0xDD CALLDATALOAD 0xC LOG4 0x24 0x25 0xDD 0x4F 0xC 0xCB PUSH19 0xF1B662E903D1F464736F6C6343000816003300 ","sourceMap":"319:712:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol":{"IERC1155":{"abi":[{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"balanceOfBatch","outputs":[{"internalType":"uint256[]","name":"balances","type":"uint256[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approved","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeBatchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.","kind":"dev","methods":{"balanceOf(address,uint256)":{"params":{"id":"The identifier to retrieve the balance of.","owner":"The account to retrieve the balance of."},"returns":{"balance":"The balance of `id` owned by account `owner`."}},"balanceOfBatch(address[],uint256[])":{"details":"Reverts if `owners` and `ids` have different lengths.","params":{"ids":"The identifiers to retrieve the balance of.","owners":"The addresses of the token holders"},"returns":{"balances":"The balances of `ids` owned by accounts `owners`."}},"isApprovedForAll(address,address)":{"params":{"operator":"Address of the operator.","owner":"Address of the authorisation giver."},"returns":{"approved":"True if the operator is approved, false if not."}},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current tokens owner.","ids":"Identifiers of the tokens to transfer.","to":"Address of the new tokens owner.","values":"Amounts of tokens to transfer."}},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"Current token owner.","id":"Identifier of the token to transfer.","to":"Address of the new token owner.","value":"Amount of token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Emits an {ApprovalForAll} event.","params":{"approved":"True to approve the operator, false to revoke its approval.","operator":"Address of the operator."}}},"title":"ERC1155 Multi Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"balanceOf(address,uint256)":"00fdd58e","balanceOfBatch(address[],uint256[])":"4e1273f4","isApprovedForAll(address,address)":"e985e9c5","safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":"2eb2c2d6","safeTransferFrom(address,address,uint256,uint256,bytes)":"f242432a","setApprovalForAll(address,bool)":"a22cb465"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0xd9b67a26.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"id\":\"The identifier to retrieve the balance of.\",\"owner\":\"The account to retrieve the balance of.\"},\"returns\":{\"balance\":\"The balance of `id` owned by account `owner`.\"}},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `ids` have different lengths.\",\"params\":{\"ids\":\"The identifiers to retrieve the balance of.\",\"owners\":\"The addresses of the token holders\"},\"returns\":{\"balances\":\"The balances of `ids` owned by accounts `owners`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"Address of the operator.\",\"owner\":\"Address of the authorisation giver.\"},\"returns\":{\"approved\":\"True if the operator is approved, false if not.\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.Emits a {TransferBatch} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current tokens owner.\",\"ids\":\"Identifiers of the tokens to transfer.\",\"to\":\"Address of the new tokens owner.\",\"values\":\"Amounts of tokens to transfer.\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.Emits a {TransferSingle} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"Current token owner.\",\"id\":\"Identifier of the token to transfer.\",\"to\":\"Address of the new token owner.\",\"value\":\"Amount of token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to approve the operator, false to revoke its approval.\",\"operator\":\"Address of the operator.\"}}},\"title\":\"ERC1155 Multi Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"Retrieves the balance of `id` owned by account `owner`.\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"Retrieves the balances of `ids` owned by accounts `owners`.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Retrieves the approval status of an operator for a given owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Safely transfers a batch of tokens.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"Safely transfers some token.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enables or disables an operator's approval.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":\"IERC1155\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"balanceOf(address,uint256)":{"notice":"Retrieves the balance of `id` owned by account `owner`."},"balanceOfBatch(address[],uint256[])":{"notice":"Retrieves the balances of `ids` owned by accounts `owners`."},"isApprovedForAll(address,address)":{"notice":"Retrieves the approval status of an operator for a given owner."},"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)":{"notice":"Safely transfers a batch of tokens."},"safeTransferFrom(address,address,uint256,uint256,bytes)":{"notice":"Safely transfers some token."},"setApprovalForAll(address,bool)":{"notice":"Enables or disables an operator's approval."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:22:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:22;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122051c3bd954adc78f97c5b4be7e00d0208fe9121878f04fb17007d046f690ea89264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MLOAD 0xC3 0xBD SWAP6 0x4A 0xDC PUSH25 0xF97C5B4BE7E00D0208FE9121878F04FB17007D046F690EA892 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"194:8964:22:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:24:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1279:1391:24;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207720f09bef43f0fe1672e1082b5229042829d38e1b4590cebc377e2b29697f4c64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0x20F09BEF43F0FE1672E1082B5229042829D38E1B4590CEBC CALLDATACOPY PUSH31 0x2B29697F4C64736F6C63430008160033000000000000000000000000000000 ","sourceMap":"1279:1391:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ``` contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:25:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:25;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:25:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/AnichessOrbsBurnPool.sol":{"AnichessOrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"contract IERC1155Burnable","name":"token","type":"address"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"multiplierToken","type":"address"},{"internalType":"uint256","name":"multiplierTokenId","type":"uint256"},{"internalType":"uint256","name":"tokenMultiplier","type":"uint256"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"AlreadyClaimedLeaderboardMultiplier","type":"error"},{"inputs":[],"name":"AlreadySetTiers","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"AlreadySetTokenWeight","type":"error"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadyUnlockedTokenMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[],"name":"IncorrectTiers","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[],"name":"InvalidProof","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"expectedAmount","type":"uint256"}],"name":"InvalidTokenAmount","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"ClaimLeaderboardMultiplier","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"TokensBurnt","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"wallet","type":"address"},{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"UnlockTokenMultiplier","type":"event"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MULTIPLIER_TOKEN","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MULTIPLIER_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"TOKEN_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"claimLeaderboardMultiplier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"getCycleReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"multiplier","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"},{"internalType":"address","name":"wallet","type":"address"}],"name":"getUserReward","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"leaderboardMultiplers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"_tiers","type":"uint256[]"},{"internalType":"uint256[]","name":"_tierRewards","type":"uint256[]"}],"name":"setTiers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"},{"internalType":"uint256[]","name":"weights","type":"uint256[]"}],"name":"setTokensWeight","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tierRewards","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"tiers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"tokenMultiplerUnlockStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshByCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.The rewards are calculated based on the total amount of tokens burned in the previous cycle.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"claimLeaderboardMultiplier(bytes32[],address,uint256)":{"details":"Throws if the payout has already been claimed.Throws if the proof is invalid.","params":{"multiplier":"The multiplier for the recipient.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"constructor":{"params":{"cycleDuration":"The duration of each cycle.","forwarderRegistry":"The forwarder registry contract.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","merkleRoot":"The Merkle root of the leaderboard multiplier claim.","multiplierToken":"The IERC1155Burnable erc1155 contract for unlocking the token multiplier.","multiplierTokenId":"The token ID for unlocking the token multiplier.","token":"The IERC1155Burnable erc1155 contract.","tokenMultiplier":"The token multiplier."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"getCycleReward(uint256)":{"details":"Throws if the cycle is invalid.","params":{"cycle":"The cycle number."},"returns":{"_0":"reward The reward for the cycle."}},"getMultiplier(address)":{"params":{"wallet":"The wallet address."},"returns":{"multiplier":"The multiplier for the user."}},"getUserReward(uint256,address)":{"details":"Throws if the cycle is invalid.","params":{"cycle":"The cycle number.","wallet":"The wallet address."},"returns":{"_0":"reward The reward for the user."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the token ID is invalid.Throws if the cycle is invalid.","params":{"from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier is already unlocked.","params":{"from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setTiers(uint256[],uint256[])":{"details":"Throws if the lengths of tiers and rewards are inconsistent.Throws if the tiers are empty.Throws if the tiers are already set.Throws if the tiers are not in increasing order.Throws if the rewards are not in increasing order.","params":{"_tierRewards":"The list of rewards for each tier.","_tiers":"The list of tiers."}},"setTokensWeight(uint256[],uint256[])":{"details":"Throws if the lengths of token IDs and weights are inconsistent.","params":{"tokenIds":"The token IDs.","weights":"The weights for each token."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess Orbs Burn Pool Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2150":{"entryPoint":null,"id":2150,"parameterSlots":9,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@_846":{"entryPoint":null,"id":846,"parameterSlots":0,"returnSlots":0},"@constructorInit_227":{"entryPoint":377,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":329,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":182,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":236,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_contract$_IERC1155Burnable_$948t_bytes32t_contract$_IERC1155Burnable_$948t_uint256t_uint256t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":517,"id":null,"parameterSlots":2,"returnSlots":9},"checked_sub_t_uint256":{"entryPoint":661,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":492,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1419:28","nodeType":"YulBlock","src":"0:1419:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"77:86:28","nodeType":"YulBlock","src":"77:86:28","statements":[{"body":{"nativeSrc":"141:16:28","nodeType":"YulBlock","src":"141:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:28","nodeType":"YulLiteral","src":"150:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:28","nodeType":"YulLiteral","src":"153:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:28","nodeType":"YulIdentifier","src":"143:6:28"},"nativeSrc":"143:12:28","nodeType":"YulFunctionCall","src":"143:12:28"},"nativeSrc":"143:12:28","nodeType":"YulExpressionStatement","src":"143:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:28","nodeType":"YulIdentifier","src":"100:5:28"},{"arguments":[{"name":"value","nativeSrc":"111:5:28","nodeType":"YulIdentifier","src":"111:5:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:28","nodeType":"YulLiteral","src":"126:3:28","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:28","nodeType":"YulLiteral","src":"131:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:28","nodeType":"YulIdentifier","src":"122:3:28"},"nativeSrc":"122:11:28","nodeType":"YulFunctionCall","src":"122:11:28"},{"kind":"number","nativeSrc":"135:1:28","nodeType":"YulLiteral","src":"135:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:28","nodeType":"YulIdentifier","src":"118:3:28"},"nativeSrc":"118:19:28","nodeType":"YulFunctionCall","src":"118:19:28"}],"functionName":{"name":"and","nativeSrc":"107:3:28","nodeType":"YulIdentifier","src":"107:3:28"},"nativeSrc":"107:31:28","nodeType":"YulFunctionCall","src":"107:31:28"}],"functionName":{"name":"eq","nativeSrc":"97:2:28","nodeType":"YulIdentifier","src":"97:2:28"},"nativeSrc":"97:42:28","nodeType":"YulFunctionCall","src":"97:42:28"}],"functionName":{"name":"iszero","nativeSrc":"90:6:28","nodeType":"YulIdentifier","src":"90:6:28"},"nativeSrc":"90:50:28","nodeType":"YulFunctionCall","src":"90:50:28"},"nativeSrc":"87:70:28","nodeType":"YulIf","src":"87:70:28"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:28","nodeType":"YulTypedName","src":"66:5:28","type":""}],"src":"14:149:28"},{"body":{"nativeSrc":"459:728:28","nodeType":"YulBlock","src":"459:728:28","statements":[{"body":{"nativeSrc":"506:16:28","nodeType":"YulBlock","src":"506:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"515:1:28","nodeType":"YulLiteral","src":"515:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"518:1:28","nodeType":"YulLiteral","src":"518:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"508:6:28","nodeType":"YulIdentifier","src":"508:6:28"},"nativeSrc":"508:12:28","nodeType":"YulFunctionCall","src":"508:12:28"},"nativeSrc":"508:12:28","nodeType":"YulExpressionStatement","src":"508:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"480:7:28","nodeType":"YulIdentifier","src":"480:7:28"},{"name":"headStart","nativeSrc":"489:9:28","nodeType":"YulIdentifier","src":"489:9:28"}],"functionName":{"name":"sub","nativeSrc":"476:3:28","nodeType":"YulIdentifier","src":"476:3:28"},"nativeSrc":"476:23:28","nodeType":"YulFunctionCall","src":"476:23:28"},{"kind":"number","nativeSrc":"501:3:28","nodeType":"YulLiteral","src":"501:3:28","type":"","value":"288"}],"functionName":{"name":"slt","nativeSrc":"472:3:28","nodeType":"YulIdentifier","src":"472:3:28"},"nativeSrc":"472:33:28","nodeType":"YulFunctionCall","src":"472:33:28"},"nativeSrc":"469:53:28","nodeType":"YulIf","src":"469:53:28"},{"nativeSrc":"531:26:28","nodeType":"YulAssignment","src":"531:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"547:9:28","nodeType":"YulIdentifier","src":"547:9:28"}],"functionName":{"name":"mload","nativeSrc":"541:5:28","nodeType":"YulIdentifier","src":"541:5:28"},"nativeSrc":"541:16:28","nodeType":"YulFunctionCall","src":"541:16:28"},"variableNames":[{"name":"value0","nativeSrc":"531:6:28","nodeType":"YulIdentifier","src":"531:6:28"}]},{"nativeSrc":"566:35:28","nodeType":"YulAssignment","src":"566:35:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"586:9:28","nodeType":"YulIdentifier","src":"586:9:28"},{"kind":"number","nativeSrc":"597:2:28","nodeType":"YulLiteral","src":"597:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"582:3:28","nodeType":"YulIdentifier","src":"582:3:28"},"nativeSrc":"582:18:28","nodeType":"YulFunctionCall","src":"582:18:28"}],"functionName":{"name":"mload","nativeSrc":"576:5:28","nodeType":"YulIdentifier","src":"576:5:28"},"nativeSrc":"576:25:28","nodeType":"YulFunctionCall","src":"576:25:28"},"variableNames":[{"name":"value1","nativeSrc":"566:6:28","nodeType":"YulIdentifier","src":"566:6:28"}]},{"nativeSrc":"610:35:28","nodeType":"YulAssignment","src":"610:35:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"630:9:28","nodeType":"YulIdentifier","src":"630:9:28"},{"kind":"number","nativeSrc":"641:2:28","nodeType":"YulLiteral","src":"641:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"626:3:28","nodeType":"YulIdentifier","src":"626:3:28"},"nativeSrc":"626:18:28","nodeType":"YulFunctionCall","src":"626:18:28"}],"functionName":{"name":"mload","nativeSrc":"620:5:28","nodeType":"YulIdentifier","src":"620:5:28"},"nativeSrc":"620:25:28","nodeType":"YulFunctionCall","src":"620:25:28"},"variableNames":[{"name":"value2","nativeSrc":"610:6:28","nodeType":"YulIdentifier","src":"610:6:28"}]},{"nativeSrc":"654:38:28","nodeType":"YulVariableDeclaration","src":"654:38:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"677:9:28","nodeType":"YulIdentifier","src":"677:9:28"},{"kind":"number","nativeSrc":"688:2:28","nodeType":"YulLiteral","src":"688:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"673:3:28","nodeType":"YulIdentifier","src":"673:3:28"},"nativeSrc":"673:18:28","nodeType":"YulFunctionCall","src":"673:18:28"}],"functionName":{"name":"mload","nativeSrc":"667:5:28","nodeType":"YulIdentifier","src":"667:5:28"},"nativeSrc":"667:25:28","nodeType":"YulFunctionCall","src":"667:25:28"},"variables":[{"name":"value","nativeSrc":"658:5:28","nodeType":"YulTypedName","src":"658:5:28","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"744:5:28","nodeType":"YulIdentifier","src":"744:5:28"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"701:42:28","nodeType":"YulIdentifier","src":"701:42:28"},"nativeSrc":"701:49:28","nodeType":"YulFunctionCall","src":"701:49:28"},"nativeSrc":"701:49:28","nodeType":"YulExpressionStatement","src":"701:49:28"},{"nativeSrc":"759:15:28","nodeType":"YulAssignment","src":"759:15:28","value":{"name":"value","nativeSrc":"769:5:28","nodeType":"YulIdentifier","src":"769:5:28"},"variableNames":[{"name":"value3","nativeSrc":"759:6:28","nodeType":"YulIdentifier","src":"759:6:28"}]},{"nativeSrc":"783:36:28","nodeType":"YulAssignment","src":"783:36:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"803:9:28","nodeType":"YulIdentifier","src":"803:9:28"},{"kind":"number","nativeSrc":"814:3:28","nodeType":"YulLiteral","src":"814:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"799:3:28","nodeType":"YulIdentifier","src":"799:3:28"},"nativeSrc":"799:19:28","nodeType":"YulFunctionCall","src":"799:19:28"}],"functionName":{"name":"mload","nativeSrc":"793:5:28","nodeType":"YulIdentifier","src":"793:5:28"},"nativeSrc":"793:26:28","nodeType":"YulFunctionCall","src":"793:26:28"},"variableNames":[{"name":"value4","nativeSrc":"783:6:28","nodeType":"YulIdentifier","src":"783:6:28"}]},{"nativeSrc":"828:41:28","nodeType":"YulVariableDeclaration","src":"828:41:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"853:9:28","nodeType":"YulIdentifier","src":"853:9:28"},{"kind":"number","nativeSrc":"864:3:28","nodeType":"YulLiteral","src":"864:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"849:3:28","nodeType":"YulIdentifier","src":"849:3:28"},"nativeSrc":"849:19:28","nodeType":"YulFunctionCall","src":"849:19:28"}],"functionName":{"name":"mload","nativeSrc":"843:5:28","nodeType":"YulIdentifier","src":"843:5:28"},"nativeSrc":"843:26:28","nodeType":"YulFunctionCall","src":"843:26:28"},"variables":[{"name":"value_1","nativeSrc":"832:7:28","nodeType":"YulTypedName","src":"832:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"921:7:28","nodeType":"YulIdentifier","src":"921:7:28"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"878:42:28","nodeType":"YulIdentifier","src":"878:42:28"},"nativeSrc":"878:51:28","nodeType":"YulFunctionCall","src":"878:51:28"},"nativeSrc":"878:51:28","nodeType":"YulExpressionStatement","src":"878:51:28"},{"nativeSrc":"938:17:28","nodeType":"YulAssignment","src":"938:17:28","value":{"name":"value_1","nativeSrc":"948:7:28","nodeType":"YulIdentifier","src":"948:7:28"},"variableNames":[{"name":"value5","nativeSrc":"938:6:28","nodeType":"YulIdentifier","src":"938:6:28"}]},{"nativeSrc":"964:36:28","nodeType":"YulAssignment","src":"964:36:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"984:9:28","nodeType":"YulIdentifier","src":"984:9:28"},{"kind":"number","nativeSrc":"995:3:28","nodeType":"YulLiteral","src":"995:3:28","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"980:3:28","nodeType":"YulIdentifier","src":"980:3:28"},"nativeSrc":"980:19:28","nodeType":"YulFunctionCall","src":"980:19:28"}],"functionName":{"name":"mload","nativeSrc":"974:5:28","nodeType":"YulIdentifier","src":"974:5:28"},"nativeSrc":"974:26:28","nodeType":"YulFunctionCall","src":"974:26:28"},"variableNames":[{"name":"value6","nativeSrc":"964:6:28","nodeType":"YulIdentifier","src":"964:6:28"}]},{"nativeSrc":"1009:36:28","nodeType":"YulAssignment","src":"1009:36:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1029:9:28","nodeType":"YulIdentifier","src":"1029:9:28"},{"kind":"number","nativeSrc":"1040:3:28","nodeType":"YulLiteral","src":"1040:3:28","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"1025:3:28","nodeType":"YulIdentifier","src":"1025:3:28"},"nativeSrc":"1025:19:28","nodeType":"YulFunctionCall","src":"1025:19:28"}],"functionName":{"name":"mload","nativeSrc":"1019:5:28","nodeType":"YulIdentifier","src":"1019:5:28"},"nativeSrc":"1019:26:28","nodeType":"YulFunctionCall","src":"1019:26:28"},"variableNames":[{"name":"value7","nativeSrc":"1009:6:28","nodeType":"YulIdentifier","src":"1009:6:28"}]},{"nativeSrc":"1054:41:28","nodeType":"YulVariableDeclaration","src":"1054:41:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1079:9:28","nodeType":"YulIdentifier","src":"1079:9:28"},{"kind":"number","nativeSrc":"1090:3:28","nodeType":"YulLiteral","src":"1090:3:28","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"1075:3:28","nodeType":"YulIdentifier","src":"1075:3:28"},"nativeSrc":"1075:19:28","nodeType":"YulFunctionCall","src":"1075:19:28"}],"functionName":{"name":"mload","nativeSrc":"1069:5:28","nodeType":"YulIdentifier","src":"1069:5:28"},"nativeSrc":"1069:26:28","nodeType":"YulFunctionCall","src":"1069:26:28"},"variables":[{"name":"value_2","nativeSrc":"1058:7:28","nodeType":"YulTypedName","src":"1058:7:28","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1147:7:28","nodeType":"YulIdentifier","src":"1147:7:28"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"1104:42:28","nodeType":"YulIdentifier","src":"1104:42:28"},"nativeSrc":"1104:51:28","nodeType":"YulFunctionCall","src":"1104:51:28"},"nativeSrc":"1104:51:28","nodeType":"YulExpressionStatement","src":"1104:51:28"},{"nativeSrc":"1164:17:28","nodeType":"YulAssignment","src":"1164:17:28","value":{"name":"value_2","nativeSrc":"1174:7:28","nodeType":"YulIdentifier","src":"1174:7:28"},"variableNames":[{"name":"value8","nativeSrc":"1164:6:28","nodeType":"YulIdentifier","src":"1164:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_contract$_IERC1155Burnable_$948t_bytes32t_contract$_IERC1155Burnable_$948t_uint256t_uint256t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"168:1019:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"361:9:28","nodeType":"YulTypedName","src":"361:9:28","type":""},{"name":"dataEnd","nativeSrc":"372:7:28","nodeType":"YulTypedName","src":"372:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"384:6:28","nodeType":"YulTypedName","src":"384:6:28","type":""},{"name":"value1","nativeSrc":"392:6:28","nodeType":"YulTypedName","src":"392:6:28","type":""},{"name":"value2","nativeSrc":"400:6:28","nodeType":"YulTypedName","src":"400:6:28","type":""},{"name":"value3","nativeSrc":"408:6:28","nodeType":"YulTypedName","src":"408:6:28","type":""},{"name":"value4","nativeSrc":"416:6:28","nodeType":"YulTypedName","src":"416:6:28","type":""},{"name":"value5","nativeSrc":"424:6:28","nodeType":"YulTypedName","src":"424:6:28","type":""},{"name":"value6","nativeSrc":"432:6:28","nodeType":"YulTypedName","src":"432:6:28","type":""},{"name":"value7","nativeSrc":"440:6:28","nodeType":"YulTypedName","src":"440:6:28","type":""},{"name":"value8","nativeSrc":"448:6:28","nodeType":"YulTypedName","src":"448:6:28","type":""}],"src":"168:1019:28"},{"body":{"nativeSrc":"1241:176:28","nodeType":"YulBlock","src":"1241:176:28","statements":[{"nativeSrc":"1251:17:28","nodeType":"YulAssignment","src":"1251:17:28","value":{"arguments":[{"name":"x","nativeSrc":"1263:1:28","nodeType":"YulIdentifier","src":"1263:1:28"},{"name":"y","nativeSrc":"1266:1:28","nodeType":"YulIdentifier","src":"1266:1:28"}],"functionName":{"name":"sub","nativeSrc":"1259:3:28","nodeType":"YulIdentifier","src":"1259:3:28"},"nativeSrc":"1259:9:28","nodeType":"YulFunctionCall","src":"1259:9:28"},"variableNames":[{"name":"diff","nativeSrc":"1251:4:28","nodeType":"YulIdentifier","src":"1251:4:28"}]},{"body":{"nativeSrc":"1300:111:28","nodeType":"YulBlock","src":"1300:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1321:1:28","nodeType":"YulLiteral","src":"1321:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1328:3:28","nodeType":"YulLiteral","src":"1328:3:28","type":"","value":"224"},{"kind":"number","nativeSrc":"1333:10:28","nodeType":"YulLiteral","src":"1333:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1324:3:28","nodeType":"YulIdentifier","src":"1324:3:28"},"nativeSrc":"1324:20:28","nodeType":"YulFunctionCall","src":"1324:20:28"}],"functionName":{"name":"mstore","nativeSrc":"1314:6:28","nodeType":"YulIdentifier","src":"1314:6:28"},"nativeSrc":"1314:31:28","nodeType":"YulFunctionCall","src":"1314:31:28"},"nativeSrc":"1314:31:28","nodeType":"YulExpressionStatement","src":"1314:31:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1365:1:28","nodeType":"YulLiteral","src":"1365:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"1368:4:28","nodeType":"YulLiteral","src":"1368:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1358:6:28","nodeType":"YulIdentifier","src":"1358:6:28"},"nativeSrc":"1358:15:28","nodeType":"YulFunctionCall","src":"1358:15:28"},"nativeSrc":"1358:15:28","nodeType":"YulExpressionStatement","src":"1358:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1393:1:28","nodeType":"YulLiteral","src":"1393:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1396:4:28","nodeType":"YulLiteral","src":"1396:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1386:6:28","nodeType":"YulIdentifier","src":"1386:6:28"},"nativeSrc":"1386:15:28","nodeType":"YulFunctionCall","src":"1386:15:28"},"nativeSrc":"1386:15:28","nodeType":"YulExpressionStatement","src":"1386:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1283:4:28","nodeType":"YulIdentifier","src":"1283:4:28"},{"name":"x","nativeSrc":"1289:1:28","nodeType":"YulIdentifier","src":"1289:1:28"}],"functionName":{"name":"gt","nativeSrc":"1280:2:28","nodeType":"YulIdentifier","src":"1280:2:28"},"nativeSrc":"1280:11:28","nodeType":"YulFunctionCall","src":"1280:11:28"},"nativeSrc":"1277:134:28","nodeType":"YulIf","src":"1277:134:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"1192:225:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1223:1:28","nodeType":"YulTypedName","src":"1223:1:28","type":""},{"name":"y","nativeSrc":"1226:1:28","nodeType":"YulTypedName","src":"1226:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1232:4:28","nodeType":"YulTypedName","src":"1232:4:28","type":""}],"src":"1192:225:28"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_contract$_IERC1155Burnable_$948t_bytes32t_contract$_IERC1155Burnable_$948t_uint256t_uint256t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8\n    {\n        if slt(sub(dataEnd, headStart), 288) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        let value := mload(add(headStart, 96))\n        validator_revert_contract_IERC1155Burnable(value)\n        value3 := value\n        value4 := mload(add(headStart, 128))\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value5 := value_1\n        value6 := mload(add(headStart, 192))\n        value7 := mload(add(headStart, 224))\n        let value_2 := mload(add(headStart, 256))\n        validator_revert_contract_IERC1155Burnable(value_2)\n        value8 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101a06040523480156200001257600080fd5b50604051620023bb380380620023bb833981016040819052620000359162000205565b6001600160a01b0381166080523362000063630271189760e51b60016200005b620000b6565b9190620000ec565b62000079816200007262000149565b9062000179565b505060c09790975260e09590955261010093909352610160526001600160a01b0391821661012052610140929092521660a05261018052620002b7565b600080620000e660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000295565b92915050565b600160e01b6001600160e01b03198316016200011b576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600080620000e660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000295565b6001600160a01b03811615620001d05781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001e86307f5828d60e41b60016200005b620000b6565b5050565b6001600160a01b03811681146200020257600080fd5b50565b60008060008060008060008060006101208a8c0312156200022557600080fd5b8951985060208a0151975060408a0151965060608a01516200024781620001ec565b60808b015160a08c015191975095506200026181620001ec565b8094505060c08a0151925060e08a015191506101008a01516200028481620001ec565b809150509295985092959850929598565b81810381811115620000e657634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610100516101205161014051610160516101805161202a62000391600039600081816102a00152610c5d0152600081816103480152610a8c0152600081816102510152818161100b01526112600152600081816103cf01528181610f9b0152611207015260008181610217015281816105bf015281816108ef0152610e520152600081816104da0152610d8001526000818161030e0152610da40152600081816104160152610ded0152600081816102c40152818161038d0152818161176a01526117f2015261202a6000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c806364c19303116100f9578063bab2f55211610097578063e3a0ce0911610071578063e3a0ce09146104fc578063f23a6e611461051f578063f2fde38b14610532578063fa9fdc6a1461054557600080fd5b8063bab2f55214610489578063bc197c8114610491578063cd421fbf146104d557600080fd5b80638da5cb5b116100d35780638da5cb5b14610438578063a5bb3ec114610440578063a9d637e114610463578063ad740fa01461047657600080fd5b806364c19303146103ca57806370d92882146103f157806382bfefc81461041157600080fd5b80632b093fe911610166578063496baa4711610140578063496baa471461033057806351e75e8b14610343578063556c448d1461036a578063572b6c051461037d57600080fd5b80632b093fe91461029b5780632b4c9f16146102c2578063491bde661461030957600080fd5b806304585ac7116101a257806304585ac71461023957806316a3138b1461024c5780631b8ebc3c146102735780632099920e1461028857600080fd5b806301ffc9a7146101c9578063039af9eb146101f1578063043063bc14610212575b600080fd5b6101dc6101d7366004611943565b610570565b60405190151581526020015b60405180910390f35b6102046101ff366004611985565b61058a565b6040519081526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b610204610247366004611985565b6105ab565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102866102813660046119ea565b6106f8565b005b610204610296366004611a7f565b6108db565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b61028661033e366004611aab565b6109b3565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b610204610378366004611985565b610bb5565b6101dc61038b366004611b07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102e47f000000000000000000000000000000000000000000000000000000000000000081565b6102046103ff366004611b07565b60056020526000908152604090205481565b6102e47f000000000000000000000000000000000000000000000000000000000000000081565b6102e4610bc5565b6101dc61044e366004611b07565b60066020526000908152604090205460ff1681565b610204610471366004611b07565b610bf1565b610286610484366004611c0d565b610c8c565b610204610d7c565b6104a461049f366004611cb3565b610dd3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101dc61050a366004611985565b60046020526000908152604090205460ff1681565b6104a461052d366004611d6e565b6111ed565b610286610540366004611b07565b61142f565b610204610553366004611a7f565b600360209081526000928352604080842090915290825290205481565b60006105848261057e61144d565b9061147b565b92915050565b6000818154811061059a57600080fd5b600091825260209091200154905081565b60006105b5610d7c565b8211806105e157507f000000000000000000000000000000000000000000000000000000000000000082115b15610620576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6000821561064b5760026000610637600186611e15565b81526020019081526020016000205461064e565b60005b905060015b60005481116106c3576000818154811061066f5761066f611e28565b90600052602060002001548210156106b157600161068d8183611e15565b8154811061069d5761069d611e28565b906000526020600020015492505050919050565b806106bb81611e57565b915050610653565b506000546001906106d5908290611e15565b815481106106e5576106e5611e28565b9060005260206000200154915050919050565b610711610703611555565b61070b61155f565b9061158d565b82811461074a576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839003610785576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054156107bf576040517f65edd76100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015b838110156108ba5784846107d7600184611e15565b8181106107e6576107e6611e28565b905060200201358585838181106107ff576107ff611e28565b90506020020135101561083e576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828261084b600184611e15565b81811061085a5761085a611e28565b9050602002013583838381811061087357610873611e28565b9050602002013510156108b2576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016107c2565b506108c7600085856118e3565b506108d4600183836118e3565b5050505050565b60006108e5610d7c565b83118061091157507f000000000000000000000000000000000000000000000000000000000000000083115b1561094b576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101849052602401610617565b6000610956846105ab565b600085815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452825280832054888452600290925290912054919250906109a08383611e8f565b6109aa9190611ea6565b95945050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490915060ff1615610a87576040517f8084224300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610617565b610ae97f0000000000000000000000000000000000000000000000000000000000000000828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509294939250506115fc9050565b610b1f576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000818152600560209081526040808320869055848352600482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590518481527fad13a161261d327d2506101e44c2dd1737e7314cd7ed475a2819bdc64c76b857910160405180910390a25050505050565b6001818154811061059a57600080fd5b6000610bec610bd261155f565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120548015610c235780610c26565b60015b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604090205490925060ff168015610c8557610c827f000000000000000000000000000000000000000000000000000000000000000084611e8f565b92505b5050919050565b610c97610703611555565b8051825114610cd2576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610d775760008181526007602052604090205415610d4157828181518110610d0457610d04611e28565b60200260200101516040517ffaf6788700000000000000000000000000000000000000000000000000000000815260040161061791815260200190565b818181518110610d5357610d53611e28565b60209081029190910181015160008381526007909252604090912055600101610cd5565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000610dc97f000000000000000000000000000000000000000000000000000000000000000042611e15565b610bec9190611ea6565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610e44576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e4e610d7c565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610ead576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610617565b6000805b88811015610f96576000600760008c8c85818110610ed157610ed1611e28565b90506020020135815260200190815260200160002054905080600003610f5d57338b8b84818110610f0457610f04611e28565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610617565b80898984818110610f7057610f70611e28565b90506020020135610f819190611e8f565b610f8b9084611ee1565b925050600101610eb1565b5060607f000000000000000000000000000000000000000000000000000000000000000081600081518110610fcd57610fcd611e28565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060607f00000000000000000000000000000000000000000000000000000000000000008160008151811061103d5761103d611e28565b60200260200101818152505060006110548d610bf1565b90506110608185611e8f565b9350836003600087815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110c29190611ee1565b9091555050600085815260026020526040812080548692906110e5908490611ee1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff1663805349348e8e8e8e8e6040518663ffffffff1660e01b815260040161112d959493929190611f3f565b600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b50505050848d73ffffffffffffffffffffffffffffffffffffffff167f3adb63d4fde6845c0b2322e50ebb349a765d70b1756f0c1d1cfa64da74681942428f8f8f8f8b896040516111b29796959493929190611f8e565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009d9c50505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461125e576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000085146112c0576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610617565b83600114611304576040517ff789eb2f0000000000000000000000000000000000000000000000000000000081526004810185905260016024820152604401610617565b73ffffffffffffffffffffffffffffffffffffffff861660009081526006602052604090205460ff161561137c576040517f03a0028700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87166004820152602401610617565b73ffffffffffffffffffffffffffffffffffffffff861660008181526006602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815192835242908301527f2f1cff01c45015e0e6d543724e40ddc5472049fe52ae6a10dda3d2363d38f38b910160405180910390a1507ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b61144a61143a611555565b8261144361155f565b9190611612565b50565b60008061058460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611e15565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016114cb57506000610584565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161151c57506001610584565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610bec611727565b60008061058460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611e15565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146115f8576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610617565b5050565b600082611609858461186e565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461167f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610617565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117215783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b6000333214806117375750601836105b1561174157503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061185d57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d9190611fd2565b1561186757919050565b3391505090565b600081815b84518110156118a95761189f8286838151811061189257611892611e28565b60200260200101516118b1565b9150600101611873565b509392505050565b60008183106118cd5760008281526020849052604090206118dc565b60008381526020839052604090205b9392505050565b82805482825590600052602060002090810192821561191e579160200282015b8281111561191e578235825591602001919060010190611903565b5061192a92915061192e565b5090565b5b8082111561192a576000815560010161192f565b60006020828403121561195557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146118dc57600080fd5b60006020828403121561199757600080fd5b5035919050565b60008083601f8401126119b057600080fd5b50813567ffffffffffffffff8111156119c857600080fd5b6020830191508360208260051b85010111156119e357600080fd5b9250929050565b60008060008060408587031215611a0057600080fd5b843567ffffffffffffffff80821115611a1857600080fd5b611a248883890161199e565b90965094506020870135915080821115611a3d57600080fd5b50611a4a8782880161199e565b95989497509550505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a7a57600080fd5b919050565b60008060408385031215611a9257600080fd5b82359150611aa260208401611a56565b90509250929050565b60008060008060608587031215611ac157600080fd5b843567ffffffffffffffff811115611ad857600080fd5b611ae48782880161199e565b9095509350611af7905060208601611a56565b9396929550929360400135925050565b600060208284031215611b1957600080fd5b6118dc82611a56565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112611b6257600080fd5b8135602067ffffffffffffffff80831115611b7f57611b7f611b22565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715611bc257611bc2611b22565b6040529384526020818701810194908101925087851115611be257600080fd5b6020870191505b84821015611c0257813583529183019190830190611be9565b979650505050505050565b60008060408385031215611c2057600080fd5b823567ffffffffffffffff80821115611c3857600080fd5b611c4486838701611b51565b93506020850135915080821115611c5a57600080fd5b50611c6785828601611b51565b9150509250929050565b60008083601f840112611c8357600080fd5b50813567ffffffffffffffff811115611c9b57600080fd5b6020830191508360208285010111156119e357600080fd5b60008060008060008060008060a0898b031215611ccf57600080fd5b611cd889611a56565b9750611ce660208a01611a56565b9650604089013567ffffffffffffffff80821115611d0357600080fd5b611d0f8c838d0161199e565b909850965060608b0135915080821115611d2857600080fd5b611d348c838d0161199e565b909650945060808b0135915080821115611d4d57600080fd5b50611d5a8b828c01611c71565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611d8757600080fd5b611d9087611a56565b9550611d9e60208801611a56565b94506040870135935060608701359250608087013567ffffffffffffffff811115611dc857600080fd5b611dd489828a01611c71565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561058457610584611de6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e8857611e88611de6565b5060010190565b808202811582820484141761058457610584611de6565b600082611edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561058457610584611de6565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611f2657600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000611f6f606083018688611ef4565b8281036040840152611f82818587611ef4565b98975050505050505050565b87815260a060208201526000611fa860a08301888a611ef4565b8281036040840152611fbb818789611ef4565b606084019590955250506080015295945050505050565b600060208284031215611fe457600080fd5b815180151581146118dc57600080fdfea2646970667358221220fe918149952dfc14a0b9560d5c5a922af5c54e40740bf8c98971dc1f7280374364736f6c63430008160033","opcodes":"PUSH2 0x1A0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x23BB CODESIZE SUB DUP1 PUSH3 0x23BB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x205 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x63 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x5B PUSH3 0xB6 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH3 0x79 DUP2 PUSH3 0x72 PUSH3 0x149 JUMP JUMPDEST SWAP1 PUSH3 0x179 JUMP JUMPDEST POP POP PUSH1 0xC0 SWAP8 SWAP1 SWAP8 MSTORE PUSH1 0xE0 SWAP6 SWAP1 SWAP6 MSTORE PUSH2 0x100 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x160 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH2 0x120 MSTORE PUSH2 0x140 SWAP3 SWAP1 SWAP3 MSTORE AND PUSH1 0xA0 MSTORE PUSH2 0x180 MSTORE PUSH3 0x2B7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x295 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x11B JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x295 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x1D0 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x1E8 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x5B PUSH3 0xB6 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x202 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0x120 DUP11 DUP13 SUB SLT ISZERO PUSH3 0x225 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 MLOAD SWAP9 POP PUSH1 0x20 DUP11 ADD MLOAD SWAP8 POP PUSH1 0x40 DUP11 ADD MLOAD SWAP7 POP PUSH1 0x60 DUP11 ADD MLOAD PUSH3 0x247 DUP2 PUSH3 0x1EC JUMP JUMPDEST PUSH1 0x80 DUP12 ADD MLOAD PUSH1 0xA0 DUP13 ADD MLOAD SWAP2 SWAP8 POP SWAP6 POP PUSH3 0x261 DUP2 PUSH3 0x1EC JUMP JUMPDEST DUP1 SWAP5 POP POP PUSH1 0xC0 DUP11 ADD MLOAD SWAP3 POP PUSH1 0xE0 DUP11 ADD MLOAD SWAP2 POP PUSH2 0x100 DUP11 ADD MLOAD PUSH3 0x284 DUP2 PUSH3 0x1EC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 POP SWAP3 SWAP6 SWAP9 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xE6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x160 MLOAD PUSH2 0x180 MLOAD PUSH2 0x202A PUSH3 0x391 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2A0 ADD MSTORE PUSH2 0xC5D ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x348 ADD MSTORE PUSH2 0xA8C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x251 ADD MSTORE DUP2 DUP2 PUSH2 0x100B ADD MSTORE PUSH2 0x1260 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3CF ADD MSTORE DUP2 DUP2 PUSH2 0xF9B ADD MSTORE PUSH2 0x1207 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x217 ADD MSTORE DUP2 DUP2 PUSH2 0x5BF ADD MSTORE DUP2 DUP2 PUSH2 0x8EF ADD MSTORE PUSH2 0xE52 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x4DA ADD MSTORE PUSH2 0xD80 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x30E ADD MSTORE PUSH2 0xDA4 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x416 ADD MSTORE PUSH2 0xDED ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2C4 ADD MSTORE DUP2 DUP2 PUSH2 0x38D ADD MSTORE DUP2 DUP2 PUSH2 0x176A ADD MSTORE PUSH2 0x17F2 ADD MSTORE PUSH2 0x202A PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x64C19303 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xBAB2F552 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE3A0CE09 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x4FC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xFA9FDC6A EQ PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA5BB3EC1 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0xA9D637E1 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xAD740FA0 EQ PUSH2 0x476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x64C19303 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x70D92882 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x82BFEFC8 EQ PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B093FE9 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x496BAA47 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x496BAA47 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x556C448D EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B093FE9 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4585AC7 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x4585AC7 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x16A3138B EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x1B8EBC3C EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x2099920E EQ PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x39AF9EB EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x212 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1943 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A7F JUMP JUMPDEST PUSH2 0x8DB JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x9B3 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0xBB5 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2E4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0xBC5 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x204 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0x49F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CB3 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x50A CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x286 PUSH2 0x540 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x142F JUMP JUMPDEST PUSH2 0x204 PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x584 DUP3 PUSH2 0x57E PUSH2 0x144D JUMP JUMPDEST SWAP1 PUSH2 0x147B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B5 PUSH2 0xD7C JUMP JUMPDEST DUP3 GT DUP1 PUSH2 0x5E1 JUMPI POP PUSH32 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x620 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x64B JUMPI PUSH1 0x2 PUSH1 0x0 PUSH2 0x637 PUSH1 0x1 DUP7 PUSH2 0x1E15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 SLOAD DUP2 GT PUSH2 0x6C3 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x66F JUMPI PUSH2 0x66F PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT ISZERO PUSH2 0x6B1 JUMPI PUSH1 0x1 PUSH2 0x68D DUP2 DUP4 PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x69D JUMPI PUSH2 0x69D PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x6BB DUP2 PUSH2 0x1E57 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x653 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x6D5 SWAP1 DUP3 SWAP1 PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x711 PUSH2 0x703 PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x155F JUMP JUMPDEST SWAP1 PUSH2 0x158D JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 SWAP1 SUB PUSH2 0x785 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x7BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x65EDD76100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8BA JUMPI DUP5 DUP5 PUSH2 0x7D7 PUSH1 0x1 DUP5 PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x7FF JUMPI PUSH2 0x7FF PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT ISZERO PUSH2 0x83E JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 PUSH2 0x84B PUSH1 0x1 DUP5 PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x85A JUMPI PUSH2 0x85A PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x873 JUMPI PUSH2 0x873 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT ISZERO PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x7C2 JUMP JUMPDEST POP PUSH2 0x8C7 PUSH1 0x0 DUP6 DUP6 PUSH2 0x18E3 JUMP JUMPDEST POP PUSH2 0x8D4 PUSH1 0x1 DUP4 DUP4 PUSH2 0x18E3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E5 PUSH2 0xD7C JUMP JUMPDEST DUP4 GT DUP1 PUSH2 0x911 JUMPI POP PUSH32 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x94B JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x956 DUP5 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP9 DUP5 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x9A0 DUP4 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH2 0x9AA SWAP2 SWAP1 PUSH2 0x1EA6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8084224300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0xAE9 PUSH32 0x0 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x15FC SWAP1 POP JUMP JUMPDEST PUSH2 0xB1F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BDE33900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0xAD13A161261D327D2506101E44C2DD1737E7314CD7ED475A2819BDC64C76B857 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEC PUSH2 0xBD2 PUSH2 0x155F JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0xC23 JUMPI DUP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xC85 JUMPI PUSH2 0xC82 PUSH32 0x0 DUP5 PUSH2 0x1E8F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC97 PUSH2 0x703 PUSH2 0x1555 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xD41 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD04 JUMPI PUSH2 0xD04 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFAF6788700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD53 JUMPI PUSH2 0xD53 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH2 0xCD5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0xDC9 PUSH32 0x0 TIMESTAMP PUSH2 0x1E15 JUMP JUMPDEST PUSH2 0xBEC SWAP2 SWAP1 PUSH2 0x1EA6 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xE44 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE4E PUSH2 0xD7C JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xEAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0xF96 JUMPI PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0xED1 JUMPI PUSH2 0xED1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF5D JUMPI CALLER DUP12 DUP12 DUP5 DUP2 DUP2 LT PUSH2 0xF04 JUMPI PUSH2 0xF04 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST DUP1 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xF81 SWAP2 SWAP1 PUSH2 0x1E8F JUMP JUMPDEST PUSH2 0xF8B SWAP1 DUP5 PUSH2 0x1EE1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xEB1 JUMP JUMPDEST POP PUSH1 0x60 PUSH32 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFCD JUMPI PUSH2 0xFCD PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x60 PUSH32 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x103D JUMPI PUSH2 0x103D PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x1054 DUP14 PUSH2 0xBF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1060 DUP2 DUP6 PUSH2 0x1E8F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10C2 SWAP2 SWAP1 PUSH2 0x1EE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x10E5 SWAP1 DUP5 SWAP1 PUSH2 0x1EE1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3ADB63D4FDE6845C0B2322E50EBB349A765D70B1756F0C1D1CFA64DA74681942 TIMESTAMP DUP16 DUP16 DUP16 DUP16 DUP12 DUP10 PUSH1 0x40 MLOAD PUSH2 0x11B2 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x125E JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 DUP6 EQ PUSH2 0x12C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF789EB2F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x137C JUMPI PUSH1 0x40 MLOAD PUSH32 0x3A0028700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE TIMESTAMP SWAP1 DUP4 ADD MSTORE PUSH32 0x2F1CFF01C45015E0E6D543724E40DDC5472049FE52AE6A10DDA3D2363D38F38B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x144A PUSH2 0x143A PUSH2 0x1555 JUMP JUMPDEST DUP3 PUSH2 0x1443 PUSH2 0x155F JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x584 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1E15 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x14CB JUMPI POP PUSH1 0x0 PUSH2 0x584 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x151C JUMPI POP PUSH1 0x1 PUSH2 0x584 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEC PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x584 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x15F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1609 DUP6 DUP5 PUSH2 0x186E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x167F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1721 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1737 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1741 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x185D JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1839 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x185D SWAP2 SWAP1 PUSH2 0x1FD2 JUMP JUMPDEST ISZERO PUSH2 0x1867 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x18A9 JUMPI PUSH2 0x189F DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1892 JUMPI PUSH2 0x1892 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18B1 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1873 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x18CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x191E JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x191E JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1903 JUMP JUMPDEST POP PUSH2 0x192A SWAP3 SWAP2 POP PUSH2 0x192E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x192A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x192F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x18DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x19B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A24 DUP9 DUP4 DUP10 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4A DUP8 DUP3 DUP9 ADD PUSH2 0x199E JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1AA2 PUSH1 0x20 DUP5 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE4 DUP8 DUP3 DUP9 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH2 0x1AF7 SWAP1 POP PUSH1 0x20 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18DC DUP3 PUSH2 0x1A56 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1B7F JUMPI PUSH2 0x1B7F PUSH2 0x1B22 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x1BC2 JUMPI PUSH2 0x1BC2 PUSH2 0x1B22 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP4 DUP5 MSTORE PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD SWAP5 SWAP1 DUP2 ADD SWAP3 POP DUP8 DUP6 GT ISZERO PUSH2 0x1BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP2 POP JUMPDEST DUP5 DUP3 LT ISZERO PUSH2 0x1C02 JUMPI DUP2 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C44 DUP7 DUP4 DUP8 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C67 DUP6 DUP3 DUP7 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CD8 DUP10 PUSH2 0x1A56 JUMP JUMPDEST SWAP8 POP PUSH2 0x1CE6 PUSH1 0x20 DUP11 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0F DUP13 DUP4 DUP14 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D34 DUP13 DUP4 DUP14 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5A DUP12 DUP3 DUP13 ADD PUSH2 0x1C71 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D90 DUP8 PUSH2 0x1A56 JUMP JUMPDEST SWAP6 POP PUSH2 0x1D9E PUSH1 0x20 DUP9 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD4 DUP10 DUP3 DUP11 ADD PUSH2 0x1C71 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1E88 JUMPI PUSH2 0x1E88 PUSH2 0x1DE6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EDC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1F26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1F6F PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F82 DUP2 DUP6 DUP8 PUSH2 0x1EF4 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1FA8 PUSH1 0xA0 DUP4 ADD DUP9 DUP11 PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1FBB DUP2 DUP8 DUP10 PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18DC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID SWAP2 DUP2 0x49 SWAP6 0x2D 0xFC EQ LOG0 0xB9 JUMP 0xD 0x5C GAS SWAP3 0x2A CREATE2 0xC5 0x4E BLOCKHASH PUSH21 0xBF8C98971DC1F7280374364736F6C634300081600 CALLER ","sourceMap":"1370:13496:26:-:0;;;5742:701;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;6124:10:26;780:103:18;-1:-1:-1;;;878:4:18;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;1008:63:0;1058:12;1008:33;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;6146:26:26::2;::::0;;;;6182:30:::2;::::0;;;;6222:20:::2;::::0;;;;6252:24:::2;::::0;-1:-1:-1;;;;;6286:34:26;;::::2;;::::0;6330:39:::2;::::0;;;;6379:13:::2;;::::0;6402:34:::2;::::0;1370:13496;;1705:174:10;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:10:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:89::-;1567:341;;:::o;14:149:28:-;-1:-1:-1;;;;;107:31:28;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:1019::-;384:6;392;400;408;416;424;432;440;448;501:3;489:9;480:7;476:23;472:33;469:53;;;518:1;515;508:12;469:53;547:9;541:16;531:26;;597:2;586:9;582:18;576:25;566:35;;641:2;630:9;626:18;620:25;610:35;;688:2;677:9;673:18;667:25;701:49;744:5;701:49;:::i;:::-;814:3;799:19;;793:26;864:3;849:19;;843:26;769:5;;-1:-1:-1;793:26:28;-1:-1:-1;878:51:28;843:26;878:51;:::i;:::-;948:7;938:17;;;995:3;984:9;980:19;974:26;964:36;;1040:3;1029:9;1025:19;1019:26;1009:36;;1090:3;1079:9;1075:19;1069:26;1104:51;1147:7;1104:51;:::i;:::-;1174:7;1164:17;;;168:1019;;;;;;;;;;;:::o;1192:225::-;1259:9;;;1280:11;;;1277:134;;;1333:10;1328:3;1324:20;1321:1;1314:31;1368:4;1365:1;1358:15;1396:4;1393:1;1386:15;1192:225;1370:13496:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CYCLE_DURATION_1947":{"entryPoint":null,"id":1947,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1944":{"entryPoint":null,"id":1944,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1950":{"entryPoint":null,"id":1950,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_1960":{"entryPoint":null,"id":1960,"parameterSlots":0,"returnSlots":0},"@MULTIPLIER_TOKEN_1954":{"entryPoint":null,"id":1954,"parameterSlots":0,"returnSlots":0},"@MULTIPLIER_TOKEN_ID_1957":{"entryPoint":null,"id":1957,"parameterSlots":0,"returnSlots":0},"@TOKEN_1941":{"entryPoint":null,"id":1941,"parameterSlots":0,"returnSlots":0},"@TOKEN_MULTIPLIER_1963":{"entryPoint":null,"id":1963,"parameterSlots":0,"returnSlots":0},"@_efficientHash_1899":{"entryPoint":null,"id":1899,"parameterSlots":2,"returnSlots":1},"@_hashPair_1888":{"entryPoint":6321,"id":1888,"parameterSlots":2,"returnSlots":1},"@_msgSender_2164":{"entryPoint":5461,"id":2164,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":5927,"id":652,"parameterSlots":0,"returnSlots":1},"@claimLeaderboardMultiplier_2567":{"entryPoint":2483,"id":2567,"parameterSlots":4,"returnSlots":0},"@claimStatus_1988":{"entryPoint":null,"id":1988,"parameterSlots":0,"returnSlots":0},"@currentCycle_2391":{"entryPoint":3452,"id":2391,"parameterSlots":0,"returnSlots":1},"@enforceIsContractOwner_351":{"entryPoint":5517,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@getCycleReward_2460":{"entryPoint":1451,"id":2460,"parameterSlots":1,"returnSlots":1},"@getMultiplier_2376":{"entryPoint":3057,"id":2376,"parameterSlots":1,"returnSlots":1},"@getUserReward_2508":{"entryPoint":2267,"id":2508,"parameterSlots":2,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":5471,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":5197,"id":531,"parameterSlots":0,"returnSlots":1},"@leaderboardMultiplers_1993":{"entryPoint":null,"id":1993,"parameterSlots":0,"returnSlots":0},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_2812":{"entryPoint":3539,"id":2812,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_2643":{"entryPoint":4589,"id":2643,"parameterSlots":6,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":3013,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1483":{"entryPoint":6254,"id":1483,"parameterSlots":2,"returnSlots":1},"@setTiers_2275":{"entryPoint":1784,"id":2275,"parameterSlots":4,"returnSlots":0},"@setTokensWeight_2339":{"entryPoint":3212,"id":2339,"parameterSlots":2,"returnSlots":0},"@supportsInterface_413":{"entryPoint":1392,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":5243,"id":519,"parameterSlots":2,"returnSlots":1},"@tierRewards_1971":{"entryPoint":2997,"id":1971,"parameterSlots":0,"returnSlots":0},"@tiers_1967":{"entryPoint":1418,"id":1967,"parameterSlots":0,"returnSlots":0},"@tokenMultiplerUnlockStatus_1998":{"entryPoint":null,"id":1998,"parameterSlots":0,"returnSlots":0},"@transferOwnership_291":{"entryPoint":5650,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":5167,"id":79,"parameterSlots":1,"returnSlots":0},"@userAshByCycle_1983":{"entryPoint":null,"id":1983,"parameterSlots":0,"returnSlots":0},"@verify_1422":{"entryPoint":5628,"id":1422,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":6742,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn":{"entryPoint":6993,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":6558,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":7281,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":6919,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":7347,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":7534,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256":{"entryPoint":6827,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":6634,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr":{"entryPoint":7181,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8146,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":6467,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6533,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":6783,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":7924,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":7999,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":8078,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7905,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7846,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7823,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7701,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":7767,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":7654,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":7720,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6946,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:13234:28","nodeType":"YulBlock","src":"0:13234:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"83:263:28","nodeType":"YulBlock","src":"83:263:28","statements":[{"body":{"nativeSrc":"129:16:28","nodeType":"YulBlock","src":"129:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:28","nodeType":"YulLiteral","src":"138:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:28","nodeType":"YulLiteral","src":"141:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:28","nodeType":"YulIdentifier","src":"131:6:28"},"nativeSrc":"131:12:28","nodeType":"YulFunctionCall","src":"131:12:28"},"nativeSrc":"131:12:28","nodeType":"YulExpressionStatement","src":"131:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:28","nodeType":"YulIdentifier","src":"104:7:28"},{"name":"headStart","nativeSrc":"113:9:28","nodeType":"YulIdentifier","src":"113:9:28"}],"functionName":{"name":"sub","nativeSrc":"100:3:28","nodeType":"YulIdentifier","src":"100:3:28"},"nativeSrc":"100:23:28","nodeType":"YulFunctionCall","src":"100:23:28"},{"kind":"number","nativeSrc":"125:2:28","nodeType":"YulLiteral","src":"125:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:28","nodeType":"YulIdentifier","src":"96:3:28"},"nativeSrc":"96:32:28","nodeType":"YulFunctionCall","src":"96:32:28"},"nativeSrc":"93:52:28","nodeType":"YulIf","src":"93:52:28"},{"nativeSrc":"154:36:28","nodeType":"YulVariableDeclaration","src":"154:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:28","nodeType":"YulIdentifier","src":"180:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:28","nodeType":"YulIdentifier","src":"167:12:28"},"nativeSrc":"167:23:28","nodeType":"YulFunctionCall","src":"167:23:28"},"variables":[{"name":"value","nativeSrc":"158:5:28","nodeType":"YulTypedName","src":"158:5:28","type":""}]},{"body":{"nativeSrc":"300:16:28","nodeType":"YulBlock","src":"300:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:28","nodeType":"YulLiteral","src":"309:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:28","nodeType":"YulLiteral","src":"312:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:28","nodeType":"YulIdentifier","src":"302:6:28"},"nativeSrc":"302:12:28","nodeType":"YulFunctionCall","src":"302:12:28"},"nativeSrc":"302:12:28","nodeType":"YulExpressionStatement","src":"302:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:28","nodeType":"YulIdentifier","src":"212:5:28"},{"arguments":[{"name":"value","nativeSrc":"223:5:28","nodeType":"YulIdentifier","src":"223:5:28"},{"kind":"number","nativeSrc":"230:66:28","nodeType":"YulLiteral","src":"230:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:28","nodeType":"YulIdentifier","src":"219:3:28"},"nativeSrc":"219:78:28","nodeType":"YulFunctionCall","src":"219:78:28"}],"functionName":{"name":"eq","nativeSrc":"209:2:28","nodeType":"YulIdentifier","src":"209:2:28"},"nativeSrc":"209:89:28","nodeType":"YulFunctionCall","src":"209:89:28"}],"functionName":{"name":"iszero","nativeSrc":"202:6:28","nodeType":"YulIdentifier","src":"202:6:28"},"nativeSrc":"202:97:28","nodeType":"YulFunctionCall","src":"202:97:28"},"nativeSrc":"199:117:28","nodeType":"YulIf","src":"199:117:28"},{"nativeSrc":"325:15:28","nodeType":"YulAssignment","src":"325:15:28","value":{"name":"value","nativeSrc":"335:5:28","nodeType":"YulIdentifier","src":"335:5:28"},"variableNames":[{"name":"value0","nativeSrc":"325:6:28","nodeType":"YulIdentifier","src":"325:6:28"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:28","nodeType":"YulTypedName","src":"49:9:28","type":""},{"name":"dataEnd","nativeSrc":"60:7:28","nodeType":"YulTypedName","src":"60:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:28","nodeType":"YulTypedName","src":"72:6:28","type":""}],"src":"14:332:28"},{"body":{"nativeSrc":"446:92:28","nodeType":"YulBlock","src":"446:92:28","statements":[{"nativeSrc":"456:26:28","nodeType":"YulAssignment","src":"456:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:28","nodeType":"YulIdentifier","src":"468:9:28"},{"kind":"number","nativeSrc":"479:2:28","nodeType":"YulLiteral","src":"479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:28","nodeType":"YulIdentifier","src":"464:3:28"},"nativeSrc":"464:18:28","nodeType":"YulFunctionCall","src":"464:18:28"},"variableNames":[{"name":"tail","nativeSrc":"456:4:28","nodeType":"YulIdentifier","src":"456:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:28","nodeType":"YulIdentifier","src":"498:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:28","nodeType":"YulIdentifier","src":"523:6:28"}],"functionName":{"name":"iszero","nativeSrc":"516:6:28","nodeType":"YulIdentifier","src":"516:6:28"},"nativeSrc":"516:14:28","nodeType":"YulFunctionCall","src":"516:14:28"}],"functionName":{"name":"iszero","nativeSrc":"509:6:28","nodeType":"YulIdentifier","src":"509:6:28"},"nativeSrc":"509:22:28","nodeType":"YulFunctionCall","src":"509:22:28"}],"functionName":{"name":"mstore","nativeSrc":"491:6:28","nodeType":"YulIdentifier","src":"491:6:28"},"nativeSrc":"491:41:28","nodeType":"YulFunctionCall","src":"491:41:28"},"nativeSrc":"491:41:28","nodeType":"YulExpressionStatement","src":"491:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:28","nodeType":"YulTypedName","src":"415:9:28","type":""},{"name":"value0","nativeSrc":"426:6:28","nodeType":"YulTypedName","src":"426:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:28","nodeType":"YulTypedName","src":"437:4:28","type":""}],"src":"351:187:28"},{"body":{"nativeSrc":"613:110:28","nodeType":"YulBlock","src":"613:110:28","statements":[{"body":{"nativeSrc":"659:16:28","nodeType":"YulBlock","src":"659:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"668:1:28","nodeType":"YulLiteral","src":"668:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"671:1:28","nodeType":"YulLiteral","src":"671:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"661:6:28","nodeType":"YulIdentifier","src":"661:6:28"},"nativeSrc":"661:12:28","nodeType":"YulFunctionCall","src":"661:12:28"},"nativeSrc":"661:12:28","nodeType":"YulExpressionStatement","src":"661:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"634:7:28","nodeType":"YulIdentifier","src":"634:7:28"},{"name":"headStart","nativeSrc":"643:9:28","nodeType":"YulIdentifier","src":"643:9:28"}],"functionName":{"name":"sub","nativeSrc":"630:3:28","nodeType":"YulIdentifier","src":"630:3:28"},"nativeSrc":"630:23:28","nodeType":"YulFunctionCall","src":"630:23:28"},{"kind":"number","nativeSrc":"655:2:28","nodeType":"YulLiteral","src":"655:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"626:3:28","nodeType":"YulIdentifier","src":"626:3:28"},"nativeSrc":"626:32:28","nodeType":"YulFunctionCall","src":"626:32:28"},"nativeSrc":"623:52:28","nodeType":"YulIf","src":"623:52:28"},{"nativeSrc":"684:33:28","nodeType":"YulAssignment","src":"684:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"707:9:28","nodeType":"YulIdentifier","src":"707:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"694:12:28","nodeType":"YulIdentifier","src":"694:12:28"},"nativeSrc":"694:23:28","nodeType":"YulFunctionCall","src":"694:23:28"},"variableNames":[{"name":"value0","nativeSrc":"684:6:28","nodeType":"YulIdentifier","src":"684:6:28"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"543:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"579:9:28","nodeType":"YulTypedName","src":"579:9:28","type":""},{"name":"dataEnd","nativeSrc":"590:7:28","nodeType":"YulTypedName","src":"590:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"602:6:28","nodeType":"YulTypedName","src":"602:6:28","type":""}],"src":"543:180:28"},{"body":{"nativeSrc":"829:76:28","nodeType":"YulBlock","src":"829:76:28","statements":[{"nativeSrc":"839:26:28","nodeType":"YulAssignment","src":"839:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"851:9:28","nodeType":"YulIdentifier","src":"851:9:28"},{"kind":"number","nativeSrc":"862:2:28","nodeType":"YulLiteral","src":"862:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"847:3:28","nodeType":"YulIdentifier","src":"847:3:28"},"nativeSrc":"847:18:28","nodeType":"YulFunctionCall","src":"847:18:28"},"variableNames":[{"name":"tail","nativeSrc":"839:4:28","nodeType":"YulIdentifier","src":"839:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"881:9:28","nodeType":"YulIdentifier","src":"881:9:28"},{"name":"value0","nativeSrc":"892:6:28","nodeType":"YulIdentifier","src":"892:6:28"}],"functionName":{"name":"mstore","nativeSrc":"874:6:28","nodeType":"YulIdentifier","src":"874:6:28"},"nativeSrc":"874:25:28","nodeType":"YulFunctionCall","src":"874:25:28"},"nativeSrc":"874:25:28","nodeType":"YulExpressionStatement","src":"874:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"728:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"798:9:28","nodeType":"YulTypedName","src":"798:9:28","type":""},{"name":"value0","nativeSrc":"809:6:28","nodeType":"YulTypedName","src":"809:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"820:4:28","nodeType":"YulTypedName","src":"820:4:28","type":""}],"src":"728:177:28"},{"body":{"nativeSrc":"994:283:28","nodeType":"YulBlock","src":"994:283:28","statements":[{"body":{"nativeSrc":"1043:16:28","nodeType":"YulBlock","src":"1043:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1052:1:28","nodeType":"YulLiteral","src":"1052:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1055:1:28","nodeType":"YulLiteral","src":"1055:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1045:6:28","nodeType":"YulIdentifier","src":"1045:6:28"},"nativeSrc":"1045:12:28","nodeType":"YulFunctionCall","src":"1045:12:28"},"nativeSrc":"1045:12:28","nodeType":"YulExpressionStatement","src":"1045:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1022:6:28","nodeType":"YulIdentifier","src":"1022:6:28"},{"kind":"number","nativeSrc":"1030:4:28","nodeType":"YulLiteral","src":"1030:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1018:3:28","nodeType":"YulIdentifier","src":"1018:3:28"},"nativeSrc":"1018:17:28","nodeType":"YulFunctionCall","src":"1018:17:28"},{"name":"end","nativeSrc":"1037:3:28","nodeType":"YulIdentifier","src":"1037:3:28"}],"functionName":{"name":"slt","nativeSrc":"1014:3:28","nodeType":"YulIdentifier","src":"1014:3:28"},"nativeSrc":"1014:27:28","nodeType":"YulFunctionCall","src":"1014:27:28"}],"functionName":{"name":"iszero","nativeSrc":"1007:6:28","nodeType":"YulIdentifier","src":"1007:6:28"},"nativeSrc":"1007:35:28","nodeType":"YulFunctionCall","src":"1007:35:28"},"nativeSrc":"1004:55:28","nodeType":"YulIf","src":"1004:55:28"},{"nativeSrc":"1068:30:28","nodeType":"YulAssignment","src":"1068:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"1091:6:28","nodeType":"YulIdentifier","src":"1091:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"1078:12:28","nodeType":"YulIdentifier","src":"1078:12:28"},"nativeSrc":"1078:20:28","nodeType":"YulFunctionCall","src":"1078:20:28"},"variableNames":[{"name":"length","nativeSrc":"1068:6:28","nodeType":"YulIdentifier","src":"1068:6:28"}]},{"body":{"nativeSrc":"1141:16:28","nodeType":"YulBlock","src":"1141:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1150:1:28","nodeType":"YulLiteral","src":"1150:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1153:1:28","nodeType":"YulLiteral","src":"1153:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1143:6:28","nodeType":"YulIdentifier","src":"1143:6:28"},"nativeSrc":"1143:12:28","nodeType":"YulFunctionCall","src":"1143:12:28"},"nativeSrc":"1143:12:28","nodeType":"YulExpressionStatement","src":"1143:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1113:6:28","nodeType":"YulIdentifier","src":"1113:6:28"},{"kind":"number","nativeSrc":"1121:18:28","nodeType":"YulLiteral","src":"1121:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1110:2:28","nodeType":"YulIdentifier","src":"1110:2:28"},"nativeSrc":"1110:30:28","nodeType":"YulFunctionCall","src":"1110:30:28"},"nativeSrc":"1107:50:28","nodeType":"YulIf","src":"1107:50:28"},{"nativeSrc":"1166:29:28","nodeType":"YulAssignment","src":"1166:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"1182:6:28","nodeType":"YulIdentifier","src":"1182:6:28"},{"kind":"number","nativeSrc":"1190:4:28","nodeType":"YulLiteral","src":"1190:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1178:3:28","nodeType":"YulIdentifier","src":"1178:3:28"},"nativeSrc":"1178:17:28","nodeType":"YulFunctionCall","src":"1178:17:28"},"variableNames":[{"name":"arrayPos","nativeSrc":"1166:8:28","nodeType":"YulIdentifier","src":"1166:8:28"}]},{"body":{"nativeSrc":"1255:16:28","nodeType":"YulBlock","src":"1255:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1264:1:28","nodeType":"YulLiteral","src":"1264:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1267:1:28","nodeType":"YulLiteral","src":"1267:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1257:6:28","nodeType":"YulIdentifier","src":"1257:6:28"},"nativeSrc":"1257:12:28","nodeType":"YulFunctionCall","src":"1257:12:28"},"nativeSrc":"1257:12:28","nodeType":"YulExpressionStatement","src":"1257:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1218:6:28","nodeType":"YulIdentifier","src":"1218:6:28"},{"arguments":[{"kind":"number","nativeSrc":"1230:1:28","nodeType":"YulLiteral","src":"1230:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"1233:6:28","nodeType":"YulIdentifier","src":"1233:6:28"}],"functionName":{"name":"shl","nativeSrc":"1226:3:28","nodeType":"YulIdentifier","src":"1226:3:28"},"nativeSrc":"1226:14:28","nodeType":"YulFunctionCall","src":"1226:14:28"}],"functionName":{"name":"add","nativeSrc":"1214:3:28","nodeType":"YulIdentifier","src":"1214:3:28"},"nativeSrc":"1214:27:28","nodeType":"YulFunctionCall","src":"1214:27:28"},{"kind":"number","nativeSrc":"1243:4:28","nodeType":"YulLiteral","src":"1243:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1210:3:28","nodeType":"YulIdentifier","src":"1210:3:28"},"nativeSrc":"1210:38:28","nodeType":"YulFunctionCall","src":"1210:38:28"},{"name":"end","nativeSrc":"1250:3:28","nodeType":"YulIdentifier","src":"1250:3:28"}],"functionName":{"name":"gt","nativeSrc":"1207:2:28","nodeType":"YulIdentifier","src":"1207:2:28"},"nativeSrc":"1207:47:28","nodeType":"YulFunctionCall","src":"1207:47:28"},"nativeSrc":"1204:67:28","nodeType":"YulIf","src":"1204:67:28"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"910:367:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"957:6:28","nodeType":"YulTypedName","src":"957:6:28","type":""},{"name":"end","nativeSrc":"965:3:28","nodeType":"YulTypedName","src":"965:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"973:8:28","nodeType":"YulTypedName","src":"973:8:28","type":""},{"name":"length","nativeSrc":"983:6:28","nodeType":"YulTypedName","src":"983:6:28","type":""}],"src":"910:367:28"},{"body":{"nativeSrc":"1439:616:28","nodeType":"YulBlock","src":"1439:616:28","statements":[{"body":{"nativeSrc":"1485:16:28","nodeType":"YulBlock","src":"1485:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1494:1:28","nodeType":"YulLiteral","src":"1494:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1497:1:28","nodeType":"YulLiteral","src":"1497:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1487:6:28","nodeType":"YulIdentifier","src":"1487:6:28"},"nativeSrc":"1487:12:28","nodeType":"YulFunctionCall","src":"1487:12:28"},"nativeSrc":"1487:12:28","nodeType":"YulExpressionStatement","src":"1487:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1460:7:28","nodeType":"YulIdentifier","src":"1460:7:28"},{"name":"headStart","nativeSrc":"1469:9:28","nodeType":"YulIdentifier","src":"1469:9:28"}],"functionName":{"name":"sub","nativeSrc":"1456:3:28","nodeType":"YulIdentifier","src":"1456:3:28"},"nativeSrc":"1456:23:28","nodeType":"YulFunctionCall","src":"1456:23:28"},{"kind":"number","nativeSrc":"1481:2:28","nodeType":"YulLiteral","src":"1481:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1452:3:28","nodeType":"YulIdentifier","src":"1452:3:28"},"nativeSrc":"1452:32:28","nodeType":"YulFunctionCall","src":"1452:32:28"},"nativeSrc":"1449:52:28","nodeType":"YulIf","src":"1449:52:28"},{"nativeSrc":"1510:37:28","nodeType":"YulVariableDeclaration","src":"1510:37:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1537:9:28","nodeType":"YulIdentifier","src":"1537:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1524:12:28","nodeType":"YulIdentifier","src":"1524:12:28"},"nativeSrc":"1524:23:28","nodeType":"YulFunctionCall","src":"1524:23:28"},"variables":[{"name":"offset","nativeSrc":"1514:6:28","nodeType":"YulTypedName","src":"1514:6:28","type":""}]},{"nativeSrc":"1556:28:28","nodeType":"YulVariableDeclaration","src":"1556:28:28","value":{"kind":"number","nativeSrc":"1566:18:28","nodeType":"YulLiteral","src":"1566:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1560:2:28","nodeType":"YulTypedName","src":"1560:2:28","type":""}]},{"body":{"nativeSrc":"1611:16:28","nodeType":"YulBlock","src":"1611:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1620:1:28","nodeType":"YulLiteral","src":"1620:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1623:1:28","nodeType":"YulLiteral","src":"1623:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1613:6:28","nodeType":"YulIdentifier","src":"1613:6:28"},"nativeSrc":"1613:12:28","nodeType":"YulFunctionCall","src":"1613:12:28"},"nativeSrc":"1613:12:28","nodeType":"YulExpressionStatement","src":"1613:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1599:6:28","nodeType":"YulIdentifier","src":"1599:6:28"},{"name":"_1","nativeSrc":"1607:2:28","nodeType":"YulIdentifier","src":"1607:2:28"}],"functionName":{"name":"gt","nativeSrc":"1596:2:28","nodeType":"YulIdentifier","src":"1596:2:28"},"nativeSrc":"1596:14:28","nodeType":"YulFunctionCall","src":"1596:14:28"},"nativeSrc":"1593:34:28","nodeType":"YulIf","src":"1593:34:28"},{"nativeSrc":"1636:96:28","nodeType":"YulVariableDeclaration","src":"1636:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1704:9:28","nodeType":"YulIdentifier","src":"1704:9:28"},{"name":"offset","nativeSrc":"1715:6:28","nodeType":"YulIdentifier","src":"1715:6:28"}],"functionName":{"name":"add","nativeSrc":"1700:3:28","nodeType":"YulIdentifier","src":"1700:3:28"},"nativeSrc":"1700:22:28","nodeType":"YulFunctionCall","src":"1700:22:28"},{"name":"dataEnd","nativeSrc":"1724:7:28","nodeType":"YulIdentifier","src":"1724:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"1662:37:28","nodeType":"YulIdentifier","src":"1662:37:28"},"nativeSrc":"1662:70:28","nodeType":"YulFunctionCall","src":"1662:70:28"},"variables":[{"name":"value0_1","nativeSrc":"1640:8:28","nodeType":"YulTypedName","src":"1640:8:28","type":""},{"name":"value1_1","nativeSrc":"1650:8:28","nodeType":"YulTypedName","src":"1650:8:28","type":""}]},{"nativeSrc":"1741:18:28","nodeType":"YulAssignment","src":"1741:18:28","value":{"name":"value0_1","nativeSrc":"1751:8:28","nodeType":"YulIdentifier","src":"1751:8:28"},"variableNames":[{"name":"value0","nativeSrc":"1741:6:28","nodeType":"YulIdentifier","src":"1741:6:28"}]},{"nativeSrc":"1768:18:28","nodeType":"YulAssignment","src":"1768:18:28","value":{"name":"value1_1","nativeSrc":"1778:8:28","nodeType":"YulIdentifier","src":"1778:8:28"},"variableNames":[{"name":"value1","nativeSrc":"1768:6:28","nodeType":"YulIdentifier","src":"1768:6:28"}]},{"nativeSrc":"1795:48:28","nodeType":"YulVariableDeclaration","src":"1795:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1828:9:28","nodeType":"YulIdentifier","src":"1828:9:28"},{"kind":"number","nativeSrc":"1839:2:28","nodeType":"YulLiteral","src":"1839:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1824:3:28","nodeType":"YulIdentifier","src":"1824:3:28"},"nativeSrc":"1824:18:28","nodeType":"YulFunctionCall","src":"1824:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"1811:12:28","nodeType":"YulIdentifier","src":"1811:12:28"},"nativeSrc":"1811:32:28","nodeType":"YulFunctionCall","src":"1811:32:28"},"variables":[{"name":"offset_1","nativeSrc":"1799:8:28","nodeType":"YulTypedName","src":"1799:8:28","type":""}]},{"body":{"nativeSrc":"1872:16:28","nodeType":"YulBlock","src":"1872:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1881:1:28","nodeType":"YulLiteral","src":"1881:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1884:1:28","nodeType":"YulLiteral","src":"1884:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1874:6:28","nodeType":"YulIdentifier","src":"1874:6:28"},"nativeSrc":"1874:12:28","nodeType":"YulFunctionCall","src":"1874:12:28"},"nativeSrc":"1874:12:28","nodeType":"YulExpressionStatement","src":"1874:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1858:8:28","nodeType":"YulIdentifier","src":"1858:8:28"},{"name":"_1","nativeSrc":"1868:2:28","nodeType":"YulIdentifier","src":"1868:2:28"}],"functionName":{"name":"gt","nativeSrc":"1855:2:28","nodeType":"YulIdentifier","src":"1855:2:28"},"nativeSrc":"1855:16:28","nodeType":"YulFunctionCall","src":"1855:16:28"},"nativeSrc":"1852:36:28","nodeType":"YulIf","src":"1852:36:28"},{"nativeSrc":"1897:98:28","nodeType":"YulVariableDeclaration","src":"1897:98:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1965:9:28","nodeType":"YulIdentifier","src":"1965:9:28"},{"name":"offset_1","nativeSrc":"1976:8:28","nodeType":"YulIdentifier","src":"1976:8:28"}],"functionName":{"name":"add","nativeSrc":"1961:3:28","nodeType":"YulIdentifier","src":"1961:3:28"},"nativeSrc":"1961:24:28","nodeType":"YulFunctionCall","src":"1961:24:28"},{"name":"dataEnd","nativeSrc":"1987:7:28","nodeType":"YulIdentifier","src":"1987:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"1923:37:28","nodeType":"YulIdentifier","src":"1923:37:28"},"nativeSrc":"1923:72:28","nodeType":"YulFunctionCall","src":"1923:72:28"},"variables":[{"name":"value2_1","nativeSrc":"1901:8:28","nodeType":"YulTypedName","src":"1901:8:28","type":""},{"name":"value3_1","nativeSrc":"1911:8:28","nodeType":"YulTypedName","src":"1911:8:28","type":""}]},{"nativeSrc":"2004:18:28","nodeType":"YulAssignment","src":"2004:18:28","value":{"name":"value2_1","nativeSrc":"2014:8:28","nodeType":"YulIdentifier","src":"2014:8:28"},"variableNames":[{"name":"value2","nativeSrc":"2004:6:28","nodeType":"YulIdentifier","src":"2004:6:28"}]},{"nativeSrc":"2031:18:28","nodeType":"YulAssignment","src":"2031:18:28","value":{"name":"value3_1","nativeSrc":"2041:8:28","nodeType":"YulIdentifier","src":"2041:8:28"},"variableNames":[{"name":"value3","nativeSrc":"2031:6:28","nodeType":"YulIdentifier","src":"2031:6:28"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"1282:773:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1381:9:28","nodeType":"YulTypedName","src":"1381:9:28","type":""},{"name":"dataEnd","nativeSrc":"1392:7:28","nodeType":"YulTypedName","src":"1392:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1404:6:28","nodeType":"YulTypedName","src":"1404:6:28","type":""},{"name":"value1","nativeSrc":"1412:6:28","nodeType":"YulTypedName","src":"1412:6:28","type":""},{"name":"value2","nativeSrc":"1420:6:28","nodeType":"YulTypedName","src":"1420:6:28","type":""},{"name":"value3","nativeSrc":"1428:6:28","nodeType":"YulTypedName","src":"1428:6:28","type":""}],"src":"1282:773:28"},{"body":{"nativeSrc":"2109:147:28","nodeType":"YulBlock","src":"2109:147:28","statements":[{"nativeSrc":"2119:29:28","nodeType":"YulAssignment","src":"2119:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"2141:6:28","nodeType":"YulIdentifier","src":"2141:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"2128:12:28","nodeType":"YulIdentifier","src":"2128:12:28"},"nativeSrc":"2128:20:28","nodeType":"YulFunctionCall","src":"2128:20:28"},"variableNames":[{"name":"value","nativeSrc":"2119:5:28","nodeType":"YulIdentifier","src":"2119:5:28"}]},{"body":{"nativeSrc":"2234:16:28","nodeType":"YulBlock","src":"2234:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2243:1:28","nodeType":"YulLiteral","src":"2243:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2246:1:28","nodeType":"YulLiteral","src":"2246:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2236:6:28","nodeType":"YulIdentifier","src":"2236:6:28"},"nativeSrc":"2236:12:28","nodeType":"YulFunctionCall","src":"2236:12:28"},"nativeSrc":"2236:12:28","nodeType":"YulExpressionStatement","src":"2236:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"2170:5:28","nodeType":"YulIdentifier","src":"2170:5:28"},{"arguments":[{"name":"value","nativeSrc":"2181:5:28","nodeType":"YulIdentifier","src":"2181:5:28"},{"kind":"number","nativeSrc":"2188:42:28","nodeType":"YulLiteral","src":"2188:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2177:3:28","nodeType":"YulIdentifier","src":"2177:3:28"},"nativeSrc":"2177:54:28","nodeType":"YulFunctionCall","src":"2177:54:28"}],"functionName":{"name":"eq","nativeSrc":"2167:2:28","nodeType":"YulIdentifier","src":"2167:2:28"},"nativeSrc":"2167:65:28","nodeType":"YulFunctionCall","src":"2167:65:28"}],"functionName":{"name":"iszero","nativeSrc":"2160:6:28","nodeType":"YulIdentifier","src":"2160:6:28"},"nativeSrc":"2160:73:28","nodeType":"YulFunctionCall","src":"2160:73:28"},"nativeSrc":"2157:93:28","nodeType":"YulIf","src":"2157:93:28"}]},"name":"abi_decode_address","nativeSrc":"2060:196:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2088:6:28","nodeType":"YulTypedName","src":"2088:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"2099:5:28","nodeType":"YulTypedName","src":"2099:5:28","type":""}],"src":"2060:196:28"},{"body":{"nativeSrc":"2348:167:28","nodeType":"YulBlock","src":"2348:167:28","statements":[{"body":{"nativeSrc":"2394:16:28","nodeType":"YulBlock","src":"2394:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2403:1:28","nodeType":"YulLiteral","src":"2403:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2406:1:28","nodeType":"YulLiteral","src":"2406:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2396:6:28","nodeType":"YulIdentifier","src":"2396:6:28"},"nativeSrc":"2396:12:28","nodeType":"YulFunctionCall","src":"2396:12:28"},"nativeSrc":"2396:12:28","nodeType":"YulExpressionStatement","src":"2396:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2369:7:28","nodeType":"YulIdentifier","src":"2369:7:28"},{"name":"headStart","nativeSrc":"2378:9:28","nodeType":"YulIdentifier","src":"2378:9:28"}],"functionName":{"name":"sub","nativeSrc":"2365:3:28","nodeType":"YulIdentifier","src":"2365:3:28"},"nativeSrc":"2365:23:28","nodeType":"YulFunctionCall","src":"2365:23:28"},{"kind":"number","nativeSrc":"2390:2:28","nodeType":"YulLiteral","src":"2390:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2361:3:28","nodeType":"YulIdentifier","src":"2361:3:28"},"nativeSrc":"2361:32:28","nodeType":"YulFunctionCall","src":"2361:32:28"},"nativeSrc":"2358:52:28","nodeType":"YulIf","src":"2358:52:28"},{"nativeSrc":"2419:33:28","nodeType":"YulAssignment","src":"2419:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2442:9:28","nodeType":"YulIdentifier","src":"2442:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"2429:12:28","nodeType":"YulIdentifier","src":"2429:12:28"},"nativeSrc":"2429:23:28","nodeType":"YulFunctionCall","src":"2429:23:28"},"variableNames":[{"name":"value0","nativeSrc":"2419:6:28","nodeType":"YulIdentifier","src":"2419:6:28"}]},{"nativeSrc":"2461:48:28","nodeType":"YulAssignment","src":"2461:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2494:9:28","nodeType":"YulIdentifier","src":"2494:9:28"},{"kind":"number","nativeSrc":"2505:2:28","nodeType":"YulLiteral","src":"2505:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2490:3:28","nodeType":"YulIdentifier","src":"2490:3:28"},"nativeSrc":"2490:18:28","nodeType":"YulFunctionCall","src":"2490:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2471:18:28","nodeType":"YulIdentifier","src":"2471:18:28"},"nativeSrc":"2471:38:28","nodeType":"YulFunctionCall","src":"2471:38:28"},"variableNames":[{"name":"value1","nativeSrc":"2461:6:28","nodeType":"YulIdentifier","src":"2461:6:28"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"2261:254:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2306:9:28","nodeType":"YulTypedName","src":"2306:9:28","type":""},{"name":"dataEnd","nativeSrc":"2317:7:28","nodeType":"YulTypedName","src":"2317:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2329:6:28","nodeType":"YulTypedName","src":"2329:6:28","type":""},{"name":"value1","nativeSrc":"2337:6:28","nodeType":"YulTypedName","src":"2337:6:28","type":""}],"src":"2261:254:28"},{"body":{"nativeSrc":"2647:125:28","nodeType":"YulBlock","src":"2647:125:28","statements":[{"nativeSrc":"2657:26:28","nodeType":"YulAssignment","src":"2657:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2669:9:28","nodeType":"YulIdentifier","src":"2669:9:28"},{"kind":"number","nativeSrc":"2680:2:28","nodeType":"YulLiteral","src":"2680:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2665:3:28","nodeType":"YulIdentifier","src":"2665:3:28"},"nativeSrc":"2665:18:28","nodeType":"YulFunctionCall","src":"2665:18:28"},"variableNames":[{"name":"tail","nativeSrc":"2657:4:28","nodeType":"YulIdentifier","src":"2657:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2699:9:28","nodeType":"YulIdentifier","src":"2699:9:28"},{"arguments":[{"name":"value0","nativeSrc":"2714:6:28","nodeType":"YulIdentifier","src":"2714:6:28"},{"kind":"number","nativeSrc":"2722:42:28","nodeType":"YulLiteral","src":"2722:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2710:3:28","nodeType":"YulIdentifier","src":"2710:3:28"},"nativeSrc":"2710:55:28","nodeType":"YulFunctionCall","src":"2710:55:28"}],"functionName":{"name":"mstore","nativeSrc":"2692:6:28","nodeType":"YulIdentifier","src":"2692:6:28"},"nativeSrc":"2692:74:28","nodeType":"YulFunctionCall","src":"2692:74:28"},"nativeSrc":"2692:74:28","nodeType":"YulExpressionStatement","src":"2692:74:28"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"2520:252:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2616:9:28","nodeType":"YulTypedName","src":"2616:9:28","type":""},{"name":"value0","nativeSrc":"2627:6:28","nodeType":"YulTypedName","src":"2627:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2638:4:28","nodeType":"YulTypedName","src":"2638:4:28","type":""}],"src":"2520:252:28"},{"body":{"nativeSrc":"2916:440:28","nodeType":"YulBlock","src":"2916:440:28","statements":[{"body":{"nativeSrc":"2962:16:28","nodeType":"YulBlock","src":"2962:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2971:1:28","nodeType":"YulLiteral","src":"2971:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2974:1:28","nodeType":"YulLiteral","src":"2974:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2964:6:28","nodeType":"YulIdentifier","src":"2964:6:28"},"nativeSrc":"2964:12:28","nodeType":"YulFunctionCall","src":"2964:12:28"},"nativeSrc":"2964:12:28","nodeType":"YulExpressionStatement","src":"2964:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2937:7:28","nodeType":"YulIdentifier","src":"2937:7:28"},{"name":"headStart","nativeSrc":"2946:9:28","nodeType":"YulIdentifier","src":"2946:9:28"}],"functionName":{"name":"sub","nativeSrc":"2933:3:28","nodeType":"YulIdentifier","src":"2933:3:28"},"nativeSrc":"2933:23:28","nodeType":"YulFunctionCall","src":"2933:23:28"},{"kind":"number","nativeSrc":"2958:2:28","nodeType":"YulLiteral","src":"2958:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2929:3:28","nodeType":"YulIdentifier","src":"2929:3:28"},"nativeSrc":"2929:32:28","nodeType":"YulFunctionCall","src":"2929:32:28"},"nativeSrc":"2926:52:28","nodeType":"YulIf","src":"2926:52:28"},{"nativeSrc":"2987:37:28","nodeType":"YulVariableDeclaration","src":"2987:37:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3014:9:28","nodeType":"YulIdentifier","src":"3014:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"3001:12:28","nodeType":"YulIdentifier","src":"3001:12:28"},"nativeSrc":"3001:23:28","nodeType":"YulFunctionCall","src":"3001:23:28"},"variables":[{"name":"offset","nativeSrc":"2991:6:28","nodeType":"YulTypedName","src":"2991:6:28","type":""}]},{"body":{"nativeSrc":"3067:16:28","nodeType":"YulBlock","src":"3067:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3076:1:28","nodeType":"YulLiteral","src":"3076:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3079:1:28","nodeType":"YulLiteral","src":"3079:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3069:6:28","nodeType":"YulIdentifier","src":"3069:6:28"},"nativeSrc":"3069:12:28","nodeType":"YulFunctionCall","src":"3069:12:28"},"nativeSrc":"3069:12:28","nodeType":"YulExpressionStatement","src":"3069:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3039:6:28","nodeType":"YulIdentifier","src":"3039:6:28"},{"kind":"number","nativeSrc":"3047:18:28","nodeType":"YulLiteral","src":"3047:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3036:2:28","nodeType":"YulIdentifier","src":"3036:2:28"},"nativeSrc":"3036:30:28","nodeType":"YulFunctionCall","src":"3036:30:28"},"nativeSrc":"3033:50:28","nodeType":"YulIf","src":"3033:50:28"},{"nativeSrc":"3092:96:28","nodeType":"YulVariableDeclaration","src":"3092:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3160:9:28","nodeType":"YulIdentifier","src":"3160:9:28"},{"name":"offset","nativeSrc":"3171:6:28","nodeType":"YulIdentifier","src":"3171:6:28"}],"functionName":{"name":"add","nativeSrc":"3156:3:28","nodeType":"YulIdentifier","src":"3156:3:28"},"nativeSrc":"3156:22:28","nodeType":"YulFunctionCall","src":"3156:22:28"},{"name":"dataEnd","nativeSrc":"3180:7:28","nodeType":"YulIdentifier","src":"3180:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3118:37:28","nodeType":"YulIdentifier","src":"3118:37:28"},"nativeSrc":"3118:70:28","nodeType":"YulFunctionCall","src":"3118:70:28"},"variables":[{"name":"value0_1","nativeSrc":"3096:8:28","nodeType":"YulTypedName","src":"3096:8:28","type":""},{"name":"value1_1","nativeSrc":"3106:8:28","nodeType":"YulTypedName","src":"3106:8:28","type":""}]},{"nativeSrc":"3197:18:28","nodeType":"YulAssignment","src":"3197:18:28","value":{"name":"value0_1","nativeSrc":"3207:8:28","nodeType":"YulIdentifier","src":"3207:8:28"},"variableNames":[{"name":"value0","nativeSrc":"3197:6:28","nodeType":"YulIdentifier","src":"3197:6:28"}]},{"nativeSrc":"3224:18:28","nodeType":"YulAssignment","src":"3224:18:28","value":{"name":"value1_1","nativeSrc":"3234:8:28","nodeType":"YulIdentifier","src":"3234:8:28"},"variableNames":[{"name":"value1","nativeSrc":"3224:6:28","nodeType":"YulIdentifier","src":"3224:6:28"}]},{"nativeSrc":"3251:48:28","nodeType":"YulAssignment","src":"3251:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3284:9:28","nodeType":"YulIdentifier","src":"3284:9:28"},{"kind":"number","nativeSrc":"3295:2:28","nodeType":"YulLiteral","src":"3295:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3280:3:28","nodeType":"YulIdentifier","src":"3280:3:28"},"nativeSrc":"3280:18:28","nodeType":"YulFunctionCall","src":"3280:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3261:18:28","nodeType":"YulIdentifier","src":"3261:18:28"},"nativeSrc":"3261:38:28","nodeType":"YulFunctionCall","src":"3261:38:28"},"variableNames":[{"name":"value2","nativeSrc":"3251:6:28","nodeType":"YulIdentifier","src":"3251:6:28"}]},{"nativeSrc":"3308:42:28","nodeType":"YulAssignment","src":"3308:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3335:9:28","nodeType":"YulIdentifier","src":"3335:9:28"},{"kind":"number","nativeSrc":"3346:2:28","nodeType":"YulLiteral","src":"3346:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3331:3:28","nodeType":"YulIdentifier","src":"3331:3:28"},"nativeSrc":"3331:18:28","nodeType":"YulFunctionCall","src":"3331:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3318:12:28","nodeType":"YulIdentifier","src":"3318:12:28"},"nativeSrc":"3318:32:28","nodeType":"YulFunctionCall","src":"3318:32:28"},"variableNames":[{"name":"value3","nativeSrc":"3308:6:28","nodeType":"YulIdentifier","src":"3308:6:28"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256","nativeSrc":"2777:579:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2858:9:28","nodeType":"YulTypedName","src":"2858:9:28","type":""},{"name":"dataEnd","nativeSrc":"2869:7:28","nodeType":"YulTypedName","src":"2869:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2881:6:28","nodeType":"YulTypedName","src":"2881:6:28","type":""},{"name":"value1","nativeSrc":"2889:6:28","nodeType":"YulTypedName","src":"2889:6:28","type":""},{"name":"value2","nativeSrc":"2897:6:28","nodeType":"YulTypedName","src":"2897:6:28","type":""},{"name":"value3","nativeSrc":"2905:6:28","nodeType":"YulTypedName","src":"2905:6:28","type":""}],"src":"2777:579:28"},{"body":{"nativeSrc":"3462:76:28","nodeType":"YulBlock","src":"3462:76:28","statements":[{"nativeSrc":"3472:26:28","nodeType":"YulAssignment","src":"3472:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3484:9:28","nodeType":"YulIdentifier","src":"3484:9:28"},{"kind":"number","nativeSrc":"3495:2:28","nodeType":"YulLiteral","src":"3495:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3480:3:28","nodeType":"YulIdentifier","src":"3480:3:28"},"nativeSrc":"3480:18:28","nodeType":"YulFunctionCall","src":"3480:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3472:4:28","nodeType":"YulIdentifier","src":"3472:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3514:9:28","nodeType":"YulIdentifier","src":"3514:9:28"},{"name":"value0","nativeSrc":"3525:6:28","nodeType":"YulIdentifier","src":"3525:6:28"}],"functionName":{"name":"mstore","nativeSrc":"3507:6:28","nodeType":"YulIdentifier","src":"3507:6:28"},"nativeSrc":"3507:25:28","nodeType":"YulFunctionCall","src":"3507:25:28"},"nativeSrc":"3507:25:28","nodeType":"YulExpressionStatement","src":"3507:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"3361:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3431:9:28","nodeType":"YulTypedName","src":"3431:9:28","type":""},{"name":"value0","nativeSrc":"3442:6:28","nodeType":"YulTypedName","src":"3442:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3453:4:28","nodeType":"YulTypedName","src":"3453:4:28","type":""}],"src":"3361:177:28"},{"body":{"nativeSrc":"3613:116:28","nodeType":"YulBlock","src":"3613:116:28","statements":[{"body":{"nativeSrc":"3659:16:28","nodeType":"YulBlock","src":"3659:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3668:1:28","nodeType":"YulLiteral","src":"3668:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3671:1:28","nodeType":"YulLiteral","src":"3671:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3661:6:28","nodeType":"YulIdentifier","src":"3661:6:28"},"nativeSrc":"3661:12:28","nodeType":"YulFunctionCall","src":"3661:12:28"},"nativeSrc":"3661:12:28","nodeType":"YulExpressionStatement","src":"3661:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3634:7:28","nodeType":"YulIdentifier","src":"3634:7:28"},{"name":"headStart","nativeSrc":"3643:9:28","nodeType":"YulIdentifier","src":"3643:9:28"}],"functionName":{"name":"sub","nativeSrc":"3630:3:28","nodeType":"YulIdentifier","src":"3630:3:28"},"nativeSrc":"3630:23:28","nodeType":"YulFunctionCall","src":"3630:23:28"},{"kind":"number","nativeSrc":"3655:2:28","nodeType":"YulLiteral","src":"3655:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3626:3:28","nodeType":"YulIdentifier","src":"3626:3:28"},"nativeSrc":"3626:32:28","nodeType":"YulFunctionCall","src":"3626:32:28"},"nativeSrc":"3623:52:28","nodeType":"YulIf","src":"3623:52:28"},{"nativeSrc":"3684:39:28","nodeType":"YulAssignment","src":"3684:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3713:9:28","nodeType":"YulIdentifier","src":"3713:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3694:18:28","nodeType":"YulIdentifier","src":"3694:18:28"},"nativeSrc":"3694:29:28","nodeType":"YulFunctionCall","src":"3694:29:28"},"variableNames":[{"name":"value0","nativeSrc":"3684:6:28","nodeType":"YulIdentifier","src":"3684:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3543:186:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3579:9:28","nodeType":"YulTypedName","src":"3579:9:28","type":""},{"name":"dataEnd","nativeSrc":"3590:7:28","nodeType":"YulTypedName","src":"3590:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3602:6:28","nodeType":"YulTypedName","src":"3602:6:28","type":""}],"src":"3543:186:28"},{"body":{"nativeSrc":"3859:125:28","nodeType":"YulBlock","src":"3859:125:28","statements":[{"nativeSrc":"3869:26:28","nodeType":"YulAssignment","src":"3869:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3881:9:28","nodeType":"YulIdentifier","src":"3881:9:28"},{"kind":"number","nativeSrc":"3892:2:28","nodeType":"YulLiteral","src":"3892:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3877:3:28","nodeType":"YulIdentifier","src":"3877:3:28"},"nativeSrc":"3877:18:28","nodeType":"YulFunctionCall","src":"3877:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3869:4:28","nodeType":"YulIdentifier","src":"3869:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3911:9:28","nodeType":"YulIdentifier","src":"3911:9:28"},{"arguments":[{"name":"value0","nativeSrc":"3926:6:28","nodeType":"YulIdentifier","src":"3926:6:28"},{"kind":"number","nativeSrc":"3934:42:28","nodeType":"YulLiteral","src":"3934:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3922:3:28","nodeType":"YulIdentifier","src":"3922:3:28"},"nativeSrc":"3922:55:28","nodeType":"YulFunctionCall","src":"3922:55:28"}],"functionName":{"name":"mstore","nativeSrc":"3904:6:28","nodeType":"YulIdentifier","src":"3904:6:28"},"nativeSrc":"3904:74:28","nodeType":"YulFunctionCall","src":"3904:74:28"},"nativeSrc":"3904:74:28","nodeType":"YulExpressionStatement","src":"3904:74:28"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed","nativeSrc":"3734:250:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3828:9:28","nodeType":"YulTypedName","src":"3828:9:28","type":""},{"name":"value0","nativeSrc":"3839:6:28","nodeType":"YulTypedName","src":"3839:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3850:4:28","nodeType":"YulTypedName","src":"3850:4:28","type":""}],"src":"3734:250:28"},{"body":{"nativeSrc":"4090:125:28","nodeType":"YulBlock","src":"4090:125:28","statements":[{"nativeSrc":"4100:26:28","nodeType":"YulAssignment","src":"4100:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4112:9:28","nodeType":"YulIdentifier","src":"4112:9:28"},{"kind":"number","nativeSrc":"4123:2:28","nodeType":"YulLiteral","src":"4123:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4108:3:28","nodeType":"YulIdentifier","src":"4108:3:28"},"nativeSrc":"4108:18:28","nodeType":"YulFunctionCall","src":"4108:18:28"},"variableNames":[{"name":"tail","nativeSrc":"4100:4:28","nodeType":"YulIdentifier","src":"4100:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4142:9:28","nodeType":"YulIdentifier","src":"4142:9:28"},{"arguments":[{"name":"value0","nativeSrc":"4157:6:28","nodeType":"YulIdentifier","src":"4157:6:28"},{"kind":"number","nativeSrc":"4165:42:28","nodeType":"YulLiteral","src":"4165:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4153:3:28","nodeType":"YulIdentifier","src":"4153:3:28"},"nativeSrc":"4153:55:28","nodeType":"YulFunctionCall","src":"4153:55:28"}],"functionName":{"name":"mstore","nativeSrc":"4135:6:28","nodeType":"YulIdentifier","src":"4135:6:28"},"nativeSrc":"4135:74:28","nodeType":"YulFunctionCall","src":"4135:74:28"},"nativeSrc":"4135:74:28","nodeType":"YulExpressionStatement","src":"4135:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3989:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4059:9:28","nodeType":"YulTypedName","src":"4059:9:28","type":""},{"name":"value0","nativeSrc":"4070:6:28","nodeType":"YulTypedName","src":"4070:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4081:4:28","nodeType":"YulTypedName","src":"4081:4:28","type":""}],"src":"3989:226:28"},{"body":{"nativeSrc":"4252:152:28","nodeType":"YulBlock","src":"4252:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4269:1:28","nodeType":"YulLiteral","src":"4269:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4272:77:28","nodeType":"YulLiteral","src":"4272:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4262:6:28","nodeType":"YulIdentifier","src":"4262:6:28"},"nativeSrc":"4262:88:28","nodeType":"YulFunctionCall","src":"4262:88:28"},"nativeSrc":"4262:88:28","nodeType":"YulExpressionStatement","src":"4262:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4366:1:28","nodeType":"YulLiteral","src":"4366:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"4369:4:28","nodeType":"YulLiteral","src":"4369:4:28","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"4359:6:28","nodeType":"YulIdentifier","src":"4359:6:28"},"nativeSrc":"4359:15:28","nodeType":"YulFunctionCall","src":"4359:15:28"},"nativeSrc":"4359:15:28","nodeType":"YulExpressionStatement","src":"4359:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4390:1:28","nodeType":"YulLiteral","src":"4390:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4393:4:28","nodeType":"YulLiteral","src":"4393:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"4383:6:28","nodeType":"YulIdentifier","src":"4383:6:28"},"nativeSrc":"4383:15:28","nodeType":"YulFunctionCall","src":"4383:15:28"},"nativeSrc":"4383:15:28","nodeType":"YulExpressionStatement","src":"4383:15:28"}]},"name":"panic_error_0x41","nativeSrc":"4220:184:28","nodeType":"YulFunctionDefinition","src":"4220:184:28"},{"body":{"nativeSrc":"4473:903:28","nodeType":"YulBlock","src":"4473:903:28","statements":[{"body":{"nativeSrc":"4522:16:28","nodeType":"YulBlock","src":"4522:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4531:1:28","nodeType":"YulLiteral","src":"4531:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4534:1:28","nodeType":"YulLiteral","src":"4534:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4524:6:28","nodeType":"YulIdentifier","src":"4524:6:28"},"nativeSrc":"4524:12:28","nodeType":"YulFunctionCall","src":"4524:12:28"},"nativeSrc":"4524:12:28","nodeType":"YulExpressionStatement","src":"4524:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4501:6:28","nodeType":"YulIdentifier","src":"4501:6:28"},{"kind":"number","nativeSrc":"4509:4:28","nodeType":"YulLiteral","src":"4509:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4497:3:28","nodeType":"YulIdentifier","src":"4497:3:28"},"nativeSrc":"4497:17:28","nodeType":"YulFunctionCall","src":"4497:17:28"},{"name":"end","nativeSrc":"4516:3:28","nodeType":"YulIdentifier","src":"4516:3:28"}],"functionName":{"name":"slt","nativeSrc":"4493:3:28","nodeType":"YulIdentifier","src":"4493:3:28"},"nativeSrc":"4493:27:28","nodeType":"YulFunctionCall","src":"4493:27:28"}],"functionName":{"name":"iszero","nativeSrc":"4486:6:28","nodeType":"YulIdentifier","src":"4486:6:28"},"nativeSrc":"4486:35:28","nodeType":"YulFunctionCall","src":"4486:35:28"},"nativeSrc":"4483:55:28","nodeType":"YulIf","src":"4483:55:28"},{"nativeSrc":"4547:30:28","nodeType":"YulVariableDeclaration","src":"4547:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"4570:6:28","nodeType":"YulIdentifier","src":"4570:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"4557:12:28","nodeType":"YulIdentifier","src":"4557:12:28"},"nativeSrc":"4557:20:28","nodeType":"YulFunctionCall","src":"4557:20:28"},"variables":[{"name":"_1","nativeSrc":"4551:2:28","nodeType":"YulTypedName","src":"4551:2:28","type":""}]},{"nativeSrc":"4586:14:28","nodeType":"YulVariableDeclaration","src":"4586:14:28","value":{"kind":"number","nativeSrc":"4596:4:28","nodeType":"YulLiteral","src":"4596:4:28","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"4590:2:28","nodeType":"YulTypedName","src":"4590:2:28","type":""}]},{"nativeSrc":"4609:28:28","nodeType":"YulVariableDeclaration","src":"4609:28:28","value":{"kind":"number","nativeSrc":"4619:18:28","nodeType":"YulLiteral","src":"4619:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_3","nativeSrc":"4613:2:28","nodeType":"YulTypedName","src":"4613:2:28","type":""}]},{"body":{"nativeSrc":"4660:22:28","nodeType":"YulBlock","src":"4660:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4662:16:28","nodeType":"YulIdentifier","src":"4662:16:28"},"nativeSrc":"4662:18:28","nodeType":"YulFunctionCall","src":"4662:18:28"},"nativeSrc":"4662:18:28","nodeType":"YulExpressionStatement","src":"4662:18:28"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"4652:2:28","nodeType":"YulIdentifier","src":"4652:2:28"},{"name":"_3","nativeSrc":"4656:2:28","nodeType":"YulIdentifier","src":"4656:2:28"}],"functionName":{"name":"gt","nativeSrc":"4649:2:28","nodeType":"YulIdentifier","src":"4649:2:28"},"nativeSrc":"4649:10:28","nodeType":"YulFunctionCall","src":"4649:10:28"},"nativeSrc":"4646:36:28","nodeType":"YulIf","src":"4646:36:28"},{"nativeSrc":"4691:20:28","nodeType":"YulVariableDeclaration","src":"4691:20:28","value":{"arguments":[{"kind":"number","nativeSrc":"4705:1:28","nodeType":"YulLiteral","src":"4705:1:28","type":"","value":"5"},{"name":"_1","nativeSrc":"4708:2:28","nodeType":"YulIdentifier","src":"4708:2:28"}],"functionName":{"name":"shl","nativeSrc":"4701:3:28","nodeType":"YulIdentifier","src":"4701:3:28"},"nativeSrc":"4701:10:28","nodeType":"YulFunctionCall","src":"4701:10:28"},"variables":[{"name":"_4","nativeSrc":"4695:2:28","nodeType":"YulTypedName","src":"4695:2:28","type":""}]},{"nativeSrc":"4720:23:28","nodeType":"YulVariableDeclaration","src":"4720:23:28","value":{"arguments":[{"kind":"number","nativeSrc":"4740:2:28","nodeType":"YulLiteral","src":"4740:2:28","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"4734:5:28","nodeType":"YulIdentifier","src":"4734:5:28"},"nativeSrc":"4734:9:28","nodeType":"YulFunctionCall","src":"4734:9:28"},"variables":[{"name":"memPtr","nativeSrc":"4724:6:28","nodeType":"YulTypedName","src":"4724:6:28","type":""}]},{"nativeSrc":"4752:115:28","nodeType":"YulVariableDeclaration","src":"4752:115:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"4774:6:28","nodeType":"YulIdentifier","src":"4774:6:28"},{"arguments":[{"arguments":[{"name":"_4","nativeSrc":"4790:2:28","nodeType":"YulIdentifier","src":"4790:2:28"},{"kind":"number","nativeSrc":"4794:2:28","nodeType":"YulLiteral","src":"4794:2:28","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"4786:3:28","nodeType":"YulIdentifier","src":"4786:3:28"},"nativeSrc":"4786:11:28","nodeType":"YulFunctionCall","src":"4786:11:28"},{"kind":"number","nativeSrc":"4799:66:28","nodeType":"YulLiteral","src":"4799:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"4782:3:28","nodeType":"YulIdentifier","src":"4782:3:28"},"nativeSrc":"4782:84:28","nodeType":"YulFunctionCall","src":"4782:84:28"}],"functionName":{"name":"add","nativeSrc":"4770:3:28","nodeType":"YulIdentifier","src":"4770:3:28"},"nativeSrc":"4770:97:28","nodeType":"YulFunctionCall","src":"4770:97:28"},"variables":[{"name":"newFreePtr","nativeSrc":"4756:10:28","nodeType":"YulTypedName","src":"4756:10:28","type":""}]},{"body":{"nativeSrc":"4926:22:28","nodeType":"YulBlock","src":"4926:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"4928:16:28","nodeType":"YulIdentifier","src":"4928:16:28"},"nativeSrc":"4928:18:28","nodeType":"YulFunctionCall","src":"4928:18:28"},"nativeSrc":"4928:18:28","nodeType":"YulExpressionStatement","src":"4928:18:28"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"4885:10:28","nodeType":"YulIdentifier","src":"4885:10:28"},{"name":"_3","nativeSrc":"4897:2:28","nodeType":"YulIdentifier","src":"4897:2:28"}],"functionName":{"name":"gt","nativeSrc":"4882:2:28","nodeType":"YulIdentifier","src":"4882:2:28"},"nativeSrc":"4882:18:28","nodeType":"YulFunctionCall","src":"4882:18:28"},{"arguments":[{"name":"newFreePtr","nativeSrc":"4905:10:28","nodeType":"YulIdentifier","src":"4905:10:28"},{"name":"memPtr","nativeSrc":"4917:6:28","nodeType":"YulIdentifier","src":"4917:6:28"}],"functionName":{"name":"lt","nativeSrc":"4902:2:28","nodeType":"YulIdentifier","src":"4902:2:28"},"nativeSrc":"4902:22:28","nodeType":"YulFunctionCall","src":"4902:22:28"}],"functionName":{"name":"or","nativeSrc":"4879:2:28","nodeType":"YulIdentifier","src":"4879:2:28"},"nativeSrc":"4879:46:28","nodeType":"YulFunctionCall","src":"4879:46:28"},"nativeSrc":"4876:72:28","nodeType":"YulIf","src":"4876:72:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4964:2:28","nodeType":"YulLiteral","src":"4964:2:28","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"4968:10:28","nodeType":"YulIdentifier","src":"4968:10:28"}],"functionName":{"name":"mstore","nativeSrc":"4957:6:28","nodeType":"YulIdentifier","src":"4957:6:28"},"nativeSrc":"4957:22:28","nodeType":"YulFunctionCall","src":"4957:22:28"},"nativeSrc":"4957:22:28","nodeType":"YulExpressionStatement","src":"4957:22:28"},{"nativeSrc":"4988:17:28","nodeType":"YulVariableDeclaration","src":"4988:17:28","value":{"name":"memPtr","nativeSrc":"4999:6:28","nodeType":"YulIdentifier","src":"4999:6:28"},"variables":[{"name":"dst","nativeSrc":"4992:3:28","nodeType":"YulTypedName","src":"4992:3:28","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"5021:6:28","nodeType":"YulIdentifier","src":"5021:6:28"},{"name":"_1","nativeSrc":"5029:2:28","nodeType":"YulIdentifier","src":"5029:2:28"}],"functionName":{"name":"mstore","nativeSrc":"5014:6:28","nodeType":"YulIdentifier","src":"5014:6:28"},"nativeSrc":"5014:18:28","nodeType":"YulFunctionCall","src":"5014:18:28"},"nativeSrc":"5014:18:28","nodeType":"YulExpressionStatement","src":"5014:18:28"},{"nativeSrc":"5041:24:28","nodeType":"YulAssignment","src":"5041:24:28","value":{"arguments":[{"name":"memPtr","nativeSrc":"5052:6:28","nodeType":"YulIdentifier","src":"5052:6:28"},{"kind":"number","nativeSrc":"5060:4:28","nodeType":"YulLiteral","src":"5060:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5048:3:28","nodeType":"YulIdentifier","src":"5048:3:28"},"nativeSrc":"5048:17:28","nodeType":"YulFunctionCall","src":"5048:17:28"},"variableNames":[{"name":"dst","nativeSrc":"5041:3:28","nodeType":"YulIdentifier","src":"5041:3:28"}]},{"nativeSrc":"5074:40:28","nodeType":"YulVariableDeclaration","src":"5074:40:28","value":{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"5096:6:28","nodeType":"YulIdentifier","src":"5096:6:28"},{"name":"_4","nativeSrc":"5104:2:28","nodeType":"YulIdentifier","src":"5104:2:28"}],"functionName":{"name":"add","nativeSrc":"5092:3:28","nodeType":"YulIdentifier","src":"5092:3:28"},"nativeSrc":"5092:15:28","nodeType":"YulFunctionCall","src":"5092:15:28"},{"kind":"number","nativeSrc":"5109:4:28","nodeType":"YulLiteral","src":"5109:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5088:3:28","nodeType":"YulIdentifier","src":"5088:3:28"},"nativeSrc":"5088:26:28","nodeType":"YulFunctionCall","src":"5088:26:28"},"variables":[{"name":"srcEnd","nativeSrc":"5078:6:28","nodeType":"YulTypedName","src":"5078:6:28","type":""}]},{"body":{"nativeSrc":"5142:16:28","nodeType":"YulBlock","src":"5142:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5151:1:28","nodeType":"YulLiteral","src":"5151:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5154:1:28","nodeType":"YulLiteral","src":"5154:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5144:6:28","nodeType":"YulIdentifier","src":"5144:6:28"},"nativeSrc":"5144:12:28","nodeType":"YulFunctionCall","src":"5144:12:28"},"nativeSrc":"5144:12:28","nodeType":"YulExpressionStatement","src":"5144:12:28"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"5129:6:28","nodeType":"YulIdentifier","src":"5129:6:28"},{"name":"end","nativeSrc":"5137:3:28","nodeType":"YulIdentifier","src":"5137:3:28"}],"functionName":{"name":"gt","nativeSrc":"5126:2:28","nodeType":"YulIdentifier","src":"5126:2:28"},"nativeSrc":"5126:15:28","nodeType":"YulFunctionCall","src":"5126:15:28"},"nativeSrc":"5123:35:28","nodeType":"YulIf","src":"5123:35:28"},{"nativeSrc":"5167:28:28","nodeType":"YulVariableDeclaration","src":"5167:28:28","value":{"arguments":[{"name":"offset","nativeSrc":"5182:6:28","nodeType":"YulIdentifier","src":"5182:6:28"},{"kind":"number","nativeSrc":"5190:4:28","nodeType":"YulLiteral","src":"5190:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"5178:3:28","nodeType":"YulIdentifier","src":"5178:3:28"},"nativeSrc":"5178:17:28","nodeType":"YulFunctionCall","src":"5178:17:28"},"variables":[{"name":"src","nativeSrc":"5171:3:28","nodeType":"YulTypedName","src":"5171:3:28","type":""}]},{"body":{"nativeSrc":"5260:86:28","nodeType":"YulBlock","src":"5260:86:28","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"5281:3:28","nodeType":"YulIdentifier","src":"5281:3:28"},{"arguments":[{"name":"src","nativeSrc":"5299:3:28","nodeType":"YulIdentifier","src":"5299:3:28"}],"functionName":{"name":"calldataload","nativeSrc":"5286:12:28","nodeType":"YulIdentifier","src":"5286:12:28"},"nativeSrc":"5286:17:28","nodeType":"YulFunctionCall","src":"5286:17:28"}],"functionName":{"name":"mstore","nativeSrc":"5274:6:28","nodeType":"YulIdentifier","src":"5274:6:28"},"nativeSrc":"5274:30:28","nodeType":"YulFunctionCall","src":"5274:30:28"},"nativeSrc":"5274:30:28","nodeType":"YulExpressionStatement","src":"5274:30:28"},{"nativeSrc":"5317:19:28","nodeType":"YulAssignment","src":"5317:19:28","value":{"arguments":[{"name":"dst","nativeSrc":"5328:3:28","nodeType":"YulIdentifier","src":"5328:3:28"},{"name":"_2","nativeSrc":"5333:2:28","nodeType":"YulIdentifier","src":"5333:2:28"}],"functionName":{"name":"add","nativeSrc":"5324:3:28","nodeType":"YulIdentifier","src":"5324:3:28"},"nativeSrc":"5324:12:28","nodeType":"YulFunctionCall","src":"5324:12:28"},"variableNames":[{"name":"dst","nativeSrc":"5317:3:28","nodeType":"YulIdentifier","src":"5317:3:28"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"5215:3:28","nodeType":"YulIdentifier","src":"5215:3:28"},{"name":"srcEnd","nativeSrc":"5220:6:28","nodeType":"YulIdentifier","src":"5220:6:28"}],"functionName":{"name":"lt","nativeSrc":"5212:2:28","nodeType":"YulIdentifier","src":"5212:2:28"},"nativeSrc":"5212:15:28","nodeType":"YulFunctionCall","src":"5212:15:28"},"nativeSrc":"5204:142:28","nodeType":"YulForLoop","post":{"nativeSrc":"5228:23:28","nodeType":"YulBlock","src":"5228:23:28","statements":[{"nativeSrc":"5230:19:28","nodeType":"YulAssignment","src":"5230:19:28","value":{"arguments":[{"name":"src","nativeSrc":"5241:3:28","nodeType":"YulIdentifier","src":"5241:3:28"},{"name":"_2","nativeSrc":"5246:2:28","nodeType":"YulIdentifier","src":"5246:2:28"}],"functionName":{"name":"add","nativeSrc":"5237:3:28","nodeType":"YulIdentifier","src":"5237:3:28"},"nativeSrc":"5237:12:28","nodeType":"YulFunctionCall","src":"5237:12:28"},"variableNames":[{"name":"src","nativeSrc":"5230:3:28","nodeType":"YulIdentifier","src":"5230:3:28"}]}]},"pre":{"nativeSrc":"5208:3:28","nodeType":"YulBlock","src":"5208:3:28","statements":[]},"src":"5204:142:28"},{"nativeSrc":"5355:15:28","nodeType":"YulAssignment","src":"5355:15:28","value":{"name":"memPtr","nativeSrc":"5364:6:28","nodeType":"YulIdentifier","src":"5364:6:28"},"variableNames":[{"name":"array","nativeSrc":"5355:5:28","nodeType":"YulIdentifier","src":"5355:5:28"}]}]},"name":"abi_decode_array_uint256_dyn","nativeSrc":"4409:967:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4447:6:28","nodeType":"YulTypedName","src":"4447:6:28","type":""},{"name":"end","nativeSrc":"4455:3:28","nodeType":"YulTypedName","src":"4455:3:28","type":""}],"returnVariables":[{"name":"array","nativeSrc":"4463:5:28","nodeType":"YulTypedName","src":"4463:5:28","type":""}],"src":"4409:967:28"},{"body":{"nativeSrc":"5518:458:28","nodeType":"YulBlock","src":"5518:458:28","statements":[{"body":{"nativeSrc":"5564:16:28","nodeType":"YulBlock","src":"5564:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5573:1:28","nodeType":"YulLiteral","src":"5573:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5576:1:28","nodeType":"YulLiteral","src":"5576:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5566:6:28","nodeType":"YulIdentifier","src":"5566:6:28"},"nativeSrc":"5566:12:28","nodeType":"YulFunctionCall","src":"5566:12:28"},"nativeSrc":"5566:12:28","nodeType":"YulExpressionStatement","src":"5566:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5539:7:28","nodeType":"YulIdentifier","src":"5539:7:28"},{"name":"headStart","nativeSrc":"5548:9:28","nodeType":"YulIdentifier","src":"5548:9:28"}],"functionName":{"name":"sub","nativeSrc":"5535:3:28","nodeType":"YulIdentifier","src":"5535:3:28"},"nativeSrc":"5535:23:28","nodeType":"YulFunctionCall","src":"5535:23:28"},{"kind":"number","nativeSrc":"5560:2:28","nodeType":"YulLiteral","src":"5560:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5531:3:28","nodeType":"YulIdentifier","src":"5531:3:28"},"nativeSrc":"5531:32:28","nodeType":"YulFunctionCall","src":"5531:32:28"},"nativeSrc":"5528:52:28","nodeType":"YulIf","src":"5528:52:28"},{"nativeSrc":"5589:37:28","nodeType":"YulVariableDeclaration","src":"5589:37:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5616:9:28","nodeType":"YulIdentifier","src":"5616:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"5603:12:28","nodeType":"YulIdentifier","src":"5603:12:28"},"nativeSrc":"5603:23:28","nodeType":"YulFunctionCall","src":"5603:23:28"},"variables":[{"name":"offset","nativeSrc":"5593:6:28","nodeType":"YulTypedName","src":"5593:6:28","type":""}]},{"nativeSrc":"5635:28:28","nodeType":"YulVariableDeclaration","src":"5635:28:28","value":{"kind":"number","nativeSrc":"5645:18:28","nodeType":"YulLiteral","src":"5645:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5639:2:28","nodeType":"YulTypedName","src":"5639:2:28","type":""}]},{"body":{"nativeSrc":"5690:16:28","nodeType":"YulBlock","src":"5690:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5699:1:28","nodeType":"YulLiteral","src":"5699:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5702:1:28","nodeType":"YulLiteral","src":"5702:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5692:6:28","nodeType":"YulIdentifier","src":"5692:6:28"},"nativeSrc":"5692:12:28","nodeType":"YulFunctionCall","src":"5692:12:28"},"nativeSrc":"5692:12:28","nodeType":"YulExpressionStatement","src":"5692:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5678:6:28","nodeType":"YulIdentifier","src":"5678:6:28"},{"name":"_1","nativeSrc":"5686:2:28","nodeType":"YulIdentifier","src":"5686:2:28"}],"functionName":{"name":"gt","nativeSrc":"5675:2:28","nodeType":"YulIdentifier","src":"5675:2:28"},"nativeSrc":"5675:14:28","nodeType":"YulFunctionCall","src":"5675:14:28"},"nativeSrc":"5672:34:28","nodeType":"YulIf","src":"5672:34:28"},{"nativeSrc":"5715:71:28","nodeType":"YulAssignment","src":"5715:71:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5758:9:28","nodeType":"YulIdentifier","src":"5758:9:28"},{"name":"offset","nativeSrc":"5769:6:28","nodeType":"YulIdentifier","src":"5769:6:28"}],"functionName":{"name":"add","nativeSrc":"5754:3:28","nodeType":"YulIdentifier","src":"5754:3:28"},"nativeSrc":"5754:22:28","nodeType":"YulFunctionCall","src":"5754:22:28"},{"name":"dataEnd","nativeSrc":"5778:7:28","nodeType":"YulIdentifier","src":"5778:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"5725:28:28","nodeType":"YulIdentifier","src":"5725:28:28"},"nativeSrc":"5725:61:28","nodeType":"YulFunctionCall","src":"5725:61:28"},"variableNames":[{"name":"value0","nativeSrc":"5715:6:28","nodeType":"YulIdentifier","src":"5715:6:28"}]},{"nativeSrc":"5795:48:28","nodeType":"YulVariableDeclaration","src":"5795:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5828:9:28","nodeType":"YulIdentifier","src":"5828:9:28"},{"kind":"number","nativeSrc":"5839:2:28","nodeType":"YulLiteral","src":"5839:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5824:3:28","nodeType":"YulIdentifier","src":"5824:3:28"},"nativeSrc":"5824:18:28","nodeType":"YulFunctionCall","src":"5824:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"5811:12:28","nodeType":"YulIdentifier","src":"5811:12:28"},"nativeSrc":"5811:32:28","nodeType":"YulFunctionCall","src":"5811:32:28"},"variables":[{"name":"offset_1","nativeSrc":"5799:8:28","nodeType":"YulTypedName","src":"5799:8:28","type":""}]},{"body":{"nativeSrc":"5872:16:28","nodeType":"YulBlock","src":"5872:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5881:1:28","nodeType":"YulLiteral","src":"5881:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"5884:1:28","nodeType":"YulLiteral","src":"5884:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5874:6:28","nodeType":"YulIdentifier","src":"5874:6:28"},"nativeSrc":"5874:12:28","nodeType":"YulFunctionCall","src":"5874:12:28"},"nativeSrc":"5874:12:28","nodeType":"YulExpressionStatement","src":"5874:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5858:8:28","nodeType":"YulIdentifier","src":"5858:8:28"},{"name":"_1","nativeSrc":"5868:2:28","nodeType":"YulIdentifier","src":"5868:2:28"}],"functionName":{"name":"gt","nativeSrc":"5855:2:28","nodeType":"YulIdentifier","src":"5855:2:28"},"nativeSrc":"5855:16:28","nodeType":"YulFunctionCall","src":"5855:16:28"},"nativeSrc":"5852:36:28","nodeType":"YulIf","src":"5852:36:28"},{"nativeSrc":"5897:73:28","nodeType":"YulAssignment","src":"5897:73:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5940:9:28","nodeType":"YulIdentifier","src":"5940:9:28"},{"name":"offset_1","nativeSrc":"5951:8:28","nodeType":"YulIdentifier","src":"5951:8:28"}],"functionName":{"name":"add","nativeSrc":"5936:3:28","nodeType":"YulIdentifier","src":"5936:3:28"},"nativeSrc":"5936:24:28","nodeType":"YulFunctionCall","src":"5936:24:28"},{"name":"dataEnd","nativeSrc":"5962:7:28","nodeType":"YulIdentifier","src":"5962:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn","nativeSrc":"5907:28:28","nodeType":"YulIdentifier","src":"5907:28:28"},"nativeSrc":"5907:63:28","nodeType":"YulFunctionCall","src":"5907:63:28"},"variableNames":[{"name":"value1","nativeSrc":"5897:6:28","nodeType":"YulIdentifier","src":"5897:6:28"}]}]},"name":"abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr","nativeSrc":"5381:595:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5476:9:28","nodeType":"YulTypedName","src":"5476:9:28","type":""},{"name":"dataEnd","nativeSrc":"5487:7:28","nodeType":"YulTypedName","src":"5487:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5499:6:28","nodeType":"YulTypedName","src":"5499:6:28","type":""},{"name":"value1","nativeSrc":"5507:6:28","nodeType":"YulTypedName","src":"5507:6:28","type":""}],"src":"5381:595:28"},{"body":{"nativeSrc":"6053:275:28","nodeType":"YulBlock","src":"6053:275:28","statements":[{"body":{"nativeSrc":"6102:16:28","nodeType":"YulBlock","src":"6102:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6111:1:28","nodeType":"YulLiteral","src":"6111:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6114:1:28","nodeType":"YulLiteral","src":"6114:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6104:6:28","nodeType":"YulIdentifier","src":"6104:6:28"},"nativeSrc":"6104:12:28","nodeType":"YulFunctionCall","src":"6104:12:28"},"nativeSrc":"6104:12:28","nodeType":"YulExpressionStatement","src":"6104:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"6081:6:28","nodeType":"YulIdentifier","src":"6081:6:28"},{"kind":"number","nativeSrc":"6089:4:28","nodeType":"YulLiteral","src":"6089:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"6077:3:28","nodeType":"YulIdentifier","src":"6077:3:28"},"nativeSrc":"6077:17:28","nodeType":"YulFunctionCall","src":"6077:17:28"},{"name":"end","nativeSrc":"6096:3:28","nodeType":"YulIdentifier","src":"6096:3:28"}],"functionName":{"name":"slt","nativeSrc":"6073:3:28","nodeType":"YulIdentifier","src":"6073:3:28"},"nativeSrc":"6073:27:28","nodeType":"YulFunctionCall","src":"6073:27:28"}],"functionName":{"name":"iszero","nativeSrc":"6066:6:28","nodeType":"YulIdentifier","src":"6066:6:28"},"nativeSrc":"6066:35:28","nodeType":"YulFunctionCall","src":"6066:35:28"},"nativeSrc":"6063:55:28","nodeType":"YulIf","src":"6063:55:28"},{"nativeSrc":"6127:30:28","nodeType":"YulAssignment","src":"6127:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"6150:6:28","nodeType":"YulIdentifier","src":"6150:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"6137:12:28","nodeType":"YulIdentifier","src":"6137:12:28"},"nativeSrc":"6137:20:28","nodeType":"YulFunctionCall","src":"6137:20:28"},"variableNames":[{"name":"length","nativeSrc":"6127:6:28","nodeType":"YulIdentifier","src":"6127:6:28"}]},{"body":{"nativeSrc":"6200:16:28","nodeType":"YulBlock","src":"6200:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6209:1:28","nodeType":"YulLiteral","src":"6209:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6212:1:28","nodeType":"YulLiteral","src":"6212:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6202:6:28","nodeType":"YulIdentifier","src":"6202:6:28"},"nativeSrc":"6202:12:28","nodeType":"YulFunctionCall","src":"6202:12:28"},"nativeSrc":"6202:12:28","nodeType":"YulExpressionStatement","src":"6202:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6172:6:28","nodeType":"YulIdentifier","src":"6172:6:28"},{"kind":"number","nativeSrc":"6180:18:28","nodeType":"YulLiteral","src":"6180:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6169:2:28","nodeType":"YulIdentifier","src":"6169:2:28"},"nativeSrc":"6169:30:28","nodeType":"YulFunctionCall","src":"6169:30:28"},"nativeSrc":"6166:50:28","nodeType":"YulIf","src":"6166:50:28"},{"nativeSrc":"6225:29:28","nodeType":"YulAssignment","src":"6225:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"6241:6:28","nodeType":"YulIdentifier","src":"6241:6:28"},{"kind":"number","nativeSrc":"6249:4:28","nodeType":"YulLiteral","src":"6249:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6237:3:28","nodeType":"YulIdentifier","src":"6237:3:28"},"nativeSrc":"6237:17:28","nodeType":"YulFunctionCall","src":"6237:17:28"},"variableNames":[{"name":"arrayPos","nativeSrc":"6225:8:28","nodeType":"YulIdentifier","src":"6225:8:28"}]},{"body":{"nativeSrc":"6306:16:28","nodeType":"YulBlock","src":"6306:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6315:1:28","nodeType":"YulLiteral","src":"6315:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6318:1:28","nodeType":"YulLiteral","src":"6318:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6308:6:28","nodeType":"YulIdentifier","src":"6308:6:28"},"nativeSrc":"6308:12:28","nodeType":"YulFunctionCall","src":"6308:12:28"},"nativeSrc":"6308:12:28","nodeType":"YulExpressionStatement","src":"6308:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"6277:6:28","nodeType":"YulIdentifier","src":"6277:6:28"},{"name":"length","nativeSrc":"6285:6:28","nodeType":"YulIdentifier","src":"6285:6:28"}],"functionName":{"name":"add","nativeSrc":"6273:3:28","nodeType":"YulIdentifier","src":"6273:3:28"},"nativeSrc":"6273:19:28","nodeType":"YulFunctionCall","src":"6273:19:28"},{"kind":"number","nativeSrc":"6294:4:28","nodeType":"YulLiteral","src":"6294:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6269:3:28","nodeType":"YulIdentifier","src":"6269:3:28"},"nativeSrc":"6269:30:28","nodeType":"YulFunctionCall","src":"6269:30:28"},{"name":"end","nativeSrc":"6301:3:28","nodeType":"YulIdentifier","src":"6301:3:28"}],"functionName":{"name":"gt","nativeSrc":"6266:2:28","nodeType":"YulIdentifier","src":"6266:2:28"},"nativeSrc":"6266:39:28","nodeType":"YulFunctionCall","src":"6266:39:28"},"nativeSrc":"6263:59:28","nodeType":"YulIf","src":"6263:59:28"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"5981:347:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"6016:6:28","nodeType":"YulTypedName","src":"6016:6:28","type":""},{"name":"end","nativeSrc":"6024:3:28","nodeType":"YulTypedName","src":"6024:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"6032:8:28","nodeType":"YulTypedName","src":"6032:8:28","type":""},{"name":"length","nativeSrc":"6042:6:28","nodeType":"YulTypedName","src":"6042:6:28","type":""}],"src":"5981:347:28"},{"body":{"nativeSrc":"6560:983:28","nodeType":"YulBlock","src":"6560:983:28","statements":[{"body":{"nativeSrc":"6607:16:28","nodeType":"YulBlock","src":"6607:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6616:1:28","nodeType":"YulLiteral","src":"6616:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6619:1:28","nodeType":"YulLiteral","src":"6619:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6609:6:28","nodeType":"YulIdentifier","src":"6609:6:28"},"nativeSrc":"6609:12:28","nodeType":"YulFunctionCall","src":"6609:12:28"},"nativeSrc":"6609:12:28","nodeType":"YulExpressionStatement","src":"6609:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6581:7:28","nodeType":"YulIdentifier","src":"6581:7:28"},{"name":"headStart","nativeSrc":"6590:9:28","nodeType":"YulIdentifier","src":"6590:9:28"}],"functionName":{"name":"sub","nativeSrc":"6577:3:28","nodeType":"YulIdentifier","src":"6577:3:28"},"nativeSrc":"6577:23:28","nodeType":"YulFunctionCall","src":"6577:23:28"},{"kind":"number","nativeSrc":"6602:3:28","nodeType":"YulLiteral","src":"6602:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"6573:3:28","nodeType":"YulIdentifier","src":"6573:3:28"},"nativeSrc":"6573:33:28","nodeType":"YulFunctionCall","src":"6573:33:28"},"nativeSrc":"6570:53:28","nodeType":"YulIf","src":"6570:53:28"},{"nativeSrc":"6632:39:28","nodeType":"YulAssignment","src":"6632:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6661:9:28","nodeType":"YulIdentifier","src":"6661:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6642:18:28","nodeType":"YulIdentifier","src":"6642:18:28"},"nativeSrc":"6642:29:28","nodeType":"YulFunctionCall","src":"6642:29:28"},"variableNames":[{"name":"value0","nativeSrc":"6632:6:28","nodeType":"YulIdentifier","src":"6632:6:28"}]},{"nativeSrc":"6680:48:28","nodeType":"YulAssignment","src":"6680:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6713:9:28","nodeType":"YulIdentifier","src":"6713:9:28"},{"kind":"number","nativeSrc":"6724:2:28","nodeType":"YulLiteral","src":"6724:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6709:3:28","nodeType":"YulIdentifier","src":"6709:3:28"},"nativeSrc":"6709:18:28","nodeType":"YulFunctionCall","src":"6709:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"6690:18:28","nodeType":"YulIdentifier","src":"6690:18:28"},"nativeSrc":"6690:38:28","nodeType":"YulFunctionCall","src":"6690:38:28"},"variableNames":[{"name":"value1","nativeSrc":"6680:6:28","nodeType":"YulIdentifier","src":"6680:6:28"}]},{"nativeSrc":"6737:46:28","nodeType":"YulVariableDeclaration","src":"6737:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6768:9:28","nodeType":"YulIdentifier","src":"6768:9:28"},{"kind":"number","nativeSrc":"6779:2:28","nodeType":"YulLiteral","src":"6779:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6764:3:28","nodeType":"YulIdentifier","src":"6764:3:28"},"nativeSrc":"6764:18:28","nodeType":"YulFunctionCall","src":"6764:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"6751:12:28","nodeType":"YulIdentifier","src":"6751:12:28"},"nativeSrc":"6751:32:28","nodeType":"YulFunctionCall","src":"6751:32:28"},"variables":[{"name":"offset","nativeSrc":"6741:6:28","nodeType":"YulTypedName","src":"6741:6:28","type":""}]},{"nativeSrc":"6792:28:28","nodeType":"YulVariableDeclaration","src":"6792:28:28","value":{"kind":"number","nativeSrc":"6802:18:28","nodeType":"YulLiteral","src":"6802:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6796:2:28","nodeType":"YulTypedName","src":"6796:2:28","type":""}]},{"body":{"nativeSrc":"6847:16:28","nodeType":"YulBlock","src":"6847:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6856:1:28","nodeType":"YulLiteral","src":"6856:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6859:1:28","nodeType":"YulLiteral","src":"6859:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6849:6:28","nodeType":"YulIdentifier","src":"6849:6:28"},"nativeSrc":"6849:12:28","nodeType":"YulFunctionCall","src":"6849:12:28"},"nativeSrc":"6849:12:28","nodeType":"YulExpressionStatement","src":"6849:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6835:6:28","nodeType":"YulIdentifier","src":"6835:6:28"},{"name":"_1","nativeSrc":"6843:2:28","nodeType":"YulIdentifier","src":"6843:2:28"}],"functionName":{"name":"gt","nativeSrc":"6832:2:28","nodeType":"YulIdentifier","src":"6832:2:28"},"nativeSrc":"6832:14:28","nodeType":"YulFunctionCall","src":"6832:14:28"},"nativeSrc":"6829:34:28","nodeType":"YulIf","src":"6829:34:28"},{"nativeSrc":"6872:96:28","nodeType":"YulVariableDeclaration","src":"6872:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6940:9:28","nodeType":"YulIdentifier","src":"6940:9:28"},{"name":"offset","nativeSrc":"6951:6:28","nodeType":"YulIdentifier","src":"6951:6:28"}],"functionName":{"name":"add","nativeSrc":"6936:3:28","nodeType":"YulIdentifier","src":"6936:3:28"},"nativeSrc":"6936:22:28","nodeType":"YulFunctionCall","src":"6936:22:28"},{"name":"dataEnd","nativeSrc":"6960:7:28","nodeType":"YulIdentifier","src":"6960:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"6898:37:28","nodeType":"YulIdentifier","src":"6898:37:28"},"nativeSrc":"6898:70:28","nodeType":"YulFunctionCall","src":"6898:70:28"},"variables":[{"name":"value2_1","nativeSrc":"6876:8:28","nodeType":"YulTypedName","src":"6876:8:28","type":""},{"name":"value3_1","nativeSrc":"6886:8:28","nodeType":"YulTypedName","src":"6886:8:28","type":""}]},{"nativeSrc":"6977:18:28","nodeType":"YulAssignment","src":"6977:18:28","value":{"name":"value2_1","nativeSrc":"6987:8:28","nodeType":"YulIdentifier","src":"6987:8:28"},"variableNames":[{"name":"value2","nativeSrc":"6977:6:28","nodeType":"YulIdentifier","src":"6977:6:28"}]},{"nativeSrc":"7004:18:28","nodeType":"YulAssignment","src":"7004:18:28","value":{"name":"value3_1","nativeSrc":"7014:8:28","nodeType":"YulIdentifier","src":"7014:8:28"},"variableNames":[{"name":"value3","nativeSrc":"7004:6:28","nodeType":"YulIdentifier","src":"7004:6:28"}]},{"nativeSrc":"7031:48:28","nodeType":"YulVariableDeclaration","src":"7031:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7064:9:28","nodeType":"YulIdentifier","src":"7064:9:28"},{"kind":"number","nativeSrc":"7075:2:28","nodeType":"YulLiteral","src":"7075:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7060:3:28","nodeType":"YulIdentifier","src":"7060:3:28"},"nativeSrc":"7060:18:28","nodeType":"YulFunctionCall","src":"7060:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"7047:12:28","nodeType":"YulIdentifier","src":"7047:12:28"},"nativeSrc":"7047:32:28","nodeType":"YulFunctionCall","src":"7047:32:28"},"variables":[{"name":"offset_1","nativeSrc":"7035:8:28","nodeType":"YulTypedName","src":"7035:8:28","type":""}]},{"body":{"nativeSrc":"7108:16:28","nodeType":"YulBlock","src":"7108:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7117:1:28","nodeType":"YulLiteral","src":"7117:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7120:1:28","nodeType":"YulLiteral","src":"7120:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7110:6:28","nodeType":"YulIdentifier","src":"7110:6:28"},"nativeSrc":"7110:12:28","nodeType":"YulFunctionCall","src":"7110:12:28"},"nativeSrc":"7110:12:28","nodeType":"YulExpressionStatement","src":"7110:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7094:8:28","nodeType":"YulIdentifier","src":"7094:8:28"},{"name":"_1","nativeSrc":"7104:2:28","nodeType":"YulIdentifier","src":"7104:2:28"}],"functionName":{"name":"gt","nativeSrc":"7091:2:28","nodeType":"YulIdentifier","src":"7091:2:28"},"nativeSrc":"7091:16:28","nodeType":"YulFunctionCall","src":"7091:16:28"},"nativeSrc":"7088:36:28","nodeType":"YulIf","src":"7088:36:28"},{"nativeSrc":"7133:98:28","nodeType":"YulVariableDeclaration","src":"7133:98:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7201:9:28","nodeType":"YulIdentifier","src":"7201:9:28"},{"name":"offset_1","nativeSrc":"7212:8:28","nodeType":"YulIdentifier","src":"7212:8:28"}],"functionName":{"name":"add","nativeSrc":"7197:3:28","nodeType":"YulIdentifier","src":"7197:3:28"},"nativeSrc":"7197:24:28","nodeType":"YulFunctionCall","src":"7197:24:28"},{"name":"dataEnd","nativeSrc":"7223:7:28","nodeType":"YulIdentifier","src":"7223:7:28"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"7159:37:28","nodeType":"YulIdentifier","src":"7159:37:28"},"nativeSrc":"7159:72:28","nodeType":"YulFunctionCall","src":"7159:72:28"},"variables":[{"name":"value4_1","nativeSrc":"7137:8:28","nodeType":"YulTypedName","src":"7137:8:28","type":""},{"name":"value5_1","nativeSrc":"7147:8:28","nodeType":"YulTypedName","src":"7147:8:28","type":""}]},{"nativeSrc":"7240:18:28","nodeType":"YulAssignment","src":"7240:18:28","value":{"name":"value4_1","nativeSrc":"7250:8:28","nodeType":"YulIdentifier","src":"7250:8:28"},"variableNames":[{"name":"value4","nativeSrc":"7240:6:28","nodeType":"YulIdentifier","src":"7240:6:28"}]},{"nativeSrc":"7267:18:28","nodeType":"YulAssignment","src":"7267:18:28","value":{"name":"value5_1","nativeSrc":"7277:8:28","nodeType":"YulIdentifier","src":"7277:8:28"},"variableNames":[{"name":"value5","nativeSrc":"7267:6:28","nodeType":"YulIdentifier","src":"7267:6:28"}]},{"nativeSrc":"7294:49:28","nodeType":"YulVariableDeclaration","src":"7294:49:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7327:9:28","nodeType":"YulIdentifier","src":"7327:9:28"},{"kind":"number","nativeSrc":"7338:3:28","nodeType":"YulLiteral","src":"7338:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7323:3:28","nodeType":"YulIdentifier","src":"7323:3:28"},"nativeSrc":"7323:19:28","nodeType":"YulFunctionCall","src":"7323:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"7310:12:28","nodeType":"YulIdentifier","src":"7310:12:28"},"nativeSrc":"7310:33:28","nodeType":"YulFunctionCall","src":"7310:33:28"},"variables":[{"name":"offset_2","nativeSrc":"7298:8:28","nodeType":"YulTypedName","src":"7298:8:28","type":""}]},{"body":{"nativeSrc":"7372:16:28","nodeType":"YulBlock","src":"7372:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7381:1:28","nodeType":"YulLiteral","src":"7381:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7384:1:28","nodeType":"YulLiteral","src":"7384:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7374:6:28","nodeType":"YulIdentifier","src":"7374:6:28"},"nativeSrc":"7374:12:28","nodeType":"YulFunctionCall","src":"7374:12:28"},"nativeSrc":"7374:12:28","nodeType":"YulExpressionStatement","src":"7374:12:28"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7358:8:28","nodeType":"YulIdentifier","src":"7358:8:28"},{"name":"_1","nativeSrc":"7368:2:28","nodeType":"YulIdentifier","src":"7368:2:28"}],"functionName":{"name":"gt","nativeSrc":"7355:2:28","nodeType":"YulIdentifier","src":"7355:2:28"},"nativeSrc":"7355:16:28","nodeType":"YulFunctionCall","src":"7355:16:28"},"nativeSrc":"7352:36:28","nodeType":"YulIf","src":"7352:36:28"},{"nativeSrc":"7397:86:28","nodeType":"YulVariableDeclaration","src":"7397:86:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7453:9:28","nodeType":"YulIdentifier","src":"7453:9:28"},{"name":"offset_2","nativeSrc":"7464:8:28","nodeType":"YulIdentifier","src":"7464:8:28"}],"functionName":{"name":"add","nativeSrc":"7449:3:28","nodeType":"YulIdentifier","src":"7449:3:28"},"nativeSrc":"7449:24:28","nodeType":"YulFunctionCall","src":"7449:24:28"},{"name":"dataEnd","nativeSrc":"7475:7:28","nodeType":"YulIdentifier","src":"7475:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"7423:25:28","nodeType":"YulIdentifier","src":"7423:25:28"},"nativeSrc":"7423:60:28","nodeType":"YulFunctionCall","src":"7423:60:28"},"variables":[{"name":"value6_1","nativeSrc":"7401:8:28","nodeType":"YulTypedName","src":"7401:8:28","type":""},{"name":"value7_1","nativeSrc":"7411:8:28","nodeType":"YulTypedName","src":"7411:8:28","type":""}]},{"nativeSrc":"7492:18:28","nodeType":"YulAssignment","src":"7492:18:28","value":{"name":"value6_1","nativeSrc":"7502:8:28","nodeType":"YulIdentifier","src":"7502:8:28"},"variableNames":[{"name":"value6","nativeSrc":"7492:6:28","nodeType":"YulIdentifier","src":"7492:6:28"}]},{"nativeSrc":"7519:18:28","nodeType":"YulAssignment","src":"7519:18:28","value":{"name":"value7_1","nativeSrc":"7529:8:28","nodeType":"YulIdentifier","src":"7529:8:28"},"variableNames":[{"name":"value7","nativeSrc":"7519:6:28","nodeType":"YulIdentifier","src":"7519:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"6333:1210:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6470:9:28","nodeType":"YulTypedName","src":"6470:9:28","type":""},{"name":"dataEnd","nativeSrc":"6481:7:28","nodeType":"YulTypedName","src":"6481:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6493:6:28","nodeType":"YulTypedName","src":"6493:6:28","type":""},{"name":"value1","nativeSrc":"6501:6:28","nodeType":"YulTypedName","src":"6501:6:28","type":""},{"name":"value2","nativeSrc":"6509:6:28","nodeType":"YulTypedName","src":"6509:6:28","type":""},{"name":"value3","nativeSrc":"6517:6:28","nodeType":"YulTypedName","src":"6517:6:28","type":""},{"name":"value4","nativeSrc":"6525:6:28","nodeType":"YulTypedName","src":"6525:6:28","type":""},{"name":"value5","nativeSrc":"6533:6:28","nodeType":"YulTypedName","src":"6533:6:28","type":""},{"name":"value6","nativeSrc":"6541:6:28","nodeType":"YulTypedName","src":"6541:6:28","type":""},{"name":"value7","nativeSrc":"6549:6:28","nodeType":"YulTypedName","src":"6549:6:28","type":""}],"src":"6333:1210:28"},{"body":{"nativeSrc":"7647:149:28","nodeType":"YulBlock","src":"7647:149:28","statements":[{"nativeSrc":"7657:26:28","nodeType":"YulAssignment","src":"7657:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7669:9:28","nodeType":"YulIdentifier","src":"7669:9:28"},{"kind":"number","nativeSrc":"7680:2:28","nodeType":"YulLiteral","src":"7680:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7665:3:28","nodeType":"YulIdentifier","src":"7665:3:28"},"nativeSrc":"7665:18:28","nodeType":"YulFunctionCall","src":"7665:18:28"},"variableNames":[{"name":"tail","nativeSrc":"7657:4:28","nodeType":"YulIdentifier","src":"7657:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7699:9:28","nodeType":"YulIdentifier","src":"7699:9:28"},{"arguments":[{"name":"value0","nativeSrc":"7714:6:28","nodeType":"YulIdentifier","src":"7714:6:28"},{"kind":"number","nativeSrc":"7722:66:28","nodeType":"YulLiteral","src":"7722:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"7710:3:28","nodeType":"YulIdentifier","src":"7710:3:28"},"nativeSrc":"7710:79:28","nodeType":"YulFunctionCall","src":"7710:79:28"}],"functionName":{"name":"mstore","nativeSrc":"7692:6:28","nodeType":"YulIdentifier","src":"7692:6:28"},"nativeSrc":"7692:98:28","nodeType":"YulFunctionCall","src":"7692:98:28"},"nativeSrc":"7692:98:28","nodeType":"YulExpressionStatement","src":"7692:98:28"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"7548:248:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7616:9:28","nodeType":"YulTypedName","src":"7616:9:28","type":""},{"name":"value0","nativeSrc":"7627:6:28","nodeType":"YulTypedName","src":"7627:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7638:4:28","nodeType":"YulTypedName","src":"7638:4:28","type":""}],"src":"7548:248:28"},{"body":{"nativeSrc":"7871:110:28","nodeType":"YulBlock","src":"7871:110:28","statements":[{"body":{"nativeSrc":"7917:16:28","nodeType":"YulBlock","src":"7917:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7926:1:28","nodeType":"YulLiteral","src":"7926:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7929:1:28","nodeType":"YulLiteral","src":"7929:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7919:6:28","nodeType":"YulIdentifier","src":"7919:6:28"},"nativeSrc":"7919:12:28","nodeType":"YulFunctionCall","src":"7919:12:28"},"nativeSrc":"7919:12:28","nodeType":"YulExpressionStatement","src":"7919:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7892:7:28","nodeType":"YulIdentifier","src":"7892:7:28"},{"name":"headStart","nativeSrc":"7901:9:28","nodeType":"YulIdentifier","src":"7901:9:28"}],"functionName":{"name":"sub","nativeSrc":"7888:3:28","nodeType":"YulIdentifier","src":"7888:3:28"},"nativeSrc":"7888:23:28","nodeType":"YulFunctionCall","src":"7888:23:28"},{"kind":"number","nativeSrc":"7913:2:28","nodeType":"YulLiteral","src":"7913:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7884:3:28","nodeType":"YulIdentifier","src":"7884:3:28"},"nativeSrc":"7884:32:28","nodeType":"YulFunctionCall","src":"7884:32:28"},"nativeSrc":"7881:52:28","nodeType":"YulIf","src":"7881:52:28"},{"nativeSrc":"7942:33:28","nodeType":"YulAssignment","src":"7942:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7965:9:28","nodeType":"YulIdentifier","src":"7965:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"7952:12:28","nodeType":"YulIdentifier","src":"7952:12:28"},"nativeSrc":"7952:23:28","nodeType":"YulFunctionCall","src":"7952:23:28"},"variableNames":[{"name":"value0","nativeSrc":"7942:6:28","nodeType":"YulIdentifier","src":"7942:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"7801:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7837:9:28","nodeType":"YulTypedName","src":"7837:9:28","type":""},{"name":"dataEnd","nativeSrc":"7848:7:28","nodeType":"YulTypedName","src":"7848:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7860:6:28","nodeType":"YulTypedName","src":"7860:6:28","type":""}],"src":"7801:180:28"},{"body":{"nativeSrc":"8143:538:28","nodeType":"YulBlock","src":"8143:538:28","statements":[{"body":{"nativeSrc":"8190:16:28","nodeType":"YulBlock","src":"8190:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8199:1:28","nodeType":"YulLiteral","src":"8199:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8202:1:28","nodeType":"YulLiteral","src":"8202:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8192:6:28","nodeType":"YulIdentifier","src":"8192:6:28"},"nativeSrc":"8192:12:28","nodeType":"YulFunctionCall","src":"8192:12:28"},"nativeSrc":"8192:12:28","nodeType":"YulExpressionStatement","src":"8192:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8164:7:28","nodeType":"YulIdentifier","src":"8164:7:28"},{"name":"headStart","nativeSrc":"8173:9:28","nodeType":"YulIdentifier","src":"8173:9:28"}],"functionName":{"name":"sub","nativeSrc":"8160:3:28","nodeType":"YulIdentifier","src":"8160:3:28"},"nativeSrc":"8160:23:28","nodeType":"YulFunctionCall","src":"8160:23:28"},{"kind":"number","nativeSrc":"8185:3:28","nodeType":"YulLiteral","src":"8185:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"8156:3:28","nodeType":"YulIdentifier","src":"8156:3:28"},"nativeSrc":"8156:33:28","nodeType":"YulFunctionCall","src":"8156:33:28"},"nativeSrc":"8153:53:28","nodeType":"YulIf","src":"8153:53:28"},{"nativeSrc":"8215:39:28","nodeType":"YulAssignment","src":"8215:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8244:9:28","nodeType":"YulIdentifier","src":"8244:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"8225:18:28","nodeType":"YulIdentifier","src":"8225:18:28"},"nativeSrc":"8225:29:28","nodeType":"YulFunctionCall","src":"8225:29:28"},"variableNames":[{"name":"value0","nativeSrc":"8215:6:28","nodeType":"YulIdentifier","src":"8215:6:28"}]},{"nativeSrc":"8263:48:28","nodeType":"YulAssignment","src":"8263:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8296:9:28","nodeType":"YulIdentifier","src":"8296:9:28"},{"kind":"number","nativeSrc":"8307:2:28","nodeType":"YulLiteral","src":"8307:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8292:3:28","nodeType":"YulIdentifier","src":"8292:3:28"},"nativeSrc":"8292:18:28","nodeType":"YulFunctionCall","src":"8292:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"8273:18:28","nodeType":"YulIdentifier","src":"8273:18:28"},"nativeSrc":"8273:38:28","nodeType":"YulFunctionCall","src":"8273:38:28"},"variableNames":[{"name":"value1","nativeSrc":"8263:6:28","nodeType":"YulIdentifier","src":"8263:6:28"}]},{"nativeSrc":"8320:42:28","nodeType":"YulAssignment","src":"8320:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8347:9:28","nodeType":"YulIdentifier","src":"8347:9:28"},{"kind":"number","nativeSrc":"8358:2:28","nodeType":"YulLiteral","src":"8358:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8343:3:28","nodeType":"YulIdentifier","src":"8343:3:28"},"nativeSrc":"8343:18:28","nodeType":"YulFunctionCall","src":"8343:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8330:12:28","nodeType":"YulIdentifier","src":"8330:12:28"},"nativeSrc":"8330:32:28","nodeType":"YulFunctionCall","src":"8330:32:28"},"variableNames":[{"name":"value2","nativeSrc":"8320:6:28","nodeType":"YulIdentifier","src":"8320:6:28"}]},{"nativeSrc":"8371:42:28","nodeType":"YulAssignment","src":"8371:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8398:9:28","nodeType":"YulIdentifier","src":"8398:9:28"},{"kind":"number","nativeSrc":"8409:2:28","nodeType":"YulLiteral","src":"8409:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8394:3:28","nodeType":"YulIdentifier","src":"8394:3:28"},"nativeSrc":"8394:18:28","nodeType":"YulFunctionCall","src":"8394:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"8381:12:28","nodeType":"YulIdentifier","src":"8381:12:28"},"nativeSrc":"8381:32:28","nodeType":"YulFunctionCall","src":"8381:32:28"},"variableNames":[{"name":"value3","nativeSrc":"8371:6:28","nodeType":"YulIdentifier","src":"8371:6:28"}]},{"nativeSrc":"8422:47:28","nodeType":"YulVariableDeclaration","src":"8422:47:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8453:9:28","nodeType":"YulIdentifier","src":"8453:9:28"},{"kind":"number","nativeSrc":"8464:3:28","nodeType":"YulLiteral","src":"8464:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"8449:3:28","nodeType":"YulIdentifier","src":"8449:3:28"},"nativeSrc":"8449:19:28","nodeType":"YulFunctionCall","src":"8449:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"8436:12:28","nodeType":"YulIdentifier","src":"8436:12:28"},"nativeSrc":"8436:33:28","nodeType":"YulFunctionCall","src":"8436:33:28"},"variables":[{"name":"offset","nativeSrc":"8426:6:28","nodeType":"YulTypedName","src":"8426:6:28","type":""}]},{"body":{"nativeSrc":"8512:16:28","nodeType":"YulBlock","src":"8512:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8521:1:28","nodeType":"YulLiteral","src":"8521:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8524:1:28","nodeType":"YulLiteral","src":"8524:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8514:6:28","nodeType":"YulIdentifier","src":"8514:6:28"},"nativeSrc":"8514:12:28","nodeType":"YulFunctionCall","src":"8514:12:28"},"nativeSrc":"8514:12:28","nodeType":"YulExpressionStatement","src":"8514:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8484:6:28","nodeType":"YulIdentifier","src":"8484:6:28"},{"kind":"number","nativeSrc":"8492:18:28","nodeType":"YulLiteral","src":"8492:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"8481:2:28","nodeType":"YulIdentifier","src":"8481:2:28"},"nativeSrc":"8481:30:28","nodeType":"YulFunctionCall","src":"8481:30:28"},"nativeSrc":"8478:50:28","nodeType":"YulIf","src":"8478:50:28"},{"nativeSrc":"8537:84:28","nodeType":"YulVariableDeclaration","src":"8537:84:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8593:9:28","nodeType":"YulIdentifier","src":"8593:9:28"},{"name":"offset","nativeSrc":"8604:6:28","nodeType":"YulIdentifier","src":"8604:6:28"}],"functionName":{"name":"add","nativeSrc":"8589:3:28","nodeType":"YulIdentifier","src":"8589:3:28"},"nativeSrc":"8589:22:28","nodeType":"YulFunctionCall","src":"8589:22:28"},{"name":"dataEnd","nativeSrc":"8613:7:28","nodeType":"YulIdentifier","src":"8613:7:28"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"8563:25:28","nodeType":"YulIdentifier","src":"8563:25:28"},"nativeSrc":"8563:58:28","nodeType":"YulFunctionCall","src":"8563:58:28"},"variables":[{"name":"value4_1","nativeSrc":"8541:8:28","nodeType":"YulTypedName","src":"8541:8:28","type":""},{"name":"value5_1","nativeSrc":"8551:8:28","nodeType":"YulTypedName","src":"8551:8:28","type":""}]},{"nativeSrc":"8630:18:28","nodeType":"YulAssignment","src":"8630:18:28","value":{"name":"value4_1","nativeSrc":"8640:8:28","nodeType":"YulIdentifier","src":"8640:8:28"},"variableNames":[{"name":"value4","nativeSrc":"8630:6:28","nodeType":"YulIdentifier","src":"8630:6:28"}]},{"nativeSrc":"8657:18:28","nodeType":"YulAssignment","src":"8657:18:28","value":{"name":"value5_1","nativeSrc":"8667:8:28","nodeType":"YulIdentifier","src":"8667:8:28"},"variableNames":[{"name":"value5","nativeSrc":"8657:6:28","nodeType":"YulIdentifier","src":"8657:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"7986:695:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8069:9:28","nodeType":"YulTypedName","src":"8069:9:28","type":""},{"name":"dataEnd","nativeSrc":"8080:7:28","nodeType":"YulTypedName","src":"8080:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8092:6:28","nodeType":"YulTypedName","src":"8092:6:28","type":""},{"name":"value1","nativeSrc":"8100:6:28","nodeType":"YulTypedName","src":"8100:6:28","type":""},{"name":"value2","nativeSrc":"8108:6:28","nodeType":"YulTypedName","src":"8108:6:28","type":""},{"name":"value3","nativeSrc":"8116:6:28","nodeType":"YulTypedName","src":"8116:6:28","type":""},{"name":"value4","nativeSrc":"8124:6:28","nodeType":"YulTypedName","src":"8124:6:28","type":""},{"name":"value5","nativeSrc":"8132:6:28","nodeType":"YulTypedName","src":"8132:6:28","type":""}],"src":"7986:695:28"},{"body":{"nativeSrc":"8718:152:28","nodeType":"YulBlock","src":"8718:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8735:1:28","nodeType":"YulLiteral","src":"8735:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8738:77:28","nodeType":"YulLiteral","src":"8738:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8728:6:28","nodeType":"YulIdentifier","src":"8728:6:28"},"nativeSrc":"8728:88:28","nodeType":"YulFunctionCall","src":"8728:88:28"},"nativeSrc":"8728:88:28","nodeType":"YulExpressionStatement","src":"8728:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8832:1:28","nodeType":"YulLiteral","src":"8832:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"8835:4:28","nodeType":"YulLiteral","src":"8835:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8825:6:28","nodeType":"YulIdentifier","src":"8825:6:28"},"nativeSrc":"8825:15:28","nodeType":"YulFunctionCall","src":"8825:15:28"},"nativeSrc":"8825:15:28","nodeType":"YulExpressionStatement","src":"8825:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8856:1:28","nodeType":"YulLiteral","src":"8856:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8859:4:28","nodeType":"YulLiteral","src":"8859:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8849:6:28","nodeType":"YulIdentifier","src":"8849:6:28"},"nativeSrc":"8849:15:28","nodeType":"YulFunctionCall","src":"8849:15:28"},"nativeSrc":"8849:15:28","nodeType":"YulExpressionStatement","src":"8849:15:28"}]},"name":"panic_error_0x11","nativeSrc":"8686:184:28","nodeType":"YulFunctionDefinition","src":"8686:184:28"},{"body":{"nativeSrc":"8924:79:28","nodeType":"YulBlock","src":"8924:79:28","statements":[{"nativeSrc":"8934:17:28","nodeType":"YulAssignment","src":"8934:17:28","value":{"arguments":[{"name":"x","nativeSrc":"8946:1:28","nodeType":"YulIdentifier","src":"8946:1:28"},{"name":"y","nativeSrc":"8949:1:28","nodeType":"YulIdentifier","src":"8949:1:28"}],"functionName":{"name":"sub","nativeSrc":"8942:3:28","nodeType":"YulIdentifier","src":"8942:3:28"},"nativeSrc":"8942:9:28","nodeType":"YulFunctionCall","src":"8942:9:28"},"variableNames":[{"name":"diff","nativeSrc":"8934:4:28","nodeType":"YulIdentifier","src":"8934:4:28"}]},{"body":{"nativeSrc":"8975:22:28","nodeType":"YulBlock","src":"8975:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8977:16:28","nodeType":"YulIdentifier","src":"8977:16:28"},"nativeSrc":"8977:18:28","nodeType":"YulFunctionCall","src":"8977:18:28"},"nativeSrc":"8977:18:28","nodeType":"YulExpressionStatement","src":"8977:18:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8966:4:28","nodeType":"YulIdentifier","src":"8966:4:28"},{"name":"x","nativeSrc":"8972:1:28","nodeType":"YulIdentifier","src":"8972:1:28"}],"functionName":{"name":"gt","nativeSrc":"8963:2:28","nodeType":"YulIdentifier","src":"8963:2:28"},"nativeSrc":"8963:11:28","nodeType":"YulFunctionCall","src":"8963:11:28"},"nativeSrc":"8960:37:28","nodeType":"YulIf","src":"8960:37:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"8875:128:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8906:1:28","nodeType":"YulTypedName","src":"8906:1:28","type":""},{"name":"y","nativeSrc":"8909:1:28","nodeType":"YulTypedName","src":"8909:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8915:4:28","nodeType":"YulTypedName","src":"8915:4:28","type":""}],"src":"8875:128:28"},{"body":{"nativeSrc":"9040:152:28","nodeType":"YulBlock","src":"9040:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9057:1:28","nodeType":"YulLiteral","src":"9057:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9060:77:28","nodeType":"YulLiteral","src":"9060:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9050:6:28","nodeType":"YulIdentifier","src":"9050:6:28"},"nativeSrc":"9050:88:28","nodeType":"YulFunctionCall","src":"9050:88:28"},"nativeSrc":"9050:88:28","nodeType":"YulExpressionStatement","src":"9050:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9154:1:28","nodeType":"YulLiteral","src":"9154:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"9157:4:28","nodeType":"YulLiteral","src":"9157:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"9147:6:28","nodeType":"YulIdentifier","src":"9147:6:28"},"nativeSrc":"9147:15:28","nodeType":"YulFunctionCall","src":"9147:15:28"},"nativeSrc":"9147:15:28","nodeType":"YulExpressionStatement","src":"9147:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9178:1:28","nodeType":"YulLiteral","src":"9178:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9181:4:28","nodeType":"YulLiteral","src":"9181:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9171:6:28","nodeType":"YulIdentifier","src":"9171:6:28"},"nativeSrc":"9171:15:28","nodeType":"YulFunctionCall","src":"9171:15:28"},"nativeSrc":"9171:15:28","nodeType":"YulExpressionStatement","src":"9171:15:28"}]},"name":"panic_error_0x32","nativeSrc":"9008:184:28","nodeType":"YulFunctionDefinition","src":"9008:184:28"},{"body":{"nativeSrc":"9244:148:28","nodeType":"YulBlock","src":"9244:148:28","statements":[{"body":{"nativeSrc":"9335:22:28","nodeType":"YulBlock","src":"9335:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9337:16:28","nodeType":"YulIdentifier","src":"9337:16:28"},"nativeSrc":"9337:18:28","nodeType":"YulFunctionCall","src":"9337:18:28"},"nativeSrc":"9337:18:28","nodeType":"YulExpressionStatement","src":"9337:18:28"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"9260:5:28","nodeType":"YulIdentifier","src":"9260:5:28"},{"kind":"number","nativeSrc":"9267:66:28","nodeType":"YulLiteral","src":"9267:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"9257:2:28","nodeType":"YulIdentifier","src":"9257:2:28"},"nativeSrc":"9257:77:28","nodeType":"YulFunctionCall","src":"9257:77:28"},"nativeSrc":"9254:103:28","nodeType":"YulIf","src":"9254:103:28"},{"nativeSrc":"9366:20:28","nodeType":"YulAssignment","src":"9366:20:28","value":{"arguments":[{"name":"value","nativeSrc":"9377:5:28","nodeType":"YulIdentifier","src":"9377:5:28"},{"kind":"number","nativeSrc":"9384:1:28","nodeType":"YulLiteral","src":"9384:1:28","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"9373:3:28","nodeType":"YulIdentifier","src":"9373:3:28"},"nativeSrc":"9373:13:28","nodeType":"YulFunctionCall","src":"9373:13:28"},"variableNames":[{"name":"ret","nativeSrc":"9366:3:28","nodeType":"YulIdentifier","src":"9366:3:28"}]}]},"name":"increment_t_uint256","nativeSrc":"9197:195:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"9226:5:28","nodeType":"YulTypedName","src":"9226:5:28","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"9236:3:28","nodeType":"YulTypedName","src":"9236:3:28","type":""}],"src":"9197:195:28"},{"body":{"nativeSrc":"9449:116:28","nodeType":"YulBlock","src":"9449:116:28","statements":[{"nativeSrc":"9459:20:28","nodeType":"YulAssignment","src":"9459:20:28","value":{"arguments":[{"name":"x","nativeSrc":"9474:1:28","nodeType":"YulIdentifier","src":"9474:1:28"},{"name":"y","nativeSrc":"9477:1:28","nodeType":"YulIdentifier","src":"9477:1:28"}],"functionName":{"name":"mul","nativeSrc":"9470:3:28","nodeType":"YulIdentifier","src":"9470:3:28"},"nativeSrc":"9470:9:28","nodeType":"YulFunctionCall","src":"9470:9:28"},"variableNames":[{"name":"product","nativeSrc":"9459:7:28","nodeType":"YulIdentifier","src":"9459:7:28"}]},{"body":{"nativeSrc":"9537:22:28","nodeType":"YulBlock","src":"9537:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"9539:16:28","nodeType":"YulIdentifier","src":"9539:16:28"},"nativeSrc":"9539:18:28","nodeType":"YulFunctionCall","src":"9539:18:28"},"nativeSrc":"9539:18:28","nodeType":"YulExpressionStatement","src":"9539:18:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"9508:1:28","nodeType":"YulIdentifier","src":"9508:1:28"}],"functionName":{"name":"iszero","nativeSrc":"9501:6:28","nodeType":"YulIdentifier","src":"9501:6:28"},"nativeSrc":"9501:9:28","nodeType":"YulFunctionCall","src":"9501:9:28"},{"arguments":[{"name":"y","nativeSrc":"9515:1:28","nodeType":"YulIdentifier","src":"9515:1:28"},{"arguments":[{"name":"product","nativeSrc":"9522:7:28","nodeType":"YulIdentifier","src":"9522:7:28"},{"name":"x","nativeSrc":"9531:1:28","nodeType":"YulIdentifier","src":"9531:1:28"}],"functionName":{"name":"div","nativeSrc":"9518:3:28","nodeType":"YulIdentifier","src":"9518:3:28"},"nativeSrc":"9518:15:28","nodeType":"YulFunctionCall","src":"9518:15:28"}],"functionName":{"name":"eq","nativeSrc":"9512:2:28","nodeType":"YulIdentifier","src":"9512:2:28"},"nativeSrc":"9512:22:28","nodeType":"YulFunctionCall","src":"9512:22:28"}],"functionName":{"name":"or","nativeSrc":"9498:2:28","nodeType":"YulIdentifier","src":"9498:2:28"},"nativeSrc":"9498:37:28","nodeType":"YulFunctionCall","src":"9498:37:28"}],"functionName":{"name":"iszero","nativeSrc":"9491:6:28","nodeType":"YulIdentifier","src":"9491:6:28"},"nativeSrc":"9491:45:28","nodeType":"YulFunctionCall","src":"9491:45:28"},"nativeSrc":"9488:71:28","nodeType":"YulIf","src":"9488:71:28"}]},"name":"checked_mul_t_uint256","nativeSrc":"9397:168:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9428:1:28","nodeType":"YulTypedName","src":"9428:1:28","type":""},{"name":"y","nativeSrc":"9431:1:28","nodeType":"YulTypedName","src":"9431:1:28","type":""}],"returnVariables":[{"name":"product","nativeSrc":"9437:7:28","nodeType":"YulTypedName","src":"9437:7:28","type":""}],"src":"9397:168:28"},{"body":{"nativeSrc":"9616:228:28","nodeType":"YulBlock","src":"9616:228:28","statements":[{"body":{"nativeSrc":"9647:168:28","nodeType":"YulBlock","src":"9647:168:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9668:1:28","nodeType":"YulLiteral","src":"9668:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9671:77:28","nodeType":"YulLiteral","src":"9671:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"9661:6:28","nodeType":"YulIdentifier","src":"9661:6:28"},"nativeSrc":"9661:88:28","nodeType":"YulFunctionCall","src":"9661:88:28"},"nativeSrc":"9661:88:28","nodeType":"YulExpressionStatement","src":"9661:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9769:1:28","nodeType":"YulLiteral","src":"9769:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"9772:4:28","nodeType":"YulLiteral","src":"9772:4:28","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"9762:6:28","nodeType":"YulIdentifier","src":"9762:6:28"},"nativeSrc":"9762:15:28","nodeType":"YulFunctionCall","src":"9762:15:28"},"nativeSrc":"9762:15:28","nodeType":"YulExpressionStatement","src":"9762:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9797:1:28","nodeType":"YulLiteral","src":"9797:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"9800:4:28","nodeType":"YulLiteral","src":"9800:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"9790:6:28","nodeType":"YulIdentifier","src":"9790:6:28"},"nativeSrc":"9790:15:28","nodeType":"YulFunctionCall","src":"9790:15:28"},"nativeSrc":"9790:15:28","nodeType":"YulExpressionStatement","src":"9790:15:28"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"9636:1:28","nodeType":"YulIdentifier","src":"9636:1:28"}],"functionName":{"name":"iszero","nativeSrc":"9629:6:28","nodeType":"YulIdentifier","src":"9629:6:28"},"nativeSrc":"9629:9:28","nodeType":"YulFunctionCall","src":"9629:9:28"},"nativeSrc":"9626:189:28","nodeType":"YulIf","src":"9626:189:28"},{"nativeSrc":"9824:14:28","nodeType":"YulAssignment","src":"9824:14:28","value":{"arguments":[{"name":"x","nativeSrc":"9833:1:28","nodeType":"YulIdentifier","src":"9833:1:28"},{"name":"y","nativeSrc":"9836:1:28","nodeType":"YulIdentifier","src":"9836:1:28"}],"functionName":{"name":"div","nativeSrc":"9829:3:28","nodeType":"YulIdentifier","src":"9829:3:28"},"nativeSrc":"9829:9:28","nodeType":"YulFunctionCall","src":"9829:9:28"},"variableNames":[{"name":"r","nativeSrc":"9824:1:28","nodeType":"YulIdentifier","src":"9824:1:28"}]}]},"name":"checked_div_t_uint256","nativeSrc":"9570:274:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"9601:1:28","nodeType":"YulTypedName","src":"9601:1:28","type":""},{"name":"y","nativeSrc":"9604:1:28","nodeType":"YulTypedName","src":"9604:1:28","type":""}],"returnVariables":[{"name":"r","nativeSrc":"9610:1:28","nodeType":"YulTypedName","src":"9610:1:28","type":""}],"src":"9570:274:28"},{"body":{"nativeSrc":"9996:182:28","nodeType":"YulBlock","src":"9996:182:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10013:3:28","nodeType":"YulIdentifier","src":"10013:3:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10026:2:28","nodeType":"YulLiteral","src":"10026:2:28","type":"","value":"96"},{"name":"value0","nativeSrc":"10030:6:28","nodeType":"YulIdentifier","src":"10030:6:28"}],"functionName":{"name":"shl","nativeSrc":"10022:3:28","nodeType":"YulIdentifier","src":"10022:3:28"},"nativeSrc":"10022:15:28","nodeType":"YulFunctionCall","src":"10022:15:28"},{"kind":"number","nativeSrc":"10039:66:28","nodeType":"YulLiteral","src":"10039:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10018:3:28","nodeType":"YulIdentifier","src":"10018:3:28"},"nativeSrc":"10018:88:28","nodeType":"YulFunctionCall","src":"10018:88:28"}],"functionName":{"name":"mstore","nativeSrc":"10006:6:28","nodeType":"YulIdentifier","src":"10006:6:28"},"nativeSrc":"10006:101:28","nodeType":"YulFunctionCall","src":"10006:101:28"},"nativeSrc":"10006:101:28","nodeType":"YulExpressionStatement","src":"10006:101:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10127:3:28","nodeType":"YulIdentifier","src":"10127:3:28"},{"kind":"number","nativeSrc":"10132:2:28","nodeType":"YulLiteral","src":"10132:2:28","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10123:3:28","nodeType":"YulIdentifier","src":"10123:3:28"},"nativeSrc":"10123:12:28","nodeType":"YulFunctionCall","src":"10123:12:28"},{"name":"value1","nativeSrc":"10137:6:28","nodeType":"YulIdentifier","src":"10137:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10116:6:28","nodeType":"YulIdentifier","src":"10116:6:28"},"nativeSrc":"10116:28:28","nodeType":"YulFunctionCall","src":"10116:28:28"},"nativeSrc":"10116:28:28","nodeType":"YulExpressionStatement","src":"10116:28:28"},{"nativeSrc":"10153:19:28","nodeType":"YulAssignment","src":"10153:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"10164:3:28","nodeType":"YulIdentifier","src":"10164:3:28"},{"kind":"number","nativeSrc":"10169:2:28","nodeType":"YulLiteral","src":"10169:2:28","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"10160:3:28","nodeType":"YulIdentifier","src":"10160:3:28"},"nativeSrc":"10160:12:28","nodeType":"YulFunctionCall","src":"10160:12:28"},"variableNames":[{"name":"end","nativeSrc":"10153:3:28","nodeType":"YulIdentifier","src":"10153:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9849:329:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9964:3:28","nodeType":"YulTypedName","src":"9964:3:28","type":""},{"name":"value1","nativeSrc":"9969:6:28","nodeType":"YulTypedName","src":"9969:6:28","type":""},{"name":"value0","nativeSrc":"9977:6:28","nodeType":"YulTypedName","src":"9977:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9988:3:28","nodeType":"YulTypedName","src":"9988:3:28","type":""}],"src":"9849:329:28"},{"body":{"nativeSrc":"10312:168:28","nodeType":"YulBlock","src":"10312:168:28","statements":[{"nativeSrc":"10322:26:28","nodeType":"YulAssignment","src":"10322:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"10334:9:28","nodeType":"YulIdentifier","src":"10334:9:28"},{"kind":"number","nativeSrc":"10345:2:28","nodeType":"YulLiteral","src":"10345:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10330:3:28","nodeType":"YulIdentifier","src":"10330:3:28"},"nativeSrc":"10330:18:28","nodeType":"YulFunctionCall","src":"10330:18:28"},"variableNames":[{"name":"tail","nativeSrc":"10322:4:28","nodeType":"YulIdentifier","src":"10322:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10364:9:28","nodeType":"YulIdentifier","src":"10364:9:28"},{"arguments":[{"name":"value0","nativeSrc":"10379:6:28","nodeType":"YulIdentifier","src":"10379:6:28"},{"kind":"number","nativeSrc":"10387:42:28","nodeType":"YulLiteral","src":"10387:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"10375:3:28","nodeType":"YulIdentifier","src":"10375:3:28"},"nativeSrc":"10375:55:28","nodeType":"YulFunctionCall","src":"10375:55:28"}],"functionName":{"name":"mstore","nativeSrc":"10357:6:28","nodeType":"YulIdentifier","src":"10357:6:28"},"nativeSrc":"10357:74:28","nodeType":"YulFunctionCall","src":"10357:74:28"},"nativeSrc":"10357:74:28","nodeType":"YulExpressionStatement","src":"10357:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10451:9:28","nodeType":"YulIdentifier","src":"10451:9:28"},{"kind":"number","nativeSrc":"10462:2:28","nodeType":"YulLiteral","src":"10462:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10447:3:28","nodeType":"YulIdentifier","src":"10447:3:28"},"nativeSrc":"10447:18:28","nodeType":"YulFunctionCall","src":"10447:18:28"},{"name":"value1","nativeSrc":"10467:6:28","nodeType":"YulIdentifier","src":"10467:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10440:6:28","nodeType":"YulIdentifier","src":"10440:6:28"},"nativeSrc":"10440:34:28","nodeType":"YulFunctionCall","src":"10440:34:28"},"nativeSrc":"10440:34:28","nodeType":"YulExpressionStatement","src":"10440:34:28"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"10183:297:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10273:9:28","nodeType":"YulTypedName","src":"10273:9:28","type":""},{"name":"value1","nativeSrc":"10284:6:28","nodeType":"YulTypedName","src":"10284:6:28","type":""},{"name":"value0","nativeSrc":"10292:6:28","nodeType":"YulTypedName","src":"10292:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10303:4:28","nodeType":"YulTypedName","src":"10303:4:28","type":""}],"src":"10183:297:28"},{"body":{"nativeSrc":"10533:77:28","nodeType":"YulBlock","src":"10533:77:28","statements":[{"nativeSrc":"10543:16:28","nodeType":"YulAssignment","src":"10543:16:28","value":{"arguments":[{"name":"x","nativeSrc":"10554:1:28","nodeType":"YulIdentifier","src":"10554:1:28"},{"name":"y","nativeSrc":"10557:1:28","nodeType":"YulIdentifier","src":"10557:1:28"}],"functionName":{"name":"add","nativeSrc":"10550:3:28","nodeType":"YulIdentifier","src":"10550:3:28"},"nativeSrc":"10550:9:28","nodeType":"YulFunctionCall","src":"10550:9:28"},"variableNames":[{"name":"sum","nativeSrc":"10543:3:28","nodeType":"YulIdentifier","src":"10543:3:28"}]},{"body":{"nativeSrc":"10582:22:28","nodeType":"YulBlock","src":"10582:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"10584:16:28","nodeType":"YulIdentifier","src":"10584:16:28"},"nativeSrc":"10584:18:28","nodeType":"YulFunctionCall","src":"10584:18:28"},"nativeSrc":"10584:18:28","nodeType":"YulExpressionStatement","src":"10584:18:28"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"10574:1:28","nodeType":"YulIdentifier","src":"10574:1:28"},{"name":"sum","nativeSrc":"10577:3:28","nodeType":"YulIdentifier","src":"10577:3:28"}],"functionName":{"name":"gt","nativeSrc":"10571:2:28","nodeType":"YulIdentifier","src":"10571:2:28"},"nativeSrc":"10571:10:28","nodeType":"YulFunctionCall","src":"10571:10:28"},"nativeSrc":"10568:36:28","nodeType":"YulIf","src":"10568:36:28"}]},"name":"checked_add_t_uint256","nativeSrc":"10485:125:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"10516:1:28","nodeType":"YulTypedName","src":"10516:1:28","type":""},{"name":"y","nativeSrc":"10519:1:28","nodeType":"YulTypedName","src":"10519:1:28","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"10525:3:28","nodeType":"YulTypedName","src":"10525:3:28","type":""}],"src":"10485:125:28"},{"body":{"nativeSrc":"10693:280:28","nodeType":"YulBlock","src":"10693:280:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10710:3:28","nodeType":"YulIdentifier","src":"10710:3:28"},{"name":"length","nativeSrc":"10715:6:28","nodeType":"YulIdentifier","src":"10715:6:28"}],"functionName":{"name":"mstore","nativeSrc":"10703:6:28","nodeType":"YulIdentifier","src":"10703:6:28"},"nativeSrc":"10703:19:28","nodeType":"YulFunctionCall","src":"10703:19:28"},"nativeSrc":"10703:19:28","nodeType":"YulExpressionStatement","src":"10703:19:28"},{"body":{"nativeSrc":"10813:16:28","nodeType":"YulBlock","src":"10813:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10822:1:28","nodeType":"YulLiteral","src":"10822:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"10825:1:28","nodeType":"YulLiteral","src":"10825:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10815:6:28","nodeType":"YulIdentifier","src":"10815:6:28"},"nativeSrc":"10815:12:28","nodeType":"YulFunctionCall","src":"10815:12:28"},"nativeSrc":"10815:12:28","nodeType":"YulExpressionStatement","src":"10815:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"10737:6:28","nodeType":"YulIdentifier","src":"10737:6:28"},{"kind":"number","nativeSrc":"10745:66:28","nodeType":"YulLiteral","src":"10745:66:28","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10734:2:28","nodeType":"YulIdentifier","src":"10734:2:28"},"nativeSrc":"10734:78:28","nodeType":"YulFunctionCall","src":"10734:78:28"},"nativeSrc":"10731:98:28","nodeType":"YulIf","src":"10731:98:28"},{"nativeSrc":"10838:30:28","nodeType":"YulVariableDeclaration","src":"10838:30:28","value":{"arguments":[{"kind":"number","nativeSrc":"10858:1:28","nodeType":"YulLiteral","src":"10858:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"10861:6:28","nodeType":"YulIdentifier","src":"10861:6:28"}],"functionName":{"name":"shl","nativeSrc":"10854:3:28","nodeType":"YulIdentifier","src":"10854:3:28"},"nativeSrc":"10854:14:28","nodeType":"YulFunctionCall","src":"10854:14:28"},"variables":[{"name":"length_1","nativeSrc":"10842:8:28","nodeType":"YulTypedName","src":"10842:8:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10894:3:28","nodeType":"YulIdentifier","src":"10894:3:28"},{"kind":"number","nativeSrc":"10899:4:28","nodeType":"YulLiteral","src":"10899:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10890:3:28","nodeType":"YulIdentifier","src":"10890:3:28"},"nativeSrc":"10890:14:28","nodeType":"YulFunctionCall","src":"10890:14:28"},{"name":"start","nativeSrc":"10906:5:28","nodeType":"YulIdentifier","src":"10906:5:28"},{"name":"length_1","nativeSrc":"10913:8:28","nodeType":"YulIdentifier","src":"10913:8:28"}],"functionName":{"name":"calldatacopy","nativeSrc":"10877:12:28","nodeType":"YulIdentifier","src":"10877:12:28"},"nativeSrc":"10877:45:28","nodeType":"YulFunctionCall","src":"10877:45:28"},"nativeSrc":"10877:45:28","nodeType":"YulExpressionStatement","src":"10877:45:28"},{"nativeSrc":"10931:36:28","nodeType":"YulAssignment","src":"10931:36:28","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10946:3:28","nodeType":"YulIdentifier","src":"10946:3:28"},{"name":"length_1","nativeSrc":"10951:8:28","nodeType":"YulIdentifier","src":"10951:8:28"}],"functionName":{"name":"add","nativeSrc":"10942:3:28","nodeType":"YulIdentifier","src":"10942:3:28"},"nativeSrc":"10942:18:28","nodeType":"YulFunctionCall","src":"10942:18:28"},{"kind":"number","nativeSrc":"10962:4:28","nodeType":"YulLiteral","src":"10962:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"10938:3:28","nodeType":"YulIdentifier","src":"10938:3:28"},"nativeSrc":"10938:29:28","nodeType":"YulFunctionCall","src":"10938:29:28"},"variableNames":[{"name":"end","nativeSrc":"10931:3:28","nodeType":"YulIdentifier","src":"10931:3:28"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10615:358:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"10662:5:28","nodeType":"YulTypedName","src":"10662:5:28","type":""},{"name":"length","nativeSrc":"10669:6:28","nodeType":"YulTypedName","src":"10669:6:28","type":""},{"name":"pos","nativeSrc":"10677:3:28","nodeType":"YulTypedName","src":"10677:3:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10685:3:28","nodeType":"YulTypedName","src":"10685:3:28","type":""}],"src":"10615:358:28"},{"body":{"nativeSrc":"11255:362:28","nodeType":"YulBlock","src":"11255:362:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11272:9:28","nodeType":"YulIdentifier","src":"11272:9:28"},{"arguments":[{"name":"value0","nativeSrc":"11287:6:28","nodeType":"YulIdentifier","src":"11287:6:28"},{"kind":"number","nativeSrc":"11295:42:28","nodeType":"YulLiteral","src":"11295:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11283:3:28","nodeType":"YulIdentifier","src":"11283:3:28"},"nativeSrc":"11283:55:28","nodeType":"YulFunctionCall","src":"11283:55:28"}],"functionName":{"name":"mstore","nativeSrc":"11265:6:28","nodeType":"YulIdentifier","src":"11265:6:28"},"nativeSrc":"11265:74:28","nodeType":"YulFunctionCall","src":"11265:74:28"},"nativeSrc":"11265:74:28","nodeType":"YulExpressionStatement","src":"11265:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11359:9:28","nodeType":"YulIdentifier","src":"11359:9:28"},{"kind":"number","nativeSrc":"11370:2:28","nodeType":"YulLiteral","src":"11370:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11355:3:28","nodeType":"YulIdentifier","src":"11355:3:28"},"nativeSrc":"11355:18:28","nodeType":"YulFunctionCall","src":"11355:18:28"},{"kind":"number","nativeSrc":"11375:2:28","nodeType":"YulLiteral","src":"11375:2:28","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"11348:6:28","nodeType":"YulIdentifier","src":"11348:6:28"},"nativeSrc":"11348:30:28","nodeType":"YulFunctionCall","src":"11348:30:28"},"nativeSrc":"11348:30:28","nodeType":"YulExpressionStatement","src":"11348:30:28"},{"nativeSrc":"11387:87:28","nodeType":"YulVariableDeclaration","src":"11387:87:28","value":{"arguments":[{"name":"value1","nativeSrc":"11439:6:28","nodeType":"YulIdentifier","src":"11439:6:28"},{"name":"value2","nativeSrc":"11447:6:28","nodeType":"YulIdentifier","src":"11447:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"11459:9:28","nodeType":"YulIdentifier","src":"11459:9:28"},{"kind":"number","nativeSrc":"11470:2:28","nodeType":"YulLiteral","src":"11470:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11455:3:28","nodeType":"YulIdentifier","src":"11455:3:28"},"nativeSrc":"11455:18:28","nodeType":"YulFunctionCall","src":"11455:18:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11401:37:28","nodeType":"YulIdentifier","src":"11401:37:28"},"nativeSrc":"11401:73:28","nodeType":"YulFunctionCall","src":"11401:73:28"},"variables":[{"name":"tail_1","nativeSrc":"11391:6:28","nodeType":"YulTypedName","src":"11391:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11494:9:28","nodeType":"YulIdentifier","src":"11494:9:28"},{"kind":"number","nativeSrc":"11505:2:28","nodeType":"YulLiteral","src":"11505:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11490:3:28","nodeType":"YulIdentifier","src":"11490:3:28"},"nativeSrc":"11490:18:28","nodeType":"YulFunctionCall","src":"11490:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"11514:6:28","nodeType":"YulIdentifier","src":"11514:6:28"},{"name":"headStart","nativeSrc":"11522:9:28","nodeType":"YulIdentifier","src":"11522:9:28"}],"functionName":{"name":"sub","nativeSrc":"11510:3:28","nodeType":"YulIdentifier","src":"11510:3:28"},"nativeSrc":"11510:22:28","nodeType":"YulFunctionCall","src":"11510:22:28"}],"functionName":{"name":"mstore","nativeSrc":"11483:6:28","nodeType":"YulIdentifier","src":"11483:6:28"},"nativeSrc":"11483:50:28","nodeType":"YulFunctionCall","src":"11483:50:28"},"nativeSrc":"11483:50:28","nodeType":"YulExpressionStatement","src":"11483:50:28"},{"nativeSrc":"11542:69:28","nodeType":"YulAssignment","src":"11542:69:28","value":{"arguments":[{"name":"value3","nativeSrc":"11588:6:28","nodeType":"YulIdentifier","src":"11588:6:28"},{"name":"value4","nativeSrc":"11596:6:28","nodeType":"YulIdentifier","src":"11596:6:28"},{"name":"tail_1","nativeSrc":"11604:6:28","nodeType":"YulIdentifier","src":"11604:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11550:37:28","nodeType":"YulIdentifier","src":"11550:37:28"},"nativeSrc":"11550:61:28","nodeType":"YulFunctionCall","src":"11550:61:28"},"variableNames":[{"name":"tail","nativeSrc":"11542:4:28","nodeType":"YulIdentifier","src":"11542:4:28"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"10978:639:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11192:9:28","nodeType":"YulTypedName","src":"11192:9:28","type":""},{"name":"value4","nativeSrc":"11203:6:28","nodeType":"YulTypedName","src":"11203:6:28","type":""},{"name":"value3","nativeSrc":"11211:6:28","nodeType":"YulTypedName","src":"11211:6:28","type":""},{"name":"value2","nativeSrc":"11219:6:28","nodeType":"YulTypedName","src":"11219:6:28","type":""},{"name":"value1","nativeSrc":"11227:6:28","nodeType":"YulTypedName","src":"11227:6:28","type":""},{"name":"value0","nativeSrc":"11235:6:28","nodeType":"YulTypedName","src":"11235:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11246:4:28","nodeType":"YulTypedName","src":"11246:4:28","type":""}],"src":"10978:639:28"},{"body":{"nativeSrc":"11955:402:28","nodeType":"YulBlock","src":"11955:402:28","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11972:9:28","nodeType":"YulIdentifier","src":"11972:9:28"},{"name":"value0","nativeSrc":"11983:6:28","nodeType":"YulIdentifier","src":"11983:6:28"}],"functionName":{"name":"mstore","nativeSrc":"11965:6:28","nodeType":"YulIdentifier","src":"11965:6:28"},"nativeSrc":"11965:25:28","nodeType":"YulFunctionCall","src":"11965:25:28"},"nativeSrc":"11965:25:28","nodeType":"YulExpressionStatement","src":"11965:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12010:9:28","nodeType":"YulIdentifier","src":"12010:9:28"},{"kind":"number","nativeSrc":"12021:2:28","nodeType":"YulLiteral","src":"12021:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12006:3:28","nodeType":"YulIdentifier","src":"12006:3:28"},"nativeSrc":"12006:18:28","nodeType":"YulFunctionCall","src":"12006:18:28"},{"kind":"number","nativeSrc":"12026:3:28","nodeType":"YulLiteral","src":"12026:3:28","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"11999:6:28","nodeType":"YulIdentifier","src":"11999:6:28"},"nativeSrc":"11999:31:28","nodeType":"YulFunctionCall","src":"11999:31:28"},"nativeSrc":"11999:31:28","nodeType":"YulExpressionStatement","src":"11999:31:28"},{"nativeSrc":"12039:88:28","nodeType":"YulVariableDeclaration","src":"12039:88:28","value":{"arguments":[{"name":"value1","nativeSrc":"12091:6:28","nodeType":"YulIdentifier","src":"12091:6:28"},{"name":"value2","nativeSrc":"12099:6:28","nodeType":"YulIdentifier","src":"12099:6:28"},{"arguments":[{"name":"headStart","nativeSrc":"12111:9:28","nodeType":"YulIdentifier","src":"12111:9:28"},{"kind":"number","nativeSrc":"12122:3:28","nodeType":"YulLiteral","src":"12122:3:28","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"12107:3:28","nodeType":"YulIdentifier","src":"12107:3:28"},"nativeSrc":"12107:19:28","nodeType":"YulFunctionCall","src":"12107:19:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"12053:37:28","nodeType":"YulIdentifier","src":"12053:37:28"},"nativeSrc":"12053:74:28","nodeType":"YulFunctionCall","src":"12053:74:28"},"variables":[{"name":"tail_1","nativeSrc":"12043:6:28","nodeType":"YulTypedName","src":"12043:6:28","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12147:9:28","nodeType":"YulIdentifier","src":"12147:9:28"},{"kind":"number","nativeSrc":"12158:2:28","nodeType":"YulLiteral","src":"12158:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12143:3:28","nodeType":"YulIdentifier","src":"12143:3:28"},"nativeSrc":"12143:18:28","nodeType":"YulFunctionCall","src":"12143:18:28"},{"arguments":[{"name":"tail_1","nativeSrc":"12167:6:28","nodeType":"YulIdentifier","src":"12167:6:28"},{"name":"headStart","nativeSrc":"12175:9:28","nodeType":"YulIdentifier","src":"12175:9:28"}],"functionName":{"name":"sub","nativeSrc":"12163:3:28","nodeType":"YulIdentifier","src":"12163:3:28"},"nativeSrc":"12163:22:28","nodeType":"YulFunctionCall","src":"12163:22:28"}],"functionName":{"name":"mstore","nativeSrc":"12136:6:28","nodeType":"YulIdentifier","src":"12136:6:28"},"nativeSrc":"12136:50:28","nodeType":"YulFunctionCall","src":"12136:50:28"},"nativeSrc":"12136:50:28","nodeType":"YulExpressionStatement","src":"12136:50:28"},{"nativeSrc":"12195:69:28","nodeType":"YulAssignment","src":"12195:69:28","value":{"arguments":[{"name":"value3","nativeSrc":"12241:6:28","nodeType":"YulIdentifier","src":"12241:6:28"},{"name":"value4","nativeSrc":"12249:6:28","nodeType":"YulIdentifier","src":"12249:6:28"},{"name":"tail_1","nativeSrc":"12257:6:28","nodeType":"YulIdentifier","src":"12257:6:28"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"12203:37:28","nodeType":"YulIdentifier","src":"12203:37:28"},"nativeSrc":"12203:61:28","nodeType":"YulFunctionCall","src":"12203:61:28"},"variableNames":[{"name":"tail","nativeSrc":"12195:4:28","nodeType":"YulIdentifier","src":"12195:4:28"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12284:9:28","nodeType":"YulIdentifier","src":"12284:9:28"},{"kind":"number","nativeSrc":"12295:2:28","nodeType":"YulLiteral","src":"12295:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12280:3:28","nodeType":"YulIdentifier","src":"12280:3:28"},"nativeSrc":"12280:18:28","nodeType":"YulFunctionCall","src":"12280:18:28"},{"name":"value5","nativeSrc":"12300:6:28","nodeType":"YulIdentifier","src":"12300:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12273:6:28","nodeType":"YulIdentifier","src":"12273:6:28"},"nativeSrc":"12273:34:28","nodeType":"YulFunctionCall","src":"12273:34:28"},"nativeSrc":"12273:34:28","nodeType":"YulExpressionStatement","src":"12273:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12327:9:28","nodeType":"YulIdentifier","src":"12327:9:28"},{"kind":"number","nativeSrc":"12338:3:28","nodeType":"YulLiteral","src":"12338:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"12323:3:28","nodeType":"YulIdentifier","src":"12323:3:28"},"nativeSrc":"12323:19:28","nodeType":"YulFunctionCall","src":"12323:19:28"},{"name":"value6","nativeSrc":"12344:6:28","nodeType":"YulIdentifier","src":"12344:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12316:6:28","nodeType":"YulIdentifier","src":"12316:6:28"},"nativeSrc":"12316:35:28","nodeType":"YulFunctionCall","src":"12316:35:28"},"nativeSrc":"12316:35:28","nodeType":"YulExpressionStatement","src":"12316:35:28"}]},"name":"abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"11622:735:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11876:9:28","nodeType":"YulTypedName","src":"11876:9:28","type":""},{"name":"value6","nativeSrc":"11887:6:28","nodeType":"YulTypedName","src":"11887:6:28","type":""},{"name":"value5","nativeSrc":"11895:6:28","nodeType":"YulTypedName","src":"11895:6:28","type":""},{"name":"value4","nativeSrc":"11903:6:28","nodeType":"YulTypedName","src":"11903:6:28","type":""},{"name":"value3","nativeSrc":"11911:6:28","nodeType":"YulTypedName","src":"11911:6:28","type":""},{"name":"value2","nativeSrc":"11919:6:28","nodeType":"YulTypedName","src":"11919:6:28","type":""},{"name":"value1","nativeSrc":"11927:6:28","nodeType":"YulTypedName","src":"11927:6:28","type":""},{"name":"value0","nativeSrc":"11935:6:28","nodeType":"YulTypedName","src":"11935:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11946:4:28","nodeType":"YulTypedName","src":"11946:4:28","type":""}],"src":"11622:735:28"},{"body":{"nativeSrc":"12499:119:28","nodeType":"YulBlock","src":"12499:119:28","statements":[{"nativeSrc":"12509:26:28","nodeType":"YulAssignment","src":"12509:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"12521:9:28","nodeType":"YulIdentifier","src":"12521:9:28"},{"kind":"number","nativeSrc":"12532:2:28","nodeType":"YulLiteral","src":"12532:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12517:3:28","nodeType":"YulIdentifier","src":"12517:3:28"},"nativeSrc":"12517:18:28","nodeType":"YulFunctionCall","src":"12517:18:28"},"variableNames":[{"name":"tail","nativeSrc":"12509:4:28","nodeType":"YulIdentifier","src":"12509:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12551:9:28","nodeType":"YulIdentifier","src":"12551:9:28"},{"name":"value0","nativeSrc":"12562:6:28","nodeType":"YulIdentifier","src":"12562:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12544:6:28","nodeType":"YulIdentifier","src":"12544:6:28"},"nativeSrc":"12544:25:28","nodeType":"YulFunctionCall","src":"12544:25:28"},"nativeSrc":"12544:25:28","nodeType":"YulExpressionStatement","src":"12544:25:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12589:9:28","nodeType":"YulIdentifier","src":"12589:9:28"},{"kind":"number","nativeSrc":"12600:2:28","nodeType":"YulLiteral","src":"12600:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12585:3:28","nodeType":"YulIdentifier","src":"12585:3:28"},"nativeSrc":"12585:18:28","nodeType":"YulFunctionCall","src":"12585:18:28"},{"name":"value1","nativeSrc":"12605:6:28","nodeType":"YulIdentifier","src":"12605:6:28"}],"functionName":{"name":"mstore","nativeSrc":"12578:6:28","nodeType":"YulIdentifier","src":"12578:6:28"},"nativeSrc":"12578:34:28","nodeType":"YulFunctionCall","src":"12578:34:28"},"nativeSrc":"12578:34:28","nodeType":"YulExpressionStatement","src":"12578:34:28"}]},"name":"abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"12362:256:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12460:9:28","nodeType":"YulTypedName","src":"12460:9:28","type":""},{"name":"value1","nativeSrc":"12471:6:28","nodeType":"YulTypedName","src":"12471:6:28","type":""},{"name":"value0","nativeSrc":"12479:6:28","nodeType":"YulTypedName","src":"12479:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12490:4:28","nodeType":"YulTypedName","src":"12490:4:28","type":""}],"src":"12362:256:28"},{"body":{"nativeSrc":"12752:198:28","nodeType":"YulBlock","src":"12752:198:28","statements":[{"nativeSrc":"12762:26:28","nodeType":"YulAssignment","src":"12762:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"12774:9:28","nodeType":"YulIdentifier","src":"12774:9:28"},{"kind":"number","nativeSrc":"12785:2:28","nodeType":"YulLiteral","src":"12785:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12770:3:28","nodeType":"YulIdentifier","src":"12770:3:28"},"nativeSrc":"12770:18:28","nodeType":"YulFunctionCall","src":"12770:18:28"},"variableNames":[{"name":"tail","nativeSrc":"12762:4:28","nodeType":"YulIdentifier","src":"12762:4:28"}]},{"nativeSrc":"12797:52:28","nodeType":"YulVariableDeclaration","src":"12797:52:28","value":{"kind":"number","nativeSrc":"12807:42:28","nodeType":"YulLiteral","src":"12807:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"12801:2:28","nodeType":"YulTypedName","src":"12801:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12865:9:28","nodeType":"YulIdentifier","src":"12865:9:28"},{"arguments":[{"name":"value0","nativeSrc":"12880:6:28","nodeType":"YulIdentifier","src":"12880:6:28"},{"name":"_1","nativeSrc":"12888:2:28","nodeType":"YulIdentifier","src":"12888:2:28"}],"functionName":{"name":"and","nativeSrc":"12876:3:28","nodeType":"YulIdentifier","src":"12876:3:28"},"nativeSrc":"12876:15:28","nodeType":"YulFunctionCall","src":"12876:15:28"}],"functionName":{"name":"mstore","nativeSrc":"12858:6:28","nodeType":"YulIdentifier","src":"12858:6:28"},"nativeSrc":"12858:34:28","nodeType":"YulFunctionCall","src":"12858:34:28"},"nativeSrc":"12858:34:28","nodeType":"YulExpressionStatement","src":"12858:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12912:9:28","nodeType":"YulIdentifier","src":"12912:9:28"},{"kind":"number","nativeSrc":"12923:2:28","nodeType":"YulLiteral","src":"12923:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12908:3:28","nodeType":"YulIdentifier","src":"12908:3:28"},"nativeSrc":"12908:18:28","nodeType":"YulFunctionCall","src":"12908:18:28"},{"arguments":[{"name":"value1","nativeSrc":"12932:6:28","nodeType":"YulIdentifier","src":"12932:6:28"},{"name":"_1","nativeSrc":"12940:2:28","nodeType":"YulIdentifier","src":"12940:2:28"}],"functionName":{"name":"and","nativeSrc":"12928:3:28","nodeType":"YulIdentifier","src":"12928:3:28"},"nativeSrc":"12928:15:28","nodeType":"YulFunctionCall","src":"12928:15:28"}],"functionName":{"name":"mstore","nativeSrc":"12901:6:28","nodeType":"YulIdentifier","src":"12901:6:28"},"nativeSrc":"12901:43:28","nodeType":"YulFunctionCall","src":"12901:43:28"},"nativeSrc":"12901:43:28","nodeType":"YulExpressionStatement","src":"12901:43:28"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"12623:327:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12713:9:28","nodeType":"YulTypedName","src":"12713:9:28","type":""},{"name":"value1","nativeSrc":"12724:6:28","nodeType":"YulTypedName","src":"12724:6:28","type":""},{"name":"value0","nativeSrc":"12732:6:28","nodeType":"YulTypedName","src":"12732:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12743:4:28","nodeType":"YulTypedName","src":"12743:4:28","type":""}],"src":"12623:327:28"},{"body":{"nativeSrc":"13033:199:28","nodeType":"YulBlock","src":"13033:199:28","statements":[{"body":{"nativeSrc":"13079:16:28","nodeType":"YulBlock","src":"13079:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13088:1:28","nodeType":"YulLiteral","src":"13088:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"13091:1:28","nodeType":"YulLiteral","src":"13091:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13081:6:28","nodeType":"YulIdentifier","src":"13081:6:28"},"nativeSrc":"13081:12:28","nodeType":"YulFunctionCall","src":"13081:12:28"},"nativeSrc":"13081:12:28","nodeType":"YulExpressionStatement","src":"13081:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"13054:7:28","nodeType":"YulIdentifier","src":"13054:7:28"},{"name":"headStart","nativeSrc":"13063:9:28","nodeType":"YulIdentifier","src":"13063:9:28"}],"functionName":{"name":"sub","nativeSrc":"13050:3:28","nodeType":"YulIdentifier","src":"13050:3:28"},"nativeSrc":"13050:23:28","nodeType":"YulFunctionCall","src":"13050:23:28"},{"kind":"number","nativeSrc":"13075:2:28","nodeType":"YulLiteral","src":"13075:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"13046:3:28","nodeType":"YulIdentifier","src":"13046:3:28"},"nativeSrc":"13046:32:28","nodeType":"YulFunctionCall","src":"13046:32:28"},"nativeSrc":"13043:52:28","nodeType":"YulIf","src":"13043:52:28"},{"nativeSrc":"13104:29:28","nodeType":"YulVariableDeclaration","src":"13104:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"13123:9:28","nodeType":"YulIdentifier","src":"13123:9:28"}],"functionName":{"name":"mload","nativeSrc":"13117:5:28","nodeType":"YulIdentifier","src":"13117:5:28"},"nativeSrc":"13117:16:28","nodeType":"YulFunctionCall","src":"13117:16:28"},"variables":[{"name":"value","nativeSrc":"13108:5:28","nodeType":"YulTypedName","src":"13108:5:28","type":""}]},{"body":{"nativeSrc":"13186:16:28","nodeType":"YulBlock","src":"13186:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13195:1:28","nodeType":"YulLiteral","src":"13195:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"13198:1:28","nodeType":"YulLiteral","src":"13198:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13188:6:28","nodeType":"YulIdentifier","src":"13188:6:28"},"nativeSrc":"13188:12:28","nodeType":"YulFunctionCall","src":"13188:12:28"},"nativeSrc":"13188:12:28","nodeType":"YulExpressionStatement","src":"13188:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13155:5:28","nodeType":"YulIdentifier","src":"13155:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"13176:5:28","nodeType":"YulIdentifier","src":"13176:5:28"}],"functionName":{"name":"iszero","nativeSrc":"13169:6:28","nodeType":"YulIdentifier","src":"13169:6:28"},"nativeSrc":"13169:13:28","nodeType":"YulFunctionCall","src":"13169:13:28"}],"functionName":{"name":"iszero","nativeSrc":"13162:6:28","nodeType":"YulIdentifier","src":"13162:6:28"},"nativeSrc":"13162:21:28","nodeType":"YulFunctionCall","src":"13162:21:28"}],"functionName":{"name":"eq","nativeSrc":"13152:2:28","nodeType":"YulIdentifier","src":"13152:2:28"},"nativeSrc":"13152:32:28","nodeType":"YulFunctionCall","src":"13152:32:28"}],"functionName":{"name":"iszero","nativeSrc":"13145:6:28","nodeType":"YulIdentifier","src":"13145:6:28"},"nativeSrc":"13145:40:28","nodeType":"YulFunctionCall","src":"13145:40:28"},"nativeSrc":"13142:60:28","nodeType":"YulIf","src":"13142:60:28"},{"nativeSrc":"13211:15:28","nodeType":"YulAssignment","src":"13211:15:28","value":{"name":"value","nativeSrc":"13221:5:28","nodeType":"YulIdentifier","src":"13221:5:28"},"variableNames":[{"name":"value0","nativeSrc":"13211:6:28","nodeType":"YulIdentifier","src":"13211:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"12955:277:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12999:9:28","nodeType":"YulTypedName","src":"12999:9:28","type":""},{"name":"dataEnd","nativeSrc":"13010:7:28","nodeType":"YulTypedName","src":"13010:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"13022:6:28","nodeType":"YulTypedName","src":"13022:6:28","type":""}],"src":"12955:277:28"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        value2 := abi_decode_address(add(headStart, 32))\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$948__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_array_uint256_dyn(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := calldataload(offset)\n        let _2 := 0x20\n        let _3 := 0xffffffffffffffff\n        if gt(_1, _3) { panic_error_0x41() }\n        let _4 := shl(5, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_4, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _3), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _1)\n        dst := add(memPtr, 0x20)\n        let srcEnd := add(add(offset, _4), 0x20)\n        if gt(srcEnd, end) { revert(0, 0) }\n        let src := add(offset, 0x20)\n        for { } lt(src, srcEnd) { src := add(src, _2) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _2)\n        }\n        array := memPtr\n    }\n    function abi_decode_tuple_t_array$_t_uint256_$dyn_memory_ptrt_array$_t_uint256_$dyn_memory_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_array_uint256_dyn(add(headStart, offset), dataEnd)\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_array_uint256_dyn(add(headStart, offset_1), dataEnd)\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function abi_encode_tuple_t_uint256_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256__to_t_uint256_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 160))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n    function abi_encode_tuple_t_uint256_t_rational_1_by_1__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":708},{"length":32,"start":909},{"length":32,"start":5994},{"length":32,"start":6130}],"1941":[{"length":32,"start":1046},{"length":32,"start":3565}],"1944":[{"length":32,"start":782},{"length":32,"start":3492}],"1947":[{"length":32,"start":1242},{"length":32,"start":3456}],"1950":[{"length":32,"start":535},{"length":32,"start":1471},{"length":32,"start":2287},{"length":32,"start":3666}],"1954":[{"length":32,"start":975},{"length":32,"start":3995},{"length":32,"start":4615}],"1957":[{"length":32,"start":593},{"length":32,"start":4107},{"length":32,"start":4704}],"1960":[{"length":32,"start":840},{"length":32,"start":2700}],"1963":[{"length":32,"start":672},{"length":32,"start":3165}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101c45760003560e01c806364c19303116100f9578063bab2f55211610097578063e3a0ce0911610071578063e3a0ce09146104fc578063f23a6e611461051f578063f2fde38b14610532578063fa9fdc6a1461054557600080fd5b8063bab2f55214610489578063bc197c8114610491578063cd421fbf146104d557600080fd5b80638da5cb5b116100d35780638da5cb5b14610438578063a5bb3ec114610440578063a9d637e114610463578063ad740fa01461047657600080fd5b806364c19303146103ca57806370d92882146103f157806382bfefc81461041157600080fd5b80632b093fe911610166578063496baa4711610140578063496baa471461033057806351e75e8b14610343578063556c448d1461036a578063572b6c051461037d57600080fd5b80632b093fe91461029b5780632b4c9f16146102c2578063491bde661461030957600080fd5b806304585ac7116101a257806304585ac71461023957806316a3138b1461024c5780631b8ebc3c146102735780632099920e1461028857600080fd5b806301ffc9a7146101c9578063039af9eb146101f1578063043063bc14610212575b600080fd5b6101dc6101d7366004611943565b610570565b60405190151581526020015b60405180910390f35b6102046101ff366004611985565b61058a565b6040519081526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b610204610247366004611985565b6105ab565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6102866102813660046119ea565b6106f8565b005b610204610296366004611a7f565b6108db565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b61028661033e366004611aab565b6109b3565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b610204610378366004611985565b610bb5565b6101dc61038b366004611b07565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102e47f000000000000000000000000000000000000000000000000000000000000000081565b6102046103ff366004611b07565b60056020526000908152604090205481565b6102e47f000000000000000000000000000000000000000000000000000000000000000081565b6102e4610bc5565b6101dc61044e366004611b07565b60066020526000908152604090205460ff1681565b610204610471366004611b07565b610bf1565b610286610484366004611c0d565b610c8c565b610204610d7c565b6104a461049f366004611cb3565b610dd3565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101e8565b6102047f000000000000000000000000000000000000000000000000000000000000000081565b6101dc61050a366004611985565b60046020526000908152604090205460ff1681565b6104a461052d366004611d6e565b6111ed565b610286610540366004611b07565b61142f565b610204610553366004611a7f565b600360209081526000928352604080842090915290825290205481565b60006105848261057e61144d565b9061147b565b92915050565b6000818154811061059a57600080fd5b600091825260209091200154905081565b60006105b5610d7c565b8211806105e157507f000000000000000000000000000000000000000000000000000000000000000082115b15610620576040517f764e560f000000000000000000000000000000000000000000000000000000008152600481018390526024015b60405180910390fd5b6000821561064b5760026000610637600186611e15565b81526020019081526020016000205461064e565b60005b905060015b60005481116106c3576000818154811061066f5761066f611e28565b90600052602060002001548210156106b157600161068d8183611e15565b8154811061069d5761069d611e28565b906000526020600020015492505050919050565b806106bb81611e57565b915050610653565b506000546001906106d5908290611e15565b815481106106e5576106e5611e28565b9060005260206000200154915050919050565b610711610703611555565b61070b61155f565b9061158d565b82811461074a576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000839003610785576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600054156107bf576040517f65edd76100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015b838110156108ba5784846107d7600184611e15565b8181106107e6576107e6611e28565b905060200201358585838181106107ff576107ff611e28565b90506020020135101561083e576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828261084b600184611e15565b81811061085a5761085a611e28565b9050602002013583838381811061087357610873611e28565b9050602002013510156108b2576040517f7bd3bbea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001016107c2565b506108c7600085856118e3565b506108d4600183836118e3565b5050505050565b60006108e5610d7c565b83118061091157507f000000000000000000000000000000000000000000000000000000000000000083115b1561094b576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101849052602401610617565b6000610956846105ab565b600085815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff88168452825280832054888452600290925290912054919250906109a08383611e8f565b6109aa9190611ea6565b95945050505050565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606084901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600490935291205490915060ff1615610a87576040517f8084224300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610617565b610ae97f0000000000000000000000000000000000000000000000000000000000000000828787808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509294939250506115fc9050565b610b1f576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000818152600560209081526040808320869055848352600482529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590518481527fad13a161261d327d2506101e44c2dd1737e7314cd7ed475a2819bdc64c76b857910160405180910390a25050505050565b6001818154811061059a57600080fd5b6000610bec610bd261155f565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600560205260408120548015610c235780610c26565b60015b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602052604090205490925060ff168015610c8557610c827f000000000000000000000000000000000000000000000000000000000000000084611e8f565b92505b5050919050565b610c97610703611555565b8051825114610cd2576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8251811015610d775760008181526007602052604090205415610d4157828181518110610d0457610d04611e28565b60200260200101516040517ffaf6788700000000000000000000000000000000000000000000000000000000815260040161061791815260200190565b818181518110610d5357610d53611e28565b60209081029190910181015160008381526007909252604090912055600101610cd5565b505050565b60007f0000000000000000000000000000000000000000000000000000000000000000610dc97f000000000000000000000000000000000000000000000000000000000000000042611e15565b610bec9190611ea6565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610e44576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610e4e610d7c565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610ead576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610617565b6000805b88811015610f96576000600760008c8c85818110610ed157610ed1611e28565b90506020020135815260200190815260200160002054905080600003610f5d57338b8b84818110610f0457610f04611e28565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610617565b80898984818110610f7057610f70611e28565b90506020020135610f819190611e8f565b610f8b9084611ee1565b925050600101610eb1565b5060607f000000000000000000000000000000000000000000000000000000000000000081600081518110610fcd57610fcd611e28565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505060607f00000000000000000000000000000000000000000000000000000000000000008160008151811061103d5761103d611e28565b60200260200101818152505060006110548d610bf1565b90506110608185611e8f565b9350836003600087815260200190815260200160002060008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546110c29190611ee1565b9091555050600085815260026020526040812080548692906110e5908490611ee1565b925050819055503373ffffffffffffffffffffffffffffffffffffffff1663805349348e8e8e8e8e6040518663ffffffff1660e01b815260040161112d959493929190611f3f565b600060405180830381600087803b15801561114757600080fd5b505af115801561115b573d6000803e3d6000fd5b50505050848d73ffffffffffffffffffffffffffffffffffffffff167f3adb63d4fde6845c0b2322e50ebb349a765d70b1756f0c1d1cfa64da74681942428f8f8f8f8b896040516111b29796959493929190611f8e565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009d9c50505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461125e576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000085146112c0576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610617565b83600114611304576040517ff789eb2f0000000000000000000000000000000000000000000000000000000081526004810185905260016024820152604401610617565b73ffffffffffffffffffffffffffffffffffffffff861660009081526006602052604090205460ff161561137c576040517f03a0028700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87166004820152602401610617565b73ffffffffffffffffffffffffffffffffffffffff861660008181526006602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815192835242908301527f2f1cff01c45015e0e6d543724e40ddc5472049fe52ae6a10dda3d2363d38f38b910160405180910390a1507ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b61144a61143a611555565b8261144361155f565b9190611612565b50565b60008061058460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611e15565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016114cb57506000610584565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161151c57506001610584565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610bec611727565b60008061058460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611e15565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146115f8576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610617565b5050565b600082611609858461186e565b14949350505050565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461167f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610617565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146117215783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b6000333214806117375750601836105b1561174157503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1633148061185d57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185d9190611fd2565b1561186757919050565b3391505090565b600081815b84518110156118a95761189f8286838151811061189257611892611e28565b60200260200101516118b1565b9150600101611873565b509392505050565b60008183106118cd5760008281526020849052604090206118dc565b60008381526020839052604090205b9392505050565b82805482825590600052602060002090810192821561191e579160200282015b8281111561191e578235825591602001919060010190611903565b5061192a92915061192e565b5090565b5b8082111561192a576000815560010161192f565b60006020828403121561195557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146118dc57600080fd5b60006020828403121561199757600080fd5b5035919050565b60008083601f8401126119b057600080fd5b50813567ffffffffffffffff8111156119c857600080fd5b6020830191508360208260051b85010111156119e357600080fd5b9250929050565b60008060008060408587031215611a0057600080fd5b843567ffffffffffffffff80821115611a1857600080fd5b611a248883890161199e565b90965094506020870135915080821115611a3d57600080fd5b50611a4a8782880161199e565b95989497509550505050565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a7a57600080fd5b919050565b60008060408385031215611a9257600080fd5b82359150611aa260208401611a56565b90509250929050565b60008060008060608587031215611ac157600080fd5b843567ffffffffffffffff811115611ad857600080fd5b611ae48782880161199e565b9095509350611af7905060208601611a56565b9396929550929360400135925050565b600060208284031215611b1957600080fd5b6118dc82611a56565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f830112611b6257600080fd5b8135602067ffffffffffffffff80831115611b7f57611b7f611b22565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108482111715611bc257611bc2611b22565b6040529384526020818701810194908101925087851115611be257600080fd5b6020870191505b84821015611c0257813583529183019190830190611be9565b979650505050505050565b60008060408385031215611c2057600080fd5b823567ffffffffffffffff80821115611c3857600080fd5b611c4486838701611b51565b93506020850135915080821115611c5a57600080fd5b50611c6785828601611b51565b9150509250929050565b60008083601f840112611c8357600080fd5b50813567ffffffffffffffff811115611c9b57600080fd5b6020830191508360208285010111156119e357600080fd5b60008060008060008060008060a0898b031215611ccf57600080fd5b611cd889611a56565b9750611ce660208a01611a56565b9650604089013567ffffffffffffffff80821115611d0357600080fd5b611d0f8c838d0161199e565b909850965060608b0135915080821115611d2857600080fd5b611d348c838d0161199e565b909650945060808b0135915080821115611d4d57600080fd5b50611d5a8b828c01611c71565b999c989b5096995094979396929594505050565b60008060008060008060a08789031215611d8757600080fd5b611d9087611a56565b9550611d9e60208801611a56565b94506040870135935060608701359250608087013567ffffffffffffffff811115611dc857600080fd5b611dd489828a01611c71565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561058457610584611de6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611e8857611e88611de6565b5060010190565b808202811582820484141761058457610584611de6565b600082611edc577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8082018082111561058457610584611de6565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115611f2657600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff86168152606060208201526000611f6f606083018688611ef4565b8281036040840152611f82818587611ef4565b98975050505050505050565b87815260a060208201526000611fa860a08301888a611ef4565b8281036040840152611fbb818789611ef4565b606084019590955250506080015295945050505050565b600060208284031215611fe457600080fd5b815180151581146118dc57600080fdfea2646970667358221220fe918149952dfc14a0b9560d5c5a922af5c54e40740bf8c98971dc1f7280374364736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1C4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x64C19303 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xBAB2F552 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xE3A0CE09 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x4FC JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x51F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x532 JUMPI DUP1 PUSH4 0xFA9FDC6A EQ PUSH2 0x545 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x4D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xD3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x438 JUMPI DUP1 PUSH4 0xA5BB3EC1 EQ PUSH2 0x440 JUMPI DUP1 PUSH4 0xA9D637E1 EQ PUSH2 0x463 JUMPI DUP1 PUSH4 0xAD740FA0 EQ PUSH2 0x476 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x64C19303 EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x70D92882 EQ PUSH2 0x3F1 JUMPI DUP1 PUSH4 0x82BFEFC8 EQ PUSH2 0x411 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B093FE9 GT PUSH2 0x166 JUMPI DUP1 PUSH4 0x496BAA47 GT PUSH2 0x140 JUMPI DUP1 PUSH4 0x496BAA47 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x556C448D EQ PUSH2 0x36A JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x37D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2B093FE9 EQ PUSH2 0x29B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x309 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x4585AC7 GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x4585AC7 EQ PUSH2 0x239 JUMPI DUP1 PUSH4 0x16A3138B EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x1B8EBC3C EQ PUSH2 0x273 JUMPI DUP1 PUSH4 0x2099920E EQ PUSH2 0x288 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x39AF9EB EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x212 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DC PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1943 JUMP JUMPDEST PUSH2 0x570 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x1FF CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x58A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x247 CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0x5AB JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x281 CALLDATASIZE PUSH1 0x4 PUSH2 0x19EA JUMP JUMPDEST PUSH2 0x6F8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x204 PUSH2 0x296 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A7F JUMP JUMPDEST PUSH2 0x8DB JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x33E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AAB JUMP JUMPDEST PUSH2 0x9B3 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x378 CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH2 0xBB5 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x38B CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2E4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3FF CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E4 PUSH2 0xBC5 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x44E CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x471 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0xBF1 JUMP JUMPDEST PUSH2 0x286 PUSH2 0x484 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C0D JUMP JUMPDEST PUSH2 0xC8C JUMP JUMPDEST PUSH2 0x204 PUSH2 0xD7C JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0x49F CALLDATASIZE PUSH1 0x4 PUSH2 0x1CB3 JUMP JUMPDEST PUSH2 0xDD3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1E8 JUMP JUMPDEST PUSH2 0x204 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1DC PUSH2 0x50A CALLDATASIZE PUSH1 0x4 PUSH2 0x1985 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x4A4 PUSH2 0x52D CALLDATASIZE PUSH1 0x4 PUSH2 0x1D6E JUMP JUMPDEST PUSH2 0x11ED JUMP JUMPDEST PUSH2 0x286 PUSH2 0x540 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B07 JUMP JUMPDEST PUSH2 0x142F JUMP JUMPDEST PUSH2 0x204 PUSH2 0x553 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A7F JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x584 DUP3 PUSH2 0x57E PUSH2 0x144D JUMP JUMPDEST SWAP1 PUSH2 0x147B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5B5 PUSH2 0xD7C JUMP JUMPDEST DUP3 GT DUP1 PUSH2 0x5E1 JUMPI POP PUSH32 0x0 DUP3 GT JUMPDEST ISZERO PUSH2 0x620 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP3 ISZERO PUSH2 0x64B JUMPI PUSH1 0x2 PUSH1 0x0 PUSH2 0x637 PUSH1 0x1 DUP7 PUSH2 0x1E15 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD PUSH2 0x64E JUMP JUMPDEST PUSH1 0x0 JUMPDEST SWAP1 POP PUSH1 0x1 JUMPDEST PUSH1 0x0 SLOAD DUP2 GT PUSH2 0x6C3 JUMPI PUSH1 0x0 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x66F JUMPI PUSH2 0x66F PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD DUP3 LT ISZERO PUSH2 0x6B1 JUMPI PUSH1 0x1 PUSH2 0x68D DUP2 DUP4 PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x69D JUMPI PUSH2 0x69D PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 PUSH2 0x6BB DUP2 PUSH2 0x1E57 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x653 JUMP JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 SWAP1 PUSH2 0x6D5 SWAP1 DUP3 SWAP1 PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x711 PUSH2 0x703 PUSH2 0x1555 JUMP JUMPDEST PUSH2 0x70B PUSH2 0x155F JUMP JUMPDEST SWAP1 PUSH2 0x158D JUMP JUMPDEST DUP3 DUP2 EQ PUSH2 0x74A JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 SWAP1 SUB PUSH2 0x785 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 SLOAD ISZERO PUSH2 0x7BF JUMPI PUSH1 0x40 MLOAD PUSH32 0x65EDD76100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x8BA JUMPI DUP5 DUP5 PUSH2 0x7D7 PUSH1 0x1 DUP5 PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x7E6 JUMPI PUSH2 0x7E6 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x7FF JUMPI PUSH2 0x7FF PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT ISZERO PUSH2 0x83E JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 PUSH2 0x84B PUSH1 0x1 DUP5 PUSH2 0x1E15 JUMP JUMPDEST DUP2 DUP2 LT PUSH2 0x85A JUMPI PUSH2 0x85A PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x873 JUMPI PUSH2 0x873 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD LT ISZERO PUSH2 0x8B2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7BD3BBEA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 ADD PUSH2 0x7C2 JUMP JUMPDEST POP PUSH2 0x8C7 PUSH1 0x0 DUP6 DUP6 PUSH2 0x18E3 JUMP JUMPDEST POP PUSH2 0x8D4 PUSH1 0x1 DUP4 DUP4 PUSH2 0x18E3 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8E5 PUSH2 0xD7C JUMP JUMPDEST DUP4 GT DUP1 PUSH2 0x911 JUMPI POP PUSH32 0x0 DUP4 GT JUMPDEST ISZERO PUSH2 0x94B JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x956 DUP5 PUSH2 0x5AB JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 SLOAD DUP9 DUP5 MSTORE PUSH1 0x2 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 KECCAK256 SLOAD SWAP2 SWAP3 POP SWAP1 PUSH2 0x9A0 DUP4 DUP4 PUSH2 0x1E8F JUMP JUMPDEST PUSH2 0x9AA SWAP2 SWAP1 PUSH2 0x1EA6 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP5 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x4 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8084224300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH2 0xAE9 PUSH32 0x0 DUP3 DUP8 DUP8 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0x15FC SWAP1 POP JUMP JUMPDEST PUSH2 0xB1F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BDE33900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP7 SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x4 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0xAD13A161261D327D2506101E44C2DD1737E7314CD7ED475A2819BDC64C76B857 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x59A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xBEC PUSH2 0xBD2 PUSH2 0x155F JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0xC23 JUMPI DUP1 PUSH2 0xC26 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 SWAP3 POP PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xC85 JUMPI PUSH2 0xC82 PUSH32 0x0 DUP5 PUSH2 0x1E8F JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xC97 PUSH2 0x703 PUSH2 0x1555 JUMP JUMPDEST DUP1 MLOAD DUP3 MLOAD EQ PUSH2 0xCD2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0xD77 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO PUSH2 0xD41 JUMPI DUP3 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD04 JUMPI PUSH2 0xD04 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH1 0x40 MLOAD PUSH32 0xFAF6788700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x617 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST DUP2 DUP2 DUP2 MLOAD DUP2 LT PUSH2 0xD53 JUMPI PUSH2 0xD53 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH2 0xCD5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0xDC9 PUSH32 0x0 TIMESTAMP PUSH2 0x1E15 JUMP JUMPDEST PUSH2 0xBEC SWAP2 SWAP1 PUSH2 0x1EA6 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xE44 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xE4E PUSH2 0xD7C JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xEAD JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0xF96 JUMPI PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0xED1 JUMPI PUSH2 0xED1 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xF5D JUMPI CALLER DUP12 DUP12 DUP5 DUP2 DUP2 LT PUSH2 0xF04 JUMPI PUSH2 0xF04 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST DUP1 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xF70 JUMPI PUSH2 0xF70 PUSH2 0x1E28 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0xF81 SWAP2 SWAP1 PUSH2 0x1E8F JUMP JUMPDEST PUSH2 0xF8B SWAP1 DUP5 PUSH2 0x1EE1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 ADD PUSH2 0xEB1 JUMP JUMPDEST POP PUSH1 0x60 PUSH32 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0xFCD JUMPI PUSH2 0xFCD PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP PUSH1 0x60 PUSH32 0x0 DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH2 0x103D JUMPI PUSH2 0x103D PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 DUP2 MSTORE POP POP PUSH1 0x0 PUSH2 0x1054 DUP14 PUSH2 0xBF1 JUMP JUMPDEST SWAP1 POP PUSH2 0x1060 DUP2 DUP6 PUSH2 0x1E8F JUMP JUMPDEST SWAP4 POP DUP4 PUSH1 0x3 PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP16 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x10C2 SWAP2 SWAP1 PUSH2 0x1EE1 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP7 SWAP3 SWAP1 PUSH2 0x10E5 SWAP1 DUP5 SWAP1 PUSH2 0x1EE1 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x80534934 DUP15 DUP15 DUP15 DUP15 DUP15 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112D SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F3F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1147 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x115B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP DUP5 DUP14 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x3ADB63D4FDE6845C0B2322E50EBB349A765D70B1756F0C1D1CFA64DA74681942 TIMESTAMP DUP16 DUP16 DUP16 DUP16 DUP12 DUP10 PUSH1 0x40 MLOAD PUSH2 0x11B2 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP14 SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x125E JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 DUP6 EQ PUSH2 0x12C0 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0x1304 JUMPI PUSH1 0x40 MLOAD PUSH32 0xF789EB2F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x617 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x137C JUMPI PUSH1 0x40 MLOAD PUSH32 0x3A0028700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD SWAP3 DUP4 MSTORE TIMESTAMP SWAP1 DUP4 ADD MSTORE PUSH32 0x2F1CFF01C45015E0E6D543724E40DDC5472049FE52AE6A10DDA3D2363D38F38B SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x144A PUSH2 0x143A PUSH2 0x1555 JUMP JUMPDEST DUP3 PUSH2 0x1443 PUSH2 0x155F JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1612 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x584 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1E15 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x14CB JUMPI POP PUSH1 0x0 PUSH2 0x584 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x151C JUMPI POP PUSH1 0x1 PUSH2 0x584 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBEC PUSH2 0x1727 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x584 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1E15 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x15F8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1609 DUP6 DUP5 PUSH2 0x186E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x167F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x617 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1721 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1737 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1741 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x185D JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1839 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x185D SWAP2 SWAP1 PUSH2 0x1FD2 JUMP JUMPDEST ISZERO PUSH2 0x1867 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x18A9 JUMPI PUSH2 0x189F DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1892 JUMPI PUSH2 0x1892 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x18B1 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1873 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x18CD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 0x191E JUMPI SWAP2 PUSH1 0x20 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x191E JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x1903 JUMP JUMPDEST POP PUSH2 0x192A SWAP3 SWAP2 POP PUSH2 0x192E JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x192A JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x192F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1955 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x18DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1997 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x19B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1A00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1A18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1A24 DUP9 DUP4 DUP10 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1A3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1A4A DUP8 DUP3 DUP9 ADD PUSH2 0x199E JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A92 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1AA2 PUSH1 0x20 DUP5 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1AC1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1AD8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1AE4 DUP8 DUP3 DUP9 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP6 POP SWAP4 POP PUSH2 0x1AF7 SWAP1 POP PUSH1 0x20 DUP7 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x40 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x18DC DUP3 PUSH2 0x1A56 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1B62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP4 GT ISZERO PUSH2 0x1B7F JUMPI PUSH2 0x1B7F PUSH2 0x1B22 JUMP JUMPDEST DUP3 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP5 DUP3 GT OR ISZERO PUSH2 0x1BC2 JUMPI PUSH2 0x1BC2 PUSH2 0x1B22 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP4 DUP5 MSTORE PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD SWAP5 SWAP1 DUP2 ADD SWAP3 POP DUP8 DUP6 GT ISZERO PUSH2 0x1BE2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP8 ADD SWAP2 POP JUMPDEST DUP5 DUP3 LT ISZERO PUSH2 0x1C02 JUMPI DUP2 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH2 0x1BE9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1C38 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C44 DUP7 DUP4 DUP8 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1C5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C67 DUP6 DUP3 DUP7 ADD PUSH2 0x1B51 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1C83 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C9B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x19E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1CCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1CD8 DUP10 PUSH2 0x1A56 JUMP JUMPDEST SWAP8 POP PUSH2 0x1CE6 PUSH1 0x20 DUP11 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1D03 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0F DUP13 DUP4 DUP14 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D28 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D34 DUP13 DUP4 DUP14 ADD PUSH2 0x199E JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1D4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1D5A DUP12 DUP3 DUP13 ADD PUSH2 0x1C71 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1D87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D90 DUP8 PUSH2 0x1A56 JUMP JUMPDEST SWAP6 POP PUSH2 0x1D9E PUSH1 0x20 DUP9 ADD PUSH2 0x1A56 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1DD4 DUP10 DUP3 DUP11 ADD PUSH2 0x1C71 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x1E88 JUMPI PUSH2 0x1E88 PUSH2 0x1DE6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1EDC JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x584 JUMPI PUSH2 0x584 PUSH2 0x1DE6 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x1F26 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1F6F PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1F82 DUP2 DUP6 DUP8 PUSH2 0x1EF4 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP8 DUP2 MSTORE PUSH1 0xA0 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1FA8 PUSH1 0xA0 DUP4 ADD DUP9 DUP11 PUSH2 0x1EF4 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x1FBB DUP2 DUP8 DUP10 PUSH2 0x1EF4 JUMP JUMPDEST PUSH1 0x60 DUP5 ADD SWAP6 SWAP1 SWAP6 MSTORE POP POP PUSH1 0x80 ADD MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x18DC JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 INVALID SWAP2 DUP2 0x49 SWAP6 0x2D 0xFC EQ LOG0 0xB9 JUMP 0xD 0x5C GAS SWAP3 0x2A CREATE2 0xC5 0x4E BLOCKHASH PUSH21 0xBF8C98971DC1F7280374364736F6C634300081600 CALLER ","sourceMap":"1370:13496:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:28;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;2461:22:26;;;;;;:::i;:::-;;:::i;:::-;;;874:25:28;;;862:2;847:18;2461:22:26;728:177:28;1906:34:26;;;;;9904:473;;;;;;:::i;:::-;;:::i;2151:44::-;;;;;7361:826;;;;;;:::i;:::-;;:::i;:::-;;10619:377;;;;;;:::i;:::-;;:::i;2352:41::-;;;;;728:115:11;817:19;728:115;;;2722:42:28;2710:55;;;2692:74;;2680:2;2665:18;728:115:11;2520:252:28;1737:37:26;;;;;11334:550;;;;;;:::i;:::-;;:::i;2271:36::-;;;;;2541:28;;;;;;:::i;:::-;;:::i;878:149:11:-;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;2029:50:26;;;;;3013:56;;;;;;:::i;:::-;;;;;;;;;;;;;;1641:39;;;;;710:120:1;;;:::i;3142:58:26:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;9073:407;;;;;;:::i;:::-;;:::i;8412:495::-;;;;;;:::i;:::-;;:::i;9580:127::-;;;:::i;13424:1440::-;;;;;;:::i;:::-;;:::i;:::-;;;7722:66:28;7710:79;;;7692:98;;7680:2;7665:18;13424:1440:26;7548:248:28;1825:39:26;;;;;2904:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;12340:697;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;2763:69:26:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;2461:22:26:-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2461:22:26;:::o;9904:473::-;9964:7;9995:14;:12;:14::i;:::-;9987:5;:22;:43;;;;10021:9;10013:5;:17;9987:43;9983:100;;;10053:19;;;;;;;;874:25:28;;;847:18;;10053:19:26;;;;;;;;9983:100;10093:20;10116:10;;:43;;10133:15;:26;10149:9;10157:1;10149:5;:9;:::i;:::-;10133:26;;;;;;;;;;;;10116:43;;;10129:1;10116:43;10093:66;-1:-1:-1;10187:1:26;10170:155;10195:5;:12;10190:17;;10170:155;;10247:5;10253:1;10247:8;;;;;;;;:::i;:::-;;;;;;;;;10232:12;:23;10228:87;;;10282:11;10294:5;10282:11;10294:1;:5;:::i;:::-;10282:18;;;;;;;;:::i;:::-;;;;;;;;;10275:25;;;;9904:473;;;:::o;10228:87::-;10209:3;;;;:::i;:::-;;;;10170:155;;;-1:-1:-1;10353:5:26;:12;10341:11;;10353:16;;10341:11;;10353:16;:::i;:::-;10341:29;;;;;;;;:::i;:::-;;;;;;;;;10334:36;;;9904:473;;;:::o;7361:826::-;7458:70;7515:12;:10;:12::i;:::-;7458:33;:31;:33::i;:::-;:56;;:70::i;:::-;7542:36;;;7538:94;;7601:20;;;;;;;;;;;;;;7538:94;7663:1;7646:18;;;7642:72;;7687:16;;;;;;;;;;;;;;7642:72;7742:1;7727:12;:16;7723:71;;7766:17;;;;;;;;;;;;;;7723:71;7871:1;7854:267;7874:17;;;7854:267;;;7928:6;;7935:5;7939:1;7935;:5;:::i;:::-;7928:13;;;;;;;:::i;:::-;;;;;;;7916:6;;7923:1;7916:9;;;;;;;:::i;:::-;;;;;;;:25;7912:87;;;7968:16;;;;;;;;;;;;;;7912:87;8034:12;;8047:5;8051:1;8047;:5;:::i;:::-;8034:19;;;;;;;:::i;:::-;;;;;;;8016:12;;8029:1;8016:15;;;;;;;:::i;:::-;;;;;;;:37;8012:99;;;8080:16;;;;;;;;;;;;;;8012:99;7893:3;;7854:267;;;-1:-1:-1;8130:14:26;:5;8138:6;;8130:14;:::i;:::-;-1:-1:-1;8154:26:26;:11;8168:12;;8154:26;:::i;:::-;;7361:826;;;;:::o;10619:377::-;10696:7;10727:14;:12;:14::i;:::-;10719:5;:22;:43;;;;10753:9;10745:5;:17;10719:43;10715:100;;;10785:19;;;;;;;;874:25:28;;;847:18;;10785:19:26;728:177:28;10715:100:26;10824:19;10846:21;10861:5;10846:14;:21::i;:::-;10877:15;10895:21;;;:14;:21;;;;;;;;:29;;;;;;;;;;;10967:22;;;:15;:22;;;;;;;10824:43;;-1:-1:-1;10895:29:26;10942:21;10824:43;10895:29;10942:21;:::i;:::-;10941:48;;;;:::i;:::-;10934:55;10619:377;-1:-1:-1;;;;;10619:377:26:o;11334:550::-;11479:39;;10039:66:28;10026:2;10022:15;;;10018:88;11479:39:26;;;10006:101:28;10123:12;;;10116:28;;;11454:12:26;;10160::28;;11479:39:26;;;;;;;;;;;;;11469:50;;11479:39;11469:50;;;;11533:17;;;;:11;:17;;;;;;11469:50;;-1:-1:-1;11533:17:26;;11529:101;;;11573:46;;;;;2722:42:28;2710:55;;11573:46:26;;;2692:74:28;2665:18;;11573:46:26;2520:252:28;11529:101:26;11644:31;11657:11;11670:4;11644:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11644:12:26;;:31;;-1:-1:-1;;11644:12:26;:31;-1:-1:-1;11644:31:26:i;:::-;11639:84;;11698:14;;;;;;;;;;;;;;11639:84;11733:32;;;;;;;:21;:32;;;;;;;;:45;;;11788:17;;;:11;:17;;;;;;:24;;;;11808:4;11788:24;;;11828:49;;874:25:28;;;11828:49:26;;847:18:28;11828:49:26;;;;;;;11444:440;11334:550;;;;:::o;2541:28::-;;;;;;;;;;;;710:120:1;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;9073:407:26:-;9195:29;;;9133:18;9195:29;;;:21;:29;;;;;;9247:26;;:54;;9280:21;9247:54;;;9276:1;9247:54;9344:34;;;9311:30;9344:34;;;:26;:34;;;;;;9234:67;;-1:-1:-1;9344:34:26;;9388:86;;;;9433:30;9447:16;9433:30;;:::i;:::-;;;9388:86;9153:327;;9073:407;;;:::o;8412:495::-;8509:70;8566:12;:10;:12::i;8509:70::-;8612:7;:14;8593:8;:15;:33;8589:91;;8649:20;;;;;;;;;;;;;;8589:91;8695:9;8690:211;8714:8;:15;8710:1;:19;8690:211;;;8772:1;8754:15;;;:12;:15;;;;;;:19;8750:99;;8822:8;8831:1;8822:11;;;;;;;;:::i;:::-;;;;;;;8800:34;;;;;;;;;874:25:28;;862:2;847:18;;728:177;8750:99:26;8880:7;8888:1;8880:10;;;;;;;;:::i;:::-;;;;;;;;;;;;8862:15;;;;:12;:15;;;;;;;:28;8731:3;;8690:211;;;;8412:495;;:::o;9580:127::-;9625:7;9686:14;9652:30;9670:12;9652:15;:30;:::i;:::-;9651:49;;;;:::i;13424:1440::-;13619:6;13641:10;:28;13663:5;13641:28;;13637:80;;13692:14;;;;;;;;;;;;;;13637:80;13727:13;13743:14;:12;:14::i;:::-;13727:30;;13779:9;13771:5;:17;13767:74;;;13811:19;;;;;;;;874:25:28;;;847:18;;13811:19:26;728:177:28;13767:74:26;13851:16;13920:9;13915:253;13935:14;;;13915:253;;;13970:14;13987:12;:20;14000:3;;14004:1;14000:6;;;;;;;:::i;:::-;;;;;;;13987:20;;;;;;;;;;;;13970:37;;14025:6;14035:1;14025:11;14021:91;;14078:10;14090:3;;14094:1;14090:6;;;;;;;:::i;:::-;14063:34;;;;;10387:42:28;10375:55;;;14063:34:26;;;10357:74:28;14090:6:26;;;;;;;10447:18:28;;;10440:34;-1:-1:-1;10330:18:28;;14063:34:26;10183:297:28;14021:91:26;14150:6;14138;;14145:1;14138:9;;;;;;;:::i;:::-;;;;;;;:18;;;;:::i;:::-;14125:32;;;;:::i;:::-;;-1:-1:-1;;13951:3:26;;13915:253;;;;14208:33;14281:16;14251;14268:1;14251:19;;;;;;;;:::i;:::-;;;;;;:47;;;;;;;;;;;14308:35;14377:19;14353:18;14372:1;14353:21;;;;;;;;:::i;:::-;;;;;;:43;;;;;14406:18;14427:19;14441:4;14427:13;:19::i;:::-;14406:40;-1:-1:-1;14456:22:26;14406:40;14456:22;;:::i;:::-;;;14554:8;14523:14;:21;14538:5;14523:21;;;;;;;;;;;:27;14545:4;14523:27;;;;;;;;;;;;;;;;:39;;;;;;;:::i;:::-;;;;-1:-1:-1;;14606:22:26;;;;:15;:22;;;;;:34;;14632:8;;14606:22;:34;;14632:8;;14606:34;:::i;:::-;;;;;;;;14668:10;14651:42;;;14694:4;14700:3;;14705:6;;14651:61;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14745:5;14739:4;14727:76;;;14752:15;14769:3;;14774:6;;14782:8;14792:10;14727:76;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;14821:36:26;;13424:1440;-1:-1:-1;;;;;;;;;;;;;13424:1440:26:o;12340:697::-;12460:6;12482:10;:39;12504:16;12482:39;;12478:91;;12544:14;;;;;;;;;;;;;;12478:91;12588:19;12582:2;:25;12578:93;;12630:30;;;;;12645:10;12630:30;;;10357:74:28;10447:18;;;10440:34;;;10330:18;;12630:30:26;10183:297:28;12578:93:26;12685:5;12694:1;12685:10;12681:76;;12718:28;;;;;;;;12544:25:28;;;12744:1:26;12585:18:28;;;12578:34;12517:18;;12718:28:26;12362:256:28;12681:76:26;12770:32;;;;;;;:26;:32;;;;;;;;12766:106;;;12825:36;;;;;2722:42:28;2710:55;;12825:36:26;;;2692:74:28;2665:18;;12825:36:26;2520:252:28;12766:106:26;12882:32;;;;;;;:26;:32;;;;;;;;;:39;;;;12917:4;12882:39;;;12937:44;;10357:74:28;;;12965:15:26;10447:18:28;;;10440:34;12937:44:26;;10330:18:28;12937:44:26;;;;;;;-1:-1:-1;12999:31:26;12340:697;;;;;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;6498:175:26:-;6599:7;6625:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;2722:42:28;2710:55;;4543:25:6;;;2692:74:28;2665:18;;4543:25:6;2520:252:28;4504:64:6;4413:162;;:::o;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2722:42:28;2710:55;;3243:24:6;;;2692:74:28;2665:18;;3243:24:6;2520:252:28;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;12876:15:28;;;1396:59:12;;;12858:34:28;1444:10:12;12908:18:28;;;12901:43;1396:19:12;:39;;;;12770:18:28;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1994:290:25:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:25:o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:332:28;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:180;602:6;655:2;643:9;634:7;630:23;626:32;623:52;;;671:1;668;661:12;623:52;-1:-1:-1;694:23:28;;543:180;-1:-1:-1;543:180:28:o;910:367::-;973:8;983:6;1037:3;1030:4;1022:6;1018:17;1014:27;1004:55;;1055:1;1052;1045:12;1004:55;-1:-1:-1;1078:20:28;;1121:18;1110:30;;1107:50;;;1153:1;1150;1143:12;1107:50;1190:4;1182:6;1178:17;1166:29;;1250:3;1243:4;1233:6;1230:1;1226:14;1218:6;1214:27;1210:38;1207:47;1204:67;;;1267:1;1264;1257:12;1204:67;910:367;;;;;:::o;1282:773::-;1404:6;1412;1420;1428;1481:2;1469:9;1460:7;1456:23;1452:32;1449:52;;;1497:1;1494;1487:12;1449:52;1537:9;1524:23;1566:18;1607:2;1599:6;1596:14;1593:34;;;1623:1;1620;1613:12;1593:34;1662:70;1724:7;1715:6;1704:9;1700:22;1662:70;:::i;:::-;1751:8;;-1:-1:-1;1636:96:28;-1:-1:-1;1839:2:28;1824:18;;1811:32;;-1:-1:-1;1855:16:28;;;1852:36;;;1884:1;1881;1874:12;1852:36;;1923:72;1987:7;1976:8;1965:9;1961:24;1923:72;:::i;:::-;1282:773;;;;-1:-1:-1;2014:8:28;-1:-1:-1;;;;1282:773:28:o;2060:196::-;2128:20;;2188:42;2177:54;;2167:65;;2157:93;;2246:1;2243;2236:12;2157:93;2060:196;;;:::o;2261:254::-;2329:6;2337;2390:2;2378:9;2369:7;2365:23;2361:32;2358:52;;;2406:1;2403;2396:12;2358:52;2442:9;2429:23;2419:33;;2471:38;2505:2;2494:9;2490:18;2471:38;:::i;:::-;2461:48;;2261:254;;;;;:::o;2777:579::-;2881:6;2889;2897;2905;2958:2;2946:9;2937:7;2933:23;2929:32;2926:52;;;2974:1;2971;2964:12;2926:52;3014:9;3001:23;3047:18;3039:6;3036:30;3033:50;;;3079:1;3076;3069:12;3033:50;3118:70;3180:7;3171:6;3160:9;3156:22;3118:70;:::i;:::-;3207:8;;-1:-1:-1;3092:96:28;-1:-1:-1;3261:38:28;;-1:-1:-1;3295:2:28;3280:18;;3261:38;:::i;:::-;2777:579;;;;-1:-1:-1;3251:48:28;;3346:2;3331:18;3318:32;;-1:-1:-1;;2777:579:28:o;3543:186::-;3602:6;3655:2;3643:9;3634:7;3630:23;3626:32;3623:52;;;3671:1;3668;3661:12;3623:52;3694:29;3713:9;3694:29;:::i;4220:184::-;4272:77;4269:1;4262:88;4369:4;4366:1;4359:15;4393:4;4390:1;4383:15;4409:967;4463:5;4516:3;4509:4;4501:6;4497:17;4493:27;4483:55;;4534:1;4531;4524:12;4483:55;4570:6;4557:20;4596:4;4619:18;4656:2;4652;4649:10;4646:36;;;4662:18;;:::i;:::-;4708:2;4705:1;4701:10;4740:2;4734:9;4799:66;4794:2;4790;4786:11;4782:84;4774:6;4770:97;4917:6;4905:10;4902:22;4897:2;4885:10;4882:18;4879:46;4876:72;;;4928:18;;:::i;:::-;4964:2;4957:22;5014:18;;;5060:4;5092:15;;;5088:26;;;5048:17;;;;-1:-1:-1;5126:15:28;;;5123:35;;;5154:1;5151;5144:12;5123:35;5190:4;5182:6;5178:17;5167:28;;5204:142;5220:6;5215:3;5212:15;5204:142;;;5286:17;;5274:30;;5324:12;;;;5237;;;;5204:142;;;5364:6;4409:967;-1:-1:-1;;;;;;;4409:967:28:o;5381:595::-;5499:6;5507;5560:2;5548:9;5539:7;5535:23;5531:32;5528:52;;;5576:1;5573;5566:12;5528:52;5616:9;5603:23;5645:18;5686:2;5678:6;5675:14;5672:34;;;5702:1;5699;5692:12;5672:34;5725:61;5778:7;5769:6;5758:9;5754:22;5725:61;:::i;:::-;5715:71;;5839:2;5828:9;5824:18;5811:32;5795:48;;5868:2;5858:8;5855:16;5852:36;;;5884:1;5881;5874:12;5852:36;;5907:63;5962:7;5951:8;5940:9;5936:24;5907:63;:::i;:::-;5897:73;;;5381:595;;;;;:::o;5981:347::-;6032:8;6042:6;6096:3;6089:4;6081:6;6077:17;6073:27;6063:55;;6114:1;6111;6104:12;6063:55;-1:-1:-1;6137:20:28;;6180:18;6169:30;;6166:50;;;6212:1;6209;6202:12;6166:50;6249:4;6241:6;6237:17;6225:29;;6301:3;6294:4;6285:6;6277;6273:19;6269:30;6266:39;6263:59;;;6318:1;6315;6308:12;6333:1210;6493:6;6501;6509;6517;6525;6533;6541;6549;6602:3;6590:9;6581:7;6577:23;6573:33;6570:53;;;6619:1;6616;6609:12;6570:53;6642:29;6661:9;6642:29;:::i;:::-;6632:39;;6690:38;6724:2;6713:9;6709:18;6690:38;:::i;:::-;6680:48;;6779:2;6768:9;6764:18;6751:32;6802:18;6843:2;6835:6;6832:14;6829:34;;;6859:1;6856;6849:12;6829:34;6898:70;6960:7;6951:6;6940:9;6936:22;6898:70;:::i;:::-;6987:8;;-1:-1:-1;6872:96:28;-1:-1:-1;7075:2:28;7060:18;;7047:32;;-1:-1:-1;7091:16:28;;;7088:36;;;7120:1;7117;7110:12;7088:36;7159:72;7223:7;7212:8;7201:9;7197:24;7159:72;:::i;:::-;7250:8;;-1:-1:-1;7133:98:28;-1:-1:-1;7338:3:28;7323:19;;7310:33;;-1:-1:-1;7355:16:28;;;7352:36;;;7384:1;7381;7374:12;7352:36;;7423:60;7475:7;7464:8;7453:9;7449:24;7423:60;:::i;:::-;6333:1210;;;;-1:-1:-1;6333:1210:28;;-1:-1:-1;6333:1210:28;;;;;;7502:8;-1:-1:-1;;;6333:1210:28:o;7986:695::-;8092:6;8100;8108;8116;8124;8132;8185:3;8173:9;8164:7;8160:23;8156:33;8153:53;;;8202:1;8199;8192:12;8153:53;8225:29;8244:9;8225:29;:::i;:::-;8215:39;;8273:38;8307:2;8296:9;8292:18;8273:38;:::i;:::-;8263:48;;8358:2;8347:9;8343:18;8330:32;8320:42;;8409:2;8398:9;8394:18;8381:32;8371:42;;8464:3;8453:9;8449:19;8436:33;8492:18;8484:6;8481:30;8478:50;;;8524:1;8521;8514:12;8478:50;8563:58;8613:7;8604:6;8593:9;8589:22;8563:58;:::i;:::-;7986:695;;;;-1:-1:-1;7986:695:28;;-1:-1:-1;7986:695:28;;8640:8;;7986:695;-1:-1:-1;;;7986:695:28:o;8686:184::-;8738:77;8735:1;8728:88;8835:4;8832:1;8825:15;8859:4;8856:1;8849:15;8875:128;8942:9;;;8963:11;;;8960:37;;;8977:18;;:::i;9008:184::-;9060:77;9057:1;9050:88;9157:4;9154:1;9147:15;9181:4;9178:1;9171:15;9197:195;9236:3;9267:66;9260:5;9257:77;9254:103;;9337:18;;:::i;:::-;-1:-1:-1;9384:1:28;9373:13;;9197:195::o;9397:168::-;9470:9;;;9501;;9518:15;;;9512:22;;9498:37;9488:71;;9539:18;;:::i;9570:274::-;9610:1;9636;9626:189;;9671:77;9668:1;9661:88;9772:4;9769:1;9762:15;9800:4;9797:1;9790:15;9626:189;-1:-1:-1;9829:9:28;;9570:274::o;10485:125::-;10550:9;;;10571:10;;;10568:36;;;10584:18;;:::i;10615:358::-;10715:6;10710:3;10703:19;10685:3;10745:66;10737:6;10734:78;10731:98;;;10825:1;10822;10815:12;10731:98;10861:6;10858:1;10854:14;10913:8;10906:5;10899:4;10894:3;10890:14;10877:45;10942:18;;;;10962:4;10938:29;;10615:358;-1:-1:-1;;;10615:358:28:o;10978:639::-;11295:42;11287:6;11283:55;11272:9;11265:74;11375:2;11370;11359:9;11355:18;11348:30;11246:4;11401:73;11470:2;11459:9;11455:18;11447:6;11439;11401:73;:::i;:::-;11522:9;11514:6;11510:22;11505:2;11494:9;11490:18;11483:50;11550:61;11604:6;11596;11588;11550:61;:::i;:::-;11542:69;10978:639;-1:-1:-1;;;;;;;;10978:639:28:o;11622:735::-;11983:6;11972:9;11965:25;12026:3;12021:2;12010:9;12006:18;11999:31;11946:4;12053:74;12122:3;12111:9;12107:19;12099:6;12091;12053:74;:::i;:::-;12175:9;12167:6;12163:22;12158:2;12147:9;12143:18;12136:50;12203:61;12257:6;12249;12241;12203:61;:::i;:::-;12295:2;12280:18;;12273:34;;;;-1:-1:-1;;12338:3:28;12323:19;12316:35;12195:69;11622:735;-1:-1:-1;;;;;11622:735:28:o;12955:277::-;13022:6;13075:2;13063:9;13054:7;13050:23;13046:32;13043:52;;;13091:1;13088;13081:12;13043:52;13123:9;13117:16;13176:5;13169:13;13162:21;13155:5;13152:32;13142:60;;13198:1;13195;13188:12"},"gasEstimates":{"creation":{"codeDepositCost":"1646800","executionCost":"infinite","totalCost":"infinite"},"external":{"CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MULTIPLIER_TOKEN()":"infinite","MULTIPLIER_TOKEN_ID()":"infinite","TOKEN()":"infinite","TOKEN_MULTIPLIER()":"infinite","claimLeaderboardMultiplier(bytes32[],address,uint256)":"infinite","claimStatus(bytes32)":"2483","currentCycle()":"infinite","forwarderRegistry()":"infinite","getCycleReward(uint256)":"infinite","getMultiplier(address)":"infinite","getUserReward(uint256,address)":"infinite","isTrustedForwarder(address)":"infinite","leaderboardMultiplers(address)":"2575","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","owner()":"infinite","setTiers(uint256[],uint256[])":"infinite","setTokensWeight(uint256[],uint256[])":"infinite","supportsInterface(bytes4)":"infinite","tierRewards(uint256)":"4664","tiers(uint256)":"4644","tokenMultiplerUnlockStatus(address)":"2575","transferOwnership(address)":"infinite","userAshByCycle(uint256,address)":"2715"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MULTIPLIER_TOKEN()":"64c19303","MULTIPLIER_TOKEN_ID()":"16a3138b","TOKEN()":"82bfefc8","TOKEN_MULTIPLIER()":"2b093fe9","claimLeaderboardMultiplier(bytes32[],address,uint256)":"496baa47","claimStatus(bytes32)":"e3a0ce09","currentCycle()":"bab2f552","forwarderRegistry()":"2b4c9f16","getCycleReward(uint256)":"04585ac7","getMultiplier(address)":"a9d637e1","getUserReward(uint256,address)":"2099920e","isTrustedForwarder(address)":"572b6c05","leaderboardMultiplers(address)":"70d92882","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","owner()":"8da5cb5b","setTiers(uint256[],uint256[])":"1b8ebc3c","setTokensWeight(uint256[],uint256[])":"ad740fa0","supportsInterface(bytes4)":"01ffc9a7","tierRewards(uint256)":"556c448d","tiers(uint256)":"039af9eb","tokenMultiplerUnlockStatus(address)":"a5bb3ec1","transferOwnership(address)":"f2fde38b","userAshByCycle(uint256,address)":"fa9fdc6a"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"multiplierToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplierTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenMultiplier\",\"type\":\"uint256\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"AlreadyClaimedLeaderboardMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadySetTiers\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"AlreadySetTokenWeight\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadyUnlockedTokenMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectTiers\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"ClaimLeaderboardMultiplier\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"TokensBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UnlockTokenMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MULTIPLIER_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOKEN_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"claimLeaderboardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"getCycleReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"getUserReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderboardMultiplers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tiers\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_tierRewards\",\"type\":\"uint256[]\"}],\"name\":\"setTiers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setTokensWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tierRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenMultiplerUnlockStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshByCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.The rewards are calculated based on the total amount of tokens burned in the previous cycle.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"claimLeaderboardMultiplier(bytes32[],address,uint256)\":{\"details\":\"Throws if the payout has already been claimed.Throws if the proof is invalid.\",\"params\":{\"multiplier\":\"The multiplier for the recipient.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"constructor\":{\"params\":{\"cycleDuration\":\"The duration of each cycle.\",\"forwarderRegistry\":\"The forwarder registry contract.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"merkleRoot\":\"The Merkle root of the leaderboard multiplier claim.\",\"multiplierToken\":\"The IERC1155Burnable erc1155 contract for unlocking the token multiplier.\",\"multiplierTokenId\":\"The token ID for unlocking the token multiplier.\",\"token\":\"The IERC1155Burnable erc1155 contract.\",\"tokenMultiplier\":\"The token multiplier.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"getCycleReward(uint256)\":{\"details\":\"Throws if the cycle is invalid.\",\"params\":{\"cycle\":\"The cycle number.\"},\"returns\":{\"_0\":\"reward The reward for the cycle.\"}},\"getMultiplier(address)\":{\"params\":{\"wallet\":\"The wallet address.\"},\"returns\":{\"multiplier\":\"The multiplier for the user.\"}},\"getUserReward(uint256,address)\":{\"details\":\"Throws if the cycle is invalid.\",\"params\":{\"cycle\":\"The cycle number.\",\"wallet\":\"The wallet address.\"},\"returns\":{\"_0\":\"reward The reward for the user.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the token ID is invalid.Throws if the cycle is invalid.\",\"params\":{\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier is already unlocked.\",\"params\":{\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setTiers(uint256[],uint256[])\":{\"details\":\"Throws if the lengths of tiers and rewards are inconsistent.Throws if the tiers are empty.Throws if the tiers are already set.Throws if the tiers are not in increasing order.Throws if the rewards are not in increasing order.\",\"params\":{\"_tierRewards\":\"The list of rewards for each tier.\",\"_tiers\":\"The list of tiers.\"}},\"setTokensWeight(uint256[],uint256[])\":{\"details\":\"Throws if the lengths of token IDs and weights are inconsistent.\",\"params\":{\"tokenIds\":\"The token IDs.\",\"weights\":\"The weights for each token.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess Orbs Burn Pool Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimedLeaderboardMultiplier(address)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"AlreadySetTiers()\":[{\"notice\":\"Error thrown when the tiers are already set.\"}],\"AlreadySetTokenWeight(uint256)\":[{\"notice\":\"Error thrown when the token weight is already set.\"}],\"AlreadyUnlockedTokenMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the token multiplier unlocked.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrays()\":[{\"notice\":\"Error thrown when the array lengths are inconsistent.\"}],\"IncorrectTiers()\":[{\"notice\":\"Error thrown when the tiers are incorrect.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof()\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidToken()\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenAmount(uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"ClaimLeaderboardMultiplier(address,uint256)\":{\"notice\":\"Event emitted when the leaderboard multiplier is claimed.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"TokensBurnt(address,uint256,uint256,uint256[],uint256[],uint256,uint256)\":{\"notice\":\"Event emitted when tokens are burnt.\"},\"UnlockTokenMultiplier(address,uint256)\":{\"notice\":\"Event emitted when the token multiplier is unlocked.\"}},\"kind\":\"user\",\"methods\":{\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root of the leaderboard multiplier claim.\"},\"MULTIPLIER_TOKEN()\":{\"notice\":\"The IERC1155 erc1155 contract for unlocking the token multiplier.\"},\"MULTIPLIER_TOKEN_ID()\":{\"notice\":\"The token ID for unlocking the token multiplier.\"},\"TOKEN()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts.\"},\"TOKEN_MULTIPLIER()\":{\"notice\":\"The token multiplier.\"},\"claimLeaderboardMultiplier(bytes32[],address,uint256)\":{\"notice\":\"Claims the leaderboard multiplier\"},\"claimStatus(bytes32)\":{\"notice\":\"The claim status for the leaderboard multiplier.\"},\"constructor\":{\"notice\":\"Constructor for the ERC1155TokenBurn contract.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"getCycleReward(uint256)\":{\"notice\":\"Get the reward for the cycle.\"},\"getMultiplier(address)\":{\"notice\":\"Get the multiplier for the user.\"},\"getUserReward(uint256,address)\":{\"notice\":\"Get the user reward for the cycle.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"leaderboardMultiplers(address)\":{\"notice\":\"The leaderboard multipliers for each user.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Unlock the token multiplier by burning the multiplier token.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setTiers(uint256[],uint256[])\":{\"notice\":\"Set the tiers and rewards.\"},\"setTokensWeight(uint256[],uint256[])\":{\"notice\":\"Set the token weights.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"tierRewards(uint256)\":{\"notice\":\"The list of rewards for each tier.\"},\"tiers(uint256)\":{\"notice\":\"The list of tiers to decide the reward pool.\"},\"tokenMultiplerUnlockStatus(address)\":{\"notice\":\"The token multiplier unlock status for each user.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"userAshByCycle(uint256,address)\":{\"notice\":\"The total amount of ASH burned by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/AnichessOrbsBurnPool.sol\":\"AnichessOrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/AnichessOrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {AnichessMultiplier} from \\\"../merkleClaim/AnichessMultiplier.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title Anichess Orbs Burn Pool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n * @dev The rewards are calculated based on the total amount of tokens burned in the previous cycle.\\n */\\ncontract AnichessOrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts.\\n    IERC1155Burnable public immutable TOKEN;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The IERC1155 erc1155 contract for unlocking the token multiplier.\\n    IERC1155Burnable public immutable MULTIPLIER_TOKEN;\\n\\n    /// @notice The token ID for unlocking the token multiplier.\\n    uint256 public immutable MULTIPLIER_TOKEN_ID;\\n\\n    /// @notice The Merkle root of the leaderboard multiplier claim.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The token multiplier.\\n    uint256 public immutable TOKEN_MULTIPLIER;\\n\\n    /// @notice The list of tiers to decide the reward pool.\\n    uint256[] public tiers;\\n\\n    /// @notice The list of rewards for each tier.\\n    uint256[] public tierRewards;\\n\\n    /// @notice The total amount of ASH burned in each cycle.\\n    mapping(uint256 => uint256) totalAshByCycle;\\n\\n    /// @notice The total amount of ASH burned by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshByCycle;\\n\\n    /// @notice The claim status for the leaderboard multiplier.\\n    mapping(bytes32 => bool) public claimStatus;\\n\\n    /// @notice The leaderboard multipliers for each user.\\n    mapping(address => uint256) public leaderboardMultiplers;\\n\\n    /// @notice The token multiplier unlock status for each user.\\n    mapping(address => bool) public tokenMultiplerUnlockStatus;\\n\\n    /// @notice The token weights.\\n    mapping(uint256 => uint256) tokenWeights;\\n\\n    /// @notice Event emitted when tokens are burnt.\\n    event TokensBurnt(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256 timestamp,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 totalAsh,\\n        uint256 multiplier\\n    );\\n\\n    /// @notice Event emitted when the leaderboard multiplier is claimed.\\n    event ClaimLeaderboardMultiplier(address indexed recipient, uint256 multiplier);\\n\\n    /// @notice Event emitted when the token multiplier is unlocked.\\n    event UnlockTokenMultiplier(address wallet, uint256 timestamp);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the array lengths are inconsistent.\\n    error InconsistentArrays();\\n\\n    /// @notice Error thrown when the tiers are incorrect.\\n    error IncorrectTiers();\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidToken();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenAmount(uint256 amount, uint256 expectedAmount);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimedLeaderboardMultiplier(address recipient);\\n\\n    /// @notice Error thrown when the wallet already has the token multiplier unlocked.\\n    error AlreadyUnlockedTokenMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof();\\n\\n    /// @notice Error thrown when the tiers are already set.\\n    error AlreadySetTiers();\\n\\n    /// @notice Error thrown when the token weight is already set.\\n    error AlreadySetTokenWeight(uint256 tokenId);\\n\\n    /**\\n     * @notice Constructor for the ERC1155TokenBurn contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param token The IERC1155Burnable erc1155 contract.\\n     * @param merkleRoot The Merkle root of the leaderboard multiplier claim.\\n     * @param multiplierToken The IERC1155Burnable erc1155 contract for unlocking the token multiplier.\\n     * @param multiplierTokenId The token ID for unlocking the token multiplier.\\n     * @param tokenMultiplier The token multiplier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        IERC1155Burnable token,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable multiplierToken,\\n        uint256 multiplierTokenId,\\n        uint256 tokenMultiplier,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {\\n        INITIAL_TIME = initialTime;\\n        CYCLE_DURATION = cycleDuration;\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        MULTIPLIER_TOKEN = multiplierToken;\\n        MULTIPLIER_TOKEN_ID = multiplierTokenId;\\n        TOKEN = token;\\n        TOKEN_MULTIPLIER = tokenMultiplier;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Set the tiers and rewards.\\n     * @param _tiers The list of tiers.\\n     * @param _tierRewards The list of rewards for each tier.\\n     * @dev Throws if the lengths of tiers and rewards are inconsistent.\\n     * @dev Throws if the tiers are empty.\\n     * @dev Throws if the tiers are already set.\\n     * @dev Throws if the tiers are not in increasing order.\\n     * @dev Throws if the rewards are not in increasing order.\\n     */\\n    function setTiers(uint256[] calldata _tiers, uint256[] calldata _tierRewards) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (_tiers.length != _tierRewards.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        if (_tiers.length == 0) {\\n            revert IncorrectTiers();\\n        }\\n        if (tiers.length > 0) {\\n            revert AlreadySetTiers();\\n        }\\n\\n        // check if tiers are in increasing order\\n        for (uint256 i = 1; i < _tiers.length; i++) {\\n            if (_tiers[i] < _tiers[i - 1]) {\\n                revert IncorrectTiers();\\n            }\\n            if (_tierRewards[i] < _tierRewards[i - 1]) {\\n                revert IncorrectTiers();\\n            }\\n        }\\n        tiers = _tiers;\\n        tierRewards = _tierRewards;\\n    }\\n\\n    /**\\n     * @notice Set the token weights.\\n     * @param tokenIds The token IDs.\\n     * @param weights The weights for each token.\\n     * @dev Throws if the lengths of token IDs and weights are inconsistent.\\n     */\\n    function setTokensWeight(uint256[] memory tokenIds, uint256[] memory weights) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (tokenIds.length != weights.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            if (tokenWeights[i] > 0) {\\n                revert AlreadySetTokenWeight(tokenIds[i]);\\n            }\\n            tokenWeights[i] = weights[i];\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the multiplier for the user.\\n     * @param wallet The wallet address.\\n     * @return multiplier The multiplier for the user.\\n     */\\n    function getMultiplier(address wallet) public view returns (uint256 multiplier) {\\n        uint256 leaderboardMultiplier = leaderboardMultiplers[wallet];\\n        multiplier = leaderboardMultiplier == 0 ? 1 : leaderboardMultiplier;\\n        bool isTokenMultiplierUnlocked = tokenMultiplerUnlockStatus[wallet];\\n        if (isTokenMultiplierUnlocked) {\\n            multiplier *= TOKEN_MULTIPLIER;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Get the reward for the cycle.\\n     * @param cycle The cycle number.\\n     * @return reward The reward for the cycle.\\n     * @dev Throws if the cycle is invalid.\\n     */\\n    function getCycleReward(uint256 cycle) public view returns (uint256) {\\n        if (cycle > currentCycle() || cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 prevTotalAsh = cycle == 0 ? 0 : totalAshByCycle[cycle - 1];\\n\\n        for (uint256 i = 1; i <= tiers.length; i++) {\\n            if (prevTotalAsh < tiers[i]) {\\n                return tierRewards[i - 1];\\n            }\\n        }\\n        return tierRewards[tiers.length - 1];\\n    }\\n\\n    /**\\n     * @notice Get the user reward for the cycle.\\n     * @param cycle The cycle number.\\n     * @param wallet The wallet address.\\n     * @return reward The reward for the user.\\n     * @dev Throws if the cycle is invalid.\\n     */\\n    function getUserReward(uint256 cycle, address wallet) external view returns (uint256) {\\n        if (cycle > currentCycle() || cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n        uint256 cycleReward = getCycleReward(cycle);\\n        uint256 userAsh = userAshByCycle[cycle][wallet];\\n        return (userAsh * cycleReward) / totalAshByCycle[cycle];\\n    }\\n\\n    /**\\n     * @notice Claims the leaderboard multiplier\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     * @param multiplier The multiplier for the recipient.\\n     * @dev Throws if the payout has already been claimed.\\n     * @dev Throws if the proof is invalid.\\n     */\\n    function claimLeaderboardMultiplier(bytes32[] calldata proof, address recipient, uint256 multiplier) external {\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, multiplier));\\n        if (claimStatus[leaf]) {\\n            revert AlreadyClaimedLeaderboardMultiplier(recipient);\\n        }\\n        if (!proof.verify(MERKLE_ROOT, leaf)) {\\n            revert InvalidProof();\\n        }\\n\\n        leaderboardMultiplers[recipient] = multiplier;\\n        claimStatus[leaf] = true;\\n\\n        emit ClaimLeaderboardMultiplier(recipient, multiplier);\\n    }\\n\\n    /**\\n     * @notice Unlock the token multiplier by burning the multiplier token.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier is already unlocked.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata) external override returns (bytes4) {\\n        if (msg.sender != address(MULTIPLIER_TOKEN)) {\\n            revert InvalidToken();\\n        }\\n        if (id != MULTIPLIER_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenAmount(value, 1);\\n        }\\n        if (tokenMultiplerUnlockStatus[from]) {\\n            revert AlreadyUnlockedTokenMultiplier(from);\\n        }\\n\\n        tokenMultiplerUnlockStatus[from] = true;\\n\\n        emit UnlockTokenMultiplier(from, block.timestamp);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(TOKEN)) {\\n            revert InvalidToken();\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 totalAsh = 0;\\n        // calculate total burned\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 weight = tokenWeights[ids[i]];\\n            if (weight == 0) {\\n                revert InvalidTokenId(msg.sender, ids[i]);\\n            }\\n            totalAsh += (values[i] * weight);\\n        }\\n\\n        // get the multiplier\\n        address[] memory multiplierTokens;\\n        multiplierTokens[0] = address(MULTIPLIER_TOKEN);\\n        uint256[] memory multiplierTokenIds;\\n        multiplierTokenIds[0] = MULTIPLIER_TOKEN_ID;\\n        uint256 multiplier = getMultiplier(from);\\n        totalAsh *= multiplier;\\n\\n        // update the user status\\n        userAshByCycle[cycle][from] += totalAsh;\\n        // update the pool status\\n        totalAshByCycle[cycle] += totalAsh;\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(from, ids, values);\\n        emit TokensBurnt(from, cycle, block.timestamp, ids, values, totalAsh, multiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xf20c85efea248a0fd47083c6d620e3d37d758ab5fa36cfcbf87878692bc042c2\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessMultiplier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess Multiplier Merkle Claim Contract\\n * @dev This contract allows users to claim multiplier based on a Merkle proof\\n */\\ncontract AnichessMultiplier is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    mapping(address => uint256) public multipliers;\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(bytes32 => bool) public claimStatus;\\n    mapping(address => mapping(uint256 => uint256)) public tokenMultipliers;\\n\\n    /// @notice Event emitted when a merkle root is set.\\n    event SetMerkleRoot(bytes32 indexed merkleRoot);\\n    event Claimed(address indexed recipient, uint256 indexed batchId, uint256 multiplier);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(address recipient, uint256 batchId);\\n    error InvalidProof(address recipient, uint256 batchId);\\n\\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\\n\\n    error InvalidMerkleRoot(bytes32 merkleRoot);\\n\\n    error InvalidMultiplier(uint256 multiplier);\\n\\n    /// @notice Error thrown when the array lengths are inconsistent.\\n    error InconsistentArrays();\\n\\n    /**\\n     * @notice Constructor for the AnichessMultiplierMerkleClaim contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {}\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function _baseMultiplier(address wallet) internal view returns (uint256) {\\n        uint256 walletMultiplier = multipliers[wallet];\\n        return walletMultiplier == 0 ? 1 : walletMultiplier;\\n    }\\n\\n    function getMultiplier(address wallet, address[] calldata tokens, uint256[] calldata ids) external view returns (uint256 multiplier) {\\n        multiplier = _baseMultiplier(wallet);\\n\\n        if (tokens.length != ids.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        // for each token, check if the wallet has the token and if so, multiply the multiplier\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            for (uint256 j = 0; j < ids.length; j++) {\\n                if (IERC1155(tokens[i]).balanceOf(wallet, ids[j]) > 0) {\\n                    multiplier *= tokenMultipliers[tokens[i]][ids[j]];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root\\n     * @param merkleRoot The Merkle root of the claim.\\n     */\\n    function setMerkleRoot(bytes32 merkleRoot) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (merkleRoots[merkleRoot]) {\\n            revert MerkleRootAlreadyExists(merkleRoot);\\n        }\\n\\n        merkleRoots[merkleRoot] = true;\\n        emit SetMerkleRoot(merkleRoot);\\n    }\\n\\n    function setTokenMultipliers(address[] calldata tokens, uint256[][] calldata tokenIds, uint256[][] calldata _multipliers) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (tokens.length != tokenIds.length || tokens.length != _multipliers.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokenIds[i].length != _multipliers[i].length) {\\n                revert InconsistentArrays();\\n            }\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                tokenMultipliers[tokens[i]][tokenIds[i][j]] = _multipliers[i][j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific merkleRoot.\\n     * @param merkleRoot The Merkle root for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     */\\n    function claim(bytes32 merkleRoot, bytes32[] calldata proof, address recipient, uint256 multiplier, uint256 batchId) external {\\n        if (!merkleRoots[merkleRoot]) {\\n            revert InvalidMerkleRoot(merkleRoot);\\n        }\\n        if (multipliers[recipient] >= multiplier) {\\n            revert InvalidMultiplier(multiplier);\\n        }\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, multiplier, batchId));\\n        if (claimStatus[leaf]) {\\n            revert AlreadyClaimed(recipient, batchId);\\n        }\\n        if (!proof.verify(merkleRoot, leaf)) {\\n            revert InvalidProof(recipient, batchId);\\n        }\\n\\n        multipliers[recipient] = multiplier;\\n        claimStatus[leaf] = true;\\n\\n        emit Claimed(recipient, batchId, multiplier);\\n    }\\n}\\n\",\"keccak256\":\"0xcbfa8cc9d0a0a2510f4b0faef67def3bfc2fdf01eba50c8e6ed7678bca6a1506\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1967,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"tiers","offset":0,"slot":"0","type":"t_array(t_uint256)dyn_storage"},{"astId":1971,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"tierRewards","offset":0,"slot":"1","type":"t_array(t_uint256)dyn_storage"},{"astId":1976,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"totalAshByCycle","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1983,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"userAshByCycle","offset":0,"slot":"3","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1988,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"claimStatus","offset":0,"slot":"4","type":"t_mapping(t_bytes32,t_bool)"},{"astId":1993,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"leaderboardMultiplers","offset":0,"slot":"5","type":"t_mapping(t_address,t_uint256)"},{"astId":1998,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"tokenMultiplerUnlockStatus","offset":0,"slot":"6","type":"t_mapping(t_address,t_bool)"},{"astId":2003,"contract":"contracts/burn/AnichessOrbsBurnPool.sol:AnichessOrbsBurnPool","label":"tokenWeights","offset":0,"slot":"7","type":"t_mapping(t_uint256,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_array(t_uint256)dyn_storage":{"base":"t_uint256","encoding":"dynamic_array","label":"uint256[]","numberOfBytes":"32"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimedLeaderboardMultiplier(address)":[{"notice":"Error thrown when the payout has already been claimed."}],"AlreadySetTiers()":[{"notice":"Error thrown when the tiers are already set."}],"AlreadySetTokenWeight(uint256)":[{"notice":"Error thrown when the token weight is already set."}],"AlreadyUnlockedTokenMultiplier(address)":[{"notice":"Error thrown when the wallet already has the token multiplier unlocked."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrays()":[{"notice":"Error thrown when the array lengths are inconsistent."}],"IncorrectTiers()":[{"notice":"Error thrown when the tiers are incorrect."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof()":[{"notice":"Error thrown when the proof is invalid."}],"InvalidToken()":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenAmount(uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"ClaimLeaderboardMultiplier(address,uint256)":{"notice":"Event emitted when the leaderboard multiplier is claimed."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"TokensBurnt(address,uint256,uint256,uint256[],uint256[],uint256,uint256)":{"notice":"Event emitted when tokens are burnt."},"UnlockTokenMultiplier(address,uint256)":{"notice":"Event emitted when the token multiplier is unlocked."}},"kind":"user","methods":{"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root of the leaderboard multiplier claim."},"MULTIPLIER_TOKEN()":{"notice":"The IERC1155 erc1155 contract for unlocking the token multiplier."},"MULTIPLIER_TOKEN_ID()":{"notice":"The token ID for unlocking the token multiplier."},"TOKEN()":{"notice":"The IERC1155Burnable erc1155 contracts."},"TOKEN_MULTIPLIER()":{"notice":"The token multiplier."},"claimLeaderboardMultiplier(bytes32[],address,uint256)":{"notice":"Claims the leaderboard multiplier"},"claimStatus(bytes32)":{"notice":"The claim status for the leaderboard multiplier."},"constructor":{"notice":"Constructor for the ERC1155TokenBurn contract."},"currentCycle()":{"notice":"Get the current cycle."},"getCycleReward(uint256)":{"notice":"Get the reward for the cycle."},"getMultiplier(address)":{"notice":"Get the multiplier for the user."},"getUserReward(uint256,address)":{"notice":"Get the user reward for the cycle."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"leaderboardMultiplers(address)":{"notice":"The leaderboard multipliers for each user."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Unlock the token multiplier by burning the multiplier token."},"owner()":{"notice":"Gets the address of the contract owner."},"setTiers(uint256[],uint256[])":{"notice":"Set the tiers and rewards."},"setTokensWeight(uint256[],uint256[])":{"notice":"Set the token weights."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"tierRewards(uint256)":{"notice":"The list of rewards for each tier."},"tiers(uint256)":{"notice":"The list of tiers to decide the reward pool."},"tokenMultiplerUnlockStatus(address)":{"notice":"The token multiplier unlock status for each user."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"userAshByCycle(uint256,address)":{"notice":"The total amount of ASH burned by each user in each cycle."}},"version":1}}},"contracts/merkleClaim/AnichessMultiplier.sol":{"AnichessMultiplier":{"abi":[{"inputs":[{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"batchId","type":"uint256"}],"name":"AlreadyClaimed","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrays","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"InvalidMerkleRoot","type":"error"},{"inputs":[{"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"InvalidMultiplier","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"batchId","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"MerkleRootAlreadyExists","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"uint256","name":"batchId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"multiplier","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"SetMerkleRoot","type":"event"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"multiplier","type":"uint256"},{"internalType":"uint256","name":"batchId","type":"uint256"}],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"claimStatus","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"},{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"}],"name":"getMultiplier","outputs":[{"internalType":"uint256","name":"multiplier","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"merkleRoots","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"multipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"}],"name":"setMerkleRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"tokens","type":"address[]"},{"internalType":"uint256[][]","name":"tokenIds","type":"uint256[][]"},{"internalType":"uint256[][]","name":"_multipliers","type":"uint256[][]"}],"name":"setTokenMultipliers","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"tokenMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract allows users to claim multiplier based on a Merkle proof","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"claim(bytes32,bytes32[],address,uint256,uint256)":{"params":{"merkleRoot":"The Merkle root for the claim.","proof":"The Merkle proof for the claim.","recipient":"The recipient of the payout."}},"constructor":{"params":{"forwarderRegistry":"The forwarder registry contract."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"setMerkleRoot(bytes32)":{"params":{"merkleRoot":"The Merkle root of the claim."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Anichess Multiplier Merkle Claim Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2918":{"entryPoint":null,"id":2918,"parameterSlots":1,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_555":{"entryPoint":null,"id":555,"parameterSlots":1,"returnSlots":0},"@_602":{"entryPoint":null,"id":602,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":150,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":96,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":273,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":321,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IForwarderRegistry_$727_fromMemory":{"entryPoint":414,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":464,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:562:28","nodeType":"YulBlock","src":"0:562:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"121:209:28","nodeType":"YulBlock","src":"121:209:28","statements":[{"body":{"nativeSrc":"167:16:28","nodeType":"YulBlock","src":"167:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"176:1:28","nodeType":"YulLiteral","src":"176:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"179:1:28","nodeType":"YulLiteral","src":"179:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"169:6:28","nodeType":"YulIdentifier","src":"169:6:28"},"nativeSrc":"169:12:28","nodeType":"YulFunctionCall","src":"169:12:28"},"nativeSrc":"169:12:28","nodeType":"YulExpressionStatement","src":"169:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"142:7:28","nodeType":"YulIdentifier","src":"142:7:28"},{"name":"headStart","nativeSrc":"151:9:28","nodeType":"YulIdentifier","src":"151:9:28"}],"functionName":{"name":"sub","nativeSrc":"138:3:28","nodeType":"YulIdentifier","src":"138:3:28"},"nativeSrc":"138:23:28","nodeType":"YulFunctionCall","src":"138:23:28"},{"kind":"number","nativeSrc":"163:2:28","nodeType":"YulLiteral","src":"163:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"134:3:28","nodeType":"YulIdentifier","src":"134:3:28"},"nativeSrc":"134:32:28","nodeType":"YulFunctionCall","src":"134:32:28"},"nativeSrc":"131:52:28","nodeType":"YulIf","src":"131:52:28"},{"nativeSrc":"192:29:28","nodeType":"YulVariableDeclaration","src":"192:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"211:9:28","nodeType":"YulIdentifier","src":"211:9:28"}],"functionName":{"name":"mload","nativeSrc":"205:5:28","nodeType":"YulIdentifier","src":"205:5:28"},"nativeSrc":"205:16:28","nodeType":"YulFunctionCall","src":"205:16:28"},"variables":[{"name":"value","nativeSrc":"196:5:28","nodeType":"YulTypedName","src":"196:5:28","type":""}]},{"body":{"nativeSrc":"284:16:28","nodeType":"YulBlock","src":"284:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"293:1:28","nodeType":"YulLiteral","src":"293:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"296:1:28","nodeType":"YulLiteral","src":"296:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"286:6:28","nodeType":"YulIdentifier","src":"286:6:28"},"nativeSrc":"286:12:28","nodeType":"YulFunctionCall","src":"286:12:28"},"nativeSrc":"286:12:28","nodeType":"YulExpressionStatement","src":"286:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"243:5:28","nodeType":"YulIdentifier","src":"243:5:28"},{"arguments":[{"name":"value","nativeSrc":"254:5:28","nodeType":"YulIdentifier","src":"254:5:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"269:3:28","nodeType":"YulLiteral","src":"269:3:28","type":"","value":"160"},{"kind":"number","nativeSrc":"274:1:28","nodeType":"YulLiteral","src":"274:1:28","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"265:3:28","nodeType":"YulIdentifier","src":"265:3:28"},"nativeSrc":"265:11:28","nodeType":"YulFunctionCall","src":"265:11:28"},{"kind":"number","nativeSrc":"278:1:28","nodeType":"YulLiteral","src":"278:1:28","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"261:3:28","nodeType":"YulIdentifier","src":"261:3:28"},"nativeSrc":"261:19:28","nodeType":"YulFunctionCall","src":"261:19:28"}],"functionName":{"name":"and","nativeSrc":"250:3:28","nodeType":"YulIdentifier","src":"250:3:28"},"nativeSrc":"250:31:28","nodeType":"YulFunctionCall","src":"250:31:28"}],"functionName":{"name":"eq","nativeSrc":"240:2:28","nodeType":"YulIdentifier","src":"240:2:28"},"nativeSrc":"240:42:28","nodeType":"YulFunctionCall","src":"240:42:28"}],"functionName":{"name":"iszero","nativeSrc":"233:6:28","nodeType":"YulIdentifier","src":"233:6:28"},"nativeSrc":"233:50:28","nodeType":"YulFunctionCall","src":"233:50:28"},"nativeSrc":"230:70:28","nodeType":"YulIf","src":"230:70:28"},{"nativeSrc":"309:15:28","nodeType":"YulAssignment","src":"309:15:28","value":{"name":"value","nativeSrc":"319:5:28","nodeType":"YulIdentifier","src":"319:5:28"},"variableNames":[{"name":"value0","nativeSrc":"309:6:28","nodeType":"YulIdentifier","src":"309:6:28"}]}]},"name":"abi_decode_tuple_t_contract$_IForwarderRegistry_$727_fromMemory","nativeSrc":"14:316:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"87:9:28","nodeType":"YulTypedName","src":"87:9:28","type":""},{"name":"dataEnd","nativeSrc":"98:7:28","nodeType":"YulTypedName","src":"98:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"110:6:28","nodeType":"YulTypedName","src":"110:6:28","type":""}],"src":"14:316:28"},{"body":{"nativeSrc":"384:176:28","nodeType":"YulBlock","src":"384:176:28","statements":[{"nativeSrc":"394:17:28","nodeType":"YulAssignment","src":"394:17:28","value":{"arguments":[{"name":"x","nativeSrc":"406:1:28","nodeType":"YulIdentifier","src":"406:1:28"},{"name":"y","nativeSrc":"409:1:28","nodeType":"YulIdentifier","src":"409:1:28"}],"functionName":{"name":"sub","nativeSrc":"402:3:28","nodeType":"YulIdentifier","src":"402:3:28"},"nativeSrc":"402:9:28","nodeType":"YulFunctionCall","src":"402:9:28"},"variableNames":[{"name":"diff","nativeSrc":"394:4:28","nodeType":"YulIdentifier","src":"394:4:28"}]},{"body":{"nativeSrc":"443:111:28","nodeType":"YulBlock","src":"443:111:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"464:1:28","nodeType":"YulLiteral","src":"464:1:28","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"471:3:28","nodeType":"YulLiteral","src":"471:3:28","type":"","value":"224"},{"kind":"number","nativeSrc":"476:10:28","nodeType":"YulLiteral","src":"476:10:28","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"467:3:28","nodeType":"YulIdentifier","src":"467:3:28"},"nativeSrc":"467:20:28","nodeType":"YulFunctionCall","src":"467:20:28"}],"functionName":{"name":"mstore","nativeSrc":"457:6:28","nodeType":"YulIdentifier","src":"457:6:28"},"nativeSrc":"457:31:28","nodeType":"YulFunctionCall","src":"457:31:28"},"nativeSrc":"457:31:28","nodeType":"YulExpressionStatement","src":"457:31:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"508:1:28","nodeType":"YulLiteral","src":"508:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"511:4:28","nodeType":"YulLiteral","src":"511:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"501:6:28","nodeType":"YulIdentifier","src":"501:6:28"},"nativeSrc":"501:15:28","nodeType":"YulFunctionCall","src":"501:15:28"},"nativeSrc":"501:15:28","nodeType":"YulExpressionStatement","src":"501:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"536:1:28","nodeType":"YulLiteral","src":"536:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"539:4:28","nodeType":"YulLiteral","src":"539:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"529:6:28","nodeType":"YulIdentifier","src":"529:6:28"},"nativeSrc":"529:15:28","nodeType":"YulFunctionCall","src":"529:15:28"},"nativeSrc":"529:15:28","nodeType":"YulExpressionStatement","src":"529:15:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"426:4:28","nodeType":"YulIdentifier","src":"426:4:28"},{"name":"x","nativeSrc":"432:1:28","nodeType":"YulIdentifier","src":"432:1:28"}],"functionName":{"name":"gt","nativeSrc":"423:2:28","nodeType":"YulIdentifier","src":"423:2:28"},"nativeSrc":"423:11:28","nodeType":"YulFunctionCall","src":"423:11:28"},"nativeSrc":"420:134:28","nodeType":"YulIf","src":"420:134:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"335:225:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"366:1:28","nodeType":"YulTypedName","src":"366:1:28","type":""},{"name":"y","nativeSrc":"369:1:28","nodeType":"YulTypedName","src":"369:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"375:4:28","nodeType":"YulTypedName","src":"375:4:28","type":""}],"src":"335:225:28"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IForwarderRegistry_$727_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b50604051620015ac380380620015ac83398101604081905262000034916200019e565b6001600160a01b0381166080523362000058816200005162000060565b9062000096565b5050620001f2565b6000806200009060017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd620001d0565b92915050565b6001600160a01b03811615620000ed5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200010d6307f5828d60e41b60016200010562000111565b919062000141565b5050565b6000806200009060017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e620001d0565b600160e01b6001600160e01b031983160162000170576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600060208284031215620001b157600080fd5b81516001600160a01b0381168114620001c957600080fd5b9392505050565b818103818111156200009057634e487b7160e01b600052601160045260246000fd5b608051611389620002236000396000818161010e0152818161017801528181610e580152610ee001526113896000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063e18ea41811610066578063e18ea4181461023c578063e3a0ce091461024f578063f2fde38b14610272578063fe5a53771461028557600080fd5b80638da5cb5b14610201578063ac524f3d14610209578063cc668cf01461022957600080fd5b8063572b6c05116100bd578063572b6c05146101685780637cb64759146101b5578063851f3bd2146101c857600080fd5b806301ffc9a7146100e45780632b4c9f161461010c5780633ec6004f14610153575b600080fd5b6100f76100f2366004610f88565b6102a8565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016661016136600461103f565b6102c2565b005b6100f76101763660046110af565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101666101c33660046110ca565b610585565b6101f36101d63660046110e3565b600360209081526000928352604080842090915290825290205481565b604051908152602001610103565b61012e61064e565b6101f36102173660046110af565b60006020819052908152604090205481565b61016661023736600461110d565b61067a565b6101f361024a3660046111a7565b610893565b6100f761025d3660046110ca565b60026020526000908152604090205460ff1681565b6101666102803660046110af565b610a9e565b6100f76102933660046110ca565b60016020526000908152604090205460ff1681565b60006102bc826102b6610abc565b90610aea565b92915050565b60008681526001602052604090205460ff16610312576040517f6d825743000000000000000000000000000000000000000000000000000000008152600481018790526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548211610373576040517f9f44c9eb00000000000000000000000000000000000000000000000000000000815260048101839052602401610309565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b1660208201526034810183905260548101829052600090607401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915060ff1615610455576040517fe64ea1da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610309565b6104978782888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610bc49050565b6104ec576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610309565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260208181526040808320879055848352600282529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590518581528492917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a350505050505050565b61059e610590610bda565b610598610be4565b90610c12565b60008181526001602052604090205460ff16156105ea576040517f5d35de3700000000000000000000000000000000000000000000000000000000815260048101829052602401610309565b600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091555182917f914960aef5e033ce5cae8a7992d4b7a6f0f9741227b66acb67c605b7019f8a4691a250565b600061067561065b610be4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610685610590610bda565b84831415806106945750848114155b156106cb576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8581101561088a578282828181106106e8576106e8611228565b90506020028101906106fa9190611257565b905085858381811061070e5761070e611228565b90506020028101906107209190611257565b905014610759576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85858381811061076e5761076e611228565b90506020028101906107809190611257565b90508110156108815783838381811061079b5761079b611228565b90506020028101906107ad9190611257565b828181106107bd576107bd611228565b90506020020135600360008a8a868181106107da576107da611228565b90506020020160208101906107ef91906110af565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088888681811061083d5761083d611228565b905060200281019061084f9190611257565b8581811061085f5761085f611228565b602090810292909201358352508101919091526040016000205560010161075c565b506001016106ce565b50505050505050565b600061089e86610c81565b90508382146108d9576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84811015610a945760005b83811015610a8b57600087878481811061090357610903611228565b905060200201602081019061091891906110af565b73ffffffffffffffffffffffffffffffffffffffff1662fdd58e8a88888681811061094557610945611228565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906112bf565b1115610a8357600360008888858181106109fc576109fc611228565b9050602002016020810190610a1191906110af565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868684818110610a5f57610a5f611228565b9050602002013581526020019081526020016000205483610a809190611307565b92505b6001016108e7565b506001016108dc565b5095945050505050565b610ab9610aa9610bda565b82610ab2610be4565b9190610cbd565b50565b6000806102bc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61131e565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610b3a575060006102bc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610b8b575060016102bc565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610bd18584610dd2565b14949350505050565b6000610675610e15565b6000806102bc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61131e565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610c7d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610309565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120548015610cb35780610cb6565b60015b9392505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610d2a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610309565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dcc5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600081815b8451811015610e0d57610e0382868381518110610df657610df6611228565b6020026020010151610f5c565b9150600101610dd7565b509392505050565b600033321480610e255750601836105b15610e2f57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610f4b57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611331565b15610f5557919050565b3391505090565b6000818310610f78576000828152602084905260409020610cb6565b5060009182526020526040902090565b600060208284031215610f9a57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb657600080fd5b60008083601f840112610fdc57600080fd5b50813567ffffffffffffffff811115610ff457600080fd5b6020830191508360208260051b850101111561100f57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461103a57600080fd5b919050565b60008060008060008060a0878903121561105857600080fd5b86359550602087013567ffffffffffffffff81111561107657600080fd5b61108289828a01610fca565b9096509450611095905060408801611016565b925060608701359150608087013590509295509295509295565b6000602082840312156110c157600080fd5b610cb682611016565b6000602082840312156110dc57600080fd5b5035919050565b600080604083850312156110f657600080fd5b6110ff83611016565b946020939093013593505050565b6000806000806000806060878903121561112657600080fd5b863567ffffffffffffffff8082111561113e57600080fd5b61114a8a838b01610fca565b9098509650602089013591508082111561116357600080fd5b61116f8a838b01610fca565b9096509450604089013591508082111561118857600080fd5b5061119589828a01610fca565b979a9699509497509295939492505050565b6000806000806000606086880312156111bf57600080fd5b6111c886611016565b9450602086013567ffffffffffffffff808211156111e557600080fd5b6111f189838a01610fca565b9096509450604088013591508082111561120a57600080fd5b5061121788828901610fca565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261128c57600080fd5b83018035915067ffffffffffffffff8211156112a757600080fd5b6020019150600581901b360382131561100f57600080fd5b6000602082840312156112d157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102bc576102bc6112d8565b818103818111156102bc576102bc6112d8565b60006020828403121561134357600080fd5b81518015158114610cb657600080fdfea26469706673582212205fe1058634e90993e801c76bb858e40193aedd5dac25a24ca76bd79c494b7d0864736f6c63430008160033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15AC CODESIZE SUB DUP1 PUSH3 0x15AC DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x19E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE CALLER PUSH3 0x58 DUP2 PUSH3 0x51 PUSH3 0x60 JUMP JUMPDEST SWAP1 PUSH3 0x96 JUMP JUMPDEST POP POP PUSH3 0x1F2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x90 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x1D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xED JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x10D PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x105 PUSH3 0x111 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x141 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x90 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x1D0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x170 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x90 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x1389 PUSH3 0x223 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x10E ADD MSTORE DUP2 DUP2 PUSH2 0x178 ADD MSTORE DUP2 DUP2 PUSH2 0xE58 ADD MSTORE PUSH2 0xEE0 ADD MSTORE PUSH2 0x1389 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE18EA418 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE18EA418 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xFE5A5377 EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0xAC524F3D EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0xCC668CF0 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x851F3BD2 EQ PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x153 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x2C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x585 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x110D JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x893 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0xA9E JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC DUP3 PUSH2 0x2B6 PUSH2 0xABC JUMP JUMPDEST SWAP1 PUSH2 0xAEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT PUSH2 0x373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9F44C9EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP6 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE64EA1DA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x497 DUP8 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xBC4 SWAP1 POP JUMP JUMPDEST PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD DUP6 DUP2 MSTORE DUP5 SWAP3 SWAP2 PUSH32 0x987D620F307FF6B94D58743CB7A7509F24071586A77759B77C2D4E29F75A2F9A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x590 PUSH2 0xBDA JUMP JUMPDEST PUSH2 0x598 PUSH2 0xBE4 JUMP JUMPDEST SWAP1 PUSH2 0xC12 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x914960AEF5E033CE5CAE8A7992D4B7A6F0F9741227B66ACB67C605B7019F8A46 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x675 PUSH2 0x65B PUSH2 0xBE4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x685 PUSH2 0x590 PUSH2 0xBDA JUMP JUMPDEST DUP5 DUP4 EQ ISZERO DUP1 PUSH2 0x694 JUMPI POP DUP5 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x88A JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x6E8 JUMPI PUSH2 0x6E8 PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x70E JUMPI PUSH2 0x70E PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x720 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x76E JUMPI PUSH2 0x76E PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x780 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x881 JUMPI DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x79B JUMPI PUSH2 0x79B PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x7AD SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST DUP3 DUP2 DUP2 LT PUSH2 0x7BD JUMPI PUSH2 0x7BD PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 PUSH1 0x0 DUP11 DUP11 DUP7 DUP2 DUP2 LT PUSH2 0x7DA JUMPI PUSH2 0x7DA PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7EF SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x83D JUMPI PUSH2 0x83D PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x84F SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST DUP6 DUP2 DUP2 LT PUSH2 0x85F JUMPI PUSH2 0x85F PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH2 0x75C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6CE JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP7 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP DUP4 DUP3 EQ PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA94 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA8B JUMPI PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x903 JUMPI PUSH2 0x903 PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x918 SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xFDD58E DUP11 DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x945 JUMPI PUSH2 0x945 PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E0 SWAP2 SWAP1 PUSH2 0x12BF JUMP JUMPDEST GT ISZERO PUSH2 0xA83 JUMPI PUSH1 0x3 PUSH1 0x0 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x9FC JUMPI PUSH2 0x9FC PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA11 SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xA5F JUMPI PUSH2 0xA5F PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0xA80 SWAP2 SWAP1 PUSH2 0x1307 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8E7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8DC JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xAB9 PUSH2 0xAA9 PUSH2 0xBDA JUMP JUMPDEST DUP3 PUSH2 0xAB2 PUSH2 0xBE4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCBD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x131E JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB3A JUMPI POP PUSH1 0x0 PUSH2 0x2BC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB8B JUMPI POP PUSH1 0x1 PUSH2 0x2BC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD1 DUP6 DUP5 PUSH2 0xDD2 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x675 PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x131E JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xC7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0xCB3 JUMPI DUP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDCC JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE03 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDF6 JUMPI PUSH2 0xDF6 PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF5C JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDD7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE25 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE2F JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF4B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST ISZERO PUSH2 0xF55 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xF78 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xCB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x103A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1082 DUP10 DUP3 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH2 0x1095 SWAP1 POP PUSH1 0x40 DUP9 ADD PUSH2 0x1016 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB6 DUP3 PUSH2 0x1016 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10FF DUP4 PUSH2 0x1016 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114A DUP11 DUP4 DUP12 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x116F DUP11 DUP4 DUP12 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1195 DUP10 DUP3 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11C8 DUP7 PUSH2 0x1016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F1 DUP10 DUP4 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1217 DUP9 DUP3 DUP10 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x12D8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCB6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH0 0xE1 SDIV DUP7 CALLVALUE 0xE9 MULMOD SWAP4 0xE8 ADD 0xC7 PUSH12 0xB858E40193AEDD5DAC25A24C 0xA7 PUSH12 0xD79C494B7D0864736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1042:4868:27:-:0;;;2272:126;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:12;;;;2384:10:27;1008:63:0;2384:10:27;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;964:114;2272:126:27;1042:4868;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:316:28:-;110:6;163:2;151:9;142:7;138:23;134:32;131:52;;;179:1;176;169:12;131:52;205:16;;-1:-1:-1;;;;;250:31:28;;240:42;;230:70;;296:1;293;286:12;230:70;319:5;14:316;-1:-1:-1;;;14:316:28:o;335:225::-;402:9;;;423:11;;;420:134;;;476:10;471:3;467:20;464:1;457:31;511:4;508:1;501:15;539:4;536:1;529:15;335:225;1042:4868:27;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_baseMultiplier_2967":{"entryPoint":3201,"id":2967,"parameterSlots":1,"returnSlots":1},"@_efficientHash_1899":{"entryPoint":null,"id":1899,"parameterSlots":2,"returnSlots":1},"@_hashPair_1888":{"entryPoint":3932,"id":1888,"parameterSlots":2,"returnSlots":1},"@_msgSender_2932":{"entryPoint":3034,"id":2932,"parameterSlots":0,"returnSlots":1},"@_msgSender_652":{"entryPoint":3605,"id":652,"parameterSlots":0,"returnSlots":1},"@claimStatus_2856":{"entryPoint":null,"id":2856,"parameterSlots":0,"returnSlots":0},"@claim_3274":{"entryPoint":706,"id":3274,"parameterSlots":6,"returnSlots":0},"@enforceIsContractOwner_351":{"entryPoint":3090,"id":351,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_564":{"entryPoint":null,"id":564,"parameterSlots":0,"returnSlots":1},"@getMultiplier_3050":{"entryPoint":2195,"id":3050,"parameterSlots":5,"returnSlots":1},"@isTrustedForwarder_580":{"entryPoint":null,"id":580,"parameterSlots":1,"returnSlots":1},"@layout_383":{"entryPoint":3044,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2748,"id":531,"parameterSlots":0,"returnSlots":1},"@merkleRoots_2852":{"entryPoint":null,"id":2852,"parameterSlots":0,"returnSlots":0},"@msgSender_738":{"entryPoint":null,"id":738,"parameterSlots":0,"returnSlots":1},"@multipliers_2848":{"entryPoint":null,"id":2848,"parameterSlots":0,"returnSlots":0},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1614,"id":62,"parameterSlots":0,"returnSlots":1},"@processProof_1483":{"entryPoint":3538,"id":1483,"parameterSlots":2,"returnSlots":1},"@setMerkleRoot_3085":{"entryPoint":1413,"id":3085,"parameterSlots":1,"returnSlots":0},"@setTokenMultipliers_3185":{"entryPoint":1658,"id":3185,"parameterSlots":6,"returnSlots":0},"@supportsInterface_413":{"entryPoint":680,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2794,"id":519,"parameterSlots":2,"returnSlots":1},"@tokenMultipliers_2862":{"entryPoint":null,"id":2862,"parameterSlots":0,"returnSlots":0},"@transferOwnership_291":{"entryPoint":3261,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2718,"id":79,"parameterSlots":1,"returnSlots":0},"@verify_1422":{"entryPoint":3012,"id":1422,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4118,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_bytes32_dyn_calldata":{"entryPoint":4042,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4271,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4519,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":4323,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr":{"entryPoint":4365,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4913,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":4298,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256":{"entryPoint":4159,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes4":{"entryPoint":3976,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":4799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":4695,"id":null,"parameterSlots":2,"returnSlots":2},"checked_mul_t_uint256":{"entryPoint":4871,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4894,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":4824,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4648,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8118:28","nodeType":"YulBlock","src":"0:8118:28","statements":[{"nativeSrc":"6:3:28","nodeType":"YulBlock","src":"6:3:28","statements":[]},{"body":{"nativeSrc":"83:263:28","nodeType":"YulBlock","src":"83:263:28","statements":[{"body":{"nativeSrc":"129:16:28","nodeType":"YulBlock","src":"129:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:28","nodeType":"YulLiteral","src":"138:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:28","nodeType":"YulLiteral","src":"141:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:28","nodeType":"YulIdentifier","src":"131:6:28"},"nativeSrc":"131:12:28","nodeType":"YulFunctionCall","src":"131:12:28"},"nativeSrc":"131:12:28","nodeType":"YulExpressionStatement","src":"131:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:28","nodeType":"YulIdentifier","src":"104:7:28"},{"name":"headStart","nativeSrc":"113:9:28","nodeType":"YulIdentifier","src":"113:9:28"}],"functionName":{"name":"sub","nativeSrc":"100:3:28","nodeType":"YulIdentifier","src":"100:3:28"},"nativeSrc":"100:23:28","nodeType":"YulFunctionCall","src":"100:23:28"},{"kind":"number","nativeSrc":"125:2:28","nodeType":"YulLiteral","src":"125:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:28","nodeType":"YulIdentifier","src":"96:3:28"},"nativeSrc":"96:32:28","nodeType":"YulFunctionCall","src":"96:32:28"},"nativeSrc":"93:52:28","nodeType":"YulIf","src":"93:52:28"},{"nativeSrc":"154:36:28","nodeType":"YulVariableDeclaration","src":"154:36:28","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:28","nodeType":"YulIdentifier","src":"180:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:28","nodeType":"YulIdentifier","src":"167:12:28"},"nativeSrc":"167:23:28","nodeType":"YulFunctionCall","src":"167:23:28"},"variables":[{"name":"value","nativeSrc":"158:5:28","nodeType":"YulTypedName","src":"158:5:28","type":""}]},{"body":{"nativeSrc":"300:16:28","nodeType":"YulBlock","src":"300:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:28","nodeType":"YulLiteral","src":"309:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:28","nodeType":"YulLiteral","src":"312:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:28","nodeType":"YulIdentifier","src":"302:6:28"},"nativeSrc":"302:12:28","nodeType":"YulFunctionCall","src":"302:12:28"},"nativeSrc":"302:12:28","nodeType":"YulExpressionStatement","src":"302:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:28","nodeType":"YulIdentifier","src":"212:5:28"},{"arguments":[{"name":"value","nativeSrc":"223:5:28","nodeType":"YulIdentifier","src":"223:5:28"},{"kind":"number","nativeSrc":"230:66:28","nodeType":"YulLiteral","src":"230:66:28","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:28","nodeType":"YulIdentifier","src":"219:3:28"},"nativeSrc":"219:78:28","nodeType":"YulFunctionCall","src":"219:78:28"}],"functionName":{"name":"eq","nativeSrc":"209:2:28","nodeType":"YulIdentifier","src":"209:2:28"},"nativeSrc":"209:89:28","nodeType":"YulFunctionCall","src":"209:89:28"}],"functionName":{"name":"iszero","nativeSrc":"202:6:28","nodeType":"YulIdentifier","src":"202:6:28"},"nativeSrc":"202:97:28","nodeType":"YulFunctionCall","src":"202:97:28"},"nativeSrc":"199:117:28","nodeType":"YulIf","src":"199:117:28"},{"nativeSrc":"325:15:28","nodeType":"YulAssignment","src":"325:15:28","value":{"name":"value","nativeSrc":"335:5:28","nodeType":"YulIdentifier","src":"335:5:28"},"variableNames":[{"name":"value0","nativeSrc":"325:6:28","nodeType":"YulIdentifier","src":"325:6:28"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:28","nodeType":"YulTypedName","src":"49:9:28","type":""},{"name":"dataEnd","nativeSrc":"60:7:28","nodeType":"YulTypedName","src":"60:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:28","nodeType":"YulTypedName","src":"72:6:28","type":""}],"src":"14:332:28"},{"body":{"nativeSrc":"446:92:28","nodeType":"YulBlock","src":"446:92:28","statements":[{"nativeSrc":"456:26:28","nodeType":"YulAssignment","src":"456:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:28","nodeType":"YulIdentifier","src":"468:9:28"},{"kind":"number","nativeSrc":"479:2:28","nodeType":"YulLiteral","src":"479:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:28","nodeType":"YulIdentifier","src":"464:3:28"},"nativeSrc":"464:18:28","nodeType":"YulFunctionCall","src":"464:18:28"},"variableNames":[{"name":"tail","nativeSrc":"456:4:28","nodeType":"YulIdentifier","src":"456:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:28","nodeType":"YulIdentifier","src":"498:9:28"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:28","nodeType":"YulIdentifier","src":"523:6:28"}],"functionName":{"name":"iszero","nativeSrc":"516:6:28","nodeType":"YulIdentifier","src":"516:6:28"},"nativeSrc":"516:14:28","nodeType":"YulFunctionCall","src":"516:14:28"}],"functionName":{"name":"iszero","nativeSrc":"509:6:28","nodeType":"YulIdentifier","src":"509:6:28"},"nativeSrc":"509:22:28","nodeType":"YulFunctionCall","src":"509:22:28"}],"functionName":{"name":"mstore","nativeSrc":"491:6:28","nodeType":"YulIdentifier","src":"491:6:28"},"nativeSrc":"491:41:28","nodeType":"YulFunctionCall","src":"491:41:28"},"nativeSrc":"491:41:28","nodeType":"YulExpressionStatement","src":"491:41:28"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:28","nodeType":"YulTypedName","src":"415:9:28","type":""},{"name":"value0","nativeSrc":"426:6:28","nodeType":"YulTypedName","src":"426:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:28","nodeType":"YulTypedName","src":"437:4:28","type":""}],"src":"351:187:28"},{"body":{"nativeSrc":"670:125:28","nodeType":"YulBlock","src":"670:125:28","statements":[{"nativeSrc":"680:26:28","nodeType":"YulAssignment","src":"680:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"692:9:28","nodeType":"YulIdentifier","src":"692:9:28"},{"kind":"number","nativeSrc":"703:2:28","nodeType":"YulLiteral","src":"703:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"688:3:28","nodeType":"YulIdentifier","src":"688:3:28"},"nativeSrc":"688:18:28","nodeType":"YulFunctionCall","src":"688:18:28"},"variableNames":[{"name":"tail","nativeSrc":"680:4:28","nodeType":"YulIdentifier","src":"680:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"722:9:28","nodeType":"YulIdentifier","src":"722:9:28"},{"arguments":[{"name":"value0","nativeSrc":"737:6:28","nodeType":"YulIdentifier","src":"737:6:28"},{"kind":"number","nativeSrc":"745:42:28","nodeType":"YulLiteral","src":"745:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"733:3:28","nodeType":"YulIdentifier","src":"733:3:28"},"nativeSrc":"733:55:28","nodeType":"YulFunctionCall","src":"733:55:28"}],"functionName":{"name":"mstore","nativeSrc":"715:6:28","nodeType":"YulIdentifier","src":"715:6:28"},"nativeSrc":"715:74:28","nodeType":"YulFunctionCall","src":"715:74:28"},"nativeSrc":"715:74:28","nodeType":"YulExpressionStatement","src":"715:74:28"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed","nativeSrc":"543:252:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"639:9:28","nodeType":"YulTypedName","src":"639:9:28","type":""},{"name":"value0","nativeSrc":"650:6:28","nodeType":"YulTypedName","src":"650:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"661:4:28","nodeType":"YulTypedName","src":"661:4:28","type":""}],"src":"543:252:28"},{"body":{"nativeSrc":"884:283:28","nodeType":"YulBlock","src":"884:283:28","statements":[{"body":{"nativeSrc":"933:16:28","nodeType":"YulBlock","src":"933:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"942:1:28","nodeType":"YulLiteral","src":"942:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"945:1:28","nodeType":"YulLiteral","src":"945:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"935:6:28","nodeType":"YulIdentifier","src":"935:6:28"},"nativeSrc":"935:12:28","nodeType":"YulFunctionCall","src":"935:12:28"},"nativeSrc":"935:12:28","nodeType":"YulExpressionStatement","src":"935:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"912:6:28","nodeType":"YulIdentifier","src":"912:6:28"},{"kind":"number","nativeSrc":"920:4:28","nodeType":"YulLiteral","src":"920:4:28","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"908:3:28","nodeType":"YulIdentifier","src":"908:3:28"},"nativeSrc":"908:17:28","nodeType":"YulFunctionCall","src":"908:17:28"},{"name":"end","nativeSrc":"927:3:28","nodeType":"YulIdentifier","src":"927:3:28"}],"functionName":{"name":"slt","nativeSrc":"904:3:28","nodeType":"YulIdentifier","src":"904:3:28"},"nativeSrc":"904:27:28","nodeType":"YulFunctionCall","src":"904:27:28"}],"functionName":{"name":"iszero","nativeSrc":"897:6:28","nodeType":"YulIdentifier","src":"897:6:28"},"nativeSrc":"897:35:28","nodeType":"YulFunctionCall","src":"897:35:28"},"nativeSrc":"894:55:28","nodeType":"YulIf","src":"894:55:28"},{"nativeSrc":"958:30:28","nodeType":"YulAssignment","src":"958:30:28","value":{"arguments":[{"name":"offset","nativeSrc":"981:6:28","nodeType":"YulIdentifier","src":"981:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"968:12:28","nodeType":"YulIdentifier","src":"968:12:28"},"nativeSrc":"968:20:28","nodeType":"YulFunctionCall","src":"968:20:28"},"variableNames":[{"name":"length","nativeSrc":"958:6:28","nodeType":"YulIdentifier","src":"958:6:28"}]},{"body":{"nativeSrc":"1031:16:28","nodeType":"YulBlock","src":"1031:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1040:1:28","nodeType":"YulLiteral","src":"1040:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1043:1:28","nodeType":"YulLiteral","src":"1043:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1033:6:28","nodeType":"YulIdentifier","src":"1033:6:28"},"nativeSrc":"1033:12:28","nodeType":"YulFunctionCall","src":"1033:12:28"},"nativeSrc":"1033:12:28","nodeType":"YulExpressionStatement","src":"1033:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1003:6:28","nodeType":"YulIdentifier","src":"1003:6:28"},{"kind":"number","nativeSrc":"1011:18:28","nodeType":"YulLiteral","src":"1011:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1000:2:28","nodeType":"YulIdentifier","src":"1000:2:28"},"nativeSrc":"1000:30:28","nodeType":"YulFunctionCall","src":"1000:30:28"},"nativeSrc":"997:50:28","nodeType":"YulIf","src":"997:50:28"},{"nativeSrc":"1056:29:28","nodeType":"YulAssignment","src":"1056:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"1072:6:28","nodeType":"YulIdentifier","src":"1072:6:28"},{"kind":"number","nativeSrc":"1080:4:28","nodeType":"YulLiteral","src":"1080:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1068:3:28","nodeType":"YulIdentifier","src":"1068:3:28"},"nativeSrc":"1068:17:28","nodeType":"YulFunctionCall","src":"1068:17:28"},"variableNames":[{"name":"arrayPos","nativeSrc":"1056:8:28","nodeType":"YulIdentifier","src":"1056:8:28"}]},{"body":{"nativeSrc":"1145:16:28","nodeType":"YulBlock","src":"1145:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1154:1:28","nodeType":"YulLiteral","src":"1154:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1157:1:28","nodeType":"YulLiteral","src":"1157:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1147:6:28","nodeType":"YulIdentifier","src":"1147:6:28"},"nativeSrc":"1147:12:28","nodeType":"YulFunctionCall","src":"1147:12:28"},"nativeSrc":"1147:12:28","nodeType":"YulExpressionStatement","src":"1147:12:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1108:6:28","nodeType":"YulIdentifier","src":"1108:6:28"},{"arguments":[{"kind":"number","nativeSrc":"1120:1:28","nodeType":"YulLiteral","src":"1120:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"1123:6:28","nodeType":"YulIdentifier","src":"1123:6:28"}],"functionName":{"name":"shl","nativeSrc":"1116:3:28","nodeType":"YulIdentifier","src":"1116:3:28"},"nativeSrc":"1116:14:28","nodeType":"YulFunctionCall","src":"1116:14:28"}],"functionName":{"name":"add","nativeSrc":"1104:3:28","nodeType":"YulIdentifier","src":"1104:3:28"},"nativeSrc":"1104:27:28","nodeType":"YulFunctionCall","src":"1104:27:28"},{"kind":"number","nativeSrc":"1133:4:28","nodeType":"YulLiteral","src":"1133:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1100:3:28","nodeType":"YulIdentifier","src":"1100:3:28"},"nativeSrc":"1100:38:28","nodeType":"YulFunctionCall","src":"1100:38:28"},{"name":"end","nativeSrc":"1140:3:28","nodeType":"YulIdentifier","src":"1140:3:28"}],"functionName":{"name":"gt","nativeSrc":"1097:2:28","nodeType":"YulIdentifier","src":"1097:2:28"},"nativeSrc":"1097:47:28","nodeType":"YulFunctionCall","src":"1097:47:28"},"nativeSrc":"1094:67:28","nodeType":"YulIf","src":"1094:67:28"}]},"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"800:367:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"847:6:28","nodeType":"YulTypedName","src":"847:6:28","type":""},{"name":"end","nativeSrc":"855:3:28","nodeType":"YulTypedName","src":"855:3:28","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"863:8:28","nodeType":"YulTypedName","src":"863:8:28","type":""},{"name":"length","nativeSrc":"873:6:28","nodeType":"YulTypedName","src":"873:6:28","type":""}],"src":"800:367:28"},{"body":{"nativeSrc":"1221:147:28","nodeType":"YulBlock","src":"1221:147:28","statements":[{"nativeSrc":"1231:29:28","nodeType":"YulAssignment","src":"1231:29:28","value":{"arguments":[{"name":"offset","nativeSrc":"1253:6:28","nodeType":"YulIdentifier","src":"1253:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"1240:12:28","nodeType":"YulIdentifier","src":"1240:12:28"},"nativeSrc":"1240:20:28","nodeType":"YulFunctionCall","src":"1240:20:28"},"variableNames":[{"name":"value","nativeSrc":"1231:5:28","nodeType":"YulIdentifier","src":"1231:5:28"}]},{"body":{"nativeSrc":"1346:16:28","nodeType":"YulBlock","src":"1346:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1355:1:28","nodeType":"YulLiteral","src":"1355:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1358:1:28","nodeType":"YulLiteral","src":"1358:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1348:6:28","nodeType":"YulIdentifier","src":"1348:6:28"},"nativeSrc":"1348:12:28","nodeType":"YulFunctionCall","src":"1348:12:28"},"nativeSrc":"1348:12:28","nodeType":"YulExpressionStatement","src":"1348:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1282:5:28","nodeType":"YulIdentifier","src":"1282:5:28"},{"arguments":[{"name":"value","nativeSrc":"1293:5:28","nodeType":"YulIdentifier","src":"1293:5:28"},{"kind":"number","nativeSrc":"1300:42:28","nodeType":"YulLiteral","src":"1300:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1289:3:28","nodeType":"YulIdentifier","src":"1289:3:28"},"nativeSrc":"1289:54:28","nodeType":"YulFunctionCall","src":"1289:54:28"}],"functionName":{"name":"eq","nativeSrc":"1279:2:28","nodeType":"YulIdentifier","src":"1279:2:28"},"nativeSrc":"1279:65:28","nodeType":"YulFunctionCall","src":"1279:65:28"}],"functionName":{"name":"iszero","nativeSrc":"1272:6:28","nodeType":"YulIdentifier","src":"1272:6:28"},"nativeSrc":"1272:73:28","nodeType":"YulFunctionCall","src":"1272:73:28"},"nativeSrc":"1269:93:28","nodeType":"YulIf","src":"1269:93:28"}]},"name":"abi_decode_address","nativeSrc":"1172:196:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1200:6:28","nodeType":"YulTypedName","src":"1200:6:28","type":""}],"returnVariables":[{"name":"value","nativeSrc":"1211:5:28","nodeType":"YulTypedName","src":"1211:5:28","type":""}],"src":"1172:196:28"},{"body":{"nativeSrc":"1546:544:28","nodeType":"YulBlock","src":"1546:544:28","statements":[{"body":{"nativeSrc":"1593:16:28","nodeType":"YulBlock","src":"1593:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1602:1:28","nodeType":"YulLiteral","src":"1602:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1605:1:28","nodeType":"YulLiteral","src":"1605:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1595:6:28","nodeType":"YulIdentifier","src":"1595:6:28"},"nativeSrc":"1595:12:28","nodeType":"YulFunctionCall","src":"1595:12:28"},"nativeSrc":"1595:12:28","nodeType":"YulExpressionStatement","src":"1595:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1567:7:28","nodeType":"YulIdentifier","src":"1567:7:28"},{"name":"headStart","nativeSrc":"1576:9:28","nodeType":"YulIdentifier","src":"1576:9:28"}],"functionName":{"name":"sub","nativeSrc":"1563:3:28","nodeType":"YulIdentifier","src":"1563:3:28"},"nativeSrc":"1563:23:28","nodeType":"YulFunctionCall","src":"1563:23:28"},{"kind":"number","nativeSrc":"1588:3:28","nodeType":"YulLiteral","src":"1588:3:28","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1559:3:28","nodeType":"YulIdentifier","src":"1559:3:28"},"nativeSrc":"1559:33:28","nodeType":"YulFunctionCall","src":"1559:33:28"},"nativeSrc":"1556:53:28","nodeType":"YulIf","src":"1556:53:28"},{"nativeSrc":"1618:33:28","nodeType":"YulAssignment","src":"1618:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"1641:9:28","nodeType":"YulIdentifier","src":"1641:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"1628:12:28","nodeType":"YulIdentifier","src":"1628:12:28"},"nativeSrc":"1628:23:28","nodeType":"YulFunctionCall","src":"1628:23:28"},"variableNames":[{"name":"value0","nativeSrc":"1618:6:28","nodeType":"YulIdentifier","src":"1618:6:28"}]},{"nativeSrc":"1660:46:28","nodeType":"YulVariableDeclaration","src":"1660:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1691:9:28","nodeType":"YulIdentifier","src":"1691:9:28"},{"kind":"number","nativeSrc":"1702:2:28","nodeType":"YulLiteral","src":"1702:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1687:3:28","nodeType":"YulIdentifier","src":"1687:3:28"},"nativeSrc":"1687:18:28","nodeType":"YulFunctionCall","src":"1687:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"1674:12:28","nodeType":"YulIdentifier","src":"1674:12:28"},"nativeSrc":"1674:32:28","nodeType":"YulFunctionCall","src":"1674:32:28"},"variables":[{"name":"offset","nativeSrc":"1664:6:28","nodeType":"YulTypedName","src":"1664:6:28","type":""}]},{"body":{"nativeSrc":"1749:16:28","nodeType":"YulBlock","src":"1749:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1758:1:28","nodeType":"YulLiteral","src":"1758:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"1761:1:28","nodeType":"YulLiteral","src":"1761:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1751:6:28","nodeType":"YulIdentifier","src":"1751:6:28"},"nativeSrc":"1751:12:28","nodeType":"YulFunctionCall","src":"1751:12:28"},"nativeSrc":"1751:12:28","nodeType":"YulExpressionStatement","src":"1751:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1721:6:28","nodeType":"YulIdentifier","src":"1721:6:28"},{"kind":"number","nativeSrc":"1729:18:28","nodeType":"YulLiteral","src":"1729:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1718:2:28","nodeType":"YulIdentifier","src":"1718:2:28"},"nativeSrc":"1718:30:28","nodeType":"YulFunctionCall","src":"1718:30:28"},"nativeSrc":"1715:50:28","nodeType":"YulIf","src":"1715:50:28"},{"nativeSrc":"1774:96:28","nodeType":"YulVariableDeclaration","src":"1774:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1842:9:28","nodeType":"YulIdentifier","src":"1842:9:28"},{"name":"offset","nativeSrc":"1853:6:28","nodeType":"YulIdentifier","src":"1853:6:28"}],"functionName":{"name":"add","nativeSrc":"1838:3:28","nodeType":"YulIdentifier","src":"1838:3:28"},"nativeSrc":"1838:22:28","nodeType":"YulFunctionCall","src":"1838:22:28"},{"name":"dataEnd","nativeSrc":"1862:7:28","nodeType":"YulIdentifier","src":"1862:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"1800:37:28","nodeType":"YulIdentifier","src":"1800:37:28"},"nativeSrc":"1800:70:28","nodeType":"YulFunctionCall","src":"1800:70:28"},"variables":[{"name":"value1_1","nativeSrc":"1778:8:28","nodeType":"YulTypedName","src":"1778:8:28","type":""},{"name":"value2_1","nativeSrc":"1788:8:28","nodeType":"YulTypedName","src":"1788:8:28","type":""}]},{"nativeSrc":"1879:18:28","nodeType":"YulAssignment","src":"1879:18:28","value":{"name":"value1_1","nativeSrc":"1889:8:28","nodeType":"YulIdentifier","src":"1889:8:28"},"variableNames":[{"name":"value1","nativeSrc":"1879:6:28","nodeType":"YulIdentifier","src":"1879:6:28"}]},{"nativeSrc":"1906:18:28","nodeType":"YulAssignment","src":"1906:18:28","value":{"name":"value2_1","nativeSrc":"1916:8:28","nodeType":"YulIdentifier","src":"1916:8:28"},"variableNames":[{"name":"value2","nativeSrc":"1906:6:28","nodeType":"YulIdentifier","src":"1906:6:28"}]},{"nativeSrc":"1933:48:28","nodeType":"YulAssignment","src":"1933:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1966:9:28","nodeType":"YulIdentifier","src":"1966:9:28"},{"kind":"number","nativeSrc":"1977:2:28","nodeType":"YulLiteral","src":"1977:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1962:3:28","nodeType":"YulIdentifier","src":"1962:3:28"},"nativeSrc":"1962:18:28","nodeType":"YulFunctionCall","src":"1962:18:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1943:18:28","nodeType":"YulIdentifier","src":"1943:18:28"},"nativeSrc":"1943:38:28","nodeType":"YulFunctionCall","src":"1943:38:28"},"variableNames":[{"name":"value3","nativeSrc":"1933:6:28","nodeType":"YulIdentifier","src":"1933:6:28"}]},{"nativeSrc":"1990:42:28","nodeType":"YulAssignment","src":"1990:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2017:9:28","nodeType":"YulIdentifier","src":"2017:9:28"},{"kind":"number","nativeSrc":"2028:2:28","nodeType":"YulLiteral","src":"2028:2:28","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2013:3:28","nodeType":"YulIdentifier","src":"2013:3:28"},"nativeSrc":"2013:18:28","nodeType":"YulFunctionCall","src":"2013:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2000:12:28","nodeType":"YulIdentifier","src":"2000:12:28"},"nativeSrc":"2000:32:28","nodeType":"YulFunctionCall","src":"2000:32:28"},"variableNames":[{"name":"value4","nativeSrc":"1990:6:28","nodeType":"YulIdentifier","src":"1990:6:28"}]},{"nativeSrc":"2041:43:28","nodeType":"YulAssignment","src":"2041:43:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2068:9:28","nodeType":"YulIdentifier","src":"2068:9:28"},{"kind":"number","nativeSrc":"2079:3:28","nodeType":"YulLiteral","src":"2079:3:28","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2064:3:28","nodeType":"YulIdentifier","src":"2064:3:28"},"nativeSrc":"2064:19:28","nodeType":"YulFunctionCall","src":"2064:19:28"}],"functionName":{"name":"calldataload","nativeSrc":"2051:12:28","nodeType":"YulIdentifier","src":"2051:12:28"},"nativeSrc":"2051:33:28","nodeType":"YulFunctionCall","src":"2051:33:28"},"variableNames":[{"name":"value5","nativeSrc":"2041:6:28","nodeType":"YulIdentifier","src":"2041:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256","nativeSrc":"1373:717:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1472:9:28","nodeType":"YulTypedName","src":"1472:9:28","type":""},{"name":"dataEnd","nativeSrc":"1483:7:28","nodeType":"YulTypedName","src":"1483:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1495:6:28","nodeType":"YulTypedName","src":"1495:6:28","type":""},{"name":"value1","nativeSrc":"1503:6:28","nodeType":"YulTypedName","src":"1503:6:28","type":""},{"name":"value2","nativeSrc":"1511:6:28","nodeType":"YulTypedName","src":"1511:6:28","type":""},{"name":"value3","nativeSrc":"1519:6:28","nodeType":"YulTypedName","src":"1519:6:28","type":""},{"name":"value4","nativeSrc":"1527:6:28","nodeType":"YulTypedName","src":"1527:6:28","type":""},{"name":"value5","nativeSrc":"1535:6:28","nodeType":"YulTypedName","src":"1535:6:28","type":""}],"src":"1373:717:28"},{"body":{"nativeSrc":"2165:116:28","nodeType":"YulBlock","src":"2165:116:28","statements":[{"body":{"nativeSrc":"2211:16:28","nodeType":"YulBlock","src":"2211:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2220:1:28","nodeType":"YulLiteral","src":"2220:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2223:1:28","nodeType":"YulLiteral","src":"2223:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2213:6:28","nodeType":"YulIdentifier","src":"2213:6:28"},"nativeSrc":"2213:12:28","nodeType":"YulFunctionCall","src":"2213:12:28"},"nativeSrc":"2213:12:28","nodeType":"YulExpressionStatement","src":"2213:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2186:7:28","nodeType":"YulIdentifier","src":"2186:7:28"},{"name":"headStart","nativeSrc":"2195:9:28","nodeType":"YulIdentifier","src":"2195:9:28"}],"functionName":{"name":"sub","nativeSrc":"2182:3:28","nodeType":"YulIdentifier","src":"2182:3:28"},"nativeSrc":"2182:23:28","nodeType":"YulFunctionCall","src":"2182:23:28"},{"kind":"number","nativeSrc":"2207:2:28","nodeType":"YulLiteral","src":"2207:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2178:3:28","nodeType":"YulIdentifier","src":"2178:3:28"},"nativeSrc":"2178:32:28","nodeType":"YulFunctionCall","src":"2178:32:28"},"nativeSrc":"2175:52:28","nodeType":"YulIf","src":"2175:52:28"},{"nativeSrc":"2236:39:28","nodeType":"YulAssignment","src":"2236:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2265:9:28","nodeType":"YulIdentifier","src":"2265:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2246:18:28","nodeType":"YulIdentifier","src":"2246:18:28"},"nativeSrc":"2246:29:28","nodeType":"YulFunctionCall","src":"2246:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2236:6:28","nodeType":"YulIdentifier","src":"2236:6:28"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2095:186:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2131:9:28","nodeType":"YulTypedName","src":"2131:9:28","type":""},{"name":"dataEnd","nativeSrc":"2142:7:28","nodeType":"YulTypedName","src":"2142:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2154:6:28","nodeType":"YulTypedName","src":"2154:6:28","type":""}],"src":"2095:186:28"},{"body":{"nativeSrc":"2356:110:28","nodeType":"YulBlock","src":"2356:110:28","statements":[{"body":{"nativeSrc":"2402:16:28","nodeType":"YulBlock","src":"2402:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2411:1:28","nodeType":"YulLiteral","src":"2411:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2414:1:28","nodeType":"YulLiteral","src":"2414:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2404:6:28","nodeType":"YulIdentifier","src":"2404:6:28"},"nativeSrc":"2404:12:28","nodeType":"YulFunctionCall","src":"2404:12:28"},"nativeSrc":"2404:12:28","nodeType":"YulExpressionStatement","src":"2404:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2377:7:28","nodeType":"YulIdentifier","src":"2377:7:28"},{"name":"headStart","nativeSrc":"2386:9:28","nodeType":"YulIdentifier","src":"2386:9:28"}],"functionName":{"name":"sub","nativeSrc":"2373:3:28","nodeType":"YulIdentifier","src":"2373:3:28"},"nativeSrc":"2373:23:28","nodeType":"YulFunctionCall","src":"2373:23:28"},{"kind":"number","nativeSrc":"2398:2:28","nodeType":"YulLiteral","src":"2398:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2369:3:28","nodeType":"YulIdentifier","src":"2369:3:28"},"nativeSrc":"2369:32:28","nodeType":"YulFunctionCall","src":"2369:32:28"},"nativeSrc":"2366:52:28","nodeType":"YulIf","src":"2366:52:28"},{"nativeSrc":"2427:33:28","nodeType":"YulAssignment","src":"2427:33:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2450:9:28","nodeType":"YulIdentifier","src":"2450:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"2437:12:28","nodeType":"YulIdentifier","src":"2437:12:28"},"nativeSrc":"2437:23:28","nodeType":"YulFunctionCall","src":"2437:23:28"},"variableNames":[{"name":"value0","nativeSrc":"2427:6:28","nodeType":"YulIdentifier","src":"2427:6:28"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2286:180:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2322:9:28","nodeType":"YulTypedName","src":"2322:9:28","type":""},{"name":"dataEnd","nativeSrc":"2333:7:28","nodeType":"YulTypedName","src":"2333:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2345:6:28","nodeType":"YulTypedName","src":"2345:6:28","type":""}],"src":"2286:180:28"},{"body":{"nativeSrc":"2558:167:28","nodeType":"YulBlock","src":"2558:167:28","statements":[{"body":{"nativeSrc":"2604:16:28","nodeType":"YulBlock","src":"2604:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2613:1:28","nodeType":"YulLiteral","src":"2613:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"2616:1:28","nodeType":"YulLiteral","src":"2616:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2606:6:28","nodeType":"YulIdentifier","src":"2606:6:28"},"nativeSrc":"2606:12:28","nodeType":"YulFunctionCall","src":"2606:12:28"},"nativeSrc":"2606:12:28","nodeType":"YulExpressionStatement","src":"2606:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2579:7:28","nodeType":"YulIdentifier","src":"2579:7:28"},{"name":"headStart","nativeSrc":"2588:9:28","nodeType":"YulIdentifier","src":"2588:9:28"}],"functionName":{"name":"sub","nativeSrc":"2575:3:28","nodeType":"YulIdentifier","src":"2575:3:28"},"nativeSrc":"2575:23:28","nodeType":"YulFunctionCall","src":"2575:23:28"},{"kind":"number","nativeSrc":"2600:2:28","nodeType":"YulLiteral","src":"2600:2:28","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2571:3:28","nodeType":"YulIdentifier","src":"2571:3:28"},"nativeSrc":"2571:32:28","nodeType":"YulFunctionCall","src":"2571:32:28"},"nativeSrc":"2568:52:28","nodeType":"YulIf","src":"2568:52:28"},{"nativeSrc":"2629:39:28","nodeType":"YulAssignment","src":"2629:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2658:9:28","nodeType":"YulIdentifier","src":"2658:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2639:18:28","nodeType":"YulIdentifier","src":"2639:18:28"},"nativeSrc":"2639:29:28","nodeType":"YulFunctionCall","src":"2639:29:28"},"variableNames":[{"name":"value0","nativeSrc":"2629:6:28","nodeType":"YulIdentifier","src":"2629:6:28"}]},{"nativeSrc":"2677:42:28","nodeType":"YulAssignment","src":"2677:42:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2704:9:28","nodeType":"YulIdentifier","src":"2704:9:28"},{"kind":"number","nativeSrc":"2715:2:28","nodeType":"YulLiteral","src":"2715:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2700:3:28","nodeType":"YulIdentifier","src":"2700:3:28"},"nativeSrc":"2700:18:28","nodeType":"YulFunctionCall","src":"2700:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"2687:12:28","nodeType":"YulIdentifier","src":"2687:12:28"},"nativeSrc":"2687:32:28","nodeType":"YulFunctionCall","src":"2687:32:28"},"variableNames":[{"name":"value1","nativeSrc":"2677:6:28","nodeType":"YulIdentifier","src":"2677:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2471:254:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2516:9:28","nodeType":"YulTypedName","src":"2516:9:28","type":""},{"name":"dataEnd","nativeSrc":"2527:7:28","nodeType":"YulTypedName","src":"2527:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2539:6:28","nodeType":"YulTypedName","src":"2539:6:28","type":""},{"name":"value1","nativeSrc":"2547:6:28","nodeType":"YulTypedName","src":"2547:6:28","type":""}],"src":"2471:254:28"},{"body":{"nativeSrc":"2831:76:28","nodeType":"YulBlock","src":"2831:76:28","statements":[{"nativeSrc":"2841:26:28","nodeType":"YulAssignment","src":"2841:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"2853:9:28","nodeType":"YulIdentifier","src":"2853:9:28"},{"kind":"number","nativeSrc":"2864:2:28","nodeType":"YulLiteral","src":"2864:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2849:3:28","nodeType":"YulIdentifier","src":"2849:3:28"},"nativeSrc":"2849:18:28","nodeType":"YulFunctionCall","src":"2849:18:28"},"variableNames":[{"name":"tail","nativeSrc":"2841:4:28","nodeType":"YulIdentifier","src":"2841:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2883:9:28","nodeType":"YulIdentifier","src":"2883:9:28"},{"name":"value0","nativeSrc":"2894:6:28","nodeType":"YulIdentifier","src":"2894:6:28"}],"functionName":{"name":"mstore","nativeSrc":"2876:6:28","nodeType":"YulIdentifier","src":"2876:6:28"},"nativeSrc":"2876:25:28","nodeType":"YulFunctionCall","src":"2876:25:28"},"nativeSrc":"2876:25:28","nodeType":"YulExpressionStatement","src":"2876:25:28"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"2730:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2800:9:28","nodeType":"YulTypedName","src":"2800:9:28","type":""},{"name":"value0","nativeSrc":"2811:6:28","nodeType":"YulTypedName","src":"2811:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2822:4:28","nodeType":"YulTypedName","src":"2822:4:28","type":""}],"src":"2730:177:28"},{"body":{"nativeSrc":"3013:125:28","nodeType":"YulBlock","src":"3013:125:28","statements":[{"nativeSrc":"3023:26:28","nodeType":"YulAssignment","src":"3023:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3035:9:28","nodeType":"YulIdentifier","src":"3035:9:28"},{"kind":"number","nativeSrc":"3046:2:28","nodeType":"YulLiteral","src":"3046:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3031:3:28","nodeType":"YulIdentifier","src":"3031:3:28"},"nativeSrc":"3031:18:28","nodeType":"YulFunctionCall","src":"3031:18:28"},"variableNames":[{"name":"tail","nativeSrc":"3023:4:28","nodeType":"YulIdentifier","src":"3023:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3065:9:28","nodeType":"YulIdentifier","src":"3065:9:28"},{"arguments":[{"name":"value0","nativeSrc":"3080:6:28","nodeType":"YulIdentifier","src":"3080:6:28"},{"kind":"number","nativeSrc":"3088:42:28","nodeType":"YulLiteral","src":"3088:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3076:3:28","nodeType":"YulIdentifier","src":"3076:3:28"},"nativeSrc":"3076:55:28","nodeType":"YulFunctionCall","src":"3076:55:28"}],"functionName":{"name":"mstore","nativeSrc":"3058:6:28","nodeType":"YulIdentifier","src":"3058:6:28"},"nativeSrc":"3058:74:28","nodeType":"YulFunctionCall","src":"3058:74:28"},"nativeSrc":"3058:74:28","nodeType":"YulExpressionStatement","src":"3058:74:28"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2912:226:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2982:9:28","nodeType":"YulTypedName","src":"2982:9:28","type":""},{"name":"value0","nativeSrc":"2993:6:28","nodeType":"YulTypedName","src":"2993:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3004:4:28","nodeType":"YulTypedName","src":"3004:4:28","type":""}],"src":"2912:226:28"},{"body":{"nativeSrc":"3406:879:28","nodeType":"YulBlock","src":"3406:879:28","statements":[{"body":{"nativeSrc":"3452:16:28","nodeType":"YulBlock","src":"3452:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3461:1:28","nodeType":"YulLiteral","src":"3461:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3464:1:28","nodeType":"YulLiteral","src":"3464:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3454:6:28","nodeType":"YulIdentifier","src":"3454:6:28"},"nativeSrc":"3454:12:28","nodeType":"YulFunctionCall","src":"3454:12:28"},"nativeSrc":"3454:12:28","nodeType":"YulExpressionStatement","src":"3454:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3427:7:28","nodeType":"YulIdentifier","src":"3427:7:28"},{"name":"headStart","nativeSrc":"3436:9:28","nodeType":"YulIdentifier","src":"3436:9:28"}],"functionName":{"name":"sub","nativeSrc":"3423:3:28","nodeType":"YulIdentifier","src":"3423:3:28"},"nativeSrc":"3423:23:28","nodeType":"YulFunctionCall","src":"3423:23:28"},{"kind":"number","nativeSrc":"3448:2:28","nodeType":"YulLiteral","src":"3448:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"3419:3:28","nodeType":"YulIdentifier","src":"3419:3:28"},"nativeSrc":"3419:32:28","nodeType":"YulFunctionCall","src":"3419:32:28"},"nativeSrc":"3416:52:28","nodeType":"YulIf","src":"3416:52:28"},{"nativeSrc":"3477:37:28","nodeType":"YulVariableDeclaration","src":"3477:37:28","value":{"arguments":[{"name":"headStart","nativeSrc":"3504:9:28","nodeType":"YulIdentifier","src":"3504:9:28"}],"functionName":{"name":"calldataload","nativeSrc":"3491:12:28","nodeType":"YulIdentifier","src":"3491:12:28"},"nativeSrc":"3491:23:28","nodeType":"YulFunctionCall","src":"3491:23:28"},"variables":[{"name":"offset","nativeSrc":"3481:6:28","nodeType":"YulTypedName","src":"3481:6:28","type":""}]},{"nativeSrc":"3523:28:28","nodeType":"YulVariableDeclaration","src":"3523:28:28","value":{"kind":"number","nativeSrc":"3533:18:28","nodeType":"YulLiteral","src":"3533:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3527:2:28","nodeType":"YulTypedName","src":"3527:2:28","type":""}]},{"body":{"nativeSrc":"3578:16:28","nodeType":"YulBlock","src":"3578:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3587:1:28","nodeType":"YulLiteral","src":"3587:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3590:1:28","nodeType":"YulLiteral","src":"3590:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3580:6:28","nodeType":"YulIdentifier","src":"3580:6:28"},"nativeSrc":"3580:12:28","nodeType":"YulFunctionCall","src":"3580:12:28"},"nativeSrc":"3580:12:28","nodeType":"YulExpressionStatement","src":"3580:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3566:6:28","nodeType":"YulIdentifier","src":"3566:6:28"},{"name":"_1","nativeSrc":"3574:2:28","nodeType":"YulIdentifier","src":"3574:2:28"}],"functionName":{"name":"gt","nativeSrc":"3563:2:28","nodeType":"YulIdentifier","src":"3563:2:28"},"nativeSrc":"3563:14:28","nodeType":"YulFunctionCall","src":"3563:14:28"},"nativeSrc":"3560:34:28","nodeType":"YulIf","src":"3560:34:28"},{"nativeSrc":"3603:96:28","nodeType":"YulVariableDeclaration","src":"3603:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3671:9:28","nodeType":"YulIdentifier","src":"3671:9:28"},{"name":"offset","nativeSrc":"3682:6:28","nodeType":"YulIdentifier","src":"3682:6:28"}],"functionName":{"name":"add","nativeSrc":"3667:3:28","nodeType":"YulIdentifier","src":"3667:3:28"},"nativeSrc":"3667:22:28","nodeType":"YulFunctionCall","src":"3667:22:28"},{"name":"dataEnd","nativeSrc":"3691:7:28","nodeType":"YulIdentifier","src":"3691:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"3629:37:28","nodeType":"YulIdentifier","src":"3629:37:28"},"nativeSrc":"3629:70:28","nodeType":"YulFunctionCall","src":"3629:70:28"},"variables":[{"name":"value0_1","nativeSrc":"3607:8:28","nodeType":"YulTypedName","src":"3607:8:28","type":""},{"name":"value1_1","nativeSrc":"3617:8:28","nodeType":"YulTypedName","src":"3617:8:28","type":""}]},{"nativeSrc":"3708:18:28","nodeType":"YulAssignment","src":"3708:18:28","value":{"name":"value0_1","nativeSrc":"3718:8:28","nodeType":"YulIdentifier","src":"3718:8:28"},"variableNames":[{"name":"value0","nativeSrc":"3708:6:28","nodeType":"YulIdentifier","src":"3708:6:28"}]},{"nativeSrc":"3735:18:28","nodeType":"YulAssignment","src":"3735:18:28","value":{"name":"value1_1","nativeSrc":"3745:8:28","nodeType":"YulIdentifier","src":"3745:8:28"},"variableNames":[{"name":"value1","nativeSrc":"3735:6:28","nodeType":"YulIdentifier","src":"3735:6:28"}]},{"nativeSrc":"3762:48:28","nodeType":"YulVariableDeclaration","src":"3762:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3795:9:28","nodeType":"YulIdentifier","src":"3795:9:28"},{"kind":"number","nativeSrc":"3806:2:28","nodeType":"YulLiteral","src":"3806:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3791:3:28","nodeType":"YulIdentifier","src":"3791:3:28"},"nativeSrc":"3791:18:28","nodeType":"YulFunctionCall","src":"3791:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"3778:12:28","nodeType":"YulIdentifier","src":"3778:12:28"},"nativeSrc":"3778:32:28","nodeType":"YulFunctionCall","src":"3778:32:28"},"variables":[{"name":"offset_1","nativeSrc":"3766:8:28","nodeType":"YulTypedName","src":"3766:8:28","type":""}]},{"body":{"nativeSrc":"3839:16:28","nodeType":"YulBlock","src":"3839:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3848:1:28","nodeType":"YulLiteral","src":"3848:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"3851:1:28","nodeType":"YulLiteral","src":"3851:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3841:6:28","nodeType":"YulIdentifier","src":"3841:6:28"},"nativeSrc":"3841:12:28","nodeType":"YulFunctionCall","src":"3841:12:28"},"nativeSrc":"3841:12:28","nodeType":"YulExpressionStatement","src":"3841:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3825:8:28","nodeType":"YulIdentifier","src":"3825:8:28"},{"name":"_1","nativeSrc":"3835:2:28","nodeType":"YulIdentifier","src":"3835:2:28"}],"functionName":{"name":"gt","nativeSrc":"3822:2:28","nodeType":"YulIdentifier","src":"3822:2:28"},"nativeSrc":"3822:16:28","nodeType":"YulFunctionCall","src":"3822:16:28"},"nativeSrc":"3819:36:28","nodeType":"YulIf","src":"3819:36:28"},{"nativeSrc":"3864:98:28","nodeType":"YulVariableDeclaration","src":"3864:98:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3932:9:28","nodeType":"YulIdentifier","src":"3932:9:28"},{"name":"offset_1","nativeSrc":"3943:8:28","nodeType":"YulIdentifier","src":"3943:8:28"}],"functionName":{"name":"add","nativeSrc":"3928:3:28","nodeType":"YulIdentifier","src":"3928:3:28"},"nativeSrc":"3928:24:28","nodeType":"YulFunctionCall","src":"3928:24:28"},{"name":"dataEnd","nativeSrc":"3954:7:28","nodeType":"YulIdentifier","src":"3954:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"3890:37:28","nodeType":"YulIdentifier","src":"3890:37:28"},"nativeSrc":"3890:72:28","nodeType":"YulFunctionCall","src":"3890:72:28"},"variables":[{"name":"value2_1","nativeSrc":"3868:8:28","nodeType":"YulTypedName","src":"3868:8:28","type":""},{"name":"value3_1","nativeSrc":"3878:8:28","nodeType":"YulTypedName","src":"3878:8:28","type":""}]},{"nativeSrc":"3971:18:28","nodeType":"YulAssignment","src":"3971:18:28","value":{"name":"value2_1","nativeSrc":"3981:8:28","nodeType":"YulIdentifier","src":"3981:8:28"},"variableNames":[{"name":"value2","nativeSrc":"3971:6:28","nodeType":"YulIdentifier","src":"3971:6:28"}]},{"nativeSrc":"3998:18:28","nodeType":"YulAssignment","src":"3998:18:28","value":{"name":"value3_1","nativeSrc":"4008:8:28","nodeType":"YulIdentifier","src":"4008:8:28"},"variableNames":[{"name":"value3","nativeSrc":"3998:6:28","nodeType":"YulIdentifier","src":"3998:6:28"}]},{"nativeSrc":"4025:48:28","nodeType":"YulVariableDeclaration","src":"4025:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4058:9:28","nodeType":"YulIdentifier","src":"4058:9:28"},{"kind":"number","nativeSrc":"4069:2:28","nodeType":"YulLiteral","src":"4069:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4054:3:28","nodeType":"YulIdentifier","src":"4054:3:28"},"nativeSrc":"4054:18:28","nodeType":"YulFunctionCall","src":"4054:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"4041:12:28","nodeType":"YulIdentifier","src":"4041:12:28"},"nativeSrc":"4041:32:28","nodeType":"YulFunctionCall","src":"4041:32:28"},"variables":[{"name":"offset_2","nativeSrc":"4029:8:28","nodeType":"YulTypedName","src":"4029:8:28","type":""}]},{"body":{"nativeSrc":"4102:16:28","nodeType":"YulBlock","src":"4102:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4111:1:28","nodeType":"YulLiteral","src":"4111:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4114:1:28","nodeType":"YulLiteral","src":"4114:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4104:6:28","nodeType":"YulIdentifier","src":"4104:6:28"},"nativeSrc":"4104:12:28","nodeType":"YulFunctionCall","src":"4104:12:28"},"nativeSrc":"4104:12:28","nodeType":"YulExpressionStatement","src":"4104:12:28"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4088:8:28","nodeType":"YulIdentifier","src":"4088:8:28"},{"name":"_1","nativeSrc":"4098:2:28","nodeType":"YulIdentifier","src":"4098:2:28"}],"functionName":{"name":"gt","nativeSrc":"4085:2:28","nodeType":"YulIdentifier","src":"4085:2:28"},"nativeSrc":"4085:16:28","nodeType":"YulFunctionCall","src":"4085:16:28"},"nativeSrc":"4082:36:28","nodeType":"YulIf","src":"4082:36:28"},{"nativeSrc":"4127:98:28","nodeType":"YulVariableDeclaration","src":"4127:98:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4195:9:28","nodeType":"YulIdentifier","src":"4195:9:28"},{"name":"offset_2","nativeSrc":"4206:8:28","nodeType":"YulIdentifier","src":"4206:8:28"}],"functionName":{"name":"add","nativeSrc":"4191:3:28","nodeType":"YulIdentifier","src":"4191:3:28"},"nativeSrc":"4191:24:28","nodeType":"YulFunctionCall","src":"4191:24:28"},{"name":"dataEnd","nativeSrc":"4217:7:28","nodeType":"YulIdentifier","src":"4217:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"4153:37:28","nodeType":"YulIdentifier","src":"4153:37:28"},"nativeSrc":"4153:72:28","nodeType":"YulFunctionCall","src":"4153:72:28"},"variables":[{"name":"value4_1","nativeSrc":"4131:8:28","nodeType":"YulTypedName","src":"4131:8:28","type":""},{"name":"value5_1","nativeSrc":"4141:8:28","nodeType":"YulTypedName","src":"4141:8:28","type":""}]},{"nativeSrc":"4234:18:28","nodeType":"YulAssignment","src":"4234:18:28","value":{"name":"value4_1","nativeSrc":"4244:8:28","nodeType":"YulIdentifier","src":"4244:8:28"},"variableNames":[{"name":"value4","nativeSrc":"4234:6:28","nodeType":"YulIdentifier","src":"4234:6:28"}]},{"nativeSrc":"4261:18:28","nodeType":"YulAssignment","src":"4261:18:28","value":{"name":"value5_1","nativeSrc":"4271:8:28","nodeType":"YulIdentifier","src":"4271:8:28"},"variableNames":[{"name":"value5","nativeSrc":"4261:6:28","nodeType":"YulIdentifier","src":"4261:6:28"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr","nativeSrc":"3143:1142:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3332:9:28","nodeType":"YulTypedName","src":"3332:9:28","type":""},{"name":"dataEnd","nativeSrc":"3343:7:28","nodeType":"YulTypedName","src":"3343:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3355:6:28","nodeType":"YulTypedName","src":"3355:6:28","type":""},{"name":"value1","nativeSrc":"3363:6:28","nodeType":"YulTypedName","src":"3363:6:28","type":""},{"name":"value2","nativeSrc":"3371:6:28","nodeType":"YulTypedName","src":"3371:6:28","type":""},{"name":"value3","nativeSrc":"3379:6:28","nodeType":"YulTypedName","src":"3379:6:28","type":""},{"name":"value4","nativeSrc":"3387:6:28","nodeType":"YulTypedName","src":"3387:6:28","type":""},{"name":"value5","nativeSrc":"3395:6:28","nodeType":"YulTypedName","src":"3395:6:28","type":""}],"src":"3143:1142:28"},{"body":{"nativeSrc":"4464:673:28","nodeType":"YulBlock","src":"4464:673:28","statements":[{"body":{"nativeSrc":"4510:16:28","nodeType":"YulBlock","src":"4510:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4519:1:28","nodeType":"YulLiteral","src":"4519:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4522:1:28","nodeType":"YulLiteral","src":"4522:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4512:6:28","nodeType":"YulIdentifier","src":"4512:6:28"},"nativeSrc":"4512:12:28","nodeType":"YulFunctionCall","src":"4512:12:28"},"nativeSrc":"4512:12:28","nodeType":"YulExpressionStatement","src":"4512:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4485:7:28","nodeType":"YulIdentifier","src":"4485:7:28"},{"name":"headStart","nativeSrc":"4494:9:28","nodeType":"YulIdentifier","src":"4494:9:28"}],"functionName":{"name":"sub","nativeSrc":"4481:3:28","nodeType":"YulIdentifier","src":"4481:3:28"},"nativeSrc":"4481:23:28","nodeType":"YulFunctionCall","src":"4481:23:28"},{"kind":"number","nativeSrc":"4506:2:28","nodeType":"YulLiteral","src":"4506:2:28","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4477:3:28","nodeType":"YulIdentifier","src":"4477:3:28"},"nativeSrc":"4477:32:28","nodeType":"YulFunctionCall","src":"4477:32:28"},"nativeSrc":"4474:52:28","nodeType":"YulIf","src":"4474:52:28"},{"nativeSrc":"4535:39:28","nodeType":"YulAssignment","src":"4535:39:28","value":{"arguments":[{"name":"headStart","nativeSrc":"4564:9:28","nodeType":"YulIdentifier","src":"4564:9:28"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4545:18:28","nodeType":"YulIdentifier","src":"4545:18:28"},"nativeSrc":"4545:29:28","nodeType":"YulFunctionCall","src":"4545:29:28"},"variableNames":[{"name":"value0","nativeSrc":"4535:6:28","nodeType":"YulIdentifier","src":"4535:6:28"}]},{"nativeSrc":"4583:46:28","nodeType":"YulVariableDeclaration","src":"4583:46:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4614:9:28","nodeType":"YulIdentifier","src":"4614:9:28"},{"kind":"number","nativeSrc":"4625:2:28","nodeType":"YulLiteral","src":"4625:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4610:3:28","nodeType":"YulIdentifier","src":"4610:3:28"},"nativeSrc":"4610:18:28","nodeType":"YulFunctionCall","src":"4610:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"4597:12:28","nodeType":"YulIdentifier","src":"4597:12:28"},"nativeSrc":"4597:32:28","nodeType":"YulFunctionCall","src":"4597:32:28"},"variables":[{"name":"offset","nativeSrc":"4587:6:28","nodeType":"YulTypedName","src":"4587:6:28","type":""}]},{"nativeSrc":"4638:28:28","nodeType":"YulVariableDeclaration","src":"4638:28:28","value":{"kind":"number","nativeSrc":"4648:18:28","nodeType":"YulLiteral","src":"4648:18:28","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4642:2:28","nodeType":"YulTypedName","src":"4642:2:28","type":""}]},{"body":{"nativeSrc":"4693:16:28","nodeType":"YulBlock","src":"4693:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4702:1:28","nodeType":"YulLiteral","src":"4702:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4705:1:28","nodeType":"YulLiteral","src":"4705:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4695:6:28","nodeType":"YulIdentifier","src":"4695:6:28"},"nativeSrc":"4695:12:28","nodeType":"YulFunctionCall","src":"4695:12:28"},"nativeSrc":"4695:12:28","nodeType":"YulExpressionStatement","src":"4695:12:28"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4681:6:28","nodeType":"YulIdentifier","src":"4681:6:28"},{"name":"_1","nativeSrc":"4689:2:28","nodeType":"YulIdentifier","src":"4689:2:28"}],"functionName":{"name":"gt","nativeSrc":"4678:2:28","nodeType":"YulIdentifier","src":"4678:2:28"},"nativeSrc":"4678:14:28","nodeType":"YulFunctionCall","src":"4678:14:28"},"nativeSrc":"4675:34:28","nodeType":"YulIf","src":"4675:34:28"},{"nativeSrc":"4718:96:28","nodeType":"YulVariableDeclaration","src":"4718:96:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4786:9:28","nodeType":"YulIdentifier","src":"4786:9:28"},{"name":"offset","nativeSrc":"4797:6:28","nodeType":"YulIdentifier","src":"4797:6:28"}],"functionName":{"name":"add","nativeSrc":"4782:3:28","nodeType":"YulIdentifier","src":"4782:3:28"},"nativeSrc":"4782:22:28","nodeType":"YulFunctionCall","src":"4782:22:28"},{"name":"dataEnd","nativeSrc":"4806:7:28","nodeType":"YulIdentifier","src":"4806:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"4744:37:28","nodeType":"YulIdentifier","src":"4744:37:28"},"nativeSrc":"4744:70:28","nodeType":"YulFunctionCall","src":"4744:70:28"},"variables":[{"name":"value1_1","nativeSrc":"4722:8:28","nodeType":"YulTypedName","src":"4722:8:28","type":""},{"name":"value2_1","nativeSrc":"4732:8:28","nodeType":"YulTypedName","src":"4732:8:28","type":""}]},{"nativeSrc":"4823:18:28","nodeType":"YulAssignment","src":"4823:18:28","value":{"name":"value1_1","nativeSrc":"4833:8:28","nodeType":"YulIdentifier","src":"4833:8:28"},"variableNames":[{"name":"value1","nativeSrc":"4823:6:28","nodeType":"YulIdentifier","src":"4823:6:28"}]},{"nativeSrc":"4850:18:28","nodeType":"YulAssignment","src":"4850:18:28","value":{"name":"value2_1","nativeSrc":"4860:8:28","nodeType":"YulIdentifier","src":"4860:8:28"},"variableNames":[{"name":"value2","nativeSrc":"4850:6:28","nodeType":"YulIdentifier","src":"4850:6:28"}]},{"nativeSrc":"4877:48:28","nodeType":"YulVariableDeclaration","src":"4877:48:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4910:9:28","nodeType":"YulIdentifier","src":"4910:9:28"},{"kind":"number","nativeSrc":"4921:2:28","nodeType":"YulLiteral","src":"4921:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4906:3:28","nodeType":"YulIdentifier","src":"4906:3:28"},"nativeSrc":"4906:18:28","nodeType":"YulFunctionCall","src":"4906:18:28"}],"functionName":{"name":"calldataload","nativeSrc":"4893:12:28","nodeType":"YulIdentifier","src":"4893:12:28"},"nativeSrc":"4893:32:28","nodeType":"YulFunctionCall","src":"4893:32:28"},"variables":[{"name":"offset_1","nativeSrc":"4881:8:28","nodeType":"YulTypedName","src":"4881:8:28","type":""}]},{"body":{"nativeSrc":"4954:16:28","nodeType":"YulBlock","src":"4954:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4963:1:28","nodeType":"YulLiteral","src":"4963:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"4966:1:28","nodeType":"YulLiteral","src":"4966:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4956:6:28","nodeType":"YulIdentifier","src":"4956:6:28"},"nativeSrc":"4956:12:28","nodeType":"YulFunctionCall","src":"4956:12:28"},"nativeSrc":"4956:12:28","nodeType":"YulExpressionStatement","src":"4956:12:28"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4940:8:28","nodeType":"YulIdentifier","src":"4940:8:28"},{"name":"_1","nativeSrc":"4950:2:28","nodeType":"YulIdentifier","src":"4950:2:28"}],"functionName":{"name":"gt","nativeSrc":"4937:2:28","nodeType":"YulIdentifier","src":"4937:2:28"},"nativeSrc":"4937:16:28","nodeType":"YulFunctionCall","src":"4937:16:28"},"nativeSrc":"4934:36:28","nodeType":"YulIf","src":"4934:36:28"},{"nativeSrc":"4979:98:28","nodeType":"YulVariableDeclaration","src":"4979:98:28","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5047:9:28","nodeType":"YulIdentifier","src":"5047:9:28"},{"name":"offset_1","nativeSrc":"5058:8:28","nodeType":"YulIdentifier","src":"5058:8:28"}],"functionName":{"name":"add","nativeSrc":"5043:3:28","nodeType":"YulIdentifier","src":"5043:3:28"},"nativeSrc":"5043:24:28","nodeType":"YulFunctionCall","src":"5043:24:28"},{"name":"dataEnd","nativeSrc":"5069:7:28","nodeType":"YulIdentifier","src":"5069:7:28"}],"functionName":{"name":"abi_decode_array_bytes32_dyn_calldata","nativeSrc":"5005:37:28","nodeType":"YulIdentifier","src":"5005:37:28"},"nativeSrc":"5005:72:28","nodeType":"YulFunctionCall","src":"5005:72:28"},"variables":[{"name":"value3_1","nativeSrc":"4983:8:28","nodeType":"YulTypedName","src":"4983:8:28","type":""},{"name":"value4_1","nativeSrc":"4993:8:28","nodeType":"YulTypedName","src":"4993:8:28","type":""}]},{"nativeSrc":"5086:18:28","nodeType":"YulAssignment","src":"5086:18:28","value":{"name":"value3_1","nativeSrc":"5096:8:28","nodeType":"YulIdentifier","src":"5096:8:28"},"variableNames":[{"name":"value3","nativeSrc":"5086:6:28","nodeType":"YulIdentifier","src":"5086:6:28"}]},{"nativeSrc":"5113:18:28","nodeType":"YulAssignment","src":"5113:18:28","value":{"name":"value4_1","nativeSrc":"5123:8:28","nodeType":"YulIdentifier","src":"5123:8:28"},"variableNames":[{"name":"value4","nativeSrc":"5113:6:28","nodeType":"YulIdentifier","src":"5113:6:28"}]}]},"name":"abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"4290:847:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4398:9:28","nodeType":"YulTypedName","src":"4398:9:28","type":""},{"name":"dataEnd","nativeSrc":"4409:7:28","nodeType":"YulTypedName","src":"4409:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4421:6:28","nodeType":"YulTypedName","src":"4421:6:28","type":""},{"name":"value1","nativeSrc":"4429:6:28","nodeType":"YulTypedName","src":"4429:6:28","type":""},{"name":"value2","nativeSrc":"4437:6:28","nodeType":"YulTypedName","src":"4437:6:28","type":""},{"name":"value3","nativeSrc":"4445:6:28","nodeType":"YulTypedName","src":"4445:6:28","type":""},{"name":"value4","nativeSrc":"4453:6:28","nodeType":"YulTypedName","src":"4453:6:28","type":""}],"src":"4290:847:28"},{"body":{"nativeSrc":"5243:76:28","nodeType":"YulBlock","src":"5243:76:28","statements":[{"nativeSrc":"5253:26:28","nodeType":"YulAssignment","src":"5253:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5265:9:28","nodeType":"YulIdentifier","src":"5265:9:28"},{"kind":"number","nativeSrc":"5276:2:28","nodeType":"YulLiteral","src":"5276:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5261:3:28","nodeType":"YulIdentifier","src":"5261:3:28"},"nativeSrc":"5261:18:28","nodeType":"YulFunctionCall","src":"5261:18:28"},"variableNames":[{"name":"tail","nativeSrc":"5253:4:28","nodeType":"YulIdentifier","src":"5253:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5295:9:28","nodeType":"YulIdentifier","src":"5295:9:28"},{"name":"value0","nativeSrc":"5306:6:28","nodeType":"YulIdentifier","src":"5306:6:28"}],"functionName":{"name":"mstore","nativeSrc":"5288:6:28","nodeType":"YulIdentifier","src":"5288:6:28"},"nativeSrc":"5288:25:28","nodeType":"YulFunctionCall","src":"5288:25:28"},"nativeSrc":"5288:25:28","nodeType":"YulExpressionStatement","src":"5288:25:28"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"5142:177:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5212:9:28","nodeType":"YulTypedName","src":"5212:9:28","type":""},{"name":"value0","nativeSrc":"5223:6:28","nodeType":"YulTypedName","src":"5223:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5234:4:28","nodeType":"YulTypedName","src":"5234:4:28","type":""}],"src":"5142:177:28"},{"body":{"nativeSrc":"5499:219:28","nodeType":"YulBlock","src":"5499:219:28","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"5516:3:28","nodeType":"YulIdentifier","src":"5516:3:28"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"5529:2:28","nodeType":"YulLiteral","src":"5529:2:28","type":"","value":"96"},{"name":"value0","nativeSrc":"5533:6:28","nodeType":"YulIdentifier","src":"5533:6:28"}],"functionName":{"name":"shl","nativeSrc":"5525:3:28","nodeType":"YulIdentifier","src":"5525:3:28"},"nativeSrc":"5525:15:28","nodeType":"YulFunctionCall","src":"5525:15:28"},{"kind":"number","nativeSrc":"5542:66:28","nodeType":"YulLiteral","src":"5542:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"5521:3:28","nodeType":"YulIdentifier","src":"5521:3:28"},"nativeSrc":"5521:88:28","nodeType":"YulFunctionCall","src":"5521:88:28"}],"functionName":{"name":"mstore","nativeSrc":"5509:6:28","nodeType":"YulIdentifier","src":"5509:6:28"},"nativeSrc":"5509:101:28","nodeType":"YulFunctionCall","src":"5509:101:28"},"nativeSrc":"5509:101:28","nodeType":"YulExpressionStatement","src":"5509:101:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5630:3:28","nodeType":"YulIdentifier","src":"5630:3:28"},{"kind":"number","nativeSrc":"5635:2:28","nodeType":"YulLiteral","src":"5635:2:28","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"5626:3:28","nodeType":"YulIdentifier","src":"5626:3:28"},"nativeSrc":"5626:12:28","nodeType":"YulFunctionCall","src":"5626:12:28"},{"name":"value1","nativeSrc":"5640:6:28","nodeType":"YulIdentifier","src":"5640:6:28"}],"functionName":{"name":"mstore","nativeSrc":"5619:6:28","nodeType":"YulIdentifier","src":"5619:6:28"},"nativeSrc":"5619:28:28","nodeType":"YulFunctionCall","src":"5619:28:28"},"nativeSrc":"5619:28:28","nodeType":"YulExpressionStatement","src":"5619:28:28"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"5667:3:28","nodeType":"YulIdentifier","src":"5667:3:28"},{"kind":"number","nativeSrc":"5672:2:28","nodeType":"YulLiteral","src":"5672:2:28","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"5663:3:28","nodeType":"YulIdentifier","src":"5663:3:28"},"nativeSrc":"5663:12:28","nodeType":"YulFunctionCall","src":"5663:12:28"},{"name":"value2","nativeSrc":"5677:6:28","nodeType":"YulIdentifier","src":"5677:6:28"}],"functionName":{"name":"mstore","nativeSrc":"5656:6:28","nodeType":"YulIdentifier","src":"5656:6:28"},"nativeSrc":"5656:28:28","nodeType":"YulFunctionCall","src":"5656:28:28"},"nativeSrc":"5656:28:28","nodeType":"YulExpressionStatement","src":"5656:28:28"},{"nativeSrc":"5693:19:28","nodeType":"YulAssignment","src":"5693:19:28","value":{"arguments":[{"name":"pos","nativeSrc":"5704:3:28","nodeType":"YulIdentifier","src":"5704:3:28"},{"kind":"number","nativeSrc":"5709:2:28","nodeType":"YulLiteral","src":"5709:2:28","type":"","value":"84"}],"functionName":{"name":"add","nativeSrc":"5700:3:28","nodeType":"YulIdentifier","src":"5700:3:28"},"nativeSrc":"5700:12:28","nodeType":"YulFunctionCall","src":"5700:12:28"},"variableNames":[{"name":"end","nativeSrc":"5693:3:28","nodeType":"YulIdentifier","src":"5693:3:28"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"5324:394:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"5459:3:28","nodeType":"YulTypedName","src":"5459:3:28","type":""},{"name":"value2","nativeSrc":"5464:6:28","nodeType":"YulTypedName","src":"5464:6:28","type":""},{"name":"value1","nativeSrc":"5472:6:28","nodeType":"YulTypedName","src":"5472:6:28","type":""},{"name":"value0","nativeSrc":"5480:6:28","nodeType":"YulTypedName","src":"5480:6:28","type":""}],"returnVariables":[{"name":"end","nativeSrc":"5491:3:28","nodeType":"YulTypedName","src":"5491:3:28","type":""}],"src":"5324:394:28"},{"body":{"nativeSrc":"5852:168:28","nodeType":"YulBlock","src":"5852:168:28","statements":[{"nativeSrc":"5862:26:28","nodeType":"YulAssignment","src":"5862:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"5874:9:28","nodeType":"YulIdentifier","src":"5874:9:28"},{"kind":"number","nativeSrc":"5885:2:28","nodeType":"YulLiteral","src":"5885:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5870:3:28","nodeType":"YulIdentifier","src":"5870:3:28"},"nativeSrc":"5870:18:28","nodeType":"YulFunctionCall","src":"5870:18:28"},"variableNames":[{"name":"tail","nativeSrc":"5862:4:28","nodeType":"YulIdentifier","src":"5862:4:28"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5904:9:28","nodeType":"YulIdentifier","src":"5904:9:28"},{"arguments":[{"name":"value0","nativeSrc":"5919:6:28","nodeType":"YulIdentifier","src":"5919:6:28"},{"kind":"number","nativeSrc":"5927:42:28","nodeType":"YulLiteral","src":"5927:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5915:3:28","nodeType":"YulIdentifier","src":"5915:3:28"},"nativeSrc":"5915:55:28","nodeType":"YulFunctionCall","src":"5915:55:28"}],"functionName":{"name":"mstore","nativeSrc":"5897:6:28","nodeType":"YulIdentifier","src":"5897:6:28"},"nativeSrc":"5897:74:28","nodeType":"YulFunctionCall","src":"5897:74:28"},"nativeSrc":"5897:74:28","nodeType":"YulExpressionStatement","src":"5897:74:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5991:9:28","nodeType":"YulIdentifier","src":"5991:9:28"},{"kind":"number","nativeSrc":"6002:2:28","nodeType":"YulLiteral","src":"6002:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5987:3:28","nodeType":"YulIdentifier","src":"5987:3:28"},"nativeSrc":"5987:18:28","nodeType":"YulFunctionCall","src":"5987:18:28"},{"name":"value1","nativeSrc":"6007:6:28","nodeType":"YulIdentifier","src":"6007:6:28"}],"functionName":{"name":"mstore","nativeSrc":"5980:6:28","nodeType":"YulIdentifier","src":"5980:6:28"},"nativeSrc":"5980:34:28","nodeType":"YulFunctionCall","src":"5980:34:28"},"nativeSrc":"5980:34:28","nodeType":"YulExpressionStatement","src":"5980:34:28"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"5723:297:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5813:9:28","nodeType":"YulTypedName","src":"5813:9:28","type":""},{"name":"value1","nativeSrc":"5824:6:28","nodeType":"YulTypedName","src":"5824:6:28","type":""},{"name":"value0","nativeSrc":"5832:6:28","nodeType":"YulTypedName","src":"5832:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5843:4:28","nodeType":"YulTypedName","src":"5843:4:28","type":""}],"src":"5723:297:28"},{"body":{"nativeSrc":"6057:152:28","nodeType":"YulBlock","src":"6057:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6074:1:28","nodeType":"YulLiteral","src":"6074:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6077:77:28","nodeType":"YulLiteral","src":"6077:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6067:6:28","nodeType":"YulIdentifier","src":"6067:6:28"},"nativeSrc":"6067:88:28","nodeType":"YulFunctionCall","src":"6067:88:28"},"nativeSrc":"6067:88:28","nodeType":"YulExpressionStatement","src":"6067:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6171:1:28","nodeType":"YulLiteral","src":"6171:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"6174:4:28","nodeType":"YulLiteral","src":"6174:4:28","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6164:6:28","nodeType":"YulIdentifier","src":"6164:6:28"},"nativeSrc":"6164:15:28","nodeType":"YulFunctionCall","src":"6164:15:28"},"nativeSrc":"6164:15:28","nodeType":"YulExpressionStatement","src":"6164:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6195:1:28","nodeType":"YulLiteral","src":"6195:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6198:4:28","nodeType":"YulLiteral","src":"6198:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6188:6:28","nodeType":"YulIdentifier","src":"6188:6:28"},"nativeSrc":"6188:15:28","nodeType":"YulFunctionCall","src":"6188:15:28"},"nativeSrc":"6188:15:28","nodeType":"YulExpressionStatement","src":"6188:15:28"}]},"name":"panic_error_0x32","nativeSrc":"6025:184:28","nodeType":"YulFunctionDefinition","src":"6025:184:28"},{"body":{"nativeSrc":"6324:494:28","nodeType":"YulBlock","src":"6324:494:28","statements":[{"nativeSrc":"6334:51:28","nodeType":"YulVariableDeclaration","src":"6334:51:28","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"6373:11:28","nodeType":"YulIdentifier","src":"6373:11:28"}],"functionName":{"name":"calldataload","nativeSrc":"6360:12:28","nodeType":"YulIdentifier","src":"6360:12:28"},"nativeSrc":"6360:25:28","nodeType":"YulFunctionCall","src":"6360:25:28"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"6338:18:28","nodeType":"YulTypedName","src":"6338:18:28","type":""}]},{"body":{"nativeSrc":"6533:16:28","nodeType":"YulBlock","src":"6533:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6542:1:28","nodeType":"YulLiteral","src":"6542:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6545:1:28","nodeType":"YulLiteral","src":"6545:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6535:6:28","nodeType":"YulIdentifier","src":"6535:6:28"},"nativeSrc":"6535:12:28","nodeType":"YulFunctionCall","src":"6535:12:28"},"nativeSrc":"6535:12:28","nodeType":"YulExpressionStatement","src":"6535:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"6408:18:28","nodeType":"YulIdentifier","src":"6408:18:28"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6436:12:28","nodeType":"YulIdentifier","src":"6436:12:28"},"nativeSrc":"6436:14:28","nodeType":"YulFunctionCall","src":"6436:14:28"},{"name":"base_ref","nativeSrc":"6452:8:28","nodeType":"YulIdentifier","src":"6452:8:28"}],"functionName":{"name":"sub","nativeSrc":"6432:3:28","nodeType":"YulIdentifier","src":"6432:3:28"},"nativeSrc":"6432:29:28","nodeType":"YulFunctionCall","src":"6432:29:28"},{"kind":"number","nativeSrc":"6463:66:28","nodeType":"YulLiteral","src":"6463:66:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"6428:3:28","nodeType":"YulIdentifier","src":"6428:3:28"},"nativeSrc":"6428:102:28","nodeType":"YulFunctionCall","src":"6428:102:28"}],"functionName":{"name":"slt","nativeSrc":"6404:3:28","nodeType":"YulIdentifier","src":"6404:3:28"},"nativeSrc":"6404:127:28","nodeType":"YulFunctionCall","src":"6404:127:28"}],"functionName":{"name":"iszero","nativeSrc":"6397:6:28","nodeType":"YulIdentifier","src":"6397:6:28"},"nativeSrc":"6397:135:28","nodeType":"YulFunctionCall","src":"6397:135:28"},"nativeSrc":"6394:155:28","nodeType":"YulIf","src":"6394:155:28"},{"nativeSrc":"6558:47:28","nodeType":"YulVariableDeclaration","src":"6558:47:28","value":{"arguments":[{"name":"base_ref","nativeSrc":"6576:8:28","nodeType":"YulIdentifier","src":"6576:8:28"},{"name":"rel_offset_of_tail","nativeSrc":"6586:18:28","nodeType":"YulIdentifier","src":"6586:18:28"}],"functionName":{"name":"add","nativeSrc":"6572:3:28","nodeType":"YulIdentifier","src":"6572:3:28"},"nativeSrc":"6572:33:28","nodeType":"YulFunctionCall","src":"6572:33:28"},"variables":[{"name":"addr_1","nativeSrc":"6562:6:28","nodeType":"YulTypedName","src":"6562:6:28","type":""}]},{"nativeSrc":"6614:30:28","nodeType":"YulAssignment","src":"6614:30:28","value":{"arguments":[{"name":"addr_1","nativeSrc":"6637:6:28","nodeType":"YulIdentifier","src":"6637:6:28"}],"functionName":{"name":"calldataload","nativeSrc":"6624:12:28","nodeType":"YulIdentifier","src":"6624:12:28"},"nativeSrc":"6624:20:28","nodeType":"YulFunctionCall","src":"6624:20:28"},"variableNames":[{"name":"length","nativeSrc":"6614:6:28","nodeType":"YulIdentifier","src":"6614:6:28"}]},{"body":{"nativeSrc":"6687:16:28","nodeType":"YulBlock","src":"6687:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6696:1:28","nodeType":"YulLiteral","src":"6696:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6699:1:28","nodeType":"YulLiteral","src":"6699:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6689:6:28","nodeType":"YulIdentifier","src":"6689:6:28"},"nativeSrc":"6689:12:28","nodeType":"YulFunctionCall","src":"6689:12:28"},"nativeSrc":"6689:12:28","nodeType":"YulExpressionStatement","src":"6689:12:28"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6659:6:28","nodeType":"YulIdentifier","src":"6659:6:28"},{"kind":"number","nativeSrc":"6667:18:28","nodeType":"YulLiteral","src":"6667:18:28","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6656:2:28","nodeType":"YulIdentifier","src":"6656:2:28"},"nativeSrc":"6656:30:28","nodeType":"YulFunctionCall","src":"6656:30:28"},"nativeSrc":"6653:50:28","nodeType":"YulIf","src":"6653:50:28"},{"nativeSrc":"6712:25:28","nodeType":"YulAssignment","src":"6712:25:28","value":{"arguments":[{"name":"addr_1","nativeSrc":"6724:6:28","nodeType":"YulIdentifier","src":"6724:6:28"},{"kind":"number","nativeSrc":"6732:4:28","nodeType":"YulLiteral","src":"6732:4:28","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6720:3:28","nodeType":"YulIdentifier","src":"6720:3:28"},"nativeSrc":"6720:17:28","nodeType":"YulFunctionCall","src":"6720:17:28"},"variableNames":[{"name":"addr","nativeSrc":"6712:4:28","nodeType":"YulIdentifier","src":"6712:4:28"}]},{"body":{"nativeSrc":"6796:16:28","nodeType":"YulBlock","src":"6796:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6805:1:28","nodeType":"YulLiteral","src":"6805:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6808:1:28","nodeType":"YulLiteral","src":"6808:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6798:6:28","nodeType":"YulIdentifier","src":"6798:6:28"},"nativeSrc":"6798:12:28","nodeType":"YulFunctionCall","src":"6798:12:28"},"nativeSrc":"6798:12:28","nodeType":"YulExpressionStatement","src":"6798:12:28"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"6753:4:28","nodeType":"YulIdentifier","src":"6753:4:28"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6763:12:28","nodeType":"YulIdentifier","src":"6763:12:28"},"nativeSrc":"6763:14:28","nodeType":"YulFunctionCall","src":"6763:14:28"},{"arguments":[{"kind":"number","nativeSrc":"6783:1:28","nodeType":"YulLiteral","src":"6783:1:28","type":"","value":"5"},{"name":"length","nativeSrc":"6786:6:28","nodeType":"YulIdentifier","src":"6786:6:28"}],"functionName":{"name":"shl","nativeSrc":"6779:3:28","nodeType":"YulIdentifier","src":"6779:3:28"},"nativeSrc":"6779:14:28","nodeType":"YulFunctionCall","src":"6779:14:28"}],"functionName":{"name":"sub","nativeSrc":"6759:3:28","nodeType":"YulIdentifier","src":"6759:3:28"},"nativeSrc":"6759:35:28","nodeType":"YulFunctionCall","src":"6759:35:28"}],"functionName":{"name":"sgt","nativeSrc":"6749:3:28","nodeType":"YulIdentifier","src":"6749:3:28"},"nativeSrc":"6749:46:28","nodeType":"YulFunctionCall","src":"6749:46:28"},"nativeSrc":"6746:66:28","nodeType":"YulIf","src":"6746:66:28"}]},"name":"access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6214:604:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"6281:8:28","nodeType":"YulTypedName","src":"6281:8:28","type":""},{"name":"ptr_to_tail","nativeSrc":"6291:11:28","nodeType":"YulTypedName","src":"6291:11:28","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"6307:4:28","nodeType":"YulTypedName","src":"6307:4:28","type":""},{"name":"length","nativeSrc":"6313:6:28","nodeType":"YulTypedName","src":"6313:6:28","type":""}],"src":"6214:604:28"},{"body":{"nativeSrc":"6904:103:28","nodeType":"YulBlock","src":"6904:103:28","statements":[{"body":{"nativeSrc":"6950:16:28","nodeType":"YulBlock","src":"6950:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6959:1:28","nodeType":"YulLiteral","src":"6959:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"6962:1:28","nodeType":"YulLiteral","src":"6962:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6952:6:28","nodeType":"YulIdentifier","src":"6952:6:28"},"nativeSrc":"6952:12:28","nodeType":"YulFunctionCall","src":"6952:12:28"},"nativeSrc":"6952:12:28","nodeType":"YulExpressionStatement","src":"6952:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6925:7:28","nodeType":"YulIdentifier","src":"6925:7:28"},{"name":"headStart","nativeSrc":"6934:9:28","nodeType":"YulIdentifier","src":"6934:9:28"}],"functionName":{"name":"sub","nativeSrc":"6921:3:28","nodeType":"YulIdentifier","src":"6921:3:28"},"nativeSrc":"6921:23:28","nodeType":"YulFunctionCall","src":"6921:23:28"},{"kind":"number","nativeSrc":"6946:2:28","nodeType":"YulLiteral","src":"6946:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6917:3:28","nodeType":"YulIdentifier","src":"6917:3:28"},"nativeSrc":"6917:32:28","nodeType":"YulFunctionCall","src":"6917:32:28"},"nativeSrc":"6914:52:28","nodeType":"YulIf","src":"6914:52:28"},{"nativeSrc":"6975:26:28","nodeType":"YulAssignment","src":"6975:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"6991:9:28","nodeType":"YulIdentifier","src":"6991:9:28"}],"functionName":{"name":"mload","nativeSrc":"6985:5:28","nodeType":"YulIdentifier","src":"6985:5:28"},"nativeSrc":"6985:16:28","nodeType":"YulFunctionCall","src":"6985:16:28"},"variableNames":[{"name":"value0","nativeSrc":"6975:6:28","nodeType":"YulIdentifier","src":"6975:6:28"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"6823:184:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6870:9:28","nodeType":"YulTypedName","src":"6870:9:28","type":""},{"name":"dataEnd","nativeSrc":"6881:7:28","nodeType":"YulTypedName","src":"6881:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6893:6:28","nodeType":"YulTypedName","src":"6893:6:28","type":""}],"src":"6823:184:28"},{"body":{"nativeSrc":"7044:152:28","nodeType":"YulBlock","src":"7044:152:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7061:1:28","nodeType":"YulLiteral","src":"7061:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7064:77:28","nodeType":"YulLiteral","src":"7064:77:28","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7054:6:28","nodeType":"YulIdentifier","src":"7054:6:28"},"nativeSrc":"7054:88:28","nodeType":"YulFunctionCall","src":"7054:88:28"},"nativeSrc":"7054:88:28","nodeType":"YulExpressionStatement","src":"7054:88:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7158:1:28","nodeType":"YulLiteral","src":"7158:1:28","type":"","value":"4"},{"kind":"number","nativeSrc":"7161:4:28","nodeType":"YulLiteral","src":"7161:4:28","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"7151:6:28","nodeType":"YulIdentifier","src":"7151:6:28"},"nativeSrc":"7151:15:28","nodeType":"YulFunctionCall","src":"7151:15:28"},"nativeSrc":"7151:15:28","nodeType":"YulExpressionStatement","src":"7151:15:28"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7182:1:28","nodeType":"YulLiteral","src":"7182:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7185:4:28","nodeType":"YulLiteral","src":"7185:4:28","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7175:6:28","nodeType":"YulIdentifier","src":"7175:6:28"},"nativeSrc":"7175:15:28","nodeType":"YulFunctionCall","src":"7175:15:28"},"nativeSrc":"7175:15:28","nodeType":"YulExpressionStatement","src":"7175:15:28"}]},"name":"panic_error_0x11","nativeSrc":"7012:184:28","nodeType":"YulFunctionDefinition","src":"7012:184:28"},{"body":{"nativeSrc":"7253:116:28","nodeType":"YulBlock","src":"7253:116:28","statements":[{"nativeSrc":"7263:20:28","nodeType":"YulAssignment","src":"7263:20:28","value":{"arguments":[{"name":"x","nativeSrc":"7278:1:28","nodeType":"YulIdentifier","src":"7278:1:28"},{"name":"y","nativeSrc":"7281:1:28","nodeType":"YulIdentifier","src":"7281:1:28"}],"functionName":{"name":"mul","nativeSrc":"7274:3:28","nodeType":"YulIdentifier","src":"7274:3:28"},"nativeSrc":"7274:9:28","nodeType":"YulFunctionCall","src":"7274:9:28"},"variableNames":[{"name":"product","nativeSrc":"7263:7:28","nodeType":"YulIdentifier","src":"7263:7:28"}]},{"body":{"nativeSrc":"7341:22:28","nodeType":"YulBlock","src":"7341:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7343:16:28","nodeType":"YulIdentifier","src":"7343:16:28"},"nativeSrc":"7343:18:28","nodeType":"YulFunctionCall","src":"7343:18:28"},"nativeSrc":"7343:18:28","nodeType":"YulExpressionStatement","src":"7343:18:28"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"7312:1:28","nodeType":"YulIdentifier","src":"7312:1:28"}],"functionName":{"name":"iszero","nativeSrc":"7305:6:28","nodeType":"YulIdentifier","src":"7305:6:28"},"nativeSrc":"7305:9:28","nodeType":"YulFunctionCall","src":"7305:9:28"},{"arguments":[{"name":"y","nativeSrc":"7319:1:28","nodeType":"YulIdentifier","src":"7319:1:28"},{"arguments":[{"name":"product","nativeSrc":"7326:7:28","nodeType":"YulIdentifier","src":"7326:7:28"},{"name":"x","nativeSrc":"7335:1:28","nodeType":"YulIdentifier","src":"7335:1:28"}],"functionName":{"name":"div","nativeSrc":"7322:3:28","nodeType":"YulIdentifier","src":"7322:3:28"},"nativeSrc":"7322:15:28","nodeType":"YulFunctionCall","src":"7322:15:28"}],"functionName":{"name":"eq","nativeSrc":"7316:2:28","nodeType":"YulIdentifier","src":"7316:2:28"},"nativeSrc":"7316:22:28","nodeType":"YulFunctionCall","src":"7316:22:28"}],"functionName":{"name":"or","nativeSrc":"7302:2:28","nodeType":"YulIdentifier","src":"7302:2:28"},"nativeSrc":"7302:37:28","nodeType":"YulFunctionCall","src":"7302:37:28"}],"functionName":{"name":"iszero","nativeSrc":"7295:6:28","nodeType":"YulIdentifier","src":"7295:6:28"},"nativeSrc":"7295:45:28","nodeType":"YulFunctionCall","src":"7295:45:28"},"nativeSrc":"7292:71:28","nodeType":"YulIf","src":"7292:71:28"}]},"name":"checked_mul_t_uint256","nativeSrc":"7201:168:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7232:1:28","nodeType":"YulTypedName","src":"7232:1:28","type":""},{"name":"y","nativeSrc":"7235:1:28","nodeType":"YulTypedName","src":"7235:1:28","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7241:7:28","nodeType":"YulTypedName","src":"7241:7:28","type":""}],"src":"7201:168:28"},{"body":{"nativeSrc":"7423:79:28","nodeType":"YulBlock","src":"7423:79:28","statements":[{"nativeSrc":"7433:17:28","nodeType":"YulAssignment","src":"7433:17:28","value":{"arguments":[{"name":"x","nativeSrc":"7445:1:28","nodeType":"YulIdentifier","src":"7445:1:28"},{"name":"y","nativeSrc":"7448:1:28","nodeType":"YulIdentifier","src":"7448:1:28"}],"functionName":{"name":"sub","nativeSrc":"7441:3:28","nodeType":"YulIdentifier","src":"7441:3:28"},"nativeSrc":"7441:9:28","nodeType":"YulFunctionCall","src":"7441:9:28"},"variableNames":[{"name":"diff","nativeSrc":"7433:4:28","nodeType":"YulIdentifier","src":"7433:4:28"}]},{"body":{"nativeSrc":"7474:22:28","nodeType":"YulBlock","src":"7474:22:28","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7476:16:28","nodeType":"YulIdentifier","src":"7476:16:28"},"nativeSrc":"7476:18:28","nodeType":"YulFunctionCall","src":"7476:18:28"},"nativeSrc":"7476:18:28","nodeType":"YulExpressionStatement","src":"7476:18:28"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"7465:4:28","nodeType":"YulIdentifier","src":"7465:4:28"},{"name":"x","nativeSrc":"7471:1:28","nodeType":"YulIdentifier","src":"7471:1:28"}],"functionName":{"name":"gt","nativeSrc":"7462:2:28","nodeType":"YulIdentifier","src":"7462:2:28"},"nativeSrc":"7462:11:28","nodeType":"YulFunctionCall","src":"7462:11:28"},"nativeSrc":"7459:37:28","nodeType":"YulIf","src":"7459:37:28"}]},"name":"checked_sub_t_uint256","nativeSrc":"7374:128:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7405:1:28","nodeType":"YulTypedName","src":"7405:1:28","type":""},{"name":"y","nativeSrc":"7408:1:28","nodeType":"YulTypedName","src":"7408:1:28","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"7414:4:28","nodeType":"YulTypedName","src":"7414:4:28","type":""}],"src":"7374:128:28"},{"body":{"nativeSrc":"7636:198:28","nodeType":"YulBlock","src":"7636:198:28","statements":[{"nativeSrc":"7646:26:28","nodeType":"YulAssignment","src":"7646:26:28","value":{"arguments":[{"name":"headStart","nativeSrc":"7658:9:28","nodeType":"YulIdentifier","src":"7658:9:28"},{"kind":"number","nativeSrc":"7669:2:28","nodeType":"YulLiteral","src":"7669:2:28","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7654:3:28","nodeType":"YulIdentifier","src":"7654:3:28"},"nativeSrc":"7654:18:28","nodeType":"YulFunctionCall","src":"7654:18:28"},"variableNames":[{"name":"tail","nativeSrc":"7646:4:28","nodeType":"YulIdentifier","src":"7646:4:28"}]},{"nativeSrc":"7681:52:28","nodeType":"YulVariableDeclaration","src":"7681:52:28","value":{"kind":"number","nativeSrc":"7691:42:28","nodeType":"YulLiteral","src":"7691:42:28","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"7685:2:28","nodeType":"YulTypedName","src":"7685:2:28","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7749:9:28","nodeType":"YulIdentifier","src":"7749:9:28"},{"arguments":[{"name":"value0","nativeSrc":"7764:6:28","nodeType":"YulIdentifier","src":"7764:6:28"},{"name":"_1","nativeSrc":"7772:2:28","nodeType":"YulIdentifier","src":"7772:2:28"}],"functionName":{"name":"and","nativeSrc":"7760:3:28","nodeType":"YulIdentifier","src":"7760:3:28"},"nativeSrc":"7760:15:28","nodeType":"YulFunctionCall","src":"7760:15:28"}],"functionName":{"name":"mstore","nativeSrc":"7742:6:28","nodeType":"YulIdentifier","src":"7742:6:28"},"nativeSrc":"7742:34:28","nodeType":"YulFunctionCall","src":"7742:34:28"},"nativeSrc":"7742:34:28","nodeType":"YulExpressionStatement","src":"7742:34:28"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7796:9:28","nodeType":"YulIdentifier","src":"7796:9:28"},{"kind":"number","nativeSrc":"7807:2:28","nodeType":"YulLiteral","src":"7807:2:28","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7792:3:28","nodeType":"YulIdentifier","src":"7792:3:28"},"nativeSrc":"7792:18:28","nodeType":"YulFunctionCall","src":"7792:18:28"},{"arguments":[{"name":"value1","nativeSrc":"7816:6:28","nodeType":"YulIdentifier","src":"7816:6:28"},{"name":"_1","nativeSrc":"7824:2:28","nodeType":"YulIdentifier","src":"7824:2:28"}],"functionName":{"name":"and","nativeSrc":"7812:3:28","nodeType":"YulIdentifier","src":"7812:3:28"},"nativeSrc":"7812:15:28","nodeType":"YulFunctionCall","src":"7812:15:28"}],"functionName":{"name":"mstore","nativeSrc":"7785:6:28","nodeType":"YulIdentifier","src":"7785:6:28"},"nativeSrc":"7785:43:28","nodeType":"YulFunctionCall","src":"7785:43:28"},"nativeSrc":"7785:43:28","nodeType":"YulExpressionStatement","src":"7785:43:28"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"7507:327:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7597:9:28","nodeType":"YulTypedName","src":"7597:9:28","type":""},{"name":"value1","nativeSrc":"7608:6:28","nodeType":"YulTypedName","src":"7608:6:28","type":""},{"name":"value0","nativeSrc":"7616:6:28","nodeType":"YulTypedName","src":"7616:6:28","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7627:4:28","nodeType":"YulTypedName","src":"7627:4:28","type":""}],"src":"7507:327:28"},{"body":{"nativeSrc":"7917:199:28","nodeType":"YulBlock","src":"7917:199:28","statements":[{"body":{"nativeSrc":"7963:16:28","nodeType":"YulBlock","src":"7963:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7972:1:28","nodeType":"YulLiteral","src":"7972:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"7975:1:28","nodeType":"YulLiteral","src":"7975:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7965:6:28","nodeType":"YulIdentifier","src":"7965:6:28"},"nativeSrc":"7965:12:28","nodeType":"YulFunctionCall","src":"7965:12:28"},"nativeSrc":"7965:12:28","nodeType":"YulExpressionStatement","src":"7965:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7938:7:28","nodeType":"YulIdentifier","src":"7938:7:28"},{"name":"headStart","nativeSrc":"7947:9:28","nodeType":"YulIdentifier","src":"7947:9:28"}],"functionName":{"name":"sub","nativeSrc":"7934:3:28","nodeType":"YulIdentifier","src":"7934:3:28"},"nativeSrc":"7934:23:28","nodeType":"YulFunctionCall","src":"7934:23:28"},{"kind":"number","nativeSrc":"7959:2:28","nodeType":"YulLiteral","src":"7959:2:28","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7930:3:28","nodeType":"YulIdentifier","src":"7930:3:28"},"nativeSrc":"7930:32:28","nodeType":"YulFunctionCall","src":"7930:32:28"},"nativeSrc":"7927:52:28","nodeType":"YulIf","src":"7927:52:28"},{"nativeSrc":"7988:29:28","nodeType":"YulVariableDeclaration","src":"7988:29:28","value":{"arguments":[{"name":"headStart","nativeSrc":"8007:9:28","nodeType":"YulIdentifier","src":"8007:9:28"}],"functionName":{"name":"mload","nativeSrc":"8001:5:28","nodeType":"YulIdentifier","src":"8001:5:28"},"nativeSrc":"8001:16:28","nodeType":"YulFunctionCall","src":"8001:16:28"},"variables":[{"name":"value","nativeSrc":"7992:5:28","nodeType":"YulTypedName","src":"7992:5:28","type":""}]},{"body":{"nativeSrc":"8070:16:28","nodeType":"YulBlock","src":"8070:16:28","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8079:1:28","nodeType":"YulLiteral","src":"8079:1:28","type":"","value":"0"},{"kind":"number","nativeSrc":"8082:1:28","nodeType":"YulLiteral","src":"8082:1:28","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8072:6:28","nodeType":"YulIdentifier","src":"8072:6:28"},"nativeSrc":"8072:12:28","nodeType":"YulFunctionCall","src":"8072:12:28"},"nativeSrc":"8072:12:28","nodeType":"YulExpressionStatement","src":"8072:12:28"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8039:5:28","nodeType":"YulIdentifier","src":"8039:5:28"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"8060:5:28","nodeType":"YulIdentifier","src":"8060:5:28"}],"functionName":{"name":"iszero","nativeSrc":"8053:6:28","nodeType":"YulIdentifier","src":"8053:6:28"},"nativeSrc":"8053:13:28","nodeType":"YulFunctionCall","src":"8053:13:28"}],"functionName":{"name":"iszero","nativeSrc":"8046:6:28","nodeType":"YulIdentifier","src":"8046:6:28"},"nativeSrc":"8046:21:28","nodeType":"YulFunctionCall","src":"8046:21:28"}],"functionName":{"name":"eq","nativeSrc":"8036:2:28","nodeType":"YulIdentifier","src":"8036:2:28"},"nativeSrc":"8036:32:28","nodeType":"YulFunctionCall","src":"8036:32:28"}],"functionName":{"name":"iszero","nativeSrc":"8029:6:28","nodeType":"YulIdentifier","src":"8029:6:28"},"nativeSrc":"8029:40:28","nodeType":"YulFunctionCall","src":"8029:40:28"},"nativeSrc":"8026:60:28","nodeType":"YulIf","src":"8026:60:28"},{"nativeSrc":"8095:15:28","nodeType":"YulAssignment","src":"8095:15:28","value":{"name":"value","nativeSrc":"8105:5:28","nodeType":"YulIdentifier","src":"8105:5:28"},"variableNames":[{"name":"value0","nativeSrc":"8095:6:28","nodeType":"YulIdentifier","src":"8095:6:28"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"7839:277:28","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7883:9:28","nodeType":"YulTypedName","src":"7883:9:28","type":""},{"name":"dataEnd","nativeSrc":"7894:7:28","nodeType":"YulTypedName","src":"7894:7:28","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7906:6:28","nodeType":"YulTypedName","src":"7906:6:28","type":""}],"src":"7839:277:28"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$727__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_bytes32_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_bytes32_$dyn_calldata_ptrt_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := abi_decode_address(add(headStart, 64))\n        value4 := calldataload(add(headStart, 96))\n        value5 := calldataload(add(headStart, 128))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptrt_array$_t_array$_t_uint256_$dyn_calldata_ptr_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_addresst_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_array_bytes32_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value2, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        mstore(add(pos, 52), value2)\n        end := add(pos, 84)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function access_calldata_tail_t_array$_t_uint256_$dyn_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), shl(5, length))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n}","id":28,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"591":[{"length":32,"start":270},{"length":32,"start":376},{"length":32,"start":3672},{"length":32,"start":3808}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063e18ea41811610066578063e18ea4181461023c578063e3a0ce091461024f578063f2fde38b14610272578063fe5a53771461028557600080fd5b80638da5cb5b14610201578063ac524f3d14610209578063cc668cf01461022957600080fd5b8063572b6c05116100bd578063572b6c05146101685780637cb64759146101b5578063851f3bd2146101c857600080fd5b806301ffc9a7146100e45780632b4c9f161461010c5780633ec6004f14610153575b600080fd5b6100f76100f2366004610f88565b6102a8565b60405190151581526020015b60405180910390f35b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610103565b61016661016136600461103f565b6102c2565b005b6100f76101763660046110af565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101666101c33660046110ca565b610585565b6101f36101d63660046110e3565b600360209081526000928352604080842090915290825290205481565b604051908152602001610103565b61012e61064e565b6101f36102173660046110af565b60006020819052908152604090205481565b61016661023736600461110d565b61067a565b6101f361024a3660046111a7565b610893565b6100f761025d3660046110ca565b60026020526000908152604090205460ff1681565b6101666102803660046110af565b610a9e565b6100f76102933660046110ca565b60016020526000908152604090205460ff1681565b60006102bc826102b6610abc565b90610aea565b92915050565b60008681526001602052604090205460ff16610312576040517f6d825743000000000000000000000000000000000000000000000000000000008152600481018790526024015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020548211610373576040517f9f44c9eb00000000000000000000000000000000000000000000000000000000815260048101839052602401610309565b6040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606085901b1660208201526034810183905260548101829052600090607401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291815281516020928301206000818152600290935291205490915060ff1615610455576040517fe64ea1da00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610309565b6104978782888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610bc49050565b6104ec576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101839052604401610309565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260208181526040808320879055848352600282529182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905590518581528492917f987d620f307ff6b94d58743cb7a7509f24071586a77759b77c2d4e29f75a2f9a910160405180910390a350505050505050565b61059e610590610bda565b610598610be4565b90610c12565b60008181526001602052604090205460ff16156105ea576040517f5d35de3700000000000000000000000000000000000000000000000000000000815260048101829052602401610309565b600081815260016020819052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169092179091555182917f914960aef5e033ce5cae8a7992d4b7a6f0f9741227b66acb67c605b7019f8a4691a250565b600061067561065b610be4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610685610590610bda565b84831415806106945750848114155b156106cb576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8581101561088a578282828181106106e8576106e8611228565b90506020028101906106fa9190611257565b905085858381811061070e5761070e611228565b90506020028101906107209190611257565b905014610759576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b85858381811061076e5761076e611228565b90506020028101906107809190611257565b90508110156108815783838381811061079b5761079b611228565b90506020028101906107ad9190611257565b828181106107bd576107bd611228565b90506020020135600360008a8a868181106107da576107da611228565b90506020020160208101906107ef91906110af565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600088888681811061083d5761083d611228565b905060200281019061084f9190611257565b8581811061085f5761085f611228565b602090810292909201358352508101919091526040016000205560010161075c565b506001016106ce565b50505050505050565b600061089e86610c81565b90508382146108d9576040517f35e83ac300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b84811015610a945760005b83811015610a8b57600087878481811061090357610903611228565b905060200201602081019061091891906110af565b73ffffffffffffffffffffffffffffffffffffffff1662fdd58e8a88888681811061094557610945611228565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b16815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e091906112bf565b1115610a8357600360008888858181106109fc576109fc611228565b9050602002016020810190610a1191906110af565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868684818110610a5f57610a5f611228565b9050602002013581526020019081526020016000205483610a809190611307565b92505b6001016108e7565b506001016108dc565b5095945050505050565b610ab9610aa9610bda565b82610ab2610be4565b9190610cbd565b50565b6000806102bc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61131e565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610b3a575060006102bc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610b8b575060016102bc565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082610bd18584610dd2565b14949350505050565b6000610675610e15565b6000806102bc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61131e565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610c7d576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610309565b5050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081905260408120548015610cb35780610cb6565b60015b9392505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610d2a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610309565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dcc5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600081815b8451811015610e0d57610e0382868381518110610df657610df6611228565b6020026020010151610f5c565b9150600101610dd7565b509392505050565b600033321480610e255750601836105b15610e2f57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480610f4b57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611331565b15610f5557919050565b3391505090565b6000818310610f78576000828152602084905260409020610cb6565b5060009182526020526040902090565b600060208284031215610f9a57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610cb657600080fd5b60008083601f840112610fdc57600080fd5b50813567ffffffffffffffff811115610ff457600080fd5b6020830191508360208260051b850101111561100f57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461103a57600080fd5b919050565b60008060008060008060a0878903121561105857600080fd5b86359550602087013567ffffffffffffffff81111561107657600080fd5b61108289828a01610fca565b9096509450611095905060408801611016565b925060608701359150608087013590509295509295509295565b6000602082840312156110c157600080fd5b610cb682611016565b6000602082840312156110dc57600080fd5b5035919050565b600080604083850312156110f657600080fd5b6110ff83611016565b946020939093013593505050565b6000806000806000806060878903121561112657600080fd5b863567ffffffffffffffff8082111561113e57600080fd5b61114a8a838b01610fca565b9098509650602089013591508082111561116357600080fd5b61116f8a838b01610fca565b9096509450604089013591508082111561118857600080fd5b5061119589828a01610fca565b979a9699509497509295939492505050565b6000806000806000606086880312156111bf57600080fd5b6111c886611016565b9450602086013567ffffffffffffffff808211156111e557600080fd5b6111f189838a01610fca565b9096509450604088013591508082111561120a57600080fd5b5061121788828901610fca565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261128c57600080fd5b83018035915067ffffffffffffffff8211156112a757600080fd5b6020019150600581901b360382131561100f57600080fd5b6000602082840312156112d157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820281158282048414176102bc576102bc6112d8565b818103818111156102bc576102bc6112d8565b60006020828403121561134357600080fd5b81518015158114610cb657600080fdfea26469706673582212205fe1058634e90993e801c76bb858e40193aedd5dac25a24ca76bd79c494b7d0864736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xDF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xE18EA418 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xE18EA418 EQ PUSH2 0x23C JUMPI DUP1 PUSH4 0xE3A0CE09 EQ PUSH2 0x24F JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x272 JUMPI DUP1 PUSH4 0xFE5A5377 EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x201 JUMPI DUP1 PUSH4 0xAC524F3D EQ PUSH2 0x209 JUMPI DUP1 PUSH4 0xCC668CF0 EQ PUSH2 0x229 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x572B6C05 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x7CB64759 EQ PUSH2 0x1B5 JUMPI DUP1 PUSH4 0x851F3BD2 EQ PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xE4 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x3EC6004F EQ PUSH2 0x153 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF7 PUSH2 0xF2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF88 JUMP JUMPDEST PUSH2 0x2A8 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x161 CALLDATASIZE PUSH1 0x4 PUSH2 0x103F JUMP JUMPDEST PUSH2 0x2C2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xF7 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x1C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH2 0x585 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x1D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x10E3 JUMP JUMPDEST PUSH1 0x3 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x103 JUMP JUMPDEST PUSH2 0x12E PUSH2 0x64E JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x217 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x237 CALLDATASIZE PUSH1 0x4 PUSH2 0x110D JUMP JUMPDEST PUSH2 0x67A JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x24A CALLDATASIZE PUSH1 0x4 PUSH2 0x11A7 JUMP JUMPDEST PUSH2 0x893 JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x25D CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x166 PUSH2 0x280 CALLDATASIZE PUSH1 0x4 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0xA9E JUMP JUMPDEST PUSH2 0xF7 PUSH2 0x293 CALLDATASIZE PUSH1 0x4 PUSH2 0x10CA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BC DUP3 PUSH2 0x2B6 PUSH2 0xABC JUMP JUMPDEST SWAP1 PUSH2 0xAEA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6D82574300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP3 GT PUSH2 0x373 JUMPI PUSH1 0x40 MLOAD PUSH32 0x9F44C9EB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP6 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x54 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x74 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 SWAP3 DUP4 ADD KECCAK256 PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 SWAP1 SWAP4 MSTORE SWAP2 KECCAK256 SLOAD SWAP1 SWAP2 POP PUSH1 0xFF AND ISZERO PUSH2 0x455 JUMPI PUSH1 0x40 MLOAD PUSH32 0xE64EA1DA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x497 DUP8 DUP3 DUP9 DUP9 DUP1 DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP PUSH2 0xBC4 SWAP1 POP JUMP JUMPDEST PUSH2 0x4EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x309 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x2 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE SWAP1 MLOAD DUP6 DUP2 MSTORE DUP5 SWAP3 SWAP2 PUSH32 0x987D620F307FF6B94D58743CB7A7509F24071586A77759B77C2D4E29F75A2F9A SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x590 PUSH2 0xBDA JUMP JUMPDEST PUSH2 0x598 PUSH2 0xBE4 JUMP JUMPDEST SWAP1 PUSH2 0xC12 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x5EA JUMPI PUSH1 0x40 MLOAD PUSH32 0x5D35DE3700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE MLOAD DUP3 SWAP2 PUSH32 0x914960AEF5E033CE5CAE8A7992D4B7A6F0F9741227B66ACB67C605B7019F8A46 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x675 PUSH2 0x65B PUSH2 0xBE4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x685 PUSH2 0x590 PUSH2 0xBDA JUMP JUMPDEST DUP5 DUP4 EQ ISZERO DUP1 PUSH2 0x694 JUMPI POP DUP5 DUP2 EQ ISZERO JUMPDEST ISZERO PUSH2 0x6CB JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x88A JUMPI DUP3 DUP3 DUP3 DUP2 DUP2 LT PUSH2 0x6E8 JUMPI PUSH2 0x6E8 PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x6FA SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x70E JUMPI PUSH2 0x70E PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x720 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP EQ PUSH2 0x759 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP6 DUP6 DUP4 DUP2 DUP2 LT PUSH2 0x76E JUMPI PUSH2 0x76E PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x780 SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST SWAP1 POP DUP2 LT ISZERO PUSH2 0x881 JUMPI DUP4 DUP4 DUP4 DUP2 DUP2 LT PUSH2 0x79B JUMPI PUSH2 0x79B PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x7AD SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST DUP3 DUP2 DUP2 LT PUSH2 0x7BD JUMPI PUSH2 0x7BD PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 PUSH1 0x0 DUP11 DUP11 DUP7 DUP2 DUP2 LT PUSH2 0x7DA JUMPI PUSH2 0x7DA PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x7EF SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x83D JUMPI PUSH2 0x83D PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL DUP2 ADD SWAP1 PUSH2 0x84F SWAP2 SWAP1 PUSH2 0x1257 JUMP JUMPDEST DUP6 DUP2 DUP2 LT PUSH2 0x85F JUMPI PUSH2 0x85F PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP3 SWAP1 SWAP3 ADD CALLDATALOAD DUP4 MSTORE POP DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 SSTORE PUSH1 0x1 ADD PUSH2 0x75C JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x6CE JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x89E DUP7 PUSH2 0xC81 JUMP JUMPDEST SWAP1 POP DUP4 DUP3 EQ PUSH2 0x8D9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x35E83AC300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 0xA94 JUMPI PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xA8B JUMPI PUSH1 0x0 DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x903 JUMPI PUSH2 0x903 PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x918 SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH3 0xFDD58E DUP11 DUP9 DUP9 DUP7 DUP2 DUP2 LT PUSH2 0x945 JUMPI PUSH2 0x945 PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP8 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x9BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x9E0 SWAP2 SWAP1 PUSH2 0x12BF JUMP JUMPDEST GT ISZERO PUSH2 0xA83 JUMPI PUSH1 0x3 PUSH1 0x0 DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x9FC JUMPI PUSH2 0x9FC PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA11 SWAP2 SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP7 DUP7 DUP5 DUP2 DUP2 LT PUSH2 0xA5F JUMPI PUSH2 0xA5F PUSH2 0x1228 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD DUP4 PUSH2 0xA80 SWAP2 SWAP1 PUSH2 0x1307 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 0x1 ADD PUSH2 0x8E7 JUMP JUMPDEST POP PUSH1 0x1 ADD PUSH2 0x8DC JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0xAB9 PUSH2 0xAA9 PUSH2 0xBDA JUMP JUMPDEST DUP3 PUSH2 0xAB2 PUSH2 0xBE4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xCBD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x131E JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB3A JUMPI POP PUSH1 0x0 PUSH2 0x2BC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xB8B JUMPI POP PUSH1 0x1 PUSH2 0x2BC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xBD1 DUP6 DUP5 PUSH2 0xDD2 JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x675 PUSH2 0xE15 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x2BC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x131E JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xC7D JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0xCB3 JUMPI DUP1 PUSH2 0xCB6 JUMP JUMPDEST PUSH1 0x1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xD2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x309 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDCC JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0xE0D JUMPI PUSH2 0xE03 DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0xDF6 JUMPI PUSH2 0xDF6 PUSH2 0x1228 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0xF5C JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0xDD7 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0xE25 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0xE2F JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0xF4B JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xF27 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF4B SWAP2 SWAP1 PUSH2 0x1331 JUMP JUMPDEST ISZERO PUSH2 0xF55 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xF78 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0xCB6 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF9A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xCB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xFDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xFF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x103A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1058 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1082 DUP10 DUP3 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH2 0x1095 SWAP1 POP PUSH1 0x40 DUP9 ADD PUSH2 0x1016 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP2 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD SWAP1 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xCB6 DUP3 PUSH2 0x1016 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x10DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x10F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10FF DUP4 PUSH2 0x1016 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1126 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x113E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x114A DUP11 DUP4 DUP12 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1163 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x116F DUP11 DUP4 DUP12 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1188 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1195 DUP10 DUP3 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x11BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11C8 DUP7 PUSH2 0x1016 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x11E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11F1 DUP10 DUP4 DUP11 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x120A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1217 DUP9 DUP3 DUP10 ADD PUSH2 0xFCA JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x12A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP PUSH1 0x5 DUP2 SWAP1 SHL CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0x100F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x12D8 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x2BC JUMPI PUSH2 0x2BC PUSH2 0x12D8 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1343 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xCB6 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH0 0xE1 SDIV DUP7 CALLVALUE 0xE9 MULMOD SWAP4 0xE8 ADD 0xC7 PUSH12 0xB858E40193AEDD5DAC25A24C 0xA7 PUSH12 0xD79C494B7D0864736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1042:4868:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:28;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;728:115:11;817:19;728:115;;;745:42:28;733:55;;;715:74;;703:2;688:18;728:115:11;543:252:28;5136:772:27;;;;;;:::i;:::-;;:::i;:::-;;878:149:11;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;3856:326:27;;;;;;:::i;:::-;;:::i;1383:71::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2876:25:28;;;2864:2;2849:18;1383:71:27;2730:177:28;710:120:1;;;:::i;1233:46:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;4188:705;;;;;;:::i;:::-;;:::i;3070:673::-;;;;;;:::i;:::-;;:::i;1334:43::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;864:152:1;;;;;;:::i;:::-;;:::i;1285:43:27:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;542:165:7;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;5136:772:27:-;5277:23;;;;:11;:23;;;;;;;;5272:91;;5323:29;;;;;;;;2876:25:28;;;2849:18;;5323:29:27;;;;;;;;5272:91;5376:22;;;:11;:22;;;;;;;;;;;:36;-1:-1:-1;5372:103:27;;5435:29;;;;;;;;2876:25:28;;;2849:18;;5435:29:27;2730:177:28;5372:103:27;5509:48;;5542:66:28;5529:2;5525:15;;;5521:88;5509:48:27;;;:101:28;5626:12;;;5619:28;;;5663:12;;;5656:28;;;5484:12:27;;5700::28;;5509:48:27;;;;;;;;;;;;;5499:59;;5509:48;5499:59;;;;5572:17;;;;:11;:17;;;;;;5499:59;;-1:-1:-1;5572:17:27;;5568:89;;;5612:34;;;;;5927:42:28;5915:55;;5612:34:27;;;5897:74:28;5987:18;;;5980:34;;;5870:18;;5612:34:27;5723:297:28;5568:89:27;5671:30;5684:10;5696:4;5671:5;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;5671:12:27;;:30;;-1:-1:-1;;5671:12:27;:30;-1:-1:-1;5671:30:27:i;:::-;5666:101;;5724:32;;;;;5927:42:28;5915:55;;5724:32:27;;;5897:74:28;5987:18;;;5980:34;;;5870:18;;5724:32:27;5723:297:28;5666:101:27;5777:22;;;:11;:22;;;;;;;;;;;:35;;;5822:17;;;:11;:17;;;;;;:24;;;;5842:4;5822:24;;;5862:39;;2876:25:28;;;5881:7:27;;5777:22;5862:39;;2849:18:28;5862:39:27;;;;;;;5262:646;5136:772;;;;;;:::o;3856:326::-;3918:70;3975:12;:10;:12::i;:::-;3918:33;:31;:33::i;:::-;:56;;:70::i;:::-;4003:23;;;;:11;:23;;;;;;;;3999:96;;;4049:35;;;;;;;;2876:25:28;;;2849:18;;4049:35:27;2730:177:28;3999:96:27;4105:23;;;;4131:4;4105:23;;;;;;;;:30;;;;;;;;;;4150:25;4117:10;;4150:25;;;3856:326;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;4188:705:27:-;4329:70;4386:12;:10;:12::i;4329:70::-;4413:32;;;;;:72;;-1:-1:-1;4449:36:27;;;;4413:72;4409:130;;;4508:20;;;;;;;;;;;;;;4409:130;4554:9;4549:338;4569:17;;;4549:338;;;4633:12;;4646:1;4633:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:22;;4611:8;;4620:1;4611:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:18;;:44;4607:110;;4682:20;;;;;;;;;;;;;;4607:110;4736:9;4731:146;4755:8;;4764:1;4755:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;:18;;4751:1;:22;4731:146;;;4844:12;;4857:1;4844:15;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4860:1;4844:18;;;;;;;:::i;:::-;;;;;;;4798:16;:27;4815:6;;4822:1;4815:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4798:27;;;;;;;;;;;;;;;:43;4826:8;;4835:1;4826:11;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;4838:1;4826:14;;;;;;;:::i;:::-;;;;;;;;;;4798:43;;-1:-1:-1;4798:43:27;;;;;;;;-1:-1:-1;4798:43:27;:64;4775:3;;4731:146;;;-1:-1:-1;4588:3:27;;4549:338;;;;4188:705;;;;;;:::o;3070:673::-;3183:18;3226:23;3242:6;3226:15;:23::i;:::-;3213:36;-1:-1:-1;3264:27:27;;;3260:85;;3314:20;;;;;;;;;;;;;;3260:85;3456:9;3451:286;3471:17;;;3451:286;;;3514:9;3509:218;3529:14;;;3509:218;;;3620:1;3581:6;;3588:1;3581:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3572:29;;;3602:6;3610:3;;3614:1;3610:6;;;;;;;:::i;:::-;3572:45;;;;;;;;;;5927:42:28;5915:55;;;3572:45:27;;;5897:74:28;3610:6:27;;;;;;;5987:18:28;;;5980:34;-1:-1:-1;5870:18:28;;3572:45:27;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:49;3568:145;;;3659:16;:27;3676:6;;3683:1;3676:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3659:27;;;;;;;;;;;;;;;:35;3687:3;;3691:1;3687:6;;;;;;;:::i;:::-;;;;;;;3659:35;;;;;;;;;;;;3645:49;;;;;:::i;:::-;;;3568:145;3545:3;;3509:218;;;-1:-1:-1;3490:3:27;;3451:286;;;;3070:673;;;;;;;:::o;864:152:1:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1156:184:25:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:25:o;2453:175:27:-;2554:7;2580:41;:39;:41::i;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;745:42:28;733:55;;4543:25:6;;;715:74:28;688:18;;4543:25:6;543:252:28;4504:64:6;4413:162;;:::o;2867:197:27:-;2977:19;;;2931:7;2977:19;;;;;;;;;;;3013:21;;:44;;3041:16;3013:44;;;3037:1;3013:44;3006:51;2867:197;-1:-1:-1;;;2867:197:27:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;745:42:28;733:55;;3243:24:6;;;715:74:28;688:18;;3243:24:6;543:252:28;3207:60:6;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;1994:290:25:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:25;;2133:116;;;-1:-1:-1;2265:12:25;1994:290;-1:-1:-1;;;1994:290:25:o;784:745:12:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:12;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:12;;784:745::o;1043:95::-;462:23:15;466:14;462:23;449:37;445:2;441:46;1372:19:12;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:12;;;;;:39;7760:15:28;;;1396:59:12;;;7742:34:28;1444:10:12;7792:18:28;;;7785:43;1396:19:12;:39;;;;7654:18:28;;1396:59:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:12:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;8879:147:25:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;-1:-1:-1;9100:13:25;9191:15;;;9226:4;9219:15;9272:4;9256:21;;;8879:147::o;14:332:28:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;800:367;863:8;873:6;927:3;920:4;912:6;908:17;904:27;894:55;;945:1;942;935:12;894:55;-1:-1:-1;968:20:28;;1011:18;1000:30;;997:50;;;1043:1;1040;1033:12;997:50;1080:4;1072:6;1068:17;1056:29;;1140:3;1133:4;1123:6;1120:1;1116:14;1108:6;1104:27;1100:38;1097:47;1094:67;;;1157:1;1154;1147:12;1094:67;800:367;;;;;:::o;1172:196::-;1240:20;;1300:42;1289:54;;1279:65;;1269:93;;1358:1;1355;1348:12;1269:93;1172:196;;;:::o;1373:717::-;1495:6;1503;1511;1519;1527;1535;1588:3;1576:9;1567:7;1563:23;1559:33;1556:53;;;1605:1;1602;1595:12;1556:53;1641:9;1628:23;1618:33;;1702:2;1691:9;1687:18;1674:32;1729:18;1721:6;1718:30;1715:50;;;1761:1;1758;1751:12;1715:50;1800:70;1862:7;1853:6;1842:9;1838:22;1800:70;:::i;:::-;1889:8;;-1:-1:-1;1774:96:28;-1:-1:-1;1943:38:28;;-1:-1:-1;1977:2:28;1962:18;;1943:38;:::i;:::-;1933:48;;2028:2;2017:9;2013:18;2000:32;1990:42;;2079:3;2068:9;2064:19;2051:33;2041:43;;1373:717;;;;;;;;:::o;2095:186::-;2154:6;2207:2;2195:9;2186:7;2182:23;2178:32;2175:52;;;2223:1;2220;2213:12;2175:52;2246:29;2265:9;2246:29;:::i;2286:180::-;2345:6;2398:2;2386:9;2377:7;2373:23;2369:32;2366:52;;;2414:1;2411;2404:12;2366:52;-1:-1:-1;2437:23:28;;2286:180;-1:-1:-1;2286:180:28:o;2471:254::-;2539:6;2547;2600:2;2588:9;2579:7;2575:23;2571:32;2568:52;;;2616:1;2613;2606:12;2568:52;2639:29;2658:9;2639:29;:::i;:::-;2629:39;2715:2;2700:18;;;;2687:32;;-1:-1:-1;;;2471:254:28:o;3143:1142::-;3355:6;3363;3371;3379;3387;3395;3448:2;3436:9;3427:7;3423:23;3419:32;3416:52;;;3464:1;3461;3454:12;3416:52;3504:9;3491:23;3533:18;3574:2;3566:6;3563:14;3560:34;;;3590:1;3587;3580:12;3560:34;3629:70;3691:7;3682:6;3671:9;3667:22;3629:70;:::i;:::-;3718:8;;-1:-1:-1;3603:96:28;-1:-1:-1;3806:2:28;3791:18;;3778:32;;-1:-1:-1;3822:16:28;;;3819:36;;;3851:1;3848;3841:12;3819:36;3890:72;3954:7;3943:8;3932:9;3928:24;3890:72;:::i;:::-;3981:8;;-1:-1:-1;3864:98:28;-1:-1:-1;4069:2:28;4054:18;;4041:32;;-1:-1:-1;4085:16:28;;;4082:36;;;4114:1;4111;4104:12;4082:36;;4153:72;4217:7;4206:8;4195:9;4191:24;4153:72;:::i;:::-;3143:1142;;;;-1:-1:-1;3143:1142:28;;-1:-1:-1;3143:1142:28;;4244:8;;3143:1142;-1:-1:-1;;;3143:1142:28:o;4290:847::-;4421:6;4429;4437;4445;4453;4506:2;4494:9;4485:7;4481:23;4477:32;4474:52;;;4522:1;4519;4512:12;4474:52;4545:29;4564:9;4545:29;:::i;:::-;4535:39;;4625:2;4614:9;4610:18;4597:32;4648:18;4689:2;4681:6;4678:14;4675:34;;;4705:1;4702;4695:12;4675:34;4744:70;4806:7;4797:6;4786:9;4782:22;4744:70;:::i;:::-;4833:8;;-1:-1:-1;4718:96:28;-1:-1:-1;4921:2:28;4906:18;;4893:32;;-1:-1:-1;4937:16:28;;;4934:36;;;4966:1;4963;4956:12;4934:36;;5005:72;5069:7;5058:8;5047:9;5043:24;5005:72;:::i;:::-;4290:847;;;;-1:-1:-1;4290:847:28;;-1:-1:-1;5096:8:28;;4979:98;4290:847;-1:-1:-1;;;4290:847:28:o;6025:184::-;6077:77;6074:1;6067:88;6174:4;6171:1;6164:15;6198:4;6195:1;6188:15;6214:604;6307:4;6313:6;6373:11;6360:25;6463:66;6452:8;6436:14;6432:29;6428:102;6408:18;6404:127;6394:155;;6545:1;6542;6535:12;6394:155;6572:33;;6624:20;;;-1:-1:-1;6667:18:28;6656:30;;6653:50;;;6699:1;6696;6689:12;6653:50;6732:4;6720:17;;-1:-1:-1;6783:1:28;6779:14;;;6763;6759:35;6749:46;;6746:66;;;6808:1;6805;6798:12;6823:184;6893:6;6946:2;6934:9;6925:7;6921:23;6917:32;6914:52;;;6962:1;6959;6952:12;6914:52;-1:-1:-1;6985:16:28;;6823:184;-1:-1:-1;6823:184:28:o;7012:::-;7064:77;7061:1;7054:88;7161:4;7158:1;7151:15;7185:4;7182:1;7175:15;7201:168;7274:9;;;7305;;7322:15;;;7316:22;;7302:37;7292:71;;7343:18;;:::i;7374:128::-;7441:9;;;7462:11;;;7459:37;;;7476:18;;:::i;7839:277::-;7906:6;7959:2;7947:9;7938:7;7934:23;7930:32;7927:52;;;7975:1;7972;7965:12;7927:52;8007:9;8001:16;8060:5;8053:13;8046:21;8039:5;8036:32;8026:60;;8082:1;8079;8072:12"},"gasEstimates":{"creation":{"codeDepositCost":"1000200","executionCost":"infinite","totalCost":"infinite"},"external":{"claim(bytes32,bytes32[],address,uint256,uint256)":"infinite","claimStatus(bytes32)":"2483","forwarderRegistry()":"infinite","getMultiplier(address,address[],uint256[])":"infinite","isTrustedForwarder(address)":"infinite","merkleRoots(bytes32)":"2527","multipliers(address)":"2555","owner()":"infinite","setMerkleRoot(bytes32)":"infinite","setTokenMultipliers(address[],uint256[][],uint256[][])":"infinite","supportsInterface(bytes4)":"infinite","tokenMultipliers(address,uint256)":"2667","transferOwnership(address)":"infinite"},"internal":{"_baseMultiplier(address)":"2242","_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"claim(bytes32,bytes32[],address,uint256,uint256)":"3ec6004f","claimStatus(bytes32)":"e3a0ce09","forwarderRegistry()":"2b4c9f16","getMultiplier(address,address[],uint256[])":"e18ea418","isTrustedForwarder(address)":"572b6c05","merkleRoots(bytes32)":"fe5a5377","multipliers(address)":"ac524f3d","owner()":"8da5cb5b","setMerkleRoot(bytes32)":"7cb64759","setTokenMultipliers(address[],uint256[][],uint256[][])":"cc668cf0","supportsInterface(bytes4)":"01ffc9a7","tokenMultipliers(address,uint256)":"851f3bd2","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrays\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"InvalidMultiplier\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"MerkleRootAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"SetMerkleRoot\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"batchId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"merkleRoots\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"multipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"tokenIds\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_multipliers\",\"type\":\"uint256[][]\"}],\"name\":\"setTokenMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to claim multiplier based on a Merkle proof\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"params\":{\"merkleRoot\":\"The Merkle root for the claim.\",\"proof\":\"The Merkle proof for the claim.\",\"recipient\":\"The recipient of the payout.\"}},\"constructor\":{\"params\":{\"forwarderRegistry\":\"The forwarder registry contract.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"setMerkleRoot(bytes32)\":{\"params\":{\"merkleRoot\":\"The Merkle root of the claim.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Anichess Multiplier Merkle Claim Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadyClaimed(address,uint256)\":[{\"notice\":\"Error thrown when the payout has already been claimed.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrays()\":[{\"notice\":\"Error thrown when the array lengths are inconsistent.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"SetMerkleRoot(bytes32)\":{\"notice\":\"Event emitted when a merkle root is set.\"}},\"kind\":\"user\",\"methods\":{\"claim(bytes32,bytes32[],address,uint256,uint256)\":{\"notice\":\"Claims the payout for a specific merkleRoot.\"},\"constructor\":{\"notice\":\"Constructor for the AnichessMultiplierMerkleClaim contract.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"setMerkleRoot(bytes32)\":{\"notice\":\"Sets the merkle root\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/merkleClaim/AnichessMultiplier.sol\":\"AnichessMultiplier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0xd9b67a26.\\ninterface IERC1155 {\\n    /// @notice Safely transfers some token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155Received} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferSingle} event.\\n    /// @param from Current token owner.\\n    /// @param to Address of the new token owner.\\n    /// @param id Identifier of the token to transfer.\\n    /// @param value Amount of token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /// @notice Safely transfers a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC1155TokenReceiver-onERC1155BatchReceived} fails, reverts or is rejected.\\n    /// @dev Emits a {TransferBatch} event.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new tokens owner.\\n    /// @param ids Identifiers of the tokens to transfer.\\n    /// @param values Amounts of tokens to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external;\\n\\n    /// @notice Enables or disables an operator's approval.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator Address of the operator.\\n    /// @param approved True to approve the operator, false to revoke its approval.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Retrieves the approval status of an operator for a given owner.\\n    /// @param owner Address of the authorisation giver.\\n    /// @param operator Address of the operator.\\n    /// @return approved True if the operator is approved, false if not.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approved);\\n\\n    /// @notice Retrieves the balance of `id` owned by account `owner`.\\n    /// @param owner The account to retrieve the balance of.\\n    /// @param id The identifier to retrieve the balance of.\\n    /// @return balance The balance of `id` owned by account `owner`.\\n    function balanceOf(address owner, uint256 id) external view returns (uint256 balance);\\n\\n    /// @notice Retrieves the balances of `ids` owned by accounts `owners`.\\n    /// @dev Reverts if `owners` and `ids` have different lengths.\\n    /// @param owners The addresses of the token holders\\n    /// @param ids The identifiers to retrieve the balance of.\\n    /// @return balances The balances of `ids` owned by accounts `owners`.\\n    function balanceOfBatch(address[] calldata owners, uint256[] calldata ids) external view returns (uint256[] memory balances);\\n}\\n\",\"keccak256\":\"0xc73c79ec8b1acdaccb4bbdab1f460043ddb27f3b5300389f6ec672bf0f1c7ae6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/merkleClaim/AnichessMultiplier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n * @title Anichess Multiplier Merkle Claim Contract\\n * @dev This contract allows users to claim multiplier based on a Merkle proof\\n */\\ncontract AnichessMultiplier is ForwarderRegistryContext, ContractOwnership {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using MerkleProof for bytes32[];\\n\\n    mapping(address => uint256) public multipliers;\\n    mapping(bytes32 => bool) public merkleRoots;\\n    mapping(bytes32 => bool) public claimStatus;\\n    mapping(address => mapping(uint256 => uint256)) public tokenMultipliers;\\n\\n    /// @notice Event emitted when a merkle root is set.\\n    event SetMerkleRoot(bytes32 indexed merkleRoot);\\n    event Claimed(address indexed recipient, uint256 indexed batchId, uint256 multiplier);\\n\\n    /// @notice Error thrown when the payout has already been claimed.\\n    error AlreadyClaimed(address recipient, uint256 batchId);\\n    error InvalidProof(address recipient, uint256 batchId);\\n\\n    error MerkleRootAlreadyExists(bytes32 merkleRoot);\\n\\n    error InvalidMerkleRoot(bytes32 merkleRoot);\\n\\n    error InvalidMultiplier(uint256 multiplier);\\n\\n    /// @notice Error thrown when the array lengths are inconsistent.\\n    error InconsistentArrays();\\n\\n    /**\\n     * @notice Constructor for the AnichessMultiplierMerkleClaim contract.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     */\\n    constructor(IForwarderRegistry forwarderRegistry) ForwarderRegistryContext(forwarderRegistry) ContractOwnership(msg.sender) {}\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    function _baseMultiplier(address wallet) internal view returns (uint256) {\\n        uint256 walletMultiplier = multipliers[wallet];\\n        return walletMultiplier == 0 ? 1 : walletMultiplier;\\n    }\\n\\n    function getMultiplier(address wallet, address[] calldata tokens, uint256[] calldata ids) external view returns (uint256 multiplier) {\\n        multiplier = _baseMultiplier(wallet);\\n\\n        if (tokens.length != ids.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        // for each token, check if the wallet has the token and if so, multiply the multiplier\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            for (uint256 j = 0; j < ids.length; j++) {\\n                if (IERC1155(tokens[i]).balanceOf(wallet, ids[j]) > 0) {\\n                    multiplier *= tokenMultipliers[tokens[i]][ids[j]];\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Sets the merkle root\\n     * @param merkleRoot The Merkle root of the claim.\\n     */\\n    function setMerkleRoot(bytes32 merkleRoot) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n\\n        if (merkleRoots[merkleRoot]) {\\n            revert MerkleRootAlreadyExists(merkleRoot);\\n        }\\n\\n        merkleRoots[merkleRoot] = true;\\n        emit SetMerkleRoot(merkleRoot);\\n    }\\n\\n    function setTokenMultipliers(address[] calldata tokens, uint256[][] calldata tokenIds, uint256[][] calldata _multipliers) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (tokens.length != tokenIds.length || tokens.length != _multipliers.length) {\\n            revert InconsistentArrays();\\n        }\\n\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokenIds[i].length != _multipliers[i].length) {\\n                revert InconsistentArrays();\\n            }\\n\\n            for (uint256 j = 0; j < tokenIds[i].length; j++) {\\n                tokenMultipliers[tokens[i]][tokenIds[i][j]] = _multipliers[i][j];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims the payout for a specific merkleRoot.\\n     * @param merkleRoot The Merkle root for the claim.\\n     * @param proof The Merkle proof for the claim.\\n     * @param recipient The recipient of the payout.\\n     */\\n    function claim(bytes32 merkleRoot, bytes32[] calldata proof, address recipient, uint256 multiplier, uint256 batchId) external {\\n        if (!merkleRoots[merkleRoot]) {\\n            revert InvalidMerkleRoot(merkleRoot);\\n        }\\n        if (multipliers[recipient] >= multiplier) {\\n            revert InvalidMultiplier(multiplier);\\n        }\\n        bytes32 leaf = keccak256(abi.encodePacked(recipient, multiplier, batchId));\\n        if (claimStatus[leaf]) {\\n            revert AlreadyClaimed(recipient, batchId);\\n        }\\n        if (!proof.verify(merkleRoot, leaf)) {\\n            revert InvalidProof(recipient, batchId);\\n        }\\n\\n        multipliers[recipient] = multiplier;\\n        claimStatus[leaf] = true;\\n\\n        emit Claimed(recipient, batchId, multiplier);\\n    }\\n}\\n\",\"keccak256\":\"0xcbfa8cc9d0a0a2510f4b0faef67def3bfc2fdf01eba50c8e6ed7678bca6a1506\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2848,"contract":"contracts/merkleClaim/AnichessMultiplier.sol:AnichessMultiplier","label":"multipliers","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":2852,"contract":"contracts/merkleClaim/AnichessMultiplier.sol:AnichessMultiplier","label":"merkleRoots","offset":0,"slot":"1","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2856,"contract":"contracts/merkleClaim/AnichessMultiplier.sol:AnichessMultiplier","label":"claimStatus","offset":0,"slot":"2","type":"t_mapping(t_bytes32,t_bool)"},{"astId":2862,"contract":"contracts/merkleClaim/AnichessMultiplier.sol:AnichessMultiplier","label":"tokenMultipliers","offset":0,"slot":"3","type":"t_mapping(t_address,t_mapping(t_uint256,t_uint256))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_address,t_mapping(t_uint256,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(uint256 => uint256))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_bytes32,t_bool)":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadyClaimed(address,uint256)":[{"notice":"Error thrown when the payout has already been claimed."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrays()":[{"notice":"Error thrown when the array lengths are inconsistent."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"SetMerkleRoot(bytes32)":{"notice":"Event emitted when a merkle root is set."}},"kind":"user","methods":{"claim(bytes32,bytes32[],address,uint256,uint256)":{"notice":"Claims the payout for a specific merkleRoot."},"constructor":{"notice":"Constructor for the AnichessMultiplierMerkleClaim contract."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"setMerkleRoot(bytes32)":{"notice":"Sets the merkle root"},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}}}}}