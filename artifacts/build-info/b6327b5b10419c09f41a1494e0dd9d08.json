{"id":"b6327b5b10419c09f41a1494e0dd9d08","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC1155TokenReceiver} from \"./interfaces/IERC1155TokenReceiver.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"./../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\ninterface IERC1155Burnable {\n    /// @notice Burns some token.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\n    /// @dev Emits an {IERC1155-TransferSingle} event.\n    /// @param from Address of the current token owner.\n    /// @param id Identifier of the token to burn.\n    /// @param value Amount of token to burn.\n    function burnFrom(address from, uint256 id, uint256 value) external;\n\n    /// @notice Burns multiple tokens.\n    /// @dev Reverts if `ids` and `values` have different lengths.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\n    /// @dev Emits an {IERC1155-TransferBatch} event.\n    /// @param from Address of the current tokens owner.\n    /// @param ids Identifiers of the tokens to burn.\n    /// @param values Amounts of tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\ninterface IERC1155TokenReceiver {\n    /// @notice Handles the receipt of a single ERC1155 token type.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n    /// @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param id The ID of the token being transferred\n    /// @param value The amount of tokens being transferred\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n\n    /// @notice Handles the receipt of multiple ERC1155 token types.\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n    /// @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\n    /// @param from The address which previously owned the token\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n    /// @param data Additional data with no specified format\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4 magicValue);\n}\n"},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Tree proofs.\n *\n * The tree and the proofs can be generated using our\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n * You will find a quickstart guide in the readme.\n *\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\n * hashing, or use a hash function other than keccak256 for hashing leaves.\n * This is because the concatenation of a sorted pair of internal nodes in\n * the merkle tree could be reinterpreted as a leaf value.\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\n * against this attack out of the box.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Calldata version of {verify}\n     *\n     * _Available since v4.7._\n     */\n    function verifyCalldata(\n        bytes32[] calldata proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProofCalldata(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Calldata version of {processProof}\n     *\n     * _Available since v4.7._\n     */\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            computedHash = _hashPair(computedHash, proof[i]);\n        }\n        return computedHash;\n    }\n\n    /**\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerify(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProof(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Calldata version of {multiProofVerify}\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function multiProofVerifyCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32 root,\n        bytes32[] memory leaves\n    ) internal pure returns (bool) {\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\n    }\n\n    /**\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n     * respectively.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProof(\n        bytes32[] memory proof,\n        bool[] memory proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    /**\n     * @dev Calldata version of {processMultiProof}.\n     *\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n     *\n     * _Available since v4.7._\n     */\n    function processMultiProofCalldata(\n        bytes32[] calldata proof,\n        bool[] calldata proofFlags,\n        bytes32[] memory leaves\n    ) internal pure returns (bytes32 merkleRoot) {\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\n        // the merkle tree.\n        uint256 leavesLen = leaves.length;\n        uint256 totalHashes = proofFlags.length;\n\n        // Check proof validity.\n        require(leavesLen + proof.length - 1 == totalHashes, \"MerkleProof: invalid multiproof\");\n\n        // The xxxPos values are \"pointers\" to the next value to consume in each array. All accesses are done using\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \"pop\".\n        bytes32[] memory hashes = new bytes32[](totalHashes);\n        uint256 leafPos = 0;\n        uint256 hashPos = 0;\n        uint256 proofPos = 0;\n        // At each step, we compute the next hash using two values:\n        // - a value from the \"main queue\". If not all leaves have been consumed, we get the next leaf, otherwise we\n        //   get the next hash.\n        // - depending on the flag, either another value for the \"main queue\" (merging branches) or an element from the\n        //   `proof` array.\n        for (uint256 i = 0; i < totalHashes; i++) {\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\n            hashes[i] = _hashPair(a, b);\n        }\n\n        if (totalHashes > 0) {\n            return hashes[totalHashes - 1];\n        } else if (leavesLen > 0) {\n            return leaves[0];\n        } else {\n            return proof[0];\n        }\n    }\n\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\n    }\n\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }\n}\n"},"contracts/burn/OrbsBurnPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {ERC1155TokenReceiver} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\n\n/**\n * @title OrbsBurnPool Contract\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\n */\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\n    using MerkleProof for bytes32[];\n\n    /// @notice The denominator for the multiplier.\n    uint256 internal constant _DENOMINATOR = 10_000;\n\n    /// @notice The token ID of RoC for setting the token multiplier.\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\n\n    /// @notice The token weights for calculating Ash.\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\n\n    /// @notice The Riddle Of Chaos multiplier.\n    uint256 public constant ROC_MULTIPLIER = 2;\n\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\n    IERC1155Burnable public immutable ORB_OF_POWER;\n\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\n    IERC1155Burnable public immutable MISSING_ORB;\n\n    /// @notice The initial time of the contract.\n    uint256 public immutable INITIAL_TIME;\n\n    /// @notice The duration of each cycle.\n    uint256 public immutable CYCLE_DURATION;\n\n    /// @notice The maximum cycle.\n    uint256 public immutable MAX_CYCLE;\n\n    /// @notice The Merkle root for setting the puzzleMultiplier.\n    bytes32 public immutable MERKLE_ROOT;\n\n    /// @notice The total amount of ASH generated in each cycle.\n    mapping(uint256 => uint256) public totalAshPerCycle;\n\n    /// @notice The total amount of ASH generated by each user in each cycle.\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\n\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\n    mapping(address => uint256) public orbMultipliers;\n\n    /// @notice Event emitted when ASH are generated.\n    event GenerateAsh(\n        address indexed burner,\n        uint256 indexed cycle,\n        uint256[] ids,\n        uint256[] values,\n        uint256 ash,\n        uint256 totalAsh,\n        uint256 orbMultiplier\n    );\n\n    /// @notice Event emitted when the multiplier info is updated.\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\n\n    /// @notice Error thrown when the token ID is invalid.\n    error InvalidTokenId(address token, uint256 tokenId);\n\n    /// @notice Error thrown when the token is not approved.\n    error InvalidTokenAddress(address token);\n\n    /// @notice Error thrown when the token amount is invalid.\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\n\n    /// @notice Error thrown when the cycle is invalid.\n    error InvalidCycle(uint256 cycle);\n\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\n    error AlreadySetROCMultiplier(address wallet);\n\n    /// @notice Error thrown when the proof is invalid.\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\n\n    /// @notice Error thrown when the cycle duration is invalid.\n    error ZeroCycleDuration();\n\n    /// @notice Error thrown when the cycle is invalid.\n    error ZeroMaxCycle();\n\n    /**\n     * @notice Constructor for the OrbsBurnPool contract.\n     * @param initialTime The initial time of the contract.\n     * @param cycleDuration The duration of each cycle.\n     * @param maxCycle The maximum cycle.\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n     * @param forwarderRegistry The forwarder registry contract.\n     * @dev Throws if the cycle duration is zero.\n     * @dev Throws if the max cycle is zero.\n     */\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb,\n        IForwarderRegistry forwarderRegistry\n    ) ForwarderRegistryContext(forwarderRegistry) {\n        INITIAL_TIME = initialTime;\n\n        if (cycleDuration == 0) {\n            revert ZeroCycleDuration();\n        }\n        CYCLE_DURATION = cycleDuration;\n\n        if (maxCycle == 0) {\n            revert ZeroMaxCycle();\n        }\n        MAX_CYCLE = maxCycle;\n        MERKLE_ROOT = merkleRoot;\n        ORB_OF_POWER = orbOfPower;\n        MISSING_ORB = missingOrb;\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n\n    /**\n     * @notice Get the current cycle.\n     * @return cycle The current cycle.\n     */\n    function currentCycle() public view returns (uint256) {\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\n    }\n\n    /**\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n     * @param from The wallet address.\n     * @param id The token ID.\n     * @param value The token value.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     * @dev Throws if the token multiplier has already been set.\n     */\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\n        if (msg.sender != address(MISSING_ORB)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n        if (id != MISSING_ORB_TOKEN_ID) {\n            revert InvalidTokenId(msg.sender, id);\n        }\n\n        if (value != 1) {\n            revert InvalidTokenValue(msg.sender, id, value);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        uint256 curOrbMultiplier = orbMultipliers[from];\n        if (uint128(curOrbMultiplier) > 0) {\n            revert AlreadySetROCMultiplier(from);\n        }\n\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\n\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\n        if (data.length > 0) {\n            if ((curOrbMultiplier >> 128) == 0) {\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\n                }\n\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\n            }\n        }\n        orbMultipliers[from] = newOrbMultiplier;\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\n\n        return this.onERC1155Received.selector;\n    }\n\n    /**\n     * @notice Burn the tokens and calculate the ash.\n     * @param from The wallet address.\n     * @param ids The token IDs to burn.\n     * @param values The amount of tokens to burn.\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\n     * @return The ERC1155Received selector.\n     * @dev Throws if the token is invalid.\n     * @dev Throws if the cycle is invalid.\n     * @dev Throws if the token ID is invalid.\n     * @dev Throws if the token amount is invalid.\n     */\n    function onERC1155BatchReceived(\n        address,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external override returns (bytes4) {\n        if (msg.sender != address(ORB_OF_POWER)) {\n            revert InvalidTokenAddress(msg.sender);\n        }\n\n        uint256 cycle = currentCycle();\n        if (cycle > MAX_CYCLE) {\n            revert InvalidCycle(cycle);\n        }\n\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\n\n        uint256 ashGenerated = 0;\n        for (uint256 i = 0; i < ids.length; i++) {\n            if (values[i] == 0) {\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\n            }\n\n            if (ids[i] == 1) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\n            } else if (ids[i] == 2) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\n            } else if (ids[i] == 3) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\n            } else if (ids[i] == 4) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\n            } else if (ids[i] == 5) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\n            } else if (ids[i] == 6) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\n            } else if (ids[i] == 7) {\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\n            } else {\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\n            }\n        }\n\n        address userAddr = from;\n\n        // boost the total ash based on the orbMultipliers\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\n\n        if (data.length > 0) {\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\n            if ((curOrbMultiplier >> 128) == 0) {\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\n                }\n\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\n                orbMultipliers[userAddr] = newOrbMultiplier;\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\n                curOrbMultiplier = newOrbMultiplier;\n            }\n\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n        } else {\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\n            if (puzzleGameMultiplierNumerator > 0) {\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\n            }\n        }\n\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\n        if (rocMultiplier > 0) {\n            ashGenerated *= rocMultiplier;\n        }\n\n        // update the user status\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\n        // update the pool status\n        totalAshPerCycle[cycle] += ashGenerated;\n\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\n\n        return this.onERC1155BatchReceived.selector;\n    }\n}\n"},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.22;\n\nimport {OrbsBurnPool} from \"../../burn/OrbsBurnPool.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IERC1155Burnable} from \"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\";\n\ncontract OrbsBurnPoolMock is OrbsBurnPool {\n    constructor(\n        uint256 initialTime,\n        uint256 cycleDuration,\n        uint256 maxCycle,\n        bytes32 merkleRoot,\n        IERC1155Burnable orbOfPower,\n        IERC1155Burnable missingOrb,\n        IForwarderRegistry forwarderRegistry\n    ) OrbsBurnPool(initialTime, cycleDuration, maxCycle, merkleRoot, orbOfPower, missingOrb, forwarderRegistry) {}\n\n    function __msgSender() external view returns (address) {\n        return _msgSender();\n    }\n\n    /// @notice Internal function to access the current msg.data.\n    /// @return The current msg.data value.\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[46],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":30,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":47,"src":"58:49:0","symbolAliases":[{"foreign":{"id":2,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"66:7:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":30,"sourceUnit":148,"src":"108:84:0","symbolAliases":[{"foreign":{"id":4,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"116:25:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"IERC165","nameLocations":["425:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":46,"src":"425:7:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"425:7:0"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"194:191:0","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":29,"linearizedBaseContracts":[29,46],"name":"InterfaceDetection","nameLocation":"403:18:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":12,"libraryName":{"id":9,"name":"InterfaceDetectionStorage","nameLocations":["445:25:0"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"445:25:0"},"nodeType":"UsingForDirective","src":"439:69:0","typeName":{"id":11,"nodeType":"UserDefinedTypeName","pathNode":{"id":10,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:0","501:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"475:32:0"},"referencedDeclaration":57,"src":"475:32:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[45],"body":{"id":27,"nodeType":"Block","src":"618:89:0","statements":[{"expression":{"arguments":[{"id":24,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":15,"src":"688:11:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":20,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"635:25:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":21,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"635:32:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":22,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":23,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:0","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":134,"src":"635:52:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":19,"id":26,"nodeType":"Return","src":"628:72:0"}]},"documentation":{"id":13,"nodeType":"StructuredDocumentation","src":"514:23:0","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":28,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:0","nodeType":"FunctionDefinition","parameters":{"id":16,"nodeType":"ParameterList","parameters":[{"constant":false,"id":15,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:0","nodeType":"VariableDeclaration","scope":28,"src":"569:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":14,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:0"},"returnParameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":28,"src":"612:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":17,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:0"},"scope":29,"src":"542:165:0","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":30,"src":"385:324:0","usedErrors":[],"usedEvents":[]}],"src":"32:678:0"},"id":0},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[34]},"id":35,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":31,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"58:68:1","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":34,"name":"IllegalInterfaceId","nameLocation":"132:18:1","nodeType":"ErrorDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"150:2:1"},"src":"126:27:1"}],"src":"32:122:1"},"id":1},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[46]},"id":47,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":36,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"58:173:2","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":46,"linearizedBaseContracts":[46],"name":"IERC165","nameLocation":"241:7:2","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":38,"nodeType":"StructuredDocumentation","src":"255:340:2","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":45,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:2","nodeType":"FunctionDefinition","parameters":{"id":41,"nodeType":"ParameterList","parameters":[{"constant":false,"id":40,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:2","nodeType":"VariableDeclaration","scope":45,"src":"627:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":39,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:2","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43,"mutability":"mutable","name":"supported","nameLocation":"675:9:2","nodeType":"VariableDeclaration","scope":45,"src":"670:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":42,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:2"},"scope":46,"src":"600:86:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":47,"src":"231:457:2","usedErrors":[],"usedEvents":[]}],"src":"32:657:2"},"id":2},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[46],"IllegalInterfaceId":[34],"InterfaceDetectionStorage":[147]},"id":148,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":48,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":35,"src":"58:76:3","symbolAliases":[{"foreign":{"id":49,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"66:18:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":148,"sourceUnit":47,"src":"135:52:3","symbolAliases":[{"foreign":{"id":51,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"143:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":147,"linearizedBaseContracts":[147],"name":"InterfaceDetectionStorage","nameLocation":"197:25:3","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":57,"members":[{"constant":false,"id":56,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:3","nodeType":"VariableDeclaration","scope":57,"src":"253:43:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":55,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":53,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":54,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:3","nodeType":"StructDefinition","scope":147,"src":"229:74:3","visibility":"public"},{"constant":true,"id":70,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:3","nodeType":"VariableDeclaration","scope":147,"src":"309:136:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":58,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":68,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:3","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":63,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:3","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:3","typeDescriptions":{}}},"id":66,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":67,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:3","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:3","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":60,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":59,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:3","typeDescriptions":{}}},"id":69,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":73,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:3","nodeType":"VariableDeclaration","scope":147,"src":"452:58:3","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":71,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":72,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:3","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":99,"nodeType":"Block","src":"867:141:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":84,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"881:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":85,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"896:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":90,"nodeType":"IfStatement","src":"877:68:3","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":87,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":34,"src":"925:18:3","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"RevertStatement","src":"918:27:3"}},{"expression":{"id":97,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":91,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":77,"src":"955:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":94,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"955:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":95,"indexExpression":{"id":93,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":79,"src":"977:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":96,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"992:9:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":98,"nodeType":"ExpressionStatement","src":"955:46:3"}]},"documentation":{"id":74,"nodeType":"StructuredDocumentation","src":"517:251:3","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":100,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:3","nodeType":"FunctionDefinition","parameters":{"id":82,"nodeType":"ParameterList","parameters":[{"constant":false,"id":77,"mutability":"mutable","name":"s","nameLocation":"819:1:3","nodeType":"VariableDeclaration","scope":100,"src":"804:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":76,"nodeType":"UserDefinedTypeName","pathNode":{"id":75,"name":"Layout","nameLocations":["804:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"804:6:3"},"referencedDeclaration":57,"src":"804:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":79,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:3","nodeType":"VariableDeclaration","scope":100,"src":"822:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":78,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":81,"mutability":"mutable","name":"supported","nameLocation":"847:9:3","nodeType":"VariableDeclaration","scope":100,"src":"842:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":80,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:3"},"returnParameters":{"id":83,"nodeType":"ParameterList","parameters":[],"src":"867:0:3"},"scope":147,"src":"773:235:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":133,"nodeType":"Block","src":"1463:236:3","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":111,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1477:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":112,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":73,"src":"1492:20:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":117,"nodeType":"IfStatement","src":"1473:78:3","trueBody":{"id":116,"nodeType":"Block","src":"1514:37:3","statements":[{"expression":{"hexValue":"66616c7365","id":114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":110,"id":115,"nodeType":"Return","src":"1528:12:3"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":118,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1564:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":120,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":46,"src":"1584:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$46_$","typeString":"type(contract IERC165)"}],"id":119,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":121,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$46","typeString":"type(contract IERC165)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":127,"nodeType":"IfStatement","src":"1560:82:3","trueBody":{"id":126,"nodeType":"Block","src":"1606:36:3","statements":[{"expression":{"hexValue":"74727565","id":124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":110,"id":125,"nodeType":"Return","src":"1620:11:3"}]}},{"expression":{"baseExpression":{"expression":{"id":128,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1658:1:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:3","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":56,"src":"1658:21:3","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":131,"indexExpression":{"id":130,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":106,"src":"1680:11:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":110,"id":132,"nodeType":"Return","src":"1651:41:3"}]},"documentation":{"id":101,"nodeType":"StructuredDocumentation","src":"1014:340:3","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":134,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:3","nodeType":"FunctionDefinition","parameters":{"id":107,"nodeType":"ParameterList","parameters":[{"constant":false,"id":104,"mutability":"mutable","name":"s","nameLocation":"1401:1:3","nodeType":"VariableDeclaration","scope":134,"src":"1386:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":103,"nodeType":"UserDefinedTypeName","pathNode":{"id":102,"name":"Layout","nameLocations":["1386:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1386:6:3"},"referencedDeclaration":57,"src":"1386:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":106,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:3","nodeType":"VariableDeclaration","scope":134,"src":"1404:18:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":105,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:3"},"returnParameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"supported","nameLocation":"1452:9:3","nodeType":"VariableDeclaration","scope":134,"src":"1447:14:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":108,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:3"},"scope":147,"src":"1359:340:3","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":145,"nodeType":"Block","src":"1764:115:3","statements":[{"assignments":[141],"declarations":[{"constant":false,"id":141,"mutability":"mutable","name":"position","nameLocation":"1782:8:3","nodeType":"VariableDeclaration","scope":145,"src":"1774:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":140,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":143,"initialValue":{"id":142,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1793:19:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:3"},{"AST":{"nativeSrc":"1831:42:3","nodeType":"YulBlock","src":"1831:42:3","statements":[{"nativeSrc":"1845:18:3","nodeType":"YulAssignment","src":"1845:18:3","value":{"name":"position","nativeSrc":"1855:8:3","nodeType":"YulIdentifier","src":"1855:8:3"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:3","nodeType":"YulIdentifier","src":"1845:6:3"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":141,"isOffset":false,"isSlot":false,"src":"1855:8:3","valueSize":1},{"declaration":138,"isOffset":false,"isSlot":true,"src":"1845:6:3","suffix":"slot","valueSize":1}],"id":144,"nodeType":"InlineAssembly","src":"1822:51:3"}]},"id":146,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:3","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[],"src":"1720:2:3"},"returnParameters":{"id":139,"nodeType":"ParameterList","parameters":[{"constant":false,"id":138,"mutability":"mutable","name":"s","nameLocation":"1761:1:3","nodeType":"VariableDeclaration","scope":146,"src":"1746:16:3","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":137,"nodeType":"UserDefinedTypeName","pathNode":{"id":136,"name":"Layout","nameLocations":["1746:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"1746:6:3"},"referencedDeclaration":57,"src":"1746:6:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:3"},"scope":147,"src":"1705:174:3","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":148,"src":"189:1692:3","usedErrors":[],"usedEvents":[]}],"src":"32:1850:3"},"id":3},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[196],"ForwarderRegistryContextBase":[316],"IERC2771":[328],"IForwarderRegistry":[342]},"id":197,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":149,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":197,"sourceUnit":343,"src":"58:71:4","symbolAliases":[{"foreign":{"id":150,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"66:18:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":197,"sourceUnit":329,"src":"130:51:4","symbolAliases":[{"foreign":{"id":152,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":328,"src":"138:8:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":197,"sourceUnit":317,"src":"182:85:4","symbolAliases":[{"foreign":{"id":154,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"190:28:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":157,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:4"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"575:28:4"},"id":158,"nodeType":"InheritanceSpecifier","src":"575:28:4"},{"baseName":{"id":159,"name":"IERC2771","nameLocations":["605:8:4"],"nodeType":"IdentifierPath","referencedDeclaration":328,"src":"605:8:4"},"id":160,"nodeType":"InheritanceSpecifier","src":"605:8:4"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":156,"nodeType":"StructuredDocumentation","src":"269:260:4","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":196,"linearizedBaseContracts":[196,328,316],"name":"ForwarderRegistryContext","nameLocation":"547:24:4","nodeType":"ContractDefinition","nodes":[{"body":{"id":169,"nodeType":"Block","src":"720:2:4","statements":[]},"id":170,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":166,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":163,"src":"700:18:4","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"id":167,"kind":"baseConstructorSpecifier","modifierName":{"id":165,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:4"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"671:28:4"},"nodeType":"ModifierInvocation","src":"671:48:4"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":164,"nodeType":"ParameterList","parameters":[{"constant":false,"id":163,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:4","nodeType":"VariableDeclaration","scope":170,"src":"632:37:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":162,"nodeType":"UserDefinedTypeName","pathNode":{"id":161,"name":"IForwarderRegistry","nameLocations":["632:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"632:18:4"},"referencedDeclaration":342,"src":"632:18:4","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:4"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[],"src":"720:0:4"},"scope":196,"src":"620:102:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":178,"nodeType":"Block","src":"800:43:4","statements":[{"expression":{"id":176,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"817:19:4","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":175,"id":177,"nodeType":"Return","src":"810:26:4"}]},"functionSelector":"2b4c9f16","id":179,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:4","nodeType":"FunctionDefinition","parameters":{"id":171,"nodeType":"ParameterList","parameters":[],"src":"754:2:4"},"returnParameters":{"id":175,"nodeType":"ParameterList","parameters":[{"constant":false,"id":174,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":179,"src":"780:18:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":173,"nodeType":"UserDefinedTypeName","pathNode":{"id":172,"name":"IForwarderRegistry","nameLocations":["780:18:4"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"780:18:4"},"referencedDeclaration":342,"src":"780:18:4","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:4"},"scope":196,"src":"728:115:4","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[327],"body":{"id":194,"nodeType":"Block","src":"962:65:4","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":187,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":182,"src":"979:9:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":190,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"1000:19:4","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}],"id":189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:4","typeDescriptions":{}}},"id":191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":186,"id":193,"nodeType":"Return","src":"972:48:4"}]},"documentation":{"id":180,"nodeType":"StructuredDocumentation","src":"849:24:4","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":195,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:4","nodeType":"FunctionDefinition","parameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":182,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:4","nodeType":"VariableDeclaration","scope":195,"src":"906:17:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":181,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:4"},"returnParameters":{"id":186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":185,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":195,"src":"956:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":184,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:4","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:4"},"scope":196,"src":"878:149:4","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":197,"src":"529:500:4","usedErrors":[],"usedEvents":[]}],"src":"32:998:4"},"id":4},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[371],"ForwarderRegistryContextBase":[316],"IForwarderRegistry":[342]},"id":317,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":198,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":200,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":317,"sourceUnit":343,"src":"58:74:5","symbolAliases":[{"foreign":{"id":199,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"66:18:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":202,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":317,"sourceUnit":372,"src":"133:67:5","symbolAliases":[{"foreign":{"id":201,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"141:15:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":203,"nodeType":"StructuredDocumentation","src":"202:243:5","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":316,"linearizedBaseContracts":[316],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:5","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":206,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:5","nodeType":"VariableDeclaration","scope":316,"src":"498:57:5","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":205,"nodeType":"UserDefinedTypeName","pathNode":{"id":204,"name":"IForwarderRegistry","nameLocations":["498:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"498:18:5"},"referencedDeclaration":342,"src":"498:18:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":216,"nodeType":"Block","src":"612:56:5","statements":[{"expression":{"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":212,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"622:19:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":213,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"644:17:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"src":"622:39:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"id":215,"nodeType":"ExpressionStatement","src":"622:39:5"}]},"id":217,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:5","nodeType":"VariableDeclaration","scope":217,"src":"574:36:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":208,"nodeType":"UserDefinedTypeName","pathNode":{"id":207,"name":"IForwarderRegistry","nameLocations":["574:18:5"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"574:18:5"},"referencedDeclaration":342,"src":"574:18:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:5"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[],"src":"612:0:5"},"scope":316,"src":"562:106:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":266,"nodeType":"Block","src":"846:683:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":233,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":223,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":225,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:5","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":226,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:5","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":228,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:5","memberName":"data","nodeType":"MemberAccess","src":"1074:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:5","memberName":"length","nodeType":"MemberAccess","src":"1074:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:5","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":238,"nodeType":"IfStatement","src":"1043:95:5","trueBody":{"id":237,"nodeType":"Block","src":"1096:42:5","statements":[{"expression":{"expression":{"id":234,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":222,"id":236,"nodeType":"Return","src":"1110:17:5"}]}},{"assignments":[240],"declarations":[{"constant":false,"id":240,"mutability":"mutable","name":"sender","nameLocation":"1156:6:5","nodeType":"VariableDeclaration","scope":266,"src":"1148:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":244,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":241,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"1165:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$371_$","typeString":"type(library ERC2771Calldata)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:5","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":353,"src":"1165:25:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":243,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:5"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":245,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":249,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"1372:19:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}],"id":248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":247,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:5","typeDescriptions":{}}},"id":250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":254,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1436:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":255,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":256,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":252,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"1396:19:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"id":253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:5","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":341,"src":"1396:39:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":257,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":262,"nodeType":"IfStatement","src":"1346:149:5","trueBody":{"id":261,"nodeType":"Block","src":"1457:38:5","statements":[{"expression":{"id":259,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":240,"src":"1478:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":222,"id":260,"nodeType":"Return","src":"1471:13:5"}]}},{"expression":{"expression":{"id":263,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":222,"id":265,"nodeType":"Return","src":"1505:17:5"}]},"documentation":{"id":218,"nodeType":"StructuredDocumentation","src":"674:105:5","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":267,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:5","nodeType":"FunctionDefinition","parameters":{"id":219,"nodeType":"ParameterList","parameters":[],"src":"803:2:5"},"returnParameters":{"id":222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":267,"src":"837:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":220,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:5"},"scope":316,"src":"784:745:5","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":314,"nodeType":"Block","src":"1710:668:5","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":283,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":273,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:5","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":275,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:5","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:5","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":278,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:5","memberName":"data","nodeType":"MemberAccess","src":"1938:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:5","memberName":"length","nodeType":"MemberAccess","src":"1938:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:5","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":288,"nodeType":"IfStatement","src":"1907:93:5","trueBody":{"id":287,"nodeType":"Block","src":"1960:40:5","statements":[{"expression":{"expression":{"id":284,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:5","memberName":"data","nodeType":"MemberAccess","src":"1981:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":272,"id":286,"nodeType":"Return","src":"1974:15:5"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":289,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":293,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2183:19:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}],"id":292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:5","typeDescriptions":{}}},"id":294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":298,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"2247:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$371_$","typeString":"type(library ERC2771Calldata)"}},"id":299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:5","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":353,"src":"2247:25:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":300,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":301,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:5","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":296,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":206,"src":"2207:19:5","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"id":297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:5","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":341,"src":"2207:39:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":310,"nodeType":"IfStatement","src":"2157:189:5","trueBody":{"id":309,"nodeType":"Block","src":"2289:57:5","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":305,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"2310:15:5","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$371_$","typeString":"type(library ERC2771Calldata)"}},"id":306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:5","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":370,"src":"2310:23:5","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":272,"id":308,"nodeType":"Return","src":"2303:32:5"}]}},{"expression":{"expression":{"id":311,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:5","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:5","memberName":"data","nodeType":"MemberAccess","src":"2363:8:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":272,"id":313,"nodeType":"Return","src":"2356:15:5"}]},"documentation":{"id":268,"nodeType":"StructuredDocumentation","src":"1535:103:5","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":315,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:5","nodeType":"FunctionDefinition","parameters":{"id":269,"nodeType":"ParameterList","parameters":[],"src":"1660:2:5"},"returnParameters":{"id":272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":315,"src":"1694:14:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":270,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:5"},"scope":316,"src":"1643:735:5","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":317,"src":"445:1935:5","usedErrors":[],"usedEvents":[]}],"src":"32:2349:5"},"id":5},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[328]},"id":329,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":318,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"58:110:6","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":328,"linearizedBaseContracts":[328],"name":"IERC2771","nameLocation":"178:8:6","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":320,"nodeType":"StructuredDocumentation","src":"193:171:6","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":327,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:6","nodeType":"FunctionDefinition","parameters":{"id":323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":322,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:6","nodeType":"VariableDeclaration","scope":327,"src":"397:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":321,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:6"},"returnParameters":{"id":326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":325,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:6","nodeType":"VariableDeclaration","scope":327,"src":"439:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":324,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:6"},"scope":328,"src":"369:86:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":329,"src":"168:289:6","usedErrors":[],"usedEvents":[]}],"src":"32:426:6"},"id":6},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[342]},"id":343,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":330,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":331,"nodeType":"StructuredDocumentation","src":"58:143:7","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":342,"linearizedBaseContracts":[342],"name":"IForwarderRegistry","nameLocation":"211:18:7","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":332,"nodeType":"StructuredDocumentation","src":"236:314:7","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":341,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:7","nodeType":"FunctionDefinition","parameters":{"id":337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":334,"mutability":"mutable","name":"sender","nameLocation":"592:6:7","nodeType":"VariableDeclaration","scope":341,"src":"584:14:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":333,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":336,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:7","nodeType":"VariableDeclaration","scope":341,"src":"600:17:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":335,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:7"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":339,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:7","nodeType":"VariableDeclaration","scope":341,"src":"642:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":338,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:7"},"scope":342,"src":"555:104:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":343,"src":"201:460:7","usedErrors":[],"usedEvents":[]}],"src":"32:630:7"},"id":7},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[371]},"id":372,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":344,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":345,"nodeType":"StructuredDocumentation","src":"58:144:8","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":371,"linearizedBaseContracts":[371],"name":"ERC2771Calldata","nameLocation":"210:15:8","nodeType":"ContractDefinition","nodes":[{"body":{"id":352,"nodeType":"Block","src":"398:105:8","statements":[{"AST":{"nativeSrc":"417:80:8","nodeType":"YulBlock","src":"417:80:8","statements":[{"nativeSrc":"431:56:8","nodeType":"YulAssignment","src":"431:56:8","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:8","nodeType":"YulLiteral","src":"445:2:8","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:8","nodeType":"YulIdentifier","src":"466:12:8"},"nativeSrc":"466:14:8","nodeType":"YulFunctionCall","src":"466:14:8"},{"kind":"number","nativeSrc":"482:2:8","nodeType":"YulLiteral","src":"482:2:8","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:8","nodeType":"YulIdentifier","src":"462:3:8"},"nativeSrc":"462:23:8","nodeType":"YulFunctionCall","src":"462:23:8"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:8","nodeType":"YulIdentifier","src":"449:12:8"},"nativeSrc":"449:37:8","nodeType":"YulFunctionCall","src":"449:37:8"}],"functionName":{"name":"shr","nativeSrc":"441:3:8","nodeType":"YulIdentifier","src":"441:3:8"},"nativeSrc":"441:46:8","nodeType":"YulFunctionCall","src":"441:46:8"},"variableNames":[{"name":"sender","nativeSrc":"431:6:8","nodeType":"YulIdentifier","src":"431:6:8"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":349,"isOffset":false,"isSlot":false,"src":"431:6:8","valueSize":1}],"id":351,"nodeType":"InlineAssembly","src":"408:89:8"}]},"documentation":{"id":346,"nodeType":"StructuredDocumentation","src":"232:101:8","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":353,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:8","nodeType":"FunctionDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[],"src":"356:2:8"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"sender","nameLocation":"390:6:8","nodeType":"VariableDeclaration","scope":353,"src":"382:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:8"},"scope":371,"src":"338:165:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":369,"nodeType":"Block","src":"679:89:8","statements":[{"id":368,"nodeType":"UncheckedBlock","src":"689:73:8","statements":[{"expression":{"baseExpression":{"expression":{"id":359,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:8","memberName":"data","nodeType":"MemberAccess","src":"720:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":361,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:8","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:8","memberName":"data","nodeType":"MemberAccess","src":"730:8:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:8","memberName":"length","nodeType":"MemberAccess","src":"730:15:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:8","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":358,"id":367,"nodeType":"Return","src":"713:38:8"}]}]},"documentation":{"id":354,"nodeType":"StructuredDocumentation","src":"509:102:8","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":370,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:8","nodeType":"FunctionDefinition","parameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"632:2:8"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":357,"mutability":"mutable","name":"data","nameLocation":"673:4:8","nodeType":"VariableDeclaration","scope":370,"src":"658:19:8","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":356,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:8"},"scope":371,"src":"616:152:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":372,"src":"202:568:8","usedErrors":[],"usedEvents":[]}],"src":"32:739:8"},"id":8},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","exportedSymbols":{"ERC1155TokenReceiver":[406],"IERC1155TokenReceiver":[470],"InterfaceDetection":[29],"InterfaceDetectionStorage":[147]},"id":407,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":373,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","file":"./interfaces/IERC1155TokenReceiver.sol","id":375,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":471,"src":"58:77:9","symbolAliases":[{"foreign":{"id":374,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"66:21:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":377,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":148,"src":"136:104:9","symbolAliases":[{"foreign":{"id":376,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"144:25:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../../introspection/InterfaceDetection.sol","id":379,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":407,"sourceUnit":30,"src":"241:80:9","symbolAliases":[{"foreign":{"id":378,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":29,"src":"249:18:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":381,"name":"IERC1155TokenReceiver","nameLocations":["541:21:9"],"nodeType":"IdentifierPath","referencedDeclaration":470,"src":"541:21:9"},"id":382,"nodeType":"InheritanceSpecifier","src":"541:21:9"},{"baseName":{"id":383,"name":"InterfaceDetection","nameLocations":["564:18:9"],"nodeType":"IdentifierPath","referencedDeclaration":29,"src":"564:18:9"},"id":384,"nodeType":"InheritanceSpecifier","src":"564:18:9"}],"canonicalName":"ERC1155TokenReceiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":380,"nodeType":"StructuredDocumentation","src":"323:176:9","text":"@title ERC1155 Multi Token Standard, Token Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":406,"linearizedBaseContracts":[406,29,46,470],"name":"ERC1155TokenReceiver","nameLocation":"517:20:9","nodeType":"ContractDefinition","nodes":[{"global":false,"id":388,"libraryName":{"id":385,"name":"InterfaceDetectionStorage","nameLocations":["595:25:9"],"nodeType":"IdentifierPath","referencedDeclaration":147,"src":"595:25:9"},"nodeType":"UsingForDirective","src":"589:69:9","typeName":{"id":387,"nodeType":"UserDefinedTypeName","pathNode":{"id":386,"name":"InterfaceDetectionStorage.Layout","nameLocations":["625:25:9","651:6:9"],"nodeType":"IdentifierPath","referencedDeclaration":57,"src":"625:32:9"},"referencedDeclaration":57,"src":"625:32:9","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":404,"nodeType":"Block","src":"770:120:9","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":398,"name":"IERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":470,"src":"842:21:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$470_$","typeString":"type(contract IERC1155TokenReceiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC1155TokenReceiver_$470_$","typeString":"type(contract IERC1155TokenReceiver)"}],"id":397,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"837:4:9","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"837:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC1155TokenReceiver_$470","typeString":"type(contract IERC1155TokenReceiver)"}},"id":400,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:11:9","memberName":"interfaceId","nodeType":"MemberAccess","src":"837:39:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":401,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"878:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":392,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":147,"src":"780:25:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$147_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":394,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:6:9","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":146,"src":"780:32:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$57_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":396,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"815:21:9","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":100,"src":"780:56:9","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$57_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$57_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"780:103:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":403,"nodeType":"ExpressionStatement","src":"780:103:9"}]},"documentation":{"id":389,"nodeType":"StructuredDocumentation","src":"664:87:9","text":"@notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"id":405,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[],"src":"767:2:9"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"770:0:9"},"scope":406,"src":"756:134:9","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":407,"src":"499:393:9","usedErrors":[34],"usedEvents":[]}],"src":"32:861:9"},"id":9},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","exportedSymbols":{"IERC1155Burnable":[432]},"id":433,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":408,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"33:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":409,"nodeType":"StructuredDocumentation","src":"59:196:10","text":"@title ERC1155 Multi Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1."},"fullyImplemented":false,"id":432,"linearizedBaseContracts":[432],"name":"IERC1155Burnable","nameLocation":"265:16:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"288:391:10","text":"@notice Burns some token.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance of `id`.\n @dev Emits an {IERC1155-TransferSingle} event.\n @param from Address of the current token owner.\n @param id Identifier of the token to burn.\n @param value Amount of token to burn."},"functionSelector":"124d91e5","id":419,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"693:8:10","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":412,"mutability":"mutable","name":"from","nameLocation":"710:4:10","nodeType":"VariableDeclaration","scope":419,"src":"702:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":411,"name":"address","nodeType":"ElementaryTypeName","src":"702:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"id","nameLocation":"724:2:10","nodeType":"VariableDeclaration","scope":419,"src":"716:10:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":413,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"value","nameLocation":"736:5:10","nodeType":"VariableDeclaration","scope":419,"src":"728:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":415,"name":"uint256","nodeType":"ElementaryTypeName","src":"728:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"701:41:10"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"751:0:10"},"scope":432,"src":"684:68:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":420,"nodeType":"StructuredDocumentation","src":"758:478:10","text":"@notice Burns multiple tokens.\n @dev Reverts if `ids` and `values` have different lengths.\n @dev Reverts if the sender is not `from` and has not been approved by `from`.\n @dev Reverts if `from` has an insufficient balance for any of `ids`.\n @dev Emits an {IERC1155-TransferBatch} event.\n @param from Address of the current tokens owner.\n @param ids Identifiers of the tokens to burn.\n @param values Amounts of tokens to burn."},"functionSelector":"80534934","id":431,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1250:13:10","nodeType":"FunctionDefinition","parameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":422,"mutability":"mutable","name":"from","nameLocation":"1272:4:10","nodeType":"VariableDeclaration","scope":431,"src":"1264:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":421,"name":"address","nodeType":"ElementaryTypeName","src":"1264:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":425,"mutability":"mutable","name":"ids","nameLocation":"1297:3:10","nodeType":"VariableDeclaration","scope":431,"src":"1278:22:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":423,"name":"uint256","nodeType":"ElementaryTypeName","src":"1278:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":424,"nodeType":"ArrayTypeName","src":"1278:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":428,"mutability":"mutable","name":"values","nameLocation":"1321:6:10","nodeType":"VariableDeclaration","scope":431,"src":"1302:25:10","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":426,"name":"uint256","nodeType":"ElementaryTypeName","src":"1302:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":427,"nodeType":"ArrayTypeName","src":"1302:9:10","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1263:65:10"},"returnParameters":{"id":430,"nodeType":"ParameterList","parameters":[],"src":"1337:0:10"},"scope":432,"src":"1241:97:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":433,"src":"255:1085:10","usedErrors":[],"usedEvents":[]}],"src":"33:1308:10"},"id":10},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol","exportedSymbols":{"IERC1155TokenReceiver":[470]},"id":471,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":434,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1155TokenReceiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":435,"nodeType":"StructuredDocumentation","src":"58:284:11","text":"@title ERC1155 Multi Token Standard, Tokens Receiver.\n @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-1155\n @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0."},"fullyImplemented":false,"id":470,"linearizedBaseContracts":[470],"name":"IERC1155TokenReceiver","nameLocation":"352:21:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":436,"nodeType":"StructuredDocumentation","src":"380:914:11","text":"@notice Handles the receipt of a single ERC1155 token type.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\n @dev Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param id The ID of the token being transferred\n @param value The amount of tokens being transferred\n @param data Additional data with no specified format\n @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it."},"functionSelector":"f23a6e61","id":451,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"1308:17:11","nodeType":"FunctionDefinition","parameters":{"id":447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":438,"mutability":"mutable","name":"operator","nameLocation":"1334:8:11","nodeType":"VariableDeclaration","scope":451,"src":"1326:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":437,"name":"address","nodeType":"ElementaryTypeName","src":"1326:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":440,"mutability":"mutable","name":"from","nameLocation":"1352:4:11","nodeType":"VariableDeclaration","scope":451,"src":"1344:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":439,"name":"address","nodeType":"ElementaryTypeName","src":"1344:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":442,"mutability":"mutable","name":"id","nameLocation":"1366:2:11","nodeType":"VariableDeclaration","scope":451,"src":"1358:10:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":441,"name":"uint256","nodeType":"ElementaryTypeName","src":"1358:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":444,"mutability":"mutable","name":"value","nameLocation":"1378:5:11","nodeType":"VariableDeclaration","scope":451,"src":"1370:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":443,"name":"uint256","nodeType":"ElementaryTypeName","src":"1370:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":446,"mutability":"mutable","name":"data","nameLocation":"1400:4:11","nodeType":"VariableDeclaration","scope":451,"src":"1385:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":445,"name":"bytes","nodeType":"ElementaryTypeName","src":"1385:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1325:80:11"},"returnParameters":{"id":450,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"magicValue","nameLocation":"1431:10:11","nodeType":"VariableDeclaration","scope":451,"src":"1424:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":448,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1424:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1423:19:11"},"scope":470,"src":"1299:144:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":452,"nodeType":"StructuredDocumentation","src":"1449:1062:11","text":"@notice Handles the receipt of multiple ERC1155 token types.\n @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\n @dev Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.\n @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\n @param operator The address which initiated the batch transfer (i.e. msg.sender)\n @param from The address which previously owned the token\n @param ids An array containing ids of each token being transferred (order and length must match _values array)\n @param values An array containing amounts of each token being transferred (order and length must match _ids array)\n @param data Additional data with no specified format\n @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it."},"functionSelector":"bc197c81","id":469,"implemented":false,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"2525:22:11","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":454,"mutability":"mutable","name":"operator","nameLocation":"2565:8:11","nodeType":"VariableDeclaration","scope":469,"src":"2557:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":453,"name":"address","nodeType":"ElementaryTypeName","src":"2557:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":456,"mutability":"mutable","name":"from","nameLocation":"2591:4:11","nodeType":"VariableDeclaration","scope":469,"src":"2583:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":455,"name":"address","nodeType":"ElementaryTypeName","src":"2583:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":459,"mutability":"mutable","name":"ids","nameLocation":"2624:3:11","nodeType":"VariableDeclaration","scope":469,"src":"2605:22:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":457,"name":"uint256","nodeType":"ElementaryTypeName","src":"2605:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":458,"nodeType":"ArrayTypeName","src":"2605:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":462,"mutability":"mutable","name":"values","nameLocation":"2656:6:11","nodeType":"VariableDeclaration","scope":469,"src":"2637:25:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":460,"name":"uint256","nodeType":"ElementaryTypeName","src":"2637:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":461,"nodeType":"ArrayTypeName","src":"2637:9:11","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"data","nameLocation":"2687:4:11","nodeType":"VariableDeclaration","scope":469,"src":"2672:19:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":463,"name":"bytes","nodeType":"ElementaryTypeName","src":"2672:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2547:150:11"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[{"constant":false,"id":467,"mutability":"mutable","name":"magicValue","nameLocation":"2723:10:11","nodeType":"VariableDeclaration","scope":469,"src":"2716:17:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":466,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2716:6:11","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"2715:19:11"},"scope":470,"src":"2516:219:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":471,"src":"342:2395:11","usedErrors":[],"usedEvents":[]}],"src":"32:2706:11"},"id":11},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","exportedSymbols":{"MerkleProof":[972]},"id":973,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":472,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"118:23:12"},{"abstract":false,"baseContracts":[],"canonicalName":"MerkleProof","contractDependencies":[],"contractKind":"library","documentation":{"id":473,"nodeType":"StructuredDocumentation","src":"143:658:12","text":" @dev These functions deal with verification of Merkle Tree proofs.\n The tree and the proofs can be generated using our\n https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\n You will find a quickstart guide in the readme.\n WARNING: You should avoid using leaf values that are 64 bytes long prior to\n hashing, or use a hash function other than keccak256 for hashing leaves.\n This is because the concatenation of a sorted pair of internal nodes in\n the merkle tree could be reinterpreted as a leaf value.\n OpenZeppelin's JavaScript library generates merkle trees that are safe\n against this attack out of the box."},"fullyImplemented":true,"id":972,"linearizedBaseContracts":[972],"name":"MerkleProof","nameLocation":"810:11:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":493,"nodeType":"Block","src":"1283:57:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":487,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":477,"src":"1313:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":488,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":481,"src":"1320:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":486,"name":"processProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"1300:12:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bytes32) pure returns (bytes32)"}},"id":489,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1300:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":490,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":479,"src":"1329:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1300:33:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":485,"id":492,"nodeType":"Return","src":"1293:40:12"}]},"documentation":{"id":474,"nodeType":"StructuredDocumentation","src":"828:323:12","text":" @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n defined by `root`. For this, a `proof` must be provided, containing\n sibling hashes on the branch from the leaf to the root of the tree. Each\n pair of leaves and each pair of pre-images are assumed to be sorted."},"id":494,"implemented":true,"kind":"function","modifiers":[],"name":"verify","nameLocation":"1165:6:12","nodeType":"FunctionDefinition","parameters":{"id":482,"nodeType":"ParameterList","parameters":[{"constant":false,"id":477,"mutability":"mutable","name":"proof","nameLocation":"1198:5:12","nodeType":"VariableDeclaration","scope":494,"src":"1181:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":475,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1181:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":476,"nodeType":"ArrayTypeName","src":"1181:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":479,"mutability":"mutable","name":"root","nameLocation":"1221:4:12","nodeType":"VariableDeclaration","scope":494,"src":"1213:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":478,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1213:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":481,"mutability":"mutable","name":"leaf","nameLocation":"1243:4:12","nodeType":"VariableDeclaration","scope":494,"src":"1235:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":480,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1235:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1171:82:12"},"returnParameters":{"id":485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":494,"src":"1277:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":483,"name":"bool","nodeType":"ElementaryTypeName","src":"1277:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1276:6:12"},"scope":972,"src":"1156:184:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":514,"nodeType":"Block","src":"1578:65:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":508,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":498,"src":"1616:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":509,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":502,"src":"1623:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":507,"name":"processProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"1595:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bytes32) pure returns (bytes32)"}},"id":510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":511,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":500,"src":"1632:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1595:41:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":506,"id":513,"nodeType":"Return","src":"1588:48:12"}]},"documentation":{"id":495,"nodeType":"StructuredDocumentation","src":"1346:90:12","text":" @dev Calldata version of {verify}\n _Available since v4.7._"},"id":515,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCalldata","nameLocation":"1450:14:12","nodeType":"FunctionDefinition","parameters":{"id":503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":498,"mutability":"mutable","name":"proof","nameLocation":"1493:5:12","nodeType":"VariableDeclaration","scope":515,"src":"1474:24:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":496,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1474:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":497,"nodeType":"ArrayTypeName","src":"1474:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":500,"mutability":"mutable","name":"root","nameLocation":"1516:4:12","nodeType":"VariableDeclaration","scope":515,"src":"1508:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":499,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1508:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":502,"mutability":"mutable","name":"leaf","nameLocation":"1538:4:12","nodeType":"VariableDeclaration","scope":515,"src":"1530:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":501,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1530:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1464:84:12"},"returnParameters":{"id":506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":515,"src":"1572:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":504,"name":"bool","nodeType":"ElementaryTypeName","src":"1572:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1571:6:12"},"scope":972,"src":"1441:202:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":554,"nodeType":"Block","src":"2086:198:12","statements":[{"assignments":[527],"declarations":[{"constant":false,"id":527,"mutability":"mutable","name":"computedHash","nameLocation":"2104:12:12","nodeType":"VariableDeclaration","scope":554,"src":"2096:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":526,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2096:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":529,"initialValue":{"id":528,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"2119:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2096:27:12"},{"body":{"id":550,"nodeType":"Block","src":"2176:73:12","statements":[{"expression":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":541,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"2190:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":543,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"2215:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":544,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"2229:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":546,"indexExpression":{"id":545,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2235:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2229:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":542,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2205:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2205:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2190:48:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":549,"nodeType":"ExpressionStatement","src":"2190:48:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":534,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2153:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":535,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"2157:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2163:6:12","memberName":"length","nodeType":"MemberAccess","src":"2157:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2153:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":551,"initializationExpression":{"assignments":[531],"declarations":[{"constant":false,"id":531,"mutability":"mutable","name":"i","nameLocation":"2146:1:12","nodeType":"VariableDeclaration","scope":551,"src":"2138:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":530,"name":"uint256","nodeType":"ElementaryTypeName","src":"2138:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":533,"initialValue":{"hexValue":"30","id":532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2150:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2138:13:12"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2171:3:12","subExpression":{"id":538,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":531,"src":"2171:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":540,"nodeType":"ExpressionStatement","src":"2171:3:12"},"nodeType":"ForStatement","src":"2133:116:12"},{"expression":{"id":552,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":527,"src":"2265:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":525,"id":553,"nodeType":"Return","src":"2258:19:12"}]},"documentation":{"id":516,"nodeType":"StructuredDocumentation","src":"1649:340:12","text":" @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\n from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n hash matches the root of the tree. When processing the proof, the pairs\n of leafs & pre-images are assumed to be sorted.\n _Available since v4.4._"},"id":555,"implemented":true,"kind":"function","modifiers":[],"name":"processProof","nameLocation":"2003:12:12","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"proof","nameLocation":"2033:5:12","nodeType":"VariableDeclaration","scope":555,"src":"2016:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":517,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":518,"nodeType":"ArrayTypeName","src":"2016:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"leaf","nameLocation":"2048:4:12","nodeType":"VariableDeclaration","scope":555,"src":"2040:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":520,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2040:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:38:12"},"returnParameters":{"id":525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":555,"src":"2077:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":523,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2077:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2076:9:12"},"scope":972,"src":"1994:290:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":594,"nodeType":"Block","src":"2493:198:12","statements":[{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"computedHash","nameLocation":"2511:12:12","nodeType":"VariableDeclaration","scope":594,"src":"2503:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":566,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2503:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":569,"initialValue":{"id":568,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"2526:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2503:27:12"},{"body":{"id":590,"nodeType":"Block","src":"2583:73:12","statements":[{"expression":{"id":588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":581,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2597:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":583,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2622:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"baseExpression":{"id":584,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"2636:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":586,"indexExpression":{"id":585,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"2642:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2636:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":582,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"2612:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2612:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2597:48:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":589,"nodeType":"ExpressionStatement","src":"2597:48:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":574,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"2560:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":575,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"2564:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2570:6:12","memberName":"length","nodeType":"MemberAccess","src":"2564:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2560:16:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":591,"initializationExpression":{"assignments":[571],"declarations":[{"constant":false,"id":571,"mutability":"mutable","name":"i","nameLocation":"2553:1:12","nodeType":"VariableDeclaration","scope":591,"src":"2545:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":570,"name":"uint256","nodeType":"ElementaryTypeName","src":"2545:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":573,"initialValue":{"hexValue":"30","id":572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2557:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2545:13:12"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2578:3:12","subExpression":{"id":578,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"2578:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":580,"nodeType":"ExpressionStatement","src":"2578:3:12"},"nodeType":"ForStatement","src":"2540:116:12"},{"expression":{"id":592,"name":"computedHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"2672:12:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":565,"id":593,"nodeType":"Return","src":"2665:19:12"}]},"documentation":{"id":556,"nodeType":"StructuredDocumentation","src":"2290:96:12","text":" @dev Calldata version of {processProof}\n _Available since v4.7._"},"id":595,"implemented":true,"kind":"function","modifiers":[],"name":"processProofCalldata","nameLocation":"2400:20:12","nodeType":"FunctionDefinition","parameters":{"id":562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"proof","nameLocation":"2440:5:12","nodeType":"VariableDeclaration","scope":595,"src":"2421:24:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":557,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2421:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":558,"nodeType":"ArrayTypeName","src":"2421:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"leaf","nameLocation":"2455:4:12","nodeType":"VariableDeclaration","scope":595,"src":"2447:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2447:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2420:40:12"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":564,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":595,"src":"2484:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2484:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2483:9:12"},"scope":972,"src":"2391:300:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":620,"nodeType":"Block","src":"3234:76:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":613,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":599,"src":"3269:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},{"id":614,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":602,"src":"3276:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},{"id":615,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"3288:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"},{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":612,"name":"processMultiProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":792,"src":"3251:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] memory,bool[] memory,bytes32[] memory) pure returns (bytes32)"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3251:44:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":617,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":604,"src":"3299:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3251:52:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":611,"id":619,"nodeType":"Return","src":"3244:59:12"}]},"documentation":{"id":596,"nodeType":"StructuredDocumentation","src":"2697:350:12","text":" @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\n `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":621,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerify","nameLocation":"3061:16:12","nodeType":"FunctionDefinition","parameters":{"id":608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":599,"mutability":"mutable","name":"proof","nameLocation":"3104:5:12","nodeType":"VariableDeclaration","scope":621,"src":"3087:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":597,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3087:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":598,"nodeType":"ArrayTypeName","src":"3087:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":602,"mutability":"mutable","name":"proofFlags","nameLocation":"3133:10:12","nodeType":"VariableDeclaration","scope":621,"src":"3119:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":600,"name":"bool","nodeType":"ElementaryTypeName","src":"3119:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":601,"nodeType":"ArrayTypeName","src":"3119:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":604,"mutability":"mutable","name":"root","nameLocation":"3161:4:12","nodeType":"VariableDeclaration","scope":621,"src":"3153:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3153:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":607,"mutability":"mutable","name":"leaves","nameLocation":"3192:6:12","nodeType":"VariableDeclaration","scope":621,"src":"3175:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":605,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3175:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":606,"nodeType":"ArrayTypeName","src":"3175:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3077:127:12"},"returnParameters":{"id":611,"nodeType":"ParameterList","parameters":[{"constant":false,"id":610,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":621,"src":"3228:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":609,"name":"bool","nodeType":"ElementaryTypeName","src":"3228:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3227:6:12"},"scope":972,"src":"3052:258:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":646,"nodeType":"Block","src":"3715:84:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":639,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":625,"src":"3758:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},{"id":640,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":628,"src":"3765:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},{"id":641,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"3777:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"},{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}],"id":638,"name":"processMultiProofCalldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":937,"src":"3732:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_calldata_ptr_$_t_array$_t_bool_$dyn_calldata_ptr_$_t_array$_t_bytes32_$dyn_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes32[] calldata,bool[] calldata,bytes32[] memory) pure returns (bytes32)"}},"id":642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3732:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":643,"name":"root","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":630,"src":"3788:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3732:60:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":637,"id":645,"nodeType":"Return","src":"3725:67:12"}]},"documentation":{"id":622,"nodeType":"StructuredDocumentation","src":"3316:200:12","text":" @dev Calldata version of {multiProofVerify}\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":647,"implemented":true,"kind":"function","modifiers":[],"name":"multiProofVerifyCalldata","nameLocation":"3530:24:12","nodeType":"FunctionDefinition","parameters":{"id":634,"nodeType":"ParameterList","parameters":[{"constant":false,"id":625,"mutability":"mutable","name":"proof","nameLocation":"3583:5:12","nodeType":"VariableDeclaration","scope":647,"src":"3564:24:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3564:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":624,"nodeType":"ArrayTypeName","src":"3564:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":628,"mutability":"mutable","name":"proofFlags","nameLocation":"3614:10:12","nodeType":"VariableDeclaration","scope":647,"src":"3598:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":626,"name":"bool","nodeType":"ElementaryTypeName","src":"3598:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":627,"nodeType":"ArrayTypeName","src":"3598:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":630,"mutability":"mutable","name":"root","nameLocation":"3642:4:12","nodeType":"VariableDeclaration","scope":647,"src":"3634:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":629,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3634:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":633,"mutability":"mutable","name":"leaves","nameLocation":"3673:6:12","nodeType":"VariableDeclaration","scope":647,"src":"3656:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3656:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":632,"nodeType":"ArrayTypeName","src":"3656:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"3554:131:12"},"returnParameters":{"id":637,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":647,"src":"3709:4:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":635,"name":"bool","nodeType":"ElementaryTypeName","src":"3709:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3708:6:12"},"scope":972,"src":"3521:278:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":791,"nodeType":"Block","src":"4753:1860:12","statements":[{"assignments":[663],"declarations":[{"constant":false,"id":663,"mutability":"mutable","name":"leavesLen","nameLocation":"5144:9:12","nodeType":"VariableDeclaration","scope":791,"src":"5136:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":662,"name":"uint256","nodeType":"ElementaryTypeName","src":"5136:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":666,"initialValue":{"expression":{"id":664,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"5156:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5163:6:12","memberName":"length","nodeType":"MemberAccess","src":"5156:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5136:33:12"},{"assignments":[668],"declarations":[{"constant":false,"id":668,"mutability":"mutable","name":"totalHashes","nameLocation":"5187:11:12","nodeType":"VariableDeclaration","scope":791,"src":"5179:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":667,"name":"uint256","nodeType":"ElementaryTypeName","src":"5179:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":671,"initialValue":{"expression":{"id":669,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"5201:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5212:6:12","memberName":"length","nodeType":"MemberAccess","src":"5201:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5179:39:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":673,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"5270:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":674,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"5282:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5288:6:12","memberName":"length","nodeType":"MemberAccess","src":"5282:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5297:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"5270:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":679,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"5302:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5270:43:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5315:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":672,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5262:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5262:87:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":683,"nodeType":"ExpressionStatement","src":"5262:87:12"},{"assignments":[688],"declarations":[{"constant":false,"id":688,"mutability":"mutable","name":"hashes","nameLocation":"5611:6:12","nodeType":"VariableDeclaration","scope":791,"src":"5594:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5594:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":687,"nodeType":"ArrayTypeName","src":"5594:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":694,"initialValue":{"arguments":[{"id":692,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"5634:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":691,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"5620:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":689,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5624:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":690,"nodeType":"ArrayTypeName","src":"5624:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5620:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"5594:52:12"},{"assignments":[696],"declarations":[{"constant":false,"id":696,"mutability":"mutable","name":"leafPos","nameLocation":"5664:7:12","nodeType":"VariableDeclaration","scope":791,"src":"5656:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":695,"name":"uint256","nodeType":"ElementaryTypeName","src":"5656:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":698,"initialValue":{"hexValue":"30","id":697,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5674:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5656:19:12"},{"assignments":[700],"declarations":[{"constant":false,"id":700,"mutability":"mutable","name":"hashPos","nameLocation":"5693:7:12","nodeType":"VariableDeclaration","scope":791,"src":"5685:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":699,"name":"uint256","nodeType":"ElementaryTypeName","src":"5685:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":702,"initialValue":{"hexValue":"30","id":701,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5703:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5685:19:12"},{"assignments":[704],"declarations":[{"constant":false,"id":704,"mutability":"mutable","name":"proofPos","nameLocation":"5722:8:12","nodeType":"VariableDeclaration","scope":791,"src":"5714:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":703,"name":"uint256","nodeType":"ElementaryTypeName","src":"5714:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":706,"initialValue":{"hexValue":"30","id":705,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5733:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"5714:20:12"},{"body":{"id":764,"nodeType":"Block","src":"6151:258:12","statements":[{"assignments":[718],"declarations":[{"constant":false,"id":718,"mutability":"mutable","name":"a","nameLocation":"6173:1:12","nodeType":"VariableDeclaration","scope":764,"src":"6165:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6165:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":731,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":719,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"6177:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":720,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"6187:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6177:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":726,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6219:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":729,"indexExpression":{"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6226:9:12","subExpression":{"id":727,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"6226:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6219:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6177:59:12","trueExpression":{"baseExpression":{"id":722,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"6199:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":725,"indexExpression":{"id":724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6206:9:12","subExpression":{"id":723,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"6206:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6199:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6165:71:12"},{"assignments":[733],"declarations":[{"constant":false,"id":733,"mutability":"mutable","name":"b","nameLocation":"6258:1:12","nodeType":"VariableDeclaration","scope":764,"src":"6250:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":732,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6250:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":754,"initialValue":{"condition":{"baseExpression":{"id":734,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"6262:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":736,"indexExpression":{"id":735,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"6273:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6262:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":749,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"6340:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":752,"indexExpression":{"id":751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6346:10:12","subExpression":{"id":750,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":704,"src":"6346:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6340:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6262:95:12","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":737,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"6278:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":738,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"6288:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6278:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":744,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6320:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":747,"indexExpression":{"id":746,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6327:9:12","subExpression":{"id":745,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"6327:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6320:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"6278:59:12","trueExpression":{"baseExpression":{"id":740,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"6300:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":743,"indexExpression":{"id":742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6307:9:12","subExpression":{"id":741,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":696,"src":"6307:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6300:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"6250:107:12"},{"expression":{"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":755,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6371:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":757,"indexExpression":{"id":756,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"6378:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6371:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":759,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":718,"src":"6393:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":760,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":733,"src":"6396:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":758,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"6383:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6383:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"6371:27:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":763,"nodeType":"ExpressionStatement","src":"6371:27:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":711,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"6129:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":712,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6133:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6129:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":765,"initializationExpression":{"assignments":[708],"declarations":[{"constant":false,"id":708,"mutability":"mutable","name":"i","nameLocation":"6122:1:12","nodeType":"VariableDeclaration","scope":765,"src":"6114:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":707,"name":"uint256","nodeType":"ElementaryTypeName","src":"6114:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":710,"initialValue":{"hexValue":"30","id":709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6126:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"6114:13:12"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"6146:3:12","subExpression":{"id":714,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":708,"src":"6146:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":716,"nodeType":"ExpressionStatement","src":"6146:3:12"},"nodeType":"ForStatement","src":"6109:300:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":766,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6423:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6437:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6423:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":776,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"6505:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":777,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6517:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6505:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":788,"nodeType":"Block","src":"6567:40:12","statements":[{"expression":{"baseExpression":{"id":784,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"6588:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":786,"indexExpression":{"hexValue":"30","id":785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6594:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6588:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":661,"id":787,"nodeType":"Return","src":"6581:15:12"}]},"id":789,"nodeType":"IfStatement","src":"6501:106:12","trueBody":{"id":783,"nodeType":"Block","src":"6520:41:12","statements":[{"expression":{"baseExpression":{"id":779,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"6541:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":781,"indexExpression":{"hexValue":"30","id":780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6548:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6541:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":661,"id":782,"nodeType":"Return","src":"6534:16:12"}]}},"id":790,"nodeType":"IfStatement","src":"6419:188:12","trueBody":{"id":775,"nodeType":"Block","src":"6440:55:12","statements":[{"expression":{"baseExpression":{"id":769,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"6461:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":773,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":770,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":668,"src":"6468:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6482:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6468:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6461:23:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":661,"id":774,"nodeType":"Return","src":"6454:30:12"}]}}]},"documentation":{"id":648,"nodeType":"StructuredDocumentation","src":"3805:768:12","text":" @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\n proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\n leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\n respectively.\n CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\n is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\n tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\n _Available since v4.7._"},"id":792,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProof","nameLocation":"4587:17:12","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":651,"mutability":"mutable","name":"proof","nameLocation":"4631:5:12","nodeType":"VariableDeclaration","scope":792,"src":"4614:22:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":649,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4614:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":650,"nodeType":"ArrayTypeName","src":"4614:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":654,"mutability":"mutable","name":"proofFlags","nameLocation":"4660:10:12","nodeType":"VariableDeclaration","scope":792,"src":"4646:24:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":652,"name":"bool","nodeType":"ElementaryTypeName","src":"4646:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":653,"nodeType":"ArrayTypeName","src":"4646:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"leaves","nameLocation":"4697:6:12","nodeType":"VariableDeclaration","scope":792,"src":"4680:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4680:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":656,"nodeType":"ArrayTypeName","src":"4680:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"4604:105:12"},"returnParameters":{"id":661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":660,"mutability":"mutable","name":"merkleRoot","nameLocation":"4741:10:12","nodeType":"VariableDeclaration","scope":792,"src":"4733:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":659,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4733:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4732:20:12"},"scope":972,"src":"4578:2035:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":936,"nodeType":"Block","src":"7013:1860:12","statements":[{"assignments":[808],"declarations":[{"constant":false,"id":808,"mutability":"mutable","name":"leavesLen","nameLocation":"7404:9:12","nodeType":"VariableDeclaration","scope":936,"src":"7396:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":807,"name":"uint256","nodeType":"ElementaryTypeName","src":"7396:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":811,"initialValue":{"expression":{"id":809,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"7416:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7423:6:12","memberName":"length","nodeType":"MemberAccess","src":"7416:13:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7396:33:12"},{"assignments":[813],"declarations":[{"constant":false,"id":813,"mutability":"mutable","name":"totalHashes","nameLocation":"7447:11:12","nodeType":"VariableDeclaration","scope":936,"src":"7439:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":812,"name":"uint256","nodeType":"ElementaryTypeName","src":"7439:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":816,"initialValue":{"expression":{"id":814,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"7461:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7472:6:12","memberName":"length","nodeType":"MemberAccess","src":"7461:17:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7439:39:12"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":825,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":818,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7530:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":819,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"7542:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7548:6:12","memberName":"length","nodeType":"MemberAccess","src":"7542:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:24:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":822,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7557:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7530:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":824,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"7562:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7530:43:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d65726b6c6550726f6f663a20696e76616c6964206d756c746970726f6f66","id":826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7575:33:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""},"value":"MerkleProof: invalid multiproof"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1ffedb6c6cbea997e7c1340fc6ef8db6298ec2fb1f2ffb34b77ce45e725b2049","typeString":"literal_string \"MerkleProof: invalid multiproof\""}],"id":817,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7522:7:12","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":827,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7522:87:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":828,"nodeType":"ExpressionStatement","src":"7522:87:12"},{"assignments":[833],"declarations":[{"constant":false,"id":833,"mutability":"mutable","name":"hashes","nameLocation":"7871:6:12","nodeType":"VariableDeclaration","scope":936,"src":"7854:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":831,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7854:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":832,"nodeType":"ArrayTypeName","src":"7854:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"id":839,"initialValue":{"arguments":[{"id":837,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"7894:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":836,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"7880:13:12","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bytes32[] memory)"},"typeName":{"baseType":{"id":834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7884:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":835,"nodeType":"ArrayTypeName","src":"7884:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},"id":838,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7880:26:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"nodeType":"VariableDeclarationStatement","src":"7854:52:12"},{"assignments":[841],"declarations":[{"constant":false,"id":841,"mutability":"mutable","name":"leafPos","nameLocation":"7924:7:12","nodeType":"VariableDeclaration","scope":936,"src":"7916:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":840,"name":"uint256","nodeType":"ElementaryTypeName","src":"7916:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":843,"initialValue":{"hexValue":"30","id":842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7934:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7916:19:12"},{"assignments":[845],"declarations":[{"constant":false,"id":845,"mutability":"mutable","name":"hashPos","nameLocation":"7953:7:12","nodeType":"VariableDeclaration","scope":936,"src":"7945:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":844,"name":"uint256","nodeType":"ElementaryTypeName","src":"7945:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":847,"initialValue":{"hexValue":"30","id":846,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7945:19:12"},{"assignments":[849],"declarations":[{"constant":false,"id":849,"mutability":"mutable","name":"proofPos","nameLocation":"7982:8:12","nodeType":"VariableDeclaration","scope":936,"src":"7974:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":848,"name":"uint256","nodeType":"ElementaryTypeName","src":"7974:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":851,"initialValue":{"hexValue":"30","id":850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7993:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"7974:20:12"},{"body":{"id":909,"nodeType":"Block","src":"8411:258:12","statements":[{"assignments":[863],"declarations":[{"constant":false,"id":863,"mutability":"mutable","name":"a","nameLocation":"8433:1:12","nodeType":"VariableDeclaration","scope":909,"src":"8425:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":862,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8425:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":876,"initialValue":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":864,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8437:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":865,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"8447:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8437:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":871,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8479:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":874,"indexExpression":{"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8486:9:12","subExpression":{"id":872,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"8486:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8479:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:59:12","trueExpression":{"baseExpression":{"id":867,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"8459:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":870,"indexExpression":{"id":869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8466:9:12","subExpression":{"id":868,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8466:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8459:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8425:71:12"},{"assignments":[878],"declarations":[{"constant":false,"id":878,"mutability":"mutable","name":"b","nameLocation":"8518:1:12","nodeType":"VariableDeclaration","scope":909,"src":"8510:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":877,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8510:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":899,"initialValue":{"condition":{"baseExpression":{"id":879,"name":"proofFlags","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"8522:10:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":881,"indexExpression":{"id":880,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"8533:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8522:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":894,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8600:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":897,"indexExpression":{"id":896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8606:10:12","subExpression":{"id":895,"name":"proofPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"8606:8:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8600:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":898,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8522:95:12","trueExpression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":882,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8538:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":883,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"8548:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8538:19:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"baseExpression":{"id":889,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8580:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":892,"indexExpression":{"id":891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8587:9:12","subExpression":{"id":890,"name":"hashPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":845,"src":"8587:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8580:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8538:59:12","trueExpression":{"baseExpression":{"id":885,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"8560:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":888,"indexExpression":{"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8567:9:12","subExpression":{"id":886,"name":"leafPos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8567:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8560:17:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8510:107:12"},{"expression":{"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":900,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8631:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":902,"indexExpression":{"id":901,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"8638:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8631:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":904,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"8653:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":905,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"8656:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":903,"name":"_hashPair","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":960,"src":"8643:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8643:15:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8631:27:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":908,"nodeType":"ExpressionStatement","src":"8631:27:12"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":856,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"8389:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":857,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"8393:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8389:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":910,"initializationExpression":{"assignments":[853],"declarations":[{"constant":false,"id":853,"mutability":"mutable","name":"i","nameLocation":"8382:1:12","nodeType":"VariableDeclaration","scope":910,"src":"8374:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":852,"name":"uint256","nodeType":"ElementaryTypeName","src":"8374:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":855,"initialValue":{"hexValue":"30","id":854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8386:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8374:13:12"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"8406:3:12","subExpression":{"id":859,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":853,"src":"8406:1:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":861,"nodeType":"ExpressionStatement","src":"8406:3:12"},"nodeType":"ForStatement","src":"8369:300:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":911,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"8683:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8683:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":921,"name":"leavesLen","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"8765:9:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8777:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8765:13:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":933,"nodeType":"Block","src":"8827:40:12","statements":[{"expression":{"baseExpression":{"id":929,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"8848:5:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[] calldata"}},"id":931,"indexExpression":{"hexValue":"30","id":930,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8848:8:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":806,"id":932,"nodeType":"Return","src":"8841:15:12"}]},"id":934,"nodeType":"IfStatement","src":"8761:106:12","trueBody":{"id":928,"nodeType":"Block","src":"8780:41:12","statements":[{"expression":{"baseExpression":{"id":924,"name":"leaves","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"8801:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":926,"indexExpression":{"hexValue":"30","id":925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8808:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8801:9:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":806,"id":927,"nodeType":"Return","src":"8794:16:12"}]}},"id":935,"nodeType":"IfStatement","src":"8679:188:12","trueBody":{"id":920,"nodeType":"Block","src":"8700:55:12","statements":[{"expression":{"baseExpression":{"id":914,"name":"hashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8721:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":918,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":915,"name":"totalHashes","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":813,"src":"8728:11:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8742:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8728:15:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8721:23:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":806,"id":919,"nodeType":"Return","src":"8714:30:12"}]}}]},"documentation":{"id":793,"nodeType":"StructuredDocumentation","src":"6619:202:12","text":" @dev Calldata version of {processMultiProof}.\n CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\n _Available since v4.7._"},"id":937,"implemented":true,"kind":"function","modifiers":[],"name":"processMultiProofCalldata","nameLocation":"6835:25:12","nodeType":"FunctionDefinition","parameters":{"id":803,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"proof","nameLocation":"6889:5:12","nodeType":"VariableDeclaration","scope":937,"src":"6870:24:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_calldata_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6870:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":795,"nodeType":"ArrayTypeName","src":"6870:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":799,"mutability":"mutable","name":"proofFlags","nameLocation":"6920:10:12","nodeType":"VariableDeclaration","scope":937,"src":"6904:26:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":797,"name":"bool","nodeType":"ElementaryTypeName","src":"6904:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":798,"nodeType":"ArrayTypeName","src":"6904:6:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"},{"constant":false,"id":802,"mutability":"mutable","name":"leaves","nameLocation":"6957:6:12","nodeType":"VariableDeclaration","scope":937,"src":"6940:23:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":800,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6940:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":801,"nodeType":"ArrayTypeName","src":"6940:9:12","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"}],"src":"6860:109:12"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":805,"mutability":"mutable","name":"merkleRoot","nameLocation":"7001:10:12","nodeType":"VariableDeclaration","scope":937,"src":"6993:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":804,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6993:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6992:20:12"},"scope":972,"src":"6826:2047:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":959,"nodeType":"Block","src":"8951:75:12","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":946,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"8968:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":947,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"8972:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"8968:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":954,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"9014:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":955,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"9017:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":953,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"8999:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8968:51:12","trueExpression":{"arguments":[{"id":950,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":939,"src":"8991:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":951,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":941,"src":"8994:1:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":949,"name":"_efficientHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":971,"src":"8976:14:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32,bytes32) pure returns (bytes32)"}},"id":952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8976:20:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":945,"id":958,"nodeType":"Return","src":"8961:58:12"}]},"id":960,"implemented":true,"kind":"function","modifiers":[],"name":"_hashPair","nameLocation":"8888:9:12","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":939,"mutability":"mutable","name":"a","nameLocation":"8906:1:12","nodeType":"VariableDeclaration","scope":960,"src":"8898:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8898:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":941,"mutability":"mutable","name":"b","nameLocation":"8917:1:12","nodeType":"VariableDeclaration","scope":960,"src":"8909:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8909:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8897:22:12"},"returnParameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":960,"src":"8942:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":943,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8942:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8941:9:12"},"scope":972,"src":"8879:147:12","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":970,"nodeType":"Block","src":"9115:178:12","statements":[{"AST":{"nativeSrc":"9177:110:12","nodeType":"YulBlock","src":"9177:110:12","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9198:4:12","nodeType":"YulLiteral","src":"9198:4:12","type":"","value":"0x00"},{"name":"a","nativeSrc":"9204:1:12","nodeType":"YulIdentifier","src":"9204:1:12"}],"functionName":{"name":"mstore","nativeSrc":"9191:6:12","nodeType":"YulIdentifier","src":"9191:6:12"},"nativeSrc":"9191:15:12","nodeType":"YulFunctionCall","src":"9191:15:12"},"nativeSrc":"9191:15:12","nodeType":"YulExpressionStatement","src":"9191:15:12"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9226:4:12","nodeType":"YulLiteral","src":"9226:4:12","type":"","value":"0x20"},{"name":"b","nativeSrc":"9232:1:12","nodeType":"YulIdentifier","src":"9232:1:12"}],"functionName":{"name":"mstore","nativeSrc":"9219:6:12","nodeType":"YulIdentifier","src":"9219:6:12"},"nativeSrc":"9219:15:12","nodeType":"YulFunctionCall","src":"9219:15:12"},"nativeSrc":"9219:15:12","nodeType":"YulExpressionStatement","src":"9219:15:12"},{"nativeSrc":"9247:30:12","nodeType":"YulAssignment","src":"9247:30:12","value":{"arguments":[{"kind":"number","nativeSrc":"9266:4:12","nodeType":"YulLiteral","src":"9266:4:12","type":"","value":"0x00"},{"kind":"number","nativeSrc":"9272:4:12","nodeType":"YulLiteral","src":"9272:4:12","type":"","value":"0x40"}],"functionName":{"name":"keccak256","nativeSrc":"9256:9:12","nodeType":"YulIdentifier","src":"9256:9:12"},"nativeSrc":"9256:21:12","nodeType":"YulFunctionCall","src":"9256:21:12"},"variableNames":[{"name":"value","nativeSrc":"9247:5:12","nodeType":"YulIdentifier","src":"9247:5:12"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":962,"isOffset":false,"isSlot":false,"src":"9204:1:12","valueSize":1},{"declaration":964,"isOffset":false,"isSlot":false,"src":"9232:1:12","valueSize":1},{"declaration":967,"isOffset":false,"isSlot":false,"src":"9247:5:12","valueSize":1}],"id":969,"nodeType":"InlineAssembly","src":"9168:119:12"}]},"id":971,"implemented":true,"kind":"function","modifiers":[],"name":"_efficientHash","nameLocation":"9041:14:12","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"a","nameLocation":"9064:1:12","nodeType":"VariableDeclaration","scope":971,"src":"9056:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":961,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9056:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":964,"mutability":"mutable","name":"b","nameLocation":"9075:1:12","nodeType":"VariableDeclaration","scope":971,"src":"9067:9:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9067:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9055:22:12"},"returnParameters":{"id":968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":967,"mutability":"mutable","name":"value","nameLocation":"9108:5:12","nodeType":"VariableDeclaration","scope":971,"src":"9100:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9100:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9099:15:12"},"scope":972,"src":"9032:261:12","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":973,"src":"802:8493:12","usedErrors":[],"usedEvents":[]}],"src":"118:9178:12"},"id":12},"contracts/burn/OrbsBurnPool.sol":{"ast":{"absolutePath":"contracts/burn/OrbsBurnPool.sol","exportedSymbols":{"ERC1155TokenReceiver":[406],"ForwarderRegistryContext":[196],"ForwarderRegistryContextBase":[316],"IERC1155Burnable":[432],"IForwarderRegistry":[342],"MerkleProof":[972],"OrbsBurnPool":[1824]},"id":1825,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":974,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol","id":976,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":407,"src":"57:114:13","symbolAliases":[{"foreign":{"id":975,"name":"ERC1155TokenReceiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":406,"src":"65:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":978,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":433,"src":"172:117:13","symbolAliases":[{"foreign":{"id":977,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"180:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":980,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":197,"src":"290:115:13","symbolAliases":[{"foreign":{"id":979,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":196,"src":"298:24:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":982,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":317,"src":"406:128:13","symbolAliases":[{"foreign":{"id":981,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"414:28:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":984,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":343,"src":"535:114:13","symbolAliases":[{"foreign":{"id":983,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"543:18:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","file":"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol","id":986,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1825,"sourceUnit":973,"src":"650:87:13","symbolAliases":[{"foreign":{"id":985,"name":"MerkleProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":972,"src":"658:11:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":988,"name":"ForwarderRegistryContext","nameLocations":["914:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":196,"src":"914:24:13"},"id":989,"nodeType":"InheritanceSpecifier","src":"914:24:13"},{"baseName":{"id":990,"name":"ERC1155TokenReceiver","nameLocations":["940:20:13"],"nodeType":"IdentifierPath","referencedDeclaration":406,"src":"940:20:13"},"id":991,"nodeType":"InheritanceSpecifier","src":"940:20:13"}],"canonicalName":"OrbsBurnPool","contractDependencies":[],"contractKind":"contract","documentation":{"id":987,"nodeType":"StructuredDocumentation","src":"739:149:13","text":" @title OrbsBurnPool Contract\n @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned."},"fullyImplemented":true,"id":1824,"linearizedBaseContracts":[1824,406,29,46,470,196,328,316],"name":"OrbsBurnPool","nameLocation":"898:12:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":995,"libraryName":{"id":992,"name":"MerkleProof","nameLocations":["973:11:13"],"nodeType":"IdentifierPath","referencedDeclaration":972,"src":"973:11:13"},"nodeType":"UsingForDirective","src":"967:32:13","typeName":{"baseType":{"id":993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"989:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":994,"nodeType":"ArrayTypeName","src":"989:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}}},{"constant":true,"documentation":{"id":996,"nodeType":"StructuredDocumentation","src":"1005:47:13","text":"@notice The denominator for the multiplier."},"id":999,"mutability":"constant","name":"_DENOMINATOR","nameLocation":"1083:12:13","nodeType":"VariableDeclaration","scope":1824,"src":"1057:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":997,"name":"uint256","nodeType":"ElementaryTypeName","src":"1057:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31305f303030","id":998,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1098:6:13","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"value":"10_000"},"visibility":"internal"},{"constant":true,"documentation":{"id":1000,"nodeType":"StructuredDocumentation","src":"1111:65:13","text":"@notice The token ID of RoC for setting the token multiplier."},"functionSelector":"1de0e40b","id":1003,"mutability":"constant","name":"MISSING_ORB_TOKEN_ID","nameLocation":"1205:20:13","nodeType":"VariableDeclaration","scope":1824,"src":"1181:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1001,"name":"uint256","nodeType":"ElementaryTypeName","src":"1181:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1228:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"documentation":{"id":1004,"nodeType":"StructuredDocumentation","src":"1236:50:13","text":"@notice The token weights for calculating Ash."},"functionSelector":"0277640e","id":1007,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_1","nameLocation":"1315:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1291:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1005,"name":"uint256","nodeType":"ElementaryTypeName","src":"1291:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":1006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1337:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"424ab4f7","id":1010,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_2","nameLocation":"1368:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1344:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1008,"name":"uint256","nodeType":"ElementaryTypeName","src":"1344:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1390:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"aa918fd5","id":1013,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_3","nameLocation":"1421:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1397:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1011,"name":"uint256","nodeType":"ElementaryTypeName","src":"1397:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":1012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1443:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":true,"functionSelector":"0455645a","id":1016,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_4","nameLocation":"1474:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1450:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1014,"name":"uint256","nodeType":"ElementaryTypeName","src":"1450:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"35","id":1015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1496:1:13","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"visibility":"public"},{"constant":true,"functionSelector":"f95d1016","id":1019,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_5","nameLocation":"1527:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1503:47:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1017,"name":"uint256","nodeType":"ElementaryTypeName","src":"1503:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"39","id":1018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1549:1:13","typeDescriptions":{"typeIdentifier":"t_rational_9_by_1","typeString":"int_const 9"},"value":"9"},"visibility":"public"},{"constant":true,"functionSelector":"3838a201","id":1022,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_6","nameLocation":"1580:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1556:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"1556:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3235","id":1021,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1602:2:13","typeDescriptions":{"typeIdentifier":"t_rational_25_by_1","typeString":"int_const 25"},"value":"25"},"visibility":"public"},{"constant":true,"functionSelector":"c131754e","id":1025,"mutability":"constant","name":"BURN_WEIGHT_TOKEN_7","nameLocation":"1634:19:13","nodeType":"VariableDeclaration","scope":1824,"src":"1610:48:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1023,"name":"uint256","nodeType":"ElementaryTypeName","src":"1610:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3136","id":1024,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1656:2:13","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"visibility":"public"},{"constant":true,"documentation":{"id":1026,"nodeType":"StructuredDocumentation","src":"1665:43:13","text":"@notice The Riddle Of Chaos multiplier."},"functionSelector":"55f5b0a8","id":1029,"mutability":"constant","name":"ROC_MULTIPLIER","nameLocation":"1737:14:13","nodeType":"VariableDeclaration","scope":1824,"src":"1713:42:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1027,"name":"uint256","nodeType":"ElementaryTypeName","src":"1713:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":1028,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1754:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":false,"documentation":{"id":1030,"nodeType":"StructuredDocumentation","src":"1762:72:13","text":"@notice The IERC1155Burnable erc1155 contracts burn to generate ASH."},"functionSelector":"28a979cf","id":1033,"mutability":"immutable","name":"ORB_OF_POWER","nameLocation":"1873:12:13","nodeType":"VariableDeclaration","scope":1824,"src":"1839:46:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1032,"nodeType":"UserDefinedTypeName","pathNode":{"id":1031,"name":"IERC1155Burnable","nameLocations":["1839:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"1839:16:13"},"referencedDeclaration":432,"src":"1839:16:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1034,"nodeType":"StructuredDocumentation","src":"1892:75:13","text":"@notice The IERC1155 erc1155 contract for setting the token multiplier."},"functionSelector":"cd18a34f","id":1037,"mutability":"immutable","name":"MISSING_ORB","nameLocation":"2006:11:13","nodeType":"VariableDeclaration","scope":1824,"src":"1972:45:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1036,"nodeType":"UserDefinedTypeName","pathNode":{"id":1035,"name":"IERC1155Burnable","nameLocations":["1972:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"1972:16:13"},"referencedDeclaration":432,"src":"1972:16:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"public"},{"constant":false,"documentation":{"id":1038,"nodeType":"StructuredDocumentation","src":"2024:45:13","text":"@notice The initial time of the contract."},"functionSelector":"491bde66","id":1040,"mutability":"immutable","name":"INITIAL_TIME","nameLocation":"2099:12:13","nodeType":"VariableDeclaration","scope":1824,"src":"2074:37:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1039,"name":"uint256","nodeType":"ElementaryTypeName","src":"2074:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1041,"nodeType":"StructuredDocumentation","src":"2118:39:13","text":"@notice The duration of each cycle."},"functionSelector":"cd421fbf","id":1043,"mutability":"immutable","name":"CYCLE_DURATION","nameLocation":"2187:14:13","nodeType":"VariableDeclaration","scope":1824,"src":"2162:39:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1042,"name":"uint256","nodeType":"ElementaryTypeName","src":"2162:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1044,"nodeType":"StructuredDocumentation","src":"2208:30:13","text":"@notice The maximum cycle."},"functionSelector":"043063bc","id":1046,"mutability":"immutable","name":"MAX_CYCLE","nameLocation":"2268:9:13","nodeType":"VariableDeclaration","scope":1824,"src":"2243:34:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1045,"name":"uint256","nodeType":"ElementaryTypeName","src":"2243:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":1047,"nodeType":"StructuredDocumentation","src":"2284:61:13","text":"@notice The Merkle root for setting the puzzleMultiplier."},"functionSelector":"51e75e8b","id":1049,"mutability":"immutable","name":"MERKLE_ROOT","nameLocation":"2375:11:13","nodeType":"VariableDeclaration","scope":1824,"src":"2350:36:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1048,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2350:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"documentation":{"id":1050,"nodeType":"StructuredDocumentation","src":"2393:60:13","text":"@notice The total amount of ASH generated in each cycle."},"functionSelector":"ab504e73","id":1054,"mutability":"mutable","name":"totalAshPerCycle","nameLocation":"2493:16:13","nodeType":"VariableDeclaration","scope":1824,"src":"2458:51:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1053,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1051,"name":"uint256","nodeType":"ElementaryTypeName","src":"2466:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2458:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1052,"name":"uint256","nodeType":"ElementaryTypeName","src":"2477:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"2516:73:13","text":"@notice The total amount of ASH generated by each user in each cycle."},"functionSelector":"4dac1c2b","id":1061,"mutability":"mutable","name":"userAshPerCycle","nameLocation":"2649:15:13","nodeType":"VariableDeclaration","scope":1824,"src":"2594:70:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"typeName":{"id":1060,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1056,"name":"uint256","nodeType":"ElementaryTypeName","src":"2602:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2594:47:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1059,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1057,"name":"address","nodeType":"ElementaryTypeName","src":"2621:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2613:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1058,"name":"uint256","nodeType":"ElementaryTypeName","src":"2632:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"public"},{"constant":false,"documentation":{"id":1062,"nodeType":"StructuredDocumentation","src":"2671:135:13","text":"@notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"functionSelector":"12828b7f","id":1066,"mutability":"mutable","name":"orbMultipliers","nameLocation":"2846:14:13","nodeType":"VariableDeclaration","scope":1824,"src":"2811:49:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1065,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1063,"name":"address","nodeType":"ElementaryTypeName","src":"2819:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"2811:27:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1064,"name":"uint256","nodeType":"ElementaryTypeName","src":"2830:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"2867:49:13","text":"@notice Event emitted when ASH are generated."},"eventSelector":"6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b","id":1085,"name":"GenerateAsh","nameLocation":"2927:11:13","nodeType":"EventDefinition","parameters":{"id":1084,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1069,"indexed":true,"mutability":"mutable","name":"burner","nameLocation":"2964:6:13","nodeType":"VariableDeclaration","scope":1085,"src":"2948:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1068,"name":"address","nodeType":"ElementaryTypeName","src":"2948:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1071,"indexed":true,"mutability":"mutable","name":"cycle","nameLocation":"2996:5:13","nodeType":"VariableDeclaration","scope":1085,"src":"2980:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"2980:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1074,"indexed":false,"mutability":"mutable","name":"ids","nameLocation":"3021:3:13","nodeType":"VariableDeclaration","scope":1085,"src":"3011:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1072,"name":"uint256","nodeType":"ElementaryTypeName","src":"3011:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1073,"nodeType":"ArrayTypeName","src":"3011:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1077,"indexed":false,"mutability":"mutable","name":"values","nameLocation":"3044:6:13","nodeType":"VariableDeclaration","scope":1085,"src":"3034:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"3034:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1076,"nodeType":"ArrayTypeName","src":"3034:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1079,"indexed":false,"mutability":"mutable","name":"ash","nameLocation":"3068:3:13","nodeType":"VariableDeclaration","scope":1085,"src":"3060:11:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1078,"name":"uint256","nodeType":"ElementaryTypeName","src":"3060:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1081,"indexed":false,"mutability":"mutable","name":"totalAsh","nameLocation":"3089:8:13","nodeType":"VariableDeclaration","scope":1085,"src":"3081:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1080,"name":"uint256","nodeType":"ElementaryTypeName","src":"3081:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1083,"indexed":false,"mutability":"mutable","name":"orbMultiplier","nameLocation":"3115:13:13","nodeType":"VariableDeclaration","scope":1085,"src":"3107:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1082,"name":"uint256","nodeType":"ElementaryTypeName","src":"3107:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2938:196:13"},"src":"2921:214:13"},{"anonymous":false,"documentation":{"id":1086,"nodeType":"StructuredDocumentation","src":"3141:62:13","text":"@notice Event emitted when the multiplier info is updated."},"eventSelector":"528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433","id":1094,"name":"UpdateOrbMultiplier","nameLocation":"3214:19:13","nodeType":"EventDefinition","parameters":{"id":1093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1088,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"3250:9:13","nodeType":"VariableDeclaration","scope":1094,"src":"3234:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1087,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1090,"indexed":false,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"3269:16:13","nodeType":"VariableDeclaration","scope":1094,"src":"3261:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1089,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1092,"indexed":false,"mutability":"mutable","name":"updatedOrbMultiplier","nameLocation":"3295:20:13","nodeType":"VariableDeclaration","scope":1094,"src":"3287:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1091,"name":"uint256","nodeType":"ElementaryTypeName","src":"3287:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3233:83:13"},"src":"3208:109:13"},{"documentation":{"id":1095,"nodeType":"StructuredDocumentation","src":"3323:54:13","text":"@notice Error thrown when the token ID is invalid."},"errorSelector":"1912ea51","id":1101,"name":"InvalidTokenId","nameLocation":"3388:14:13","nodeType":"ErrorDefinition","parameters":{"id":1100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1097,"mutability":"mutable","name":"token","nameLocation":"3411:5:13","nodeType":"VariableDeclaration","scope":1101,"src":"3403:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1096,"name":"address","nodeType":"ElementaryTypeName","src":"3403:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1099,"mutability":"mutable","name":"tokenId","nameLocation":"3426:7:13","nodeType":"VariableDeclaration","scope":1101,"src":"3418:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1098,"name":"uint256","nodeType":"ElementaryTypeName","src":"3418:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3402:32:13"},"src":"3382:53:13"},{"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"3441:56:13","text":"@notice Error thrown when the token is not approved."},"errorSelector":"73306803","id":1106,"name":"InvalidTokenAddress","nameLocation":"3508:19:13","nodeType":"ErrorDefinition","parameters":{"id":1105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1104,"mutability":"mutable","name":"token","nameLocation":"3536:5:13","nodeType":"VariableDeclaration","scope":1106,"src":"3528:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1103,"name":"address","nodeType":"ElementaryTypeName","src":"3528:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3527:15:13"},"src":"3502:41:13"},{"documentation":{"id":1107,"nodeType":"StructuredDocumentation","src":"3549:58:13","text":"@notice Error thrown when the token amount is invalid."},"errorSelector":"e1f366e9","id":1115,"name":"InvalidTokenValue","nameLocation":"3618:17:13","nodeType":"ErrorDefinition","parameters":{"id":1114,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1109,"mutability":"mutable","name":"token","nameLocation":"3644:5:13","nodeType":"VariableDeclaration","scope":1115,"src":"3636:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1108,"name":"address","nodeType":"ElementaryTypeName","src":"3636:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1111,"mutability":"mutable","name":"tokenId","nameLocation":"3659:7:13","nodeType":"VariableDeclaration","scope":1115,"src":"3651:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1110,"name":"uint256","nodeType":"ElementaryTypeName","src":"3651:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1113,"mutability":"mutable","name":"value","nameLocation":"3676:5:13","nodeType":"VariableDeclaration","scope":1115,"src":"3668:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1112,"name":"uint256","nodeType":"ElementaryTypeName","src":"3668:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3635:47:13"},"src":"3612:71:13"},{"documentation":{"id":1116,"nodeType":"StructuredDocumentation","src":"3689:51:13","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"764e560f","id":1120,"name":"InvalidCycle","nameLocation":"3751:12:13","nodeType":"ErrorDefinition","parameters":{"id":1119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1118,"mutability":"mutable","name":"cycle","nameLocation":"3772:5:13","nodeType":"VariableDeclaration","scope":1120,"src":"3764:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1117,"name":"uint256","nodeType":"ElementaryTypeName","src":"3764:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3763:15:13"},"src":"3745:34:13"},{"documentation":{"id":1121,"nodeType":"StructuredDocumentation","src":"3785:81:13","text":"@notice Error thrown when the wallet already has the ROC multiplier been set."},"errorSelector":"383b5493","id":1125,"name":"AlreadySetROCMultiplier","nameLocation":"3877:23:13","nodeType":"ErrorDefinition","parameters":{"id":1124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1123,"mutability":"mutable","name":"wallet","nameLocation":"3909:6:13","nodeType":"VariableDeclaration","scope":1125,"src":"3901:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1122,"name":"address","nodeType":"ElementaryTypeName","src":"3901:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3900:16:13"},"src":"3871:46:13"},{"documentation":{"id":1126,"nodeType":"StructuredDocumentation","src":"3923:51:13","text":"@notice Error thrown when the proof is invalid."},"errorSelector":"adbd6512","id":1132,"name":"InvalidProof","nameLocation":"3985:12:13","nodeType":"ErrorDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"recipient","nameLocation":"4006:9:13","nodeType":"VariableDeclaration","scope":1132,"src":"3998:17:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1127,"name":"address","nodeType":"ElementaryTypeName","src":"3998:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"4025:29:13","nodeType":"VariableDeclaration","scope":1132,"src":"4017:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1129,"name":"uint256","nodeType":"ElementaryTypeName","src":"4017:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3997:58:13"},"src":"3979:77:13"},{"documentation":{"id":1133,"nodeType":"StructuredDocumentation","src":"4062:60:13","text":"@notice Error thrown when the cycle duration is invalid."},"errorSelector":"b870efbd","id":1135,"name":"ZeroCycleDuration","nameLocation":"4133:17:13","nodeType":"ErrorDefinition","parameters":{"id":1134,"nodeType":"ParameterList","parameters":[],"src":"4150:2:13"},"src":"4127:26:13"},{"documentation":{"id":1136,"nodeType":"StructuredDocumentation","src":"4159:51:13","text":"@notice Error thrown when the cycle is invalid."},"errorSelector":"fcbcab36","id":1138,"name":"ZeroMaxCycle","nameLocation":"4221:12:13","nodeType":"ErrorDefinition","parameters":{"id":1137,"nodeType":"ParameterList","parameters":[],"src":"4233:2:13"},"src":"4215:21:13"},{"body":{"id":1202,"nodeType":"Block","src":"5202:376:13","statements":[{"expression":{"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1162,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"5212:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1163,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"5227:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:26:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1165,"nodeType":"ExpressionStatement","src":"5212:26:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1166,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"5253:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5270:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5253:18:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1173,"nodeType":"IfStatement","src":"5249:75:13","trueBody":{"id":1172,"nodeType":"Block","src":"5273:51:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1169,"name":"ZeroCycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1135,"src":"5294:17:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5294:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1171,"nodeType":"RevertStatement","src":"5287:26:13"}]}},{"expression":{"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1174,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"5333:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1175,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1143,"src":"5350:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5333:30:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1177,"nodeType":"ExpressionStatement","src":"5333:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1178,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"5378:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5390:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5378:13:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1185,"nodeType":"IfStatement","src":"5374:65:13","trueBody":{"id":1184,"nodeType":"Block","src":"5393:46:13","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1181,"name":"ZeroMaxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1138,"src":"5414:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5414:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1183,"nodeType":"RevertStatement","src":"5407:21:13"}]}},{"expression":{"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1186,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"5448:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1187,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1145,"src":"5460:8:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5448:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1189,"nodeType":"ExpressionStatement","src":"5448:20:13"},{"expression":{"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1190,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"5478:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1191,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1147,"src":"5492:10:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"5478:24:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1193,"nodeType":"ExpressionStatement","src":"5478:24:13"},{"expression":{"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1194,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"5512:12:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1195,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"5527:10:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"src":"5512:25:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"id":1197,"nodeType":"ExpressionStatement","src":"5512:25:13"},{"expression":{"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1198,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"5547:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1199,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"5561:10:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"src":"5547:24:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"id":1201,"nodeType":"ExpressionStatement","src":"5547:24:13"}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"4242:659:13","text":" @notice Constructor for the OrbsBurnPool contract.\n @param initialTime The initial time of the contract.\n @param cycleDuration The duration of each cycle.\n @param maxCycle The maximum cycle.\n @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\n @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\n @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\n @param forwarderRegistry The forwarder registry contract.\n @dev Throws if the cycle duration is zero.\n @dev Throws if the max cycle is zero."},"id":1203,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1159,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"5183:17:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"id":1160,"kind":"baseConstructorSpecifier","modifierName":{"id":1158,"name":"ForwarderRegistryContext","nameLocations":["5158:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":196,"src":"5158:24:13"},"nodeType":"ModifierInvocation","src":"5158:43:13"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1141,"mutability":"mutable","name":"initialTime","nameLocation":"4935:11:13","nodeType":"VariableDeclaration","scope":1203,"src":"4927:19:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1140,"name":"uint256","nodeType":"ElementaryTypeName","src":"4927:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1143,"mutability":"mutable","name":"cycleDuration","nameLocation":"4964:13:13","nodeType":"VariableDeclaration","scope":1203,"src":"4956:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1142,"name":"uint256","nodeType":"ElementaryTypeName","src":"4956:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1145,"mutability":"mutable","name":"maxCycle","nameLocation":"4995:8:13","nodeType":"VariableDeclaration","scope":1203,"src":"4987:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1144,"name":"uint256","nodeType":"ElementaryTypeName","src":"4987:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1147,"mutability":"mutable","name":"merkleRoot","nameLocation":"5021:10:13","nodeType":"VariableDeclaration","scope":1203,"src":"5013:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1146,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5013:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1150,"mutability":"mutable","name":"orbOfPower","nameLocation":"5058:10:13","nodeType":"VariableDeclaration","scope":1203,"src":"5041:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1149,"nodeType":"UserDefinedTypeName","pathNode":{"id":1148,"name":"IERC1155Burnable","nameLocations":["5041:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"5041:16:13"},"referencedDeclaration":432,"src":"5041:16:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":1153,"mutability":"mutable","name":"missingOrb","nameLocation":"5095:10:13","nodeType":"VariableDeclaration","scope":1203,"src":"5078:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1152,"nodeType":"UserDefinedTypeName","pathNode":{"id":1151,"name":"IERC1155Burnable","nameLocations":["5078:16:13"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"5078:16:13"},"referencedDeclaration":432,"src":"5078:16:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":1156,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"5134:17:13","nodeType":"VariableDeclaration","scope":1203,"src":"5115:36:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":1155,"nodeType":"UserDefinedTypeName","pathNode":{"id":1154,"name":"IForwarderRegistry","nameLocations":["5115:18:13"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"5115:18:13"},"referencedDeclaration":342,"src":"5115:18:13","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"4917:240:13"},"returnParameters":{"id":1161,"nodeType":"ParameterList","parameters":[],"src":"5202:0:13"},"scope":1824,"src":"4906:672:13","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[267],"body":{"id":1215,"nodeType":"Block","src":"5734:65:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1211,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"5751:28:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$316_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5780:10:13","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":267,"src":"5751:39:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5751:41:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1210,"id":1214,"nodeType":"Return","src":"5744:48:13"}]},"documentation":{"id":1204,"nodeType":"StructuredDocumentation","src":"5584:44:13","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1216,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"5642:10:13","nodeType":"FunctionDefinition","overrides":{"id":1207,"nodeType":"OverrideSpecifier","overrides":[{"id":1206,"name":"ForwarderRegistryContextBase","nameLocations":["5686:28:13"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"5686:28:13"}],"src":"5677:38:13"},"parameters":{"id":1205,"nodeType":"ParameterList","parameters":[],"src":"5652:2:13"},"returnParameters":{"id":1210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1209,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1216,"src":"5725:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1208,"name":"address","nodeType":"ElementaryTypeName","src":"5725:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5724:9:13"},"scope":1824,"src":"5633:166:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[315],"body":{"id":1228,"nodeType":"Block","src":"5960:63:13","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1224,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":316,"src":"5977:28:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$316_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6006:8:13","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":315,"src":"5977:37:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5977:39:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1223,"id":1227,"nodeType":"Return","src":"5970:46:13"}]},"documentation":{"id":1217,"nodeType":"StructuredDocumentation","src":"5805:44:13","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1229,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"5863:8:13","nodeType":"FunctionDefinition","overrides":{"id":1220,"nodeType":"OverrideSpecifier","overrides":[{"id":1219,"name":"ForwarderRegistryContextBase","nameLocations":["5905:28:13"],"nodeType":"IdentifierPath","referencedDeclaration":316,"src":"5905:28:13"}],"src":"5896:38:13"},"parameters":{"id":1218,"nodeType":"ParameterList","parameters":[],"src":"5871:2:13"},"returnParameters":{"id":1223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1229,"src":"5944:14:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1221,"name":"bytes","nodeType":"ElementaryTypeName","src":"5944:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5943:16:13"},"scope":1824,"src":"5854:169:13","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1243,"nodeType":"Block","src":"6177:73:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1235,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6195:5:13","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1236,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6201:9:13","memberName":"timestamp","nodeType":"MemberAccess","src":"6195:15:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1237,"name":"INITIAL_TIME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"6213:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6195:30:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1239,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6194:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1240,"name":"CYCLE_DURATION","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"6229:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6194:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1234,"id":1242,"nodeType":"Return","src":"6187:56:13"}]},"documentation":{"id":1230,"nodeType":"StructuredDocumentation","src":"6029:89:13","text":" @notice Get the current cycle.\n @return cycle The current cycle."},"functionSelector":"bab2f552","id":1244,"implemented":true,"kind":"function","modifiers":[],"name":"currentCycle","nameLocation":"6132:12:13","nodeType":"FunctionDefinition","parameters":{"id":1231,"nodeType":"ParameterList","parameters":[],"src":"6144:2:13"},"returnParameters":{"id":1234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1244,"src":"6168:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1232,"name":"uint256","nodeType":"ElementaryTypeName","src":"6168:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6167:9:13"},"scope":1824,"src":"6123:127:13","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[451],"body":{"id":1429,"nodeType":"Block","src":"7069:1497:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1261,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7083:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7087:6:13","memberName":"sender","nodeType":"MemberAccess","src":"7083:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1265,"name":"MISSING_ORB","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"7105:11:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}],"id":1264,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7097:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:13","typeDescriptions":{}}},"id":1266,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7097:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7083:34:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1274,"nodeType":"IfStatement","src":"7079:103:13","trueBody":{"id":1273,"nodeType":"Block","src":"7119:63:13","statements":[{"errorCall":{"arguments":[{"expression":{"id":1269,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7160:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7164:6:13","memberName":"sender","nodeType":"MemberAccess","src":"7160:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1268,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"7140:19:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7140:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1272,"nodeType":"RevertStatement","src":"7133:38:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1275,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"7195:2:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1276,"name":"MISSING_ORB_TOKEN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1003,"src":"7201:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7195:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1285,"nodeType":"IfStatement","src":"7191:94:13","trueBody":{"id":1284,"nodeType":"Block","src":"7223:62:13","statements":[{"errorCall":{"arguments":[{"expression":{"id":1279,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7259:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7263:6:13","memberName":"sender","nodeType":"MemberAccess","src":"7259:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1281,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"7271:2:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1278,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"7244:14:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7244:30:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1283,"nodeType":"RevertStatement","src":"7237:37:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1286,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"7299:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":1287,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7308:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7299:10:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1297,"nodeType":"IfStatement","src":"7295:88:13","trueBody":{"id":1296,"nodeType":"Block","src":"7311:72:13","statements":[{"errorCall":{"arguments":[{"expression":{"id":1290,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7350:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7354:6:13","memberName":"sender","nodeType":"MemberAccess","src":"7350:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1292,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"7362:2:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1293,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"7366:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1289,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"7332:17:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7332:40:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1295,"nodeType":"RevertStatement","src":"7325:47:13"}]}},{"assignments":[1299],"declarations":[{"constant":false,"id":1299,"mutability":"mutable","name":"cycle","nameLocation":"7401:5:13","nodeType":"VariableDeclaration","scope":1429,"src":"7393:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1298,"name":"uint256","nodeType":"ElementaryTypeName","src":"7393:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1302,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1300,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"7409:12:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7409:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7393:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1303,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"7437:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1304,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"7445:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7437:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1311,"nodeType":"IfStatement","src":"7433:74:13","trueBody":{"id":1310,"nodeType":"Block","src":"7456:51:13","statements":[{"errorCall":{"arguments":[{"id":1307,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"7490:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1306,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"7477:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1308,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7477:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1309,"nodeType":"RevertStatement","src":"7470:26:13"}]}},{"assignments":[1313],"declarations":[{"constant":false,"id":1313,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"7525:16:13","nodeType":"VariableDeclaration","scope":1429,"src":"7517:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"7517:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1317,"initialValue":{"baseExpression":{"id":1314,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"7544:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1316,"indexExpression":{"id":1315,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"7559:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7544:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7517:47:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint128","typeString":"uint128"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1320,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"7586:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7578:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1318,"name":"uint128","nodeType":"ElementaryTypeName","src":"7578:7:13","typeDescriptions":{}}},"id":1321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7578:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7606:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7578:29:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1329,"nodeType":"IfStatement","src":"7574:96:13","trueBody":{"id":1328,"nodeType":"Block","src":"7609:61:13","statements":[{"errorCall":{"arguments":[{"id":1325,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"7654:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1324,"name":"AlreadySetROCMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"7630:23:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1326,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7630:29:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1327,"nodeType":"RevertStatement","src":"7623:36:13"}]}},{"expression":{"arguments":[{"arguments":[{"id":1337,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"7726:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}],"id":1336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7718:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1335,"name":"address","nodeType":"ElementaryTypeName","src":"7718:7:13","typeDescriptions":{}}},"id":1338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7718:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1339,"name":"id","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1251,"src":"7733:2:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"7737:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[{"expression":{"id":1331,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7697:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7701:6:13","memberName":"sender","nodeType":"MemberAccess","src":"7697:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1330,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"7680:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$432_$","typeString":"type(contract IERC1155Burnable)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7680:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"id":1334,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7709:8:13","memberName":"burnFrom","nodeType":"MemberAccess","referencedDeclaration":419,"src":"7680:37:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) external"}},"id":1341,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7680:63:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1342,"nodeType":"ExpressionStatement","src":"7680:63:13"},{"assignments":[1344],"declarations":[{"constant":false,"id":1344,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"7762:16:13","nodeType":"VariableDeclaration","scope":1429,"src":"7754:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1343,"name":"uint256","nodeType":"ElementaryTypeName","src":"7754:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1348,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1345,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"7781:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1346,"name":"ROC_MULTIPLIER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"7800:14:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7781:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7754:60:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1352,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1349,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7828:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7833:6:13","memberName":"length","nodeType":"MemberAccess","src":"7828:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7842:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7828:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1412,"nodeType":"IfStatement","src":"7824:562:13","trueBody":{"id":1411,"nodeType":"Block","src":"7845:541:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1353,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"7864:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7884:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"7864:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1356,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7863:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1357,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7892:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7863:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1410,"nodeType":"IfStatement","src":"7859:517:13","trueBody":{"id":1409,"nodeType":"Block","src":"7895:481:13","statements":[{"assignments":[1363,1365],"declarations":[{"constant":false,"id":1363,"mutability":"mutable","name":"proof","nameLocation":"7931:5:13","nodeType":"VariableDeclaration","scope":1409,"src":"7914:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7914:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1362,"nodeType":"ArrayTypeName","src":"7914:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1365,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"7946:29:13","nodeType":"VariableDeclaration","scope":1409,"src":"7938:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1364,"name":"uint256","nodeType":"ElementaryTypeName","src":"7938:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1376,"initialValue":{"arguments":[{"id":1368,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"7990:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7997:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1369,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7997:7:13","typeDescriptions":{}}},"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"7997:9:13","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8008:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1372,"name":"uint256","nodeType":"ElementaryTypeName","src":"8008:7:13","typeDescriptions":{}}}],"id":1374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"7996:20:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1366,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7979:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1367,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7983:6:13","memberName":"decode","nodeType":"MemberAccess","src":"7979:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1375,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7979:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"7913:104:13"},{"assignments":[1378],"declarations":[{"constant":false,"id":1378,"mutability":"mutable","name":"leaf","nameLocation":"8043:4:13","nodeType":"VariableDeclaration","scope":1409,"src":"8035:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8035:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1386,"initialValue":{"arguments":[{"arguments":[{"id":1382,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8077:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1383,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"8083:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1380,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8060:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8064:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"8060:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1384,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8060:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1379,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8050:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1385,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8050:64:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"8035:79:13"},{"condition":{"id":1392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"8136:32:13","subExpression":{"arguments":[{"id":1389,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"8150:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1390,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1378,"src":"8163:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1387,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1363,"src":"8137:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8143:6:13","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":494,"src":"8137:12:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8137:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1399,"nodeType":"IfStatement","src":"8132:135:13","trueBody":{"id":1398,"nodeType":"Block","src":"8170:97:13","statements":[{"errorCall":{"arguments":[{"id":1394,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8212:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1395,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"8218:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1393,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"8199:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1396,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8199:49:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1397,"nodeType":"RevertStatement","src":"8192:56:13"}]}},{"expression":{"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1400,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"8285:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1401,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"8305:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8338:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8305:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1404,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8304:38:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1405,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"8345:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8304:57:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8285:76:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1408,"nodeType":"ExpressionStatement","src":"8285:76:13"}]}}]}},{"expression":{"id":1417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1413,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"8395:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1415,"indexExpression":{"id":1414,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8410:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8395:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1416,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"8418:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8395:39:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1418,"nodeType":"ExpressionStatement","src":"8395:39:13"},{"eventCall":{"arguments":[{"id":1420,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1249,"src":"8469:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1421,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"8475:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1422,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"8493:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1419,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"8449:19:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8449:61:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"EmitStatement","src":"8444:66:13"},{"expression":{"expression":{"expression":{"id":1425,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"8528:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}},"id":1426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8533:17:13","memberName":"onERC1155Received","nodeType":"MemberAccess","referencedDeclaration":1430,"src":"8528:22:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,uint256,bytes memory) external returns (bytes4)"}},"id":1427,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8551:8:13","memberName":"selector","nodeType":"MemberAccess","src":"8528:31:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1260,"id":1428,"nodeType":"Return","src":"8521:38:13"}]},"documentation":{"id":1245,"nodeType":"StructuredDocumentation","src":"6256:675:13","text":" @notice Set the Orb multiplier by burning the Missing Orb token 1\n @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\n @param from The wallet address.\n @param id The token ID.\n @param value The token value.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid.\n @dev Throws if the token multiplier has already been set."},"functionSelector":"f23a6e61","id":1430,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155Received","nameLocation":"6945:17:13","nodeType":"FunctionDefinition","overrides":{"id":1257,"nodeType":"OverrideSpecifier","overrides":[],"src":"7043:8:13"},"parameters":{"id":1256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1247,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"6963:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1246,"name":"address","nodeType":"ElementaryTypeName","src":"6963:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1249,"mutability":"mutable","name":"from","nameLocation":"6980:4:13","nodeType":"VariableDeclaration","scope":1430,"src":"6972:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1248,"name":"address","nodeType":"ElementaryTypeName","src":"6972:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1251,"mutability":"mutable","name":"id","nameLocation":"6994:2:13","nodeType":"VariableDeclaration","scope":1430,"src":"6986:10:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"6986:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1253,"mutability":"mutable","name":"value","nameLocation":"7006:5:13","nodeType":"VariableDeclaration","scope":1430,"src":"6998:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1252,"name":"uint256","nodeType":"ElementaryTypeName","src":"6998:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1255,"mutability":"mutable","name":"data","nameLocation":"7028:4:13","nodeType":"VariableDeclaration","scope":1430,"src":"7013:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1254,"name":"bytes","nodeType":"ElementaryTypeName","src":"7013:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6962:71:13"},"returnParameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1430,"src":"7061:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1258,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7061:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7060:8:13"},"scope":1824,"src":"6936:1630:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[469],"body":{"id":1822,"nodeType":"Block","src":"9308:3245:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1455,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1449,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9322:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9326:6:13","memberName":"sender","nodeType":"MemberAccess","src":"9322:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":1453,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"9344:12:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}],"id":1452,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9336:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1451,"name":"address","nodeType":"ElementaryTypeName","src":"9336:7:13","typeDescriptions":{}}},"id":1454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9336:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9322:35:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1462,"nodeType":"IfStatement","src":"9318:104:13","trueBody":{"id":1461,"nodeType":"Block","src":"9359:63:13","statements":[{"errorCall":{"arguments":[{"expression":{"id":1457,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9400:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9404:6:13","memberName":"sender","nodeType":"MemberAccess","src":"9400:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1456,"name":"InvalidTokenAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1106,"src":"9380:19:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1459,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9380:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1460,"nodeType":"RevertStatement","src":"9373:38:13"}]}},{"assignments":[1464],"declarations":[{"constant":false,"id":1464,"mutability":"mutable","name":"cycle","nameLocation":"9440:5:13","nodeType":"VariableDeclaration","scope":1822,"src":"9432:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1463,"name":"uint256","nodeType":"ElementaryTypeName","src":"9432:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1467,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1465,"name":"currentCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1244,"src":"9448:12:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9448:14:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9432:30:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1470,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1468,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"9476:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1469,"name":"MAX_CYCLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1046,"src":"9484:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9476:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1476,"nodeType":"IfStatement","src":"9472:74:13","trueBody":{"id":1475,"nodeType":"Block","src":"9495:51:13","statements":[{"errorCall":{"arguments":[{"id":1472,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"9529:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1471,"name":"InvalidCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1120,"src":"9516:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:19:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1474,"nodeType":"RevertStatement","src":"9509:26:13"}]}},{"expression":{"arguments":[{"arguments":[{"id":1484,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"9607:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}],"id":1483,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9599:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1482,"name":"address","nodeType":"ElementaryTypeName","src":"9599:7:13","typeDescriptions":{}}},"id":1485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9599:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1486,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"9614:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1487,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"9619:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"arguments":[{"expression":{"id":1478,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9573:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1479,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9577:6:13","memberName":"sender","nodeType":"MemberAccess","src":"9573:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1477,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"9556:16:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1155Burnable_$432_$","typeString":"type(contract IERC1155Burnable)"}},"id":1480,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:28:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"id":1481,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9585:13:13","memberName":"batchBurnFrom","nodeType":"MemberAccess","referencedDeclaration":431,"src":"9556:42:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$","typeString":"function (address,uint256[] memory,uint256[] memory) external"}},"id":1488,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9556:70:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1489,"nodeType":"ExpressionStatement","src":"9556:70:13"},{"assignments":[1491],"declarations":[{"constant":false,"id":1491,"mutability":"mutable","name":"ashGenerated","nameLocation":"9645:12:13","nodeType":"VariableDeclaration","scope":1822,"src":"9637:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1490,"name":"uint256","nodeType":"ElementaryTypeName","src":"9637:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1493,"initialValue":{"hexValue":"30","id":1492,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9660:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9637:24:13"},{"body":{"id":1646,"nodeType":"Block","src":"9712:966:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1505,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"9730:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1507,"indexExpression":{"id":1506,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9737:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9730:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9743:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9730:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1522,"nodeType":"IfStatement","src":"9726:108:13","trueBody":{"id":1521,"nodeType":"Block","src":"9746:88:13","statements":[{"errorCall":{"arguments":[{"expression":{"id":1511,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9789:3:13","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9793:6:13","memberName":"sender","nodeType":"MemberAccess","src":"9789:10:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1513,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"9801:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1515,"indexExpression":{"id":1514,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9805:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9801:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"baseExpression":{"id":1516,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"9809:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1518,"indexExpression":{"id":1517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9816:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9809:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1510,"name":"InvalidTokenValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1115,"src":"9771:17:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":1519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9771:48:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1520,"nodeType":"RevertStatement","src":"9764:55:13"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1523,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"9852:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1525,"indexExpression":{"id":1524,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9856:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9852:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":1526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9862:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9852:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1538,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"9957:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1540,"indexExpression":{"id":1539,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9961:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9957:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"32","id":1541,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9967:1:13","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9957:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1557,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1553,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10062:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1555,"indexExpression":{"id":1554,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10066:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10062:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"33","id":1556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10072:1:13","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"10062:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1568,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10167:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1570,"indexExpression":{"id":1569,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10171:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10167:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"34","id":1571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:1:13","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10167:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1583,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10272:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1585,"indexExpression":{"id":1584,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10276:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10272:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"35","id":1586,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:1:13","typeDescriptions":{"typeIdentifier":"t_rational_5_by_1","typeString":"int_const 5"},"value":"5"},"src":"10272:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1598,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10377:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1600,"indexExpression":{"id":1599,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10381:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10377:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"36","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10387:1:13","typeDescriptions":{"typeIdentifier":"t_rational_6_by_1","typeString":"int_const 6"},"value":"6"},"src":"10377:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1613,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10482:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1615,"indexExpression":{"id":1614,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10486:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10482:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"37","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10492:1:13","typeDescriptions":{"typeIdentifier":"t_rational_7_by_1","typeString":"int_const 7"},"value":"7"},"src":"10482:11:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1638,"nodeType":"Block","src":"10583:85:13","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":1631,"name":"ORB_OF_POWER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"10631:12:13","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}],"id":1630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10623:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1629,"name":"address","nodeType":"ElementaryTypeName","src":"10623:7:13","typeDescriptions":{}}},"id":1632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10623:21:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1633,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"10646:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1635,"indexExpression":{"id":1634,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10650:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10646:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1628,"name":"InvalidTokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"10608:14:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10608:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1637,"nodeType":"RevertStatement","src":"10601:52:13"}]},"id":1639,"nodeType":"IfStatement","src":"10478:190:13","trueBody":{"id":1627,"nodeType":"Block","src":"10495:82:13","statements":[{"expression":{"id":1625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1618,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"10513:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1619,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10530:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1621,"indexExpression":{"id":1620,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10537:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10530:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1622,"name":"BURN_WEIGHT_TOKEN_7","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1025,"src":"10542:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10530:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1624,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10529:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10513:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1626,"nodeType":"ExpressionStatement","src":"10513:49:13"}]}},"id":1640,"nodeType":"IfStatement","src":"10373:295:13","trueBody":{"id":1612,"nodeType":"Block","src":"10390:82:13","statements":[{"expression":{"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1603,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"10408:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1604,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10425:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1606,"indexExpression":{"id":1605,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10432:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10425:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1607,"name":"BURN_WEIGHT_TOKEN_6","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1022,"src":"10437:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10425:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1609,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10424:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10408:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1611,"nodeType":"ExpressionStatement","src":"10408:49:13"}]}},"id":1641,"nodeType":"IfStatement","src":"10268:400:13","trueBody":{"id":1597,"nodeType":"Block","src":"10285:82:13","statements":[{"expression":{"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1588,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"10303:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1593,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1589,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10320:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1591,"indexExpression":{"id":1590,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10327:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10320:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1592,"name":"BURN_WEIGHT_TOKEN_5","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"10332:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10320:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1594,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10319:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10303:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1596,"nodeType":"ExpressionStatement","src":"10303:49:13"}]}},"id":1642,"nodeType":"IfStatement","src":"10163:505:13","trueBody":{"id":1582,"nodeType":"Block","src":"10180:82:13","statements":[{"expression":{"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1573,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"10198:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1574,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10215:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1576,"indexExpression":{"id":1575,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10222:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10215:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1577,"name":"BURN_WEIGHT_TOKEN_4","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"10227:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10215:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1579,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10214:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10198:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1581,"nodeType":"ExpressionStatement","src":"10198:49:13"}]}},"id":1643,"nodeType":"IfStatement","src":"10058:610:13","trueBody":{"id":1567,"nodeType":"Block","src":"10075:82:13","statements":[{"expression":{"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1558,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"10093:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1559,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10110:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1561,"indexExpression":{"id":1560,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10117:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10110:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1562,"name":"BURN_WEIGHT_TOKEN_3","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1013,"src":"10122:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10110:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1564,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10109:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10093:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1566,"nodeType":"ExpressionStatement","src":"10093:49:13"}]}},"id":1644,"nodeType":"IfStatement","src":"9953:715:13","trueBody":{"id":1552,"nodeType":"Block","src":"9970:82:13","statements":[{"expression":{"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1543,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"9988:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1544,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"10005:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1546,"indexExpression":{"id":1545,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"10012:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10005:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1547,"name":"BURN_WEIGHT_TOKEN_2","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1010,"src":"10017:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10005:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1549,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"10004:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9988:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1551,"nodeType":"ExpressionStatement","src":"9988:49:13"}]}},"id":1645,"nodeType":"IfStatement","src":"9848:820:13","trueBody":{"id":1537,"nodeType":"Block","src":"9865:82:13","statements":[{"expression":{"id":1535,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1528,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"9883:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1529,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"9900:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1531,"indexExpression":{"id":1530,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9907:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9900:9:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1532,"name":"BURN_WEIGHT_TOKEN_1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1007,"src":"9912:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9900:31:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1534,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9899:33:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9883:49:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1536,"nodeType":"ExpressionStatement","src":"9883:49:13"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1498,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9691:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1499,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"9695:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9699:6:13","memberName":"length","nodeType":"MemberAccess","src":"9695:10:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9691:14:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1647,"initializationExpression":{"assignments":[1495],"declarations":[{"constant":false,"id":1495,"mutability":"mutable","name":"i","nameLocation":"9684:1:13","nodeType":"VariableDeclaration","scope":1647,"src":"9676:9:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1494,"name":"uint256","nodeType":"ElementaryTypeName","src":"9676:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1497,"initialValue":{"hexValue":"30","id":1496,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9676:13:13"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"9707:3:13","subExpression":{"id":1502,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1495,"src":"9707:1:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1504,"nodeType":"ExpressionStatement","src":"9707:3:13"},"nodeType":"ForStatement","src":"9671:1007:13"},{"assignments":[1649],"declarations":[{"constant":false,"id":1649,"mutability":"mutable","name":"userAddr","nameLocation":"10696:8:13","nodeType":"VariableDeclaration","scope":1822,"src":"10688:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1648,"name":"address","nodeType":"ElementaryTypeName","src":"10688:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1651,"initialValue":{"id":1650,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1435,"src":"10707:4:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10688:23:13"},{"assignments":[1653],"declarations":[{"constant":false,"id":1653,"mutability":"mutable","name":"curOrbMultiplier","nameLocation":"10789:16:13","nodeType":"VariableDeclaration","scope":1822,"src":"10781:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1652,"name":"uint256","nodeType":"ElementaryTypeName","src":"10781:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1657,"initialValue":{"baseExpression":{"id":1654,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"10808:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1656,"indexExpression":{"id":1655,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"10823:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10808:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"10781:51:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1658,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"10847:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10852:6:13","memberName":"length","nodeType":"MemberAccess","src":"10847:11:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1660,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10861:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"10847:15:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1766,"nodeType":"Block","src":"11716:249:13","statements":[{"assignments":[1747],"declarations":[{"constant":false,"id":1747,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"11738:29:13","nodeType":"VariableDeclaration","scope":1766,"src":"11730:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1746,"name":"uint256","nodeType":"ElementaryTypeName","src":"11730:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1751,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1750,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1748,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"11770:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11790:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11770:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11730:63:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1752,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"11811:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11843:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11811:33:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1765,"nodeType":"IfStatement","src":"11807:148:13","trueBody":{"id":1764,"nodeType":"Block","src":"11846:109:13","statements":[{"expression":{"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1755,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"11864:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1756,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"11880:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1757,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1747,"src":"11895:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11880:44:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1759,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11879:46:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1760,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"11928:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11879:61:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11864:76:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1763,"nodeType":"ExpressionStatement","src":"11864:76:13"}]}}]},"id":1767,"nodeType":"IfStatement","src":"10843:1122:13","trueBody":{"id":1745,"nodeType":"Block","src":"10864:846:13","statements":[{"assignments":[1666,1668],"declarations":[{"constant":false,"id":1666,"mutability":"mutable","name":"proof","nameLocation":"10896:5:13","nodeType":"VariableDeclaration","scope":1745,"src":"10879:22:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[]"},"typeName":{"baseType":{"id":1664,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10879:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":1665,"nodeType":"ArrayTypeName","src":"10879:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_storage_ptr","typeString":"bytes32[]"}},"visibility":"internal"},{"constant":false,"id":1668,"mutability":"mutable","name":"puzzleGameMultiplierNumerator","nameLocation":"10911:29:13","nodeType":"VariableDeclaration","scope":1745,"src":"10903:37:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1667,"name":"uint256","nodeType":"ElementaryTypeName","src":"10903:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1679,"initialValue":{"arguments":[{"id":1671,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"10955:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"baseExpression":{"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10962:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1672,"name":"bytes32","nodeType":"ElementaryTypeName","src":"10962:7:13","typeDescriptions":{}}},"id":1674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"IndexAccess","src":"10962:9:13","typeDescriptions":{"typeIdentifier":"t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"type(bytes32[] memory)"}},{"id":1676,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10973:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1675,"name":"uint256","nodeType":"ElementaryTypeName","src":"10973:7:13","typeDescriptions":{}}}],"id":1677,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"10961:20:13","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_array$_t_bytes32_$dyn_memory_ptr_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(bytes32[] memory),type(uint256))"}],"expression":{"id":1669,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"10944:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10948:6:13","memberName":"decode","nodeType":"MemberAccess","src":"10944:10:13","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10944:38:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes32[] memory,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"10878:104:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1680,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"11001:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":1681,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11021:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11001:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1683,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11000:25:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11029:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11000:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1735,"nodeType":"IfStatement","src":"10996:613:13","trueBody":{"id":1734,"nodeType":"Block","src":"11032:577:13","statements":[{"assignments":[1687],"declarations":[{"constant":false,"id":1687,"mutability":"mutable","name":"leaf","nameLocation":"11058:4:13","nodeType":"VariableDeclaration","scope":1734,"src":"11050:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1686,"name":"bytes32","nodeType":"ElementaryTypeName","src":"11050:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1695,"initialValue":{"arguments":[{"arguments":[{"id":1691,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"11092:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1692,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"11102:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1689,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"11075:3:13","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11079:12:13","memberName":"encodePacked","nodeType":"MemberAccess","src":"11075:16:13","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1693,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11075:57:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1688,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"11065:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:68:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"11050:83:13"},{"condition":{"id":1701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"11155:32:13","subExpression":{"arguments":[{"id":1698,"name":"MERKLE_ROOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1049,"src":"11169:11:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1699,"name":"leaf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"11182:4:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1696,"name":"proof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1666,"src":"11156:5:13","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes32_$dyn_memory_ptr","typeString":"bytes32[] memory"}},"id":1697,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11162:6:13","memberName":"verify","nodeType":"MemberAccess","referencedDeclaration":494,"src":"11156:12:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$attached_to$_t_array$_t_bytes32_$dyn_memory_ptr_$","typeString":"function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11156:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1708,"nodeType":"IfStatement","src":"11151:139:13","trueBody":{"id":1707,"nodeType":"Block","src":"11189:101:13","statements":[{"errorCall":{"arguments":[{"id":1703,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"11231:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1704,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"11241:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1702,"name":"InvalidProof","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1132,"src":"11218:12:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1705,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11218:53:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1706,"nodeType":"RevertStatement","src":"11211:60:13"}]}},{"assignments":[1710],"declarations":[{"constant":false,"id":1710,"mutability":"mutable","name":"newOrbMultiplier","nameLocation":"11316:16:13","nodeType":"VariableDeclaration","scope":1734,"src":"11308:24:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1709,"name":"uint256","nodeType":"ElementaryTypeName","src":"11308:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1717,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1711,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"11336:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313238","id":1712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11369:3:13","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11336:36:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1714,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11335:38:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1715,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"11376:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11335:57:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11308:84:13"},{"expression":{"id":1722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1718,"name":"orbMultipliers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1066,"src":"11410:14:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1720,"indexExpression":{"id":1719,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"11425:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11410:24:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1721,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"11437:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11410:43:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1723,"nodeType":"ExpressionStatement","src":"11410:43:13"},{"eventCall":{"arguments":[{"id":1725,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"11496:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1726,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"11506:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1727,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"11524:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1724,"name":"UpdateOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1094,"src":"11476:19:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11476:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1729,"nodeType":"EmitStatement","src":"11471:70:13"},{"expression":{"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1730,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"11559:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1731,"name":"newOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1710,"src":"11578:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11559:35:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1733,"nodeType":"ExpressionStatement","src":"11559:35:13"}]}},{"expression":{"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1736,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"11623:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1737,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"11639:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1738,"name":"puzzleGameMultiplierNumerator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1668,"src":"11654:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11639:44:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1740,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11638:46:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1741,"name":"_DENOMINATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"11687:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11638:61:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11623:76:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1744,"nodeType":"ExpressionStatement","src":"11623:76:13"}]}},{"assignments":[1769],"declarations":[{"constant":false,"id":1769,"mutability":"mutable","name":"rocMultiplier","nameLocation":"11983:13:13","nodeType":"VariableDeclaration","scope":1822,"src":"11975:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1768,"name":"uint256","nodeType":"ElementaryTypeName","src":"11975:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1774,"initialValue":{"arguments":[{"id":1772,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"12007:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1771,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11999:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint128_$","typeString":"type(uint128)"},"typeName":{"id":1770,"name":"uint128","nodeType":"ElementaryTypeName","src":"11999:7:13","typeDescriptions":{}}},"id":1773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11999:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint128","typeString":"uint128"}},"nodeType":"VariableDeclarationStatement","src":"11975:49:13"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1775,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"12038:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1776,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12054:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12038:17:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1783,"nodeType":"IfStatement","src":"12034:77:13","trueBody":{"id":1782,"nodeType":"Block","src":"12057:54:13","statements":[{"expression":{"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1778,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"12071:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"id":1779,"name":"rocMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1769,"src":"12087:13:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12071:29:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1781,"nodeType":"ExpressionStatement","src":"12071:29:13"}]}},{"assignments":[1785],"declarations":[{"constant":false,"id":1785,"mutability":"mutable","name":"userTotalAshPerCycle","nameLocation":"12163:20:13","nodeType":"VariableDeclaration","scope":1822,"src":"12155:28:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1784,"name":"uint256","nodeType":"ElementaryTypeName","src":"12155:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1793,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"baseExpression":{"id":1786,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"12186:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1788,"indexExpression":{"id":1787,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"12202:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12186:22:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1790,"indexExpression":{"id":1789,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"12209:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12186:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1791,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"12221:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12186:47:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12155:78:13"},{"expression":{"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1794,"name":"userAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"12243:15:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(uint256 => mapping(address => uint256))"}},"id":1797,"indexExpression":{"id":1795,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"12259:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12243:22:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1798,"indexExpression":{"id":1796,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"12266:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12243:32:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1799,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"12278:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12243:55:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1801,"nodeType":"ExpressionStatement","src":"12243:55:13"},{"expression":{"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1802,"name":"totalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1054,"src":"12342:16:13","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1804,"indexExpression":{"id":1803,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"12359:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12342:23:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1805,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"12369:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12342:39:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1807,"nodeType":"ExpressionStatement","src":"12342:39:13"},{"eventCall":{"arguments":[{"id":1809,"name":"userAddr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1649,"src":"12409:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1810,"name":"cycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1464,"src":"12419:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1811,"name":"ids","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1438,"src":"12426:3:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1812,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1441,"src":"12431:6:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1813,"name":"ashGenerated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"12439:12:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1814,"name":"userTotalAshPerCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1785,"src":"12453:20:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1815,"name":"curOrbMultiplier","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1653,"src":"12475:16:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1808,"name":"GenerateAsh","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1085,"src":"12397:11:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256[] memory,uint256[] memory,uint256,uint256,uint256)"}},"id":1816,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12397:95:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1817,"nodeType":"EmitStatement","src":"12392:100:13"},{"expression":{"expression":{"expression":{"id":1818,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"12510:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_OrbsBurnPool_$1824","typeString":"contract OrbsBurnPool"}},"id":1819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12515:22:13","memberName":"onERC1155BatchReceived","nodeType":"MemberAccess","referencedDeclaration":1823,"src":"12510:27:13","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256[] memory,uint256[] memory,bytes memory) external returns (bytes4)"}},"id":1820,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12538:8:13","memberName":"selector","nodeType":"MemberAccess","src":"12510:36:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":1448,"id":1821,"nodeType":"Return","src":"12503:43:13"}]},"documentation":{"id":1431,"nodeType":"StructuredDocumentation","src":"8572:523:13","text":" @notice Burn the tokens and calculate the ash.\n @param from The wallet address.\n @param ids The token IDs to burn.\n @param values The amount of tokens to burn.\n @param data The merkle proof data and multiplier value for setting the token multiplier.\n @return The ERC1155Received selector.\n @dev Throws if the token is invalid.\n @dev Throws if the cycle is invalid.\n @dev Throws if the token ID is invalid.\n @dev Throws if the token amount is invalid."},"functionSelector":"bc197c81","id":1823,"implemented":true,"kind":"function","modifiers":[],"name":"onERC1155BatchReceived","nameLocation":"9109:22:13","nodeType":"FunctionDefinition","overrides":{"id":1445,"nodeType":"OverrideSpecifier","overrides":[],"src":"9282:8:13"},"parameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1433,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"9141:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1432,"name":"address","nodeType":"ElementaryTypeName","src":"9141:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1435,"mutability":"mutable","name":"from","nameLocation":"9166:4:13","nodeType":"VariableDeclaration","scope":1823,"src":"9158:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1434,"name":"address","nodeType":"ElementaryTypeName","src":"9158:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1438,"mutability":"mutable","name":"ids","nameLocation":"9199:3:13","nodeType":"VariableDeclaration","scope":1823,"src":"9180:22:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1436,"name":"uint256","nodeType":"ElementaryTypeName","src":"9180:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1437,"nodeType":"ArrayTypeName","src":"9180:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1441,"mutability":"mutable","name":"values","nameLocation":"9231:6:13","nodeType":"VariableDeclaration","scope":1823,"src":"9212:25:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1439,"name":"uint256","nodeType":"ElementaryTypeName","src":"9212:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1440,"nodeType":"ArrayTypeName","src":"9212:9:13","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1443,"mutability":"mutable","name":"data","nameLocation":"9262:4:13","nodeType":"VariableDeclaration","scope":1823,"src":"9247:19:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1442,"name":"bytes","nodeType":"ElementaryTypeName","src":"9247:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9131:141:13"},"returnParameters":{"id":1448,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1447,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1823,"src":"9300:6:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1446,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9300:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9299:8:13"},"scope":1824,"src":"9100:3453:13","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1825,"src":"889:11666:13","usedErrors":[34,1101,1106,1115,1120,1125,1132,1135,1138],"usedEvents":[1085,1094]}],"src":"32:12524:13"},"id":13},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"ast":{"absolutePath":"contracts/mocks/burn/OrbsBurnPoolMock.sol","exportedSymbols":{"IERC1155Burnable":[432],"IForwarderRegistry":[342],"OrbsBurnPool":[1824],"OrbsBurnPoolMock":[1884]},"id":1885,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1826,"literals":["solidity","0.8",".22"],"nodeType":"PragmaDirective","src":"32:23:14"},{"absolutePath":"contracts/burn/OrbsBurnPool.sol","file":"../../burn/OrbsBurnPool.sol","id":1828,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":1825,"src":"57:57:14","symbolAliases":[{"foreign":{"id":1827,"name":"OrbsBurnPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1824,"src":"65:12:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":1830,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":343,"src":"115:114:14","symbolAliases":[{"foreign":{"id":1829,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":342,"src":"123:18:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol","id":1832,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1885,"sourceUnit":433,"src":"230:117:14","symbolAliases":[{"foreign":{"id":1831,"name":"IERC1155Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":432,"src":"238:16:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1833,"name":"OrbsBurnPool","nameLocations":["378:12:14"],"nodeType":"IdentifierPath","referencedDeclaration":1824,"src":"378:12:14"},"id":1834,"nodeType":"InheritanceSpecifier","src":"378:12:14"}],"canonicalName":"OrbsBurnPoolMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":1884,"linearizedBaseContracts":[1884,1824,406,29,46,470,196,328,316],"name":"OrbsBurnPoolMock","nameLocation":"358:16:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":1863,"nodeType":"Block","src":"755:2:14","statements":[]},"id":1864,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1854,"name":"initialTime","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"662:11:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1855,"name":"cycleDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1838,"src":"675:13:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1856,"name":"maxCycle","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1840,"src":"690:8:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1857,"name":"merkleRoot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1842,"src":"700:10:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1858,"name":"orbOfPower","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1845,"src":"712:10:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},{"id":1859,"name":"missingOrb","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"724:10:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},{"id":1860,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1851,"src":"736:17:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}}],"id":1861,"kind":"baseConstructorSpecifier","modifierName":{"id":1853,"name":"OrbsBurnPool","nameLocations":["649:12:14"],"nodeType":"IdentifierPath","referencedDeclaration":1824,"src":"649:12:14"},"nodeType":"ModifierInvocation","src":"649:105:14"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1852,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1836,"mutability":"mutable","name":"initialTime","nameLocation":"426:11:14","nodeType":"VariableDeclaration","scope":1864,"src":"418:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1835,"name":"uint256","nodeType":"ElementaryTypeName","src":"418:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1838,"mutability":"mutable","name":"cycleDuration","nameLocation":"455:13:14","nodeType":"VariableDeclaration","scope":1864,"src":"447:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1837,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1840,"mutability":"mutable","name":"maxCycle","nameLocation":"486:8:14","nodeType":"VariableDeclaration","scope":1864,"src":"478:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1839,"name":"uint256","nodeType":"ElementaryTypeName","src":"478:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1842,"mutability":"mutable","name":"merkleRoot","nameLocation":"512:10:14","nodeType":"VariableDeclaration","scope":1864,"src":"504:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1841,"name":"bytes32","nodeType":"ElementaryTypeName","src":"504:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1845,"mutability":"mutable","name":"orbOfPower","nameLocation":"549:10:14","nodeType":"VariableDeclaration","scope":1864,"src":"532:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1844,"nodeType":"UserDefinedTypeName","pathNode":{"id":1843,"name":"IERC1155Burnable","nameLocations":["532:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"532:16:14"},"referencedDeclaration":432,"src":"532:16:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"missingOrb","nameLocation":"586:10:14","nodeType":"VariableDeclaration","scope":1864,"src":"569:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"},"typeName":{"id":1847,"nodeType":"UserDefinedTypeName","pathNode":{"id":1846,"name":"IERC1155Burnable","nameLocations":["569:16:14"],"nodeType":"IdentifierPath","referencedDeclaration":432,"src":"569:16:14"},"referencedDeclaration":432,"src":"569:16:14","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1155Burnable_$432","typeString":"contract IERC1155Burnable"}},"visibility":"internal"},{"constant":false,"id":1851,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"625:17:14","nodeType":"VariableDeclaration","scope":1864,"src":"606:36:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"},"typeName":{"id":1850,"nodeType":"UserDefinedTypeName","pathNode":{"id":1849,"name":"IForwarderRegistry","nameLocations":["606:18:14"],"nodeType":"IdentifierPath","referencedDeclaration":342,"src":"606:18:14"},"referencedDeclaration":342,"src":"606:18:14","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$342","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"408:240:14"},"returnParameters":{"id":1862,"nodeType":"ParameterList","parameters":[],"src":"755:0:14"},"scope":1884,"src":"397:360:14","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":1872,"nodeType":"Block","src":"818:36:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1869,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1216],"referencedDeclaration":1216,"src":"835:10:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"835:12:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1868,"id":1871,"nodeType":"Return","src":"828:19:14"}]},"functionSelector":"d1a91ff2","id":1873,"implemented":true,"kind":"function","modifiers":[],"name":"__msgSender","nameLocation":"772:11:14","nodeType":"FunctionDefinition","parameters":{"id":1865,"nodeType":"ParameterList","parameters":[],"src":"783:2:14"},"returnParameters":{"id":1868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1873,"src":"809:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"809:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"808:9:14"},"scope":1884,"src":"763:91:14","stateMutability":"view","virtual":false,"visibility":"external"},{"body":{"id":1882,"nodeType":"Block","src":"1030:34:14","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1879,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[1229],"referencedDeclaration":1229,"src":"1047:8:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1047:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1878,"id":1881,"nodeType":"Return","src":"1040:17:14"}]},"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"860:105:14","text":"@notice Internal function to access the current msg.data.\n @return The current msg.data value."},"functionSelector":"31e66e1e","id":1883,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"979:9:14","nodeType":"FunctionDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[],"src":"988:2:14"},"returnParameters":{"id":1878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1877,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1883,"src":"1014:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1876,"name":"bytes","nodeType":"ElementaryTypeName","src":"1014:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1013:16:14"},"scope":1884,"src":"970:94:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1885,"src":"349:717:14","usedErrors":[34,1101,1106,1115,1120,1125,1132,1135,1138],"usedEvents":[1085,1094]}],"src":"32:1035:14"},"id":14}},"contracts":{"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:3;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:3:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a3e28320f75f9e1e8ec89ff61eb5ff980068ff240e213df057b9e0831cd62b764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP11 RETURNDATACOPY 0x28 ORIGIN 0xF PUSH22 0xF9E1E8EC89FF61EB5FF980068FF240E213DF057B9E08 BALANCE 0xCD PUSH3 0xB76473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"202:568:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol":{"ERC1155TokenReceiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC1155 Multi Token Standard, Token Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC1155 Multi Token Standard, Token Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":\"ERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol":{"IERC1155Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.","kind":"dev","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"details":"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.","params":{"from":"Address of the current tokens owner.","ids":"Identifiers of the tokens to burn.","values":"Amounts of tokens to burn."}},"burnFrom(address,uint256,uint256)":{"details":"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.","params":{"from":"Address of the current token owner.","id":"Identifier of the token to burn.","value":"Amount of token to burn."}}},"title":"ERC1155 Multi Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[],uint256[])":"80534934","burnFrom(address,uint256,uint256)":"124d91e5"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x921ed8d1.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"details\":\"Reverts if `ids` and `values` have different lengths.Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance for any of `ids`.Emits an {IERC1155-TransferBatch} event.\",\"params\":{\"from\":\"Address of the current tokens owner.\",\"ids\":\"Identifiers of the tokens to burn.\",\"values\":\"Amounts of tokens to burn.\"}},\"burnFrom(address,uint256,uint256)\":{\"details\":\"Reverts if the sender is not `from` and has not been approved by `from`.Reverts if `from` has an insufficient balance of `id`.Emits an {IERC1155-TransferSingle} event.\",\"params\":{\"from\":\"Address of the current token owner.\",\"id\":\"Identifier of the token to burn.\",\"value\":\"Amount of token to burn.\"}}},\"title\":\"ERC1155 Multi Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[],uint256[])\":{\"notice\":\"Burns multiple tokens.\"},\"burnFrom(address,uint256,uint256)\":{\"notice\":\"Burns some token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":\"IERC1155Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[],uint256[])":{"notice":"Burns multiple tokens."},"burnFrom(address,uint256,uint256)":{"notice":"Burns some token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol":{"IERC1155TokenReceiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.","kind":"dev","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","ids":"An array containing ids of each token being transferred (order and length must match _values array)","operator":"The address which initiated the batch transfer (i.e. msg.sender)","values":"An array containing amounts of each token being transferred (order and length must match _ids array)"},"returns":{"magicValue":"`0xbc197c81` to accept the transfer, or any other value to reject it."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.","params":{"data":"Additional data with no specified format","from":"The address which previously owned the token","id":"The ID of the token being transferred","operator":"The address which initiated the transfer (i.e. msg.sender)","value":"The amount of tokens being transferred"},"returns":{"magicValue":"`0xf23a6e61` to accept the transfer, or any other value to reject it."}}},"title":"ERC1155 Multi Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-1155Note: The ERC-165 identifier for this interface is 0x4e2312e0.\",\"kind\":\"dev\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"ids\":\"An array containing ids of each token being transferred (order and length must match _values array)\",\"operator\":\"The address which initiated the batch transfer (i.e. msg.sender)\",\"values\":\"An array containing amounts of each token being transferred (order and length must match _ids array)\"},\"returns\":{\"magicValue\":\"`0xbc197c81` to accept the transfer, or any other value to reject it.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\",\"params\":{\"data\":\"Additional data with no specified format\",\"from\":\"The address which previously owned the token\",\"id\":\"The ID of the token being transferred\",\"operator\":\"The address which initiated the transfer (i.e. msg.sender)\",\"value\":\"The amount of tokens being transferred\"},\"returns\":{\"magicValue\":\"`0xf23a6e61` to accept the transfer, or any other value to reject it.\"}}},\"title\":\"ERC1155 Multi Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\"}},\"notice\":\"Interface for any contract that wants to support transfers from ERC1155 asset contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":\"IERC1155TokenReceiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Handles the receipt of multiple ERC1155 token types.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Handles the receipt of a single ERC1155 token type.ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update."}},"notice":"Interface for any contract that wants to support transfers from ERC1155 asset contracts.","version":1}}},"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol":{"MerkleProof":{"abi":[],"devdoc":{"details":"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;802:8493:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a5b080897360e9a976362fd308fd3efb56ee2ac795e5725918dff22de5bc5ccb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA5 0xB0 DUP1 DUP10 PUSH20 0x60E9A976362FD308FD3EFB56EE2AC795E5725918 0xDF CALLCODE 0x2D 0xE5 0xBC 0x5C 0xCB PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"802:8493:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_efficientHash(bytes32,bytes32)":"infinite","_hashPair(bytes32,bytes32)":"infinite","multiProofVerify(bytes32[] memory,bool[] memory,bytes32,bytes32[] memory)":"infinite","multiProofVerifyCalldata(bytes32[] calldata,bool[] calldata,bytes32,bytes32[] memory)":"infinite","processMultiProof(bytes32[] memory,bool[] memory,bytes32[] memory)":"infinite","processMultiProofCalldata(bytes32[] calldata,bool[] calldata,bytes32[] memory)":"infinite","processProof(bytes32[] memory,bytes32)":"infinite","processProofCalldata(bytes32[] calldata,bytes32)":"infinite","verify(bytes32[] memory,bytes32,bytes32)":"infinite","verifyCalldata(bytes32[] calldata,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"These functions deal with verification of Merkle Tree proofs. The tree and the proofs can be generated using our https://github.com/OpenZeppelin/merkle-tree[JavaScript library]. You will find a quickstart guide in the readme. WARNING: You should avoid using leaf values that are 64 bytes long prior to hashing, or use a hash function other than keccak256 for hashing leaves. This is because the concatenation of a sorted pair of internal nodes in the merkle tree could be reinterpreted as a leaf value. OpenZeppelin's JavaScript library generates merkle trees that are safe against this attack out of the box.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":\"MerkleProof\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/burn/OrbsBurnPool.sol":{"OrbsBurnPool":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.","kind":"dev","methods":{"constructor":{"details":"Throws if the cycle duration is zero.Throws if the max cycle is zero.","params":{"cycleDuration":"The duration of each cycle.","forwarderRegistry":"The forwarder registry contract.","initialTime":"The initial time of the contract.","maxCycle":"The maximum cycle.","merkleRoot":"The Merkle root of the Puzzle Game multiplier claim.","missingOrb":"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.","orbOfPower":"The IERC1155Burnable erc1155 contract burn to generate ASH."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"OrbsBurnPool Contract","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1203":{"entryPoint":null,"id":1203,"parameterSlots":7,"returnSlots":0},"@_170":{"entryPoint":null,"id":170,"parameterSlots":1,"returnSlots":0},"@_217":{"entryPoint":null,"id":217,"parameterSlots":1,"returnSlots":0},"@_405":{"entryPoint":null,"id":405,"parameterSlots":0,"returnSlots":0},"@layout_146":{"entryPoint":221,"id":146,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_100":{"entryPoint":275,"id":100,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory":{"entryPoint":393,"id":null,"parameterSlots":2,"returnSlots":7},"checked_sub_t_uint256":{"entryPoint":516,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":368,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1295:15","nodeType":"YulBlock","src":"0:1295:15","statements":[{"nativeSrc":"6:3:15","nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nativeSrc":"77:86:15","nodeType":"YulBlock","src":"77:86:15","statements":[{"body":{"nativeSrc":"141:16:15","nodeType":"YulBlock","src":"141:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:15","nodeType":"YulLiteral","src":"150:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:15","nodeType":"YulLiteral","src":"153:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:15","nodeType":"YulIdentifier","src":"143:6:15"},"nativeSrc":"143:12:15","nodeType":"YulFunctionCall","src":"143:12:15"},"nativeSrc":"143:12:15","nodeType":"YulExpressionStatement","src":"143:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:15","nodeType":"YulIdentifier","src":"100:5:15"},{"arguments":[{"name":"value","nativeSrc":"111:5:15","nodeType":"YulIdentifier","src":"111:5:15"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:15","nodeType":"YulLiteral","src":"126:3:15","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:15","nodeType":"YulLiteral","src":"131:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:15","nodeType":"YulIdentifier","src":"122:3:15"},"nativeSrc":"122:11:15","nodeType":"YulFunctionCall","src":"122:11:15"},{"kind":"number","nativeSrc":"135:1:15","nodeType":"YulLiteral","src":"135:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:15","nodeType":"YulIdentifier","src":"118:3:15"},"nativeSrc":"118:19:15","nodeType":"YulFunctionCall","src":"118:19:15"}],"functionName":{"name":"and","nativeSrc":"107:3:15","nodeType":"YulIdentifier","src":"107:3:15"},"nativeSrc":"107:31:15","nodeType":"YulFunctionCall","src":"107:31:15"}],"functionName":{"name":"eq","nativeSrc":"97:2:15","nodeType":"YulIdentifier","src":"97:2:15"},"nativeSrc":"97:42:15","nodeType":"YulFunctionCall","src":"97:42:15"}],"functionName":{"name":"iszero","nativeSrc":"90:6:15","nodeType":"YulIdentifier","src":"90:6:15"},"nativeSrc":"90:50:15","nodeType":"YulFunctionCall","src":"90:50:15"},"nativeSrc":"87:70:15","nodeType":"YulIf","src":"87:70:15"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:15","nodeType":"YulTypedName","src":"66:5:15","type":""}],"src":"14:149:15"},{"body":{"nativeSrc":"425:638:15","nodeType":"YulBlock","src":"425:638:15","statements":[{"body":{"nativeSrc":"472:16:15","nodeType":"YulBlock","src":"472:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"481:1:15","nodeType":"YulLiteral","src":"481:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"484:1:15","nodeType":"YulLiteral","src":"484:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"474:6:15","nodeType":"YulIdentifier","src":"474:6:15"},"nativeSrc":"474:12:15","nodeType":"YulFunctionCall","src":"474:12:15"},"nativeSrc":"474:12:15","nodeType":"YulExpressionStatement","src":"474:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"446:7:15","nodeType":"YulIdentifier","src":"446:7:15"},{"name":"headStart","nativeSrc":"455:9:15","nodeType":"YulIdentifier","src":"455:9:15"}],"functionName":{"name":"sub","nativeSrc":"442:3:15","nodeType":"YulIdentifier","src":"442:3:15"},"nativeSrc":"442:23:15","nodeType":"YulFunctionCall","src":"442:23:15"},{"kind":"number","nativeSrc":"467:3:15","nodeType":"YulLiteral","src":"467:3:15","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"438:3:15","nodeType":"YulIdentifier","src":"438:3:15"},"nativeSrc":"438:33:15","nodeType":"YulFunctionCall","src":"438:33:15"},"nativeSrc":"435:53:15","nodeType":"YulIf","src":"435:53:15"},{"nativeSrc":"497:26:15","nodeType":"YulAssignment","src":"497:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"513:9:15","nodeType":"YulIdentifier","src":"513:9:15"}],"functionName":{"name":"mload","nativeSrc":"507:5:15","nodeType":"YulIdentifier","src":"507:5:15"},"nativeSrc":"507:16:15","nodeType":"YulFunctionCall","src":"507:16:15"},"variableNames":[{"name":"value0","nativeSrc":"497:6:15","nodeType":"YulIdentifier","src":"497:6:15"}]},{"nativeSrc":"532:35:15","nodeType":"YulAssignment","src":"532:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"552:9:15","nodeType":"YulIdentifier","src":"552:9:15"},{"kind":"number","nativeSrc":"563:2:15","nodeType":"YulLiteral","src":"563:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"548:3:15","nodeType":"YulIdentifier","src":"548:3:15"},"nativeSrc":"548:18:15","nodeType":"YulFunctionCall","src":"548:18:15"}],"functionName":{"name":"mload","nativeSrc":"542:5:15","nodeType":"YulIdentifier","src":"542:5:15"},"nativeSrc":"542:25:15","nodeType":"YulFunctionCall","src":"542:25:15"},"variableNames":[{"name":"value1","nativeSrc":"532:6:15","nodeType":"YulIdentifier","src":"532:6:15"}]},{"nativeSrc":"576:35:15","nodeType":"YulAssignment","src":"576:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:15","nodeType":"YulIdentifier","src":"596:9:15"},{"kind":"number","nativeSrc":"607:2:15","nodeType":"YulLiteral","src":"607:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"592:3:15","nodeType":"YulIdentifier","src":"592:3:15"},"nativeSrc":"592:18:15","nodeType":"YulFunctionCall","src":"592:18:15"}],"functionName":{"name":"mload","nativeSrc":"586:5:15","nodeType":"YulIdentifier","src":"586:5:15"},"nativeSrc":"586:25:15","nodeType":"YulFunctionCall","src":"586:25:15"},"variableNames":[{"name":"value2","nativeSrc":"576:6:15","nodeType":"YulIdentifier","src":"576:6:15"}]},{"nativeSrc":"620:35:15","nodeType":"YulAssignment","src":"620:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"640:9:15","nodeType":"YulIdentifier","src":"640:9:15"},{"kind":"number","nativeSrc":"651:2:15","nodeType":"YulLiteral","src":"651:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"636:3:15","nodeType":"YulIdentifier","src":"636:3:15"},"nativeSrc":"636:18:15","nodeType":"YulFunctionCall","src":"636:18:15"}],"functionName":{"name":"mload","nativeSrc":"630:5:15","nodeType":"YulIdentifier","src":"630:5:15"},"nativeSrc":"630:25:15","nodeType":"YulFunctionCall","src":"630:25:15"},"variableNames":[{"name":"value3","nativeSrc":"620:6:15","nodeType":"YulIdentifier","src":"620:6:15"}]},{"nativeSrc":"664:39:15","nodeType":"YulVariableDeclaration","src":"664:39:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"687:9:15","nodeType":"YulIdentifier","src":"687:9:15"},{"kind":"number","nativeSrc":"698:3:15","nodeType":"YulLiteral","src":"698:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"683:3:15","nodeType":"YulIdentifier","src":"683:3:15"},"nativeSrc":"683:19:15","nodeType":"YulFunctionCall","src":"683:19:15"}],"functionName":{"name":"mload","nativeSrc":"677:5:15","nodeType":"YulIdentifier","src":"677:5:15"},"nativeSrc":"677:26:15","nodeType":"YulFunctionCall","src":"677:26:15"},"variables":[{"name":"value","nativeSrc":"668:5:15","nodeType":"YulTypedName","src":"668:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"755:5:15","nodeType":"YulIdentifier","src":"755:5:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"712:42:15","nodeType":"YulIdentifier","src":"712:42:15"},"nativeSrc":"712:49:15","nodeType":"YulFunctionCall","src":"712:49:15"},"nativeSrc":"712:49:15","nodeType":"YulExpressionStatement","src":"712:49:15"},{"nativeSrc":"770:15:15","nodeType":"YulAssignment","src":"770:15:15","value":{"name":"value","nativeSrc":"780:5:15","nodeType":"YulIdentifier","src":"780:5:15"},"variableNames":[{"name":"value4","nativeSrc":"770:6:15","nodeType":"YulIdentifier","src":"770:6:15"}]},{"nativeSrc":"794:41:15","nodeType":"YulVariableDeclaration","src":"794:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"819:9:15","nodeType":"YulIdentifier","src":"819:9:15"},{"kind":"number","nativeSrc":"830:3:15","nodeType":"YulLiteral","src":"830:3:15","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"815:3:15","nodeType":"YulIdentifier","src":"815:3:15"},"nativeSrc":"815:19:15","nodeType":"YulFunctionCall","src":"815:19:15"}],"functionName":{"name":"mload","nativeSrc":"809:5:15","nodeType":"YulIdentifier","src":"809:5:15"},"nativeSrc":"809:26:15","nodeType":"YulFunctionCall","src":"809:26:15"},"variables":[{"name":"value_1","nativeSrc":"798:7:15","nodeType":"YulTypedName","src":"798:7:15","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"887:7:15","nodeType":"YulIdentifier","src":"887:7:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"844:42:15","nodeType":"YulIdentifier","src":"844:42:15"},"nativeSrc":"844:51:15","nodeType":"YulFunctionCall","src":"844:51:15"},"nativeSrc":"844:51:15","nodeType":"YulExpressionStatement","src":"844:51:15"},{"nativeSrc":"904:17:15","nodeType":"YulAssignment","src":"904:17:15","value":{"name":"value_1","nativeSrc":"914:7:15","nodeType":"YulIdentifier","src":"914:7:15"},"variableNames":[{"name":"value5","nativeSrc":"904:6:15","nodeType":"YulIdentifier","src":"904:6:15"}]},{"nativeSrc":"930:41:15","nodeType":"YulVariableDeclaration","src":"930:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"955:9:15","nodeType":"YulIdentifier","src":"955:9:15"},{"kind":"number","nativeSrc":"966:3:15","nodeType":"YulLiteral","src":"966:3:15","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"951:3:15","nodeType":"YulIdentifier","src":"951:3:15"},"nativeSrc":"951:19:15","nodeType":"YulFunctionCall","src":"951:19:15"}],"functionName":{"name":"mload","nativeSrc":"945:5:15","nodeType":"YulIdentifier","src":"945:5:15"},"nativeSrc":"945:26:15","nodeType":"YulFunctionCall","src":"945:26:15"},"variables":[{"name":"value_2","nativeSrc":"934:7:15","nodeType":"YulTypedName","src":"934:7:15","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1023:7:15","nodeType":"YulIdentifier","src":"1023:7:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"980:42:15","nodeType":"YulIdentifier","src":"980:42:15"},"nativeSrc":"980:51:15","nodeType":"YulFunctionCall","src":"980:51:15"},"nativeSrc":"980:51:15","nodeType":"YulExpressionStatement","src":"980:51:15"},{"nativeSrc":"1040:17:15","nodeType":"YulAssignment","src":"1040:17:15","value":{"name":"value_2","nativeSrc":"1050:7:15","nodeType":"YulIdentifier","src":"1050:7:15"},"variableNames":[{"name":"value6","nativeSrc":"1040:6:15","nodeType":"YulIdentifier","src":"1040:6:15"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory","nativeSrc":"168:895:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"343:9:15","nodeType":"YulTypedName","src":"343:9:15","type":""},{"name":"dataEnd","nativeSrc":"354:7:15","nodeType":"YulTypedName","src":"354:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"366:6:15","nodeType":"YulTypedName","src":"366:6:15","type":""},{"name":"value1","nativeSrc":"374:6:15","nodeType":"YulTypedName","src":"374:6:15","type":""},{"name":"value2","nativeSrc":"382:6:15","nodeType":"YulTypedName","src":"382:6:15","type":""},{"name":"value3","nativeSrc":"390:6:15","nodeType":"YulTypedName","src":"390:6:15","type":""},{"name":"value4","nativeSrc":"398:6:15","nodeType":"YulTypedName","src":"398:6:15","type":""},{"name":"value5","nativeSrc":"406:6:15","nodeType":"YulTypedName","src":"406:6:15","type":""},{"name":"value6","nativeSrc":"414:6:15","nodeType":"YulTypedName","src":"414:6:15","type":""}],"src":"168:895:15"},{"body":{"nativeSrc":"1117:176:15","nodeType":"YulBlock","src":"1117:176:15","statements":[{"nativeSrc":"1127:17:15","nodeType":"YulAssignment","src":"1127:17:15","value":{"arguments":[{"name":"x","nativeSrc":"1139:1:15","nodeType":"YulIdentifier","src":"1139:1:15"},{"name":"y","nativeSrc":"1142:1:15","nodeType":"YulIdentifier","src":"1142:1:15"}],"functionName":{"name":"sub","nativeSrc":"1135:3:15","nodeType":"YulIdentifier","src":"1135:3:15"},"nativeSrc":"1135:9:15","nodeType":"YulFunctionCall","src":"1135:9:15"},"variableNames":[{"name":"diff","nativeSrc":"1127:4:15","nodeType":"YulIdentifier","src":"1127:4:15"}]},{"body":{"nativeSrc":"1176:111:15","nodeType":"YulBlock","src":"1176:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1197:1:15","nodeType":"YulLiteral","src":"1197:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1204:3:15","nodeType":"YulLiteral","src":"1204:3:15","type":"","value":"224"},{"kind":"number","nativeSrc":"1209:10:15","nodeType":"YulLiteral","src":"1209:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1200:3:15","nodeType":"YulIdentifier","src":"1200:3:15"},"nativeSrc":"1200:20:15","nodeType":"YulFunctionCall","src":"1200:20:15"}],"functionName":{"name":"mstore","nativeSrc":"1190:6:15","nodeType":"YulIdentifier","src":"1190:6:15"},"nativeSrc":"1190:31:15","nodeType":"YulFunctionCall","src":"1190:31:15"},"nativeSrc":"1190:31:15","nodeType":"YulExpressionStatement","src":"1190:31:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1241:1:15","nodeType":"YulLiteral","src":"1241:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"1244:4:15","nodeType":"YulLiteral","src":"1244:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1234:6:15","nodeType":"YulIdentifier","src":"1234:6:15"},"nativeSrc":"1234:15:15","nodeType":"YulFunctionCall","src":"1234:15:15"},"nativeSrc":"1234:15:15","nodeType":"YulExpressionStatement","src":"1234:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1269:1:15","nodeType":"YulLiteral","src":"1269:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1272:4:15","nodeType":"YulLiteral","src":"1272:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1262:6:15","nodeType":"YulIdentifier","src":"1262:6:15"},"nativeSrc":"1262:15:15","nodeType":"YulFunctionCall","src":"1262:15:15"},"nativeSrc":"1262:15:15","nodeType":"YulExpressionStatement","src":"1262:15:15"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1159:4:15","nodeType":"YulIdentifier","src":"1159:4:15"},{"name":"x","nativeSrc":"1165:1:15","nodeType":"YulIdentifier","src":"1165:1:15"}],"functionName":{"name":"gt","nativeSrc":"1156:2:15","nodeType":"YulIdentifier","src":"1156:2:15"},"nativeSrc":"1156:11:15","nodeType":"YulFunctionCall","src":"1156:11:15"},"nativeSrc":"1153:134:15","nodeType":"YulIf","src":"1153:134:15"}]},"name":"checked_sub_t_uint256","nativeSrc":"1068:225:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1099:1:15","nodeType":"YulTypedName","src":"1099:1:15","type":""},{"name":"y","nativeSrc":"1102:1:15","nodeType":"YulTypedName","src":"1102:1:15","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1108:4:15","nodeType":"YulTypedName","src":"1108:4:15","type":""}],"src":"1068:225:15"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        validator_revert_contract_IERC1155Burnable(value)\n        value4 := value\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value5 := value_1\n        let value_2 := mload(add(headStart, 192))\n        validator_revert_contract_IERC1155Burnable(value_2)\n        value6 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001a4438038062001a44833981016040819052620000359162000189565b6001600160a01b03811660805262000062630271189760e51b60016200005a620000dd565b919062000113565b60e087905260008690036200008a5760405163b870efbd60e01b815260040160405180910390fd5b6101008690526000859003620000b357604051637e5e559b60e11b815260040160405180910390fd5b5061012093909352610140919091526001600160a01b0390811660a0521660c05250620002269050565b6000806200010d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000204565b92915050565b600160e01b6001600160e01b031983160162000142576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146200018657600080fd5b50565b600080600080600080600060e0888a031215620001a557600080fd5b875196506020880151955060408801519450606088015193506080880151620001ce8162000170565b60a0890151909350620001e18162000170565b60c0890151909250620001f48162000170565b8091505092959891949750929550565b818103818111156200010d57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051610120516101405161177d620002c760003960008181610303015281816109c60152610f4b0152600081816101e0015281816105530152610d4c01526000818161041a01526104750152600081816102b101526104990152600081816103f30152610c5801526000818161022f015281816104e7015261086c015260008181610278015261033d015261177d6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c806351e75e8b116100e3578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610415578063f23a6e611461043c578063f95d10161461044f57600080fd5b8063bc197c81146103a2578063c131754e146103e6578063cd18a34f146103ee57600080fd5b8063aa918fd5116100bd578063aa918fd5146102a4578063ab504e731461037a578063bab2f5521461039a57600080fd5b806351e75e8b146102fe57806355f5b0a814610325578063572b6c051461032d57600080fd5b806328a979cf11610145578063424ab4f71161011f578063424ab4f7146102a4578063491bde66146102ac5780634dac1c2b146102d357600080fd5b806328a979cf1461022a5780632b4c9f16146102765780633838a2011461029c57600080fd5b80630455645a116101765780630455645a1461020257806312828b7f1461020a5780631de0e40b146101c557600080fd5b806301ffc9a71461019d5780630277640e146101c5578063043063bc146101db575b600080fd5b6101b06101ab3660046111f3565b610457565b60405190151581526020015b60405180910390f35b6101cd600181565b6040519081526020016101bc565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600581565b6101cd61021836600461125e565b60026020526000908152604090205481565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b6101cd601981565b6101cd600381565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd6102e1366004611279565b600160209081526000928352604080842090915290825290205481565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600281565b6101b061033b36600461125e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cd6103883660046112a5565b60006020819052908152604090205481565b6101cd610471565b6103b56103b036600461134c565b6104cd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101bc565b6101cd601081565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6103b561044a366004611407565b610c3e565b6101cd600981565b600061046b82610465611060565b9061108e565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104be7f0000000000000000000000000000000000000000000000000000000000000000426114ae565b6104c891906114c1565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610545576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600061054f610471565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105ae576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105f29030908c908c908c908c90600401611547565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b505050506000805b888110156108fe5787878281811061064257610642611596565b905060200201356000036106dc57338a8a8381811061066357610663611596565b9050602002013589898481811061067c5761067c611596565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161053c565b8989828181106106ee576106ee611596565b9050602002013560010361073257600188888381811061071057610710611596565b9050602002013561072191906115c5565b61072b90836115dc565b91506108f6565b89898281811061074457610744611596565b9050602002013560020361076657600388888381811061071057610710611596565b89898281811061077857610778611596565b9050602002013560030361079a57600388888381811061071057610710611596565b8989828181106107ac576107ac611596565b905060200201356004036107ce57600588888381811061071057610710611596565b8989828181106107e0576107e0611596565b9050602002013560050361080257600988888381811061071057610710611596565b89898281811061081457610814611596565b9050602002013560060361083657601988888381811061071057610710611596565b89898281811061084857610848611596565b9050602002013560070361086a57601088888381811061071057610710611596565b7f00000000000000000000000000000000000000000000000000000000000000008a8a8381811061089d5761089d611596565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161053c565b600101610628565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610ad05760008061093c888a018a61161e565b91509150608083901c600003610ab0576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506109eb837f000000000000000000000000000000000000000000000000000000000000000083611168565b610a40576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161053c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610abd82876115c5565b610ac791906114c1565b94505050610af7565b608081901c8015610af557612710610ae882866115c5565b610af291906114c1565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b1d57610b1a81856115c5565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b589086906115dc565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610ba89084906115dc565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c029796959493929190611700565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610cb1576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161053c565b60018514610cf4576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161053c565b83600114610d3e576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161053c565b6000610d48610471565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610da7576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e2f576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161053c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b5050506002821790508415610fcf57608082901c600003610fcf57600080610ecc8789018961161e565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610f70837f000000000000000000000000000000000000000000000000000000000000000083611168565b610fc5576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161053c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061046b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6114ae565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110de5750600061046b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161112f5750600161046b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082611175858461117e565b14949350505050565b600081815b84518110156111b9576111af828683815181106111a2576111a2611596565b60200260200101516111c1565b9150600101611183565b509392505050565b60008183106111dd5760008281526020849052604090206111ec565b60008381526020839052604090205b9392505050565b60006020828403121561120557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111ec57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461125957600080fd5b919050565b60006020828403121561127057600080fd5b6111ec82611235565b6000806040838503121561128c57600080fd5b8235915061129c60208401611235565b90509250929050565b6000602082840312156112b757600080fd5b5035919050565b60008083601f8401126112d057600080fd5b50813567ffffffffffffffff8111156112e857600080fd5b6020830191508360208260051b850101111561130357600080fd5b9250929050565b60008083601f84011261131c57600080fd5b50813567ffffffffffffffff81111561133457600080fd5b60208301915083602082850101111561130357600080fd5b60008060008060008060008060a0898b03121561136857600080fd5b61137189611235565b975061137f60208a01611235565b9650604089013567ffffffffffffffff8082111561139c57600080fd5b6113a88c838d016112be565b909850965060608b01359150808211156113c157600080fd5b6113cd8c838d016112be565b909650945060808b01359150808211156113e657600080fd5b506113f38b828c0161130a565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561142057600080fd5b61142987611235565b955061143760208801611235565b94506040870135935060608701359250608087013567ffffffffffffffff81111561146157600080fd5b61146d89828a0161130a565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046b5761046b61147f565b6000826114f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561152e57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006115776060830186886114fc565b828103604084015261158a8185876114fc565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761046b5761046b61147f565b8082018082111561046b5761046b61147f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561163157600080fd5b823567ffffffffffffffff8082111561164957600080fd5b818501915085601f83011261165d57600080fd5b8135602082821115611671576116716115ef565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156116b4576116b46115ef565b6040529283528183019350848101820192898411156116d257600080fd5b948201945b838610156116f0578535855294820194938201936116d7565b9997909101359750505050505050565b60a08152600061171460a08301898b6114fc565b828103602084015261172781888a6114fc565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220de8fc296f7cd15405f7f60af5181fba063d6ff5cf98ccece09612aeec702624d64736f6c63430008160033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1A44 CODESIZE SUB DUP1 PUSH3 0x1A44 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x189 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE PUSH3 0x62 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x5A PUSH3 0xDD JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x113 JUMP JUMPDEST PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH1 0x0 DUP7 SWAP1 SUB PUSH3 0x8A JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0xB3 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x120 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x140 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE AND PUSH1 0xC0 MSTORE POP PUSH3 0x226 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x10D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x204 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x142 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x1A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0x1CE DUP2 PUSH3 0x170 JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x1E1 DUP2 PUSH3 0x170 JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x1F4 DUP2 PUSH3 0x170 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x10D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x177D PUSH3 0x2C7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x303 ADD MSTORE DUP2 DUP2 PUSH2 0x9C6 ADD MSTORE PUSH2 0xF4B ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1E0 ADD MSTORE DUP2 DUP2 PUSH2 0x553 ADD MSTORE PUSH2 0xD4C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x41A ADD MSTORE PUSH2 0x475 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2B1 ADD MSTORE PUSH2 0x499 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3F3 ADD MSTORE PUSH2 0xC58 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x22F ADD MSTORE DUP2 DUP2 PUSH2 0x4E7 ADD MSTORE PUSH2 0x86C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x278 ADD MSTORE PUSH2 0x33D ADD MSTORE PUSH2 0x177D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11F3 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH32 0x0 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x471 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x1407 JUMP JUMPDEST PUSH2 0xC3E JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B DUP3 PUSH2 0x465 PUSH2 0x1060 JUMP JUMPDEST SWAP1 PUSH2 0x108E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x4BE PUSH32 0x0 TIMESTAMP PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x5F2 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x8FE JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x642 JUMPI PUSH2 0x642 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x6DC JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x67C JUMPI PUSH2 0x67C PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x732 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x72B SWAP1 DUP4 PUSH2 0x15DC JUMP JUMPDEST SWAP2 POP PUSH2 0x8F6 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x744 JUMPI PUSH2 0x744 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x766 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x778 JUMPI PUSH2 0x778 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x79A JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x7CE JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x802 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x836 JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x848 JUMPI PUSH2 0x848 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x86A JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x89D JUMPI PUSH2 0x89D PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x628 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 PUSH2 0x93C DUP9 DUP11 ADD DUP11 PUSH2 0x161E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x9EB DUP4 PUSH32 0x0 DUP4 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0xA40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xABD DUP3 DUP8 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0xAC7 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xAF5 JUMPI PUSH2 0x2710 PUSH2 0xAE8 DUP3 DUP7 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0xAF2 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH2 0xB1A DUP2 DUP6 PUSH2 0x15C5 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB58 SWAP1 DUP7 SWAP1 PUSH2 0x15DC JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBA8 SWAP1 DUP5 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC02 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1700 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD3E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD48 PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xFCF JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 PUSH2 0xECC DUP8 DUP10 ADD DUP10 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xF70 DUP4 PUSH32 0x0 DUP4 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0xFC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x14AE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10DE JUMPI POP PUSH1 0x0 PUSH2 0x46B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x112F JUMPI POP PUSH1 0x1 PUSH2 0x46B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1175 DUP6 DUP5 PUSH2 0x117E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11AF DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11A2 JUMPI PUSH2 0x11A2 PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1183 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x11EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11EC DUP3 PUSH2 0x1235 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x129C PUSH1 0x20 DUP5 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1371 DUP10 PUSH2 0x1235 JUMP JUMPDEST SWAP8 POP PUSH2 0x137F PUSH1 0x20 DUP11 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x139C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13A8 DUP13 DUP4 DUP14 ADD PUSH2 0x12BE JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CD DUP13 DUP4 DUP14 ADD PUSH2 0x12BE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F3 DUP12 DUP3 DUP13 ADD PUSH2 0x130A JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1429 DUP8 PUSH2 0x1235 JUMP JUMPDEST SWAP6 POP PUSH2 0x1437 PUSH1 0x20 DUP9 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146D DUP10 DUP3 DUP11 ADD PUSH2 0x130A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14F7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1577 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x14FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x158A DUP2 DUP6 DUP8 PUSH2 0x14FC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x15EF JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x16B4 JUMPI PUSH2 0x16B4 PUSH2 0x15EF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x16D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x16F0 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x16D7 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1714 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x14FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1727 DUP2 DUP9 DUP11 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE DUP16 0xC2 SWAP7 0xF7 0xCD ISZERO BLOCKHASH PUSH0 PUSH32 0x60AF5181FBA063D6FF5CF98CCECE09612AEEC702624D64736F6C634300081600 CALLER ","sourceMap":"889:11666:13:-:0;;;4906:672;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:5;;;;780:103:9;-1:-1:-1;;;878:4:9;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;5212:26:13::1;::::0;;;5270:1:::1;5253:18:::0;;;5249:75:::1;;5294:19;;-1:-1:-1::0;;;5294:19:13::1;;;;;;;;;;;5249:75;5333:30;::::0;;;5390:1:::1;5378:13:::0;;;5374:65:::1;;5414:14;;-1:-1:-1::0;;;5414:14:13::1;;;;;;;;;;;5374:65;-1:-1:-1::0;5448:20:13::1;::::0;;;;5478:24:::1;::::0;;;;-1:-1:-1;;;;;5512:25:13;;::::1;;::::0;5547:24:::1;;::::0;-1:-1:-1;889:11666:13;;-1:-1:-1;889:11666:13;1705:174:3;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:3:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:3;;;877:68;;925:20;;-1:-1:-1;;;925:20:3;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:3;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:3;;;;;;;;;;773:235::o;14:149:15:-;-1:-1:-1;;;;;107:31:15;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:895::-;366:6;374;382;390;398;406;414;467:3;455:9;446:7;442:23;438:33;435:53;;;484:1;481;474:12;435:53;513:9;507:16;497:26;;563:2;552:9;548:18;542:25;532:35;;607:2;596:9;592:18;586:25;576:35;;651:2;640:9;636:18;630:25;620:35;;698:3;687:9;683:19;677:26;712:49;755:5;712:49;:::i;:::-;830:3;815:19;;809:26;780:5;;-1:-1:-1;844:51:15;809:26;844:51;:::i;:::-;966:3;951:19;;945:26;914:7;;-1:-1:-1;980:51:15;945:26;980:51;:::i;:::-;1050:7;1040:17;;;168:895;;;;;;;;;;:::o;1068:225::-;1135:9;;;1156:11;;;1153:134;;;1209:10;1204:3;1200:20;1197:1;1190:31;1244:4;1241:1;1234:15;1272:4;1269:1;1262:15;1068:225;889:11666:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_1007":{"entryPoint":null,"id":1007,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_1010":{"entryPoint":null,"id":1010,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_1013":{"entryPoint":null,"id":1013,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_1016":{"entryPoint":null,"id":1016,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_1019":{"entryPoint":null,"id":1019,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_1022":{"entryPoint":null,"id":1022,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_1025":{"entryPoint":null,"id":1025,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_1043":{"entryPoint":null,"id":1043,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1040":{"entryPoint":null,"id":1040,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1046":{"entryPoint":null,"id":1046,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_1049":{"entryPoint":null,"id":1049,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_1037":{"entryPoint":null,"id":1037,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_1003":{"entryPoint":null,"id":1003,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_1033":{"entryPoint":null,"id":1033,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_1029":{"entryPoint":null,"id":1029,"parameterSlots":0,"returnSlots":0},"@_efficientHash_971":{"entryPoint":null,"id":971,"parameterSlots":2,"returnSlots":1},"@_hashPair_960":{"entryPoint":4545,"id":960,"parameterSlots":2,"returnSlots":1},"@currentCycle_1244":{"entryPoint":1137,"id":1244,"parameterSlots":0,"returnSlots":1},"@forwarderRegistry_179":{"entryPoint":null,"id":179,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_195":{"entryPoint":null,"id":195,"parameterSlots":1,"returnSlots":1},"@layout_146":{"entryPoint":4192,"id":146,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_1823":{"entryPoint":1229,"id":1823,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_1430":{"entryPoint":3134,"id":1430,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_1066":{"entryPoint":null,"id":1066,"parameterSlots":0,"returnSlots":0},"@processProof_555":{"entryPoint":4478,"id":555,"parameterSlots":2,"returnSlots":1},"@supportsInterface_134":{"entryPoint":4238,"id":134,"parameterSlots":2,"returnSlots":1},"@supportsInterface_28":{"entryPoint":1111,"id":28,"parameterSlots":1,"returnSlots":1},"@totalAshPerCycle_1054":{"entryPoint":null,"id":1054,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_1061":{"entryPoint":null,"id":1061,"parameterSlots":0,"returnSlots":0},"@verify_494":{"entryPoint":4456,"id":494,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":4661,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":4798,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":4874,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4702,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":4940,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":5127,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":5662,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":4595,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":4773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":4729,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":5372,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":5447,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":5888,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":5596,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5313,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5573,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":5294,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":5247,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":5526,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":5615,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:10915:15","nodeType":"YulBlock","src":"0:10915:15","statements":[{"nativeSrc":"6:3:15","nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nativeSrc":"83:263:15","nodeType":"YulBlock","src":"83:263:15","statements":[{"body":{"nativeSrc":"129:16:15","nodeType":"YulBlock","src":"129:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:15","nodeType":"YulLiteral","src":"138:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:15","nodeType":"YulLiteral","src":"141:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:15","nodeType":"YulIdentifier","src":"131:6:15"},"nativeSrc":"131:12:15","nodeType":"YulFunctionCall","src":"131:12:15"},"nativeSrc":"131:12:15","nodeType":"YulExpressionStatement","src":"131:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:15","nodeType":"YulIdentifier","src":"104:7:15"},{"name":"headStart","nativeSrc":"113:9:15","nodeType":"YulIdentifier","src":"113:9:15"}],"functionName":{"name":"sub","nativeSrc":"100:3:15","nodeType":"YulIdentifier","src":"100:3:15"},"nativeSrc":"100:23:15","nodeType":"YulFunctionCall","src":"100:23:15"},{"kind":"number","nativeSrc":"125:2:15","nodeType":"YulLiteral","src":"125:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:15","nodeType":"YulIdentifier","src":"96:3:15"},"nativeSrc":"96:32:15","nodeType":"YulFunctionCall","src":"96:32:15"},"nativeSrc":"93:52:15","nodeType":"YulIf","src":"93:52:15"},{"nativeSrc":"154:36:15","nodeType":"YulVariableDeclaration","src":"154:36:15","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:15","nodeType":"YulIdentifier","src":"180:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:15","nodeType":"YulIdentifier","src":"167:12:15"},"nativeSrc":"167:23:15","nodeType":"YulFunctionCall","src":"167:23:15"},"variables":[{"name":"value","nativeSrc":"158:5:15","nodeType":"YulTypedName","src":"158:5:15","type":""}]},{"body":{"nativeSrc":"300:16:15","nodeType":"YulBlock","src":"300:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:15","nodeType":"YulLiteral","src":"309:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:15","nodeType":"YulLiteral","src":"312:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:15","nodeType":"YulIdentifier","src":"302:6:15"},"nativeSrc":"302:12:15","nodeType":"YulFunctionCall","src":"302:12:15"},"nativeSrc":"302:12:15","nodeType":"YulExpressionStatement","src":"302:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:15","nodeType":"YulIdentifier","src":"212:5:15"},{"arguments":[{"name":"value","nativeSrc":"223:5:15","nodeType":"YulIdentifier","src":"223:5:15"},{"kind":"number","nativeSrc":"230:66:15","nodeType":"YulLiteral","src":"230:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:15","nodeType":"YulIdentifier","src":"219:3:15"},"nativeSrc":"219:78:15","nodeType":"YulFunctionCall","src":"219:78:15"}],"functionName":{"name":"eq","nativeSrc":"209:2:15","nodeType":"YulIdentifier","src":"209:2:15"},"nativeSrc":"209:89:15","nodeType":"YulFunctionCall","src":"209:89:15"}],"functionName":{"name":"iszero","nativeSrc":"202:6:15","nodeType":"YulIdentifier","src":"202:6:15"},"nativeSrc":"202:97:15","nodeType":"YulFunctionCall","src":"202:97:15"},"nativeSrc":"199:117:15","nodeType":"YulIf","src":"199:117:15"},{"nativeSrc":"325:15:15","nodeType":"YulAssignment","src":"325:15:15","value":{"name":"value","nativeSrc":"335:5:15","nodeType":"YulIdentifier","src":"335:5:15"},"variableNames":[{"name":"value0","nativeSrc":"325:6:15","nodeType":"YulIdentifier","src":"325:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:15","nodeType":"YulTypedName","src":"49:9:15","type":""},{"name":"dataEnd","nativeSrc":"60:7:15","nodeType":"YulTypedName","src":"60:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:15","nodeType":"YulTypedName","src":"72:6:15","type":""}],"src":"14:332:15"},{"body":{"nativeSrc":"446:92:15","nodeType":"YulBlock","src":"446:92:15","statements":[{"nativeSrc":"456:26:15","nodeType":"YulAssignment","src":"456:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:15","nodeType":"YulIdentifier","src":"468:9:15"},{"kind":"number","nativeSrc":"479:2:15","nodeType":"YulLiteral","src":"479:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:15","nodeType":"YulIdentifier","src":"464:3:15"},"nativeSrc":"464:18:15","nodeType":"YulFunctionCall","src":"464:18:15"},"variableNames":[{"name":"tail","nativeSrc":"456:4:15","nodeType":"YulIdentifier","src":"456:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:15","nodeType":"YulIdentifier","src":"498:9:15"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:15","nodeType":"YulIdentifier","src":"523:6:15"}],"functionName":{"name":"iszero","nativeSrc":"516:6:15","nodeType":"YulIdentifier","src":"516:6:15"},"nativeSrc":"516:14:15","nodeType":"YulFunctionCall","src":"516:14:15"}],"functionName":{"name":"iszero","nativeSrc":"509:6:15","nodeType":"YulIdentifier","src":"509:6:15"},"nativeSrc":"509:22:15","nodeType":"YulFunctionCall","src":"509:22:15"}],"functionName":{"name":"mstore","nativeSrc":"491:6:15","nodeType":"YulIdentifier","src":"491:6:15"},"nativeSrc":"491:41:15","nodeType":"YulFunctionCall","src":"491:41:15"},"nativeSrc":"491:41:15","nodeType":"YulExpressionStatement","src":"491:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:15","nodeType":"YulTypedName","src":"415:9:15","type":""},{"name":"value0","nativeSrc":"426:6:15","nodeType":"YulTypedName","src":"426:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:15","nodeType":"YulTypedName","src":"437:4:15","type":""}],"src":"351:187:15"},{"body":{"nativeSrc":"644:76:15","nodeType":"YulBlock","src":"644:76:15","statements":[{"nativeSrc":"654:26:15","nodeType":"YulAssignment","src":"654:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:15","nodeType":"YulIdentifier","src":"666:9:15"},{"kind":"number","nativeSrc":"677:2:15","nodeType":"YulLiteral","src":"677:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:15","nodeType":"YulIdentifier","src":"662:3:15"},"nativeSrc":"662:18:15","nodeType":"YulFunctionCall","src":"662:18:15"},"variableNames":[{"name":"tail","nativeSrc":"654:4:15","nodeType":"YulIdentifier","src":"654:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:15","nodeType":"YulIdentifier","src":"696:9:15"},{"name":"value0","nativeSrc":"707:6:15","nodeType":"YulIdentifier","src":"707:6:15"}],"functionName":{"name":"mstore","nativeSrc":"689:6:15","nodeType":"YulIdentifier","src":"689:6:15"},"nativeSrc":"689:25:15","nodeType":"YulFunctionCall","src":"689:25:15"},"nativeSrc":"689:25:15","nodeType":"YulExpressionStatement","src":"689:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:15","nodeType":"YulTypedName","src":"613:9:15","type":""},{"name":"value0","nativeSrc":"624:6:15","nodeType":"YulTypedName","src":"624:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:15","nodeType":"YulTypedName","src":"635:4:15","type":""}],"src":"543:177:15"},{"body":{"nativeSrc":"774:147:15","nodeType":"YulBlock","src":"774:147:15","statements":[{"nativeSrc":"784:29:15","nodeType":"YulAssignment","src":"784:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:15","nodeType":"YulIdentifier","src":"806:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:15","nodeType":"YulIdentifier","src":"793:12:15"},"nativeSrc":"793:20:15","nodeType":"YulFunctionCall","src":"793:20:15"},"variableNames":[{"name":"value","nativeSrc":"784:5:15","nodeType":"YulIdentifier","src":"784:5:15"}]},{"body":{"nativeSrc":"899:16:15","nodeType":"YulBlock","src":"899:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:15","nodeType":"YulLiteral","src":"908:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:15","nodeType":"YulLiteral","src":"911:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:15","nodeType":"YulIdentifier","src":"901:6:15"},"nativeSrc":"901:12:15","nodeType":"YulFunctionCall","src":"901:12:15"},"nativeSrc":"901:12:15","nodeType":"YulExpressionStatement","src":"901:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:15","nodeType":"YulIdentifier","src":"835:5:15"},{"arguments":[{"name":"value","nativeSrc":"846:5:15","nodeType":"YulIdentifier","src":"846:5:15"},{"kind":"number","nativeSrc":"853:42:15","nodeType":"YulLiteral","src":"853:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:15","nodeType":"YulIdentifier","src":"842:3:15"},"nativeSrc":"842:54:15","nodeType":"YulFunctionCall","src":"842:54:15"}],"functionName":{"name":"eq","nativeSrc":"832:2:15","nodeType":"YulIdentifier","src":"832:2:15"},"nativeSrc":"832:65:15","nodeType":"YulFunctionCall","src":"832:65:15"}],"functionName":{"name":"iszero","nativeSrc":"825:6:15","nodeType":"YulIdentifier","src":"825:6:15"},"nativeSrc":"825:73:15","nodeType":"YulFunctionCall","src":"825:73:15"},"nativeSrc":"822:93:15","nodeType":"YulIf","src":"822:93:15"}]},"name":"abi_decode_address","nativeSrc":"725:196:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:15","nodeType":"YulTypedName","src":"753:6:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:15","nodeType":"YulTypedName","src":"764:5:15","type":""}],"src":"725:196:15"},{"body":{"nativeSrc":"996:116:15","nodeType":"YulBlock","src":"996:116:15","statements":[{"body":{"nativeSrc":"1042:16:15","nodeType":"YulBlock","src":"1042:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:15","nodeType":"YulLiteral","src":"1051:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:15","nodeType":"YulLiteral","src":"1054:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:15","nodeType":"YulIdentifier","src":"1044:6:15"},"nativeSrc":"1044:12:15","nodeType":"YulFunctionCall","src":"1044:12:15"},"nativeSrc":"1044:12:15","nodeType":"YulExpressionStatement","src":"1044:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:15","nodeType":"YulIdentifier","src":"1017:7:15"},{"name":"headStart","nativeSrc":"1026:9:15","nodeType":"YulIdentifier","src":"1026:9:15"}],"functionName":{"name":"sub","nativeSrc":"1013:3:15","nodeType":"YulIdentifier","src":"1013:3:15"},"nativeSrc":"1013:23:15","nodeType":"YulFunctionCall","src":"1013:23:15"},{"kind":"number","nativeSrc":"1038:2:15","nodeType":"YulLiteral","src":"1038:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:15","nodeType":"YulIdentifier","src":"1009:3:15"},"nativeSrc":"1009:32:15","nodeType":"YulFunctionCall","src":"1009:32:15"},"nativeSrc":"1006:52:15","nodeType":"YulIf","src":"1006:52:15"},{"nativeSrc":"1067:39:15","nodeType":"YulAssignment","src":"1067:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:15","nodeType":"YulIdentifier","src":"1096:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:15","nodeType":"YulIdentifier","src":"1077:18:15"},"nativeSrc":"1077:29:15","nodeType":"YulFunctionCall","src":"1077:29:15"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:15","nodeType":"YulIdentifier","src":"1067:6:15"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:15","nodeType":"YulTypedName","src":"962:9:15","type":""},{"name":"dataEnd","nativeSrc":"973:7:15","nodeType":"YulTypedName","src":"973:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:15","nodeType":"YulTypedName","src":"985:6:15","type":""}],"src":"926:186:15"},{"body":{"nativeSrc":"1242:125:15","nodeType":"YulBlock","src":"1242:125:15","statements":[{"nativeSrc":"1252:26:15","nodeType":"YulAssignment","src":"1252:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:15","nodeType":"YulIdentifier","src":"1264:9:15"},{"kind":"number","nativeSrc":"1275:2:15","nodeType":"YulLiteral","src":"1275:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:15","nodeType":"YulIdentifier","src":"1260:3:15"},"nativeSrc":"1260:18:15","nodeType":"YulFunctionCall","src":"1260:18:15"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:15","nodeType":"YulIdentifier","src":"1252:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:15","nodeType":"YulIdentifier","src":"1294:9:15"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:15","nodeType":"YulIdentifier","src":"1309:6:15"},{"kind":"number","nativeSrc":"1317:42:15","nodeType":"YulLiteral","src":"1317:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:15","nodeType":"YulIdentifier","src":"1305:3:15"},"nativeSrc":"1305:55:15","nodeType":"YulFunctionCall","src":"1305:55:15"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:15","nodeType":"YulIdentifier","src":"1287:6:15"},"nativeSrc":"1287:74:15","nodeType":"YulFunctionCall","src":"1287:74:15"},"nativeSrc":"1287:74:15","nodeType":"YulExpressionStatement","src":"1287:74:15"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed","nativeSrc":"1117:250:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:15","nodeType":"YulTypedName","src":"1211:9:15","type":""},{"name":"value0","nativeSrc":"1222:6:15","nodeType":"YulTypedName","src":"1222:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:15","nodeType":"YulTypedName","src":"1233:4:15","type":""}],"src":"1117:250:15"},{"body":{"nativeSrc":"1499:125:15","nodeType":"YulBlock","src":"1499:125:15","statements":[{"nativeSrc":"1509:26:15","nodeType":"YulAssignment","src":"1509:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1521:9:15","nodeType":"YulIdentifier","src":"1521:9:15"},{"kind":"number","nativeSrc":"1532:2:15","nodeType":"YulLiteral","src":"1532:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1517:3:15","nodeType":"YulIdentifier","src":"1517:3:15"},"nativeSrc":"1517:18:15","nodeType":"YulFunctionCall","src":"1517:18:15"},"variableNames":[{"name":"tail","nativeSrc":"1509:4:15","nodeType":"YulIdentifier","src":"1509:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1551:9:15","nodeType":"YulIdentifier","src":"1551:9:15"},{"arguments":[{"name":"value0","nativeSrc":"1566:6:15","nodeType":"YulIdentifier","src":"1566:6:15"},{"kind":"number","nativeSrc":"1574:42:15","nodeType":"YulLiteral","src":"1574:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:15","nodeType":"YulIdentifier","src":"1562:3:15"},"nativeSrc":"1562:55:15","nodeType":"YulFunctionCall","src":"1562:55:15"}],"functionName":{"name":"mstore","nativeSrc":"1544:6:15","nodeType":"YulIdentifier","src":"1544:6:15"},"nativeSrc":"1544:74:15","nodeType":"YulFunctionCall","src":"1544:74:15"},"nativeSrc":"1544:74:15","nodeType":"YulExpressionStatement","src":"1544:74:15"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed","nativeSrc":"1372:252:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1468:9:15","nodeType":"YulTypedName","src":"1468:9:15","type":""},{"name":"value0","nativeSrc":"1479:6:15","nodeType":"YulTypedName","src":"1479:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1490:4:15","nodeType":"YulTypedName","src":"1490:4:15","type":""}],"src":"1372:252:15"},{"body":{"nativeSrc":"1716:167:15","nodeType":"YulBlock","src":"1716:167:15","statements":[{"body":{"nativeSrc":"1762:16:15","nodeType":"YulBlock","src":"1762:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1771:1:15","nodeType":"YulLiteral","src":"1771:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1774:1:15","nodeType":"YulLiteral","src":"1774:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1764:6:15","nodeType":"YulIdentifier","src":"1764:6:15"},"nativeSrc":"1764:12:15","nodeType":"YulFunctionCall","src":"1764:12:15"},"nativeSrc":"1764:12:15","nodeType":"YulExpressionStatement","src":"1764:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1737:7:15","nodeType":"YulIdentifier","src":"1737:7:15"},{"name":"headStart","nativeSrc":"1746:9:15","nodeType":"YulIdentifier","src":"1746:9:15"}],"functionName":{"name":"sub","nativeSrc":"1733:3:15","nodeType":"YulIdentifier","src":"1733:3:15"},"nativeSrc":"1733:23:15","nodeType":"YulFunctionCall","src":"1733:23:15"},{"kind":"number","nativeSrc":"1758:2:15","nodeType":"YulLiteral","src":"1758:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1729:3:15","nodeType":"YulIdentifier","src":"1729:3:15"},"nativeSrc":"1729:32:15","nodeType":"YulFunctionCall","src":"1729:32:15"},"nativeSrc":"1726:52:15","nodeType":"YulIf","src":"1726:52:15"},{"nativeSrc":"1787:33:15","nodeType":"YulAssignment","src":"1787:33:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1810:9:15","nodeType":"YulIdentifier","src":"1810:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"1797:12:15","nodeType":"YulIdentifier","src":"1797:12:15"},"nativeSrc":"1797:23:15","nodeType":"YulFunctionCall","src":"1797:23:15"},"variableNames":[{"name":"value0","nativeSrc":"1787:6:15","nodeType":"YulIdentifier","src":"1787:6:15"}]},{"nativeSrc":"1829:48:15","nodeType":"YulAssignment","src":"1829:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1862:9:15","nodeType":"YulIdentifier","src":"1862:9:15"},{"kind":"number","nativeSrc":"1873:2:15","nodeType":"YulLiteral","src":"1873:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1858:3:15","nodeType":"YulIdentifier","src":"1858:3:15"},"nativeSrc":"1858:18:15","nodeType":"YulFunctionCall","src":"1858:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1839:18:15","nodeType":"YulIdentifier","src":"1839:18:15"},"nativeSrc":"1839:38:15","nodeType":"YulFunctionCall","src":"1839:38:15"},"variableNames":[{"name":"value1","nativeSrc":"1829:6:15","nodeType":"YulIdentifier","src":"1829:6:15"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"1629:254:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1674:9:15","nodeType":"YulTypedName","src":"1674:9:15","type":""},{"name":"dataEnd","nativeSrc":"1685:7:15","nodeType":"YulTypedName","src":"1685:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1697:6:15","nodeType":"YulTypedName","src":"1697:6:15","type":""},{"name":"value1","nativeSrc":"1705:6:15","nodeType":"YulTypedName","src":"1705:6:15","type":""}],"src":"1629:254:15"},{"body":{"nativeSrc":"1989:76:15","nodeType":"YulBlock","src":"1989:76:15","statements":[{"nativeSrc":"1999:26:15","nodeType":"YulAssignment","src":"1999:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2011:9:15","nodeType":"YulIdentifier","src":"2011:9:15"},{"kind":"number","nativeSrc":"2022:2:15","nodeType":"YulLiteral","src":"2022:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2007:3:15","nodeType":"YulIdentifier","src":"2007:3:15"},"nativeSrc":"2007:18:15","nodeType":"YulFunctionCall","src":"2007:18:15"},"variableNames":[{"name":"tail","nativeSrc":"1999:4:15","nodeType":"YulIdentifier","src":"1999:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2041:9:15","nodeType":"YulIdentifier","src":"2041:9:15"},{"name":"value0","nativeSrc":"2052:6:15","nodeType":"YulIdentifier","src":"2052:6:15"}],"functionName":{"name":"mstore","nativeSrc":"2034:6:15","nodeType":"YulIdentifier","src":"2034:6:15"},"nativeSrc":"2034:25:15","nodeType":"YulFunctionCall","src":"2034:25:15"},"nativeSrc":"2034:25:15","nodeType":"YulExpressionStatement","src":"2034:25:15"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"1888:177:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1958:9:15","nodeType":"YulTypedName","src":"1958:9:15","type":""},{"name":"value0","nativeSrc":"1969:6:15","nodeType":"YulTypedName","src":"1969:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1980:4:15","nodeType":"YulTypedName","src":"1980:4:15","type":""}],"src":"1888:177:15"},{"body":{"nativeSrc":"2140:110:15","nodeType":"YulBlock","src":"2140:110:15","statements":[{"body":{"nativeSrc":"2186:16:15","nodeType":"YulBlock","src":"2186:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2195:1:15","nodeType":"YulLiteral","src":"2195:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2198:1:15","nodeType":"YulLiteral","src":"2198:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2188:6:15","nodeType":"YulIdentifier","src":"2188:6:15"},"nativeSrc":"2188:12:15","nodeType":"YulFunctionCall","src":"2188:12:15"},"nativeSrc":"2188:12:15","nodeType":"YulExpressionStatement","src":"2188:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2161:7:15","nodeType":"YulIdentifier","src":"2161:7:15"},{"name":"headStart","nativeSrc":"2170:9:15","nodeType":"YulIdentifier","src":"2170:9:15"}],"functionName":{"name":"sub","nativeSrc":"2157:3:15","nodeType":"YulIdentifier","src":"2157:3:15"},"nativeSrc":"2157:23:15","nodeType":"YulFunctionCall","src":"2157:23:15"},{"kind":"number","nativeSrc":"2182:2:15","nodeType":"YulLiteral","src":"2182:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2153:3:15","nodeType":"YulIdentifier","src":"2153:3:15"},"nativeSrc":"2153:32:15","nodeType":"YulFunctionCall","src":"2153:32:15"},"nativeSrc":"2150:52:15","nodeType":"YulIf","src":"2150:52:15"},{"nativeSrc":"2211:33:15","nodeType":"YulAssignment","src":"2211:33:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2234:9:15","nodeType":"YulIdentifier","src":"2234:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"2221:12:15","nodeType":"YulIdentifier","src":"2221:12:15"},"nativeSrc":"2221:23:15","nodeType":"YulFunctionCall","src":"2221:23:15"},"variableNames":[{"name":"value0","nativeSrc":"2211:6:15","nodeType":"YulIdentifier","src":"2211:6:15"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2070:180:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2106:9:15","nodeType":"YulTypedName","src":"2106:9:15","type":""},{"name":"dataEnd","nativeSrc":"2117:7:15","nodeType":"YulTypedName","src":"2117:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2129:6:15","nodeType":"YulTypedName","src":"2129:6:15","type":""}],"src":"2070:180:15"},{"body":{"nativeSrc":"2339:283:15","nodeType":"YulBlock","src":"2339:283:15","statements":[{"body":{"nativeSrc":"2388:16:15","nodeType":"YulBlock","src":"2388:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2397:1:15","nodeType":"YulLiteral","src":"2397:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2400:1:15","nodeType":"YulLiteral","src":"2400:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2390:6:15","nodeType":"YulIdentifier","src":"2390:6:15"},"nativeSrc":"2390:12:15","nodeType":"YulFunctionCall","src":"2390:12:15"},"nativeSrc":"2390:12:15","nodeType":"YulExpressionStatement","src":"2390:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2367:6:15","nodeType":"YulIdentifier","src":"2367:6:15"},{"kind":"number","nativeSrc":"2375:4:15","nodeType":"YulLiteral","src":"2375:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2363:3:15","nodeType":"YulIdentifier","src":"2363:3:15"},"nativeSrc":"2363:17:15","nodeType":"YulFunctionCall","src":"2363:17:15"},{"name":"end","nativeSrc":"2382:3:15","nodeType":"YulIdentifier","src":"2382:3:15"}],"functionName":{"name":"slt","nativeSrc":"2359:3:15","nodeType":"YulIdentifier","src":"2359:3:15"},"nativeSrc":"2359:27:15","nodeType":"YulFunctionCall","src":"2359:27:15"}],"functionName":{"name":"iszero","nativeSrc":"2352:6:15","nodeType":"YulIdentifier","src":"2352:6:15"},"nativeSrc":"2352:35:15","nodeType":"YulFunctionCall","src":"2352:35:15"},"nativeSrc":"2349:55:15","nodeType":"YulIf","src":"2349:55:15"},{"nativeSrc":"2413:30:15","nodeType":"YulAssignment","src":"2413:30:15","value":{"arguments":[{"name":"offset","nativeSrc":"2436:6:15","nodeType":"YulIdentifier","src":"2436:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"2423:12:15","nodeType":"YulIdentifier","src":"2423:12:15"},"nativeSrc":"2423:20:15","nodeType":"YulFunctionCall","src":"2423:20:15"},"variableNames":[{"name":"length","nativeSrc":"2413:6:15","nodeType":"YulIdentifier","src":"2413:6:15"}]},{"body":{"nativeSrc":"2486:16:15","nodeType":"YulBlock","src":"2486:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2495:1:15","nodeType":"YulLiteral","src":"2495:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2498:1:15","nodeType":"YulLiteral","src":"2498:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2488:6:15","nodeType":"YulIdentifier","src":"2488:6:15"},"nativeSrc":"2488:12:15","nodeType":"YulFunctionCall","src":"2488:12:15"},"nativeSrc":"2488:12:15","nodeType":"YulExpressionStatement","src":"2488:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2458:6:15","nodeType":"YulIdentifier","src":"2458:6:15"},{"kind":"number","nativeSrc":"2466:18:15","nodeType":"YulLiteral","src":"2466:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2455:2:15","nodeType":"YulIdentifier","src":"2455:2:15"},"nativeSrc":"2455:30:15","nodeType":"YulFunctionCall","src":"2455:30:15"},"nativeSrc":"2452:50:15","nodeType":"YulIf","src":"2452:50:15"},{"nativeSrc":"2511:29:15","nodeType":"YulAssignment","src":"2511:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"2527:6:15","nodeType":"YulIdentifier","src":"2527:6:15"},{"kind":"number","nativeSrc":"2535:4:15","nodeType":"YulLiteral","src":"2535:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2523:3:15","nodeType":"YulIdentifier","src":"2523:3:15"},"nativeSrc":"2523:17:15","nodeType":"YulFunctionCall","src":"2523:17:15"},"variableNames":[{"name":"arrayPos","nativeSrc":"2511:8:15","nodeType":"YulIdentifier","src":"2511:8:15"}]},{"body":{"nativeSrc":"2600:16:15","nodeType":"YulBlock","src":"2600:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2609:1:15","nodeType":"YulLiteral","src":"2609:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2612:1:15","nodeType":"YulLiteral","src":"2612:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2602:6:15","nodeType":"YulIdentifier","src":"2602:6:15"},"nativeSrc":"2602:12:15","nodeType":"YulFunctionCall","src":"2602:12:15"},"nativeSrc":"2602:12:15","nodeType":"YulExpressionStatement","src":"2602:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2563:6:15","nodeType":"YulIdentifier","src":"2563:6:15"},{"arguments":[{"kind":"number","nativeSrc":"2575:1:15","nodeType":"YulLiteral","src":"2575:1:15","type":"","value":"5"},{"name":"length","nativeSrc":"2578:6:15","nodeType":"YulIdentifier","src":"2578:6:15"}],"functionName":{"name":"shl","nativeSrc":"2571:3:15","nodeType":"YulIdentifier","src":"2571:3:15"},"nativeSrc":"2571:14:15","nodeType":"YulFunctionCall","src":"2571:14:15"}],"functionName":{"name":"add","nativeSrc":"2559:3:15","nodeType":"YulIdentifier","src":"2559:3:15"},"nativeSrc":"2559:27:15","nodeType":"YulFunctionCall","src":"2559:27:15"},{"kind":"number","nativeSrc":"2588:4:15","nodeType":"YulLiteral","src":"2588:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2555:3:15","nodeType":"YulIdentifier","src":"2555:3:15"},"nativeSrc":"2555:38:15","nodeType":"YulFunctionCall","src":"2555:38:15"},{"name":"end","nativeSrc":"2595:3:15","nodeType":"YulIdentifier","src":"2595:3:15"}],"functionName":{"name":"gt","nativeSrc":"2552:2:15","nodeType":"YulIdentifier","src":"2552:2:15"},"nativeSrc":"2552:47:15","nodeType":"YulFunctionCall","src":"2552:47:15"},"nativeSrc":"2549:67:15","nodeType":"YulIf","src":"2549:67:15"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2255:367:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2302:6:15","nodeType":"YulTypedName","src":"2302:6:15","type":""},{"name":"end","nativeSrc":"2310:3:15","nodeType":"YulTypedName","src":"2310:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2318:8:15","nodeType":"YulTypedName","src":"2318:8:15","type":""},{"name":"length","nativeSrc":"2328:6:15","nodeType":"YulTypedName","src":"2328:6:15","type":""}],"src":"2255:367:15"},{"body":{"nativeSrc":"2699:275:15","nodeType":"YulBlock","src":"2699:275:15","statements":[{"body":{"nativeSrc":"2748:16:15","nodeType":"YulBlock","src":"2748:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2757:1:15","nodeType":"YulLiteral","src":"2757:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2760:1:15","nodeType":"YulLiteral","src":"2760:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2750:6:15","nodeType":"YulIdentifier","src":"2750:6:15"},"nativeSrc":"2750:12:15","nodeType":"YulFunctionCall","src":"2750:12:15"},"nativeSrc":"2750:12:15","nodeType":"YulExpressionStatement","src":"2750:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2727:6:15","nodeType":"YulIdentifier","src":"2727:6:15"},{"kind":"number","nativeSrc":"2735:4:15","nodeType":"YulLiteral","src":"2735:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2723:3:15","nodeType":"YulIdentifier","src":"2723:3:15"},"nativeSrc":"2723:17:15","nodeType":"YulFunctionCall","src":"2723:17:15"},{"name":"end","nativeSrc":"2742:3:15","nodeType":"YulIdentifier","src":"2742:3:15"}],"functionName":{"name":"slt","nativeSrc":"2719:3:15","nodeType":"YulIdentifier","src":"2719:3:15"},"nativeSrc":"2719:27:15","nodeType":"YulFunctionCall","src":"2719:27:15"}],"functionName":{"name":"iszero","nativeSrc":"2712:6:15","nodeType":"YulIdentifier","src":"2712:6:15"},"nativeSrc":"2712:35:15","nodeType":"YulFunctionCall","src":"2712:35:15"},"nativeSrc":"2709:55:15","nodeType":"YulIf","src":"2709:55:15"},{"nativeSrc":"2773:30:15","nodeType":"YulAssignment","src":"2773:30:15","value":{"arguments":[{"name":"offset","nativeSrc":"2796:6:15","nodeType":"YulIdentifier","src":"2796:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"2783:12:15","nodeType":"YulIdentifier","src":"2783:12:15"},"nativeSrc":"2783:20:15","nodeType":"YulFunctionCall","src":"2783:20:15"},"variableNames":[{"name":"length","nativeSrc":"2773:6:15","nodeType":"YulIdentifier","src":"2773:6:15"}]},{"body":{"nativeSrc":"2846:16:15","nodeType":"YulBlock","src":"2846:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2855:1:15","nodeType":"YulLiteral","src":"2855:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2858:1:15","nodeType":"YulLiteral","src":"2858:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2848:6:15","nodeType":"YulIdentifier","src":"2848:6:15"},"nativeSrc":"2848:12:15","nodeType":"YulFunctionCall","src":"2848:12:15"},"nativeSrc":"2848:12:15","nodeType":"YulExpressionStatement","src":"2848:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2818:6:15","nodeType":"YulIdentifier","src":"2818:6:15"},{"kind":"number","nativeSrc":"2826:18:15","nodeType":"YulLiteral","src":"2826:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2815:2:15","nodeType":"YulIdentifier","src":"2815:2:15"},"nativeSrc":"2815:30:15","nodeType":"YulFunctionCall","src":"2815:30:15"},"nativeSrc":"2812:50:15","nodeType":"YulIf","src":"2812:50:15"},{"nativeSrc":"2871:29:15","nodeType":"YulAssignment","src":"2871:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"2887:6:15","nodeType":"YulIdentifier","src":"2887:6:15"},{"kind":"number","nativeSrc":"2895:4:15","nodeType":"YulLiteral","src":"2895:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2883:3:15","nodeType":"YulIdentifier","src":"2883:3:15"},"nativeSrc":"2883:17:15","nodeType":"YulFunctionCall","src":"2883:17:15"},"variableNames":[{"name":"arrayPos","nativeSrc":"2871:8:15","nodeType":"YulIdentifier","src":"2871:8:15"}]},{"body":{"nativeSrc":"2952:16:15","nodeType":"YulBlock","src":"2952:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2961:1:15","nodeType":"YulLiteral","src":"2961:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2964:1:15","nodeType":"YulLiteral","src":"2964:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2954:6:15","nodeType":"YulIdentifier","src":"2954:6:15"},"nativeSrc":"2954:12:15","nodeType":"YulFunctionCall","src":"2954:12:15"},"nativeSrc":"2954:12:15","nodeType":"YulExpressionStatement","src":"2954:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2923:6:15","nodeType":"YulIdentifier","src":"2923:6:15"},{"name":"length","nativeSrc":"2931:6:15","nodeType":"YulIdentifier","src":"2931:6:15"}],"functionName":{"name":"add","nativeSrc":"2919:3:15","nodeType":"YulIdentifier","src":"2919:3:15"},"nativeSrc":"2919:19:15","nodeType":"YulFunctionCall","src":"2919:19:15"},{"kind":"number","nativeSrc":"2940:4:15","nodeType":"YulLiteral","src":"2940:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2915:3:15","nodeType":"YulIdentifier","src":"2915:3:15"},"nativeSrc":"2915:30:15","nodeType":"YulFunctionCall","src":"2915:30:15"},{"name":"end","nativeSrc":"2947:3:15","nodeType":"YulIdentifier","src":"2947:3:15"}],"functionName":{"name":"gt","nativeSrc":"2912:2:15","nodeType":"YulIdentifier","src":"2912:2:15"},"nativeSrc":"2912:39:15","nodeType":"YulFunctionCall","src":"2912:39:15"},"nativeSrc":"2909:59:15","nodeType":"YulIf","src":"2909:59:15"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"2627:347:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2662:6:15","nodeType":"YulTypedName","src":"2662:6:15","type":""},{"name":"end","nativeSrc":"2670:3:15","nodeType":"YulTypedName","src":"2670:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2678:8:15","nodeType":"YulTypedName","src":"2678:8:15","type":""},{"name":"length","nativeSrc":"2688:6:15","nodeType":"YulTypedName","src":"2688:6:15","type":""}],"src":"2627:347:15"},{"body":{"nativeSrc":"3206:983:15","nodeType":"YulBlock","src":"3206:983:15","statements":[{"body":{"nativeSrc":"3253:16:15","nodeType":"YulBlock","src":"3253:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3262:1:15","nodeType":"YulLiteral","src":"3262:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3265:1:15","nodeType":"YulLiteral","src":"3265:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3255:6:15","nodeType":"YulIdentifier","src":"3255:6:15"},"nativeSrc":"3255:12:15","nodeType":"YulFunctionCall","src":"3255:12:15"},"nativeSrc":"3255:12:15","nodeType":"YulExpressionStatement","src":"3255:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3227:7:15","nodeType":"YulIdentifier","src":"3227:7:15"},{"name":"headStart","nativeSrc":"3236:9:15","nodeType":"YulIdentifier","src":"3236:9:15"}],"functionName":{"name":"sub","nativeSrc":"3223:3:15","nodeType":"YulIdentifier","src":"3223:3:15"},"nativeSrc":"3223:23:15","nodeType":"YulFunctionCall","src":"3223:23:15"},{"kind":"number","nativeSrc":"3248:3:15","nodeType":"YulLiteral","src":"3248:3:15","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3219:3:15","nodeType":"YulIdentifier","src":"3219:3:15"},"nativeSrc":"3219:33:15","nodeType":"YulFunctionCall","src":"3219:33:15"},"nativeSrc":"3216:53:15","nodeType":"YulIf","src":"3216:53:15"},{"nativeSrc":"3278:39:15","nodeType":"YulAssignment","src":"3278:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3307:9:15","nodeType":"YulIdentifier","src":"3307:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3288:18:15","nodeType":"YulIdentifier","src":"3288:18:15"},"nativeSrc":"3288:29:15","nodeType":"YulFunctionCall","src":"3288:29:15"},"variableNames":[{"name":"value0","nativeSrc":"3278:6:15","nodeType":"YulIdentifier","src":"3278:6:15"}]},{"nativeSrc":"3326:48:15","nodeType":"YulAssignment","src":"3326:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3359:9:15","nodeType":"YulIdentifier","src":"3359:9:15"},{"kind":"number","nativeSrc":"3370:2:15","nodeType":"YulLiteral","src":"3370:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3355:3:15","nodeType":"YulIdentifier","src":"3355:3:15"},"nativeSrc":"3355:18:15","nodeType":"YulFunctionCall","src":"3355:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3336:18:15","nodeType":"YulIdentifier","src":"3336:18:15"},"nativeSrc":"3336:38:15","nodeType":"YulFunctionCall","src":"3336:38:15"},"variableNames":[{"name":"value1","nativeSrc":"3326:6:15","nodeType":"YulIdentifier","src":"3326:6:15"}]},{"nativeSrc":"3383:46:15","nodeType":"YulVariableDeclaration","src":"3383:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3414:9:15","nodeType":"YulIdentifier","src":"3414:9:15"},{"kind":"number","nativeSrc":"3425:2:15","nodeType":"YulLiteral","src":"3425:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3410:3:15","nodeType":"YulIdentifier","src":"3410:3:15"},"nativeSrc":"3410:18:15","nodeType":"YulFunctionCall","src":"3410:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"3397:12:15","nodeType":"YulIdentifier","src":"3397:12:15"},"nativeSrc":"3397:32:15","nodeType":"YulFunctionCall","src":"3397:32:15"},"variables":[{"name":"offset","nativeSrc":"3387:6:15","nodeType":"YulTypedName","src":"3387:6:15","type":""}]},{"nativeSrc":"3438:28:15","nodeType":"YulVariableDeclaration","src":"3438:28:15","value":{"kind":"number","nativeSrc":"3448:18:15","nodeType":"YulLiteral","src":"3448:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3442:2:15","nodeType":"YulTypedName","src":"3442:2:15","type":""}]},{"body":{"nativeSrc":"3493:16:15","nodeType":"YulBlock","src":"3493:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3502:1:15","nodeType":"YulLiteral","src":"3502:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3505:1:15","nodeType":"YulLiteral","src":"3505:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3495:6:15","nodeType":"YulIdentifier","src":"3495:6:15"},"nativeSrc":"3495:12:15","nodeType":"YulFunctionCall","src":"3495:12:15"},"nativeSrc":"3495:12:15","nodeType":"YulExpressionStatement","src":"3495:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3481:6:15","nodeType":"YulIdentifier","src":"3481:6:15"},{"name":"_1","nativeSrc":"3489:2:15","nodeType":"YulIdentifier","src":"3489:2:15"}],"functionName":{"name":"gt","nativeSrc":"3478:2:15","nodeType":"YulIdentifier","src":"3478:2:15"},"nativeSrc":"3478:14:15","nodeType":"YulFunctionCall","src":"3478:14:15"},"nativeSrc":"3475:34:15","nodeType":"YulIf","src":"3475:34:15"},{"nativeSrc":"3518:96:15","nodeType":"YulVariableDeclaration","src":"3518:96:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3586:9:15","nodeType":"YulIdentifier","src":"3586:9:15"},{"name":"offset","nativeSrc":"3597:6:15","nodeType":"YulIdentifier","src":"3597:6:15"}],"functionName":{"name":"add","nativeSrc":"3582:3:15","nodeType":"YulIdentifier","src":"3582:3:15"},"nativeSrc":"3582:22:15","nodeType":"YulFunctionCall","src":"3582:22:15"},{"name":"dataEnd","nativeSrc":"3606:7:15","nodeType":"YulIdentifier","src":"3606:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3544:37:15","nodeType":"YulIdentifier","src":"3544:37:15"},"nativeSrc":"3544:70:15","nodeType":"YulFunctionCall","src":"3544:70:15"},"variables":[{"name":"value2_1","nativeSrc":"3522:8:15","nodeType":"YulTypedName","src":"3522:8:15","type":""},{"name":"value3_1","nativeSrc":"3532:8:15","nodeType":"YulTypedName","src":"3532:8:15","type":""}]},{"nativeSrc":"3623:18:15","nodeType":"YulAssignment","src":"3623:18:15","value":{"name":"value2_1","nativeSrc":"3633:8:15","nodeType":"YulIdentifier","src":"3633:8:15"},"variableNames":[{"name":"value2","nativeSrc":"3623:6:15","nodeType":"YulIdentifier","src":"3623:6:15"}]},{"nativeSrc":"3650:18:15","nodeType":"YulAssignment","src":"3650:18:15","value":{"name":"value3_1","nativeSrc":"3660:8:15","nodeType":"YulIdentifier","src":"3660:8:15"},"variableNames":[{"name":"value3","nativeSrc":"3650:6:15","nodeType":"YulIdentifier","src":"3650:6:15"}]},{"nativeSrc":"3677:48:15","nodeType":"YulVariableDeclaration","src":"3677:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3710:9:15","nodeType":"YulIdentifier","src":"3710:9:15"},{"kind":"number","nativeSrc":"3721:2:15","nodeType":"YulLiteral","src":"3721:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3706:3:15","nodeType":"YulIdentifier","src":"3706:3:15"},"nativeSrc":"3706:18:15","nodeType":"YulFunctionCall","src":"3706:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"3693:12:15","nodeType":"YulIdentifier","src":"3693:12:15"},"nativeSrc":"3693:32:15","nodeType":"YulFunctionCall","src":"3693:32:15"},"variables":[{"name":"offset_1","nativeSrc":"3681:8:15","nodeType":"YulTypedName","src":"3681:8:15","type":""}]},{"body":{"nativeSrc":"3754:16:15","nodeType":"YulBlock","src":"3754:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3763:1:15","nodeType":"YulLiteral","src":"3763:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3766:1:15","nodeType":"YulLiteral","src":"3766:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3756:6:15","nodeType":"YulIdentifier","src":"3756:6:15"},"nativeSrc":"3756:12:15","nodeType":"YulFunctionCall","src":"3756:12:15"},"nativeSrc":"3756:12:15","nodeType":"YulExpressionStatement","src":"3756:12:15"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"3740:8:15","nodeType":"YulIdentifier","src":"3740:8:15"},{"name":"_1","nativeSrc":"3750:2:15","nodeType":"YulIdentifier","src":"3750:2:15"}],"functionName":{"name":"gt","nativeSrc":"3737:2:15","nodeType":"YulIdentifier","src":"3737:2:15"},"nativeSrc":"3737:16:15","nodeType":"YulFunctionCall","src":"3737:16:15"},"nativeSrc":"3734:36:15","nodeType":"YulIf","src":"3734:36:15"},{"nativeSrc":"3779:98:15","nodeType":"YulVariableDeclaration","src":"3779:98:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3847:9:15","nodeType":"YulIdentifier","src":"3847:9:15"},{"name":"offset_1","nativeSrc":"3858:8:15","nodeType":"YulIdentifier","src":"3858:8:15"}],"functionName":{"name":"add","nativeSrc":"3843:3:15","nodeType":"YulIdentifier","src":"3843:3:15"},"nativeSrc":"3843:24:15","nodeType":"YulFunctionCall","src":"3843:24:15"},{"name":"dataEnd","nativeSrc":"3869:7:15","nodeType":"YulIdentifier","src":"3869:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3805:37:15","nodeType":"YulIdentifier","src":"3805:37:15"},"nativeSrc":"3805:72:15","nodeType":"YulFunctionCall","src":"3805:72:15"},"variables":[{"name":"value4_1","nativeSrc":"3783:8:15","nodeType":"YulTypedName","src":"3783:8:15","type":""},{"name":"value5_1","nativeSrc":"3793:8:15","nodeType":"YulTypedName","src":"3793:8:15","type":""}]},{"nativeSrc":"3886:18:15","nodeType":"YulAssignment","src":"3886:18:15","value":{"name":"value4_1","nativeSrc":"3896:8:15","nodeType":"YulIdentifier","src":"3896:8:15"},"variableNames":[{"name":"value4","nativeSrc":"3886:6:15","nodeType":"YulIdentifier","src":"3886:6:15"}]},{"nativeSrc":"3913:18:15","nodeType":"YulAssignment","src":"3913:18:15","value":{"name":"value5_1","nativeSrc":"3923:8:15","nodeType":"YulIdentifier","src":"3923:8:15"},"variableNames":[{"name":"value5","nativeSrc":"3913:6:15","nodeType":"YulIdentifier","src":"3913:6:15"}]},{"nativeSrc":"3940:49:15","nodeType":"YulVariableDeclaration","src":"3940:49:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3973:9:15","nodeType":"YulIdentifier","src":"3973:9:15"},{"kind":"number","nativeSrc":"3984:3:15","nodeType":"YulLiteral","src":"3984:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3969:3:15","nodeType":"YulIdentifier","src":"3969:3:15"},"nativeSrc":"3969:19:15","nodeType":"YulFunctionCall","src":"3969:19:15"}],"functionName":{"name":"calldataload","nativeSrc":"3956:12:15","nodeType":"YulIdentifier","src":"3956:12:15"},"nativeSrc":"3956:33:15","nodeType":"YulFunctionCall","src":"3956:33:15"},"variables":[{"name":"offset_2","nativeSrc":"3944:8:15","nodeType":"YulTypedName","src":"3944:8:15","type":""}]},{"body":{"nativeSrc":"4018:16:15","nodeType":"YulBlock","src":"4018:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4027:1:15","nodeType":"YulLiteral","src":"4027:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"4030:1:15","nodeType":"YulLiteral","src":"4030:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4020:6:15","nodeType":"YulIdentifier","src":"4020:6:15"},"nativeSrc":"4020:12:15","nodeType":"YulFunctionCall","src":"4020:12:15"},"nativeSrc":"4020:12:15","nodeType":"YulExpressionStatement","src":"4020:12:15"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4004:8:15","nodeType":"YulIdentifier","src":"4004:8:15"},{"name":"_1","nativeSrc":"4014:2:15","nodeType":"YulIdentifier","src":"4014:2:15"}],"functionName":{"name":"gt","nativeSrc":"4001:2:15","nodeType":"YulIdentifier","src":"4001:2:15"},"nativeSrc":"4001:16:15","nodeType":"YulFunctionCall","src":"4001:16:15"},"nativeSrc":"3998:36:15","nodeType":"YulIf","src":"3998:36:15"},{"nativeSrc":"4043:86:15","nodeType":"YulVariableDeclaration","src":"4043:86:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4099:9:15","nodeType":"YulIdentifier","src":"4099:9:15"},{"name":"offset_2","nativeSrc":"4110:8:15","nodeType":"YulIdentifier","src":"4110:8:15"}],"functionName":{"name":"add","nativeSrc":"4095:3:15","nodeType":"YulIdentifier","src":"4095:3:15"},"nativeSrc":"4095:24:15","nodeType":"YulFunctionCall","src":"4095:24:15"},{"name":"dataEnd","nativeSrc":"4121:7:15","nodeType":"YulIdentifier","src":"4121:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4069:25:15","nodeType":"YulIdentifier","src":"4069:25:15"},"nativeSrc":"4069:60:15","nodeType":"YulFunctionCall","src":"4069:60:15"},"variables":[{"name":"value6_1","nativeSrc":"4047:8:15","nodeType":"YulTypedName","src":"4047:8:15","type":""},{"name":"value7_1","nativeSrc":"4057:8:15","nodeType":"YulTypedName","src":"4057:8:15","type":""}]},{"nativeSrc":"4138:18:15","nodeType":"YulAssignment","src":"4138:18:15","value":{"name":"value6_1","nativeSrc":"4148:8:15","nodeType":"YulIdentifier","src":"4148:8:15"},"variableNames":[{"name":"value6","nativeSrc":"4138:6:15","nodeType":"YulIdentifier","src":"4138:6:15"}]},{"nativeSrc":"4165:18:15","nodeType":"YulAssignment","src":"4165:18:15","value":{"name":"value7_1","nativeSrc":"4175:8:15","nodeType":"YulIdentifier","src":"4175:8:15"},"variableNames":[{"name":"value7","nativeSrc":"4165:6:15","nodeType":"YulIdentifier","src":"4165:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2979:1210:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3116:9:15","nodeType":"YulTypedName","src":"3116:9:15","type":""},{"name":"dataEnd","nativeSrc":"3127:7:15","nodeType":"YulTypedName","src":"3127:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3139:6:15","nodeType":"YulTypedName","src":"3139:6:15","type":""},{"name":"value1","nativeSrc":"3147:6:15","nodeType":"YulTypedName","src":"3147:6:15","type":""},{"name":"value2","nativeSrc":"3155:6:15","nodeType":"YulTypedName","src":"3155:6:15","type":""},{"name":"value3","nativeSrc":"3163:6:15","nodeType":"YulTypedName","src":"3163:6:15","type":""},{"name":"value4","nativeSrc":"3171:6:15","nodeType":"YulTypedName","src":"3171:6:15","type":""},{"name":"value5","nativeSrc":"3179:6:15","nodeType":"YulTypedName","src":"3179:6:15","type":""},{"name":"value6","nativeSrc":"3187:6:15","nodeType":"YulTypedName","src":"3187:6:15","type":""},{"name":"value7","nativeSrc":"3195:6:15","nodeType":"YulTypedName","src":"3195:6:15","type":""}],"src":"2979:1210:15"},{"body":{"nativeSrc":"4293:149:15","nodeType":"YulBlock","src":"4293:149:15","statements":[{"nativeSrc":"4303:26:15","nodeType":"YulAssignment","src":"4303:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"4315:9:15","nodeType":"YulIdentifier","src":"4315:9:15"},{"kind":"number","nativeSrc":"4326:2:15","nodeType":"YulLiteral","src":"4326:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4311:3:15","nodeType":"YulIdentifier","src":"4311:3:15"},"nativeSrc":"4311:18:15","nodeType":"YulFunctionCall","src":"4311:18:15"},"variableNames":[{"name":"tail","nativeSrc":"4303:4:15","nodeType":"YulIdentifier","src":"4303:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4345:9:15","nodeType":"YulIdentifier","src":"4345:9:15"},{"arguments":[{"name":"value0","nativeSrc":"4360:6:15","nodeType":"YulIdentifier","src":"4360:6:15"},{"kind":"number","nativeSrc":"4368:66:15","nodeType":"YulLiteral","src":"4368:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4356:3:15","nodeType":"YulIdentifier","src":"4356:3:15"},"nativeSrc":"4356:79:15","nodeType":"YulFunctionCall","src":"4356:79:15"}],"functionName":{"name":"mstore","nativeSrc":"4338:6:15","nodeType":"YulIdentifier","src":"4338:6:15"},"nativeSrc":"4338:98:15","nodeType":"YulFunctionCall","src":"4338:98:15"},"nativeSrc":"4338:98:15","nodeType":"YulExpressionStatement","src":"4338:98:15"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4194:248:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4262:9:15","nodeType":"YulTypedName","src":"4262:9:15","type":""},{"name":"value0","nativeSrc":"4273:6:15","nodeType":"YulTypedName","src":"4273:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4284:4:15","nodeType":"YulTypedName","src":"4284:4:15","type":""}],"src":"4194:248:15"},{"body":{"nativeSrc":"4604:538:15","nodeType":"YulBlock","src":"4604:538:15","statements":[{"body":{"nativeSrc":"4651:16:15","nodeType":"YulBlock","src":"4651:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4660:1:15","nodeType":"YulLiteral","src":"4660:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"4663:1:15","nodeType":"YulLiteral","src":"4663:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4653:6:15","nodeType":"YulIdentifier","src":"4653:6:15"},"nativeSrc":"4653:12:15","nodeType":"YulFunctionCall","src":"4653:12:15"},"nativeSrc":"4653:12:15","nodeType":"YulExpressionStatement","src":"4653:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4625:7:15","nodeType":"YulIdentifier","src":"4625:7:15"},{"name":"headStart","nativeSrc":"4634:9:15","nodeType":"YulIdentifier","src":"4634:9:15"}],"functionName":{"name":"sub","nativeSrc":"4621:3:15","nodeType":"YulIdentifier","src":"4621:3:15"},"nativeSrc":"4621:23:15","nodeType":"YulFunctionCall","src":"4621:23:15"},{"kind":"number","nativeSrc":"4646:3:15","nodeType":"YulLiteral","src":"4646:3:15","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"4617:3:15","nodeType":"YulIdentifier","src":"4617:3:15"},"nativeSrc":"4617:33:15","nodeType":"YulFunctionCall","src":"4617:33:15"},"nativeSrc":"4614:53:15","nodeType":"YulIf","src":"4614:53:15"},{"nativeSrc":"4676:39:15","nodeType":"YulAssignment","src":"4676:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"4705:9:15","nodeType":"YulIdentifier","src":"4705:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4686:18:15","nodeType":"YulIdentifier","src":"4686:18:15"},"nativeSrc":"4686:29:15","nodeType":"YulFunctionCall","src":"4686:29:15"},"variableNames":[{"name":"value0","nativeSrc":"4676:6:15","nodeType":"YulIdentifier","src":"4676:6:15"}]},{"nativeSrc":"4724:48:15","nodeType":"YulAssignment","src":"4724:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4757:9:15","nodeType":"YulIdentifier","src":"4757:9:15"},{"kind":"number","nativeSrc":"4768:2:15","nodeType":"YulLiteral","src":"4768:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4753:3:15","nodeType":"YulIdentifier","src":"4753:3:15"},"nativeSrc":"4753:18:15","nodeType":"YulFunctionCall","src":"4753:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"4734:18:15","nodeType":"YulIdentifier","src":"4734:18:15"},"nativeSrc":"4734:38:15","nodeType":"YulFunctionCall","src":"4734:38:15"},"variableNames":[{"name":"value1","nativeSrc":"4724:6:15","nodeType":"YulIdentifier","src":"4724:6:15"}]},{"nativeSrc":"4781:42:15","nodeType":"YulAssignment","src":"4781:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4808:9:15","nodeType":"YulIdentifier","src":"4808:9:15"},{"kind":"number","nativeSrc":"4819:2:15","nodeType":"YulLiteral","src":"4819:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4804:3:15","nodeType":"YulIdentifier","src":"4804:3:15"},"nativeSrc":"4804:18:15","nodeType":"YulFunctionCall","src":"4804:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"4791:12:15","nodeType":"YulIdentifier","src":"4791:12:15"},"nativeSrc":"4791:32:15","nodeType":"YulFunctionCall","src":"4791:32:15"},"variableNames":[{"name":"value2","nativeSrc":"4781:6:15","nodeType":"YulIdentifier","src":"4781:6:15"}]},{"nativeSrc":"4832:42:15","nodeType":"YulAssignment","src":"4832:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4859:9:15","nodeType":"YulIdentifier","src":"4859:9:15"},{"kind":"number","nativeSrc":"4870:2:15","nodeType":"YulLiteral","src":"4870:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4855:3:15","nodeType":"YulIdentifier","src":"4855:3:15"},"nativeSrc":"4855:18:15","nodeType":"YulFunctionCall","src":"4855:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"4842:12:15","nodeType":"YulIdentifier","src":"4842:12:15"},"nativeSrc":"4842:32:15","nodeType":"YulFunctionCall","src":"4842:32:15"},"variableNames":[{"name":"value3","nativeSrc":"4832:6:15","nodeType":"YulIdentifier","src":"4832:6:15"}]},{"nativeSrc":"4883:47:15","nodeType":"YulVariableDeclaration","src":"4883:47:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4914:9:15","nodeType":"YulIdentifier","src":"4914:9:15"},{"kind":"number","nativeSrc":"4925:3:15","nodeType":"YulLiteral","src":"4925:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4910:3:15","nodeType":"YulIdentifier","src":"4910:3:15"},"nativeSrc":"4910:19:15","nodeType":"YulFunctionCall","src":"4910:19:15"}],"functionName":{"name":"calldataload","nativeSrc":"4897:12:15","nodeType":"YulIdentifier","src":"4897:12:15"},"nativeSrc":"4897:33:15","nodeType":"YulFunctionCall","src":"4897:33:15"},"variables":[{"name":"offset","nativeSrc":"4887:6:15","nodeType":"YulTypedName","src":"4887:6:15","type":""}]},{"body":{"nativeSrc":"4973:16:15","nodeType":"YulBlock","src":"4973:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4982:1:15","nodeType":"YulLiteral","src":"4982:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"4985:1:15","nodeType":"YulLiteral","src":"4985:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4975:6:15","nodeType":"YulIdentifier","src":"4975:6:15"},"nativeSrc":"4975:12:15","nodeType":"YulFunctionCall","src":"4975:12:15"},"nativeSrc":"4975:12:15","nodeType":"YulExpressionStatement","src":"4975:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4945:6:15","nodeType":"YulIdentifier","src":"4945:6:15"},{"kind":"number","nativeSrc":"4953:18:15","nodeType":"YulLiteral","src":"4953:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4942:2:15","nodeType":"YulIdentifier","src":"4942:2:15"},"nativeSrc":"4942:30:15","nodeType":"YulFunctionCall","src":"4942:30:15"},"nativeSrc":"4939:50:15","nodeType":"YulIf","src":"4939:50:15"},{"nativeSrc":"4998:84:15","nodeType":"YulVariableDeclaration","src":"4998:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5054:9:15","nodeType":"YulIdentifier","src":"5054:9:15"},{"name":"offset","nativeSrc":"5065:6:15","nodeType":"YulIdentifier","src":"5065:6:15"}],"functionName":{"name":"add","nativeSrc":"5050:3:15","nodeType":"YulIdentifier","src":"5050:3:15"},"nativeSrc":"5050:22:15","nodeType":"YulFunctionCall","src":"5050:22:15"},{"name":"dataEnd","nativeSrc":"5074:7:15","nodeType":"YulIdentifier","src":"5074:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5024:25:15","nodeType":"YulIdentifier","src":"5024:25:15"},"nativeSrc":"5024:58:15","nodeType":"YulFunctionCall","src":"5024:58:15"},"variables":[{"name":"value4_1","nativeSrc":"5002:8:15","nodeType":"YulTypedName","src":"5002:8:15","type":""},{"name":"value5_1","nativeSrc":"5012:8:15","nodeType":"YulTypedName","src":"5012:8:15","type":""}]},{"nativeSrc":"5091:18:15","nodeType":"YulAssignment","src":"5091:18:15","value":{"name":"value4_1","nativeSrc":"5101:8:15","nodeType":"YulIdentifier","src":"5101:8:15"},"variableNames":[{"name":"value4","nativeSrc":"5091:6:15","nodeType":"YulIdentifier","src":"5091:6:15"}]},{"nativeSrc":"5118:18:15","nodeType":"YulAssignment","src":"5118:18:15","value":{"name":"value5_1","nativeSrc":"5128:8:15","nodeType":"YulIdentifier","src":"5128:8:15"},"variableNames":[{"name":"value5","nativeSrc":"5118:6:15","nodeType":"YulIdentifier","src":"5118:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"4447:695:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4530:9:15","nodeType":"YulTypedName","src":"4530:9:15","type":""},{"name":"dataEnd","nativeSrc":"4541:7:15","nodeType":"YulTypedName","src":"4541:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4553:6:15","nodeType":"YulTypedName","src":"4553:6:15","type":""},{"name":"value1","nativeSrc":"4561:6:15","nodeType":"YulTypedName","src":"4561:6:15","type":""},{"name":"value2","nativeSrc":"4569:6:15","nodeType":"YulTypedName","src":"4569:6:15","type":""},{"name":"value3","nativeSrc":"4577:6:15","nodeType":"YulTypedName","src":"4577:6:15","type":""},{"name":"value4","nativeSrc":"4585:6:15","nodeType":"YulTypedName","src":"4585:6:15","type":""},{"name":"value5","nativeSrc":"4593:6:15","nodeType":"YulTypedName","src":"4593:6:15","type":""}],"src":"4447:695:15"},{"body":{"nativeSrc":"5179:152:15","nodeType":"YulBlock","src":"5179:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5196:1:15","nodeType":"YulLiteral","src":"5196:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5199:77:15","nodeType":"YulLiteral","src":"5199:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5189:6:15","nodeType":"YulIdentifier","src":"5189:6:15"},"nativeSrc":"5189:88:15","nodeType":"YulFunctionCall","src":"5189:88:15"},"nativeSrc":"5189:88:15","nodeType":"YulExpressionStatement","src":"5189:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5293:1:15","nodeType":"YulLiteral","src":"5293:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"5296:4:15","nodeType":"YulLiteral","src":"5296:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5286:6:15","nodeType":"YulIdentifier","src":"5286:6:15"},"nativeSrc":"5286:15:15","nodeType":"YulFunctionCall","src":"5286:15:15"},"nativeSrc":"5286:15:15","nodeType":"YulExpressionStatement","src":"5286:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5317:1:15","nodeType":"YulLiteral","src":"5317:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5320:4:15","nodeType":"YulLiteral","src":"5320:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5310:6:15","nodeType":"YulIdentifier","src":"5310:6:15"},"nativeSrc":"5310:15:15","nodeType":"YulFunctionCall","src":"5310:15:15"},"nativeSrc":"5310:15:15","nodeType":"YulExpressionStatement","src":"5310:15:15"}]},"name":"panic_error_0x11","nativeSrc":"5147:184:15","nodeType":"YulFunctionDefinition","src":"5147:184:15"},{"body":{"nativeSrc":"5385:79:15","nodeType":"YulBlock","src":"5385:79:15","statements":[{"nativeSrc":"5395:17:15","nodeType":"YulAssignment","src":"5395:17:15","value":{"arguments":[{"name":"x","nativeSrc":"5407:1:15","nodeType":"YulIdentifier","src":"5407:1:15"},{"name":"y","nativeSrc":"5410:1:15","nodeType":"YulIdentifier","src":"5410:1:15"}],"functionName":{"name":"sub","nativeSrc":"5403:3:15","nodeType":"YulIdentifier","src":"5403:3:15"},"nativeSrc":"5403:9:15","nodeType":"YulFunctionCall","src":"5403:9:15"},"variableNames":[{"name":"diff","nativeSrc":"5395:4:15","nodeType":"YulIdentifier","src":"5395:4:15"}]},{"body":{"nativeSrc":"5436:22:15","nodeType":"YulBlock","src":"5436:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5438:16:15","nodeType":"YulIdentifier","src":"5438:16:15"},"nativeSrc":"5438:18:15","nodeType":"YulFunctionCall","src":"5438:18:15"},"nativeSrc":"5438:18:15","nodeType":"YulExpressionStatement","src":"5438:18:15"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5427:4:15","nodeType":"YulIdentifier","src":"5427:4:15"},{"name":"x","nativeSrc":"5433:1:15","nodeType":"YulIdentifier","src":"5433:1:15"}],"functionName":{"name":"gt","nativeSrc":"5424:2:15","nodeType":"YulIdentifier","src":"5424:2:15"},"nativeSrc":"5424:11:15","nodeType":"YulFunctionCall","src":"5424:11:15"},"nativeSrc":"5421:37:15","nodeType":"YulIf","src":"5421:37:15"}]},"name":"checked_sub_t_uint256","nativeSrc":"5336:128:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5367:1:15","nodeType":"YulTypedName","src":"5367:1:15","type":""},{"name":"y","nativeSrc":"5370:1:15","nodeType":"YulTypedName","src":"5370:1:15","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5376:4:15","nodeType":"YulTypedName","src":"5376:4:15","type":""}],"src":"5336:128:15"},{"body":{"nativeSrc":"5515:228:15","nodeType":"YulBlock","src":"5515:228:15","statements":[{"body":{"nativeSrc":"5546:168:15","nodeType":"YulBlock","src":"5546:168:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5567:1:15","nodeType":"YulLiteral","src":"5567:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5570:77:15","nodeType":"YulLiteral","src":"5570:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5560:6:15","nodeType":"YulIdentifier","src":"5560:6:15"},"nativeSrc":"5560:88:15","nodeType":"YulFunctionCall","src":"5560:88:15"},"nativeSrc":"5560:88:15","nodeType":"YulExpressionStatement","src":"5560:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5668:1:15","nodeType":"YulLiteral","src":"5668:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"5671:4:15","nodeType":"YulLiteral","src":"5671:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5661:6:15","nodeType":"YulIdentifier","src":"5661:6:15"},"nativeSrc":"5661:15:15","nodeType":"YulFunctionCall","src":"5661:15:15"},"nativeSrc":"5661:15:15","nodeType":"YulExpressionStatement","src":"5661:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5696:1:15","nodeType":"YulLiteral","src":"5696:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5699:4:15","nodeType":"YulLiteral","src":"5699:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5689:6:15","nodeType":"YulIdentifier","src":"5689:6:15"},"nativeSrc":"5689:15:15","nodeType":"YulFunctionCall","src":"5689:15:15"},"nativeSrc":"5689:15:15","nodeType":"YulExpressionStatement","src":"5689:15:15"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5535:1:15","nodeType":"YulIdentifier","src":"5535:1:15"}],"functionName":{"name":"iszero","nativeSrc":"5528:6:15","nodeType":"YulIdentifier","src":"5528:6:15"},"nativeSrc":"5528:9:15","nodeType":"YulFunctionCall","src":"5528:9:15"},"nativeSrc":"5525:189:15","nodeType":"YulIf","src":"5525:189:15"},{"nativeSrc":"5723:14:15","nodeType":"YulAssignment","src":"5723:14:15","value":{"arguments":[{"name":"x","nativeSrc":"5732:1:15","nodeType":"YulIdentifier","src":"5732:1:15"},{"name":"y","nativeSrc":"5735:1:15","nodeType":"YulIdentifier","src":"5735:1:15"}],"functionName":{"name":"div","nativeSrc":"5728:3:15","nodeType":"YulIdentifier","src":"5728:3:15"},"nativeSrc":"5728:9:15","nodeType":"YulFunctionCall","src":"5728:9:15"},"variableNames":[{"name":"r","nativeSrc":"5723:1:15","nodeType":"YulIdentifier","src":"5723:1:15"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5469:274:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5500:1:15","nodeType":"YulTypedName","src":"5500:1:15","type":""},{"name":"y","nativeSrc":"5503:1:15","nodeType":"YulTypedName","src":"5503:1:15","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5509:1:15","nodeType":"YulTypedName","src":"5509:1:15","type":""}],"src":"5469:274:15"},{"body":{"nativeSrc":"5849:125:15","nodeType":"YulBlock","src":"5849:125:15","statements":[{"nativeSrc":"5859:26:15","nodeType":"YulAssignment","src":"5859:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"5871:9:15","nodeType":"YulIdentifier","src":"5871:9:15"},{"kind":"number","nativeSrc":"5882:2:15","nodeType":"YulLiteral","src":"5882:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5867:3:15","nodeType":"YulIdentifier","src":"5867:3:15"},"nativeSrc":"5867:18:15","nodeType":"YulFunctionCall","src":"5867:18:15"},"variableNames":[{"name":"tail","nativeSrc":"5859:4:15","nodeType":"YulIdentifier","src":"5859:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5901:9:15","nodeType":"YulIdentifier","src":"5901:9:15"},{"arguments":[{"name":"value0","nativeSrc":"5916:6:15","nodeType":"YulIdentifier","src":"5916:6:15"},{"kind":"number","nativeSrc":"5924:42:15","nodeType":"YulLiteral","src":"5924:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5912:3:15","nodeType":"YulIdentifier","src":"5912:3:15"},"nativeSrc":"5912:55:15","nodeType":"YulFunctionCall","src":"5912:55:15"}],"functionName":{"name":"mstore","nativeSrc":"5894:6:15","nodeType":"YulIdentifier","src":"5894:6:15"},"nativeSrc":"5894:74:15","nodeType":"YulFunctionCall","src":"5894:74:15"},"nativeSrc":"5894:74:15","nodeType":"YulExpressionStatement","src":"5894:74:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"5748:226:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5818:9:15","nodeType":"YulTypedName","src":"5818:9:15","type":""},{"name":"value0","nativeSrc":"5829:6:15","nodeType":"YulTypedName","src":"5829:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5840:4:15","nodeType":"YulTypedName","src":"5840:4:15","type":""}],"src":"5748:226:15"},{"body":{"nativeSrc":"6057:280:15","nodeType":"YulBlock","src":"6057:280:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6074:3:15","nodeType":"YulIdentifier","src":"6074:3:15"},{"name":"length","nativeSrc":"6079:6:15","nodeType":"YulIdentifier","src":"6079:6:15"}],"functionName":{"name":"mstore","nativeSrc":"6067:6:15","nodeType":"YulIdentifier","src":"6067:6:15"},"nativeSrc":"6067:19:15","nodeType":"YulFunctionCall","src":"6067:19:15"},"nativeSrc":"6067:19:15","nodeType":"YulExpressionStatement","src":"6067:19:15"},{"body":{"nativeSrc":"6177:16:15","nodeType":"YulBlock","src":"6177:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6186:1:15","nodeType":"YulLiteral","src":"6186:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"6189:1:15","nodeType":"YulLiteral","src":"6189:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6179:6:15","nodeType":"YulIdentifier","src":"6179:6:15"},"nativeSrc":"6179:12:15","nodeType":"YulFunctionCall","src":"6179:12:15"},"nativeSrc":"6179:12:15","nodeType":"YulExpressionStatement","src":"6179:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6101:6:15","nodeType":"YulIdentifier","src":"6101:6:15"},{"kind":"number","nativeSrc":"6109:66:15","nodeType":"YulLiteral","src":"6109:66:15","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6098:2:15","nodeType":"YulIdentifier","src":"6098:2:15"},"nativeSrc":"6098:78:15","nodeType":"YulFunctionCall","src":"6098:78:15"},"nativeSrc":"6095:98:15","nodeType":"YulIf","src":"6095:98:15"},{"nativeSrc":"6202:30:15","nodeType":"YulVariableDeclaration","src":"6202:30:15","value":{"arguments":[{"kind":"number","nativeSrc":"6222:1:15","nodeType":"YulLiteral","src":"6222:1:15","type":"","value":"5"},{"name":"length","nativeSrc":"6225:6:15","nodeType":"YulIdentifier","src":"6225:6:15"}],"functionName":{"name":"shl","nativeSrc":"6218:3:15","nodeType":"YulIdentifier","src":"6218:3:15"},"nativeSrc":"6218:14:15","nodeType":"YulFunctionCall","src":"6218:14:15"},"variables":[{"name":"length_1","nativeSrc":"6206:8:15","nodeType":"YulTypedName","src":"6206:8:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6258:3:15","nodeType":"YulIdentifier","src":"6258:3:15"},{"kind":"number","nativeSrc":"6263:4:15","nodeType":"YulLiteral","src":"6263:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6254:3:15","nodeType":"YulIdentifier","src":"6254:3:15"},"nativeSrc":"6254:14:15","nodeType":"YulFunctionCall","src":"6254:14:15"},{"name":"start","nativeSrc":"6270:5:15","nodeType":"YulIdentifier","src":"6270:5:15"},{"name":"length_1","nativeSrc":"6277:8:15","nodeType":"YulIdentifier","src":"6277:8:15"}],"functionName":{"name":"calldatacopy","nativeSrc":"6241:12:15","nodeType":"YulIdentifier","src":"6241:12:15"},"nativeSrc":"6241:45:15","nodeType":"YulFunctionCall","src":"6241:45:15"},"nativeSrc":"6241:45:15","nodeType":"YulExpressionStatement","src":"6241:45:15"},{"nativeSrc":"6295:36:15","nodeType":"YulAssignment","src":"6295:36:15","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6310:3:15","nodeType":"YulIdentifier","src":"6310:3:15"},{"name":"length_1","nativeSrc":"6315:8:15","nodeType":"YulIdentifier","src":"6315:8:15"}],"functionName":{"name":"add","nativeSrc":"6306:3:15","nodeType":"YulIdentifier","src":"6306:3:15"},"nativeSrc":"6306:18:15","nodeType":"YulFunctionCall","src":"6306:18:15"},{"kind":"number","nativeSrc":"6326:4:15","nodeType":"YulLiteral","src":"6326:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6302:3:15","nodeType":"YulIdentifier","src":"6302:3:15"},"nativeSrc":"6302:29:15","nodeType":"YulFunctionCall","src":"6302:29:15"},"variableNames":[{"name":"end","nativeSrc":"6295:3:15","nodeType":"YulIdentifier","src":"6295:3:15"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"5979:358:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6026:5:15","nodeType":"YulTypedName","src":"6026:5:15","type":""},{"name":"length","nativeSrc":"6033:6:15","nodeType":"YulTypedName","src":"6033:6:15","type":""},{"name":"pos","nativeSrc":"6041:3:15","nodeType":"YulTypedName","src":"6041:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6049:3:15","nodeType":"YulTypedName","src":"6049:3:15","type":""}],"src":"5979:358:15"},{"body":{"nativeSrc":"6619:362:15","nodeType":"YulBlock","src":"6619:362:15","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6636:9:15","nodeType":"YulIdentifier","src":"6636:9:15"},{"arguments":[{"name":"value0","nativeSrc":"6651:6:15","nodeType":"YulIdentifier","src":"6651:6:15"},{"kind":"number","nativeSrc":"6659:42:15","nodeType":"YulLiteral","src":"6659:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6647:3:15","nodeType":"YulIdentifier","src":"6647:3:15"},"nativeSrc":"6647:55:15","nodeType":"YulFunctionCall","src":"6647:55:15"}],"functionName":{"name":"mstore","nativeSrc":"6629:6:15","nodeType":"YulIdentifier","src":"6629:6:15"},"nativeSrc":"6629:74:15","nodeType":"YulFunctionCall","src":"6629:74:15"},"nativeSrc":"6629:74:15","nodeType":"YulExpressionStatement","src":"6629:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6723:9:15","nodeType":"YulIdentifier","src":"6723:9:15"},{"kind":"number","nativeSrc":"6734:2:15","nodeType":"YulLiteral","src":"6734:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6719:3:15","nodeType":"YulIdentifier","src":"6719:3:15"},"nativeSrc":"6719:18:15","nodeType":"YulFunctionCall","src":"6719:18:15"},{"kind":"number","nativeSrc":"6739:2:15","nodeType":"YulLiteral","src":"6739:2:15","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"6712:6:15","nodeType":"YulIdentifier","src":"6712:6:15"},"nativeSrc":"6712:30:15","nodeType":"YulFunctionCall","src":"6712:30:15"},"nativeSrc":"6712:30:15","nodeType":"YulExpressionStatement","src":"6712:30:15"},{"nativeSrc":"6751:87:15","nodeType":"YulVariableDeclaration","src":"6751:87:15","value":{"arguments":[{"name":"value1","nativeSrc":"6803:6:15","nodeType":"YulIdentifier","src":"6803:6:15"},{"name":"value2","nativeSrc":"6811:6:15","nodeType":"YulIdentifier","src":"6811:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"6823:9:15","nodeType":"YulIdentifier","src":"6823:9:15"},{"kind":"number","nativeSrc":"6834:2:15","nodeType":"YulLiteral","src":"6834:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6819:3:15","nodeType":"YulIdentifier","src":"6819:3:15"},"nativeSrc":"6819:18:15","nodeType":"YulFunctionCall","src":"6819:18:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6765:37:15","nodeType":"YulIdentifier","src":"6765:37:15"},"nativeSrc":"6765:73:15","nodeType":"YulFunctionCall","src":"6765:73:15"},"variables":[{"name":"tail_1","nativeSrc":"6755:6:15","nodeType":"YulTypedName","src":"6755:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6858:9:15","nodeType":"YulIdentifier","src":"6858:9:15"},{"kind":"number","nativeSrc":"6869:2:15","nodeType":"YulLiteral","src":"6869:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6854:3:15","nodeType":"YulIdentifier","src":"6854:3:15"},"nativeSrc":"6854:18:15","nodeType":"YulFunctionCall","src":"6854:18:15"},{"arguments":[{"name":"tail_1","nativeSrc":"6878:6:15","nodeType":"YulIdentifier","src":"6878:6:15"},{"name":"headStart","nativeSrc":"6886:9:15","nodeType":"YulIdentifier","src":"6886:9:15"}],"functionName":{"name":"sub","nativeSrc":"6874:3:15","nodeType":"YulIdentifier","src":"6874:3:15"},"nativeSrc":"6874:22:15","nodeType":"YulFunctionCall","src":"6874:22:15"}],"functionName":{"name":"mstore","nativeSrc":"6847:6:15","nodeType":"YulIdentifier","src":"6847:6:15"},"nativeSrc":"6847:50:15","nodeType":"YulFunctionCall","src":"6847:50:15"},"nativeSrc":"6847:50:15","nodeType":"YulExpressionStatement","src":"6847:50:15"},{"nativeSrc":"6906:69:15","nodeType":"YulAssignment","src":"6906:69:15","value":{"arguments":[{"name":"value3","nativeSrc":"6952:6:15","nodeType":"YulIdentifier","src":"6952:6:15"},{"name":"value4","nativeSrc":"6960:6:15","nodeType":"YulIdentifier","src":"6960:6:15"},{"name":"tail_1","nativeSrc":"6968:6:15","nodeType":"YulIdentifier","src":"6968:6:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6914:37:15","nodeType":"YulIdentifier","src":"6914:37:15"},"nativeSrc":"6914:61:15","nodeType":"YulFunctionCall","src":"6914:61:15"},"variableNames":[{"name":"tail","nativeSrc":"6906:4:15","nodeType":"YulIdentifier","src":"6906:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6342:639:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6556:9:15","nodeType":"YulTypedName","src":"6556:9:15","type":""},{"name":"value4","nativeSrc":"6567:6:15","nodeType":"YulTypedName","src":"6567:6:15","type":""},{"name":"value3","nativeSrc":"6575:6:15","nodeType":"YulTypedName","src":"6575:6:15","type":""},{"name":"value2","nativeSrc":"6583:6:15","nodeType":"YulTypedName","src":"6583:6:15","type":""},{"name":"value1","nativeSrc":"6591:6:15","nodeType":"YulTypedName","src":"6591:6:15","type":""},{"name":"value0","nativeSrc":"6599:6:15","nodeType":"YulTypedName","src":"6599:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6610:4:15","nodeType":"YulTypedName","src":"6610:4:15","type":""}],"src":"6342:639:15"},{"body":{"nativeSrc":"7018:152:15","nodeType":"YulBlock","src":"7018:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7035:1:15","nodeType":"YulLiteral","src":"7035:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"7038:77:15","nodeType":"YulLiteral","src":"7038:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7028:6:15","nodeType":"YulIdentifier","src":"7028:6:15"},"nativeSrc":"7028:88:15","nodeType":"YulFunctionCall","src":"7028:88:15"},"nativeSrc":"7028:88:15","nodeType":"YulExpressionStatement","src":"7028:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7132:1:15","nodeType":"YulLiteral","src":"7132:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"7135:4:15","nodeType":"YulLiteral","src":"7135:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7125:6:15","nodeType":"YulIdentifier","src":"7125:6:15"},"nativeSrc":"7125:15:15","nodeType":"YulFunctionCall","src":"7125:15:15"},"nativeSrc":"7125:15:15","nodeType":"YulExpressionStatement","src":"7125:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7156:1:15","nodeType":"YulLiteral","src":"7156:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"7159:4:15","nodeType":"YulLiteral","src":"7159:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7149:6:15","nodeType":"YulIdentifier","src":"7149:6:15"},"nativeSrc":"7149:15:15","nodeType":"YulFunctionCall","src":"7149:15:15"},"nativeSrc":"7149:15:15","nodeType":"YulExpressionStatement","src":"7149:15:15"}]},"name":"panic_error_0x32","nativeSrc":"6986:184:15","nodeType":"YulFunctionDefinition","src":"6986:184:15"},{"body":{"nativeSrc":"7332:211:15","nodeType":"YulBlock","src":"7332:211:15","statements":[{"nativeSrc":"7342:26:15","nodeType":"YulAssignment","src":"7342:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"7354:9:15","nodeType":"YulIdentifier","src":"7354:9:15"},{"kind":"number","nativeSrc":"7365:2:15","nodeType":"YulLiteral","src":"7365:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7350:3:15","nodeType":"YulIdentifier","src":"7350:3:15"},"nativeSrc":"7350:18:15","nodeType":"YulFunctionCall","src":"7350:18:15"},"variableNames":[{"name":"tail","nativeSrc":"7342:4:15","nodeType":"YulIdentifier","src":"7342:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7384:9:15","nodeType":"YulIdentifier","src":"7384:9:15"},{"arguments":[{"name":"value0","nativeSrc":"7399:6:15","nodeType":"YulIdentifier","src":"7399:6:15"},{"kind":"number","nativeSrc":"7407:42:15","nodeType":"YulLiteral","src":"7407:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7395:3:15","nodeType":"YulIdentifier","src":"7395:3:15"},"nativeSrc":"7395:55:15","nodeType":"YulFunctionCall","src":"7395:55:15"}],"functionName":{"name":"mstore","nativeSrc":"7377:6:15","nodeType":"YulIdentifier","src":"7377:6:15"},"nativeSrc":"7377:74:15","nodeType":"YulFunctionCall","src":"7377:74:15"},"nativeSrc":"7377:74:15","nodeType":"YulExpressionStatement","src":"7377:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7471:9:15","nodeType":"YulIdentifier","src":"7471:9:15"},{"kind":"number","nativeSrc":"7482:2:15","nodeType":"YulLiteral","src":"7482:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7467:3:15","nodeType":"YulIdentifier","src":"7467:3:15"},"nativeSrc":"7467:18:15","nodeType":"YulFunctionCall","src":"7467:18:15"},{"name":"value1","nativeSrc":"7487:6:15","nodeType":"YulIdentifier","src":"7487:6:15"}],"functionName":{"name":"mstore","nativeSrc":"7460:6:15","nodeType":"YulIdentifier","src":"7460:6:15"},"nativeSrc":"7460:34:15","nodeType":"YulFunctionCall","src":"7460:34:15"},"nativeSrc":"7460:34:15","nodeType":"YulExpressionStatement","src":"7460:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7514:9:15","nodeType":"YulIdentifier","src":"7514:9:15"},{"kind":"number","nativeSrc":"7525:2:15","nodeType":"YulLiteral","src":"7525:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7510:3:15","nodeType":"YulIdentifier","src":"7510:3:15"},"nativeSrc":"7510:18:15","nodeType":"YulFunctionCall","src":"7510:18:15"},{"name":"value2","nativeSrc":"7530:6:15","nodeType":"YulIdentifier","src":"7530:6:15"}],"functionName":{"name":"mstore","nativeSrc":"7503:6:15","nodeType":"YulIdentifier","src":"7503:6:15"},"nativeSrc":"7503:34:15","nodeType":"YulFunctionCall","src":"7503:34:15"},"nativeSrc":"7503:34:15","nodeType":"YulExpressionStatement","src":"7503:34:15"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7175:368:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7285:9:15","nodeType":"YulTypedName","src":"7285:9:15","type":""},{"name":"value2","nativeSrc":"7296:6:15","nodeType":"YulTypedName","src":"7296:6:15","type":""},{"name":"value1","nativeSrc":"7304:6:15","nodeType":"YulTypedName","src":"7304:6:15","type":""},{"name":"value0","nativeSrc":"7312:6:15","nodeType":"YulTypedName","src":"7312:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7323:4:15","nodeType":"YulTypedName","src":"7323:4:15","type":""}],"src":"7175:368:15"},{"body":{"nativeSrc":"7600:116:15","nodeType":"YulBlock","src":"7600:116:15","statements":[{"nativeSrc":"7610:20:15","nodeType":"YulAssignment","src":"7610:20:15","value":{"arguments":[{"name":"x","nativeSrc":"7625:1:15","nodeType":"YulIdentifier","src":"7625:1:15"},{"name":"y","nativeSrc":"7628:1:15","nodeType":"YulIdentifier","src":"7628:1:15"}],"functionName":{"name":"mul","nativeSrc":"7621:3:15","nodeType":"YulIdentifier","src":"7621:3:15"},"nativeSrc":"7621:9:15","nodeType":"YulFunctionCall","src":"7621:9:15"},"variableNames":[{"name":"product","nativeSrc":"7610:7:15","nodeType":"YulIdentifier","src":"7610:7:15"}]},{"body":{"nativeSrc":"7688:22:15","nodeType":"YulBlock","src":"7688:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7690:16:15","nodeType":"YulIdentifier","src":"7690:16:15"},"nativeSrc":"7690:18:15","nodeType":"YulFunctionCall","src":"7690:18:15"},"nativeSrc":"7690:18:15","nodeType":"YulExpressionStatement","src":"7690:18:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"7659:1:15","nodeType":"YulIdentifier","src":"7659:1:15"}],"functionName":{"name":"iszero","nativeSrc":"7652:6:15","nodeType":"YulIdentifier","src":"7652:6:15"},"nativeSrc":"7652:9:15","nodeType":"YulFunctionCall","src":"7652:9:15"},{"arguments":[{"name":"y","nativeSrc":"7666:1:15","nodeType":"YulIdentifier","src":"7666:1:15"},{"arguments":[{"name":"product","nativeSrc":"7673:7:15","nodeType":"YulIdentifier","src":"7673:7:15"},{"name":"x","nativeSrc":"7682:1:15","nodeType":"YulIdentifier","src":"7682:1:15"}],"functionName":{"name":"div","nativeSrc":"7669:3:15","nodeType":"YulIdentifier","src":"7669:3:15"},"nativeSrc":"7669:15:15","nodeType":"YulFunctionCall","src":"7669:15:15"}],"functionName":{"name":"eq","nativeSrc":"7663:2:15","nodeType":"YulIdentifier","src":"7663:2:15"},"nativeSrc":"7663:22:15","nodeType":"YulFunctionCall","src":"7663:22:15"}],"functionName":{"name":"or","nativeSrc":"7649:2:15","nodeType":"YulIdentifier","src":"7649:2:15"},"nativeSrc":"7649:37:15","nodeType":"YulFunctionCall","src":"7649:37:15"}],"functionName":{"name":"iszero","nativeSrc":"7642:6:15","nodeType":"YulIdentifier","src":"7642:6:15"},"nativeSrc":"7642:45:15","nodeType":"YulFunctionCall","src":"7642:45:15"},"nativeSrc":"7639:71:15","nodeType":"YulIf","src":"7639:71:15"}]},"name":"checked_mul_t_uint256","nativeSrc":"7548:168:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7579:1:15","nodeType":"YulTypedName","src":"7579:1:15","type":""},{"name":"y","nativeSrc":"7582:1:15","nodeType":"YulTypedName","src":"7582:1:15","type":""}],"returnVariables":[{"name":"product","nativeSrc":"7588:7:15","nodeType":"YulTypedName","src":"7588:7:15","type":""}],"src":"7548:168:15"},{"body":{"nativeSrc":"7769:77:15","nodeType":"YulBlock","src":"7769:77:15","statements":[{"nativeSrc":"7779:16:15","nodeType":"YulAssignment","src":"7779:16:15","value":{"arguments":[{"name":"x","nativeSrc":"7790:1:15","nodeType":"YulIdentifier","src":"7790:1:15"},{"name":"y","nativeSrc":"7793:1:15","nodeType":"YulIdentifier","src":"7793:1:15"}],"functionName":{"name":"add","nativeSrc":"7786:3:15","nodeType":"YulIdentifier","src":"7786:3:15"},"nativeSrc":"7786:9:15","nodeType":"YulFunctionCall","src":"7786:9:15"},"variableNames":[{"name":"sum","nativeSrc":"7779:3:15","nodeType":"YulIdentifier","src":"7779:3:15"}]},{"body":{"nativeSrc":"7818:22:15","nodeType":"YulBlock","src":"7818:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"7820:16:15","nodeType":"YulIdentifier","src":"7820:16:15"},"nativeSrc":"7820:18:15","nodeType":"YulFunctionCall","src":"7820:18:15"},"nativeSrc":"7820:18:15","nodeType":"YulExpressionStatement","src":"7820:18:15"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"7810:1:15","nodeType":"YulIdentifier","src":"7810:1:15"},{"name":"sum","nativeSrc":"7813:3:15","nodeType":"YulIdentifier","src":"7813:3:15"}],"functionName":{"name":"gt","nativeSrc":"7807:2:15","nodeType":"YulIdentifier","src":"7807:2:15"},"nativeSrc":"7807:10:15","nodeType":"YulFunctionCall","src":"7807:10:15"},"nativeSrc":"7804:36:15","nodeType":"YulIf","src":"7804:36:15"}]},"name":"checked_add_t_uint256","nativeSrc":"7721:125:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7752:1:15","nodeType":"YulTypedName","src":"7752:1:15","type":""},{"name":"y","nativeSrc":"7755:1:15","nodeType":"YulTypedName","src":"7755:1:15","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"7761:3:15","nodeType":"YulTypedName","src":"7761:3:15","type":""}],"src":"7721:125:15"},{"body":{"nativeSrc":"7980:168:15","nodeType":"YulBlock","src":"7980:168:15","statements":[{"nativeSrc":"7990:26:15","nodeType":"YulAssignment","src":"7990:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"8002:9:15","nodeType":"YulIdentifier","src":"8002:9:15"},{"kind":"number","nativeSrc":"8013:2:15","nodeType":"YulLiteral","src":"8013:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7998:3:15","nodeType":"YulIdentifier","src":"7998:3:15"},"nativeSrc":"7998:18:15","nodeType":"YulFunctionCall","src":"7998:18:15"},"variableNames":[{"name":"tail","nativeSrc":"7990:4:15","nodeType":"YulIdentifier","src":"7990:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8032:9:15","nodeType":"YulIdentifier","src":"8032:9:15"},{"arguments":[{"name":"value0","nativeSrc":"8047:6:15","nodeType":"YulIdentifier","src":"8047:6:15"},{"kind":"number","nativeSrc":"8055:42:15","nodeType":"YulLiteral","src":"8055:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8043:3:15","nodeType":"YulIdentifier","src":"8043:3:15"},"nativeSrc":"8043:55:15","nodeType":"YulFunctionCall","src":"8043:55:15"}],"functionName":{"name":"mstore","nativeSrc":"8025:6:15","nodeType":"YulIdentifier","src":"8025:6:15"},"nativeSrc":"8025:74:15","nodeType":"YulFunctionCall","src":"8025:74:15"},"nativeSrc":"8025:74:15","nodeType":"YulExpressionStatement","src":"8025:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8119:9:15","nodeType":"YulIdentifier","src":"8119:9:15"},{"kind":"number","nativeSrc":"8130:2:15","nodeType":"YulLiteral","src":"8130:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8115:3:15","nodeType":"YulIdentifier","src":"8115:3:15"},"nativeSrc":"8115:18:15","nodeType":"YulFunctionCall","src":"8115:18:15"},{"name":"value1","nativeSrc":"8135:6:15","nodeType":"YulIdentifier","src":"8135:6:15"}],"functionName":{"name":"mstore","nativeSrc":"8108:6:15","nodeType":"YulIdentifier","src":"8108:6:15"},"nativeSrc":"8108:34:15","nodeType":"YulFunctionCall","src":"8108:34:15"},"nativeSrc":"8108:34:15","nodeType":"YulExpressionStatement","src":"8108:34:15"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"7851:297:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7941:9:15","nodeType":"YulTypedName","src":"7941:9:15","type":""},{"name":"value1","nativeSrc":"7952:6:15","nodeType":"YulTypedName","src":"7952:6:15","type":""},{"name":"value0","nativeSrc":"7960:6:15","nodeType":"YulTypedName","src":"7960:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7971:4:15","nodeType":"YulTypedName","src":"7971:4:15","type":""}],"src":"7851:297:15"},{"body":{"nativeSrc":"8185:152:15","nodeType":"YulBlock","src":"8185:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8202:1:15","nodeType":"YulLiteral","src":"8202:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8205:77:15","nodeType":"YulLiteral","src":"8205:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8195:6:15","nodeType":"YulIdentifier","src":"8195:6:15"},"nativeSrc":"8195:88:15","nodeType":"YulFunctionCall","src":"8195:88:15"},"nativeSrc":"8195:88:15","nodeType":"YulExpressionStatement","src":"8195:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8299:1:15","nodeType":"YulLiteral","src":"8299:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"8302:4:15","nodeType":"YulLiteral","src":"8302:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8292:6:15","nodeType":"YulIdentifier","src":"8292:6:15"},"nativeSrc":"8292:15:15","nodeType":"YulFunctionCall","src":"8292:15:15"},"nativeSrc":"8292:15:15","nodeType":"YulExpressionStatement","src":"8292:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8323:1:15","nodeType":"YulLiteral","src":"8323:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8326:4:15","nodeType":"YulLiteral","src":"8326:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8316:6:15","nodeType":"YulIdentifier","src":"8316:6:15"},"nativeSrc":"8316:15:15","nodeType":"YulFunctionCall","src":"8316:15:15"},"nativeSrc":"8316:15:15","nodeType":"YulExpressionStatement","src":"8316:15:15"}]},"name":"panic_error_0x41","nativeSrc":"8153:184:15","nodeType":"YulFunctionDefinition","src":"8153:184:15"},{"body":{"nativeSrc":"8454:1132:15","nodeType":"YulBlock","src":"8454:1132:15","statements":[{"body":{"nativeSrc":"8500:16:15","nodeType":"YulBlock","src":"8500:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8509:1:15","nodeType":"YulLiteral","src":"8509:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8512:1:15","nodeType":"YulLiteral","src":"8512:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8502:6:15","nodeType":"YulIdentifier","src":"8502:6:15"},"nativeSrc":"8502:12:15","nodeType":"YulFunctionCall","src":"8502:12:15"},"nativeSrc":"8502:12:15","nodeType":"YulExpressionStatement","src":"8502:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8475:7:15","nodeType":"YulIdentifier","src":"8475:7:15"},{"name":"headStart","nativeSrc":"8484:9:15","nodeType":"YulIdentifier","src":"8484:9:15"}],"functionName":{"name":"sub","nativeSrc":"8471:3:15","nodeType":"YulIdentifier","src":"8471:3:15"},"nativeSrc":"8471:23:15","nodeType":"YulFunctionCall","src":"8471:23:15"},{"kind":"number","nativeSrc":"8496:2:15","nodeType":"YulLiteral","src":"8496:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8467:3:15","nodeType":"YulIdentifier","src":"8467:3:15"},"nativeSrc":"8467:32:15","nodeType":"YulFunctionCall","src":"8467:32:15"},"nativeSrc":"8464:52:15","nodeType":"YulIf","src":"8464:52:15"},{"nativeSrc":"8525:37:15","nodeType":"YulVariableDeclaration","src":"8525:37:15","value":{"arguments":[{"name":"headStart","nativeSrc":"8552:9:15","nodeType":"YulIdentifier","src":"8552:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"8539:12:15","nodeType":"YulIdentifier","src":"8539:12:15"},"nativeSrc":"8539:23:15","nodeType":"YulFunctionCall","src":"8539:23:15"},"variables":[{"name":"offset","nativeSrc":"8529:6:15","nodeType":"YulTypedName","src":"8529:6:15","type":""}]},{"nativeSrc":"8571:28:15","nodeType":"YulVariableDeclaration","src":"8571:28:15","value":{"kind":"number","nativeSrc":"8581:18:15","nodeType":"YulLiteral","src":"8581:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8575:2:15","nodeType":"YulTypedName","src":"8575:2:15","type":""}]},{"body":{"nativeSrc":"8626:16:15","nodeType":"YulBlock","src":"8626:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8635:1:15","nodeType":"YulLiteral","src":"8635:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8638:1:15","nodeType":"YulLiteral","src":"8638:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8628:6:15","nodeType":"YulIdentifier","src":"8628:6:15"},"nativeSrc":"8628:12:15","nodeType":"YulFunctionCall","src":"8628:12:15"},"nativeSrc":"8628:12:15","nodeType":"YulExpressionStatement","src":"8628:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8614:6:15","nodeType":"YulIdentifier","src":"8614:6:15"},{"name":"_1","nativeSrc":"8622:2:15","nodeType":"YulIdentifier","src":"8622:2:15"}],"functionName":{"name":"gt","nativeSrc":"8611:2:15","nodeType":"YulIdentifier","src":"8611:2:15"},"nativeSrc":"8611:14:15","nodeType":"YulFunctionCall","src":"8611:14:15"},"nativeSrc":"8608:34:15","nodeType":"YulIf","src":"8608:34:15"},{"nativeSrc":"8651:32:15","nodeType":"YulVariableDeclaration","src":"8651:32:15","value":{"arguments":[{"name":"headStart","nativeSrc":"8665:9:15","nodeType":"YulIdentifier","src":"8665:9:15"},{"name":"offset","nativeSrc":"8676:6:15","nodeType":"YulIdentifier","src":"8676:6:15"}],"functionName":{"name":"add","nativeSrc":"8661:3:15","nodeType":"YulIdentifier","src":"8661:3:15"},"nativeSrc":"8661:22:15","nodeType":"YulFunctionCall","src":"8661:22:15"},"variables":[{"name":"_2","nativeSrc":"8655:2:15","nodeType":"YulTypedName","src":"8655:2:15","type":""}]},{"body":{"nativeSrc":"8731:16:15","nodeType":"YulBlock","src":"8731:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8740:1:15","nodeType":"YulLiteral","src":"8740:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8743:1:15","nodeType":"YulLiteral","src":"8743:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8733:6:15","nodeType":"YulIdentifier","src":"8733:6:15"},"nativeSrc":"8733:12:15","nodeType":"YulFunctionCall","src":"8733:12:15"},"nativeSrc":"8733:12:15","nodeType":"YulExpressionStatement","src":"8733:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"8710:2:15","nodeType":"YulIdentifier","src":"8710:2:15"},{"kind":"number","nativeSrc":"8714:4:15","nodeType":"YulLiteral","src":"8714:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"8706:3:15","nodeType":"YulIdentifier","src":"8706:3:15"},"nativeSrc":"8706:13:15","nodeType":"YulFunctionCall","src":"8706:13:15"},{"name":"dataEnd","nativeSrc":"8721:7:15","nodeType":"YulIdentifier","src":"8721:7:15"}],"functionName":{"name":"slt","nativeSrc":"8702:3:15","nodeType":"YulIdentifier","src":"8702:3:15"},"nativeSrc":"8702:27:15","nodeType":"YulFunctionCall","src":"8702:27:15"}],"functionName":{"name":"iszero","nativeSrc":"8695:6:15","nodeType":"YulIdentifier","src":"8695:6:15"},"nativeSrc":"8695:35:15","nodeType":"YulFunctionCall","src":"8695:35:15"},"nativeSrc":"8692:55:15","nodeType":"YulIf","src":"8692:55:15"},{"nativeSrc":"8756:26:15","nodeType":"YulVariableDeclaration","src":"8756:26:15","value":{"arguments":[{"name":"_2","nativeSrc":"8779:2:15","nodeType":"YulIdentifier","src":"8779:2:15"}],"functionName":{"name":"calldataload","nativeSrc":"8766:12:15","nodeType":"YulIdentifier","src":"8766:12:15"},"nativeSrc":"8766:16:15","nodeType":"YulFunctionCall","src":"8766:16:15"},"variables":[{"name":"_3","nativeSrc":"8760:2:15","nodeType":"YulTypedName","src":"8760:2:15","type":""}]},{"nativeSrc":"8791:14:15","nodeType":"YulVariableDeclaration","src":"8791:14:15","value":{"kind":"number","nativeSrc":"8801:4:15","nodeType":"YulLiteral","src":"8801:4:15","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"8795:2:15","nodeType":"YulTypedName","src":"8795:2:15","type":""}]},{"body":{"nativeSrc":"8828:22:15","nodeType":"YulBlock","src":"8828:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"8830:16:15","nodeType":"YulIdentifier","src":"8830:16:15"},"nativeSrc":"8830:18:15","nodeType":"YulFunctionCall","src":"8830:18:15"},"nativeSrc":"8830:18:15","nodeType":"YulExpressionStatement","src":"8830:18:15"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"8820:2:15","nodeType":"YulIdentifier","src":"8820:2:15"},{"name":"_1","nativeSrc":"8824:2:15","nodeType":"YulIdentifier","src":"8824:2:15"}],"functionName":{"name":"gt","nativeSrc":"8817:2:15","nodeType":"YulIdentifier","src":"8817:2:15"},"nativeSrc":"8817:10:15","nodeType":"YulFunctionCall","src":"8817:10:15"},"nativeSrc":"8814:36:15","nodeType":"YulIf","src":"8814:36:15"},{"nativeSrc":"8859:20:15","nodeType":"YulVariableDeclaration","src":"8859:20:15","value":{"arguments":[{"kind":"number","nativeSrc":"8873:1:15","nodeType":"YulLiteral","src":"8873:1:15","type":"","value":"5"},{"name":"_3","nativeSrc":"8876:2:15","nodeType":"YulIdentifier","src":"8876:2:15"}],"functionName":{"name":"shl","nativeSrc":"8869:3:15","nodeType":"YulIdentifier","src":"8869:3:15"},"nativeSrc":"8869:10:15","nodeType":"YulFunctionCall","src":"8869:10:15"},"variables":[{"name":"_5","nativeSrc":"8863:2:15","nodeType":"YulTypedName","src":"8863:2:15","type":""}]},{"nativeSrc":"8888:23:15","nodeType":"YulVariableDeclaration","src":"8888:23:15","value":{"arguments":[{"kind":"number","nativeSrc":"8908:2:15","nodeType":"YulLiteral","src":"8908:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"8902:5:15","nodeType":"YulIdentifier","src":"8902:5:15"},"nativeSrc":"8902:9:15","nodeType":"YulFunctionCall","src":"8902:9:15"},"variables":[{"name":"memPtr","nativeSrc":"8892:6:15","nodeType":"YulTypedName","src":"8892:6:15","type":""}]},{"nativeSrc":"8920:115:15","nodeType":"YulVariableDeclaration","src":"8920:115:15","value":{"arguments":[{"name":"memPtr","nativeSrc":"8942:6:15","nodeType":"YulIdentifier","src":"8942:6:15"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"8958:2:15","nodeType":"YulIdentifier","src":"8958:2:15"},{"kind":"number","nativeSrc":"8962:2:15","nodeType":"YulLiteral","src":"8962:2:15","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"8954:3:15","nodeType":"YulIdentifier","src":"8954:3:15"},"nativeSrc":"8954:11:15","nodeType":"YulFunctionCall","src":"8954:11:15"},{"kind":"number","nativeSrc":"8967:66:15","nodeType":"YulLiteral","src":"8967:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"8950:3:15","nodeType":"YulIdentifier","src":"8950:3:15"},"nativeSrc":"8950:84:15","nodeType":"YulFunctionCall","src":"8950:84:15"}],"functionName":{"name":"add","nativeSrc":"8938:3:15","nodeType":"YulIdentifier","src":"8938:3:15"},"nativeSrc":"8938:97:15","nodeType":"YulFunctionCall","src":"8938:97:15"},"variables":[{"name":"newFreePtr","nativeSrc":"8924:10:15","nodeType":"YulTypedName","src":"8924:10:15","type":""}]},{"body":{"nativeSrc":"9094:22:15","nodeType":"YulBlock","src":"9094:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9096:16:15","nodeType":"YulIdentifier","src":"9096:16:15"},"nativeSrc":"9096:18:15","nodeType":"YulFunctionCall","src":"9096:18:15"},"nativeSrc":"9096:18:15","nodeType":"YulExpressionStatement","src":"9096:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9053:10:15","nodeType":"YulIdentifier","src":"9053:10:15"},{"name":"_1","nativeSrc":"9065:2:15","nodeType":"YulIdentifier","src":"9065:2:15"}],"functionName":{"name":"gt","nativeSrc":"9050:2:15","nodeType":"YulIdentifier","src":"9050:2:15"},"nativeSrc":"9050:18:15","nodeType":"YulFunctionCall","src":"9050:18:15"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9073:10:15","nodeType":"YulIdentifier","src":"9073:10:15"},{"name":"memPtr","nativeSrc":"9085:6:15","nodeType":"YulIdentifier","src":"9085:6:15"}],"functionName":{"name":"lt","nativeSrc":"9070:2:15","nodeType":"YulIdentifier","src":"9070:2:15"},"nativeSrc":"9070:22:15","nodeType":"YulFunctionCall","src":"9070:22:15"}],"functionName":{"name":"or","nativeSrc":"9047:2:15","nodeType":"YulIdentifier","src":"9047:2:15"},"nativeSrc":"9047:46:15","nodeType":"YulFunctionCall","src":"9047:46:15"},"nativeSrc":"9044:72:15","nodeType":"YulIf","src":"9044:72:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9132:2:15","nodeType":"YulLiteral","src":"9132:2:15","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9136:10:15","nodeType":"YulIdentifier","src":"9136:10:15"}],"functionName":{"name":"mstore","nativeSrc":"9125:6:15","nodeType":"YulIdentifier","src":"9125:6:15"},"nativeSrc":"9125:22:15","nodeType":"YulFunctionCall","src":"9125:22:15"},"nativeSrc":"9125:22:15","nodeType":"YulExpressionStatement","src":"9125:22:15"},{"nativeSrc":"9156:17:15","nodeType":"YulVariableDeclaration","src":"9156:17:15","value":{"name":"memPtr","nativeSrc":"9167:6:15","nodeType":"YulIdentifier","src":"9167:6:15"},"variables":[{"name":"dst","nativeSrc":"9160:3:15","nodeType":"YulTypedName","src":"9160:3:15","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9189:6:15","nodeType":"YulIdentifier","src":"9189:6:15"},{"name":"_3","nativeSrc":"9197:2:15","nodeType":"YulIdentifier","src":"9197:2:15"}],"functionName":{"name":"mstore","nativeSrc":"9182:6:15","nodeType":"YulIdentifier","src":"9182:6:15"},"nativeSrc":"9182:18:15","nodeType":"YulFunctionCall","src":"9182:18:15"},"nativeSrc":"9182:18:15","nodeType":"YulExpressionStatement","src":"9182:18:15"},{"nativeSrc":"9209:22:15","nodeType":"YulAssignment","src":"9209:22:15","value":{"arguments":[{"name":"memPtr","nativeSrc":"9220:6:15","nodeType":"YulIdentifier","src":"9220:6:15"},{"name":"_4","nativeSrc":"9228:2:15","nodeType":"YulIdentifier","src":"9228:2:15"}],"functionName":{"name":"add","nativeSrc":"9216:3:15","nodeType":"YulIdentifier","src":"9216:3:15"},"nativeSrc":"9216:15:15","nodeType":"YulFunctionCall","src":"9216:15:15"},"variableNames":[{"name":"dst","nativeSrc":"9209:3:15","nodeType":"YulIdentifier","src":"9209:3:15"}]},{"nativeSrc":"9240:34:15","nodeType":"YulVariableDeclaration","src":"9240:34:15","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9262:2:15","nodeType":"YulIdentifier","src":"9262:2:15"},{"name":"_5","nativeSrc":"9266:2:15","nodeType":"YulIdentifier","src":"9266:2:15"}],"functionName":{"name":"add","nativeSrc":"9258:3:15","nodeType":"YulIdentifier","src":"9258:3:15"},"nativeSrc":"9258:11:15","nodeType":"YulFunctionCall","src":"9258:11:15"},{"name":"_4","nativeSrc":"9271:2:15","nodeType":"YulIdentifier","src":"9271:2:15"}],"functionName":{"name":"add","nativeSrc":"9254:3:15","nodeType":"YulIdentifier","src":"9254:3:15"},"nativeSrc":"9254:20:15","nodeType":"YulFunctionCall","src":"9254:20:15"},"variables":[{"name":"srcEnd","nativeSrc":"9244:6:15","nodeType":"YulTypedName","src":"9244:6:15","type":""}]},{"body":{"nativeSrc":"9306:16:15","nodeType":"YulBlock","src":"9306:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9315:1:15","nodeType":"YulLiteral","src":"9315:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"9318:1:15","nodeType":"YulLiteral","src":"9318:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9308:6:15","nodeType":"YulIdentifier","src":"9308:6:15"},"nativeSrc":"9308:12:15","nodeType":"YulFunctionCall","src":"9308:12:15"},"nativeSrc":"9308:12:15","nodeType":"YulExpressionStatement","src":"9308:12:15"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9289:6:15","nodeType":"YulIdentifier","src":"9289:6:15"},{"name":"dataEnd","nativeSrc":"9297:7:15","nodeType":"YulIdentifier","src":"9297:7:15"}],"functionName":{"name":"gt","nativeSrc":"9286:2:15","nodeType":"YulIdentifier","src":"9286:2:15"},"nativeSrc":"9286:19:15","nodeType":"YulFunctionCall","src":"9286:19:15"},"nativeSrc":"9283:39:15","nodeType":"YulIf","src":"9283:39:15"},{"nativeSrc":"9331:22:15","nodeType":"YulVariableDeclaration","src":"9331:22:15","value":{"arguments":[{"name":"_2","nativeSrc":"9346:2:15","nodeType":"YulIdentifier","src":"9346:2:15"},{"name":"_4","nativeSrc":"9350:2:15","nodeType":"YulIdentifier","src":"9350:2:15"}],"functionName":{"name":"add","nativeSrc":"9342:3:15","nodeType":"YulIdentifier","src":"9342:3:15"},"nativeSrc":"9342:11:15","nodeType":"YulFunctionCall","src":"9342:11:15"},"variables":[{"name":"src","nativeSrc":"9335:3:15","nodeType":"YulTypedName","src":"9335:3:15","type":""}]},{"body":{"nativeSrc":"9418:86:15","nodeType":"YulBlock","src":"9418:86:15","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9439:3:15","nodeType":"YulIdentifier","src":"9439:3:15"},{"arguments":[{"name":"src","nativeSrc":"9457:3:15","nodeType":"YulIdentifier","src":"9457:3:15"}],"functionName":{"name":"calldataload","nativeSrc":"9444:12:15","nodeType":"YulIdentifier","src":"9444:12:15"},"nativeSrc":"9444:17:15","nodeType":"YulFunctionCall","src":"9444:17:15"}],"functionName":{"name":"mstore","nativeSrc":"9432:6:15","nodeType":"YulIdentifier","src":"9432:6:15"},"nativeSrc":"9432:30:15","nodeType":"YulFunctionCall","src":"9432:30:15"},"nativeSrc":"9432:30:15","nodeType":"YulExpressionStatement","src":"9432:30:15"},{"nativeSrc":"9475:19:15","nodeType":"YulAssignment","src":"9475:19:15","value":{"arguments":[{"name":"dst","nativeSrc":"9486:3:15","nodeType":"YulIdentifier","src":"9486:3:15"},{"name":"_4","nativeSrc":"9491:2:15","nodeType":"YulIdentifier","src":"9491:2:15"}],"functionName":{"name":"add","nativeSrc":"9482:3:15","nodeType":"YulIdentifier","src":"9482:3:15"},"nativeSrc":"9482:12:15","nodeType":"YulFunctionCall","src":"9482:12:15"},"variableNames":[{"name":"dst","nativeSrc":"9475:3:15","nodeType":"YulIdentifier","src":"9475:3:15"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9373:3:15","nodeType":"YulIdentifier","src":"9373:3:15"},{"name":"srcEnd","nativeSrc":"9378:6:15","nodeType":"YulIdentifier","src":"9378:6:15"}],"functionName":{"name":"lt","nativeSrc":"9370:2:15","nodeType":"YulIdentifier","src":"9370:2:15"},"nativeSrc":"9370:15:15","nodeType":"YulFunctionCall","src":"9370:15:15"},"nativeSrc":"9362:142:15","nodeType":"YulForLoop","post":{"nativeSrc":"9386:23:15","nodeType":"YulBlock","src":"9386:23:15","statements":[{"nativeSrc":"9388:19:15","nodeType":"YulAssignment","src":"9388:19:15","value":{"arguments":[{"name":"src","nativeSrc":"9399:3:15","nodeType":"YulIdentifier","src":"9399:3:15"},{"name":"_4","nativeSrc":"9404:2:15","nodeType":"YulIdentifier","src":"9404:2:15"}],"functionName":{"name":"add","nativeSrc":"9395:3:15","nodeType":"YulIdentifier","src":"9395:3:15"},"nativeSrc":"9395:12:15","nodeType":"YulFunctionCall","src":"9395:12:15"},"variableNames":[{"name":"src","nativeSrc":"9388:3:15","nodeType":"YulIdentifier","src":"9388:3:15"}]}]},"pre":{"nativeSrc":"9366:3:15","nodeType":"YulBlock","src":"9366:3:15","statements":[]},"src":"9362:142:15"},{"nativeSrc":"9513:16:15","nodeType":"YulAssignment","src":"9513:16:15","value":{"name":"memPtr","nativeSrc":"9523:6:15","nodeType":"YulIdentifier","src":"9523:6:15"},"variableNames":[{"name":"value0","nativeSrc":"9513:6:15","nodeType":"YulIdentifier","src":"9513:6:15"}]},{"nativeSrc":"9538:42:15","nodeType":"YulAssignment","src":"9538:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9565:9:15","nodeType":"YulIdentifier","src":"9565:9:15"},{"name":"_4","nativeSrc":"9576:2:15","nodeType":"YulIdentifier","src":"9576:2:15"}],"functionName":{"name":"add","nativeSrc":"9561:3:15","nodeType":"YulIdentifier","src":"9561:3:15"},"nativeSrc":"9561:18:15","nodeType":"YulFunctionCall","src":"9561:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"9548:12:15","nodeType":"YulIdentifier","src":"9548:12:15"},"nativeSrc":"9548:32:15","nodeType":"YulFunctionCall","src":"9548:32:15"},"variableNames":[{"name":"value1","nativeSrc":"9538:6:15","nodeType":"YulIdentifier","src":"9538:6:15"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8342:1244:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8412:9:15","nodeType":"YulTypedName","src":"8412:9:15","type":""},{"name":"dataEnd","nativeSrc":"8423:7:15","nodeType":"YulTypedName","src":"8423:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8435:6:15","nodeType":"YulTypedName","src":"8435:6:15","type":""},{"name":"value1","nativeSrc":"8443:6:15","nodeType":"YulTypedName","src":"8443:6:15","type":""}],"src":"8342:1244:15"},{"body":{"nativeSrc":"9738:182:15","nodeType":"YulBlock","src":"9738:182:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"9755:3:15","nodeType":"YulIdentifier","src":"9755:3:15"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9768:2:15","nodeType":"YulLiteral","src":"9768:2:15","type":"","value":"96"},{"name":"value0","nativeSrc":"9772:6:15","nodeType":"YulIdentifier","src":"9772:6:15"}],"functionName":{"name":"shl","nativeSrc":"9764:3:15","nodeType":"YulIdentifier","src":"9764:3:15"},"nativeSrc":"9764:15:15","nodeType":"YulFunctionCall","src":"9764:15:15"},{"kind":"number","nativeSrc":"9781:66:15","nodeType":"YulLiteral","src":"9781:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"9760:3:15","nodeType":"YulIdentifier","src":"9760:3:15"},"nativeSrc":"9760:88:15","nodeType":"YulFunctionCall","src":"9760:88:15"}],"functionName":{"name":"mstore","nativeSrc":"9748:6:15","nodeType":"YulIdentifier","src":"9748:6:15"},"nativeSrc":"9748:101:15","nodeType":"YulFunctionCall","src":"9748:101:15"},"nativeSrc":"9748:101:15","nodeType":"YulExpressionStatement","src":"9748:101:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9869:3:15","nodeType":"YulIdentifier","src":"9869:3:15"},{"kind":"number","nativeSrc":"9874:2:15","nodeType":"YulLiteral","src":"9874:2:15","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"9865:3:15","nodeType":"YulIdentifier","src":"9865:3:15"},"nativeSrc":"9865:12:15","nodeType":"YulFunctionCall","src":"9865:12:15"},{"name":"value1","nativeSrc":"9879:6:15","nodeType":"YulIdentifier","src":"9879:6:15"}],"functionName":{"name":"mstore","nativeSrc":"9858:6:15","nodeType":"YulIdentifier","src":"9858:6:15"},"nativeSrc":"9858:28:15","nodeType":"YulFunctionCall","src":"9858:28:15"},"nativeSrc":"9858:28:15","nodeType":"YulExpressionStatement","src":"9858:28:15"},{"nativeSrc":"9895:19:15","nodeType":"YulAssignment","src":"9895:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"9906:3:15","nodeType":"YulIdentifier","src":"9906:3:15"},{"kind":"number","nativeSrc":"9911:2:15","nodeType":"YulLiteral","src":"9911:2:15","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"9902:3:15","nodeType":"YulIdentifier","src":"9902:3:15"},"nativeSrc":"9902:12:15","nodeType":"YulFunctionCall","src":"9902:12:15"},"variableNames":[{"name":"end","nativeSrc":"9895:3:15","nodeType":"YulIdentifier","src":"9895:3:15"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"9591:329:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"9706:3:15","nodeType":"YulTypedName","src":"9706:3:15","type":""},{"name":"value1","nativeSrc":"9711:6:15","nodeType":"YulTypedName","src":"9711:6:15","type":""},{"name":"value0","nativeSrc":"9719:6:15","nodeType":"YulTypedName","src":"9719:6:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"9730:3:15","nodeType":"YulTypedName","src":"9730:3:15","type":""}],"src":"9591:329:15"},{"body":{"nativeSrc":"10054:119:15","nodeType":"YulBlock","src":"10054:119:15","statements":[{"nativeSrc":"10064:26:15","nodeType":"YulAssignment","src":"10064:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"10076:9:15","nodeType":"YulIdentifier","src":"10076:9:15"},{"kind":"number","nativeSrc":"10087:2:15","nodeType":"YulLiteral","src":"10087:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10072:3:15","nodeType":"YulIdentifier","src":"10072:3:15"},"nativeSrc":"10072:18:15","nodeType":"YulFunctionCall","src":"10072:18:15"},"variableNames":[{"name":"tail","nativeSrc":"10064:4:15","nodeType":"YulIdentifier","src":"10064:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10106:9:15","nodeType":"YulIdentifier","src":"10106:9:15"},{"name":"value0","nativeSrc":"10117:6:15","nodeType":"YulIdentifier","src":"10117:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10099:6:15","nodeType":"YulIdentifier","src":"10099:6:15"},"nativeSrc":"10099:25:15","nodeType":"YulFunctionCall","src":"10099:25:15"},"nativeSrc":"10099:25:15","nodeType":"YulExpressionStatement","src":"10099:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10144:9:15","nodeType":"YulIdentifier","src":"10144:9:15"},{"kind":"number","nativeSrc":"10155:2:15","nodeType":"YulLiteral","src":"10155:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10140:3:15","nodeType":"YulIdentifier","src":"10140:3:15"},"nativeSrc":"10140:18:15","nodeType":"YulFunctionCall","src":"10140:18:15"},{"name":"value1","nativeSrc":"10160:6:15","nodeType":"YulIdentifier","src":"10160:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10133:6:15","nodeType":"YulIdentifier","src":"10133:6:15"},"nativeSrc":"10133:34:15","nodeType":"YulFunctionCall","src":"10133:34:15"},"nativeSrc":"10133:34:15","nodeType":"YulExpressionStatement","src":"10133:34:15"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9925:248:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10015:9:15","nodeType":"YulTypedName","src":"10015:9:15","type":""},{"name":"value1","nativeSrc":"10026:6:15","nodeType":"YulTypedName","src":"10026:6:15","type":""},{"name":"value0","nativeSrc":"10034:6:15","nodeType":"YulTypedName","src":"10034:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10045:4:15","nodeType":"YulTypedName","src":"10045:4:15","type":""}],"src":"9925:248:15"},{"body":{"nativeSrc":"10511:402:15","nodeType":"YulBlock","src":"10511:402:15","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10528:9:15","nodeType":"YulIdentifier","src":"10528:9:15"},{"kind":"number","nativeSrc":"10539:3:15","nodeType":"YulLiteral","src":"10539:3:15","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10521:6:15","nodeType":"YulIdentifier","src":"10521:6:15"},"nativeSrc":"10521:22:15","nodeType":"YulFunctionCall","src":"10521:22:15"},"nativeSrc":"10521:22:15","nodeType":"YulExpressionStatement","src":"10521:22:15"},{"nativeSrc":"10552:88:15","nodeType":"YulVariableDeclaration","src":"10552:88:15","value":{"arguments":[{"name":"value0","nativeSrc":"10604:6:15","nodeType":"YulIdentifier","src":"10604:6:15"},{"name":"value1","nativeSrc":"10612:6:15","nodeType":"YulIdentifier","src":"10612:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"10624:9:15","nodeType":"YulIdentifier","src":"10624:9:15"},{"kind":"number","nativeSrc":"10635:3:15","nodeType":"YulLiteral","src":"10635:3:15","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"10620:3:15","nodeType":"YulIdentifier","src":"10620:3:15"},"nativeSrc":"10620:19:15","nodeType":"YulFunctionCall","src":"10620:19:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10566:37:15","nodeType":"YulIdentifier","src":"10566:37:15"},"nativeSrc":"10566:74:15","nodeType":"YulFunctionCall","src":"10566:74:15"},"variables":[{"name":"tail_1","nativeSrc":"10556:6:15","nodeType":"YulTypedName","src":"10556:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10660:9:15","nodeType":"YulIdentifier","src":"10660:9:15"},{"kind":"number","nativeSrc":"10671:2:15","nodeType":"YulLiteral","src":"10671:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10656:3:15","nodeType":"YulIdentifier","src":"10656:3:15"},"nativeSrc":"10656:18:15","nodeType":"YulFunctionCall","src":"10656:18:15"},{"arguments":[{"name":"tail_1","nativeSrc":"10680:6:15","nodeType":"YulIdentifier","src":"10680:6:15"},{"name":"headStart","nativeSrc":"10688:9:15","nodeType":"YulIdentifier","src":"10688:9:15"}],"functionName":{"name":"sub","nativeSrc":"10676:3:15","nodeType":"YulIdentifier","src":"10676:3:15"},"nativeSrc":"10676:22:15","nodeType":"YulFunctionCall","src":"10676:22:15"}],"functionName":{"name":"mstore","nativeSrc":"10649:6:15","nodeType":"YulIdentifier","src":"10649:6:15"},"nativeSrc":"10649:50:15","nodeType":"YulFunctionCall","src":"10649:50:15"},"nativeSrc":"10649:50:15","nodeType":"YulExpressionStatement","src":"10649:50:15"},{"nativeSrc":"10708:69:15","nodeType":"YulAssignment","src":"10708:69:15","value":{"arguments":[{"name":"value2","nativeSrc":"10754:6:15","nodeType":"YulIdentifier","src":"10754:6:15"},{"name":"value3","nativeSrc":"10762:6:15","nodeType":"YulIdentifier","src":"10762:6:15"},{"name":"tail_1","nativeSrc":"10770:6:15","nodeType":"YulIdentifier","src":"10770:6:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"10716:37:15","nodeType":"YulIdentifier","src":"10716:37:15"},"nativeSrc":"10716:61:15","nodeType":"YulFunctionCall","src":"10716:61:15"},"variableNames":[{"name":"tail","nativeSrc":"10708:4:15","nodeType":"YulIdentifier","src":"10708:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10797:9:15","nodeType":"YulIdentifier","src":"10797:9:15"},{"kind":"number","nativeSrc":"10808:2:15","nodeType":"YulLiteral","src":"10808:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10793:3:15","nodeType":"YulIdentifier","src":"10793:3:15"},"nativeSrc":"10793:18:15","nodeType":"YulFunctionCall","src":"10793:18:15"},{"name":"value4","nativeSrc":"10813:6:15","nodeType":"YulIdentifier","src":"10813:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10786:6:15","nodeType":"YulIdentifier","src":"10786:6:15"},"nativeSrc":"10786:34:15","nodeType":"YulFunctionCall","src":"10786:34:15"},"nativeSrc":"10786:34:15","nodeType":"YulExpressionStatement","src":"10786:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10840:9:15","nodeType":"YulIdentifier","src":"10840:9:15"},{"kind":"number","nativeSrc":"10851:2:15","nodeType":"YulLiteral","src":"10851:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10836:3:15","nodeType":"YulIdentifier","src":"10836:3:15"},"nativeSrc":"10836:18:15","nodeType":"YulFunctionCall","src":"10836:18:15"},{"name":"value5","nativeSrc":"10856:6:15","nodeType":"YulIdentifier","src":"10856:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10829:6:15","nodeType":"YulIdentifier","src":"10829:6:15"},"nativeSrc":"10829:34:15","nodeType":"YulFunctionCall","src":"10829:34:15"},"nativeSrc":"10829:34:15","nodeType":"YulExpressionStatement","src":"10829:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10883:9:15","nodeType":"YulIdentifier","src":"10883:9:15"},{"kind":"number","nativeSrc":"10894:3:15","nodeType":"YulLiteral","src":"10894:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"10879:3:15","nodeType":"YulIdentifier","src":"10879:3:15"},"nativeSrc":"10879:19:15","nodeType":"YulFunctionCall","src":"10879:19:15"},{"name":"value6","nativeSrc":"10900:6:15","nodeType":"YulIdentifier","src":"10900:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10872:6:15","nodeType":"YulIdentifier","src":"10872:6:15"},"nativeSrc":"10872:35:15","nodeType":"YulFunctionCall","src":"10872:35:15"},"nativeSrc":"10872:35:15","nodeType":"YulExpressionStatement","src":"10872:35:15"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10178:735:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10432:9:15","nodeType":"YulTypedName","src":"10432:9:15","type":""},{"name":"value6","nativeSrc":"10443:6:15","nodeType":"YulTypedName","src":"10443:6:15","type":""},{"name":"value5","nativeSrc":"10451:6:15","nodeType":"YulTypedName","src":"10451:6:15","type":""},{"name":"value4","nativeSrc":"10459:6:15","nodeType":"YulTypedName","src":"10459:6:15","type":""},{"name":"value3","nativeSrc":"10467:6:15","nodeType":"YulTypedName","src":"10467:6:15","type":""},{"name":"value2","nativeSrc":"10475:6:15","nodeType":"YulTypedName","src":"10475:6:15","type":""},{"name":"value1","nativeSrc":"10483:6:15","nodeType":"YulTypedName","src":"10483:6:15","type":""},{"name":"value0","nativeSrc":"10491:6:15","nodeType":"YulTypedName","src":"10491:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10502:4:15","nodeType":"YulTypedName","src":"10502:4:15","type":""}],"src":"10178:735:15"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"206":[{"length":32,"start":632},{"length":32,"start":829}],"1033":[{"length":32,"start":559},{"length":32,"start":1255},{"length":32,"start":2156}],"1037":[{"length":32,"start":1011},{"length":32,"start":3160}],"1040":[{"length":32,"start":689},{"length":32,"start":1177}],"1043":[{"length":32,"start":1050},{"length":32,"start":1141}],"1046":[{"length":32,"start":480},{"length":32,"start":1363},{"length":32,"start":3404}],"1049":[{"length":32,"start":771},{"length":32,"start":2502},{"length":32,"start":3915}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101985760003560e01c806351e75e8b116100e3578063bc197c811161008c578063cd421fbf11610066578063cd421fbf14610415578063f23a6e611461043c578063f95d10161461044f57600080fd5b8063bc197c81146103a2578063c131754e146103e6578063cd18a34f146103ee57600080fd5b8063aa918fd5116100bd578063aa918fd5146102a4578063ab504e731461037a578063bab2f5521461039a57600080fd5b806351e75e8b146102fe57806355f5b0a814610325578063572b6c051461032d57600080fd5b806328a979cf11610145578063424ab4f71161011f578063424ab4f7146102a4578063491bde66146102ac5780634dac1c2b146102d357600080fd5b806328a979cf1461022a5780632b4c9f16146102765780633838a2011461029c57600080fd5b80630455645a116101765780630455645a1461020257806312828b7f1461020a5780631de0e40b146101c557600080fd5b806301ffc9a71461019d5780630277640e146101c5578063043063bc146101db575b600080fd5b6101b06101ab3660046111f3565b610457565b60405190151581526020015b60405180910390f35b6101cd600181565b6040519081526020016101bc565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600581565b6101cd61021836600461125e565b60026020526000908152604090205481565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101bc565b7f0000000000000000000000000000000000000000000000000000000000000000610251565b6101cd601981565b6101cd600381565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd6102e1366004611279565b600160209081526000928352604080842090915290825290205481565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6101cd600281565b6101b061033b36600461125e565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101cd6103883660046112a5565b60006020819052908152604090205481565b6101cd610471565b6103b56103b036600461134c565b6104cd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101bc565b6101cd601081565b6102517f000000000000000000000000000000000000000000000000000000000000000081565b6101cd7f000000000000000000000000000000000000000000000000000000000000000081565b6103b561044a366004611407565b610c3e565b6101cd600981565b600061046b82610465611060565b9061108e565b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006104be7f0000000000000000000000000000000000000000000000000000000000000000426114ae565b6104c891906114c1565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610545576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b600061054f610471565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105ae576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906105f29030908c908c908c908c90600401611547565b600060405180830381600087803b15801561060c57600080fd5b505af1158015610620573d6000803e3d6000fd5b505050506000805b888110156108fe5787878281811061064257610642611596565b905060200201356000036106dc57338a8a8381811061066357610663611596565b9050602002013589898481811061067c5761067c611596565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909516600486015260248501939093525060209091020135604482015260640161053c565b8989828181106106ee576106ee611596565b9050602002013560010361073257600188888381811061071057610710611596565b9050602002013561072191906115c5565b61072b90836115dc565b91506108f6565b89898281811061074457610744611596565b9050602002013560020361076657600388888381811061071057610710611596565b89898281811061077857610778611596565b9050602002013560030361079a57600388888381811061071057610710611596565b8989828181106107ac576107ac611596565b905060200201356004036107ce57600588888381811061071057610710611596565b8989828181106107e0576107e0611596565b9050602002013560050361080257600988888381811061071057610710611596565b89898281811061081457610814611596565b9050602002013560060361083657601988888381811061071057610710611596565b89898281811061084857610848611596565b9050602002013560070361086a57601088888381811061071057610710611596565b7f00000000000000000000000000000000000000000000000000000000000000008a8a8381811061089d5761089d611596565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9094166004850152602002919091013560248301525060440161053c565b600101610628565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610ad05760008061093c888a018a61161e565b91509150608083901c600003610ab0576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152919052805160209091012090506109eb837f000000000000000000000000000000000000000000000000000000000000000083611168565b610a40576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861660048201526024810183905260440161053c565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610abd82876115c5565b610ac791906114c1565b94505050610af7565b608081901c8015610af557612710610ae882866115c5565b610af291906114c1565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b1d57610b1a81856115c5565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b589086906115dc565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610ba89084906115dc565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c029796959493929190611700565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610cb1576040517f7330680300000000000000000000000000000000000000000000000000000000815233600482015260240161053c565b60018514610cf4576040517f1912ea510000000000000000000000000000000000000000000000000000000081523360048201526024810186905260440161053c565b83600114610d3e576040517fe1f366e9000000000000000000000000000000000000000000000000000000008152336004820152602481018690526044810185905260640161053c565b6000610d48610471565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610da7576040517f764e560f0000000000000000000000000000000000000000000000000000000081526004810182905260240161053c565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e2f576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8916600482015260240161053c565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b5050506002821790508415610fcf57608082901c600003610fcf57600080610ecc8789018961161e565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610f70837f000000000000000000000000000000000000000000000000000000000000000083611168565b610fc5576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d1660048201526024810183905260440161053c565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061046b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6114ae565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016110de5750600061046b565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161112f5750600161046b565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b600082611175858461117e565b14949350505050565b600081815b84518110156111b9576111af828683815181106111a2576111a2611596565b60200260200101516111c1565b9150600101611183565b509392505050565b60008183106111dd5760008281526020849052604090206111ec565b60008381526020839052604090205b9392505050565b60006020828403121561120557600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146111ec57600080fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461125957600080fd5b919050565b60006020828403121561127057600080fd5b6111ec82611235565b6000806040838503121561128c57600080fd5b8235915061129c60208401611235565b90509250929050565b6000602082840312156112b757600080fd5b5035919050565b60008083601f8401126112d057600080fd5b50813567ffffffffffffffff8111156112e857600080fd5b6020830191508360208260051b850101111561130357600080fd5b9250929050565b60008083601f84011261131c57600080fd5b50813567ffffffffffffffff81111561133457600080fd5b60208301915083602082850101111561130357600080fd5b60008060008060008060008060a0898b03121561136857600080fd5b61137189611235565b975061137f60208a01611235565b9650604089013567ffffffffffffffff8082111561139c57600080fd5b6113a88c838d016112be565b909850965060608b01359150808211156113c157600080fd5b6113cd8c838d016112be565b909650945060808b01359150808211156113e657600080fd5b506113f38b828c0161130a565b999c989b5096995094979396929594505050565b60008060008060008060a0878903121561142057600080fd5b61142987611235565b955061143760208801611235565b94506040870135935060608701359250608087013567ffffffffffffffff81111561146157600080fd5b61146d89828a0161130a565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561046b5761046b61147f565b6000826114f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561152e57600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff861681526060602082015260006115776060830186886114fc565b828103604084015261158a8185876114fc565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761046b5761046b61147f565b8082018082111561046b5761046b61147f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561163157600080fd5b823567ffffffffffffffff8082111561164957600080fd5b818501915085601f83011261165d57600080fd5b8135602082821115611671576116716115ef565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811086821117156116b4576116b46115ef565b6040529283528183019350848101820192898411156116d257600080fd5b948201945b838610156116f0578535855294820194938201936116d7565b9997909101359750505050505050565b60a08152600061171460a08301898b6114fc565b828103602084015261172781888a6114fc565b60408401969096525050606081019290925260809091015294935050505056fea2646970667358221220de8fc296f7cd15405f7f60af5181fba063d6ff5cf98ccece09612aeec702624d64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x198 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xE3 JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x415 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x43C JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3A2 JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x3E6 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x3EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x37A JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x39A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x32D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x145 JUMPI DUP1 PUSH4 0x424AB4F7 GT PUSH2 0x11F JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2AC JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x22A JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x276 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x176 JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x19D JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1DB JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B0 PUSH2 0x1AB CALLDATASIZE PUSH1 0x4 PUSH2 0x11F3 JUMP JUMPDEST PUSH2 0x457 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1CD PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x218 CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH32 0x0 PUSH2 0x251 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x2E1 CALLDATASIZE PUSH1 0x4 PUSH2 0x1279 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1B0 PUSH2 0x33B CALLDATASIZE PUSH1 0x4 PUSH2 0x125E JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x388 CALLDATASIZE PUSH1 0x4 PUSH2 0x12A5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH2 0x471 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x3B0 CALLDATASIZE PUSH1 0x4 PUSH2 0x134C JUMP JUMPDEST PUSH2 0x4CD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1BC JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x251 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1CD PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x3B5 PUSH2 0x44A CALLDATASIZE PUSH1 0x4 PUSH2 0x1407 JUMP JUMPDEST PUSH2 0xC3E JUMP JUMPDEST PUSH2 0x1CD PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x46B DUP3 PUSH2 0x465 PUSH2 0x1060 JUMP JUMPDEST SWAP1 PUSH2 0x108E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x4BE PUSH32 0x0 TIMESTAMP PUSH2 0x14AE JUMP JUMPDEST PUSH2 0x4C8 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x545 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x54F PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5AE JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x5F2 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x1547 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x60C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x620 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x8FE JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x642 JUMPI PUSH2 0x642 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x6DC JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x663 JUMPI PUSH2 0x663 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x67C JUMPI PUSH2 0x67C PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x6EE JUMPI PUSH2 0x6EE PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x732 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x721 SWAP2 SWAP1 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0x72B SWAP1 DUP4 PUSH2 0x15DC JUMP JUMPDEST SWAP2 POP PUSH2 0x8F6 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x744 JUMPI PUSH2 0x744 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x766 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x778 JUMPI PUSH2 0x778 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x79A JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7AC JUMPI PUSH2 0x7AC PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x7CE JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7E0 JUMPI PUSH2 0x7E0 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x802 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x814 JUMPI PUSH2 0x814 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x836 JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x848 JUMPI PUSH2 0x848 PUSH2 0x1596 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x86A JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x710 JUMPI PUSH2 0x710 PUSH2 0x1596 JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x89D JUMPI PUSH2 0x89D PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x628 JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xAD0 JUMPI PUSH1 0x0 DUP1 PUSH2 0x93C DUP9 DUP11 ADD DUP11 PUSH2 0x161E JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAB0 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0x9EB DUP4 PUSH32 0x0 DUP4 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0xA40 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xABD DUP3 DUP8 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0xAC7 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xAF7 JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xAF5 JUMPI PUSH2 0x2710 PUSH2 0xAE8 DUP3 DUP7 PUSH2 0x15C5 JUMP JUMPDEST PUSH2 0xAF2 SWAP2 SWAP1 PUSH2 0x14C1 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB1D JUMPI PUSH2 0xB1A DUP2 DUP6 PUSH2 0x15C5 JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB58 SWAP1 DUP7 SWAP1 PUSH2 0x15DC JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBA8 SWAP1 DUP5 SWAP1 PUSH2 0x15DC JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC02 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1700 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xCB1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xCF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD3E JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD48 PUSH2 0x471 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDA7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE2F JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x53C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEA2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0xFCF JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 PUSH2 0xECC DUP8 DUP10 ADD DUP10 PUSH2 0x161E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xF70 DUP4 PUSH32 0x0 DUP4 PUSH2 0x1168 JUMP JUMPDEST PUSH2 0xFC5 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x53C JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x46B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x14AE JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x10DE JUMPI POP PUSH1 0x0 PUSH2 0x46B JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x112F JUMPI POP PUSH1 0x1 PUSH2 0x46B JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1175 DUP6 DUP5 PUSH2 0x117E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x11B9 JUMPI PUSH2 0x11AF DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x11A2 JUMPI PUSH2 0x11A2 PUSH2 0x1596 JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x11C1 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1183 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x11DD JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x11EC JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1205 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x11EC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1270 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x11EC DUP3 PUSH2 0x1235 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x128C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x129C PUSH1 0x20 DUP5 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x12B7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x12D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1303 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x1368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1371 DUP10 PUSH2 0x1235 JUMP JUMPDEST SWAP8 POP PUSH2 0x137F PUSH1 0x20 DUP11 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x139C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13A8 DUP13 DUP4 DUP14 ADD PUSH2 0x12BE JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x13CD DUP13 DUP4 DUP14 ADD PUSH2 0x12BE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x13E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x13F3 DUP12 DUP3 DUP13 ADD PUSH2 0x130A JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x1420 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1429 DUP8 PUSH2 0x1235 JUMP JUMPDEST SWAP6 POP PUSH2 0x1437 PUSH1 0x20 DUP9 ADD PUSH2 0x1235 JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x146D DUP10 DUP3 DUP11 ADD PUSH2 0x130A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x14F7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x152E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1577 PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x14FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x158A DUP2 DUP6 DUP8 PUSH2 0x14FC JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x46B JUMPI PUSH2 0x46B PUSH2 0x147F JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1649 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x165D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1671 JUMPI PUSH2 0x1671 PUSH2 0x15EF JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x16B4 JUMPI PUSH2 0x16B4 PUSH2 0x15EF JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x16D2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x16F0 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x16D7 JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1714 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x14FC JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1727 DUP2 DUP9 DUP11 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDE DUP16 0xC2 SWAP7 0xF7 0xCD ISZERO BLOCKHASH PUSH0 PUSH32 0x60AF5181FBA063D6FF5CF98CCECE09612AEEC702624D64736F6C634300081600 CALLER ","sourceMap":"889:11666:13:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:0;;;;;;:::i;:::-;;:::i;:::-;;;516:14:15;;509:22;491:41;;479:2;464:18;542:165:0;;;;;;;;1291:47:13;;1337:1;1291:47;;;;;689:25:15;;;677:2;662:18;1291:47:13;543:177:15;2243:34:13;;;;;1450:47;;1496:1;1450:47;;2811:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1839:46;;;;;;;;1317:42:15;1305:55;;;1287:74;;1275:2;1260:18;1839:46:13;1117:250:15;728:115:4;817:19;728:115;;1556:48:13;;1602:2;1556:48;;1344:47;;1390:1;1344:47;;2074:37;;;;;2594:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2350:36;;;;;1713:42;;1754:1;1713:42;;878:149:4;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;2458:51:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;6123:127;;;:::i;9100:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4368:66:15;4356:79;;;4338:98;;4326:2;4311:18;9100:3453:13;4194:248:15;1610:48:13;;1656:2;1610:48;;1972:45;;;;;2162:39;;;;;6936:1630;;;;;;:::i;:::-;;:::i;1503:47::-;;1549:1;1503:47;;542:165:0;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:0:o;6123:127:13:-;6168:7;6229:14;6195:30;6213:12;6195:15;:30;:::i;:::-;6194:49;;;;:::i;:::-;6187:56;;6123:127;:::o;9100:3453::-;9300:6;9322:10;:35;9344:12;9322:35;;9318:104;;9380:31;;;;;9400:10;9380:31;;;1287:74:15;1260:18;;9380:31:13;;;;;;;;9318:104;9432:13;9448:14;:12;:14::i;:::-;9432:30;;9484:9;9476:5;:17;9472:74;;;9516:19;;;;;;;;689:25:15;;;662:18;;9516:19:13;543:177:15;9472:74:13;9556:70;;;;;9573:10;;9556:42;;:70;;9607:4;;9614:3;;;;9619:6;;;;9556:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9637:20;9676:9;9671:1007;9691:14;;;9671:1007;;;9730:6;;9737:1;9730:9;;;;;;;:::i;:::-;;;;;;;9743:1;9730:14;9726:108;;9789:10;9801:3;;9805:1;9801:6;;;;;;;:::i;:::-;;;;;;;9809;;9816:1;9809:9;;;;;;;:::i;:::-;9771:48;;;;;7407:42:15;7395:55;;;9771:48:13;;;7377:74:15;7467:18;;;7460:34;;;;-1:-1:-1;9809:9:13;;;;;;7510:18:15;;;7503:34;7350:18;;9771:48:13;7175:368:15;9726:108:13;9852:3;;9856:1;9852:6;;;;;;;:::i;:::-;;;;;;;9862:1;9852:11;9848:820;;1337:1;9900:6;;9907:1;9900:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;9883:49;;;;:::i;:::-;;;9848:820;;;9957:3;;9961:1;9957:6;;;;;;;:::i;:::-;;;;;;;9967:1;9957:11;9953:715;;1390:1;10005:6;;10012:1;10005:9;;;;;;;:::i;9953:715::-;10062:3;;10066:1;10062:6;;;;;;;:::i;:::-;;;;;;;10072:1;10062:11;10058:610;;1443:1;10110:6;;10117:1;10110:9;;;;;;;:::i;10058:610::-;10167:3;;10171:1;10167:6;;;;;;;:::i;:::-;;;;;;;10177:1;10167:11;10163:505;;1496:1;10215:6;;10222:1;10215:9;;;;;;;:::i;10163:505::-;10272:3;;10276:1;10272:6;;;;;;;:::i;:::-;;;;;;;10282:1;10272:11;10268:400;;1549:1;10320:6;;10327:1;10320:9;;;;;;;:::i;10268:400::-;10377:3;;10381:1;10377:6;;;;;;;:::i;:::-;;;;;;;10387:1;10377:11;10373:295;;1602:2;10425:6;;10432:1;10425:9;;;;;;;:::i;10373:295::-;10482:3;;10486:1;10482:6;;;;;;;:::i;:::-;;;;;;;10492:1;10482:11;10478:190;;1656:2;10530:6;;10537:1;10530:9;;;;;;;:::i;10478:190::-;10631:12;10646:3;;10650:1;10646:6;;;;;;;:::i;:::-;10608:45;;;;;8055:42:15;8043:55;;;10608:45:13;;;8025:74:15;10646:6:13;;;;;;;8115:18:15;;;8108:34;-1:-1:-1;7998:18:15;;10608:45:13;7851:297:15;10478:190:13;9707:3;;9671:1007;;;-1:-1:-1;10808:24:13;;;10688:16;10808:24;;;:14;:24;;;;;;10707:4;;10847:15;;10843:1122;;10879:22;;10944:38;;;;10955:4;10944:38;:::i;:::-;10878:104;;;;11021:3;11001:16;:23;;11029:1;11000:30;10996:613;;11075:57;;9781:66:15;9768:2;9764:15;;;9760:88;11075:57:13;;;9748:101:15;9865:12;;;9858:28;;;11050:12:13;;9902::15;;11075:57:13;;;;;;;;;;;;;11065:68;;11075:57;11065:68;;;;;-1:-1:-1;11156:31:13;:5;11169:11;11065:68;11156:12;:31::i;:::-;11151:139;;11218:53;;;;;8055:42:15;8043:55;;11218:53:13;;;8025:74:15;8115:18;;;8108:34;;;7998:18;;11218:53:13;7851:297:15;11151:139:13;11410:24;;;11308;11410;;;:14;:24;;;;;;;;;11369:3;11336:36;;;11335:57;;11410:43;;;;11476:65;;10099:25:15;;;10140:18;;;10133:34;;;11335:57:13;11410:24;11476:65;;10072:18:15;11476:65:13;;;;;;;11578:16;-1:-1:-1;;10996:613:13;1098:6;11639:44;11654:29;11639:12;:44;:::i;:::-;11638:61;;;;:::i;:::-;11623:76;;10864:846;;10843:1122;;;11790:3;11770:23;;;11811:33;;11807:148;;1098:6;11880:44;11895:29;11880:12;:44;:::i;:::-;11879:61;;;;:::i;:::-;11864:76;;11807:148;11716:249;10843:1122;11975:49;;;12038:17;;12034:77;;12071:29;12087:13;12071:29;;:::i;:::-;;;12034:77;12155:28;12186:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;12221:12;;12186:47;:::i;:::-;12243:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;12342:23;;;;;;;;;:39;;12155:78;;-1:-1:-1;12369:12:13;;12342:23;;12243:22;12342:39;;12369:12;;12342:39;:::i;:::-;;;;;;;;12419:5;12409:8;12397:95;;;12426:3;;12431:6;;12439:12;12453:20;12475:16;12397:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;12510:36:13;;9100:3453;-1:-1:-1;;;;;;;;;;;;;;9100:3453:13:o;6936:1630::-;7061:6;7083:10;:34;7105:11;7083:34;;7079:103;;7140:31;;;;;7160:10;7140:31;;;1287:74:15;1260:18;;7140:31:13;1117:250:15;7079:103:13;1228:1;7195:2;:26;7191:94;;7244:30;;;;;7259:10;7244:30;;;8025:74:15;8115:18;;;8108:34;;;7998:18;;7244:30:13;7851:297:15;7191:94:13;7299:5;7308:1;7299:10;7295:88;;7332:40;;;;;7350:10;7332:40;;;7377:74:15;7467:18;;;7460:34;;;7510:18;;;7503:34;;;7350:18;;7332:40:13;7175:368:15;7295:88:13;7393:13;7409:14;:12;:14::i;:::-;7393:30;;7445:9;7437:5;:17;7433:74;;;7477:19;;;;;;;;689:25:15;;;662:18;;7477:19:13;543:177:15;7433:74:13;7544:20;;;7517:24;7544:20;;;:14;:20;;;;;;7578:29;;;;7574:96;;7630:29;;;;;1317:42:15;1305:55;;7630:29:13;;;1287:74:15;1260:18;;7630:29:13;1117:250:15;7574:96:13;7680:63;;;;;7726:4;7680:63;;;7377:74:15;7467:18;;;7460:34;;;7510:18;;;7503:34;;;7697:10:13;;7680:37;;7350:18:15;;7680:63:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1754:1:13;7781:33;;;-1:-1:-1;7828:15:13;;7824:562;;7884:3;7864:16;:23;;7892:1;7863:30;7859:517;;7914:22;;7979:38;;;;7990:4;7979:38;:::i;:::-;8060:53;;9781:66:15;9768:2;9764:15;;;9760:88;8060:53:13;;;9748:101:15;9865:12;;;9858:28;;;7913:104:13;;-1:-1:-1;7913:104:13;-1:-1:-1;8035:12:13;;9902::15;;8060:53:13;;;;;;;;;;;;;8050:64;;8060:53;8050:64;;;;;-1:-1:-1;8137:31:13;:5;8150:11;8050:64;8137:12;:31::i;:::-;8132:135;;8199:49;;;;;8055:42:15;8043:55;;8199:49:13;;;8025:74:15;8115:18;;;8108:34;;;7998:18;;8199:49:13;7851:297:15;8132:135:13;-1:-1:-1;8338:3:13;8305:36;8304:57;;;;-1:-1:-1;7859:517:13;8395:20;;;;;;;:14;:20;;;;;;;;;:39;;;8449:61;;10099:25:15;;;10140:18;;;10133:34;;;8449:61:13;;10072:18:15;8449:61:13;;;;;;;-1:-1:-1;8528:31:13;;6936:1630;-1:-1:-1;;;;;;;;;6936:1630:13:o;1705:174:3:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:3;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:3;1620:11;;1560:82;-1:-1:-1;1658:34:3;;:21;:34;;;;;;;;;;;;;;;1359:340::o;1156:184:12:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:12:o;1994:290::-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:12;;2133:116;;;-1:-1:-1;2265:12:12;1994:290;-1:-1:-1;;;1994:290:12:o;8879:147::-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:12:o;14:332:15:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1629:254::-;1697:6;1705;1758:2;1746:9;1737:7;1733:23;1729:32;1726:52;;;1774:1;1771;1764:12;1726:52;1810:9;1797:23;1787:33;;1839:38;1873:2;1862:9;1858:18;1839:38;:::i;:::-;1829:48;;1629:254;;;;;:::o;2070:180::-;2129:6;2182:2;2170:9;2161:7;2157:23;2153:32;2150:52;;;2198:1;2195;2188:12;2150:52;-1:-1:-1;2221:23:15;;2070:180;-1:-1:-1;2070:180:15:o;2255:367::-;2318:8;2328:6;2382:3;2375:4;2367:6;2363:17;2359:27;2349:55;;2400:1;2397;2390:12;2349:55;-1:-1:-1;2423:20:15;;2466:18;2455:30;;2452:50;;;2498:1;2495;2488:12;2452:50;2535:4;2527:6;2523:17;2511:29;;2595:3;2588:4;2578:6;2575:1;2571:14;2563:6;2559:27;2555:38;2552:47;2549:67;;;2612:1;2609;2602:12;2549:67;2255:367;;;;;:::o;2627:347::-;2678:8;2688:6;2742:3;2735:4;2727:6;2723:17;2719:27;2709:55;;2760:1;2757;2750:12;2709:55;-1:-1:-1;2783:20:15;;2826:18;2815:30;;2812:50;;;2858:1;2855;2848:12;2812:50;2895:4;2887:6;2883:17;2871:29;;2947:3;2940:4;2931:6;2923;2919:19;2915:30;2912:39;2909:59;;;2964:1;2961;2954:12;2979:1210;3139:6;3147;3155;3163;3171;3179;3187;3195;3248:3;3236:9;3227:7;3223:23;3219:33;3216:53;;;3265:1;3262;3255:12;3216:53;3288:29;3307:9;3288:29;:::i;:::-;3278:39;;3336:38;3370:2;3359:9;3355:18;3336:38;:::i;:::-;3326:48;;3425:2;3414:9;3410:18;3397:32;3448:18;3489:2;3481:6;3478:14;3475:34;;;3505:1;3502;3495:12;3475:34;3544:70;3606:7;3597:6;3586:9;3582:22;3544:70;:::i;:::-;3633:8;;-1:-1:-1;3518:96:15;-1:-1:-1;3721:2:15;3706:18;;3693:32;;-1:-1:-1;3737:16:15;;;3734:36;;;3766:1;3763;3756:12;3734:36;3805:72;3869:7;3858:8;3847:9;3843:24;3805:72;:::i;:::-;3896:8;;-1:-1:-1;3779:98:15;-1:-1:-1;3984:3:15;3969:19;;3956:33;;-1:-1:-1;4001:16:15;;;3998:36;;;4030:1;4027;4020:12;3998:36;;4069:60;4121:7;4110:8;4099:9;4095:24;4069:60;:::i;:::-;2979:1210;;;;-1:-1:-1;2979:1210:15;;-1:-1:-1;2979:1210:15;;;;;;4148:8;-1:-1:-1;;;2979:1210:15:o;4447:695::-;4553:6;4561;4569;4577;4585;4593;4646:3;4634:9;4625:7;4621:23;4617:33;4614:53;;;4663:1;4660;4653:12;4614:53;4686:29;4705:9;4686:29;:::i;:::-;4676:39;;4734:38;4768:2;4757:9;4753:18;4734:38;:::i;:::-;4724:48;;4819:2;4808:9;4804:18;4791:32;4781:42;;4870:2;4859:9;4855:18;4842:32;4832:42;;4925:3;4914:9;4910:19;4897:33;4953:18;4945:6;4942:30;4939:50;;;4985:1;4982;4975:12;4939:50;5024:58;5074:7;5065:6;5054:9;5050:22;5024:58;:::i;:::-;4447:695;;;;-1:-1:-1;4447:695:15;;-1:-1:-1;4447:695:15;;5101:8;;4447:695;-1:-1:-1;;;4447:695:15:o;5147:184::-;5199:77;5196:1;5189:88;5296:4;5293:1;5286:15;5320:4;5317:1;5310:15;5336:128;5403:9;;;5424:11;;;5421:37;;;5438:18;;:::i;5469:274::-;5509:1;5535;5525:189;;5570:77;5567:1;5560:88;5671:4;5668:1;5661:15;5699:4;5696:1;5689:15;5525:189;-1:-1:-1;5728:9:15;;5469:274::o;5979:358::-;6079:6;6074:3;6067:19;6049:3;6109:66;6101:6;6098:78;6095:98;;;6189:1;6186;6179:12;6095:98;6225:6;6222:1;6218:14;6277:8;6270:5;6263:4;6258:3;6254:14;6241:45;6306:18;;;;6326:4;6302:29;;5979:358;-1:-1:-1;;;5979:358:15:o;6342:639::-;6659:42;6651:6;6647:55;6636:9;6629:74;6739:2;6734;6723:9;6719:18;6712:30;6610:4;6765:73;6834:2;6823:9;6819:18;6811:6;6803;6765:73;:::i;:::-;6886:9;6878:6;6874:22;6869:2;6858:9;6854:18;6847:50;6914:61;6968:6;6960;6952;6914:61;:::i;:::-;6906:69;6342:639;-1:-1:-1;;;;;;;;6342:639:15:o;6986:184::-;7038:77;7035:1;7028:88;7135:4;7132:1;7125:15;7159:4;7156:1;7149:15;7548:168;7621:9;;;7652;;7669:15;;;7663:22;;7649:37;7639:71;;7690:18;;:::i;7721:125::-;7786:9;;;7807:10;;;7804:36;;;7820:18;;:::i;8153:184::-;8205:77;8202:1;8195:88;8302:4;8299:1;8292:15;8326:4;8323:1;8316:15;8342:1244;8435:6;8443;8496:2;8484:9;8475:7;8471:23;8467:32;8464:52;;;8512:1;8509;8502:12;8464:52;8552:9;8539:23;8581:18;8622:2;8614:6;8611:14;8608:34;;;8638:1;8635;8628:12;8608:34;8676:6;8665:9;8661:22;8651:32;;8721:7;8714:4;8710:2;8706:13;8702:27;8692:55;;8743:1;8740;8733:12;8692:55;8779:2;8766:16;8801:4;8824:2;8820;8817:10;8814:36;;;8830:18;;:::i;:::-;8876:2;8873:1;8869:10;8908:2;8902:9;8967:66;8962:2;8958;8954:11;8950:84;8942:6;8938:97;9085:6;9073:10;9070:22;9065:2;9053:10;9050:18;9047:46;9044:72;;;9096:18;;:::i;:::-;9132:2;9125:22;9182:18;;;9216:15;;;;-1:-1:-1;9258:11:15;;;9254:20;;;9286:19;;;9283:39;;;9318:1;9315;9308:12;9283:39;9342:11;;;;9362:142;9378:6;9373:3;9370:15;9362:142;;;9444:17;;9432:30;;9395:12;;;;9482;;;;9362:142;;;9523:6;9561:18;;;;9548:32;;-1:-1:-1;;;;;;;8342:1244:15:o;10178:735::-;10539:3;10528:9;10521:22;10502:4;10566:74;10635:3;10624:9;10620:19;10612:6;10604;10566:74;:::i;:::-;10688:9;10680:6;10676:22;10671:2;10660:9;10656:18;10649:50;10716:61;10770:6;10762;10754;10716:61;:::i;:::-;10808:2;10793:18;;10786:34;;;;-1:-1:-1;;10851:2:15;10836:18;;10829:34;;;;10894:3;10879:19;;;10872:35;10708:69;10178:735;-1:-1:-1;;;;10178:735:15:o"},"gasEstimates":{"creation":{"codeDepositCost":"1202600","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"264","BURN_WEIGHT_TOKEN_2()":"240","BURN_WEIGHT_TOKEN_3()":"240","BURN_WEIGHT_TOKEN_4()":"241","BURN_WEIGHT_TOKEN_5()":"283","BURN_WEIGHT_TOKEN_6()":"285","BURN_WEIGHT_TOKEN_7()":"262","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"285","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","currentCycle()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2575","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2694"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","currentCycle()":"bab2f552","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Throws if the cycle duration is zero.Throws if the max cycle is zero.\",\"params\":{\"cycleDuration\":\"The duration of each cycle.\",\"forwarderRegistry\":\"The forwarder registry contract.\",\"initialTime\":\"The initial time of the contract.\",\"maxCycle\":\"The maximum cycle.\",\"merkleRoot\":\"The Merkle root of the Puzzle Game multiplier claim.\",\"missingOrb\":\"The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\",\"orbOfPower\":\"The IERC1155Burnable erc1155 contract burn to generate ASH.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"OrbsBurnPool Contract\",\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"constructor\":{\"notice\":\"Constructor for the OrbsBurnPool contract.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/burn/OrbsBurnPool.sol\":\"OrbsBurnPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n                curOrbMultiplier = newOrbMultiplier;\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x60edc8bb16c081acb89ab739f39460a89895ad09b77d648f56122d611012bfd9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1054,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1061,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1066,"contract":"contracts/burn/OrbsBurnPool.sol:OrbsBurnPool","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"constructor":{"notice":"Constructor for the OrbsBurnPool contract."},"currentCycle()":{"notice":"Get the current cycle."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}},"contracts/mocks/burn/OrbsBurnPoolMock.sol":{"OrbsBurnPoolMock":{"abi":[{"inputs":[{"internalType":"uint256","name":"initialTime","type":"uint256"},{"internalType":"uint256","name":"cycleDuration","type":"uint256"},{"internalType":"uint256","name":"maxCycle","type":"uint256"},{"internalType":"bytes32","name":"merkleRoot","type":"bytes32"},{"internalType":"contract IERC1155Burnable","name":"orbOfPower","type":"address"},{"internalType":"contract IERC1155Burnable","name":"missingOrb","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"wallet","type":"address"}],"name":"AlreadySetROCMultiplier","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"uint256","name":"cycle","type":"uint256"}],"name":"InvalidCycle","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"puzzleGameMultiplierNumerator","type":"uint256"}],"name":"InvalidProof","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"InvalidTokenAddress","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"InvalidTokenId","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"InvalidTokenValue","type":"error"},{"inputs":[],"name":"ZeroCycleDuration","type":"error"},{"inputs":[],"name":"ZeroMaxCycle","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"burner","type":"address"},{"indexed":true,"internalType":"uint256","name":"cycle","type":"uint256"},{"indexed":false,"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"values","type":"uint256[]"},{"indexed":false,"internalType":"uint256","name":"ash","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"totalAsh","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"orbMultiplier","type":"uint256"}],"name":"GenerateAsh","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":false,"internalType":"uint256","name":"curOrbMultiplier","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"updatedOrbMultiplier","type":"uint256"}],"name":"UpdateOrbMultiplier","type":"event"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_1","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_2","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_3","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_4","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_5","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_6","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BURN_WEIGHT_TOKEN_7","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"CYCLE_DURATION","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INITIAL_TIME","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MAX_CYCLE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MERKLE_ROOT","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"MISSING_ORB_TOKEN_ID","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ORB_OF_POWER","outputs":[{"internalType":"contract IERC1155Burnable","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"ROC_MULTIPLIER","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgSender","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"ids","type":"uint256[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155BatchReceived","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"id","type":"uint256"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC1155Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"orbMultipliers","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"totalAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"address","name":"","type":"address"}],"name":"userAshPerCycle","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"__msgData()":{"returns":{"_0":"The current msg.data value."}},"currentCycle()":{"returns":{"_0":"cycle The current cycle."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","ids":"The token IDs to burn.","values":"The amount of tokens to burn."},"returns":{"_0":"The ERC1155Received selector."}},"onERC1155Received(address,address,uint256,uint256,bytes)":{"details":"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.","params":{"data":"The merkle proof data and multiplier value for setting the token multiplier.","from":"The wallet address.","id":"The token ID.","value":"The token value."},"returns":{"_0":"The ERC1155Received selector."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1203":{"entryPoint":null,"id":1203,"parameterSlots":7,"returnSlots":0},"@_170":{"entryPoint":null,"id":170,"parameterSlots":1,"returnSlots":0},"@_1864":{"entryPoint":null,"id":1864,"parameterSlots":7,"returnSlots":0},"@_217":{"entryPoint":null,"id":217,"parameterSlots":1,"returnSlots":0},"@_405":{"entryPoint":null,"id":405,"parameterSlots":0,"returnSlots":0},"@layout_146":{"entryPoint":235,"id":146,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_100":{"entryPoint":289,"id":100,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory":{"entryPoint":407,"id":null,"parameterSlots":2,"returnSlots":7},"checked_sub_t_uint256":{"entryPoint":530,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC1155Burnable":{"entryPoint":382,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1295:15","nodeType":"YulBlock","src":"0:1295:15","statements":[{"nativeSrc":"6:3:15","nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nativeSrc":"77:86:15","nodeType":"YulBlock","src":"77:86:15","statements":[{"body":{"nativeSrc":"141:16:15","nodeType":"YulBlock","src":"141:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"150:1:15","nodeType":"YulLiteral","src":"150:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"153:1:15","nodeType":"YulLiteral","src":"153:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"143:6:15","nodeType":"YulIdentifier","src":"143:6:15"},"nativeSrc":"143:12:15","nodeType":"YulFunctionCall","src":"143:12:15"},"nativeSrc":"143:12:15","nodeType":"YulExpressionStatement","src":"143:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"100:5:15","nodeType":"YulIdentifier","src":"100:5:15"},{"arguments":[{"name":"value","nativeSrc":"111:5:15","nodeType":"YulIdentifier","src":"111:5:15"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"126:3:15","nodeType":"YulLiteral","src":"126:3:15","type":"","value":"160"},{"kind":"number","nativeSrc":"131:1:15","nodeType":"YulLiteral","src":"131:1:15","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"122:3:15","nodeType":"YulIdentifier","src":"122:3:15"},"nativeSrc":"122:11:15","nodeType":"YulFunctionCall","src":"122:11:15"},{"kind":"number","nativeSrc":"135:1:15","nodeType":"YulLiteral","src":"135:1:15","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"118:3:15","nodeType":"YulIdentifier","src":"118:3:15"},"nativeSrc":"118:19:15","nodeType":"YulFunctionCall","src":"118:19:15"}],"functionName":{"name":"and","nativeSrc":"107:3:15","nodeType":"YulIdentifier","src":"107:3:15"},"nativeSrc":"107:31:15","nodeType":"YulFunctionCall","src":"107:31:15"}],"functionName":{"name":"eq","nativeSrc":"97:2:15","nodeType":"YulIdentifier","src":"97:2:15"},"nativeSrc":"97:42:15","nodeType":"YulFunctionCall","src":"97:42:15"}],"functionName":{"name":"iszero","nativeSrc":"90:6:15","nodeType":"YulIdentifier","src":"90:6:15"},"nativeSrc":"90:50:15","nodeType":"YulFunctionCall","src":"90:50:15"},"nativeSrc":"87:70:15","nodeType":"YulIf","src":"87:70:15"}]},"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"14:149:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"66:5:15","nodeType":"YulTypedName","src":"66:5:15","type":""}],"src":"14:149:15"},{"body":{"nativeSrc":"425:638:15","nodeType":"YulBlock","src":"425:638:15","statements":[{"body":{"nativeSrc":"472:16:15","nodeType":"YulBlock","src":"472:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"481:1:15","nodeType":"YulLiteral","src":"481:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"484:1:15","nodeType":"YulLiteral","src":"484:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"474:6:15","nodeType":"YulIdentifier","src":"474:6:15"},"nativeSrc":"474:12:15","nodeType":"YulFunctionCall","src":"474:12:15"},"nativeSrc":"474:12:15","nodeType":"YulExpressionStatement","src":"474:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"446:7:15","nodeType":"YulIdentifier","src":"446:7:15"},{"name":"headStart","nativeSrc":"455:9:15","nodeType":"YulIdentifier","src":"455:9:15"}],"functionName":{"name":"sub","nativeSrc":"442:3:15","nodeType":"YulIdentifier","src":"442:3:15"},"nativeSrc":"442:23:15","nodeType":"YulFunctionCall","src":"442:23:15"},{"kind":"number","nativeSrc":"467:3:15","nodeType":"YulLiteral","src":"467:3:15","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"438:3:15","nodeType":"YulIdentifier","src":"438:3:15"},"nativeSrc":"438:33:15","nodeType":"YulFunctionCall","src":"438:33:15"},"nativeSrc":"435:53:15","nodeType":"YulIf","src":"435:53:15"},{"nativeSrc":"497:26:15","nodeType":"YulAssignment","src":"497:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"513:9:15","nodeType":"YulIdentifier","src":"513:9:15"}],"functionName":{"name":"mload","nativeSrc":"507:5:15","nodeType":"YulIdentifier","src":"507:5:15"},"nativeSrc":"507:16:15","nodeType":"YulFunctionCall","src":"507:16:15"},"variableNames":[{"name":"value0","nativeSrc":"497:6:15","nodeType":"YulIdentifier","src":"497:6:15"}]},{"nativeSrc":"532:35:15","nodeType":"YulAssignment","src":"532:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"552:9:15","nodeType":"YulIdentifier","src":"552:9:15"},{"kind":"number","nativeSrc":"563:2:15","nodeType":"YulLiteral","src":"563:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"548:3:15","nodeType":"YulIdentifier","src":"548:3:15"},"nativeSrc":"548:18:15","nodeType":"YulFunctionCall","src":"548:18:15"}],"functionName":{"name":"mload","nativeSrc":"542:5:15","nodeType":"YulIdentifier","src":"542:5:15"},"nativeSrc":"542:25:15","nodeType":"YulFunctionCall","src":"542:25:15"},"variableNames":[{"name":"value1","nativeSrc":"532:6:15","nodeType":"YulIdentifier","src":"532:6:15"}]},{"nativeSrc":"576:35:15","nodeType":"YulAssignment","src":"576:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:15","nodeType":"YulIdentifier","src":"596:9:15"},{"kind":"number","nativeSrc":"607:2:15","nodeType":"YulLiteral","src":"607:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"592:3:15","nodeType":"YulIdentifier","src":"592:3:15"},"nativeSrc":"592:18:15","nodeType":"YulFunctionCall","src":"592:18:15"}],"functionName":{"name":"mload","nativeSrc":"586:5:15","nodeType":"YulIdentifier","src":"586:5:15"},"nativeSrc":"586:25:15","nodeType":"YulFunctionCall","src":"586:25:15"},"variableNames":[{"name":"value2","nativeSrc":"576:6:15","nodeType":"YulIdentifier","src":"576:6:15"}]},{"nativeSrc":"620:35:15","nodeType":"YulAssignment","src":"620:35:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"640:9:15","nodeType":"YulIdentifier","src":"640:9:15"},{"kind":"number","nativeSrc":"651:2:15","nodeType":"YulLiteral","src":"651:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"636:3:15","nodeType":"YulIdentifier","src":"636:3:15"},"nativeSrc":"636:18:15","nodeType":"YulFunctionCall","src":"636:18:15"}],"functionName":{"name":"mload","nativeSrc":"630:5:15","nodeType":"YulIdentifier","src":"630:5:15"},"nativeSrc":"630:25:15","nodeType":"YulFunctionCall","src":"630:25:15"},"variableNames":[{"name":"value3","nativeSrc":"620:6:15","nodeType":"YulIdentifier","src":"620:6:15"}]},{"nativeSrc":"664:39:15","nodeType":"YulVariableDeclaration","src":"664:39:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"687:9:15","nodeType":"YulIdentifier","src":"687:9:15"},{"kind":"number","nativeSrc":"698:3:15","nodeType":"YulLiteral","src":"698:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"683:3:15","nodeType":"YulIdentifier","src":"683:3:15"},"nativeSrc":"683:19:15","nodeType":"YulFunctionCall","src":"683:19:15"}],"functionName":{"name":"mload","nativeSrc":"677:5:15","nodeType":"YulIdentifier","src":"677:5:15"},"nativeSrc":"677:26:15","nodeType":"YulFunctionCall","src":"677:26:15"},"variables":[{"name":"value","nativeSrc":"668:5:15","nodeType":"YulTypedName","src":"668:5:15","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"755:5:15","nodeType":"YulIdentifier","src":"755:5:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"712:42:15","nodeType":"YulIdentifier","src":"712:42:15"},"nativeSrc":"712:49:15","nodeType":"YulFunctionCall","src":"712:49:15"},"nativeSrc":"712:49:15","nodeType":"YulExpressionStatement","src":"712:49:15"},{"nativeSrc":"770:15:15","nodeType":"YulAssignment","src":"770:15:15","value":{"name":"value","nativeSrc":"780:5:15","nodeType":"YulIdentifier","src":"780:5:15"},"variableNames":[{"name":"value4","nativeSrc":"770:6:15","nodeType":"YulIdentifier","src":"770:6:15"}]},{"nativeSrc":"794:41:15","nodeType":"YulVariableDeclaration","src":"794:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"819:9:15","nodeType":"YulIdentifier","src":"819:9:15"},{"kind":"number","nativeSrc":"830:3:15","nodeType":"YulLiteral","src":"830:3:15","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"815:3:15","nodeType":"YulIdentifier","src":"815:3:15"},"nativeSrc":"815:19:15","nodeType":"YulFunctionCall","src":"815:19:15"}],"functionName":{"name":"mload","nativeSrc":"809:5:15","nodeType":"YulIdentifier","src":"809:5:15"},"nativeSrc":"809:26:15","nodeType":"YulFunctionCall","src":"809:26:15"},"variables":[{"name":"value_1","nativeSrc":"798:7:15","nodeType":"YulTypedName","src":"798:7:15","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"887:7:15","nodeType":"YulIdentifier","src":"887:7:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"844:42:15","nodeType":"YulIdentifier","src":"844:42:15"},"nativeSrc":"844:51:15","nodeType":"YulFunctionCall","src":"844:51:15"},"nativeSrc":"844:51:15","nodeType":"YulExpressionStatement","src":"844:51:15"},{"nativeSrc":"904:17:15","nodeType":"YulAssignment","src":"904:17:15","value":{"name":"value_1","nativeSrc":"914:7:15","nodeType":"YulIdentifier","src":"914:7:15"},"variableNames":[{"name":"value5","nativeSrc":"904:6:15","nodeType":"YulIdentifier","src":"904:6:15"}]},{"nativeSrc":"930:41:15","nodeType":"YulVariableDeclaration","src":"930:41:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"955:9:15","nodeType":"YulIdentifier","src":"955:9:15"},{"kind":"number","nativeSrc":"966:3:15","nodeType":"YulLiteral","src":"966:3:15","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"951:3:15","nodeType":"YulIdentifier","src":"951:3:15"},"nativeSrc":"951:19:15","nodeType":"YulFunctionCall","src":"951:19:15"}],"functionName":{"name":"mload","nativeSrc":"945:5:15","nodeType":"YulIdentifier","src":"945:5:15"},"nativeSrc":"945:26:15","nodeType":"YulFunctionCall","src":"945:26:15"},"variables":[{"name":"value_2","nativeSrc":"934:7:15","nodeType":"YulTypedName","src":"934:7:15","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"1023:7:15","nodeType":"YulIdentifier","src":"1023:7:15"}],"functionName":{"name":"validator_revert_contract_IERC1155Burnable","nativeSrc":"980:42:15","nodeType":"YulIdentifier","src":"980:42:15"},"nativeSrc":"980:51:15","nodeType":"YulFunctionCall","src":"980:51:15"},"nativeSrc":"980:51:15","nodeType":"YulExpressionStatement","src":"980:51:15"},{"nativeSrc":"1040:17:15","nodeType":"YulAssignment","src":"1040:17:15","value":{"name":"value_2","nativeSrc":"1050:7:15","nodeType":"YulIdentifier","src":"1050:7:15"},"variableNames":[{"name":"value6","nativeSrc":"1040:6:15","nodeType":"YulIdentifier","src":"1040:6:15"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory","nativeSrc":"168:895:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"343:9:15","nodeType":"YulTypedName","src":"343:9:15","type":""},{"name":"dataEnd","nativeSrc":"354:7:15","nodeType":"YulTypedName","src":"354:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"366:6:15","nodeType":"YulTypedName","src":"366:6:15","type":""},{"name":"value1","nativeSrc":"374:6:15","nodeType":"YulTypedName","src":"374:6:15","type":""},{"name":"value2","nativeSrc":"382:6:15","nodeType":"YulTypedName","src":"382:6:15","type":""},{"name":"value3","nativeSrc":"390:6:15","nodeType":"YulTypedName","src":"390:6:15","type":""},{"name":"value4","nativeSrc":"398:6:15","nodeType":"YulTypedName","src":"398:6:15","type":""},{"name":"value5","nativeSrc":"406:6:15","nodeType":"YulTypedName","src":"406:6:15","type":""},{"name":"value6","nativeSrc":"414:6:15","nodeType":"YulTypedName","src":"414:6:15","type":""}],"src":"168:895:15"},{"body":{"nativeSrc":"1117:176:15","nodeType":"YulBlock","src":"1117:176:15","statements":[{"nativeSrc":"1127:17:15","nodeType":"YulAssignment","src":"1127:17:15","value":{"arguments":[{"name":"x","nativeSrc":"1139:1:15","nodeType":"YulIdentifier","src":"1139:1:15"},{"name":"y","nativeSrc":"1142:1:15","nodeType":"YulIdentifier","src":"1142:1:15"}],"functionName":{"name":"sub","nativeSrc":"1135:3:15","nodeType":"YulIdentifier","src":"1135:3:15"},"nativeSrc":"1135:9:15","nodeType":"YulFunctionCall","src":"1135:9:15"},"variableNames":[{"name":"diff","nativeSrc":"1127:4:15","nodeType":"YulIdentifier","src":"1127:4:15"}]},{"body":{"nativeSrc":"1176:111:15","nodeType":"YulBlock","src":"1176:111:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1197:1:15","nodeType":"YulLiteral","src":"1197:1:15","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1204:3:15","nodeType":"YulLiteral","src":"1204:3:15","type":"","value":"224"},{"kind":"number","nativeSrc":"1209:10:15","nodeType":"YulLiteral","src":"1209:10:15","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1200:3:15","nodeType":"YulIdentifier","src":"1200:3:15"},"nativeSrc":"1200:20:15","nodeType":"YulFunctionCall","src":"1200:20:15"}],"functionName":{"name":"mstore","nativeSrc":"1190:6:15","nodeType":"YulIdentifier","src":"1190:6:15"},"nativeSrc":"1190:31:15","nodeType":"YulFunctionCall","src":"1190:31:15"},"nativeSrc":"1190:31:15","nodeType":"YulExpressionStatement","src":"1190:31:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1241:1:15","nodeType":"YulLiteral","src":"1241:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"1244:4:15","nodeType":"YulLiteral","src":"1244:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1234:6:15","nodeType":"YulIdentifier","src":"1234:6:15"},"nativeSrc":"1234:15:15","nodeType":"YulFunctionCall","src":"1234:15:15"},"nativeSrc":"1234:15:15","nodeType":"YulExpressionStatement","src":"1234:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1269:1:15","nodeType":"YulLiteral","src":"1269:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1272:4:15","nodeType":"YulLiteral","src":"1272:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1262:6:15","nodeType":"YulIdentifier","src":"1262:6:15"},"nativeSrc":"1262:15:15","nodeType":"YulFunctionCall","src":"1262:15:15"},"nativeSrc":"1262:15:15","nodeType":"YulExpressionStatement","src":"1262:15:15"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1159:4:15","nodeType":"YulIdentifier","src":"1159:4:15"},{"name":"x","nativeSrc":"1165:1:15","nodeType":"YulIdentifier","src":"1165:1:15"}],"functionName":{"name":"gt","nativeSrc":"1156:2:15","nodeType":"YulIdentifier","src":"1156:2:15"},"nativeSrc":"1156:11:15","nodeType":"YulFunctionCall","src":"1156:11:15"},"nativeSrc":"1153:134:15","nodeType":"YulIf","src":"1153:134:15"}]},"name":"checked_sub_t_uint256","nativeSrc":"1068:225:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1099:1:15","nodeType":"YulTypedName","src":"1099:1:15","type":""},{"name":"y","nativeSrc":"1102:1:15","nodeType":"YulTypedName","src":"1102:1:15","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1108:4:15","nodeType":"YulTypedName","src":"1108:4:15","type":""}],"src":"1068:225:15"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC1155Burnable(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_bytes32t_contract$_IERC1155Burnable_$432t_contract$_IERC1155Burnable_$432t_contract$_IForwarderRegistry_$342_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n        let value := mload(add(headStart, 128))\n        validator_revert_contract_IERC1155Burnable(value)\n        value4 := value\n        let value_1 := mload(add(headStart, 160))\n        validator_revert_contract_IERC1155Burnable(value_1)\n        value5 := value_1\n        let value_2 := mload(add(headStart, 192))\n        validator_revert_contract_IERC1155Burnable(value_2)\n        value6 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"6101606040523480156200001257600080fd5b5060405162001e4f38038062001e4f833981016040819052620000359162000197565b6001600160a01b0381166080528686868686868662000069630271189760e51b600162000061620000eb565b919062000121565b60e08790526000869003620000915760405163b870efbd60e01b815260040160405180910390fd5b6101008690526000859003620000ba57604051637e5e559b60e11b815260040160405180910390fd5b5061012093909352610140919091526001600160a01b0390811660a0521660c0525062000234975050505050505050565b6000806200011b60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000212565b92915050565b600160e01b6001600160e01b031983160162000150576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146200019457600080fd5b50565b600080600080600080600060e0888a031215620001b357600080fd5b875196506020880151955060408801519450606088015193506080880151620001dc816200017e565b60a0890151909350620001ef816200017e565b60c089015190925062000202816200017e565b8091505092959891949750929550565b818103818111156200011b57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051610100516101205161014051611b5e620002f16000396000818161032f01528181610a0d0152610f9c0152600081816101f60152818161059a0152610d9d01526000818161044601526104bc0152600081816102dd01526104e001526000818161041f0152610ca90152600081816102450152818161052e01526108b301526000818161028e015281816103690152818161121b01528181611259015281816113d4015261145c0152611b5e6000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806351e75e8b116100ee578063bc197c8111610097578063cd421fbf11610071578063cd421fbf14610441578063d1a91ff214610468578063f23a6e6114610470578063f95d10161461048357600080fd5b8063bc197c81146103ce578063c131754e14610412578063cd18a34f1461041a57600080fd5b8063aa918fd5116100c8578063aa918fd5146102d0578063ab504e73146103a6578063bab2f552146103c657600080fd5b806351e75e8b1461032a57806355f5b0a814610351578063572b6c051461035957600080fd5b806328a979cf1161015b5780633838a201116101355780633838a201146102c8578063424ab4f7146102d0578063491bde66146102d85780634dac1c2b146102ff57600080fd5b806328a979cf146102405780632b4c9f161461028c57806331e66e1e146102b257600080fd5b80630455645a1161018c5780630455645a1461021857806312828b7f146102205780631de0e40b146101db57600080fd5b806301ffc9a7146101b35780630277640e146101db578063043063bc146101f1575b600080fd5b6101c66101c136600461153b565b61048b565b60405190151581526020015b60405180910390f35b6101e3600181565b6040519081526020016101d2565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600581565b6101e361022e3660046115a6565b60026020526000908152604090205481565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b7f0000000000000000000000000000000000000000000000000000000000000000610267565b6102ba6104a5565b6040516101d29291906115c1565b6101e3601981565b6101e3600381565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e361030d36600461160e565b600160209081526000928352604080842090915290825290205481565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600281565b6101c66103673660046115a6565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101e36103b436600461163a565b60006020819052908152604090205481565b6101e36104b8565b6103e16103dc3660046116e1565b610514565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6101e3601081565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b610267610c85565b6103e161047e36600461179c565b610c8f565b6101e3600981565b600061049f826104996110b1565b906110df565b92915050565b3660006104b06111b9565b915091509091565b60007f00000000000000000000000000000000000000000000000000000000000000006105057f000000000000000000000000000000000000000000000000000000000000000042611843565b61050f9190611856565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461058c576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105966104b8565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105f5576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106399030908c908c908c908c906004016118dc565b600060405180830381600087803b15801561065357600080fd5b505af1158015610667573d6000803e3d6000fd5b505050506000805b88811015610945578787828181106106895761068961192b565b9050602002013560000361072357338a8a838181106106aa576106aa61192b565b905060200201358989848181106106c3576106c361192b565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9095166004860152602485019390935250602090910201356044820152606401610583565b8989828181106107355761073561192b565b905060200201356001036107795760018888838181106107575761075761192b565b90506020020135610768919061195a565b6107729083611971565b915061093d565b89898281811061078b5761078b61192b565b905060200201356002036107ad5760038888838181106107575761075761192b565b8989828181106107bf576107bf61192b565b905060200201356003036107e15760038888838181106107575761075761192b565b8989828181106107f3576107f361192b565b905060200201356004036108155760058888838181106107575761075761192b565b8989828181106108275761082761192b565b905060200201356005036108495760098888838181106107575761075761192b565b89898281811061085b5761085b61192b565b9050602002013560060361087d5760198888838181106107575761075761192b565b89898281811061088f5761088f61192b565b905060200201356007036108b15760108888838181106107575761075761192b565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108e4576108e461192b565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610583565b60010161066f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610b1757600080610983888a018a6119b3565b91509150608083901c600003610af7576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610a32837f0000000000000000000000000000000000000000000000000000000000000000836111c4565b610a87576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101839052604401610583565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610b04828761195a565b610b0e9190611856565b94505050610b3e565b608081901c8015610b3c57612710610b2f828661195a565b610b399190611856565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b6457610b61818561195a565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b9f908690611971565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610bef908490611971565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c499796959493929190611a95565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b600061050f6111da565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d02576040517f73306803000000000000000000000000000000000000000000000000000000008152336004820152602401610583565b60018514610d45576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610583565b83600114610d8f576040517fe1f366e90000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606401610583565b6000610d996104b8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610df8576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e80576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602401610583565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b505050600282179050841561102057608082901c60000361102057600080610f1d878901896119b3565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610fc1837f0000000000000000000000000000000000000000000000000000000000000000836111c4565b611016576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015260248101839052604401610583565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061049f60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611843565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161112f5750600061049f565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111805750600161049f565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b3660006104b06111e4565b6000826111d1858461134e565b14949350505050565b600061050f611391565b366000333214806111f55750601836105b156112035750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611338575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190611adc565b15611345576104b06114d8565b50600091369150565b600081815b84518110156113895761137f828683815181106113725761137261192b565b6020026020010151611509565b9150600101611353565b509392505050565b6000333214806113a15750601836105b156113ab57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114c757506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190611adc565b156114d157919050565b3391505090565b3660006104b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611afe565b6000818310611525576000828152602084905260409020611534565b60008381526020839052604090205b9392505050565b60006020828403121561154d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461153457600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146115a157600080fd5b919050565b6000602082840312156115b857600080fd5b6115348261157d565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000806040838503121561162157600080fd5b823591506116316020840161157d565b90509250929050565b60006020828403121561164c57600080fd5b5035919050565b60008083601f84011261166557600080fd5b50813567ffffffffffffffff81111561167d57600080fd5b6020830191508360208260051b850101111561169857600080fd5b9250929050565b60008083601f8401126116b157600080fd5b50813567ffffffffffffffff8111156116c957600080fd5b60208301915083602082850101111561169857600080fd5b60008060008060008060008060a0898b0312156116fd57600080fd5b6117068961157d565b975061171460208a0161157d565b9650604089013567ffffffffffffffff8082111561173157600080fd5b61173d8c838d01611653565b909850965060608b013591508082111561175657600080fd5b6117628c838d01611653565b909650945060808b013591508082111561177b57600080fd5b506117888b828c0161169f565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156117b557600080fd5b6117be8761157d565b95506117cc6020880161157d565b94506040870135935060608701359250608087013567ffffffffffffffff8111156117f657600080fd5b61180289828a0161169f565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561049f5761049f611814565b60008261188c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118c357600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260606020820152600061190c606083018688611891565b828103604084015261191f818587611891565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761049f5761049f611814565b8082018082111561049f5761049f611814565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156119c657600080fd5b823567ffffffffffffffff808211156119de57600080fd5b818501915085601f8301126119f257600080fd5b8135602082821115611a0657611a06611984565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715611a4957611a49611984565b604052928352818301935084810182019289841115611a6757600080fd5b948201945b83861015611a8557853585529482019493820193611a6c565b9997909101359750505050505050565b60a081526000611aa960a08301898b611891565b8281036020840152611abc81888a611891565b604084019690965250506060810192909252608090910152949350505050565b600060208284031215611aee57600080fd5b8151801515811461153457600080fd5b60008085851115611b0e57600080fd5b83861115611b1b57600080fd5b505082019391909203915056fea2646970667358221220a934c528d9fa2bab018b81bccfb95d05bac989c22a6f153a141565317740d44064736f6c63430008160033","opcodes":"PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1E4F CODESIZE SUB DUP1 PUSH3 0x1E4F DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x35 SWAP2 PUSH3 0x197 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x80 MSTORE DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH3 0x69 PUSH4 0x2711897 PUSH1 0xE5 SHL PUSH1 0x1 PUSH3 0x61 PUSH3 0xEB JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x121 JUMP JUMPDEST PUSH1 0xE0 DUP8 SWAP1 MSTORE PUSH1 0x0 DUP7 SWAP1 SUB PUSH3 0x91 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB870EFBD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x100 DUP7 SWAP1 MSTORE PUSH1 0x0 DUP6 SWAP1 SUB PUSH3 0xBA JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E5E559B PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH2 0x120 SWAP4 SWAP1 SWAP4 MSTORE PUSH2 0x140 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE AND PUSH1 0xC0 MSTORE POP PUSH3 0x234 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x11B PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x212 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x150 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x194 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH3 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP8 MLOAD SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP6 POP PUSH1 0x40 DUP9 ADD MLOAD SWAP5 POP PUSH1 0x60 DUP9 ADD MLOAD SWAP4 POP PUSH1 0x80 DUP9 ADD MLOAD PUSH3 0x1DC DUP2 PUSH3 0x17E JUMP JUMPDEST PUSH1 0xA0 DUP10 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x1EF DUP2 PUSH3 0x17E JUMP JUMPDEST PUSH1 0xC0 DUP10 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x202 DUP2 PUSH3 0x17E JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 SWAP9 SWAP2 SWAP5 SWAP8 POP SWAP3 SWAP6 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x11B JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1B5E PUSH3 0x2F1 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x32F ADD MSTORE DUP2 DUP2 PUSH2 0xA0D ADD MSTORE PUSH2 0xF9C ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x1F6 ADD MSTORE DUP2 DUP2 PUSH2 0x59A ADD MSTORE PUSH2 0xD9D ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x446 ADD MSTORE PUSH2 0x4BC ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2DD ADD MSTORE PUSH2 0x4E0 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x41F ADD MSTORE PUSH2 0xCA9 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x245 ADD MSTORE DUP2 DUP2 PUSH2 0x52E ADD MSTORE PUSH2 0x8B3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x28E ADD MSTORE DUP2 DUP2 PUSH2 0x369 ADD MSTORE DUP2 DUP2 PUSH2 0x121B ADD MSTORE DUP2 DUP2 PUSH2 0x1259 ADD MSTORE DUP2 DUP2 PUSH2 0x13D4 ADD MSTORE PUSH2 0x145C ADD MSTORE PUSH2 0x1B5E PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x3838A201 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153B JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x15A6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x267 JUMP JUMPDEST PUSH2 0x2BA PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP3 SWAP2 SWAP1 PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A6 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x179C JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F DUP3 PUSH2 0x499 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 PUSH2 0x10DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11B9 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x505 PUSH32 0x0 TIMESTAMP PUSH2 0x1843 JUMP JUMPDEST PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x58C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x596 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x639 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x945 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x689 JUMPI PUSH2 0x689 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x723 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6AA JUMPI PUSH2 0x6AA PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x735 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x779 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x772 SWAP1 DUP4 PUSH2 0x1971 JUMP JUMPDEST SWAP2 POP PUSH2 0x93D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x7AD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x7E1 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7F3 JUMPI PUSH2 0x7F3 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x815 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x827 JUMPI PUSH2 0x827 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x849 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x85B JUMPI PUSH2 0x85B PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x87D JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x88F JUMPI PUSH2 0x88F PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x8B1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x8E4 JUMPI PUSH2 0x8E4 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 PUSH2 0x983 DUP9 DUP11 ADD DUP11 PUSH2 0x19B3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xA32 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xB04 DUP3 DUP8 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xB0E SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xB3E JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xB3C JUMPI PUSH2 0x2710 PUSH2 0xB2F DUP3 DUP7 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xB39 SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB64 JUMPI PUSH2 0xB61 DUP2 DUP6 PUSH2 0x195A JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB9F SWAP1 DUP7 SWAP1 PUSH2 0x1971 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBEF SWAP1 DUP5 SWAP1 PUSH2 0x1971 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC49 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x11DA JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD8F JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD99 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1020 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1020 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF1D DUP8 DUP10 ADD DUP10 PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xFC1 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x1016 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x49F PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x112F JUMPI POP PUSH1 0x0 PUSH2 0x49F JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1180 JUMPI POP PUSH1 0x1 PUSH2 0x49F JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x11D1 DUP6 DUP5 PUSH2 0x134E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x1391 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11F5 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1203 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x1338 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1338 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x1345 JUMPI PUSH2 0x4B0 PUSH2 0x14D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1389 JUMPI PUSH2 0x137F DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1372 JUMPI PUSH2 0x1372 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1509 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1353 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13A1 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13AB JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14C7 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C7 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x14D1 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1AFE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1525 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1534 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1534 DUP3 PUSH2 0x157D JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1631 PUSH1 0x20 DUP5 ADD PUSH2 0x157D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x167D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x16FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1706 DUP10 PUSH2 0x157D JUMP JUMPDEST SWAP8 POP PUSH2 0x1714 PUSH1 0x20 DUP11 ADD PUSH2 0x157D JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173D DUP13 DUP4 DUP14 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1762 DUP13 DUP4 DUP14 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x177B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1788 DUP12 DUP3 DUP13 ADD PUSH2 0x169F JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17BE DUP8 PUSH2 0x157D JUMP JUMPDEST SWAP6 POP PUSH2 0x17CC PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1802 DUP10 DUP3 DUP11 ADD PUSH2 0x169F JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x188C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x190C PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x191F DUP2 DUP6 DUP8 PUSH2 0x1891 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1A06 JUMPI PUSH2 0x1A06 PUSH2 0x1984 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x1A49 JUMPI PUSH2 0x1A49 PUSH2 0x1984 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1A85 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1A6C JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1AA9 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1ABC DUP2 DUP9 DUP11 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALLVALUE 0xC5 0x28 0xD9 STATICCALL 0x2B 0xAB ADD DUP12 DUP2 0xBC 0xCF 0xB9 0x5D SDIV 0xBA 0xC9 DUP10 0xC2 0x2A PUSH16 0x153A141565317740D44064736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"349:717:14:-:0;;;397:360;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;;;;;622:39:5;;;;662:11:14;675:13;690:8;700:10;712;724;736:17;780:103:9;-1:-1:-1;;;878:4:9;780:34;:32;:34::i;:::-;:56;:103;:56;:103::i;:::-;5212:26:13::1;::::0;;;5270:1:::1;5253:18:::0;;;5249:75:::1;;5294:19;;-1:-1:-1::0;;;5294:19:13::1;;;;;;;;;;;5249:75;5333:30;::::0;;;5390:1:::1;5378:13:::0;;;5374:65:::1;;5414:14;;-1:-1:-1::0;;;5414:14:13::1;;;;;;;;;;;5374:65;-1:-1:-1::0;5448:20:13::1;::::0;;;;5478:24:::1;::::0;;;;-1:-1:-1;;;;;5512:25:13;;::::1;;::::0;5547:24:::1;;::::0;-1:-1:-1;349:717:14;;-1:-1:-1;;;;;;;;349:717:14;1705:174:3;1746:16;;365:79;443:1;373:66;365:79;:::i;:::-;357:88;1705:174;-1:-1:-1;;1705:174:3:o;773:235::-;-1:-1:-1;;;;;;;;;881:35:3;;;877:68;;925:20;;-1:-1:-1;;;925:20:3;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:3;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:3;;;;;;;;;;773:235::o;14:149:15:-;-1:-1:-1;;;;;107:31:15;;97:42;;87:70;;153:1;150;143:12;87:70;14:149;:::o;168:895::-;366:6;374;382;390;398;406;414;467:3;455:9;446:7;442:23;438:33;435:53;;;484:1;481;474:12;435:53;513:9;507:16;497:26;;563:2;552:9;548:18;542:25;532:35;;607:2;596:9;592:18;586:25;576:35;;651:2;640:9;636:18;630:25;620:35;;698:3;687:9;683:19;677:26;712:49;755:5;712:49;:::i;:::-;830:3;815:19;;809:26;780:5;;-1:-1:-1;844:51:15;809:26;844:51;:::i;:::-;966:3;951:19;;945:26;914:7;;-1:-1:-1;980:51:15;945:26;980:51;:::i;:::-;1050:7;1040:17;;;168:895;;;;;;;;;;:::o;1068:225::-;1135:9;;;1156:11;;;1153:134;;;1209:10;1204:3;1200:20;1197:1;1190:31;1244:4;1241:1;1234:15;1272:4;1269:1;1262:15;1068:225;349:717:14;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@BURN_WEIGHT_TOKEN_1_1007":{"entryPoint":null,"id":1007,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_2_1010":{"entryPoint":null,"id":1010,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_3_1013":{"entryPoint":null,"id":1013,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_4_1016":{"entryPoint":null,"id":1016,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_5_1019":{"entryPoint":null,"id":1019,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_6_1022":{"entryPoint":null,"id":1022,"parameterSlots":0,"returnSlots":0},"@BURN_WEIGHT_TOKEN_7_1025":{"entryPoint":null,"id":1025,"parameterSlots":0,"returnSlots":0},"@CYCLE_DURATION_1043":{"entryPoint":null,"id":1043,"parameterSlots":0,"returnSlots":0},"@INITIAL_TIME_1040":{"entryPoint":null,"id":1040,"parameterSlots":0,"returnSlots":0},"@MAX_CYCLE_1046":{"entryPoint":null,"id":1046,"parameterSlots":0,"returnSlots":0},"@MERKLE_ROOT_1049":{"entryPoint":null,"id":1049,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_1037":{"entryPoint":null,"id":1037,"parameterSlots":0,"returnSlots":0},"@MISSING_ORB_TOKEN_ID_1003":{"entryPoint":null,"id":1003,"parameterSlots":0,"returnSlots":0},"@ORB_OF_POWER_1033":{"entryPoint":null,"id":1033,"parameterSlots":0,"returnSlots":0},"@ROC_MULTIPLIER_1029":{"entryPoint":null,"id":1029,"parameterSlots":0,"returnSlots":0},"@__msgData_1883":{"entryPoint":1189,"id":1883,"parameterSlots":0,"returnSlots":2},"@__msgSender_1873":{"entryPoint":3205,"id":1873,"parameterSlots":0,"returnSlots":1},"@_efficientHash_971":{"entryPoint":null,"id":971,"parameterSlots":2,"returnSlots":1},"@_hashPair_960":{"entryPoint":5385,"id":960,"parameterSlots":2,"returnSlots":1},"@_msgData_1229":{"entryPoint":4537,"id":1229,"parameterSlots":0,"returnSlots":2},"@_msgData_315":{"entryPoint":4580,"id":315,"parameterSlots":0,"returnSlots":2},"@_msgSender_1216":{"entryPoint":4570,"id":1216,"parameterSlots":0,"returnSlots":1},"@_msgSender_267":{"entryPoint":5009,"id":267,"parameterSlots":0,"returnSlots":1},"@currentCycle_1244":{"entryPoint":1208,"id":1244,"parameterSlots":0,"returnSlots":1},"@forwarderRegistry_179":{"entryPoint":null,"id":179,"parameterSlots":0,"returnSlots":1},"@isTrustedForwarder_195":{"entryPoint":null,"id":195,"parameterSlots":1,"returnSlots":1},"@layout_146":{"entryPoint":4273,"id":146,"parameterSlots":0,"returnSlots":1},"@msgData_370":{"entryPoint":5336,"id":370,"parameterSlots":0,"returnSlots":2},"@msgSender_353":{"entryPoint":null,"id":353,"parameterSlots":0,"returnSlots":1},"@onERC1155BatchReceived_1823":{"entryPoint":1300,"id":1823,"parameterSlots":8,"returnSlots":1},"@onERC1155Received_1430":{"entryPoint":3215,"id":1430,"parameterSlots":6,"returnSlots":1},"@orbMultipliers_1066":{"entryPoint":null,"id":1066,"parameterSlots":0,"returnSlots":0},"@processProof_555":{"entryPoint":4942,"id":555,"parameterSlots":2,"returnSlots":1},"@supportsInterface_134":{"entryPoint":4319,"id":134,"parameterSlots":2,"returnSlots":1},"@supportsInterface_28":{"entryPoint":1163,"id":28,"parameterSlots":1,"returnSlots":1},"@totalAshPerCycle_1054":{"entryPoint":null,"id":1054,"parameterSlots":0,"returnSlots":0},"@userAshPerCycle_1061":{"entryPoint":null,"id":1061,"parameterSlots":0,"returnSlots":0},"@verify_494":{"entryPoint":4548,"id":494,"parameterSlots":3,"returnSlots":1},"abi_decode_address":{"entryPoint":5501,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_array_uint256_dyn_calldata":{"entryPoint":5715,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":5791,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":5542,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":5857,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":6044,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256":{"entryPoint":6579,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":6876,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":5435,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5690,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_address":{"entryPoint":5646,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":6289,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":6364,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":6805,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5569,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":6910,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":6513,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":6230,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":6490,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":6211,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":6164,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":6443,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6532,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12317:15","nodeType":"YulBlock","src":"0:12317:15","statements":[{"nativeSrc":"6:3:15","nodeType":"YulBlock","src":"6:3:15","statements":[]},{"body":{"nativeSrc":"83:263:15","nodeType":"YulBlock","src":"83:263:15","statements":[{"body":{"nativeSrc":"129:16:15","nodeType":"YulBlock","src":"129:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:15","nodeType":"YulLiteral","src":"138:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:15","nodeType":"YulLiteral","src":"141:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:15","nodeType":"YulIdentifier","src":"131:6:15"},"nativeSrc":"131:12:15","nodeType":"YulFunctionCall","src":"131:12:15"},"nativeSrc":"131:12:15","nodeType":"YulExpressionStatement","src":"131:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:15","nodeType":"YulIdentifier","src":"104:7:15"},{"name":"headStart","nativeSrc":"113:9:15","nodeType":"YulIdentifier","src":"113:9:15"}],"functionName":{"name":"sub","nativeSrc":"100:3:15","nodeType":"YulIdentifier","src":"100:3:15"},"nativeSrc":"100:23:15","nodeType":"YulFunctionCall","src":"100:23:15"},{"kind":"number","nativeSrc":"125:2:15","nodeType":"YulLiteral","src":"125:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:15","nodeType":"YulIdentifier","src":"96:3:15"},"nativeSrc":"96:32:15","nodeType":"YulFunctionCall","src":"96:32:15"},"nativeSrc":"93:52:15","nodeType":"YulIf","src":"93:52:15"},{"nativeSrc":"154:36:15","nodeType":"YulVariableDeclaration","src":"154:36:15","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:15","nodeType":"YulIdentifier","src":"180:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:15","nodeType":"YulIdentifier","src":"167:12:15"},"nativeSrc":"167:23:15","nodeType":"YulFunctionCall","src":"167:23:15"},"variables":[{"name":"value","nativeSrc":"158:5:15","nodeType":"YulTypedName","src":"158:5:15","type":""}]},{"body":{"nativeSrc":"300:16:15","nodeType":"YulBlock","src":"300:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:15","nodeType":"YulLiteral","src":"309:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:15","nodeType":"YulLiteral","src":"312:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:15","nodeType":"YulIdentifier","src":"302:6:15"},"nativeSrc":"302:12:15","nodeType":"YulFunctionCall","src":"302:12:15"},"nativeSrc":"302:12:15","nodeType":"YulExpressionStatement","src":"302:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:15","nodeType":"YulIdentifier","src":"212:5:15"},{"arguments":[{"name":"value","nativeSrc":"223:5:15","nodeType":"YulIdentifier","src":"223:5:15"},{"kind":"number","nativeSrc":"230:66:15","nodeType":"YulLiteral","src":"230:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:15","nodeType":"YulIdentifier","src":"219:3:15"},"nativeSrc":"219:78:15","nodeType":"YulFunctionCall","src":"219:78:15"}],"functionName":{"name":"eq","nativeSrc":"209:2:15","nodeType":"YulIdentifier","src":"209:2:15"},"nativeSrc":"209:89:15","nodeType":"YulFunctionCall","src":"209:89:15"}],"functionName":{"name":"iszero","nativeSrc":"202:6:15","nodeType":"YulIdentifier","src":"202:6:15"},"nativeSrc":"202:97:15","nodeType":"YulFunctionCall","src":"202:97:15"},"nativeSrc":"199:117:15","nodeType":"YulIf","src":"199:117:15"},{"nativeSrc":"325:15:15","nodeType":"YulAssignment","src":"325:15:15","value":{"name":"value","nativeSrc":"335:5:15","nodeType":"YulIdentifier","src":"335:5:15"},"variableNames":[{"name":"value0","nativeSrc":"325:6:15","nodeType":"YulIdentifier","src":"325:6:15"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:15","nodeType":"YulTypedName","src":"49:9:15","type":""},{"name":"dataEnd","nativeSrc":"60:7:15","nodeType":"YulTypedName","src":"60:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:15","nodeType":"YulTypedName","src":"72:6:15","type":""}],"src":"14:332:15"},{"body":{"nativeSrc":"446:92:15","nodeType":"YulBlock","src":"446:92:15","statements":[{"nativeSrc":"456:26:15","nodeType":"YulAssignment","src":"456:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:15","nodeType":"YulIdentifier","src":"468:9:15"},{"kind":"number","nativeSrc":"479:2:15","nodeType":"YulLiteral","src":"479:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:15","nodeType":"YulIdentifier","src":"464:3:15"},"nativeSrc":"464:18:15","nodeType":"YulFunctionCall","src":"464:18:15"},"variableNames":[{"name":"tail","nativeSrc":"456:4:15","nodeType":"YulIdentifier","src":"456:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:15","nodeType":"YulIdentifier","src":"498:9:15"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:15","nodeType":"YulIdentifier","src":"523:6:15"}],"functionName":{"name":"iszero","nativeSrc":"516:6:15","nodeType":"YulIdentifier","src":"516:6:15"},"nativeSrc":"516:14:15","nodeType":"YulFunctionCall","src":"516:14:15"}],"functionName":{"name":"iszero","nativeSrc":"509:6:15","nodeType":"YulIdentifier","src":"509:6:15"},"nativeSrc":"509:22:15","nodeType":"YulFunctionCall","src":"509:22:15"}],"functionName":{"name":"mstore","nativeSrc":"491:6:15","nodeType":"YulIdentifier","src":"491:6:15"},"nativeSrc":"491:41:15","nodeType":"YulFunctionCall","src":"491:41:15"},"nativeSrc":"491:41:15","nodeType":"YulExpressionStatement","src":"491:41:15"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:15","nodeType":"YulTypedName","src":"415:9:15","type":""},{"name":"value0","nativeSrc":"426:6:15","nodeType":"YulTypedName","src":"426:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:15","nodeType":"YulTypedName","src":"437:4:15","type":""}],"src":"351:187:15"},{"body":{"nativeSrc":"644:76:15","nodeType":"YulBlock","src":"644:76:15","statements":[{"nativeSrc":"654:26:15","nodeType":"YulAssignment","src":"654:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:15","nodeType":"YulIdentifier","src":"666:9:15"},{"kind":"number","nativeSrc":"677:2:15","nodeType":"YulLiteral","src":"677:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:15","nodeType":"YulIdentifier","src":"662:3:15"},"nativeSrc":"662:18:15","nodeType":"YulFunctionCall","src":"662:18:15"},"variableNames":[{"name":"tail","nativeSrc":"654:4:15","nodeType":"YulIdentifier","src":"654:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:15","nodeType":"YulIdentifier","src":"696:9:15"},{"name":"value0","nativeSrc":"707:6:15","nodeType":"YulIdentifier","src":"707:6:15"}],"functionName":{"name":"mstore","nativeSrc":"689:6:15","nodeType":"YulIdentifier","src":"689:6:15"},"nativeSrc":"689:25:15","nodeType":"YulFunctionCall","src":"689:25:15"},"nativeSrc":"689:25:15","nodeType":"YulExpressionStatement","src":"689:25:15"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:15","nodeType":"YulTypedName","src":"613:9:15","type":""},{"name":"value0","nativeSrc":"624:6:15","nodeType":"YulTypedName","src":"624:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:15","nodeType":"YulTypedName","src":"635:4:15","type":""}],"src":"543:177:15"},{"body":{"nativeSrc":"774:147:15","nodeType":"YulBlock","src":"774:147:15","statements":[{"nativeSrc":"784:29:15","nodeType":"YulAssignment","src":"784:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"806:6:15","nodeType":"YulIdentifier","src":"806:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"793:12:15","nodeType":"YulIdentifier","src":"793:12:15"},"nativeSrc":"793:20:15","nodeType":"YulFunctionCall","src":"793:20:15"},"variableNames":[{"name":"value","nativeSrc":"784:5:15","nodeType":"YulIdentifier","src":"784:5:15"}]},{"body":{"nativeSrc":"899:16:15","nodeType":"YulBlock","src":"899:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"908:1:15","nodeType":"YulLiteral","src":"908:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"911:1:15","nodeType":"YulLiteral","src":"911:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"901:6:15","nodeType":"YulIdentifier","src":"901:6:15"},"nativeSrc":"901:12:15","nodeType":"YulFunctionCall","src":"901:12:15"},"nativeSrc":"901:12:15","nodeType":"YulExpressionStatement","src":"901:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"835:5:15","nodeType":"YulIdentifier","src":"835:5:15"},{"arguments":[{"name":"value","nativeSrc":"846:5:15","nodeType":"YulIdentifier","src":"846:5:15"},{"kind":"number","nativeSrc":"853:42:15","nodeType":"YulLiteral","src":"853:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"842:3:15","nodeType":"YulIdentifier","src":"842:3:15"},"nativeSrc":"842:54:15","nodeType":"YulFunctionCall","src":"842:54:15"}],"functionName":{"name":"eq","nativeSrc":"832:2:15","nodeType":"YulIdentifier","src":"832:2:15"},"nativeSrc":"832:65:15","nodeType":"YulFunctionCall","src":"832:65:15"}],"functionName":{"name":"iszero","nativeSrc":"825:6:15","nodeType":"YulIdentifier","src":"825:6:15"},"nativeSrc":"825:73:15","nodeType":"YulFunctionCall","src":"825:73:15"},"nativeSrc":"822:93:15","nodeType":"YulIf","src":"822:93:15"}]},"name":"abi_decode_address","nativeSrc":"725:196:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"753:6:15","nodeType":"YulTypedName","src":"753:6:15","type":""}],"returnVariables":[{"name":"value","nativeSrc":"764:5:15","nodeType":"YulTypedName","src":"764:5:15","type":""}],"src":"725:196:15"},{"body":{"nativeSrc":"996:116:15","nodeType":"YulBlock","src":"996:116:15","statements":[{"body":{"nativeSrc":"1042:16:15","nodeType":"YulBlock","src":"1042:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1051:1:15","nodeType":"YulLiteral","src":"1051:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"1054:1:15","nodeType":"YulLiteral","src":"1054:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1044:6:15","nodeType":"YulIdentifier","src":"1044:6:15"},"nativeSrc":"1044:12:15","nodeType":"YulFunctionCall","src":"1044:12:15"},"nativeSrc":"1044:12:15","nodeType":"YulExpressionStatement","src":"1044:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1017:7:15","nodeType":"YulIdentifier","src":"1017:7:15"},{"name":"headStart","nativeSrc":"1026:9:15","nodeType":"YulIdentifier","src":"1026:9:15"}],"functionName":{"name":"sub","nativeSrc":"1013:3:15","nodeType":"YulIdentifier","src":"1013:3:15"},"nativeSrc":"1013:23:15","nodeType":"YulFunctionCall","src":"1013:23:15"},{"kind":"number","nativeSrc":"1038:2:15","nodeType":"YulLiteral","src":"1038:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1009:3:15","nodeType":"YulIdentifier","src":"1009:3:15"},"nativeSrc":"1009:32:15","nodeType":"YulFunctionCall","src":"1009:32:15"},"nativeSrc":"1006:52:15","nodeType":"YulIf","src":"1006:52:15"},{"nativeSrc":"1067:39:15","nodeType":"YulAssignment","src":"1067:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1096:9:15","nodeType":"YulIdentifier","src":"1096:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"1077:18:15","nodeType":"YulIdentifier","src":"1077:18:15"},"nativeSrc":"1077:29:15","nodeType":"YulFunctionCall","src":"1077:29:15"},"variableNames":[{"name":"value0","nativeSrc":"1067:6:15","nodeType":"YulIdentifier","src":"1067:6:15"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"926:186:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"962:9:15","nodeType":"YulTypedName","src":"962:9:15","type":""},{"name":"dataEnd","nativeSrc":"973:7:15","nodeType":"YulTypedName","src":"973:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"985:6:15","nodeType":"YulTypedName","src":"985:6:15","type":""}],"src":"926:186:15"},{"body":{"nativeSrc":"1242:125:15","nodeType":"YulBlock","src":"1242:125:15","statements":[{"nativeSrc":"1252:26:15","nodeType":"YulAssignment","src":"1252:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1264:9:15","nodeType":"YulIdentifier","src":"1264:9:15"},{"kind":"number","nativeSrc":"1275:2:15","nodeType":"YulLiteral","src":"1275:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1260:3:15","nodeType":"YulIdentifier","src":"1260:3:15"},"nativeSrc":"1260:18:15","nodeType":"YulFunctionCall","src":"1260:18:15"},"variableNames":[{"name":"tail","nativeSrc":"1252:4:15","nodeType":"YulIdentifier","src":"1252:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1294:9:15","nodeType":"YulIdentifier","src":"1294:9:15"},{"arguments":[{"name":"value0","nativeSrc":"1309:6:15","nodeType":"YulIdentifier","src":"1309:6:15"},{"kind":"number","nativeSrc":"1317:42:15","nodeType":"YulLiteral","src":"1317:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1305:3:15","nodeType":"YulIdentifier","src":"1305:3:15"},"nativeSrc":"1305:55:15","nodeType":"YulFunctionCall","src":"1305:55:15"}],"functionName":{"name":"mstore","nativeSrc":"1287:6:15","nodeType":"YulIdentifier","src":"1287:6:15"},"nativeSrc":"1287:74:15","nodeType":"YulFunctionCall","src":"1287:74:15"},"nativeSrc":"1287:74:15","nodeType":"YulExpressionStatement","src":"1287:74:15"}]},"name":"abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed","nativeSrc":"1117:250:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1211:9:15","nodeType":"YulTypedName","src":"1211:9:15","type":""},{"name":"value0","nativeSrc":"1222:6:15","nodeType":"YulTypedName","src":"1222:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1233:4:15","nodeType":"YulTypedName","src":"1233:4:15","type":""}],"src":"1117:250:15"},{"body":{"nativeSrc":"1499:125:15","nodeType":"YulBlock","src":"1499:125:15","statements":[{"nativeSrc":"1509:26:15","nodeType":"YulAssignment","src":"1509:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"1521:9:15","nodeType":"YulIdentifier","src":"1521:9:15"},{"kind":"number","nativeSrc":"1532:2:15","nodeType":"YulLiteral","src":"1532:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1517:3:15","nodeType":"YulIdentifier","src":"1517:3:15"},"nativeSrc":"1517:18:15","nodeType":"YulFunctionCall","src":"1517:18:15"},"variableNames":[{"name":"tail","nativeSrc":"1509:4:15","nodeType":"YulIdentifier","src":"1509:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1551:9:15","nodeType":"YulIdentifier","src":"1551:9:15"},{"arguments":[{"name":"value0","nativeSrc":"1566:6:15","nodeType":"YulIdentifier","src":"1566:6:15"},{"kind":"number","nativeSrc":"1574:42:15","nodeType":"YulLiteral","src":"1574:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1562:3:15","nodeType":"YulIdentifier","src":"1562:3:15"},"nativeSrc":"1562:55:15","nodeType":"YulFunctionCall","src":"1562:55:15"}],"functionName":{"name":"mstore","nativeSrc":"1544:6:15","nodeType":"YulIdentifier","src":"1544:6:15"},"nativeSrc":"1544:74:15","nodeType":"YulFunctionCall","src":"1544:74:15"},"nativeSrc":"1544:74:15","nodeType":"YulExpressionStatement","src":"1544:74:15"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed","nativeSrc":"1372:252:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1468:9:15","nodeType":"YulTypedName","src":"1468:9:15","type":""},{"name":"value0","nativeSrc":"1479:6:15","nodeType":"YulTypedName","src":"1479:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1490:4:15","nodeType":"YulTypedName","src":"1490:4:15","type":""}],"src":"1372:252:15"},{"body":{"nativeSrc":"1758:318:15","nodeType":"YulBlock","src":"1758:318:15","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1775:9:15","nodeType":"YulIdentifier","src":"1775:9:15"},{"kind":"number","nativeSrc":"1786:2:15","nodeType":"YulLiteral","src":"1786:2:15","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1768:6:15","nodeType":"YulIdentifier","src":"1768:6:15"},"nativeSrc":"1768:21:15","nodeType":"YulFunctionCall","src":"1768:21:15"},"nativeSrc":"1768:21:15","nodeType":"YulExpressionStatement","src":"1768:21:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1809:9:15","nodeType":"YulIdentifier","src":"1809:9:15"},{"kind":"number","nativeSrc":"1820:2:15","nodeType":"YulLiteral","src":"1820:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1805:3:15","nodeType":"YulIdentifier","src":"1805:3:15"},"nativeSrc":"1805:18:15","nodeType":"YulFunctionCall","src":"1805:18:15"},{"name":"value1","nativeSrc":"1825:6:15","nodeType":"YulIdentifier","src":"1825:6:15"}],"functionName":{"name":"mstore","nativeSrc":"1798:6:15","nodeType":"YulIdentifier","src":"1798:6:15"},"nativeSrc":"1798:34:15","nodeType":"YulFunctionCall","src":"1798:34:15"},"nativeSrc":"1798:34:15","nodeType":"YulExpressionStatement","src":"1798:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1858:9:15","nodeType":"YulIdentifier","src":"1858:9:15"},{"kind":"number","nativeSrc":"1869:2:15","nodeType":"YulLiteral","src":"1869:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1854:3:15","nodeType":"YulIdentifier","src":"1854:3:15"},"nativeSrc":"1854:18:15","nodeType":"YulFunctionCall","src":"1854:18:15"},{"name":"value0","nativeSrc":"1874:6:15","nodeType":"YulIdentifier","src":"1874:6:15"},{"name":"value1","nativeSrc":"1882:6:15","nodeType":"YulIdentifier","src":"1882:6:15"}],"functionName":{"name":"calldatacopy","nativeSrc":"1841:12:15","nodeType":"YulIdentifier","src":"1841:12:15"},"nativeSrc":"1841:48:15","nodeType":"YulFunctionCall","src":"1841:48:15"},"nativeSrc":"1841:48:15","nodeType":"YulExpressionStatement","src":"1841:48:15"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1913:9:15","nodeType":"YulIdentifier","src":"1913:9:15"},{"name":"value1","nativeSrc":"1924:6:15","nodeType":"YulIdentifier","src":"1924:6:15"}],"functionName":{"name":"add","nativeSrc":"1909:3:15","nodeType":"YulIdentifier","src":"1909:3:15"},"nativeSrc":"1909:22:15","nodeType":"YulFunctionCall","src":"1909:22:15"},{"kind":"number","nativeSrc":"1933:2:15","nodeType":"YulLiteral","src":"1933:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1905:3:15","nodeType":"YulIdentifier","src":"1905:3:15"},"nativeSrc":"1905:31:15","nodeType":"YulFunctionCall","src":"1905:31:15"},{"kind":"number","nativeSrc":"1938:1:15","nodeType":"YulLiteral","src":"1938:1:15","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"1898:6:15","nodeType":"YulIdentifier","src":"1898:6:15"},"nativeSrc":"1898:42:15","nodeType":"YulFunctionCall","src":"1898:42:15"},"nativeSrc":"1898:42:15","nodeType":"YulExpressionStatement","src":"1898:42:15"},{"nativeSrc":"1949:121:15","nodeType":"YulAssignment","src":"1949:121:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1965:9:15","nodeType":"YulIdentifier","src":"1965:9:15"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"1984:6:15","nodeType":"YulIdentifier","src":"1984:6:15"},{"kind":"number","nativeSrc":"1992:2:15","nodeType":"YulLiteral","src":"1992:2:15","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1980:3:15","nodeType":"YulIdentifier","src":"1980:3:15"},"nativeSrc":"1980:15:15","nodeType":"YulFunctionCall","src":"1980:15:15"},{"kind":"number","nativeSrc":"1997:66:15","nodeType":"YulLiteral","src":"1997:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1976:3:15","nodeType":"YulIdentifier","src":"1976:3:15"},"nativeSrc":"1976:88:15","nodeType":"YulFunctionCall","src":"1976:88:15"}],"functionName":{"name":"add","nativeSrc":"1961:3:15","nodeType":"YulIdentifier","src":"1961:3:15"},"nativeSrc":"1961:104:15","nodeType":"YulFunctionCall","src":"1961:104:15"},{"kind":"number","nativeSrc":"2067:2:15","nodeType":"YulLiteral","src":"2067:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1957:3:15","nodeType":"YulIdentifier","src":"1957:3:15"},"nativeSrc":"1957:113:15","nodeType":"YulFunctionCall","src":"1957:113:15"},"variableNames":[{"name":"tail","nativeSrc":"1949:4:15","nodeType":"YulIdentifier","src":"1949:4:15"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"1629:447:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1719:9:15","nodeType":"YulTypedName","src":"1719:9:15","type":""},{"name":"value1","nativeSrc":"1730:6:15","nodeType":"YulTypedName","src":"1730:6:15","type":""},{"name":"value0","nativeSrc":"1738:6:15","nodeType":"YulTypedName","src":"1738:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1749:4:15","nodeType":"YulTypedName","src":"1749:4:15","type":""}],"src":"1629:447:15"},{"body":{"nativeSrc":"2168:167:15","nodeType":"YulBlock","src":"2168:167:15","statements":[{"body":{"nativeSrc":"2214:16:15","nodeType":"YulBlock","src":"2214:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2223:1:15","nodeType":"YulLiteral","src":"2223:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2226:1:15","nodeType":"YulLiteral","src":"2226:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2216:6:15","nodeType":"YulIdentifier","src":"2216:6:15"},"nativeSrc":"2216:12:15","nodeType":"YulFunctionCall","src":"2216:12:15"},"nativeSrc":"2216:12:15","nodeType":"YulExpressionStatement","src":"2216:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2189:7:15","nodeType":"YulIdentifier","src":"2189:7:15"},{"name":"headStart","nativeSrc":"2198:9:15","nodeType":"YulIdentifier","src":"2198:9:15"}],"functionName":{"name":"sub","nativeSrc":"2185:3:15","nodeType":"YulIdentifier","src":"2185:3:15"},"nativeSrc":"2185:23:15","nodeType":"YulFunctionCall","src":"2185:23:15"},{"kind":"number","nativeSrc":"2210:2:15","nodeType":"YulLiteral","src":"2210:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2181:3:15","nodeType":"YulIdentifier","src":"2181:3:15"},"nativeSrc":"2181:32:15","nodeType":"YulFunctionCall","src":"2181:32:15"},"nativeSrc":"2178:52:15","nodeType":"YulIf","src":"2178:52:15"},{"nativeSrc":"2239:33:15","nodeType":"YulAssignment","src":"2239:33:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2262:9:15","nodeType":"YulIdentifier","src":"2262:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"2249:12:15","nodeType":"YulIdentifier","src":"2249:12:15"},"nativeSrc":"2249:23:15","nodeType":"YulFunctionCall","src":"2249:23:15"},"variableNames":[{"name":"value0","nativeSrc":"2239:6:15","nodeType":"YulIdentifier","src":"2239:6:15"}]},{"nativeSrc":"2281:48:15","nodeType":"YulAssignment","src":"2281:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2314:9:15","nodeType":"YulIdentifier","src":"2314:9:15"},{"kind":"number","nativeSrc":"2325:2:15","nodeType":"YulLiteral","src":"2325:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2310:3:15","nodeType":"YulIdentifier","src":"2310:3:15"},"nativeSrc":"2310:18:15","nodeType":"YulFunctionCall","src":"2310:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"2291:18:15","nodeType":"YulIdentifier","src":"2291:18:15"},"nativeSrc":"2291:38:15","nodeType":"YulFunctionCall","src":"2291:38:15"},"variableNames":[{"name":"value1","nativeSrc":"2281:6:15","nodeType":"YulIdentifier","src":"2281:6:15"}]}]},"name":"abi_decode_tuple_t_uint256t_address","nativeSrc":"2081:254:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2126:9:15","nodeType":"YulTypedName","src":"2126:9:15","type":""},{"name":"dataEnd","nativeSrc":"2137:7:15","nodeType":"YulTypedName","src":"2137:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2149:6:15","nodeType":"YulTypedName","src":"2149:6:15","type":""},{"name":"value1","nativeSrc":"2157:6:15","nodeType":"YulTypedName","src":"2157:6:15","type":""}],"src":"2081:254:15"},{"body":{"nativeSrc":"2441:76:15","nodeType":"YulBlock","src":"2441:76:15","statements":[{"nativeSrc":"2451:26:15","nodeType":"YulAssignment","src":"2451:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2463:9:15","nodeType":"YulIdentifier","src":"2463:9:15"},{"kind":"number","nativeSrc":"2474:2:15","nodeType":"YulLiteral","src":"2474:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2459:3:15","nodeType":"YulIdentifier","src":"2459:3:15"},"nativeSrc":"2459:18:15","nodeType":"YulFunctionCall","src":"2459:18:15"},"variableNames":[{"name":"tail","nativeSrc":"2451:4:15","nodeType":"YulIdentifier","src":"2451:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2493:9:15","nodeType":"YulIdentifier","src":"2493:9:15"},{"name":"value0","nativeSrc":"2504:6:15","nodeType":"YulIdentifier","src":"2504:6:15"}],"functionName":{"name":"mstore","nativeSrc":"2486:6:15","nodeType":"YulIdentifier","src":"2486:6:15"},"nativeSrc":"2486:25:15","nodeType":"YulFunctionCall","src":"2486:25:15"},"nativeSrc":"2486:25:15","nodeType":"YulExpressionStatement","src":"2486:25:15"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2340:177:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2410:9:15","nodeType":"YulTypedName","src":"2410:9:15","type":""},{"name":"value0","nativeSrc":"2421:6:15","nodeType":"YulTypedName","src":"2421:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2432:4:15","nodeType":"YulTypedName","src":"2432:4:15","type":""}],"src":"2340:177:15"},{"body":{"nativeSrc":"2592:110:15","nodeType":"YulBlock","src":"2592:110:15","statements":[{"body":{"nativeSrc":"2638:16:15","nodeType":"YulBlock","src":"2638:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2647:1:15","nodeType":"YulLiteral","src":"2647:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2650:1:15","nodeType":"YulLiteral","src":"2650:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2640:6:15","nodeType":"YulIdentifier","src":"2640:6:15"},"nativeSrc":"2640:12:15","nodeType":"YulFunctionCall","src":"2640:12:15"},"nativeSrc":"2640:12:15","nodeType":"YulExpressionStatement","src":"2640:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2613:7:15","nodeType":"YulIdentifier","src":"2613:7:15"},{"name":"headStart","nativeSrc":"2622:9:15","nodeType":"YulIdentifier","src":"2622:9:15"}],"functionName":{"name":"sub","nativeSrc":"2609:3:15","nodeType":"YulIdentifier","src":"2609:3:15"},"nativeSrc":"2609:23:15","nodeType":"YulFunctionCall","src":"2609:23:15"},{"kind":"number","nativeSrc":"2634:2:15","nodeType":"YulLiteral","src":"2634:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2605:3:15","nodeType":"YulIdentifier","src":"2605:3:15"},"nativeSrc":"2605:32:15","nodeType":"YulFunctionCall","src":"2605:32:15"},"nativeSrc":"2602:52:15","nodeType":"YulIf","src":"2602:52:15"},{"nativeSrc":"2663:33:15","nodeType":"YulAssignment","src":"2663:33:15","value":{"arguments":[{"name":"headStart","nativeSrc":"2686:9:15","nodeType":"YulIdentifier","src":"2686:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"2673:12:15","nodeType":"YulIdentifier","src":"2673:12:15"},"nativeSrc":"2673:23:15","nodeType":"YulFunctionCall","src":"2673:23:15"},"variableNames":[{"name":"value0","nativeSrc":"2663:6:15","nodeType":"YulIdentifier","src":"2663:6:15"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"2522:180:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2558:9:15","nodeType":"YulTypedName","src":"2558:9:15","type":""},{"name":"dataEnd","nativeSrc":"2569:7:15","nodeType":"YulTypedName","src":"2569:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2581:6:15","nodeType":"YulTypedName","src":"2581:6:15","type":""}],"src":"2522:180:15"},{"body":{"nativeSrc":"2791:283:15","nodeType":"YulBlock","src":"2791:283:15","statements":[{"body":{"nativeSrc":"2840:16:15","nodeType":"YulBlock","src":"2840:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2849:1:15","nodeType":"YulLiteral","src":"2849:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2852:1:15","nodeType":"YulLiteral","src":"2852:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2842:6:15","nodeType":"YulIdentifier","src":"2842:6:15"},"nativeSrc":"2842:12:15","nodeType":"YulFunctionCall","src":"2842:12:15"},"nativeSrc":"2842:12:15","nodeType":"YulExpressionStatement","src":"2842:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"2819:6:15","nodeType":"YulIdentifier","src":"2819:6:15"},{"kind":"number","nativeSrc":"2827:4:15","nodeType":"YulLiteral","src":"2827:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2815:3:15","nodeType":"YulIdentifier","src":"2815:3:15"},"nativeSrc":"2815:17:15","nodeType":"YulFunctionCall","src":"2815:17:15"},{"name":"end","nativeSrc":"2834:3:15","nodeType":"YulIdentifier","src":"2834:3:15"}],"functionName":{"name":"slt","nativeSrc":"2811:3:15","nodeType":"YulIdentifier","src":"2811:3:15"},"nativeSrc":"2811:27:15","nodeType":"YulFunctionCall","src":"2811:27:15"}],"functionName":{"name":"iszero","nativeSrc":"2804:6:15","nodeType":"YulIdentifier","src":"2804:6:15"},"nativeSrc":"2804:35:15","nodeType":"YulFunctionCall","src":"2804:35:15"},"nativeSrc":"2801:55:15","nodeType":"YulIf","src":"2801:55:15"},{"nativeSrc":"2865:30:15","nodeType":"YulAssignment","src":"2865:30:15","value":{"arguments":[{"name":"offset","nativeSrc":"2888:6:15","nodeType":"YulIdentifier","src":"2888:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"2875:12:15","nodeType":"YulIdentifier","src":"2875:12:15"},"nativeSrc":"2875:20:15","nodeType":"YulFunctionCall","src":"2875:20:15"},"variableNames":[{"name":"length","nativeSrc":"2865:6:15","nodeType":"YulIdentifier","src":"2865:6:15"}]},{"body":{"nativeSrc":"2938:16:15","nodeType":"YulBlock","src":"2938:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2947:1:15","nodeType":"YulLiteral","src":"2947:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"2950:1:15","nodeType":"YulLiteral","src":"2950:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2940:6:15","nodeType":"YulIdentifier","src":"2940:6:15"},"nativeSrc":"2940:12:15","nodeType":"YulFunctionCall","src":"2940:12:15"},"nativeSrc":"2940:12:15","nodeType":"YulExpressionStatement","src":"2940:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2910:6:15","nodeType":"YulIdentifier","src":"2910:6:15"},{"kind":"number","nativeSrc":"2918:18:15","nodeType":"YulLiteral","src":"2918:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"2907:2:15","nodeType":"YulIdentifier","src":"2907:2:15"},"nativeSrc":"2907:30:15","nodeType":"YulFunctionCall","src":"2907:30:15"},"nativeSrc":"2904:50:15","nodeType":"YulIf","src":"2904:50:15"},{"nativeSrc":"2963:29:15","nodeType":"YulAssignment","src":"2963:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"2979:6:15","nodeType":"YulIdentifier","src":"2979:6:15"},{"kind":"number","nativeSrc":"2987:4:15","nodeType":"YulLiteral","src":"2987:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2975:3:15","nodeType":"YulIdentifier","src":"2975:3:15"},"nativeSrc":"2975:17:15","nodeType":"YulFunctionCall","src":"2975:17:15"},"variableNames":[{"name":"arrayPos","nativeSrc":"2963:8:15","nodeType":"YulIdentifier","src":"2963:8:15"}]},{"body":{"nativeSrc":"3052:16:15","nodeType":"YulBlock","src":"3052:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3061:1:15","nodeType":"YulLiteral","src":"3061:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3064:1:15","nodeType":"YulLiteral","src":"3064:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3054:6:15","nodeType":"YulIdentifier","src":"3054:6:15"},"nativeSrc":"3054:12:15","nodeType":"YulFunctionCall","src":"3054:12:15"},"nativeSrc":"3054:12:15","nodeType":"YulExpressionStatement","src":"3054:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3015:6:15","nodeType":"YulIdentifier","src":"3015:6:15"},{"arguments":[{"kind":"number","nativeSrc":"3027:1:15","nodeType":"YulLiteral","src":"3027:1:15","type":"","value":"5"},{"name":"length","nativeSrc":"3030:6:15","nodeType":"YulIdentifier","src":"3030:6:15"}],"functionName":{"name":"shl","nativeSrc":"3023:3:15","nodeType":"YulIdentifier","src":"3023:3:15"},"nativeSrc":"3023:14:15","nodeType":"YulFunctionCall","src":"3023:14:15"}],"functionName":{"name":"add","nativeSrc":"3011:3:15","nodeType":"YulIdentifier","src":"3011:3:15"},"nativeSrc":"3011:27:15","nodeType":"YulFunctionCall","src":"3011:27:15"},{"kind":"number","nativeSrc":"3040:4:15","nodeType":"YulLiteral","src":"3040:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3007:3:15","nodeType":"YulIdentifier","src":"3007:3:15"},"nativeSrc":"3007:38:15","nodeType":"YulFunctionCall","src":"3007:38:15"},{"name":"end","nativeSrc":"3047:3:15","nodeType":"YulIdentifier","src":"3047:3:15"}],"functionName":{"name":"gt","nativeSrc":"3004:2:15","nodeType":"YulIdentifier","src":"3004:2:15"},"nativeSrc":"3004:47:15","nodeType":"YulFunctionCall","src":"3004:47:15"},"nativeSrc":"3001:67:15","nodeType":"YulIf","src":"3001:67:15"}]},"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"2707:367:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"2754:6:15","nodeType":"YulTypedName","src":"2754:6:15","type":""},{"name":"end","nativeSrc":"2762:3:15","nodeType":"YulTypedName","src":"2762:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"2770:8:15","nodeType":"YulTypedName","src":"2770:8:15","type":""},{"name":"length","nativeSrc":"2780:6:15","nodeType":"YulTypedName","src":"2780:6:15","type":""}],"src":"2707:367:15"},{"body":{"nativeSrc":"3151:275:15","nodeType":"YulBlock","src":"3151:275:15","statements":[{"body":{"nativeSrc":"3200:16:15","nodeType":"YulBlock","src":"3200:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3209:1:15","nodeType":"YulLiteral","src":"3209:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3212:1:15","nodeType":"YulLiteral","src":"3212:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3202:6:15","nodeType":"YulIdentifier","src":"3202:6:15"},"nativeSrc":"3202:12:15","nodeType":"YulFunctionCall","src":"3202:12:15"},"nativeSrc":"3202:12:15","nodeType":"YulExpressionStatement","src":"3202:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3179:6:15","nodeType":"YulIdentifier","src":"3179:6:15"},{"kind":"number","nativeSrc":"3187:4:15","nodeType":"YulLiteral","src":"3187:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3175:3:15","nodeType":"YulIdentifier","src":"3175:3:15"},"nativeSrc":"3175:17:15","nodeType":"YulFunctionCall","src":"3175:17:15"},{"name":"end","nativeSrc":"3194:3:15","nodeType":"YulIdentifier","src":"3194:3:15"}],"functionName":{"name":"slt","nativeSrc":"3171:3:15","nodeType":"YulIdentifier","src":"3171:3:15"},"nativeSrc":"3171:27:15","nodeType":"YulFunctionCall","src":"3171:27:15"}],"functionName":{"name":"iszero","nativeSrc":"3164:6:15","nodeType":"YulIdentifier","src":"3164:6:15"},"nativeSrc":"3164:35:15","nodeType":"YulFunctionCall","src":"3164:35:15"},"nativeSrc":"3161:55:15","nodeType":"YulIf","src":"3161:55:15"},{"nativeSrc":"3225:30:15","nodeType":"YulAssignment","src":"3225:30:15","value":{"arguments":[{"name":"offset","nativeSrc":"3248:6:15","nodeType":"YulIdentifier","src":"3248:6:15"}],"functionName":{"name":"calldataload","nativeSrc":"3235:12:15","nodeType":"YulIdentifier","src":"3235:12:15"},"nativeSrc":"3235:20:15","nodeType":"YulFunctionCall","src":"3235:20:15"},"variableNames":[{"name":"length","nativeSrc":"3225:6:15","nodeType":"YulIdentifier","src":"3225:6:15"}]},{"body":{"nativeSrc":"3298:16:15","nodeType":"YulBlock","src":"3298:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3307:1:15","nodeType":"YulLiteral","src":"3307:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3310:1:15","nodeType":"YulLiteral","src":"3310:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3300:6:15","nodeType":"YulIdentifier","src":"3300:6:15"},"nativeSrc":"3300:12:15","nodeType":"YulFunctionCall","src":"3300:12:15"},"nativeSrc":"3300:12:15","nodeType":"YulExpressionStatement","src":"3300:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3270:6:15","nodeType":"YulIdentifier","src":"3270:6:15"},{"kind":"number","nativeSrc":"3278:18:15","nodeType":"YulLiteral","src":"3278:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3267:2:15","nodeType":"YulIdentifier","src":"3267:2:15"},"nativeSrc":"3267:30:15","nodeType":"YulFunctionCall","src":"3267:30:15"},"nativeSrc":"3264:50:15","nodeType":"YulIf","src":"3264:50:15"},{"nativeSrc":"3323:29:15","nodeType":"YulAssignment","src":"3323:29:15","value":{"arguments":[{"name":"offset","nativeSrc":"3339:6:15","nodeType":"YulIdentifier","src":"3339:6:15"},{"kind":"number","nativeSrc":"3347:4:15","nodeType":"YulLiteral","src":"3347:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3335:3:15","nodeType":"YulIdentifier","src":"3335:3:15"},"nativeSrc":"3335:17:15","nodeType":"YulFunctionCall","src":"3335:17:15"},"variableNames":[{"name":"arrayPos","nativeSrc":"3323:8:15","nodeType":"YulIdentifier","src":"3323:8:15"}]},{"body":{"nativeSrc":"3404:16:15","nodeType":"YulBlock","src":"3404:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3413:1:15","nodeType":"YulLiteral","src":"3413:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3416:1:15","nodeType":"YulLiteral","src":"3416:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3406:6:15","nodeType":"YulIdentifier","src":"3406:6:15"},"nativeSrc":"3406:12:15","nodeType":"YulFunctionCall","src":"3406:12:15"},"nativeSrc":"3406:12:15","nodeType":"YulExpressionStatement","src":"3406:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"3375:6:15","nodeType":"YulIdentifier","src":"3375:6:15"},{"name":"length","nativeSrc":"3383:6:15","nodeType":"YulIdentifier","src":"3383:6:15"}],"functionName":{"name":"add","nativeSrc":"3371:3:15","nodeType":"YulIdentifier","src":"3371:3:15"},"nativeSrc":"3371:19:15","nodeType":"YulFunctionCall","src":"3371:19:15"},{"kind":"number","nativeSrc":"3392:4:15","nodeType":"YulLiteral","src":"3392:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3367:3:15","nodeType":"YulIdentifier","src":"3367:3:15"},"nativeSrc":"3367:30:15","nodeType":"YulFunctionCall","src":"3367:30:15"},{"name":"end","nativeSrc":"3399:3:15","nodeType":"YulIdentifier","src":"3399:3:15"}],"functionName":{"name":"gt","nativeSrc":"3364:2:15","nodeType":"YulIdentifier","src":"3364:2:15"},"nativeSrc":"3364:39:15","nodeType":"YulFunctionCall","src":"3364:39:15"},"nativeSrc":"3361:59:15","nodeType":"YulIf","src":"3361:59:15"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"3079:347:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3114:6:15","nodeType":"YulTypedName","src":"3114:6:15","type":""},{"name":"end","nativeSrc":"3122:3:15","nodeType":"YulTypedName","src":"3122:3:15","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"3130:8:15","nodeType":"YulTypedName","src":"3130:8:15","type":""},{"name":"length","nativeSrc":"3140:6:15","nodeType":"YulTypedName","src":"3140:6:15","type":""}],"src":"3079:347:15"},{"body":{"nativeSrc":"3658:983:15","nodeType":"YulBlock","src":"3658:983:15","statements":[{"body":{"nativeSrc":"3705:16:15","nodeType":"YulBlock","src":"3705:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3714:1:15","nodeType":"YulLiteral","src":"3714:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3717:1:15","nodeType":"YulLiteral","src":"3717:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3707:6:15","nodeType":"YulIdentifier","src":"3707:6:15"},"nativeSrc":"3707:12:15","nodeType":"YulFunctionCall","src":"3707:12:15"},"nativeSrc":"3707:12:15","nodeType":"YulExpressionStatement","src":"3707:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3679:7:15","nodeType":"YulIdentifier","src":"3679:7:15"},{"name":"headStart","nativeSrc":"3688:9:15","nodeType":"YulIdentifier","src":"3688:9:15"}],"functionName":{"name":"sub","nativeSrc":"3675:3:15","nodeType":"YulIdentifier","src":"3675:3:15"},"nativeSrc":"3675:23:15","nodeType":"YulFunctionCall","src":"3675:23:15"},{"kind":"number","nativeSrc":"3700:3:15","nodeType":"YulLiteral","src":"3700:3:15","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"3671:3:15","nodeType":"YulIdentifier","src":"3671:3:15"},"nativeSrc":"3671:33:15","nodeType":"YulFunctionCall","src":"3671:33:15"},"nativeSrc":"3668:53:15","nodeType":"YulIf","src":"3668:53:15"},{"nativeSrc":"3730:39:15","nodeType":"YulAssignment","src":"3730:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"3759:9:15","nodeType":"YulIdentifier","src":"3759:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3740:18:15","nodeType":"YulIdentifier","src":"3740:18:15"},"nativeSrc":"3740:29:15","nodeType":"YulFunctionCall","src":"3740:29:15"},"variableNames":[{"name":"value0","nativeSrc":"3730:6:15","nodeType":"YulIdentifier","src":"3730:6:15"}]},{"nativeSrc":"3778:48:15","nodeType":"YulAssignment","src":"3778:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3811:9:15","nodeType":"YulIdentifier","src":"3811:9:15"},{"kind":"number","nativeSrc":"3822:2:15","nodeType":"YulLiteral","src":"3822:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3807:3:15","nodeType":"YulIdentifier","src":"3807:3:15"},"nativeSrc":"3807:18:15","nodeType":"YulFunctionCall","src":"3807:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3788:18:15","nodeType":"YulIdentifier","src":"3788:18:15"},"nativeSrc":"3788:38:15","nodeType":"YulFunctionCall","src":"3788:38:15"},"variableNames":[{"name":"value1","nativeSrc":"3778:6:15","nodeType":"YulIdentifier","src":"3778:6:15"}]},{"nativeSrc":"3835:46:15","nodeType":"YulVariableDeclaration","src":"3835:46:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3866:9:15","nodeType":"YulIdentifier","src":"3866:9:15"},{"kind":"number","nativeSrc":"3877:2:15","nodeType":"YulLiteral","src":"3877:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3862:3:15","nodeType":"YulIdentifier","src":"3862:3:15"},"nativeSrc":"3862:18:15","nodeType":"YulFunctionCall","src":"3862:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"3849:12:15","nodeType":"YulIdentifier","src":"3849:12:15"},"nativeSrc":"3849:32:15","nodeType":"YulFunctionCall","src":"3849:32:15"},"variables":[{"name":"offset","nativeSrc":"3839:6:15","nodeType":"YulTypedName","src":"3839:6:15","type":""}]},{"nativeSrc":"3890:28:15","nodeType":"YulVariableDeclaration","src":"3890:28:15","value":{"kind":"number","nativeSrc":"3900:18:15","nodeType":"YulLiteral","src":"3900:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3894:2:15","nodeType":"YulTypedName","src":"3894:2:15","type":""}]},{"body":{"nativeSrc":"3945:16:15","nodeType":"YulBlock","src":"3945:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3954:1:15","nodeType":"YulLiteral","src":"3954:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"3957:1:15","nodeType":"YulLiteral","src":"3957:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3947:6:15","nodeType":"YulIdentifier","src":"3947:6:15"},"nativeSrc":"3947:12:15","nodeType":"YulFunctionCall","src":"3947:12:15"},"nativeSrc":"3947:12:15","nodeType":"YulExpressionStatement","src":"3947:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3933:6:15","nodeType":"YulIdentifier","src":"3933:6:15"},{"name":"_1","nativeSrc":"3941:2:15","nodeType":"YulIdentifier","src":"3941:2:15"}],"functionName":{"name":"gt","nativeSrc":"3930:2:15","nodeType":"YulIdentifier","src":"3930:2:15"},"nativeSrc":"3930:14:15","nodeType":"YulFunctionCall","src":"3930:14:15"},"nativeSrc":"3927:34:15","nodeType":"YulIf","src":"3927:34:15"},{"nativeSrc":"3970:96:15","nodeType":"YulVariableDeclaration","src":"3970:96:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4038:9:15","nodeType":"YulIdentifier","src":"4038:9:15"},{"name":"offset","nativeSrc":"4049:6:15","nodeType":"YulIdentifier","src":"4049:6:15"}],"functionName":{"name":"add","nativeSrc":"4034:3:15","nodeType":"YulIdentifier","src":"4034:3:15"},"nativeSrc":"4034:22:15","nodeType":"YulFunctionCall","src":"4034:22:15"},{"name":"dataEnd","nativeSrc":"4058:7:15","nodeType":"YulIdentifier","src":"4058:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"3996:37:15","nodeType":"YulIdentifier","src":"3996:37:15"},"nativeSrc":"3996:70:15","nodeType":"YulFunctionCall","src":"3996:70:15"},"variables":[{"name":"value2_1","nativeSrc":"3974:8:15","nodeType":"YulTypedName","src":"3974:8:15","type":""},{"name":"value3_1","nativeSrc":"3984:8:15","nodeType":"YulTypedName","src":"3984:8:15","type":""}]},{"nativeSrc":"4075:18:15","nodeType":"YulAssignment","src":"4075:18:15","value":{"name":"value2_1","nativeSrc":"4085:8:15","nodeType":"YulIdentifier","src":"4085:8:15"},"variableNames":[{"name":"value2","nativeSrc":"4075:6:15","nodeType":"YulIdentifier","src":"4075:6:15"}]},{"nativeSrc":"4102:18:15","nodeType":"YulAssignment","src":"4102:18:15","value":{"name":"value3_1","nativeSrc":"4112:8:15","nodeType":"YulIdentifier","src":"4112:8:15"},"variableNames":[{"name":"value3","nativeSrc":"4102:6:15","nodeType":"YulIdentifier","src":"4102:6:15"}]},{"nativeSrc":"4129:48:15","nodeType":"YulVariableDeclaration","src":"4129:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4162:9:15","nodeType":"YulIdentifier","src":"4162:9:15"},{"kind":"number","nativeSrc":"4173:2:15","nodeType":"YulLiteral","src":"4173:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4158:3:15","nodeType":"YulIdentifier","src":"4158:3:15"},"nativeSrc":"4158:18:15","nodeType":"YulFunctionCall","src":"4158:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"4145:12:15","nodeType":"YulIdentifier","src":"4145:12:15"},"nativeSrc":"4145:32:15","nodeType":"YulFunctionCall","src":"4145:32:15"},"variables":[{"name":"offset_1","nativeSrc":"4133:8:15","nodeType":"YulTypedName","src":"4133:8:15","type":""}]},{"body":{"nativeSrc":"4206:16:15","nodeType":"YulBlock","src":"4206:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4215:1:15","nodeType":"YulLiteral","src":"4215:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"4218:1:15","nodeType":"YulLiteral","src":"4218:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4208:6:15","nodeType":"YulIdentifier","src":"4208:6:15"},"nativeSrc":"4208:12:15","nodeType":"YulFunctionCall","src":"4208:12:15"},"nativeSrc":"4208:12:15","nodeType":"YulExpressionStatement","src":"4208:12:15"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"4192:8:15","nodeType":"YulIdentifier","src":"4192:8:15"},{"name":"_1","nativeSrc":"4202:2:15","nodeType":"YulIdentifier","src":"4202:2:15"}],"functionName":{"name":"gt","nativeSrc":"4189:2:15","nodeType":"YulIdentifier","src":"4189:2:15"},"nativeSrc":"4189:16:15","nodeType":"YulFunctionCall","src":"4189:16:15"},"nativeSrc":"4186:36:15","nodeType":"YulIf","src":"4186:36:15"},{"nativeSrc":"4231:98:15","nodeType":"YulVariableDeclaration","src":"4231:98:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4299:9:15","nodeType":"YulIdentifier","src":"4299:9:15"},{"name":"offset_1","nativeSrc":"4310:8:15","nodeType":"YulIdentifier","src":"4310:8:15"}],"functionName":{"name":"add","nativeSrc":"4295:3:15","nodeType":"YulIdentifier","src":"4295:3:15"},"nativeSrc":"4295:24:15","nodeType":"YulFunctionCall","src":"4295:24:15"},{"name":"dataEnd","nativeSrc":"4321:7:15","nodeType":"YulIdentifier","src":"4321:7:15"}],"functionName":{"name":"abi_decode_array_uint256_dyn_calldata","nativeSrc":"4257:37:15","nodeType":"YulIdentifier","src":"4257:37:15"},"nativeSrc":"4257:72:15","nodeType":"YulFunctionCall","src":"4257:72:15"},"variables":[{"name":"value4_1","nativeSrc":"4235:8:15","nodeType":"YulTypedName","src":"4235:8:15","type":""},{"name":"value5_1","nativeSrc":"4245:8:15","nodeType":"YulTypedName","src":"4245:8:15","type":""}]},{"nativeSrc":"4338:18:15","nodeType":"YulAssignment","src":"4338:18:15","value":{"name":"value4_1","nativeSrc":"4348:8:15","nodeType":"YulIdentifier","src":"4348:8:15"},"variableNames":[{"name":"value4","nativeSrc":"4338:6:15","nodeType":"YulIdentifier","src":"4338:6:15"}]},{"nativeSrc":"4365:18:15","nodeType":"YulAssignment","src":"4365:18:15","value":{"name":"value5_1","nativeSrc":"4375:8:15","nodeType":"YulIdentifier","src":"4375:8:15"},"variableNames":[{"name":"value5","nativeSrc":"4365:6:15","nodeType":"YulIdentifier","src":"4365:6:15"}]},{"nativeSrc":"4392:49:15","nodeType":"YulVariableDeclaration","src":"4392:49:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4425:9:15","nodeType":"YulIdentifier","src":"4425:9:15"},{"kind":"number","nativeSrc":"4436:3:15","nodeType":"YulLiteral","src":"4436:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4421:3:15","nodeType":"YulIdentifier","src":"4421:3:15"},"nativeSrc":"4421:19:15","nodeType":"YulFunctionCall","src":"4421:19:15"}],"functionName":{"name":"calldataload","nativeSrc":"4408:12:15","nodeType":"YulIdentifier","src":"4408:12:15"},"nativeSrc":"4408:33:15","nodeType":"YulFunctionCall","src":"4408:33:15"},"variables":[{"name":"offset_2","nativeSrc":"4396:8:15","nodeType":"YulTypedName","src":"4396:8:15","type":""}]},{"body":{"nativeSrc":"4470:16:15","nodeType":"YulBlock","src":"4470:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4479:1:15","nodeType":"YulLiteral","src":"4479:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"4482:1:15","nodeType":"YulLiteral","src":"4482:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4472:6:15","nodeType":"YulIdentifier","src":"4472:6:15"},"nativeSrc":"4472:12:15","nodeType":"YulFunctionCall","src":"4472:12:15"},"nativeSrc":"4472:12:15","nodeType":"YulExpressionStatement","src":"4472:12:15"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"4456:8:15","nodeType":"YulIdentifier","src":"4456:8:15"},{"name":"_1","nativeSrc":"4466:2:15","nodeType":"YulIdentifier","src":"4466:2:15"}],"functionName":{"name":"gt","nativeSrc":"4453:2:15","nodeType":"YulIdentifier","src":"4453:2:15"},"nativeSrc":"4453:16:15","nodeType":"YulFunctionCall","src":"4453:16:15"},"nativeSrc":"4450:36:15","nodeType":"YulIf","src":"4450:36:15"},{"nativeSrc":"4495:86:15","nodeType":"YulVariableDeclaration","src":"4495:86:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4551:9:15","nodeType":"YulIdentifier","src":"4551:9:15"},{"name":"offset_2","nativeSrc":"4562:8:15","nodeType":"YulIdentifier","src":"4562:8:15"}],"functionName":{"name":"add","nativeSrc":"4547:3:15","nodeType":"YulIdentifier","src":"4547:3:15"},"nativeSrc":"4547:24:15","nodeType":"YulFunctionCall","src":"4547:24:15"},{"name":"dataEnd","nativeSrc":"4573:7:15","nodeType":"YulIdentifier","src":"4573:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"4521:25:15","nodeType":"YulIdentifier","src":"4521:25:15"},"nativeSrc":"4521:60:15","nodeType":"YulFunctionCall","src":"4521:60:15"},"variables":[{"name":"value6_1","nativeSrc":"4499:8:15","nodeType":"YulTypedName","src":"4499:8:15","type":""},{"name":"value7_1","nativeSrc":"4509:8:15","nodeType":"YulTypedName","src":"4509:8:15","type":""}]},{"nativeSrc":"4590:18:15","nodeType":"YulAssignment","src":"4590:18:15","value":{"name":"value6_1","nativeSrc":"4600:8:15","nodeType":"YulIdentifier","src":"4600:8:15"},"variableNames":[{"name":"value6","nativeSrc":"4590:6:15","nodeType":"YulIdentifier","src":"4590:6:15"}]},{"nativeSrc":"4617:18:15","nodeType":"YulAssignment","src":"4617:18:15","value":{"name":"value7_1","nativeSrc":"4627:8:15","nodeType":"YulIdentifier","src":"4627:8:15"},"variableNames":[{"name":"value7","nativeSrc":"4617:6:15","nodeType":"YulIdentifier","src":"4617:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"3431:1210:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3568:9:15","nodeType":"YulTypedName","src":"3568:9:15","type":""},{"name":"dataEnd","nativeSrc":"3579:7:15","nodeType":"YulTypedName","src":"3579:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3591:6:15","nodeType":"YulTypedName","src":"3591:6:15","type":""},{"name":"value1","nativeSrc":"3599:6:15","nodeType":"YulTypedName","src":"3599:6:15","type":""},{"name":"value2","nativeSrc":"3607:6:15","nodeType":"YulTypedName","src":"3607:6:15","type":""},{"name":"value3","nativeSrc":"3615:6:15","nodeType":"YulTypedName","src":"3615:6:15","type":""},{"name":"value4","nativeSrc":"3623:6:15","nodeType":"YulTypedName","src":"3623:6:15","type":""},{"name":"value5","nativeSrc":"3631:6:15","nodeType":"YulTypedName","src":"3631:6:15","type":""},{"name":"value6","nativeSrc":"3639:6:15","nodeType":"YulTypedName","src":"3639:6:15","type":""},{"name":"value7","nativeSrc":"3647:6:15","nodeType":"YulTypedName","src":"3647:6:15","type":""}],"src":"3431:1210:15"},{"body":{"nativeSrc":"4745:149:15","nodeType":"YulBlock","src":"4745:149:15","statements":[{"nativeSrc":"4755:26:15","nodeType":"YulAssignment","src":"4755:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"4767:9:15","nodeType":"YulIdentifier","src":"4767:9:15"},{"kind":"number","nativeSrc":"4778:2:15","nodeType":"YulLiteral","src":"4778:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4763:3:15","nodeType":"YulIdentifier","src":"4763:3:15"},"nativeSrc":"4763:18:15","nodeType":"YulFunctionCall","src":"4763:18:15"},"variableNames":[{"name":"tail","nativeSrc":"4755:4:15","nodeType":"YulIdentifier","src":"4755:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4797:9:15","nodeType":"YulIdentifier","src":"4797:9:15"},{"arguments":[{"name":"value0","nativeSrc":"4812:6:15","nodeType":"YulIdentifier","src":"4812:6:15"},{"kind":"number","nativeSrc":"4820:66:15","nodeType":"YulLiteral","src":"4820:66:15","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4808:3:15","nodeType":"YulIdentifier","src":"4808:3:15"},"nativeSrc":"4808:79:15","nodeType":"YulFunctionCall","src":"4808:79:15"}],"functionName":{"name":"mstore","nativeSrc":"4790:6:15","nodeType":"YulIdentifier","src":"4790:6:15"},"nativeSrc":"4790:98:15","nodeType":"YulFunctionCall","src":"4790:98:15"},"nativeSrc":"4790:98:15","nodeType":"YulExpressionStatement","src":"4790:98:15"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4646:248:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4714:9:15","nodeType":"YulTypedName","src":"4714:9:15","type":""},{"name":"value0","nativeSrc":"4725:6:15","nodeType":"YulTypedName","src":"4725:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4736:4:15","nodeType":"YulTypedName","src":"4736:4:15","type":""}],"src":"4646:248:15"},{"body":{"nativeSrc":"5000:125:15","nodeType":"YulBlock","src":"5000:125:15","statements":[{"nativeSrc":"5010:26:15","nodeType":"YulAssignment","src":"5010:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"5022:9:15","nodeType":"YulIdentifier","src":"5022:9:15"},{"kind":"number","nativeSrc":"5033:2:15","nodeType":"YulLiteral","src":"5033:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5018:3:15","nodeType":"YulIdentifier","src":"5018:3:15"},"nativeSrc":"5018:18:15","nodeType":"YulFunctionCall","src":"5018:18:15"},"variableNames":[{"name":"tail","nativeSrc":"5010:4:15","nodeType":"YulIdentifier","src":"5010:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5052:9:15","nodeType":"YulIdentifier","src":"5052:9:15"},{"arguments":[{"name":"value0","nativeSrc":"5067:6:15","nodeType":"YulIdentifier","src":"5067:6:15"},{"kind":"number","nativeSrc":"5075:42:15","nodeType":"YulLiteral","src":"5075:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5063:3:15","nodeType":"YulIdentifier","src":"5063:3:15"},"nativeSrc":"5063:55:15","nodeType":"YulFunctionCall","src":"5063:55:15"}],"functionName":{"name":"mstore","nativeSrc":"5045:6:15","nodeType":"YulIdentifier","src":"5045:6:15"},"nativeSrc":"5045:74:15","nodeType":"YulFunctionCall","src":"5045:74:15"},"nativeSrc":"5045:74:15","nodeType":"YulExpressionStatement","src":"5045:74:15"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4899:226:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4969:9:15","nodeType":"YulTypedName","src":"4969:9:15","type":""},{"name":"value0","nativeSrc":"4980:6:15","nodeType":"YulTypedName","src":"4980:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4991:4:15","nodeType":"YulTypedName","src":"4991:4:15","type":""}],"src":"4899:226:15"},{"body":{"nativeSrc":"5287:538:15","nodeType":"YulBlock","src":"5287:538:15","statements":[{"body":{"nativeSrc":"5334:16:15","nodeType":"YulBlock","src":"5334:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5343:1:15","nodeType":"YulLiteral","src":"5343:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5346:1:15","nodeType":"YulLiteral","src":"5346:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5336:6:15","nodeType":"YulIdentifier","src":"5336:6:15"},"nativeSrc":"5336:12:15","nodeType":"YulFunctionCall","src":"5336:12:15"},"nativeSrc":"5336:12:15","nodeType":"YulExpressionStatement","src":"5336:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5308:7:15","nodeType":"YulIdentifier","src":"5308:7:15"},{"name":"headStart","nativeSrc":"5317:9:15","nodeType":"YulIdentifier","src":"5317:9:15"}],"functionName":{"name":"sub","nativeSrc":"5304:3:15","nodeType":"YulIdentifier","src":"5304:3:15"},"nativeSrc":"5304:23:15","nodeType":"YulFunctionCall","src":"5304:23:15"},{"kind":"number","nativeSrc":"5329:3:15","nodeType":"YulLiteral","src":"5329:3:15","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"5300:3:15","nodeType":"YulIdentifier","src":"5300:3:15"},"nativeSrc":"5300:33:15","nodeType":"YulFunctionCall","src":"5300:33:15"},"nativeSrc":"5297:53:15","nodeType":"YulIf","src":"5297:53:15"},{"nativeSrc":"5359:39:15","nodeType":"YulAssignment","src":"5359:39:15","value":{"arguments":[{"name":"headStart","nativeSrc":"5388:9:15","nodeType":"YulIdentifier","src":"5388:9:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5369:18:15","nodeType":"YulIdentifier","src":"5369:18:15"},"nativeSrc":"5369:29:15","nodeType":"YulFunctionCall","src":"5369:29:15"},"variableNames":[{"name":"value0","nativeSrc":"5359:6:15","nodeType":"YulIdentifier","src":"5359:6:15"}]},{"nativeSrc":"5407:48:15","nodeType":"YulAssignment","src":"5407:48:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5440:9:15","nodeType":"YulIdentifier","src":"5440:9:15"},{"kind":"number","nativeSrc":"5451:2:15","nodeType":"YulLiteral","src":"5451:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5436:3:15","nodeType":"YulIdentifier","src":"5436:3:15"},"nativeSrc":"5436:18:15","nodeType":"YulFunctionCall","src":"5436:18:15"}],"functionName":{"name":"abi_decode_address","nativeSrc":"5417:18:15","nodeType":"YulIdentifier","src":"5417:18:15"},"nativeSrc":"5417:38:15","nodeType":"YulFunctionCall","src":"5417:38:15"},"variableNames":[{"name":"value1","nativeSrc":"5407:6:15","nodeType":"YulIdentifier","src":"5407:6:15"}]},{"nativeSrc":"5464:42:15","nodeType":"YulAssignment","src":"5464:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5491:9:15","nodeType":"YulIdentifier","src":"5491:9:15"},{"kind":"number","nativeSrc":"5502:2:15","nodeType":"YulLiteral","src":"5502:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5487:3:15","nodeType":"YulIdentifier","src":"5487:3:15"},"nativeSrc":"5487:18:15","nodeType":"YulFunctionCall","src":"5487:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"5474:12:15","nodeType":"YulIdentifier","src":"5474:12:15"},"nativeSrc":"5474:32:15","nodeType":"YulFunctionCall","src":"5474:32:15"},"variableNames":[{"name":"value2","nativeSrc":"5464:6:15","nodeType":"YulIdentifier","src":"5464:6:15"}]},{"nativeSrc":"5515:42:15","nodeType":"YulAssignment","src":"5515:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5542:9:15","nodeType":"YulIdentifier","src":"5542:9:15"},{"kind":"number","nativeSrc":"5553:2:15","nodeType":"YulLiteral","src":"5553:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5538:3:15","nodeType":"YulIdentifier","src":"5538:3:15"},"nativeSrc":"5538:18:15","nodeType":"YulFunctionCall","src":"5538:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"5525:12:15","nodeType":"YulIdentifier","src":"5525:12:15"},"nativeSrc":"5525:32:15","nodeType":"YulFunctionCall","src":"5525:32:15"},"variableNames":[{"name":"value3","nativeSrc":"5515:6:15","nodeType":"YulIdentifier","src":"5515:6:15"}]},{"nativeSrc":"5566:47:15","nodeType":"YulVariableDeclaration","src":"5566:47:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5597:9:15","nodeType":"YulIdentifier","src":"5597:9:15"},{"kind":"number","nativeSrc":"5608:3:15","nodeType":"YulLiteral","src":"5608:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5593:3:15","nodeType":"YulIdentifier","src":"5593:3:15"},"nativeSrc":"5593:19:15","nodeType":"YulFunctionCall","src":"5593:19:15"}],"functionName":{"name":"calldataload","nativeSrc":"5580:12:15","nodeType":"YulIdentifier","src":"5580:12:15"},"nativeSrc":"5580:33:15","nodeType":"YulFunctionCall","src":"5580:33:15"},"variables":[{"name":"offset","nativeSrc":"5570:6:15","nodeType":"YulTypedName","src":"5570:6:15","type":""}]},{"body":{"nativeSrc":"5656:16:15","nodeType":"YulBlock","src":"5656:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5665:1:15","nodeType":"YulLiteral","src":"5665:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5668:1:15","nodeType":"YulLiteral","src":"5668:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5658:6:15","nodeType":"YulIdentifier","src":"5658:6:15"},"nativeSrc":"5658:12:15","nodeType":"YulFunctionCall","src":"5658:12:15"},"nativeSrc":"5658:12:15","nodeType":"YulExpressionStatement","src":"5658:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5628:6:15","nodeType":"YulIdentifier","src":"5628:6:15"},{"kind":"number","nativeSrc":"5636:18:15","nodeType":"YulLiteral","src":"5636:18:15","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5625:2:15","nodeType":"YulIdentifier","src":"5625:2:15"},"nativeSrc":"5625:30:15","nodeType":"YulFunctionCall","src":"5625:30:15"},"nativeSrc":"5622:50:15","nodeType":"YulIf","src":"5622:50:15"},{"nativeSrc":"5681:84:15","nodeType":"YulVariableDeclaration","src":"5681:84:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5737:9:15","nodeType":"YulIdentifier","src":"5737:9:15"},{"name":"offset","nativeSrc":"5748:6:15","nodeType":"YulIdentifier","src":"5748:6:15"}],"functionName":{"name":"add","nativeSrc":"5733:3:15","nodeType":"YulIdentifier","src":"5733:3:15"},"nativeSrc":"5733:22:15","nodeType":"YulFunctionCall","src":"5733:22:15"},{"name":"dataEnd","nativeSrc":"5757:7:15","nodeType":"YulIdentifier","src":"5757:7:15"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"5707:25:15","nodeType":"YulIdentifier","src":"5707:25:15"},"nativeSrc":"5707:58:15","nodeType":"YulFunctionCall","src":"5707:58:15"},"variables":[{"name":"value4_1","nativeSrc":"5685:8:15","nodeType":"YulTypedName","src":"5685:8:15","type":""},{"name":"value5_1","nativeSrc":"5695:8:15","nodeType":"YulTypedName","src":"5695:8:15","type":""}]},{"nativeSrc":"5774:18:15","nodeType":"YulAssignment","src":"5774:18:15","value":{"name":"value4_1","nativeSrc":"5784:8:15","nodeType":"YulIdentifier","src":"5784:8:15"},"variableNames":[{"name":"value4","nativeSrc":"5774:6:15","nodeType":"YulIdentifier","src":"5774:6:15"}]},{"nativeSrc":"5801:18:15","nodeType":"YulAssignment","src":"5801:18:15","value":{"name":"value5_1","nativeSrc":"5811:8:15","nodeType":"YulIdentifier","src":"5811:8:15"},"variableNames":[{"name":"value5","nativeSrc":"5801:6:15","nodeType":"YulIdentifier","src":"5801:6:15"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"5130:695:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5213:9:15","nodeType":"YulTypedName","src":"5213:9:15","type":""},{"name":"dataEnd","nativeSrc":"5224:7:15","nodeType":"YulTypedName","src":"5224:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5236:6:15","nodeType":"YulTypedName","src":"5236:6:15","type":""},{"name":"value1","nativeSrc":"5244:6:15","nodeType":"YulTypedName","src":"5244:6:15","type":""},{"name":"value2","nativeSrc":"5252:6:15","nodeType":"YulTypedName","src":"5252:6:15","type":""},{"name":"value3","nativeSrc":"5260:6:15","nodeType":"YulTypedName","src":"5260:6:15","type":""},{"name":"value4","nativeSrc":"5268:6:15","nodeType":"YulTypedName","src":"5268:6:15","type":""},{"name":"value5","nativeSrc":"5276:6:15","nodeType":"YulTypedName","src":"5276:6:15","type":""}],"src":"5130:695:15"},{"body":{"nativeSrc":"5862:152:15","nodeType":"YulBlock","src":"5862:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5879:1:15","nodeType":"YulLiteral","src":"5879:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"5882:77:15","nodeType":"YulLiteral","src":"5882:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5872:6:15","nodeType":"YulIdentifier","src":"5872:6:15"},"nativeSrc":"5872:88:15","nodeType":"YulFunctionCall","src":"5872:88:15"},"nativeSrc":"5872:88:15","nodeType":"YulExpressionStatement","src":"5872:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5976:1:15","nodeType":"YulLiteral","src":"5976:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"5979:4:15","nodeType":"YulLiteral","src":"5979:4:15","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5969:6:15","nodeType":"YulIdentifier","src":"5969:6:15"},"nativeSrc":"5969:15:15","nodeType":"YulFunctionCall","src":"5969:15:15"},"nativeSrc":"5969:15:15","nodeType":"YulExpressionStatement","src":"5969:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6000:1:15","nodeType":"YulLiteral","src":"6000:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"6003:4:15","nodeType":"YulLiteral","src":"6003:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5993:6:15","nodeType":"YulIdentifier","src":"5993:6:15"},"nativeSrc":"5993:15:15","nodeType":"YulFunctionCall","src":"5993:15:15"},"nativeSrc":"5993:15:15","nodeType":"YulExpressionStatement","src":"5993:15:15"}]},"name":"panic_error_0x11","nativeSrc":"5830:184:15","nodeType":"YulFunctionDefinition","src":"5830:184:15"},{"body":{"nativeSrc":"6068:79:15","nodeType":"YulBlock","src":"6068:79:15","statements":[{"nativeSrc":"6078:17:15","nodeType":"YulAssignment","src":"6078:17:15","value":{"arguments":[{"name":"x","nativeSrc":"6090:1:15","nodeType":"YulIdentifier","src":"6090:1:15"},{"name":"y","nativeSrc":"6093:1:15","nodeType":"YulIdentifier","src":"6093:1:15"}],"functionName":{"name":"sub","nativeSrc":"6086:3:15","nodeType":"YulIdentifier","src":"6086:3:15"},"nativeSrc":"6086:9:15","nodeType":"YulFunctionCall","src":"6086:9:15"},"variableNames":[{"name":"diff","nativeSrc":"6078:4:15","nodeType":"YulIdentifier","src":"6078:4:15"}]},{"body":{"nativeSrc":"6119:22:15","nodeType":"YulBlock","src":"6119:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6121:16:15","nodeType":"YulIdentifier","src":"6121:16:15"},"nativeSrc":"6121:18:15","nodeType":"YulFunctionCall","src":"6121:18:15"},"nativeSrc":"6121:18:15","nodeType":"YulExpressionStatement","src":"6121:18:15"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6110:4:15","nodeType":"YulIdentifier","src":"6110:4:15"},{"name":"x","nativeSrc":"6116:1:15","nodeType":"YulIdentifier","src":"6116:1:15"}],"functionName":{"name":"gt","nativeSrc":"6107:2:15","nodeType":"YulIdentifier","src":"6107:2:15"},"nativeSrc":"6107:11:15","nodeType":"YulFunctionCall","src":"6107:11:15"},"nativeSrc":"6104:37:15","nodeType":"YulIf","src":"6104:37:15"}]},"name":"checked_sub_t_uint256","nativeSrc":"6019:128:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6050:1:15","nodeType":"YulTypedName","src":"6050:1:15","type":""},{"name":"y","nativeSrc":"6053:1:15","nodeType":"YulTypedName","src":"6053:1:15","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6059:4:15","nodeType":"YulTypedName","src":"6059:4:15","type":""}],"src":"6019:128:15"},{"body":{"nativeSrc":"6198:228:15","nodeType":"YulBlock","src":"6198:228:15","statements":[{"body":{"nativeSrc":"6229:168:15","nodeType":"YulBlock","src":"6229:168:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6250:1:15","nodeType":"YulLiteral","src":"6250:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"6253:77:15","nodeType":"YulLiteral","src":"6253:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6243:6:15","nodeType":"YulIdentifier","src":"6243:6:15"},"nativeSrc":"6243:88:15","nodeType":"YulFunctionCall","src":"6243:88:15"},"nativeSrc":"6243:88:15","nodeType":"YulExpressionStatement","src":"6243:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6351:1:15","nodeType":"YulLiteral","src":"6351:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"6354:4:15","nodeType":"YulLiteral","src":"6354:4:15","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"6344:6:15","nodeType":"YulIdentifier","src":"6344:6:15"},"nativeSrc":"6344:15:15","nodeType":"YulFunctionCall","src":"6344:15:15"},"nativeSrc":"6344:15:15","nodeType":"YulExpressionStatement","src":"6344:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6379:1:15","nodeType":"YulLiteral","src":"6379:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"6382:4:15","nodeType":"YulLiteral","src":"6382:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6372:6:15","nodeType":"YulIdentifier","src":"6372:6:15"},"nativeSrc":"6372:15:15","nodeType":"YulFunctionCall","src":"6372:15:15"},"nativeSrc":"6372:15:15","nodeType":"YulExpressionStatement","src":"6372:15:15"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"6218:1:15","nodeType":"YulIdentifier","src":"6218:1:15"}],"functionName":{"name":"iszero","nativeSrc":"6211:6:15","nodeType":"YulIdentifier","src":"6211:6:15"},"nativeSrc":"6211:9:15","nodeType":"YulFunctionCall","src":"6211:9:15"},"nativeSrc":"6208:189:15","nodeType":"YulIf","src":"6208:189:15"},{"nativeSrc":"6406:14:15","nodeType":"YulAssignment","src":"6406:14:15","value":{"arguments":[{"name":"x","nativeSrc":"6415:1:15","nodeType":"YulIdentifier","src":"6415:1:15"},{"name":"y","nativeSrc":"6418:1:15","nodeType":"YulIdentifier","src":"6418:1:15"}],"functionName":{"name":"div","nativeSrc":"6411:3:15","nodeType":"YulIdentifier","src":"6411:3:15"},"nativeSrc":"6411:9:15","nodeType":"YulFunctionCall","src":"6411:9:15"},"variableNames":[{"name":"r","nativeSrc":"6406:1:15","nodeType":"YulIdentifier","src":"6406:1:15"}]}]},"name":"checked_div_t_uint256","nativeSrc":"6152:274:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6183:1:15","nodeType":"YulTypedName","src":"6183:1:15","type":""},{"name":"y","nativeSrc":"6186:1:15","nodeType":"YulTypedName","src":"6186:1:15","type":""}],"returnVariables":[{"name":"r","nativeSrc":"6192:1:15","nodeType":"YulTypedName","src":"6192:1:15","type":""}],"src":"6152:274:15"},{"body":{"nativeSrc":"6509:280:15","nodeType":"YulBlock","src":"6509:280:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"6526:3:15","nodeType":"YulIdentifier","src":"6526:3:15"},{"name":"length","nativeSrc":"6531:6:15","nodeType":"YulIdentifier","src":"6531:6:15"}],"functionName":{"name":"mstore","nativeSrc":"6519:6:15","nodeType":"YulIdentifier","src":"6519:6:15"},"nativeSrc":"6519:19:15","nodeType":"YulFunctionCall","src":"6519:19:15"},"nativeSrc":"6519:19:15","nodeType":"YulExpressionStatement","src":"6519:19:15"},{"body":{"nativeSrc":"6629:16:15","nodeType":"YulBlock","src":"6629:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6638:1:15","nodeType":"YulLiteral","src":"6638:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"6641:1:15","nodeType":"YulLiteral","src":"6641:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6631:6:15","nodeType":"YulIdentifier","src":"6631:6:15"},"nativeSrc":"6631:12:15","nodeType":"YulFunctionCall","src":"6631:12:15"},"nativeSrc":"6631:12:15","nodeType":"YulExpressionStatement","src":"6631:12:15"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6553:6:15","nodeType":"YulIdentifier","src":"6553:6:15"},{"kind":"number","nativeSrc":"6561:66:15","nodeType":"YulLiteral","src":"6561:66:15","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6550:2:15","nodeType":"YulIdentifier","src":"6550:2:15"},"nativeSrc":"6550:78:15","nodeType":"YulFunctionCall","src":"6550:78:15"},"nativeSrc":"6547:98:15","nodeType":"YulIf","src":"6547:98:15"},{"nativeSrc":"6654:30:15","nodeType":"YulVariableDeclaration","src":"6654:30:15","value":{"arguments":[{"kind":"number","nativeSrc":"6674:1:15","nodeType":"YulLiteral","src":"6674:1:15","type":"","value":"5"},{"name":"length","nativeSrc":"6677:6:15","nodeType":"YulIdentifier","src":"6677:6:15"}],"functionName":{"name":"shl","nativeSrc":"6670:3:15","nodeType":"YulIdentifier","src":"6670:3:15"},"nativeSrc":"6670:14:15","nodeType":"YulFunctionCall","src":"6670:14:15"},"variables":[{"name":"length_1","nativeSrc":"6658:8:15","nodeType":"YulTypedName","src":"6658:8:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6710:3:15","nodeType":"YulIdentifier","src":"6710:3:15"},{"kind":"number","nativeSrc":"6715:4:15","nodeType":"YulLiteral","src":"6715:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6706:3:15","nodeType":"YulIdentifier","src":"6706:3:15"},"nativeSrc":"6706:14:15","nodeType":"YulFunctionCall","src":"6706:14:15"},{"name":"start","nativeSrc":"6722:5:15","nodeType":"YulIdentifier","src":"6722:5:15"},{"name":"length_1","nativeSrc":"6729:8:15","nodeType":"YulIdentifier","src":"6729:8:15"}],"functionName":{"name":"calldatacopy","nativeSrc":"6693:12:15","nodeType":"YulIdentifier","src":"6693:12:15"},"nativeSrc":"6693:45:15","nodeType":"YulFunctionCall","src":"6693:45:15"},"nativeSrc":"6693:45:15","nodeType":"YulExpressionStatement","src":"6693:45:15"},{"nativeSrc":"6747:36:15","nodeType":"YulAssignment","src":"6747:36:15","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6762:3:15","nodeType":"YulIdentifier","src":"6762:3:15"},{"name":"length_1","nativeSrc":"6767:8:15","nodeType":"YulIdentifier","src":"6767:8:15"}],"functionName":{"name":"add","nativeSrc":"6758:3:15","nodeType":"YulIdentifier","src":"6758:3:15"},"nativeSrc":"6758:18:15","nodeType":"YulFunctionCall","src":"6758:18:15"},{"kind":"number","nativeSrc":"6778:4:15","nodeType":"YulLiteral","src":"6778:4:15","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6754:3:15","nodeType":"YulIdentifier","src":"6754:3:15"},"nativeSrc":"6754:29:15","nodeType":"YulFunctionCall","src":"6754:29:15"},"variableNames":[{"name":"end","nativeSrc":"6747:3:15","nodeType":"YulIdentifier","src":"6747:3:15"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"6431:358:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"6478:5:15","nodeType":"YulTypedName","src":"6478:5:15","type":""},{"name":"length","nativeSrc":"6485:6:15","nodeType":"YulTypedName","src":"6485:6:15","type":""},{"name":"pos","nativeSrc":"6493:3:15","nodeType":"YulTypedName","src":"6493:3:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6501:3:15","nodeType":"YulTypedName","src":"6501:3:15","type":""}],"src":"6431:358:15"},{"body":{"nativeSrc":"7071:362:15","nodeType":"YulBlock","src":"7071:362:15","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7088:9:15","nodeType":"YulIdentifier","src":"7088:9:15"},{"arguments":[{"name":"value0","nativeSrc":"7103:6:15","nodeType":"YulIdentifier","src":"7103:6:15"},{"kind":"number","nativeSrc":"7111:42:15","nodeType":"YulLiteral","src":"7111:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7099:3:15","nodeType":"YulIdentifier","src":"7099:3:15"},"nativeSrc":"7099:55:15","nodeType":"YulFunctionCall","src":"7099:55:15"}],"functionName":{"name":"mstore","nativeSrc":"7081:6:15","nodeType":"YulIdentifier","src":"7081:6:15"},"nativeSrc":"7081:74:15","nodeType":"YulFunctionCall","src":"7081:74:15"},"nativeSrc":"7081:74:15","nodeType":"YulExpressionStatement","src":"7081:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7175:9:15","nodeType":"YulIdentifier","src":"7175:9:15"},{"kind":"number","nativeSrc":"7186:2:15","nodeType":"YulLiteral","src":"7186:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7171:3:15","nodeType":"YulIdentifier","src":"7171:3:15"},"nativeSrc":"7171:18:15","nodeType":"YulFunctionCall","src":"7171:18:15"},{"kind":"number","nativeSrc":"7191:2:15","nodeType":"YulLiteral","src":"7191:2:15","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"7164:6:15","nodeType":"YulIdentifier","src":"7164:6:15"},"nativeSrc":"7164:30:15","nodeType":"YulFunctionCall","src":"7164:30:15"},"nativeSrc":"7164:30:15","nodeType":"YulExpressionStatement","src":"7164:30:15"},{"nativeSrc":"7203:87:15","nodeType":"YulVariableDeclaration","src":"7203:87:15","value":{"arguments":[{"name":"value1","nativeSrc":"7255:6:15","nodeType":"YulIdentifier","src":"7255:6:15"},{"name":"value2","nativeSrc":"7263:6:15","nodeType":"YulIdentifier","src":"7263:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"7275:9:15","nodeType":"YulIdentifier","src":"7275:9:15"},{"kind":"number","nativeSrc":"7286:2:15","nodeType":"YulLiteral","src":"7286:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7271:3:15","nodeType":"YulIdentifier","src":"7271:3:15"},"nativeSrc":"7271:18:15","nodeType":"YulFunctionCall","src":"7271:18:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7217:37:15","nodeType":"YulIdentifier","src":"7217:37:15"},"nativeSrc":"7217:73:15","nodeType":"YulFunctionCall","src":"7217:73:15"},"variables":[{"name":"tail_1","nativeSrc":"7207:6:15","nodeType":"YulTypedName","src":"7207:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7310:9:15","nodeType":"YulIdentifier","src":"7310:9:15"},{"kind":"number","nativeSrc":"7321:2:15","nodeType":"YulLiteral","src":"7321:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7306:3:15","nodeType":"YulIdentifier","src":"7306:3:15"},"nativeSrc":"7306:18:15","nodeType":"YulFunctionCall","src":"7306:18:15"},{"arguments":[{"name":"tail_1","nativeSrc":"7330:6:15","nodeType":"YulIdentifier","src":"7330:6:15"},{"name":"headStart","nativeSrc":"7338:9:15","nodeType":"YulIdentifier","src":"7338:9:15"}],"functionName":{"name":"sub","nativeSrc":"7326:3:15","nodeType":"YulIdentifier","src":"7326:3:15"},"nativeSrc":"7326:22:15","nodeType":"YulFunctionCall","src":"7326:22:15"}],"functionName":{"name":"mstore","nativeSrc":"7299:6:15","nodeType":"YulIdentifier","src":"7299:6:15"},"nativeSrc":"7299:50:15","nodeType":"YulFunctionCall","src":"7299:50:15"},"nativeSrc":"7299:50:15","nodeType":"YulExpressionStatement","src":"7299:50:15"},{"nativeSrc":"7358:69:15","nodeType":"YulAssignment","src":"7358:69:15","value":{"arguments":[{"name":"value3","nativeSrc":"7404:6:15","nodeType":"YulIdentifier","src":"7404:6:15"},{"name":"value4","nativeSrc":"7412:6:15","nodeType":"YulIdentifier","src":"7412:6:15"},{"name":"tail_1","nativeSrc":"7420:6:15","nodeType":"YulIdentifier","src":"7420:6:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"7366:37:15","nodeType":"YulIdentifier","src":"7366:37:15"},"nativeSrc":"7366:61:15","nodeType":"YulFunctionCall","src":"7366:61:15"},"variableNames":[{"name":"tail","nativeSrc":"7358:4:15","nodeType":"YulIdentifier","src":"7358:4:15"}]}]},"name":"abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"6794:639:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7008:9:15","nodeType":"YulTypedName","src":"7008:9:15","type":""},{"name":"value4","nativeSrc":"7019:6:15","nodeType":"YulTypedName","src":"7019:6:15","type":""},{"name":"value3","nativeSrc":"7027:6:15","nodeType":"YulTypedName","src":"7027:6:15","type":""},{"name":"value2","nativeSrc":"7035:6:15","nodeType":"YulTypedName","src":"7035:6:15","type":""},{"name":"value1","nativeSrc":"7043:6:15","nodeType":"YulTypedName","src":"7043:6:15","type":""},{"name":"value0","nativeSrc":"7051:6:15","nodeType":"YulTypedName","src":"7051:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7062:4:15","nodeType":"YulTypedName","src":"7062:4:15","type":""}],"src":"6794:639:15"},{"body":{"nativeSrc":"7470:152:15","nodeType":"YulBlock","src":"7470:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7487:1:15","nodeType":"YulLiteral","src":"7487:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"7490:77:15","nodeType":"YulLiteral","src":"7490:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"7480:6:15","nodeType":"YulIdentifier","src":"7480:6:15"},"nativeSrc":"7480:88:15","nodeType":"YulFunctionCall","src":"7480:88:15"},"nativeSrc":"7480:88:15","nodeType":"YulExpressionStatement","src":"7480:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7584:1:15","nodeType":"YulLiteral","src":"7584:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"7587:4:15","nodeType":"YulLiteral","src":"7587:4:15","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"7577:6:15","nodeType":"YulIdentifier","src":"7577:6:15"},"nativeSrc":"7577:15:15","nodeType":"YulFunctionCall","src":"7577:15:15"},"nativeSrc":"7577:15:15","nodeType":"YulExpressionStatement","src":"7577:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7608:1:15","nodeType":"YulLiteral","src":"7608:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"7611:4:15","nodeType":"YulLiteral","src":"7611:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"7601:6:15","nodeType":"YulIdentifier","src":"7601:6:15"},"nativeSrc":"7601:15:15","nodeType":"YulFunctionCall","src":"7601:15:15"},"nativeSrc":"7601:15:15","nodeType":"YulExpressionStatement","src":"7601:15:15"}]},"name":"panic_error_0x32","nativeSrc":"7438:184:15","nodeType":"YulFunctionDefinition","src":"7438:184:15"},{"body":{"nativeSrc":"7784:211:15","nodeType":"YulBlock","src":"7784:211:15","statements":[{"nativeSrc":"7794:26:15","nodeType":"YulAssignment","src":"7794:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"7806:9:15","nodeType":"YulIdentifier","src":"7806:9:15"},{"kind":"number","nativeSrc":"7817:2:15","nodeType":"YulLiteral","src":"7817:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7802:3:15","nodeType":"YulIdentifier","src":"7802:3:15"},"nativeSrc":"7802:18:15","nodeType":"YulFunctionCall","src":"7802:18:15"},"variableNames":[{"name":"tail","nativeSrc":"7794:4:15","nodeType":"YulIdentifier","src":"7794:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7836:9:15","nodeType":"YulIdentifier","src":"7836:9:15"},{"arguments":[{"name":"value0","nativeSrc":"7851:6:15","nodeType":"YulIdentifier","src":"7851:6:15"},{"kind":"number","nativeSrc":"7859:42:15","nodeType":"YulLiteral","src":"7859:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7847:3:15","nodeType":"YulIdentifier","src":"7847:3:15"},"nativeSrc":"7847:55:15","nodeType":"YulFunctionCall","src":"7847:55:15"}],"functionName":{"name":"mstore","nativeSrc":"7829:6:15","nodeType":"YulIdentifier","src":"7829:6:15"},"nativeSrc":"7829:74:15","nodeType":"YulFunctionCall","src":"7829:74:15"},"nativeSrc":"7829:74:15","nodeType":"YulExpressionStatement","src":"7829:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7923:9:15","nodeType":"YulIdentifier","src":"7923:9:15"},{"kind":"number","nativeSrc":"7934:2:15","nodeType":"YulLiteral","src":"7934:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7919:3:15","nodeType":"YulIdentifier","src":"7919:3:15"},"nativeSrc":"7919:18:15","nodeType":"YulFunctionCall","src":"7919:18:15"},{"name":"value1","nativeSrc":"7939:6:15","nodeType":"YulIdentifier","src":"7939:6:15"}],"functionName":{"name":"mstore","nativeSrc":"7912:6:15","nodeType":"YulIdentifier","src":"7912:6:15"},"nativeSrc":"7912:34:15","nodeType":"YulFunctionCall","src":"7912:34:15"},"nativeSrc":"7912:34:15","nodeType":"YulExpressionStatement","src":"7912:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7966:9:15","nodeType":"YulIdentifier","src":"7966:9:15"},{"kind":"number","nativeSrc":"7977:2:15","nodeType":"YulLiteral","src":"7977:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7962:3:15","nodeType":"YulIdentifier","src":"7962:3:15"},"nativeSrc":"7962:18:15","nodeType":"YulFunctionCall","src":"7962:18:15"},{"name":"value2","nativeSrc":"7982:6:15","nodeType":"YulIdentifier","src":"7982:6:15"}],"functionName":{"name":"mstore","nativeSrc":"7955:6:15","nodeType":"YulIdentifier","src":"7955:6:15"},"nativeSrc":"7955:34:15","nodeType":"YulFunctionCall","src":"7955:34:15"},"nativeSrc":"7955:34:15","nodeType":"YulExpressionStatement","src":"7955:34:15"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7627:368:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7737:9:15","nodeType":"YulTypedName","src":"7737:9:15","type":""},{"name":"value2","nativeSrc":"7748:6:15","nodeType":"YulTypedName","src":"7748:6:15","type":""},{"name":"value1","nativeSrc":"7756:6:15","nodeType":"YulTypedName","src":"7756:6:15","type":""},{"name":"value0","nativeSrc":"7764:6:15","nodeType":"YulTypedName","src":"7764:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7775:4:15","nodeType":"YulTypedName","src":"7775:4:15","type":""}],"src":"7627:368:15"},{"body":{"nativeSrc":"8052:116:15","nodeType":"YulBlock","src":"8052:116:15","statements":[{"nativeSrc":"8062:20:15","nodeType":"YulAssignment","src":"8062:20:15","value":{"arguments":[{"name":"x","nativeSrc":"8077:1:15","nodeType":"YulIdentifier","src":"8077:1:15"},{"name":"y","nativeSrc":"8080:1:15","nodeType":"YulIdentifier","src":"8080:1:15"}],"functionName":{"name":"mul","nativeSrc":"8073:3:15","nodeType":"YulIdentifier","src":"8073:3:15"},"nativeSrc":"8073:9:15","nodeType":"YulFunctionCall","src":"8073:9:15"},"variableNames":[{"name":"product","nativeSrc":"8062:7:15","nodeType":"YulIdentifier","src":"8062:7:15"}]},{"body":{"nativeSrc":"8140:22:15","nodeType":"YulBlock","src":"8140:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8142:16:15","nodeType":"YulIdentifier","src":"8142:16:15"},"nativeSrc":"8142:18:15","nodeType":"YulFunctionCall","src":"8142:18:15"},"nativeSrc":"8142:18:15","nodeType":"YulExpressionStatement","src":"8142:18:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"8111:1:15","nodeType":"YulIdentifier","src":"8111:1:15"}],"functionName":{"name":"iszero","nativeSrc":"8104:6:15","nodeType":"YulIdentifier","src":"8104:6:15"},"nativeSrc":"8104:9:15","nodeType":"YulFunctionCall","src":"8104:9:15"},{"arguments":[{"name":"y","nativeSrc":"8118:1:15","nodeType":"YulIdentifier","src":"8118:1:15"},{"arguments":[{"name":"product","nativeSrc":"8125:7:15","nodeType":"YulIdentifier","src":"8125:7:15"},{"name":"x","nativeSrc":"8134:1:15","nodeType":"YulIdentifier","src":"8134:1:15"}],"functionName":{"name":"div","nativeSrc":"8121:3:15","nodeType":"YulIdentifier","src":"8121:3:15"},"nativeSrc":"8121:15:15","nodeType":"YulFunctionCall","src":"8121:15:15"}],"functionName":{"name":"eq","nativeSrc":"8115:2:15","nodeType":"YulIdentifier","src":"8115:2:15"},"nativeSrc":"8115:22:15","nodeType":"YulFunctionCall","src":"8115:22:15"}],"functionName":{"name":"or","nativeSrc":"8101:2:15","nodeType":"YulIdentifier","src":"8101:2:15"},"nativeSrc":"8101:37:15","nodeType":"YulFunctionCall","src":"8101:37:15"}],"functionName":{"name":"iszero","nativeSrc":"8094:6:15","nodeType":"YulIdentifier","src":"8094:6:15"},"nativeSrc":"8094:45:15","nodeType":"YulFunctionCall","src":"8094:45:15"},"nativeSrc":"8091:71:15","nodeType":"YulIf","src":"8091:71:15"}]},"name":"checked_mul_t_uint256","nativeSrc":"8000:168:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8031:1:15","nodeType":"YulTypedName","src":"8031:1:15","type":""},{"name":"y","nativeSrc":"8034:1:15","nodeType":"YulTypedName","src":"8034:1:15","type":""}],"returnVariables":[{"name":"product","nativeSrc":"8040:7:15","nodeType":"YulTypedName","src":"8040:7:15","type":""}],"src":"8000:168:15"},{"body":{"nativeSrc":"8221:77:15","nodeType":"YulBlock","src":"8221:77:15","statements":[{"nativeSrc":"8231:16:15","nodeType":"YulAssignment","src":"8231:16:15","value":{"arguments":[{"name":"x","nativeSrc":"8242:1:15","nodeType":"YulIdentifier","src":"8242:1:15"},{"name":"y","nativeSrc":"8245:1:15","nodeType":"YulIdentifier","src":"8245:1:15"}],"functionName":{"name":"add","nativeSrc":"8238:3:15","nodeType":"YulIdentifier","src":"8238:3:15"},"nativeSrc":"8238:9:15","nodeType":"YulFunctionCall","src":"8238:9:15"},"variableNames":[{"name":"sum","nativeSrc":"8231:3:15","nodeType":"YulIdentifier","src":"8231:3:15"}]},{"body":{"nativeSrc":"8270:22:15","nodeType":"YulBlock","src":"8270:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"8272:16:15","nodeType":"YulIdentifier","src":"8272:16:15"},"nativeSrc":"8272:18:15","nodeType":"YulFunctionCall","src":"8272:18:15"},"nativeSrc":"8272:18:15","nodeType":"YulExpressionStatement","src":"8272:18:15"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"8262:1:15","nodeType":"YulIdentifier","src":"8262:1:15"},{"name":"sum","nativeSrc":"8265:3:15","nodeType":"YulIdentifier","src":"8265:3:15"}],"functionName":{"name":"gt","nativeSrc":"8259:2:15","nodeType":"YulIdentifier","src":"8259:2:15"},"nativeSrc":"8259:10:15","nodeType":"YulFunctionCall","src":"8259:10:15"},"nativeSrc":"8256:36:15","nodeType":"YulIf","src":"8256:36:15"}]},"name":"checked_add_t_uint256","nativeSrc":"8173:125:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"8204:1:15","nodeType":"YulTypedName","src":"8204:1:15","type":""},{"name":"y","nativeSrc":"8207:1:15","nodeType":"YulTypedName","src":"8207:1:15","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"8213:3:15","nodeType":"YulTypedName","src":"8213:3:15","type":""}],"src":"8173:125:15"},{"body":{"nativeSrc":"8432:168:15","nodeType":"YulBlock","src":"8432:168:15","statements":[{"nativeSrc":"8442:26:15","nodeType":"YulAssignment","src":"8442:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"8454:9:15","nodeType":"YulIdentifier","src":"8454:9:15"},{"kind":"number","nativeSrc":"8465:2:15","nodeType":"YulLiteral","src":"8465:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8450:3:15","nodeType":"YulIdentifier","src":"8450:3:15"},"nativeSrc":"8450:18:15","nodeType":"YulFunctionCall","src":"8450:18:15"},"variableNames":[{"name":"tail","nativeSrc":"8442:4:15","nodeType":"YulIdentifier","src":"8442:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8484:9:15","nodeType":"YulIdentifier","src":"8484:9:15"},{"arguments":[{"name":"value0","nativeSrc":"8499:6:15","nodeType":"YulIdentifier","src":"8499:6:15"},{"kind":"number","nativeSrc":"8507:42:15","nodeType":"YulLiteral","src":"8507:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8495:3:15","nodeType":"YulIdentifier","src":"8495:3:15"},"nativeSrc":"8495:55:15","nodeType":"YulFunctionCall","src":"8495:55:15"}],"functionName":{"name":"mstore","nativeSrc":"8477:6:15","nodeType":"YulIdentifier","src":"8477:6:15"},"nativeSrc":"8477:74:15","nodeType":"YulFunctionCall","src":"8477:74:15"},"nativeSrc":"8477:74:15","nodeType":"YulExpressionStatement","src":"8477:74:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8571:9:15","nodeType":"YulIdentifier","src":"8571:9:15"},{"kind":"number","nativeSrc":"8582:2:15","nodeType":"YulLiteral","src":"8582:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8567:3:15","nodeType":"YulIdentifier","src":"8567:3:15"},"nativeSrc":"8567:18:15","nodeType":"YulFunctionCall","src":"8567:18:15"},{"name":"value1","nativeSrc":"8587:6:15","nodeType":"YulIdentifier","src":"8587:6:15"}],"functionName":{"name":"mstore","nativeSrc":"8560:6:15","nodeType":"YulIdentifier","src":"8560:6:15"},"nativeSrc":"8560:34:15","nodeType":"YulFunctionCall","src":"8560:34:15"},"nativeSrc":"8560:34:15","nodeType":"YulExpressionStatement","src":"8560:34:15"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"8303:297:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8393:9:15","nodeType":"YulTypedName","src":"8393:9:15","type":""},{"name":"value1","nativeSrc":"8404:6:15","nodeType":"YulTypedName","src":"8404:6:15","type":""},{"name":"value0","nativeSrc":"8412:6:15","nodeType":"YulTypedName","src":"8412:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8423:4:15","nodeType":"YulTypedName","src":"8423:4:15","type":""}],"src":"8303:297:15"},{"body":{"nativeSrc":"8637:152:15","nodeType":"YulBlock","src":"8637:152:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8654:1:15","nodeType":"YulLiteral","src":"8654:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8657:77:15","nodeType":"YulLiteral","src":"8657:77:15","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8647:6:15","nodeType":"YulIdentifier","src":"8647:6:15"},"nativeSrc":"8647:88:15","nodeType":"YulFunctionCall","src":"8647:88:15"},"nativeSrc":"8647:88:15","nodeType":"YulExpressionStatement","src":"8647:88:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8751:1:15","nodeType":"YulLiteral","src":"8751:1:15","type":"","value":"4"},{"kind":"number","nativeSrc":"8754:4:15","nodeType":"YulLiteral","src":"8754:4:15","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"8744:6:15","nodeType":"YulIdentifier","src":"8744:6:15"},"nativeSrc":"8744:15:15","nodeType":"YulFunctionCall","src":"8744:15:15"},"nativeSrc":"8744:15:15","nodeType":"YulExpressionStatement","src":"8744:15:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8775:1:15","nodeType":"YulLiteral","src":"8775:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8778:4:15","nodeType":"YulLiteral","src":"8778:4:15","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8768:6:15","nodeType":"YulIdentifier","src":"8768:6:15"},"nativeSrc":"8768:15:15","nodeType":"YulFunctionCall","src":"8768:15:15"},"nativeSrc":"8768:15:15","nodeType":"YulExpressionStatement","src":"8768:15:15"}]},"name":"panic_error_0x41","nativeSrc":"8605:184:15","nodeType":"YulFunctionDefinition","src":"8605:184:15"},{"body":{"nativeSrc":"8906:1132:15","nodeType":"YulBlock","src":"8906:1132:15","statements":[{"body":{"nativeSrc":"8952:16:15","nodeType":"YulBlock","src":"8952:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8961:1:15","nodeType":"YulLiteral","src":"8961:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"8964:1:15","nodeType":"YulLiteral","src":"8964:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8954:6:15","nodeType":"YulIdentifier","src":"8954:6:15"},"nativeSrc":"8954:12:15","nodeType":"YulFunctionCall","src":"8954:12:15"},"nativeSrc":"8954:12:15","nodeType":"YulExpressionStatement","src":"8954:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8927:7:15","nodeType":"YulIdentifier","src":"8927:7:15"},{"name":"headStart","nativeSrc":"8936:9:15","nodeType":"YulIdentifier","src":"8936:9:15"}],"functionName":{"name":"sub","nativeSrc":"8923:3:15","nodeType":"YulIdentifier","src":"8923:3:15"},"nativeSrc":"8923:23:15","nodeType":"YulFunctionCall","src":"8923:23:15"},{"kind":"number","nativeSrc":"8948:2:15","nodeType":"YulLiteral","src":"8948:2:15","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8919:3:15","nodeType":"YulIdentifier","src":"8919:3:15"},"nativeSrc":"8919:32:15","nodeType":"YulFunctionCall","src":"8919:32:15"},"nativeSrc":"8916:52:15","nodeType":"YulIf","src":"8916:52:15"},{"nativeSrc":"8977:37:15","nodeType":"YulVariableDeclaration","src":"8977:37:15","value":{"arguments":[{"name":"headStart","nativeSrc":"9004:9:15","nodeType":"YulIdentifier","src":"9004:9:15"}],"functionName":{"name":"calldataload","nativeSrc":"8991:12:15","nodeType":"YulIdentifier","src":"8991:12:15"},"nativeSrc":"8991:23:15","nodeType":"YulFunctionCall","src":"8991:23:15"},"variables":[{"name":"offset","nativeSrc":"8981:6:15","nodeType":"YulTypedName","src":"8981:6:15","type":""}]},{"nativeSrc":"9023:28:15","nodeType":"YulVariableDeclaration","src":"9023:28:15","value":{"kind":"number","nativeSrc":"9033:18:15","nodeType":"YulLiteral","src":"9033:18:15","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9027:2:15","nodeType":"YulTypedName","src":"9027:2:15","type":""}]},{"body":{"nativeSrc":"9078:16:15","nodeType":"YulBlock","src":"9078:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9087:1:15","nodeType":"YulLiteral","src":"9087:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"9090:1:15","nodeType":"YulLiteral","src":"9090:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9080:6:15","nodeType":"YulIdentifier","src":"9080:6:15"},"nativeSrc":"9080:12:15","nodeType":"YulFunctionCall","src":"9080:12:15"},"nativeSrc":"9080:12:15","nodeType":"YulExpressionStatement","src":"9080:12:15"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9066:6:15","nodeType":"YulIdentifier","src":"9066:6:15"},{"name":"_1","nativeSrc":"9074:2:15","nodeType":"YulIdentifier","src":"9074:2:15"}],"functionName":{"name":"gt","nativeSrc":"9063:2:15","nodeType":"YulIdentifier","src":"9063:2:15"},"nativeSrc":"9063:14:15","nodeType":"YulFunctionCall","src":"9063:14:15"},"nativeSrc":"9060:34:15","nodeType":"YulIf","src":"9060:34:15"},{"nativeSrc":"9103:32:15","nodeType":"YulVariableDeclaration","src":"9103:32:15","value":{"arguments":[{"name":"headStart","nativeSrc":"9117:9:15","nodeType":"YulIdentifier","src":"9117:9:15"},{"name":"offset","nativeSrc":"9128:6:15","nodeType":"YulIdentifier","src":"9128:6:15"}],"functionName":{"name":"add","nativeSrc":"9113:3:15","nodeType":"YulIdentifier","src":"9113:3:15"},"nativeSrc":"9113:22:15","nodeType":"YulFunctionCall","src":"9113:22:15"},"variables":[{"name":"_2","nativeSrc":"9107:2:15","nodeType":"YulTypedName","src":"9107:2:15","type":""}]},{"body":{"nativeSrc":"9183:16:15","nodeType":"YulBlock","src":"9183:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9192:1:15","nodeType":"YulLiteral","src":"9192:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"9195:1:15","nodeType":"YulLiteral","src":"9195:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9185:6:15","nodeType":"YulIdentifier","src":"9185:6:15"},"nativeSrc":"9185:12:15","nodeType":"YulFunctionCall","src":"9185:12:15"},"nativeSrc":"9185:12:15","nodeType":"YulExpressionStatement","src":"9185:12:15"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9162:2:15","nodeType":"YulIdentifier","src":"9162:2:15"},{"kind":"number","nativeSrc":"9166:4:15","nodeType":"YulLiteral","src":"9166:4:15","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"9158:3:15","nodeType":"YulIdentifier","src":"9158:3:15"},"nativeSrc":"9158:13:15","nodeType":"YulFunctionCall","src":"9158:13:15"},{"name":"dataEnd","nativeSrc":"9173:7:15","nodeType":"YulIdentifier","src":"9173:7:15"}],"functionName":{"name":"slt","nativeSrc":"9154:3:15","nodeType":"YulIdentifier","src":"9154:3:15"},"nativeSrc":"9154:27:15","nodeType":"YulFunctionCall","src":"9154:27:15"}],"functionName":{"name":"iszero","nativeSrc":"9147:6:15","nodeType":"YulIdentifier","src":"9147:6:15"},"nativeSrc":"9147:35:15","nodeType":"YulFunctionCall","src":"9147:35:15"},"nativeSrc":"9144:55:15","nodeType":"YulIf","src":"9144:55:15"},{"nativeSrc":"9208:26:15","nodeType":"YulVariableDeclaration","src":"9208:26:15","value":{"arguments":[{"name":"_2","nativeSrc":"9231:2:15","nodeType":"YulIdentifier","src":"9231:2:15"}],"functionName":{"name":"calldataload","nativeSrc":"9218:12:15","nodeType":"YulIdentifier","src":"9218:12:15"},"nativeSrc":"9218:16:15","nodeType":"YulFunctionCall","src":"9218:16:15"},"variables":[{"name":"_3","nativeSrc":"9212:2:15","nodeType":"YulTypedName","src":"9212:2:15","type":""}]},{"nativeSrc":"9243:14:15","nodeType":"YulVariableDeclaration","src":"9243:14:15","value":{"kind":"number","nativeSrc":"9253:4:15","nodeType":"YulLiteral","src":"9253:4:15","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"9247:2:15","nodeType":"YulTypedName","src":"9247:2:15","type":""}]},{"body":{"nativeSrc":"9280:22:15","nodeType":"YulBlock","src":"9280:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9282:16:15","nodeType":"YulIdentifier","src":"9282:16:15"},"nativeSrc":"9282:18:15","nodeType":"YulFunctionCall","src":"9282:18:15"},"nativeSrc":"9282:18:15","nodeType":"YulExpressionStatement","src":"9282:18:15"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"9272:2:15","nodeType":"YulIdentifier","src":"9272:2:15"},{"name":"_1","nativeSrc":"9276:2:15","nodeType":"YulIdentifier","src":"9276:2:15"}],"functionName":{"name":"gt","nativeSrc":"9269:2:15","nodeType":"YulIdentifier","src":"9269:2:15"},"nativeSrc":"9269:10:15","nodeType":"YulFunctionCall","src":"9269:10:15"},"nativeSrc":"9266:36:15","nodeType":"YulIf","src":"9266:36:15"},{"nativeSrc":"9311:20:15","nodeType":"YulVariableDeclaration","src":"9311:20:15","value":{"arguments":[{"kind":"number","nativeSrc":"9325:1:15","nodeType":"YulLiteral","src":"9325:1:15","type":"","value":"5"},{"name":"_3","nativeSrc":"9328:2:15","nodeType":"YulIdentifier","src":"9328:2:15"}],"functionName":{"name":"shl","nativeSrc":"9321:3:15","nodeType":"YulIdentifier","src":"9321:3:15"},"nativeSrc":"9321:10:15","nodeType":"YulFunctionCall","src":"9321:10:15"},"variables":[{"name":"_5","nativeSrc":"9315:2:15","nodeType":"YulTypedName","src":"9315:2:15","type":""}]},{"nativeSrc":"9340:23:15","nodeType":"YulVariableDeclaration","src":"9340:23:15","value":{"arguments":[{"kind":"number","nativeSrc":"9360:2:15","nodeType":"YulLiteral","src":"9360:2:15","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"9354:5:15","nodeType":"YulIdentifier","src":"9354:5:15"},"nativeSrc":"9354:9:15","nodeType":"YulFunctionCall","src":"9354:9:15"},"variables":[{"name":"memPtr","nativeSrc":"9344:6:15","nodeType":"YulTypedName","src":"9344:6:15","type":""}]},{"nativeSrc":"9372:115:15","nodeType":"YulVariableDeclaration","src":"9372:115:15","value":{"arguments":[{"name":"memPtr","nativeSrc":"9394:6:15","nodeType":"YulIdentifier","src":"9394:6:15"},{"arguments":[{"arguments":[{"name":"_5","nativeSrc":"9410:2:15","nodeType":"YulIdentifier","src":"9410:2:15"},{"kind":"number","nativeSrc":"9414:2:15","nodeType":"YulLiteral","src":"9414:2:15","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"9406:3:15","nodeType":"YulIdentifier","src":"9406:3:15"},"nativeSrc":"9406:11:15","nodeType":"YulFunctionCall","src":"9406:11:15"},{"kind":"number","nativeSrc":"9419:66:15","nodeType":"YulLiteral","src":"9419:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"9402:3:15","nodeType":"YulIdentifier","src":"9402:3:15"},"nativeSrc":"9402:84:15","nodeType":"YulFunctionCall","src":"9402:84:15"}],"functionName":{"name":"add","nativeSrc":"9390:3:15","nodeType":"YulIdentifier","src":"9390:3:15"},"nativeSrc":"9390:97:15","nodeType":"YulFunctionCall","src":"9390:97:15"},"variables":[{"name":"newFreePtr","nativeSrc":"9376:10:15","nodeType":"YulTypedName","src":"9376:10:15","type":""}]},{"body":{"nativeSrc":"9546:22:15","nodeType":"YulBlock","src":"9546:22:15","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"9548:16:15","nodeType":"YulIdentifier","src":"9548:16:15"},"nativeSrc":"9548:18:15","nodeType":"YulFunctionCall","src":"9548:18:15"},"nativeSrc":"9548:18:15","nodeType":"YulExpressionStatement","src":"9548:18:15"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"9505:10:15","nodeType":"YulIdentifier","src":"9505:10:15"},{"name":"_1","nativeSrc":"9517:2:15","nodeType":"YulIdentifier","src":"9517:2:15"}],"functionName":{"name":"gt","nativeSrc":"9502:2:15","nodeType":"YulIdentifier","src":"9502:2:15"},"nativeSrc":"9502:18:15","nodeType":"YulFunctionCall","src":"9502:18:15"},{"arguments":[{"name":"newFreePtr","nativeSrc":"9525:10:15","nodeType":"YulIdentifier","src":"9525:10:15"},{"name":"memPtr","nativeSrc":"9537:6:15","nodeType":"YulIdentifier","src":"9537:6:15"}],"functionName":{"name":"lt","nativeSrc":"9522:2:15","nodeType":"YulIdentifier","src":"9522:2:15"},"nativeSrc":"9522:22:15","nodeType":"YulFunctionCall","src":"9522:22:15"}],"functionName":{"name":"or","nativeSrc":"9499:2:15","nodeType":"YulIdentifier","src":"9499:2:15"},"nativeSrc":"9499:46:15","nodeType":"YulFunctionCall","src":"9499:46:15"},"nativeSrc":"9496:72:15","nodeType":"YulIf","src":"9496:72:15"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"9584:2:15","nodeType":"YulLiteral","src":"9584:2:15","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"9588:10:15","nodeType":"YulIdentifier","src":"9588:10:15"}],"functionName":{"name":"mstore","nativeSrc":"9577:6:15","nodeType":"YulIdentifier","src":"9577:6:15"},"nativeSrc":"9577:22:15","nodeType":"YulFunctionCall","src":"9577:22:15"},"nativeSrc":"9577:22:15","nodeType":"YulExpressionStatement","src":"9577:22:15"},{"nativeSrc":"9608:17:15","nodeType":"YulVariableDeclaration","src":"9608:17:15","value":{"name":"memPtr","nativeSrc":"9619:6:15","nodeType":"YulIdentifier","src":"9619:6:15"},"variables":[{"name":"dst","nativeSrc":"9612:3:15","nodeType":"YulTypedName","src":"9612:3:15","type":""}]},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"9641:6:15","nodeType":"YulIdentifier","src":"9641:6:15"},{"name":"_3","nativeSrc":"9649:2:15","nodeType":"YulIdentifier","src":"9649:2:15"}],"functionName":{"name":"mstore","nativeSrc":"9634:6:15","nodeType":"YulIdentifier","src":"9634:6:15"},"nativeSrc":"9634:18:15","nodeType":"YulFunctionCall","src":"9634:18:15"},"nativeSrc":"9634:18:15","nodeType":"YulExpressionStatement","src":"9634:18:15"},{"nativeSrc":"9661:22:15","nodeType":"YulAssignment","src":"9661:22:15","value":{"arguments":[{"name":"memPtr","nativeSrc":"9672:6:15","nodeType":"YulIdentifier","src":"9672:6:15"},{"name":"_4","nativeSrc":"9680:2:15","nodeType":"YulIdentifier","src":"9680:2:15"}],"functionName":{"name":"add","nativeSrc":"9668:3:15","nodeType":"YulIdentifier","src":"9668:3:15"},"nativeSrc":"9668:15:15","nodeType":"YulFunctionCall","src":"9668:15:15"},"variableNames":[{"name":"dst","nativeSrc":"9661:3:15","nodeType":"YulIdentifier","src":"9661:3:15"}]},{"nativeSrc":"9692:34:15","nodeType":"YulVariableDeclaration","src":"9692:34:15","value":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"9714:2:15","nodeType":"YulIdentifier","src":"9714:2:15"},{"name":"_5","nativeSrc":"9718:2:15","nodeType":"YulIdentifier","src":"9718:2:15"}],"functionName":{"name":"add","nativeSrc":"9710:3:15","nodeType":"YulIdentifier","src":"9710:3:15"},"nativeSrc":"9710:11:15","nodeType":"YulFunctionCall","src":"9710:11:15"},{"name":"_4","nativeSrc":"9723:2:15","nodeType":"YulIdentifier","src":"9723:2:15"}],"functionName":{"name":"add","nativeSrc":"9706:3:15","nodeType":"YulIdentifier","src":"9706:3:15"},"nativeSrc":"9706:20:15","nodeType":"YulFunctionCall","src":"9706:20:15"},"variables":[{"name":"srcEnd","nativeSrc":"9696:6:15","nodeType":"YulTypedName","src":"9696:6:15","type":""}]},{"body":{"nativeSrc":"9758:16:15","nodeType":"YulBlock","src":"9758:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9767:1:15","nodeType":"YulLiteral","src":"9767:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"9770:1:15","nodeType":"YulLiteral","src":"9770:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9760:6:15","nodeType":"YulIdentifier","src":"9760:6:15"},"nativeSrc":"9760:12:15","nodeType":"YulFunctionCall","src":"9760:12:15"},"nativeSrc":"9760:12:15","nodeType":"YulExpressionStatement","src":"9760:12:15"}]},"condition":{"arguments":[{"name":"srcEnd","nativeSrc":"9741:6:15","nodeType":"YulIdentifier","src":"9741:6:15"},{"name":"dataEnd","nativeSrc":"9749:7:15","nodeType":"YulIdentifier","src":"9749:7:15"}],"functionName":{"name":"gt","nativeSrc":"9738:2:15","nodeType":"YulIdentifier","src":"9738:2:15"},"nativeSrc":"9738:19:15","nodeType":"YulFunctionCall","src":"9738:19:15"},"nativeSrc":"9735:39:15","nodeType":"YulIf","src":"9735:39:15"},{"nativeSrc":"9783:22:15","nodeType":"YulVariableDeclaration","src":"9783:22:15","value":{"arguments":[{"name":"_2","nativeSrc":"9798:2:15","nodeType":"YulIdentifier","src":"9798:2:15"},{"name":"_4","nativeSrc":"9802:2:15","nodeType":"YulIdentifier","src":"9802:2:15"}],"functionName":{"name":"add","nativeSrc":"9794:3:15","nodeType":"YulIdentifier","src":"9794:3:15"},"nativeSrc":"9794:11:15","nodeType":"YulFunctionCall","src":"9794:11:15"},"variables":[{"name":"src","nativeSrc":"9787:3:15","nodeType":"YulTypedName","src":"9787:3:15","type":""}]},{"body":{"nativeSrc":"9870:86:15","nodeType":"YulBlock","src":"9870:86:15","statements":[{"expression":{"arguments":[{"name":"dst","nativeSrc":"9891:3:15","nodeType":"YulIdentifier","src":"9891:3:15"},{"arguments":[{"name":"src","nativeSrc":"9909:3:15","nodeType":"YulIdentifier","src":"9909:3:15"}],"functionName":{"name":"calldataload","nativeSrc":"9896:12:15","nodeType":"YulIdentifier","src":"9896:12:15"},"nativeSrc":"9896:17:15","nodeType":"YulFunctionCall","src":"9896:17:15"}],"functionName":{"name":"mstore","nativeSrc":"9884:6:15","nodeType":"YulIdentifier","src":"9884:6:15"},"nativeSrc":"9884:30:15","nodeType":"YulFunctionCall","src":"9884:30:15"},"nativeSrc":"9884:30:15","nodeType":"YulExpressionStatement","src":"9884:30:15"},{"nativeSrc":"9927:19:15","nodeType":"YulAssignment","src":"9927:19:15","value":{"arguments":[{"name":"dst","nativeSrc":"9938:3:15","nodeType":"YulIdentifier","src":"9938:3:15"},{"name":"_4","nativeSrc":"9943:2:15","nodeType":"YulIdentifier","src":"9943:2:15"}],"functionName":{"name":"add","nativeSrc":"9934:3:15","nodeType":"YulIdentifier","src":"9934:3:15"},"nativeSrc":"9934:12:15","nodeType":"YulFunctionCall","src":"9934:12:15"},"variableNames":[{"name":"dst","nativeSrc":"9927:3:15","nodeType":"YulIdentifier","src":"9927:3:15"}]}]},"condition":{"arguments":[{"name":"src","nativeSrc":"9825:3:15","nodeType":"YulIdentifier","src":"9825:3:15"},{"name":"srcEnd","nativeSrc":"9830:6:15","nodeType":"YulIdentifier","src":"9830:6:15"}],"functionName":{"name":"lt","nativeSrc":"9822:2:15","nodeType":"YulIdentifier","src":"9822:2:15"},"nativeSrc":"9822:15:15","nodeType":"YulFunctionCall","src":"9822:15:15"},"nativeSrc":"9814:142:15","nodeType":"YulForLoop","post":{"nativeSrc":"9838:23:15","nodeType":"YulBlock","src":"9838:23:15","statements":[{"nativeSrc":"9840:19:15","nodeType":"YulAssignment","src":"9840:19:15","value":{"arguments":[{"name":"src","nativeSrc":"9851:3:15","nodeType":"YulIdentifier","src":"9851:3:15"},{"name":"_4","nativeSrc":"9856:2:15","nodeType":"YulIdentifier","src":"9856:2:15"}],"functionName":{"name":"add","nativeSrc":"9847:3:15","nodeType":"YulIdentifier","src":"9847:3:15"},"nativeSrc":"9847:12:15","nodeType":"YulFunctionCall","src":"9847:12:15"},"variableNames":[{"name":"src","nativeSrc":"9840:3:15","nodeType":"YulIdentifier","src":"9840:3:15"}]}]},"pre":{"nativeSrc":"9818:3:15","nodeType":"YulBlock","src":"9818:3:15","statements":[]},"src":"9814:142:15"},{"nativeSrc":"9965:16:15","nodeType":"YulAssignment","src":"9965:16:15","value":{"name":"memPtr","nativeSrc":"9975:6:15","nodeType":"YulIdentifier","src":"9975:6:15"},"variableNames":[{"name":"value0","nativeSrc":"9965:6:15","nodeType":"YulIdentifier","src":"9965:6:15"}]},{"nativeSrc":"9990:42:15","nodeType":"YulAssignment","src":"9990:42:15","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10017:9:15","nodeType":"YulIdentifier","src":"10017:9:15"},{"name":"_4","nativeSrc":"10028:2:15","nodeType":"YulIdentifier","src":"10028:2:15"}],"functionName":{"name":"add","nativeSrc":"10013:3:15","nodeType":"YulIdentifier","src":"10013:3:15"},"nativeSrc":"10013:18:15","nodeType":"YulFunctionCall","src":"10013:18:15"}],"functionName":{"name":"calldataload","nativeSrc":"10000:12:15","nodeType":"YulIdentifier","src":"10000:12:15"},"nativeSrc":"10000:32:15","nodeType":"YulFunctionCall","src":"10000:32:15"},"variableNames":[{"name":"value1","nativeSrc":"9990:6:15","nodeType":"YulIdentifier","src":"9990:6:15"}]}]},"name":"abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256","nativeSrc":"8794:1244:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8864:9:15","nodeType":"YulTypedName","src":"8864:9:15","type":""},{"name":"dataEnd","nativeSrc":"8875:7:15","nodeType":"YulTypedName","src":"8875:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8887:6:15","nodeType":"YulTypedName","src":"8887:6:15","type":""},{"name":"value1","nativeSrc":"8895:6:15","nodeType":"YulTypedName","src":"8895:6:15","type":""}],"src":"8794:1244:15"},{"body":{"nativeSrc":"10190:182:15","nodeType":"YulBlock","src":"10190:182:15","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"10207:3:15","nodeType":"YulIdentifier","src":"10207:3:15"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"10220:2:15","nodeType":"YulLiteral","src":"10220:2:15","type":"","value":"96"},{"name":"value0","nativeSrc":"10224:6:15","nodeType":"YulIdentifier","src":"10224:6:15"}],"functionName":{"name":"shl","nativeSrc":"10216:3:15","nodeType":"YulIdentifier","src":"10216:3:15"},"nativeSrc":"10216:15:15","nodeType":"YulFunctionCall","src":"10216:15:15"},{"kind":"number","nativeSrc":"10233:66:15","nodeType":"YulLiteral","src":"10233:66:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"10212:3:15","nodeType":"YulIdentifier","src":"10212:3:15"},"nativeSrc":"10212:88:15","nodeType":"YulFunctionCall","src":"10212:88:15"}],"functionName":{"name":"mstore","nativeSrc":"10200:6:15","nodeType":"YulIdentifier","src":"10200:6:15"},"nativeSrc":"10200:101:15","nodeType":"YulFunctionCall","src":"10200:101:15"},"nativeSrc":"10200:101:15","nodeType":"YulExpressionStatement","src":"10200:101:15"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"10321:3:15","nodeType":"YulIdentifier","src":"10321:3:15"},{"kind":"number","nativeSrc":"10326:2:15","nodeType":"YulLiteral","src":"10326:2:15","type":"","value":"20"}],"functionName":{"name":"add","nativeSrc":"10317:3:15","nodeType":"YulIdentifier","src":"10317:3:15"},"nativeSrc":"10317:12:15","nodeType":"YulFunctionCall","src":"10317:12:15"},{"name":"value1","nativeSrc":"10331:6:15","nodeType":"YulIdentifier","src":"10331:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10310:6:15","nodeType":"YulIdentifier","src":"10310:6:15"},"nativeSrc":"10310:28:15","nodeType":"YulFunctionCall","src":"10310:28:15"},"nativeSrc":"10310:28:15","nodeType":"YulExpressionStatement","src":"10310:28:15"},{"nativeSrc":"10347:19:15","nodeType":"YulAssignment","src":"10347:19:15","value":{"arguments":[{"name":"pos","nativeSrc":"10358:3:15","nodeType":"YulIdentifier","src":"10358:3:15"},{"kind":"number","nativeSrc":"10363:2:15","nodeType":"YulLiteral","src":"10363:2:15","type":"","value":"52"}],"functionName":{"name":"add","nativeSrc":"10354:3:15","nodeType":"YulIdentifier","src":"10354:3:15"},"nativeSrc":"10354:12:15","nodeType":"YulFunctionCall","src":"10354:12:15"},"variableNames":[{"name":"end","nativeSrc":"10347:3:15","nodeType":"YulIdentifier","src":"10347:3:15"}]}]},"name":"abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed","nativeSrc":"10043:329:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"10158:3:15","nodeType":"YulTypedName","src":"10158:3:15","type":""},{"name":"value1","nativeSrc":"10163:6:15","nodeType":"YulTypedName","src":"10163:6:15","type":""},{"name":"value0","nativeSrc":"10171:6:15","nodeType":"YulTypedName","src":"10171:6:15","type":""}],"returnVariables":[{"name":"end","nativeSrc":"10182:3:15","nodeType":"YulTypedName","src":"10182:3:15","type":""}],"src":"10043:329:15"},{"body":{"nativeSrc":"10506:119:15","nodeType":"YulBlock","src":"10506:119:15","statements":[{"nativeSrc":"10516:26:15","nodeType":"YulAssignment","src":"10516:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"10528:9:15","nodeType":"YulIdentifier","src":"10528:9:15"},{"kind":"number","nativeSrc":"10539:2:15","nodeType":"YulLiteral","src":"10539:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10524:3:15","nodeType":"YulIdentifier","src":"10524:3:15"},"nativeSrc":"10524:18:15","nodeType":"YulFunctionCall","src":"10524:18:15"},"variableNames":[{"name":"tail","nativeSrc":"10516:4:15","nodeType":"YulIdentifier","src":"10516:4:15"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10558:9:15","nodeType":"YulIdentifier","src":"10558:9:15"},{"name":"value0","nativeSrc":"10569:6:15","nodeType":"YulIdentifier","src":"10569:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10551:6:15","nodeType":"YulIdentifier","src":"10551:6:15"},"nativeSrc":"10551:25:15","nodeType":"YulFunctionCall","src":"10551:25:15"},"nativeSrc":"10551:25:15","nodeType":"YulExpressionStatement","src":"10551:25:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10596:9:15","nodeType":"YulIdentifier","src":"10596:9:15"},{"kind":"number","nativeSrc":"10607:2:15","nodeType":"YulLiteral","src":"10607:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10592:3:15","nodeType":"YulIdentifier","src":"10592:3:15"},"nativeSrc":"10592:18:15","nodeType":"YulFunctionCall","src":"10592:18:15"},{"name":"value1","nativeSrc":"10612:6:15","nodeType":"YulIdentifier","src":"10612:6:15"}],"functionName":{"name":"mstore","nativeSrc":"10585:6:15","nodeType":"YulIdentifier","src":"10585:6:15"},"nativeSrc":"10585:34:15","nodeType":"YulFunctionCall","src":"10585:34:15"},"nativeSrc":"10585:34:15","nodeType":"YulExpressionStatement","src":"10585:34:15"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10377:248:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10467:9:15","nodeType":"YulTypedName","src":"10467:9:15","type":""},{"name":"value1","nativeSrc":"10478:6:15","nodeType":"YulTypedName","src":"10478:6:15","type":""},{"name":"value0","nativeSrc":"10486:6:15","nodeType":"YulTypedName","src":"10486:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10497:4:15","nodeType":"YulTypedName","src":"10497:4:15","type":""}],"src":"10377:248:15"},{"body":{"nativeSrc":"10963:402:15","nodeType":"YulBlock","src":"10963:402:15","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10980:9:15","nodeType":"YulIdentifier","src":"10980:9:15"},{"kind":"number","nativeSrc":"10991:3:15","nodeType":"YulLiteral","src":"10991:3:15","type":"","value":"160"}],"functionName":{"name":"mstore","nativeSrc":"10973:6:15","nodeType":"YulIdentifier","src":"10973:6:15"},"nativeSrc":"10973:22:15","nodeType":"YulFunctionCall","src":"10973:22:15"},"nativeSrc":"10973:22:15","nodeType":"YulExpressionStatement","src":"10973:22:15"},{"nativeSrc":"11004:88:15","nodeType":"YulVariableDeclaration","src":"11004:88:15","value":{"arguments":[{"name":"value0","nativeSrc":"11056:6:15","nodeType":"YulIdentifier","src":"11056:6:15"},{"name":"value1","nativeSrc":"11064:6:15","nodeType":"YulIdentifier","src":"11064:6:15"},{"arguments":[{"name":"headStart","nativeSrc":"11076:9:15","nodeType":"YulIdentifier","src":"11076:9:15"},{"kind":"number","nativeSrc":"11087:3:15","nodeType":"YulLiteral","src":"11087:3:15","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11072:3:15","nodeType":"YulIdentifier","src":"11072:3:15"},"nativeSrc":"11072:19:15","nodeType":"YulFunctionCall","src":"11072:19:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11018:37:15","nodeType":"YulIdentifier","src":"11018:37:15"},"nativeSrc":"11018:74:15","nodeType":"YulFunctionCall","src":"11018:74:15"},"variables":[{"name":"tail_1","nativeSrc":"11008:6:15","nodeType":"YulTypedName","src":"11008:6:15","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11112:9:15","nodeType":"YulIdentifier","src":"11112:9:15"},{"kind":"number","nativeSrc":"11123:2:15","nodeType":"YulLiteral","src":"11123:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11108:3:15","nodeType":"YulIdentifier","src":"11108:3:15"},"nativeSrc":"11108:18:15","nodeType":"YulFunctionCall","src":"11108:18:15"},{"arguments":[{"name":"tail_1","nativeSrc":"11132:6:15","nodeType":"YulIdentifier","src":"11132:6:15"},{"name":"headStart","nativeSrc":"11140:9:15","nodeType":"YulIdentifier","src":"11140:9:15"}],"functionName":{"name":"sub","nativeSrc":"11128:3:15","nodeType":"YulIdentifier","src":"11128:3:15"},"nativeSrc":"11128:22:15","nodeType":"YulFunctionCall","src":"11128:22:15"}],"functionName":{"name":"mstore","nativeSrc":"11101:6:15","nodeType":"YulIdentifier","src":"11101:6:15"},"nativeSrc":"11101:50:15","nodeType":"YulFunctionCall","src":"11101:50:15"},"nativeSrc":"11101:50:15","nodeType":"YulExpressionStatement","src":"11101:50:15"},{"nativeSrc":"11160:69:15","nodeType":"YulAssignment","src":"11160:69:15","value":{"arguments":[{"name":"value2","nativeSrc":"11206:6:15","nodeType":"YulIdentifier","src":"11206:6:15"},{"name":"value3","nativeSrc":"11214:6:15","nodeType":"YulIdentifier","src":"11214:6:15"},{"name":"tail_1","nativeSrc":"11222:6:15","nodeType":"YulIdentifier","src":"11222:6:15"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"11168:37:15","nodeType":"YulIdentifier","src":"11168:37:15"},"nativeSrc":"11168:61:15","nodeType":"YulFunctionCall","src":"11168:61:15"},"variableNames":[{"name":"tail","nativeSrc":"11160:4:15","nodeType":"YulIdentifier","src":"11160:4:15"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11249:9:15","nodeType":"YulIdentifier","src":"11249:9:15"},{"kind":"number","nativeSrc":"11260:2:15","nodeType":"YulLiteral","src":"11260:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11245:3:15","nodeType":"YulIdentifier","src":"11245:3:15"},"nativeSrc":"11245:18:15","nodeType":"YulFunctionCall","src":"11245:18:15"},{"name":"value4","nativeSrc":"11265:6:15","nodeType":"YulIdentifier","src":"11265:6:15"}],"functionName":{"name":"mstore","nativeSrc":"11238:6:15","nodeType":"YulIdentifier","src":"11238:6:15"},"nativeSrc":"11238:34:15","nodeType":"YulFunctionCall","src":"11238:34:15"},"nativeSrc":"11238:34:15","nodeType":"YulExpressionStatement","src":"11238:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11292:9:15","nodeType":"YulIdentifier","src":"11292:9:15"},{"kind":"number","nativeSrc":"11303:2:15","nodeType":"YulLiteral","src":"11303:2:15","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11288:3:15","nodeType":"YulIdentifier","src":"11288:3:15"},"nativeSrc":"11288:18:15","nodeType":"YulFunctionCall","src":"11288:18:15"},{"name":"value5","nativeSrc":"11308:6:15","nodeType":"YulIdentifier","src":"11308:6:15"}],"functionName":{"name":"mstore","nativeSrc":"11281:6:15","nodeType":"YulIdentifier","src":"11281:6:15"},"nativeSrc":"11281:34:15","nodeType":"YulFunctionCall","src":"11281:34:15"},"nativeSrc":"11281:34:15","nodeType":"YulExpressionStatement","src":"11281:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11335:9:15","nodeType":"YulIdentifier","src":"11335:9:15"},{"kind":"number","nativeSrc":"11346:3:15","nodeType":"YulLiteral","src":"11346:3:15","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11331:3:15","nodeType":"YulIdentifier","src":"11331:3:15"},"nativeSrc":"11331:19:15","nodeType":"YulFunctionCall","src":"11331:19:15"},{"name":"value6","nativeSrc":"11352:6:15","nodeType":"YulIdentifier","src":"11352:6:15"}],"functionName":{"name":"mstore","nativeSrc":"11324:6:15","nodeType":"YulIdentifier","src":"11324:6:15"},"nativeSrc":"11324:35:15","nodeType":"YulFunctionCall","src":"11324:35:15"},"nativeSrc":"11324:35:15","nodeType":"YulExpressionStatement","src":"11324:35:15"}]},"name":"abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10630:735:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10884:9:15","nodeType":"YulTypedName","src":"10884:9:15","type":""},{"name":"value6","nativeSrc":"10895:6:15","nodeType":"YulTypedName","src":"10895:6:15","type":""},{"name":"value5","nativeSrc":"10903:6:15","nodeType":"YulTypedName","src":"10903:6:15","type":""},{"name":"value4","nativeSrc":"10911:6:15","nodeType":"YulTypedName","src":"10911:6:15","type":""},{"name":"value3","nativeSrc":"10919:6:15","nodeType":"YulTypedName","src":"10919:6:15","type":""},{"name":"value2","nativeSrc":"10927:6:15","nodeType":"YulTypedName","src":"10927:6:15","type":""},{"name":"value1","nativeSrc":"10935:6:15","nodeType":"YulTypedName","src":"10935:6:15","type":""},{"name":"value0","nativeSrc":"10943:6:15","nodeType":"YulTypedName","src":"10943:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10954:4:15","nodeType":"YulTypedName","src":"10954:4:15","type":""}],"src":"10630:735:15"},{"body":{"nativeSrc":"11499:198:15","nodeType":"YulBlock","src":"11499:198:15","statements":[{"nativeSrc":"11509:26:15","nodeType":"YulAssignment","src":"11509:26:15","value":{"arguments":[{"name":"headStart","nativeSrc":"11521:9:15","nodeType":"YulIdentifier","src":"11521:9:15"},{"kind":"number","nativeSrc":"11532:2:15","nodeType":"YulLiteral","src":"11532:2:15","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11517:3:15","nodeType":"YulIdentifier","src":"11517:3:15"},"nativeSrc":"11517:18:15","nodeType":"YulFunctionCall","src":"11517:18:15"},"variableNames":[{"name":"tail","nativeSrc":"11509:4:15","nodeType":"YulIdentifier","src":"11509:4:15"}]},{"nativeSrc":"11544:52:15","nodeType":"YulVariableDeclaration","src":"11544:52:15","value":{"kind":"number","nativeSrc":"11554:42:15","nodeType":"YulLiteral","src":"11554:42:15","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"11548:2:15","nodeType":"YulTypedName","src":"11548:2:15","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11612:9:15","nodeType":"YulIdentifier","src":"11612:9:15"},{"arguments":[{"name":"value0","nativeSrc":"11627:6:15","nodeType":"YulIdentifier","src":"11627:6:15"},{"name":"_1","nativeSrc":"11635:2:15","nodeType":"YulIdentifier","src":"11635:2:15"}],"functionName":{"name":"and","nativeSrc":"11623:3:15","nodeType":"YulIdentifier","src":"11623:3:15"},"nativeSrc":"11623:15:15","nodeType":"YulFunctionCall","src":"11623:15:15"}],"functionName":{"name":"mstore","nativeSrc":"11605:6:15","nodeType":"YulIdentifier","src":"11605:6:15"},"nativeSrc":"11605:34:15","nodeType":"YulFunctionCall","src":"11605:34:15"},"nativeSrc":"11605:34:15","nodeType":"YulExpressionStatement","src":"11605:34:15"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11659:9:15","nodeType":"YulIdentifier","src":"11659:9:15"},{"kind":"number","nativeSrc":"11670:2:15","nodeType":"YulLiteral","src":"11670:2:15","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11655:3:15","nodeType":"YulIdentifier","src":"11655:3:15"},"nativeSrc":"11655:18:15","nodeType":"YulFunctionCall","src":"11655:18:15"},{"arguments":[{"name":"value1","nativeSrc":"11679:6:15","nodeType":"YulIdentifier","src":"11679:6:15"},{"name":"_1","nativeSrc":"11687:2:15","nodeType":"YulIdentifier","src":"11687:2:15"}],"functionName":{"name":"and","nativeSrc":"11675:3:15","nodeType":"YulIdentifier","src":"11675:3:15"},"nativeSrc":"11675:15:15","nodeType":"YulFunctionCall","src":"11675:15:15"}],"functionName":{"name":"mstore","nativeSrc":"11648:6:15","nodeType":"YulIdentifier","src":"11648:6:15"},"nativeSrc":"11648:43:15","nodeType":"YulFunctionCall","src":"11648:43:15"},"nativeSrc":"11648:43:15","nodeType":"YulExpressionStatement","src":"11648:43:15"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"11370:327:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11460:9:15","nodeType":"YulTypedName","src":"11460:9:15","type":""},{"name":"value1","nativeSrc":"11471:6:15","nodeType":"YulTypedName","src":"11471:6:15","type":""},{"name":"value0","nativeSrc":"11479:6:15","nodeType":"YulTypedName","src":"11479:6:15","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11490:4:15","nodeType":"YulTypedName","src":"11490:4:15","type":""}],"src":"11370:327:15"},{"body":{"nativeSrc":"11780:199:15","nodeType":"YulBlock","src":"11780:199:15","statements":[{"body":{"nativeSrc":"11826:16:15","nodeType":"YulBlock","src":"11826:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11835:1:15","nodeType":"YulLiteral","src":"11835:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"11838:1:15","nodeType":"YulLiteral","src":"11838:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11828:6:15","nodeType":"YulIdentifier","src":"11828:6:15"},"nativeSrc":"11828:12:15","nodeType":"YulFunctionCall","src":"11828:12:15"},"nativeSrc":"11828:12:15","nodeType":"YulExpressionStatement","src":"11828:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11801:7:15","nodeType":"YulIdentifier","src":"11801:7:15"},{"name":"headStart","nativeSrc":"11810:9:15","nodeType":"YulIdentifier","src":"11810:9:15"}],"functionName":{"name":"sub","nativeSrc":"11797:3:15","nodeType":"YulIdentifier","src":"11797:3:15"},"nativeSrc":"11797:23:15","nodeType":"YulFunctionCall","src":"11797:23:15"},{"kind":"number","nativeSrc":"11822:2:15","nodeType":"YulLiteral","src":"11822:2:15","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11793:3:15","nodeType":"YulIdentifier","src":"11793:3:15"},"nativeSrc":"11793:32:15","nodeType":"YulFunctionCall","src":"11793:32:15"},"nativeSrc":"11790:52:15","nodeType":"YulIf","src":"11790:52:15"},{"nativeSrc":"11851:29:15","nodeType":"YulVariableDeclaration","src":"11851:29:15","value":{"arguments":[{"name":"headStart","nativeSrc":"11870:9:15","nodeType":"YulIdentifier","src":"11870:9:15"}],"functionName":{"name":"mload","nativeSrc":"11864:5:15","nodeType":"YulIdentifier","src":"11864:5:15"},"nativeSrc":"11864:16:15","nodeType":"YulFunctionCall","src":"11864:16:15"},"variables":[{"name":"value","nativeSrc":"11855:5:15","nodeType":"YulTypedName","src":"11855:5:15","type":""}]},{"body":{"nativeSrc":"11933:16:15","nodeType":"YulBlock","src":"11933:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11942:1:15","nodeType":"YulLiteral","src":"11942:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"11945:1:15","nodeType":"YulLiteral","src":"11945:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11935:6:15","nodeType":"YulIdentifier","src":"11935:6:15"},"nativeSrc":"11935:12:15","nodeType":"YulFunctionCall","src":"11935:12:15"},"nativeSrc":"11935:12:15","nodeType":"YulExpressionStatement","src":"11935:12:15"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11902:5:15","nodeType":"YulIdentifier","src":"11902:5:15"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11923:5:15","nodeType":"YulIdentifier","src":"11923:5:15"}],"functionName":{"name":"iszero","nativeSrc":"11916:6:15","nodeType":"YulIdentifier","src":"11916:6:15"},"nativeSrc":"11916:13:15","nodeType":"YulFunctionCall","src":"11916:13:15"}],"functionName":{"name":"iszero","nativeSrc":"11909:6:15","nodeType":"YulIdentifier","src":"11909:6:15"},"nativeSrc":"11909:21:15","nodeType":"YulFunctionCall","src":"11909:21:15"}],"functionName":{"name":"eq","nativeSrc":"11899:2:15","nodeType":"YulIdentifier","src":"11899:2:15"},"nativeSrc":"11899:32:15","nodeType":"YulFunctionCall","src":"11899:32:15"}],"functionName":{"name":"iszero","nativeSrc":"11892:6:15","nodeType":"YulIdentifier","src":"11892:6:15"},"nativeSrc":"11892:40:15","nodeType":"YulFunctionCall","src":"11892:40:15"},"nativeSrc":"11889:60:15","nodeType":"YulIf","src":"11889:60:15"},{"nativeSrc":"11958:15:15","nodeType":"YulAssignment","src":"11958:15:15","value":{"name":"value","nativeSrc":"11968:5:15","nodeType":"YulIdentifier","src":"11968:5:15"},"variableNames":[{"name":"value0","nativeSrc":"11958:6:15","nodeType":"YulIdentifier","src":"11958:6:15"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"11702:277:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11746:9:15","nodeType":"YulTypedName","src":"11746:9:15","type":""},{"name":"dataEnd","nativeSrc":"11757:7:15","nodeType":"YulTypedName","src":"11757:7:15","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11769:6:15","nodeType":"YulTypedName","src":"11769:6:15","type":""}],"src":"11702:277:15"},{"body":{"nativeSrc":"12114:201:15","nodeType":"YulBlock","src":"12114:201:15","statements":[{"body":{"nativeSrc":"12152:16:15","nodeType":"YulBlock","src":"12152:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12161:1:15","nodeType":"YulLiteral","src":"12161:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"12164:1:15","nodeType":"YulLiteral","src":"12164:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12154:6:15","nodeType":"YulIdentifier","src":"12154:6:15"},"nativeSrc":"12154:12:15","nodeType":"YulFunctionCall","src":"12154:12:15"},"nativeSrc":"12154:12:15","nodeType":"YulExpressionStatement","src":"12154:12:15"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"12130:10:15","nodeType":"YulIdentifier","src":"12130:10:15"},{"name":"endIndex","nativeSrc":"12142:8:15","nodeType":"YulIdentifier","src":"12142:8:15"}],"functionName":{"name":"gt","nativeSrc":"12127:2:15","nodeType":"YulIdentifier","src":"12127:2:15"},"nativeSrc":"12127:24:15","nodeType":"YulFunctionCall","src":"12127:24:15"},"nativeSrc":"12124:44:15","nodeType":"YulIf","src":"12124:44:15"},{"body":{"nativeSrc":"12201:16:15","nodeType":"YulBlock","src":"12201:16:15","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12210:1:15","nodeType":"YulLiteral","src":"12210:1:15","type":"","value":"0"},{"kind":"number","nativeSrc":"12213:1:15","nodeType":"YulLiteral","src":"12213:1:15","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12203:6:15","nodeType":"YulIdentifier","src":"12203:6:15"},"nativeSrc":"12203:12:15","nodeType":"YulFunctionCall","src":"12203:12:15"},"nativeSrc":"12203:12:15","nodeType":"YulExpressionStatement","src":"12203:12:15"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"12183:8:15","nodeType":"YulIdentifier","src":"12183:8:15"},{"name":"length","nativeSrc":"12193:6:15","nodeType":"YulIdentifier","src":"12193:6:15"}],"functionName":{"name":"gt","nativeSrc":"12180:2:15","nodeType":"YulIdentifier","src":"12180:2:15"},"nativeSrc":"12180:20:15","nodeType":"YulFunctionCall","src":"12180:20:15"},"nativeSrc":"12177:40:15","nodeType":"YulIf","src":"12177:40:15"},{"nativeSrc":"12226:36:15","nodeType":"YulAssignment","src":"12226:36:15","value":{"arguments":[{"name":"offset","nativeSrc":"12243:6:15","nodeType":"YulIdentifier","src":"12243:6:15"},{"name":"startIndex","nativeSrc":"12251:10:15","nodeType":"YulIdentifier","src":"12251:10:15"}],"functionName":{"name":"add","nativeSrc":"12239:3:15","nodeType":"YulIdentifier","src":"12239:3:15"},"nativeSrc":"12239:23:15","nodeType":"YulFunctionCall","src":"12239:23:15"},"variableNames":[{"name":"offsetOut","nativeSrc":"12226:9:15","nodeType":"YulIdentifier","src":"12226:9:15"}]},{"nativeSrc":"12271:38:15","nodeType":"YulAssignment","src":"12271:38:15","value":{"arguments":[{"name":"endIndex","nativeSrc":"12288:8:15","nodeType":"YulIdentifier","src":"12288:8:15"},{"name":"startIndex","nativeSrc":"12298:10:15","nodeType":"YulIdentifier","src":"12298:10:15"}],"functionName":{"name":"sub","nativeSrc":"12284:3:15","nodeType":"YulIdentifier","src":"12284:3:15"},"nativeSrc":"12284:25:15","nodeType":"YulFunctionCall","src":"12284:25:15"},"variableNames":[{"name":"lengthOut","nativeSrc":"12271:9:15","nodeType":"YulIdentifier","src":"12271:9:15"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"11984:331:15","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"12048:6:15","nodeType":"YulTypedName","src":"12048:6:15","type":""},{"name":"length","nativeSrc":"12056:6:15","nodeType":"YulTypedName","src":"12056:6:15","type":""},{"name":"startIndex","nativeSrc":"12064:10:15","nodeType":"YulTypedName","src":"12064:10:15","type":""},{"name":"endIndex","nativeSrc":"12076:8:15","nodeType":"YulTypedName","src":"12076:8:15","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"12089:9:15","nodeType":"YulTypedName","src":"12089:9:15","type":""},{"name":"lengthOut","nativeSrc":"12100:9:15","nodeType":"YulTypedName","src":"12100:9:15","type":""}],"src":"11984:331:15"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_contract$_IERC1155Burnable_$432__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$342__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_uint256t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_array_uint256_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_uint256_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_2 := calldataload(add(headStart, 128))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        let offset := calldataload(add(headStart, 128))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr__to_t_address_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), 96)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value1, value2, add(headStart, 96))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value3, value4, tail_1)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_array$_t_bytes32_$dyn_memory_ptrt_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        let _4 := 0x20\n        if gt(_3, _1) { panic_error_0x41() }\n        let _5 := shl(5, _3)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(_5, 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _3)\n        dst := add(memPtr, _4)\n        let srcEnd := add(add(_2, _5), _4)\n        if gt(srcEnd, dataEnd) { revert(0, 0) }\n        let src := add(_2, _4)\n        for { } lt(src, srcEnd) { src := add(src, _4) }\n        {\n            mstore(dst, calldataload(src))\n            dst := add(dst, _4)\n        }\n        value0 := memPtr\n        value1 := calldataload(add(headStart, _4))\n    }\n    function abi_encode_tuple_packed_t_address_t_uint256__to_t_address_t_uint256__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, and(shl(96, value0), 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000))\n        mstore(add(pos, 20), value1)\n        end := add(pos, 52)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256_t_uint256_t_uint256__to_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, 160)\n        let tail_1 := abi_encode_array_uint256_dyn_calldata(value0, value1, add(headStart, 160))\n        mstore(add(headStart, 32), sub(tail_1, headStart))\n        tail := abi_encode_array_uint256_dyn_calldata(value2, value3, tail_1)\n        mstore(add(headStart, 64), value4)\n        mstore(add(headStart, 96), value5)\n        mstore(add(headStart, 128), value6)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n}","id":15,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"206":[{"length":32,"start":654},{"length":32,"start":873},{"length":32,"start":4635},{"length":32,"start":4697},{"length":32,"start":5076},{"length":32,"start":5212}],"1033":[{"length":32,"start":581},{"length":32,"start":1326},{"length":32,"start":2227}],"1037":[{"length":32,"start":1055},{"length":32,"start":3241}],"1040":[{"length":32,"start":733},{"length":32,"start":1248}],"1043":[{"length":32,"start":1094},{"length":32,"start":1212}],"1046":[{"length":32,"start":502},{"length":32,"start":1434},{"length":32,"start":3485}],"1049":[{"length":32,"start":815},{"length":32,"start":2573},{"length":32,"start":3996}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101ae5760003560e01c806351e75e8b116100ee578063bc197c8111610097578063cd421fbf11610071578063cd421fbf14610441578063d1a91ff214610468578063f23a6e6114610470578063f95d10161461048357600080fd5b8063bc197c81146103ce578063c131754e14610412578063cd18a34f1461041a57600080fd5b8063aa918fd5116100c8578063aa918fd5146102d0578063ab504e73146103a6578063bab2f552146103c657600080fd5b806351e75e8b1461032a57806355f5b0a814610351578063572b6c051461035957600080fd5b806328a979cf1161015b5780633838a201116101355780633838a201146102c8578063424ab4f7146102d0578063491bde66146102d85780634dac1c2b146102ff57600080fd5b806328a979cf146102405780632b4c9f161461028c57806331e66e1e146102b257600080fd5b80630455645a1161018c5780630455645a1461021857806312828b7f146102205780631de0e40b146101db57600080fd5b806301ffc9a7146101b35780630277640e146101db578063043063bc146101f1575b600080fd5b6101c66101c136600461153b565b61048b565b60405190151581526020015b60405180910390f35b6101e3600181565b6040519081526020016101d2565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600581565b6101e361022e3660046115a6565b60026020526000908152604090205481565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d2565b7f0000000000000000000000000000000000000000000000000000000000000000610267565b6102ba6104a5565b6040516101d29291906115c1565b6101e3601981565b6101e3600381565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e361030d36600461160e565b600160209081526000928352604080842090915290825290205481565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b6101e3600281565b6101c66103673660046115a6565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6101e36103b436600461163a565b60006020819052908152604090205481565b6101e36104b8565b6103e16103dc3660046116e1565b610514565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101d2565b6101e3601081565b6102677f000000000000000000000000000000000000000000000000000000000000000081565b6101e37f000000000000000000000000000000000000000000000000000000000000000081565b610267610c85565b6103e161047e36600461179c565b610c8f565b6101e3600981565b600061049f826104996110b1565b906110df565b92915050565b3660006104b06111b9565b915091509091565b60007f00000000000000000000000000000000000000000000000000000000000000006105057f000000000000000000000000000000000000000000000000000000000000000042611843565b61050f9190611856565b905090565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461058c576040517f733068030000000000000000000000000000000000000000000000000000000081523360048201526024015b60405180910390fd5b60006105966104b8565b90507f00000000000000000000000000000000000000000000000000000000000000008111156105f5576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b6040517f8053493400000000000000000000000000000000000000000000000000000000815233906380534934906106399030908c908c908c908c906004016118dc565b600060405180830381600087803b15801561065357600080fd5b505af1158015610667573d6000803e3d6000fd5b505050506000805b88811015610945578787828181106106895761068961192b565b9050602002013560000361072357338a8a838181106106aa576106aa61192b565b905060200201358989848181106106c3576106c361192b565b6040517fe1f366e900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9095166004860152602485019390935250602090910201356044820152606401610583565b8989828181106107355761073561192b565b905060200201356001036107795760018888838181106107575761075761192b565b90506020020135610768919061195a565b6107729083611971565b915061093d565b89898281811061078b5761078b61192b565b905060200201356002036107ad5760038888838181106107575761075761192b565b8989828181106107bf576107bf61192b565b905060200201356003036107e15760038888838181106107575761075761192b565b8989828181106107f3576107f361192b565b905060200201356004036108155760058888838181106107575761075761192b565b8989828181106108275761082761192b565b905060200201356005036108495760098888838181106107575761075761192b565b89898281811061085b5761085b61192b565b9050602002013560060361087d5760198888838181106107575761075761192b565b89898281811061088f5761088f61192b565b905060200201356007036108b15760108888838181106107575761075761192b565b7f00000000000000000000000000000000000000000000000000000000000000008a8a838181106108e4576108e461192b565b6040517f1912ea5100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90941660048501526020029190910135602483015250604401610583565b60010161066f565b5073ffffffffffffffffffffffffffffffffffffffff8a166000908152600260205260409020548a908515610b1757600080610983888a018a6119b3565b91509150608083901c600003610af7576040517fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602082015260348101829052600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610a32837f0000000000000000000000000000000000000000000000000000000000000000836111c4565b610a87576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8616600482015260248101839052604401610583565b73ffffffffffffffffffffffffffffffffffffffff8516600081815260026020908152604091829020608086901b881790819055825188815291820181905292917f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a29350505b612710610b04828761195a565b610b0e9190611856565b94505050610b3e565b608081901c8015610b3c57612710610b2f828661195a565b610b399190611856565b93505b505b6fffffffffffffffffffffffffffffffff81168015610b6457610b61818561195a565b93505b600085815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152812054610b9f908690611971565b600087815260016020908152604080832073ffffffffffffffffffffffffffffffffffffffff89168452825280832084905589835290829052812080549293508792909190610bef908490611971565b92505081905550858473ffffffffffffffffffffffffffffffffffffffff167f6e46cd5a8f4134e080f5038ee4632b01a585b6052863e4a1f0d5c57b1a35645b8f8f8f8f8b888b604051610c499796959493929190611a95565b60405180910390a3507fbc197c81000000000000000000000000000000000000000000000000000000009e9d5050505050505050505050505050565b600061050f6111da565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610d02576040517f73306803000000000000000000000000000000000000000000000000000000008152336004820152602401610583565b60018514610d45576040517f1912ea5100000000000000000000000000000000000000000000000000000000815233600482015260248101869052604401610583565b83600114610d8f576040517fe1f366e90000000000000000000000000000000000000000000000000000000081523360048201526024810186905260448101859052606401610583565b6000610d996104b8565b90507f0000000000000000000000000000000000000000000000000000000000000000811115610df8576040517f764e560f00000000000000000000000000000000000000000000000000000000815260048101829052602401610583565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020546fffffffffffffffffffffffffffffffff811615610e80576040517f383b549300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89166004820152602401610583565b6040517f124d91e50000000000000000000000000000000000000000000000000000000081523060048201526024810188905260448101879052339063124d91e590606401600060405180830381600087803b158015610edf57600080fd5b505af1158015610ef3573d6000803e3d6000fd5b505050600282179050841561102057608082901c60000361102057600080610f1d878901896119b3565b6040517fffffffffffffffffffffffffffffffffffffffff00000000000000000000000060608f901b166020820152603481018290529193509150600090605401604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209050610fc1837f0000000000000000000000000000000000000000000000000000000000000000836111c4565b611016576040517fadbd651200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d16600482015260248101839052604401610583565b5060801b90911790505b73ffffffffffffffffffffffffffffffffffffffff891660008181526002602090815260409182902084905581518581529081018490527f528dfe447bc8e2a31cbcf22a36526a2fcc9ac2b2fc9a850ddaf575bb2aab3433910160405180910390a2507ff23a6e61000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008061049f60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611843565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161112f5750600061049f565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016111805750600161049f565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b3660006104b06111e4565b6000826111d1858461134e565b14949350505050565b600061050f611391565b366000333214806111f55750601836105b156112035750600091369150565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611338575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa158015611314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113389190611adc565b15611345576104b06114d8565b50600091369150565b600081815b84518110156113895761137f828683815181106113725761137261192b565b6020026020010151611509565b9150600101611353565b509392505050565b6000333214806113a15750601836105b156113ab57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806114c757506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa1580156114a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c79190611adc565b156114d157919050565b3391505090565b3660006104b07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481611afe565b6000818310611525576000828152602084905260409020611534565b60008381526020839052604090205b9392505050565b60006020828403121561154d57600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461153457600080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146115a157600080fd5b919050565b6000602082840312156115b857600080fd5b6115348261157d565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b6000806040838503121561162157600080fd5b823591506116316020840161157d565b90509250929050565b60006020828403121561164c57600080fd5b5035919050565b60008083601f84011261166557600080fd5b50813567ffffffffffffffff81111561167d57600080fd5b6020830191508360208260051b850101111561169857600080fd5b9250929050565b60008083601f8401126116b157600080fd5b50813567ffffffffffffffff8111156116c957600080fd5b60208301915083602082850101111561169857600080fd5b60008060008060008060008060a0898b0312156116fd57600080fd5b6117068961157d565b975061171460208a0161157d565b9650604089013567ffffffffffffffff8082111561173157600080fd5b61173d8c838d01611653565b909850965060608b013591508082111561175657600080fd5b6117628c838d01611653565b909650945060808b013591508082111561177b57600080fd5b506117888b828c0161169f565b999c989b5096995094979396929594505050565b60008060008060008060a087890312156117b557600080fd5b6117be8761157d565b95506117cc6020880161157d565b94506040870135935060608701359250608087013567ffffffffffffffff8111156117f657600080fd5b61180289828a0161169f565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561049f5761049f611814565b60008261188c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156118c357600080fd5b8260051b80836020870137939093016020019392505050565b73ffffffffffffffffffffffffffffffffffffffff8616815260606020820152600061190c606083018688611891565b828103604084015261191f818587611891565b98975050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b808202811582820484141761049f5761049f611814565b8082018082111561049f5761049f611814565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156119c657600080fd5b823567ffffffffffffffff808211156119de57600080fd5b818501915085601f8301126119f257600080fd5b8135602082821115611a0657611a06611984565b8160051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108682111715611a4957611a49611984565b604052928352818301935084810182019289841115611a6757600080fd5b948201945b83861015611a8557853585529482019493820193611a6c565b9997909101359750505050505050565b60a081526000611aa960a08301898b611891565b8281036020840152611abc81888a611891565b604084019690965250506060810192909252608090910152949350505050565b600060208284031215611aee57600080fd5b8151801515811461153457600080fd5b60008085851115611b0e57600080fd5b83861115611b1b57600080fd5b505082019391909203915056fea2646970667358221220a934c528d9fa2bab018b81bccfb95d05bac989c22a6f153a141565317740d44064736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1AE JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x51E75E8B GT PUSH2 0xEE JUMPI DUP1 PUSH4 0xBC197C81 GT PUSH2 0x97 JUMPI DUP1 PUSH4 0xCD421FBF GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xCD421FBF EQ PUSH2 0x441 JUMPI DUP1 PUSH4 0xD1A91FF2 EQ PUSH2 0x468 JUMPI DUP1 PUSH4 0xF23A6E61 EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xF95D1016 EQ PUSH2 0x483 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xBC197C81 EQ PUSH2 0x3CE JUMPI DUP1 PUSH4 0xC131754E EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xCD18A34F EQ PUSH2 0x41A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAA918FD5 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0xAA918FD5 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0xAB504E73 EQ PUSH2 0x3A6 JUMPI DUP1 PUSH4 0xBAB2F552 EQ PUSH2 0x3C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x51E75E8B EQ PUSH2 0x32A JUMPI DUP1 PUSH4 0x55F5B0A8 EQ PUSH2 0x351 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x359 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF GT PUSH2 0x15B JUMPI DUP1 PUSH4 0x3838A201 GT PUSH2 0x135 JUMPI DUP1 PUSH4 0x3838A201 EQ PUSH2 0x2C8 JUMPI DUP1 PUSH4 0x424AB4F7 EQ PUSH2 0x2D0 JUMPI DUP1 PUSH4 0x491BDE66 EQ PUSH2 0x2D8 JUMPI DUP1 PUSH4 0x4DAC1C2B EQ PUSH2 0x2FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x28A979CF EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x455645A GT PUSH2 0x18C JUMPI DUP1 PUSH4 0x455645A EQ PUSH2 0x218 JUMPI DUP1 PUSH4 0x12828B7F EQ PUSH2 0x220 JUMPI DUP1 PUSH4 0x1DE0E40B EQ PUSH2 0x1DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1B3 JUMPI DUP1 PUSH4 0x277640E EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x43063BC EQ PUSH2 0x1F1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C6 PUSH2 0x1C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x153B JUMP JUMPDEST PUSH2 0x48B JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1E3 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x5 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x22E CALLDATASIZE PUSH1 0x4 PUSH2 0x15A6 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH32 0x0 PUSH2 0x267 JUMP JUMPDEST PUSH2 0x2BA PUSH2 0x4A5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1D2 SWAP3 SWAP2 SWAP1 PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x19 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x30D CALLDATASIZE PUSH1 0x4 PUSH2 0x160E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x1C6 PUSH2 0x367 CALLDATASIZE PUSH1 0x4 PUSH2 0x15A6 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x3B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x163A JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH2 0x4B8 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x3DC CALLDATASIZE PUSH1 0x4 PUSH2 0x16E1 JUMP JUMPDEST PUSH2 0x514 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1D2 JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x10 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E3 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x267 PUSH2 0xC85 JUMP JUMPDEST PUSH2 0x3E1 PUSH2 0x47E CALLDATASIZE PUSH1 0x4 PUSH2 0x179C JUMP JUMPDEST PUSH2 0xC8F JUMP JUMPDEST PUSH2 0x1E3 PUSH1 0x9 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x49F DUP3 PUSH2 0x499 PUSH2 0x10B1 JUMP JUMPDEST SWAP1 PUSH2 0x10DF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11B9 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 PUSH2 0x505 PUSH32 0x0 TIMESTAMP PUSH2 0x1843 JUMP JUMPDEST PUSH2 0x50F SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x58C JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x596 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0x5F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8053493400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER SWAP1 PUSH4 0x80534934 SWAP1 PUSH2 0x639 SWAP1 ADDRESS SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 DUP13 SWAP1 PUSH1 0x4 ADD PUSH2 0x18DC JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x667 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x0 DUP1 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x945 JUMPI DUP8 DUP8 DUP3 DUP2 DUP2 LT PUSH2 0x689 JUMPI PUSH2 0x689 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x0 SUB PUSH2 0x723 JUMPI CALLER DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x6AA JUMPI PUSH2 0x6AA PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0x6C3 JUMPI PUSH2 0x6C3 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP6 AND PUSH1 0x4 DUP7 ADD MSTORE PUSH1 0x24 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x735 JUMPI PUSH2 0x735 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x1 SUB PUSH2 0x779 JUMPI PUSH1 0x1 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH2 0x768 SWAP2 SWAP1 PUSH2 0x195A JUMP JUMPDEST PUSH2 0x772 SWAP1 DUP4 PUSH2 0x1971 JUMP JUMPDEST SWAP2 POP PUSH2 0x93D JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x78B JUMPI PUSH2 0x78B PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x2 SUB PUSH2 0x7AD JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7BF JUMPI PUSH2 0x7BF PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x3 SUB PUSH2 0x7E1 JUMPI PUSH1 0x3 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x7F3 JUMPI PUSH2 0x7F3 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x4 SUB PUSH2 0x815 JUMPI PUSH1 0x5 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x827 JUMPI PUSH2 0x827 PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x5 SUB PUSH2 0x849 JUMPI PUSH1 0x9 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x85B JUMPI PUSH2 0x85B PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x6 SUB PUSH2 0x87D JUMPI PUSH1 0x19 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x88F JUMPI PUSH2 0x88F PUSH2 0x192B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD PUSH1 0x7 SUB PUSH2 0x8B1 JUMPI PUSH1 0x10 DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x757 JUMPI PUSH2 0x757 PUSH2 0x192B JUMP JUMPDEST PUSH32 0x0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x8E4 JUMPI PUSH2 0x8E4 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP5 AND PUSH1 0x4 DUP6 ADD MSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x24 DUP4 ADD MSTORE POP PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x66F JUMP JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP11 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP11 SWAP1 DUP6 ISZERO PUSH2 0xB17 JUMPI PUSH1 0x0 DUP1 PUSH2 0x983 DUP9 DUP11 ADD DUP11 PUSH2 0x19B3 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 0x80 DUP4 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0xAF7 JUMPI PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP7 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xA32 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0xA87 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x80 DUP7 SWAP1 SHL DUP9 OR SWAP1 DUP2 SWAP1 SSTORE DUP3 MLOAD DUP9 DUP2 MSTORE SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP2 PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 SWAP4 POP POP JUMPDEST PUSH2 0x2710 PUSH2 0xB04 DUP3 DUP8 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xB0E SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 0xB3E JUMP JUMPDEST PUSH1 0x80 DUP2 SWAP1 SHR DUP1 ISZERO PUSH2 0xB3C JUMPI PUSH2 0x2710 PUSH2 0xB2F DUP3 DUP7 PUSH2 0x195A JUMP JUMPDEST PUSH2 0xB39 SWAP2 SWAP1 PUSH2 0x1856 JUMP JUMPDEST SWAP4 POP JUMPDEST POP JUMPDEST PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP1 ISZERO PUSH2 0xB64 JUMPI PUSH2 0xB61 DUP2 DUP6 PUSH2 0x195A JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xB9F SWAP1 DUP7 SWAP1 PUSH2 0x1971 JUMP JUMPDEST PUSH1 0x0 DUP8 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 KECCAK256 DUP5 SWAP1 SSTORE DUP10 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP8 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xBEF SWAP1 DUP5 SWAP1 PUSH2 0x1971 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x6E46CD5A8F4134E080F5038EE4632B01A585B6052863E4A1F0D5C57B1A35645B DUP16 DUP16 DUP16 DUP16 DUP12 DUP9 DUP12 PUSH1 0x40 MLOAD PUSH2 0xC49 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1A95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH32 0xBC197C8100000000000000000000000000000000000000000000000000000000 SWAP15 SWAP14 POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x11DA JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0xD02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7330680300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x1 DUP6 EQ PUSH2 0xD45 JUMPI PUSH1 0x40 MLOAD PUSH32 0x1912EA5100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST DUP4 PUSH1 0x1 EQ PUSH2 0xD8F JUMPI PUSH1 0x40 MLOAD PUSH32 0xE1F366E900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD99 PUSH2 0x4B8 JUMP JUMPDEST SWAP1 POP PUSH32 0x0 DUP2 GT ISZERO PUSH2 0xDF8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x764E560F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xE80 JUMPI PUSH1 0x40 MLOAD PUSH32 0x383B549300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x583 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x124D91E500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP8 SWAP1 MSTORE CALLER SWAP1 PUSH4 0x124D91E5 SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xEDF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0xEF3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP PUSH1 0x2 DUP3 OR SWAP1 POP DUP5 ISZERO PUSH2 0x1020 JUMPI PUSH1 0x80 DUP3 SWAP1 SHR PUSH1 0x0 SUB PUSH2 0x1020 JUMPI PUSH1 0x0 DUP1 PUSH2 0xF1D DUP8 DUP10 ADD DUP10 PUSH2 0x19B3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 PUSH1 0x60 DUP16 SWAP1 SHL AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x34 DUP2 ADD DUP3 SWAP1 MSTORE SWAP2 SWAP4 POP SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x54 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 SWAP1 POP PUSH2 0xFC1 DUP4 PUSH32 0x0 DUP4 PUSH2 0x11C4 JUMP JUMPDEST PUSH2 0x1016 JUMPI PUSH1 0x40 MLOAD PUSH32 0xADBD651200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP14 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x583 JUMP JUMPDEST POP PUSH1 0x80 SHL SWAP1 SWAP2 OR SWAP1 POP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP10 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 0x528DFE447BC8E2A31CBCF22A36526A2FCC9AC2B2FC9A850DDAF575BB2AAB3433 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH32 0xF23A6E6100000000000000000000000000000000000000000000000000000000 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x49F PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1843 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x112F JUMPI POP PUSH1 0x0 PUSH2 0x49F JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1180 JUMPI POP PUSH1 0x1 PUSH2 0x49F JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH2 0x11E4 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x11D1 DUP6 DUP5 PUSH2 0x134E JUMP JUMPDEST EQ SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x50F PUSH2 0x1391 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x11F5 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1203 JUMPI POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x1338 JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1314 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1338 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x1345 JUMPI PUSH2 0x4B0 PUSH2 0x14D8 JUMP JUMPDEST POP PUSH1 0x0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 0x1389 JUMPI PUSH2 0x137F DUP3 DUP7 DUP4 DUP2 MLOAD DUP2 LT PUSH2 0x1372 JUMPI PUSH2 0x1372 PUSH2 0x192B JUMP JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD MLOAD PUSH2 0x1509 JUMP JUMPDEST SWAP2 POP PUSH1 0x1 ADD PUSH2 0x1353 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x13A1 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x13AB JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x14C7 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x14A3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14C7 SWAP2 SWAP1 PUSH2 0x1ADC JUMP JUMPDEST ISZERO PUSH2 0x14D1 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 PUSH2 0x4B0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x1AFE JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1525 JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 PUSH2 0x1534 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x154D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x1534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x15A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x15B8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1534 DUP3 PUSH2 0x157D JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1621 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1631 PUSH1 0x20 DUP5 ADD PUSH2 0x157D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x164C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1665 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x167D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x16B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x16C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1698 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x16FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1706 DUP10 PUSH2 0x157D JUMP JUMPDEST SWAP8 POP PUSH2 0x1714 PUSH1 0x20 DUP11 ADD PUSH2 0x157D JUMP JUMPDEST SWAP7 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1731 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x173D DUP13 DUP4 DUP14 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1762 DUP13 DUP4 DUP14 ADD PUSH2 0x1653 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x80 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x177B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1788 DUP12 DUP3 DUP13 ADD PUSH2 0x169F JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0xA0 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x17B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x17BE DUP8 PUSH2 0x157D JUMP JUMPDEST SWAP6 POP PUSH2 0x17CC PUSH1 0x20 DUP9 ADD PUSH2 0x157D JUMP JUMPDEST SWAP5 POP PUSH1 0x40 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP3 POP PUSH1 0x80 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x17F6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1802 DUP10 DUP3 DUP11 ADD PUSH2 0x169F JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x188C JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x18C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x190C PUSH1 0x60 DUP4 ADD DUP7 DUP9 PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x191F DUP2 DUP6 DUP8 PUSH2 0x1891 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x49F JUMPI PUSH2 0x49F PUSH2 0x1814 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x19C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x19DE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x19F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x20 DUP3 DUP3 GT ISZERO PUSH2 0x1A06 JUMPI PUSH2 0x1A06 PUSH2 0x1984 JUMP JUMPDEST DUP2 PUSH1 0x5 SHL PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP7 DUP3 GT OR ISZERO PUSH2 0x1A49 JUMPI PUSH2 0x1A49 PUSH2 0x1984 JUMP JUMPDEST PUSH1 0x40 MSTORE SWAP3 DUP4 MSTORE DUP2 DUP4 ADD SWAP4 POP DUP5 DUP2 ADD DUP3 ADD SWAP3 DUP10 DUP5 GT ISZERO PUSH2 0x1A67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0x1A85 JUMPI DUP6 CALLDATALOAD DUP6 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP4 DUP3 ADD SWAP4 PUSH2 0x1A6C JUMP JUMPDEST SWAP10 SWAP8 SWAP1 SWAP2 ADD CALLDATALOAD SWAP8 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xA0 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1AA9 PUSH1 0xA0 DUP4 ADD DUP10 DUP12 PUSH2 0x1891 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1ABC DUP2 DUP9 DUP11 PUSH2 0x1891 JUMP JUMPDEST PUSH1 0x40 DUP5 ADD SWAP7 SWAP1 SWAP7 MSTORE POP POP PUSH1 0x60 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1534 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x1B0E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x1B1B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALLVALUE 0xC5 0x28 0xD9 STATICCALL 0x2B 0xAB ADD DUP12 DUP2 0xBC 0xCF 0xB9 0x5D SDIV 0xBA 0xC9 DUP10 0xC2 0x2A PUSH16 0x153A141565317740D44064736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"349:717:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:0;;;;;;:::i;:::-;;:::i;:::-;;;516:14:15;;509:22;491:41;;479:2;464:18;542:165:0;;;;;;;;1291:47:13;;1337:1;1291:47;;;;;689:25:15;;;677:2;662:18;1291:47:13;543:177:15;2243:34:13;;;;;1450:47;;1496:1;1450:47;;2811:49;;;;;;:::i;:::-;;;;;;;;;;;;;;1839:46;;;;;;;;1317:42:15;1305:55;;;1287:74;;1275:2;1260:18;1839:46:13;1117:250:15;728:115:4;817:19;728:115;;970:94:14;;;:::i;:::-;;;;;;;;:::i;1556:48:13:-;;1602:2;1556:48;;1344:47;;1390:1;1344:47;;2074:37;;;;;2594:70;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;2350:36;;;;;1713:42;;1754:1;1713:42;;878:149:4;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;2458:51:13;;;;;;:::i;:::-;;;;;;;;;;;;;;;6123:127;;;:::i;9100:3453::-;;;;;;:::i;:::-;;:::i;:::-;;;4820:66:15;4808:79;;;4790:98;;4778:2;4763:18;9100:3453:13;4646:248:15;1610:48:13;;1656:2;1610:48;;1972:45;;;;;2162:39;;;;;763:91:14;;;:::i;6936:1630:13:-;;;;;;:::i;:::-;;:::i;1503:47::-;;1549:1;1503:47;;542:165:0;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:0:o;970:94:14:-;1014:14;;1047:10;:8;:10::i;:::-;1040:17;;;;970:94;;:::o;6123:127:13:-;6168:7;6229:14;6195:30;6213:12;6195:15;:30;:::i;:::-;6194:49;;;;:::i;:::-;6187:56;;6123:127;:::o;9100:3453::-;9300:6;9322:10;:35;9344:12;9322:35;;9318:104;;9380:31;;;;;9400:10;9380:31;;;1287:74:15;1260:18;;9380:31:13;;;;;;;;9318:104;9432:13;9448:14;:12;:14::i;:::-;9432:30;;9484:9;9476:5;:17;9472:74;;;9516:19;;;;;;;;689:25:15;;;662:18;;9516:19:13;543:177:15;9472:74:13;9556:70;;;;;9573:10;;9556:42;;:70;;9607:4;;9614:3;;;;9619:6;;;;9556:70;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9637:20;9676:9;9671:1007;9691:14;;;9671:1007;;;9730:6;;9737:1;9730:9;;;;;;;:::i;:::-;;;;;;;9743:1;9730:14;9726:108;;9789:10;9801:3;;9805:1;9801:6;;;;;;;:::i;:::-;;;;;;;9809;;9816:1;9809:9;;;;;;;:::i;:::-;9771:48;;;;;7859:42:15;7847:55;;;9771:48:13;;;7829:74:15;7919:18;;;7912:34;;;;-1:-1:-1;9809:9:13;;;;;;7962:18:15;;;7955:34;7802:18;;9771:48:13;7627:368:15;9726:108:13;9852:3;;9856:1;9852:6;;;;;;;:::i;:::-;;;;;;;9862:1;9852:11;9848:820;;1337:1;9900:6;;9907:1;9900:9;;;;;;;:::i;:::-;;;;;;;:31;;;;:::i;:::-;9883:49;;;;:::i;:::-;;;9848:820;;;9957:3;;9961:1;9957:6;;;;;;;:::i;:::-;;;;;;;9967:1;9957:11;9953:715;;1390:1;10005:6;;10012:1;10005:9;;;;;;;:::i;9953:715::-;10062:3;;10066:1;10062:6;;;;;;;:::i;:::-;;;;;;;10072:1;10062:11;10058:610;;1443:1;10110:6;;10117:1;10110:9;;;;;;;:::i;10058:610::-;10167:3;;10171:1;10167:6;;;;;;;:::i;:::-;;;;;;;10177:1;10167:11;10163:505;;1496:1;10215:6;;10222:1;10215:9;;;;;;;:::i;10163:505::-;10272:3;;10276:1;10272:6;;;;;;;:::i;:::-;;;;;;;10282:1;10272:11;10268:400;;1549:1;10320:6;;10327:1;10320:9;;;;;;;:::i;10268:400::-;10377:3;;10381:1;10377:6;;;;;;;:::i;:::-;;;;;;;10387:1;10377:11;10373:295;;1602:2;10425:6;;10432:1;10425:9;;;;;;;:::i;10373:295::-;10482:3;;10486:1;10482:6;;;;;;;:::i;:::-;;;;;;;10492:1;10482:11;10478:190;;1656:2;10530:6;;10537:1;10530:9;;;;;;;:::i;10478:190::-;10631:12;10646:3;;10650:1;10646:6;;;;;;;:::i;:::-;10608:45;;;;;8507:42:15;8495:55;;;10608:45:13;;;8477:74:15;10646:6:13;;;;;;;8567:18:15;;;8560:34;-1:-1:-1;8450:18:15;;10608:45:13;8303:297:15;10478:190:13;9707:3;;9671:1007;;;-1:-1:-1;10808:24:13;;;10688:16;10808:24;;;:14;:24;;;;;;10707:4;;10847:15;;10843:1122;;10879:22;;10944:38;;;;10955:4;10944:38;:::i;:::-;10878:104;;;;11021:3;11001:16;:23;;11029:1;11000:30;10996:613;;11075:57;;10233:66:15;10220:2;10216:15;;;10212:88;11075:57:13;;;10200:101:15;10317:12;;;10310:28;;;11050:12:13;;10354::15;;11075:57:13;;;;;;;;;;;;;11065:68;;11075:57;11065:68;;;;;-1:-1:-1;11156:31:13;:5;11169:11;11065:68;11156:12;:31::i;:::-;11151:139;;11218:53;;;;;8507:42:15;8495:55;;11218:53:13;;;8477:74:15;8567:18;;;8560:34;;;8450:18;;11218:53:13;8303:297:15;11151:139:13;11410:24;;;11308;11410;;;:14;:24;;;;;;;;;11369:3;11336:36;;;11335:57;;11410:43;;;;11476:65;;10551:25:15;;;10592:18;;;10585:34;;;11335:57:13;11410:24;11476:65;;10524:18:15;11476:65:13;;;;;;;11578:16;-1:-1:-1;;10996:613:13;1098:6;11639:44;11654:29;11639:12;:44;:::i;:::-;11638:61;;;;:::i;:::-;11623:76;;10864:846;;10843:1122;;;11790:3;11770:23;;;11811:33;;11807:148;;1098:6;11880:44;11895:29;11880:12;:44;:::i;:::-;11879:61;;;;:::i;:::-;11864:76;;11807:148;11716:249;10843:1122;11975:49;;;12038:17;;12034:77;;12071:29;12087:13;12071:29;;:::i;:::-;;;12034:77;12155:28;12186:22;;;:15;:22;;;;;;;;:32;;;;;;;;;;;:47;;12221:12;;12186:47;:::i;:::-;12243:22;;;;:15;:22;;;;;;;;:32;;;;;;;;;;:55;;;12342:23;;;;;;;;;:39;;12155:78;;-1:-1:-1;12369:12:13;;12342:23;;12243:22;12342:39;;12369:12;;12342:39;:::i;:::-;;;;;;;;12419:5;12409:8;12397:95;;;12426:3;;12431:6;;12439:12;12453:20;12475:16;12397:95;;;;;;;;;;;;:::i;:::-;;;;;;;;-1:-1:-1;12510:36:13;;9100:3453;-1:-1:-1;;;;;;;;;;;;;;9100:3453:13:o;763:91:14:-;809:7;835:12;:10;:12::i;6936:1630:13:-;7061:6;7083:10;:34;7105:11;7083:34;;7079:103;;7140:31;;;;;7160:10;7140:31;;;1287:74:15;1260:18;;7140:31:13;1117:250:15;7079:103:13;1228:1;7195:2;:26;7191:94;;7244:30;;;;;7259:10;7244:30;;;8477:74:15;8567:18;;;8560:34;;;8450:18;;7244:30:13;8303:297:15;7191:94:13;7299:5;7308:1;7299:10;7295:88;;7332:40;;;;;7350:10;7332:40;;;7829:74:15;7919:18;;;7912:34;;;7962:18;;;7955:34;;;7802:18;;7332:40:13;7627:368:15;7295:88:13;7393:13;7409:14;:12;:14::i;:::-;7393:30;;7445:9;7437:5;:17;7433:74;;;7477:19;;;;;;;;689:25:15;;;662:18;;7477:19:13;543:177:15;7433:74:13;7544:20;;;7517:24;7544:20;;;:14;:20;;;;;;7578:29;;;;7574:96;;7630:29;;;;;1317:42:15;1305:55;;7630:29:13;;;1287:74:15;1260:18;;7630:29:13;1117:250:15;7574:96:13;7680:63;;;;;7726:4;7680:63;;;7829:74:15;7919:18;;;7912:34;;;7962:18;;;7955:34;;;7697:10:13;;7680:37;;7802:18:15;;7680:63:13;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;1754:1:13;7781:33;;;-1:-1:-1;7828:15:13;;7824:562;;7884:3;7864:16;:23;;7892:1;7863:30;7859:517;;7914:22;;7979:38;;;;7990:4;7979:38;:::i;:::-;8060:53;;10233:66:15;10220:2;10216:15;;;10212:88;8060:53:13;;;10200:101:15;10317:12;;;10310:28;;;7913:104:13;;-1:-1:-1;7913:104:13;-1:-1:-1;8035:12:13;;10354::15;;8060:53:13;;;;;;;;;;;;;8050:64;;8060:53;8050:64;;;;;-1:-1:-1;8137:31:13;:5;8150:11;8050:64;8137:12;:31::i;:::-;8132:135;;8199:49;;;;;8507:42:15;8495:55;;8199:49:13;;;8477:74:15;8567:18;;;8560:34;;;8450:18;;8199:49:13;8303:297:15;8132:135:13;-1:-1:-1;8338:3:13;8305:36;8304:57;;;;-1:-1:-1;7859:517:13;8395:20;;;;;;;:14;:20;;;;;;;;;:39;;;8449:61;;10551:25:15;;;10592:18;;;10585:34;;;8449:61:13;;10524:18:15;8449:61:13;;;;;;;-1:-1:-1;8528:31:13;;6936:1630;-1:-1:-1;;;;;;;;;6936:1630:13:o;1705:174:3:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:3;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:3;1620:11;;1560:82;-1:-1:-1;1658:34:3;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5854:169:13:-;5944:14;;5977:39;:37;:39::i;1156:184:12:-;1277:4;1329;1300:25;1313:5;1320:4;1300:12;:25::i;:::-;:33;;1156:184;-1:-1:-1;;;;1156:184:12:o;5633:166:13:-;5725:7;5751:41;:39;:41::i;1643:735:5:-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:5;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:5;;;;-1:-1:-1;1643:735:5:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:5;:19;:39;;466:14:8;462:23;;449:37;445:2;441:46;2207:80:5;;;;;;;;;;11554:42:15;11623:15;;;2207:80:5;;;11605:34:15;2276:10:5;11655:18:15;;;11648:43;11517:18;;2207:80:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:5;;;;-1:-1:-1;1643:735:5:o;1994:290:12:-;2077:7;2119:4;2077:7;2133:116;2157:5;:12;2153:1;:16;2133:116;;;2205:33;2215:12;2229:5;2235:1;2229:8;;;;;;;;:::i;:::-;;;;;;;2205:9;:33::i;:::-;2190:48;-1:-1:-1;2171:3:12;;2133:116;;;-1:-1:-1;2265:12:12;1994:290;-1:-1:-1;;;1994:290:12:o;784:745:5:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:5;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:5;;784:745::o;1043:95::-;462:23:8;466:14;462:23;449:37;445:2;441:46;1372:19:5;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:5;;;;;:39;11623:15:15;;;1396:59:5;;;11605:34:15;1444:10:5;11655:18:15;;;11648:43;1396:19:5;:39;;;;11517:18:15;;1396:59:5;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:5:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;616:152:8:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;8879:147:12:-;8942:7;8972:1;8968;:5;:51;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8968:51;;;9100:13;9191:15;;;9226:4;9219:15;;;9272:4;9256:21;;8976:20;8961:58;8879:147;-1:-1:-1;;;8879:147:12:o;14:332:15:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:196;793:20;;853:42;842:54;;832:65;;822:93;;911:1;908;901:12;822:93;725:196;;;:::o;926:186::-;985:6;1038:2;1026:9;1017:7;1013:23;1009:32;1006:52;;;1054:1;1051;1044:12;1006:52;1077:29;1096:9;1077:29;:::i;1629:447::-;1786:2;1775:9;1768:21;1825:6;1820:2;1809:9;1805:18;1798:34;1882:6;1874;1869:2;1858:9;1854:18;1841:48;1938:1;1909:22;;;1933:2;1905:31;;;1898:42;;;;1992:2;1980:15;;;1997:66;1976:88;1961:104;1957:113;;1629:447;-1:-1:-1;1629:447:15:o;2081:254::-;2149:6;2157;2210:2;2198:9;2189:7;2185:23;2181:32;2178:52;;;2226:1;2223;2216:12;2178:52;2262:9;2249:23;2239:33;;2291:38;2325:2;2314:9;2310:18;2291:38;:::i;:::-;2281:48;;2081:254;;;;;:::o;2522:180::-;2581:6;2634:2;2622:9;2613:7;2609:23;2605:32;2602:52;;;2650:1;2647;2640:12;2602:52;-1:-1:-1;2673:23:15;;2522:180;-1:-1:-1;2522:180:15:o;2707:367::-;2770:8;2780:6;2834:3;2827:4;2819:6;2815:17;2811:27;2801:55;;2852:1;2849;2842:12;2801:55;-1:-1:-1;2875:20:15;;2918:18;2907:30;;2904:50;;;2950:1;2947;2940:12;2904:50;2987:4;2979:6;2975:17;2963:29;;3047:3;3040:4;3030:6;3027:1;3023:14;3015:6;3011:27;3007:38;3004:47;3001:67;;;3064:1;3061;3054:12;3001:67;2707:367;;;;;:::o;3079:347::-;3130:8;3140:6;3194:3;3187:4;3179:6;3175:17;3171:27;3161:55;;3212:1;3209;3202:12;3161:55;-1:-1:-1;3235:20:15;;3278:18;3267:30;;3264:50;;;3310:1;3307;3300:12;3264:50;3347:4;3339:6;3335:17;3323:29;;3399:3;3392:4;3383:6;3375;3371:19;3367:30;3364:39;3361:59;;;3416:1;3413;3406:12;3431:1210;3591:6;3599;3607;3615;3623;3631;3639;3647;3700:3;3688:9;3679:7;3675:23;3671:33;3668:53;;;3717:1;3714;3707:12;3668:53;3740:29;3759:9;3740:29;:::i;:::-;3730:39;;3788:38;3822:2;3811:9;3807:18;3788:38;:::i;:::-;3778:48;;3877:2;3866:9;3862:18;3849:32;3900:18;3941:2;3933:6;3930:14;3927:34;;;3957:1;3954;3947:12;3927:34;3996:70;4058:7;4049:6;4038:9;4034:22;3996:70;:::i;:::-;4085:8;;-1:-1:-1;3970:96:15;-1:-1:-1;4173:2:15;4158:18;;4145:32;;-1:-1:-1;4189:16:15;;;4186:36;;;4218:1;4215;4208:12;4186:36;4257:72;4321:7;4310:8;4299:9;4295:24;4257:72;:::i;:::-;4348:8;;-1:-1:-1;4231:98:15;-1:-1:-1;4436:3:15;4421:19;;4408:33;;-1:-1:-1;4453:16:15;;;4450:36;;;4482:1;4479;4472:12;4450:36;;4521:60;4573:7;4562:8;4551:9;4547:24;4521:60;:::i;:::-;3431:1210;;;;-1:-1:-1;3431:1210:15;;-1:-1:-1;3431:1210:15;;;;;;4600:8;-1:-1:-1;;;3431:1210:15:o;5130:695::-;5236:6;5244;5252;5260;5268;5276;5329:3;5317:9;5308:7;5304:23;5300:33;5297:53;;;5346:1;5343;5336:12;5297:53;5369:29;5388:9;5369:29;:::i;:::-;5359:39;;5417:38;5451:2;5440:9;5436:18;5417:38;:::i;:::-;5407:48;;5502:2;5491:9;5487:18;5474:32;5464:42;;5553:2;5542:9;5538:18;5525:32;5515:42;;5608:3;5597:9;5593:19;5580:33;5636:18;5628:6;5625:30;5622:50;;;5668:1;5665;5658:12;5622:50;5707:58;5757:7;5748:6;5737:9;5733:22;5707:58;:::i;:::-;5130:695;;;;-1:-1:-1;5130:695:15;;-1:-1:-1;5130:695:15;;5784:8;;5130:695;-1:-1:-1;;;5130:695:15:o;5830:184::-;5882:77;5879:1;5872:88;5979:4;5976:1;5969:15;6003:4;6000:1;5993:15;6019:128;6086:9;;;6107:11;;;6104:37;;;6121:18;;:::i;6152:274::-;6192:1;6218;6208:189;;6253:77;6250:1;6243:88;6354:4;6351:1;6344:15;6382:4;6379:1;6372:15;6208:189;-1:-1:-1;6411:9:15;;6152:274::o;6431:358::-;6531:6;6526:3;6519:19;6501:3;6561:66;6553:6;6550:78;6547:98;;;6641:1;6638;6631:12;6547:98;6677:6;6674:1;6670:14;6729:8;6722:5;6715:4;6710:3;6706:14;6693:45;6758:18;;;;6778:4;6754:29;;6431:358;-1:-1:-1;;;6431:358:15:o;6794:639::-;7111:42;7103:6;7099:55;7088:9;7081:74;7191:2;7186;7175:9;7171:18;7164:30;7062:4;7217:73;7286:2;7275:9;7271:18;7263:6;7255;7217:73;:::i;:::-;7338:9;7330:6;7326:22;7321:2;7310:9;7306:18;7299:50;7366:61;7420:6;7412;7404;7366:61;:::i;:::-;7358:69;6794:639;-1:-1:-1;;;;;;;;6794:639:15:o;7438:184::-;7490:77;7487:1;7480:88;7587:4;7584:1;7577:15;7611:4;7608:1;7601:15;8000:168;8073:9;;;8104;;8121:15;;;8115:22;;8101:37;8091:71;;8142:18;;:::i;8173:125::-;8238:9;;;8259:10;;;8256:36;;;8272:18;;:::i;8605:184::-;8657:77;8654:1;8647:88;8754:4;8751:1;8744:15;8778:4;8775:1;8768:15;8794:1244;8887:6;8895;8948:2;8936:9;8927:7;8923:23;8919:32;8916:52;;;8964:1;8961;8954:12;8916:52;9004:9;8991:23;9033:18;9074:2;9066:6;9063:14;9060:34;;;9090:1;9087;9080:12;9060:34;9128:6;9117:9;9113:22;9103:32;;9173:7;9166:4;9162:2;9158:13;9154:27;9144:55;;9195:1;9192;9185:12;9144:55;9231:2;9218:16;9253:4;9276:2;9272;9269:10;9266:36;;;9282:18;;:::i;:::-;9328:2;9325:1;9321:10;9360:2;9354:9;9419:66;9414:2;9410;9406:11;9402:84;9394:6;9390:97;9537:6;9525:10;9522:22;9517:2;9505:10;9502:18;9499:46;9496:72;;;9548:18;;:::i;:::-;9584:2;9577:22;9634:18;;;9668:15;;;;-1:-1:-1;9710:11:15;;;9706:20;;;9738:19;;;9735:39;;;9770:1;9767;9760:12;9735:39;9794:11;;;;9814:142;9830:6;9825:3;9822:15;9814:142;;;9896:17;;9884:30;;9847:12;;;;9934;;;;9814:142;;;9975:6;10013:18;;;;10000:32;;-1:-1:-1;;;;;;;8794:1244:15:o;10630:735::-;10991:3;10980:9;10973:22;10954:4;11018:74;11087:3;11076:9;11072:19;11064:6;11056;11018:74;:::i;:::-;11140:9;11132:6;11128:22;11123:2;11112:9;11108:18;11101:50;11168:61;11222:6;11214;11206;11168:61;:::i;:::-;11260:2;11245:18;;11238:34;;;;-1:-1:-1;;11303:2:15;11288:18;;11281:34;;;;11346:3;11331:19;;;11324:35;11160:69;10630:735;-1:-1:-1;;;;10630:735:15:o;11702:277::-;11769:6;11822:2;11810:9;11801:7;11797:23;11793:32;11790:52;;;11838:1;11835;11828:12;11790:52;11870:9;11864:16;11923:5;11916:13;11909:21;11902:5;11899:32;11889:60;;11945:1;11942;11935:12;11984:331;12089:9;12100;12142:8;12130:10;12127:24;12124:44;;;12164:1;12161;12154:12;12124:44;12193:6;12183:8;12180:20;12177:40;;;12213:1;12210;12203:12;12177:40;-1:-1:-1;;12239:23:15;;;12284:25;;;;;-1:-1:-1;11984:331:15:o"},"gasEstimates":{"creation":{"codeDepositCost":"1401200","executionCost":"infinite","totalCost":"infinite"},"external":{"BURN_WEIGHT_TOKEN_1()":"264","BURN_WEIGHT_TOKEN_2()":"262","BURN_WEIGHT_TOKEN_3()":"240","BURN_WEIGHT_TOKEN_4()":"241","BURN_WEIGHT_TOKEN_5()":"305","BURN_WEIGHT_TOKEN_6()":"240","BURN_WEIGHT_TOKEN_7()":"262","CYCLE_DURATION()":"infinite","INITIAL_TIME()":"infinite","MAX_CYCLE()":"infinite","MERKLE_ROOT()":"infinite","MISSING_ORB()":"infinite","MISSING_ORB_TOKEN_ID()":"285","ORB_OF_POWER()":"infinite","ROC_MULTIPLIER()":"263","__msgData()":"infinite","__msgSender()":"infinite","currentCycle()":"infinite","forwarderRegistry()":"infinite","isTrustedForwarder(address)":"infinite","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"infinite","onERC1155Received(address,address,uint256,uint256,bytes)":"infinite","orbMultipliers(address)":"2575","supportsInterface(bytes4)":"infinite","totalAshPerCycle(uint256)":"2508","userAshPerCycle(uint256,address)":"2716"}},"methodIdentifiers":{"BURN_WEIGHT_TOKEN_1()":"0277640e","BURN_WEIGHT_TOKEN_2()":"424ab4f7","BURN_WEIGHT_TOKEN_3()":"aa918fd5","BURN_WEIGHT_TOKEN_4()":"0455645a","BURN_WEIGHT_TOKEN_5()":"f95d1016","BURN_WEIGHT_TOKEN_6()":"3838a201","BURN_WEIGHT_TOKEN_7()":"c131754e","CYCLE_DURATION()":"cd421fbf","INITIAL_TIME()":"491bde66","MAX_CYCLE()":"043063bc","MERKLE_ROOT()":"51e75e8b","MISSING_ORB()":"cd18a34f","MISSING_ORB_TOKEN_ID()":"1de0e40b","ORB_OF_POWER()":"28a979cf","ROC_MULTIPLIER()":"55f5b0a8","__msgData()":"31e66e1e","__msgSender()":"d1a91ff2","currentCycle()":"bab2f552","forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05","onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":"bc197c81","onERC1155Received(address,address,uint256,uint256,bytes)":"f23a6e61","orbMultipliers(address)":"12828b7f","supportsInterface(bytes4)":"01ffc9a7","totalAshPerCycle(uint256)":"ab504e73","userAshPerCycle(uint256,address)":"4dac1c2b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"initialTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"orbOfPower\",\"type\":\"address\"},{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"missingOrb\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AlreadySetROCMultiplier\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"}],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"puzzleGameMultiplierNumerator\",\"type\":\"uint256\"}],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"InvalidTokenAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InvalidTokenValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroCycleDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroMaxCycle\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ash\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAsh\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orbMultiplier\",\"type\":\"uint256\"}],\"name\":\"GenerateAsh\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"curOrbMultiplier\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedOrbMultiplier\",\"type\":\"uint256\"}],\"name\":\"UpdateOrbMultiplier\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BURN_WEIGHT_TOKEN_7\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CYCLE_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INITIAL_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CYCLE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MERKLE_ROOT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MISSING_ORB_TOKEN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ORB_OF_POWER\",\"outputs\":[{\"internalType\":\"contract IERC1155Burnable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROC_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"orbMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userAshPerCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"__msgData()\":{\"returns\":{\"_0\":\"The current msg.data value.\"}},\"currentCycle()\":{\"returns\":{\"_0\":\"cycle The current cycle.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"ids\":\"The token IDs to burn.\",\"values\":\"The amount of tokens to burn.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"details\":\"Throws if the token is invalid.Throws if the cycle is invalid.Throws if the token ID is invalid.Throws if the token amount is invalid.Throws if the token multiplier has already been set.\",\"params\":{\"data\":\"The merkle proof data and multiplier value for setting the token multiplier.\",\"from\":\"The wallet address.\",\"id\":\"The token ID.\",\"value\":\"The token value.\"},\"returns\":{\"_0\":\"The ERC1155Received selector.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"AlreadySetROCMultiplier(address)\":[{\"notice\":\"Error thrown when the wallet already has the ROC multiplier been set.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidCycle(uint256)\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}],\"InvalidProof(address,uint256)\":[{\"notice\":\"Error thrown when the proof is invalid.\"}],\"InvalidTokenAddress(address)\":[{\"notice\":\"Error thrown when the token is not approved.\"}],\"InvalidTokenId(address,uint256)\":[{\"notice\":\"Error thrown when the token ID is invalid.\"}],\"InvalidTokenValue(address,uint256,uint256)\":[{\"notice\":\"Error thrown when the token amount is invalid.\"}],\"ZeroCycleDuration()\":[{\"notice\":\"Error thrown when the cycle duration is invalid.\"}],\"ZeroMaxCycle()\":[{\"notice\":\"Error thrown when the cycle is invalid.\"}]},\"events\":{\"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)\":{\"notice\":\"Event emitted when ASH are generated.\"},\"UpdateOrbMultiplier(address,uint256,uint256)\":{\"notice\":\"Event emitted when the multiplier info is updated.\"}},\"kind\":\"user\",\"methods\":{\"BURN_WEIGHT_TOKEN_1()\":{\"notice\":\"The token weights for calculating Ash.\"},\"CYCLE_DURATION()\":{\"notice\":\"The duration of each cycle.\"},\"INITIAL_TIME()\":{\"notice\":\"The initial time of the contract.\"},\"MAX_CYCLE()\":{\"notice\":\"The maximum cycle.\"},\"MERKLE_ROOT()\":{\"notice\":\"The Merkle root for setting the puzzleMultiplier.\"},\"MISSING_ORB()\":{\"notice\":\"The IERC1155 erc1155 contract for setting the token multiplier.\"},\"MISSING_ORB_TOKEN_ID()\":{\"notice\":\"The token ID of RoC for setting the token multiplier.\"},\"ORB_OF_POWER()\":{\"notice\":\"The IERC1155Burnable erc1155 contracts burn to generate ASH.\"},\"ROC_MULTIPLIER()\":{\"notice\":\"The Riddle Of Chaos multiplier.\"},\"__msgData()\":{\"notice\":\"Internal function to access the current msg.data.\"},\"currentCycle()\":{\"notice\":\"Get the current cycle.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Burn the tokens and calculate the ash.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field.\"},\"orbMultipliers(address)\":{\"notice\":\"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalAshPerCycle(uint256)\":{\"notice\":\"The total amount of ASH generated in each cycle.\"},\"userAshPerCycle(uint256,address)\":{\"notice\":\"The total amount of ASH generated by each user in each cycle.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/burn/OrbsBurnPoolMock.sol\":\"OrbsBurnPoolMock\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x21ad59ed5a9dca82b5b1190ed399a7f664d627e3198538baedbf93f03ee49955\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xd1a9b00da77ab88a6ea90889542c829d5dbc5a13fee7900068ab5b766f1789ab\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0x20e0abf1d7cc35c6f8214d59f3cb5887d3b6259ead2f22ce4cb6620fe486fc60\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xf71e0611f0d2b755a136ef9b4f7f8308f06d8821a5230c004fe85ae1ef377c83\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x349f3bc2e75c8588e8889b20e5356e9815ea8318956dd1bc85d207450ff82c69\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC1155TokenReceiver} from \\\"./interfaces/IERC1155TokenReceiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"./../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC1155 Multi Token Standard, Token Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC1155TokenReceiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC1155TokenReceiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xadee62ab2c6784f8087a7c8c4ee80119e9a5444036cf366457db09f66dc26e74\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x921ed8d1.\\ninterface IERC1155Burnable {\\n    /// @notice Burns some token.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance of `id`.\\n    /// @dev Emits an {IERC1155-TransferSingle} event.\\n    /// @param from Address of the current token owner.\\n    /// @param id Identifier of the token to burn.\\n    /// @param value Amount of token to burn.\\n    function burnFrom(address from, uint256 id, uint256 value) external;\\n\\n    /// @notice Burns multiple tokens.\\n    /// @dev Reverts if `ids` and `values` have different lengths.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from`.\\n    /// @dev Reverts if `from` has an insufficient balance for any of `ids`.\\n    /// @dev Emits an {IERC1155-TransferBatch} event.\\n    /// @param from Address of the current tokens owner.\\n    /// @param ids Identifiers of the tokens to burn.\\n    /// @param values Amounts of tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata ids, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x504730533c62a264330ae5c48a35f223e94110027bb4b6b9e1b5be27f544ccbf\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155TokenReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC1155 Multi Token Standard, Tokens Receiver.\\n/// @notice Interface for any contract that wants to support transfers from ERC1155 asset contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-1155\\n/// @dev Note: The ERC-165 identifier for this interface is 0x4e2312e0.\\ninterface IERC1155TokenReceiver {\\n    /// @notice Handles the receipt of a single ERC1155 token type.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeTransferFrom` after the balance update.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` (`0xf23a6e61`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param id The ID of the token being transferred\\n    /// @param value The amount of tokens being transferred\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xf23a6e61` to accept the transfer, or any other value to reject it.\\n    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n\\n    /// @notice Handles the receipt of multiple ERC1155 token types.\\n    /// @notice ERC1155 contracts MUST call this function on a recipient contract, at the end of a `safeBatchTransferFrom` after the balance updates.\\n    /// @dev Return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` (`0xbc197c81`) to accept the transfer.\\n    /// @dev Return of any other value than the prescribed keccak256 generated value will result in the transaction being reverted by the caller.\\n    /// @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n    /// @param from The address which previously owned the token\\n    /// @param ids An array containing ids of each token being transferred (order and length must match _values array)\\n    /// @param values An array containing amounts of each token being transferred (order and length must match _ids array)\\n    /// @param data Additional data with no specified format\\n    /// @return magicValue `0xbc197c81` to accept the transfer, or any other value to reject it.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x425cccbe1ba20c3506469f62a53bccb7cbaabb18dc971a4b68c1e5ba338684bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/burn/OrbsBurnPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {ERC1155TokenReceiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/ERC1155TokenReceiver.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\n/**\\n * @title OrbsBurnPool Contract\\n * @dev This contract allows users to burn tokens and calculate rewards based on the amount of tokens burned.\\n */\\ncontract OrbsBurnPool is ForwarderRegistryContext, ERC1155TokenReceiver {\\n    using MerkleProof for bytes32[];\\n\\n    /// @notice The denominator for the multiplier.\\n    uint256 internal constant _DENOMINATOR = 10_000;\\n\\n    /// @notice The token ID of RoC for setting the token multiplier.\\n    uint256 public constant MISSING_ORB_TOKEN_ID = 1;\\n\\n    /// @notice The token weights for calculating Ash.\\n    uint256 public constant BURN_WEIGHT_TOKEN_1 = 1;\\n    uint256 public constant BURN_WEIGHT_TOKEN_2 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_3 = 3;\\n    uint256 public constant BURN_WEIGHT_TOKEN_4 = 5;\\n    uint256 public constant BURN_WEIGHT_TOKEN_5 = 9;\\n    uint256 public constant BURN_WEIGHT_TOKEN_6 = 25;\\n    uint256 public constant BURN_WEIGHT_TOKEN_7 = 16;\\n\\n    /// @notice The Riddle Of Chaos multiplier.\\n    uint256 public constant ROC_MULTIPLIER = 2;\\n\\n    /// @notice The IERC1155Burnable erc1155 contracts burn to generate ASH.\\n    IERC1155Burnable public immutable ORB_OF_POWER;\\n\\n    /// @notice The IERC1155 erc1155 contract for setting the token multiplier.\\n    IERC1155Burnable public immutable MISSING_ORB;\\n\\n    /// @notice The initial time of the contract.\\n    uint256 public immutable INITIAL_TIME;\\n\\n    /// @notice The duration of each cycle.\\n    uint256 public immutable CYCLE_DURATION;\\n\\n    /// @notice The maximum cycle.\\n    uint256 public immutable MAX_CYCLE;\\n\\n    /// @notice The Merkle root for setting the puzzleMultiplier.\\n    bytes32 public immutable MERKLE_ROOT;\\n\\n    /// @notice The total amount of ASH generated in each cycle.\\n    mapping(uint256 => uint256) public totalAshPerCycle;\\n\\n    /// @notice The total amount of ASH generated by each user in each cycle.\\n    mapping(uint256 => mapping(address => uint256)) public userAshPerCycle;\\n\\n    /// @notice The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier.\\n    mapping(address => uint256) public orbMultipliers;\\n\\n    /// @notice Event emitted when ASH are generated.\\n    event GenerateAsh(\\n        address indexed burner,\\n        uint256 indexed cycle,\\n        uint256[] ids,\\n        uint256[] values,\\n        uint256 ash,\\n        uint256 totalAsh,\\n        uint256 orbMultiplier\\n    );\\n\\n    /// @notice Event emitted when the multiplier info is updated.\\n    event UpdateOrbMultiplier(address indexed recipient, uint256 curOrbMultiplier, uint256 updatedOrbMultiplier);\\n\\n    /// @notice Error thrown when the token ID is invalid.\\n    error InvalidTokenId(address token, uint256 tokenId);\\n\\n    /// @notice Error thrown when the token is not approved.\\n    error InvalidTokenAddress(address token);\\n\\n    /// @notice Error thrown when the token amount is invalid.\\n    error InvalidTokenValue(address token, uint256 tokenId, uint256 value);\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error InvalidCycle(uint256 cycle);\\n\\n    /// @notice Error thrown when the wallet already has the ROC multiplier been set.\\n    error AlreadySetROCMultiplier(address wallet);\\n\\n    /// @notice Error thrown when the proof is invalid.\\n    error InvalidProof(address recipient, uint256 puzzleGameMultiplierNumerator);\\n\\n    /// @notice Error thrown when the cycle duration is invalid.\\n    error ZeroCycleDuration();\\n\\n    /// @notice Error thrown when the cycle is invalid.\\n    error ZeroMaxCycle();\\n\\n    /**\\n     * @notice Constructor for the OrbsBurnPool contract.\\n     * @param initialTime The initial time of the contract.\\n     * @param cycleDuration The duration of each cycle.\\n     * @param maxCycle The maximum cycle.\\n     * @param orbOfPower The IERC1155Burnable erc1155 contract burn to generate ASH.\\n     * @param merkleRoot The Merkle root of the Puzzle Game multiplier claim.\\n     * @param missingOrb The IERC1155Burnable erc1155 missing orb contract for setting the token multiplier.\\n     * @param forwarderRegistry The forwarder registry contract.\\n     * @dev Throws if the cycle duration is zero.\\n     * @dev Throws if the max cycle is zero.\\n     */\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) ForwarderRegistryContext(forwarderRegistry) {\\n        INITIAL_TIME = initialTime;\\n\\n        if (cycleDuration == 0) {\\n            revert ZeroCycleDuration();\\n        }\\n        CYCLE_DURATION = cycleDuration;\\n\\n        if (maxCycle == 0) {\\n            revert ZeroMaxCycle();\\n        }\\n        MAX_CYCLE = maxCycle;\\n        MERKLE_ROOT = merkleRoot;\\n        ORB_OF_POWER = orbOfPower;\\n        MISSING_ORB = missingOrb;\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n\\n    /**\\n     * @notice Get the current cycle.\\n     * @return cycle The current cycle.\\n     */\\n    function currentCycle() public view returns (uint256) {\\n        return (block.timestamp - INITIAL_TIME) / CYCLE_DURATION;\\n    }\\n\\n    /**\\n     * @notice Set the Orb multiplier by burning the Missing Orb token 1\\n     * @notice and set the Puzzle Game multiplier through a Merkle proof in the data field.\\n     * @param from The wallet address.\\n     * @param id The token ID.\\n     * @param value The token value.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     * @dev Throws if the token multiplier has already been set.\\n     */\\n    function onERC1155Received(address, address from, uint256 id, uint256 value, bytes calldata data) external override returns (bytes4) {\\n        if (msg.sender != address(MISSING_ORB)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n        if (id != MISSING_ORB_TOKEN_ID) {\\n            revert InvalidTokenId(msg.sender, id);\\n        }\\n\\n        if (value != 1) {\\n            revert InvalidTokenValue(msg.sender, id, value);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        uint256 curOrbMultiplier = orbMultipliers[from];\\n        if (uint128(curOrbMultiplier) > 0) {\\n            revert AlreadySetROCMultiplier(from);\\n        }\\n\\n        IERC1155Burnable(msg.sender).burnFrom(address(this), id, value);\\n\\n        uint256 newOrbMultiplier = curOrbMultiplier | ROC_MULTIPLIER;\\n        if (data.length > 0) {\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n                bytes32 leaf = keccak256(abi.encodePacked(from, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(from, puzzleGameMultiplierNumerator);\\n                }\\n\\n                newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | newOrbMultiplier;\\n            }\\n        }\\n        orbMultipliers[from] = newOrbMultiplier;\\n        emit UpdateOrbMultiplier(from, curOrbMultiplier, newOrbMultiplier);\\n\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    /**\\n     * @notice Burn the tokens and calculate the ash.\\n     * @param from The wallet address.\\n     * @param ids The token IDs to burn.\\n     * @param values The amount of tokens to burn.\\n     * @param data The merkle proof data and multiplier value for setting the token multiplier.\\n     * @return The ERC1155Received selector.\\n     * @dev Throws if the token is invalid.\\n     * @dev Throws if the cycle is invalid.\\n     * @dev Throws if the token ID is invalid.\\n     * @dev Throws if the token amount is invalid.\\n     */\\n    function onERC1155BatchReceived(\\n        address,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external override returns (bytes4) {\\n        if (msg.sender != address(ORB_OF_POWER)) {\\n            revert InvalidTokenAddress(msg.sender);\\n        }\\n\\n        uint256 cycle = currentCycle();\\n        if (cycle > MAX_CYCLE) {\\n            revert InvalidCycle(cycle);\\n        }\\n\\n        IERC1155Burnable(msg.sender).batchBurnFrom(address(this), ids, values);\\n\\n        uint256 ashGenerated = 0;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            if (values[i] == 0) {\\n                revert InvalidTokenValue(msg.sender, ids[i], values[i]);\\n            }\\n\\n            if (ids[i] == 1) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_1);\\n            } else if (ids[i] == 2) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_2);\\n            } else if (ids[i] == 3) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_3);\\n            } else if (ids[i] == 4) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_4);\\n            } else if (ids[i] == 5) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_5);\\n            } else if (ids[i] == 6) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_6);\\n            } else if (ids[i] == 7) {\\n                ashGenerated += (values[i] * BURN_WEIGHT_TOKEN_7);\\n            } else {\\n                revert InvalidTokenId(address(ORB_OF_POWER), ids[i]);\\n            }\\n        }\\n\\n        address userAddr = from;\\n\\n        // boost the total ash based on the orbMultipliers\\n        uint256 curOrbMultiplier = orbMultipliers[userAddr];\\n\\n        if (data.length > 0) {\\n            (bytes32[] memory proof, uint256 puzzleGameMultiplierNumerator) = abi.decode(data, (bytes32[], uint256));\\n            if ((curOrbMultiplier >> 128) == 0) {\\n                bytes32 leaf = keccak256(abi.encodePacked(userAddr, puzzleGameMultiplierNumerator));\\n                if (!proof.verify(MERKLE_ROOT, leaf)) {\\n                    revert InvalidProof(userAddr, puzzleGameMultiplierNumerator);\\n                }\\n\\n                uint256 newOrbMultiplier = (puzzleGameMultiplierNumerator << 128) | curOrbMultiplier;\\n                orbMultipliers[userAddr] = newOrbMultiplier;\\n                emit UpdateOrbMultiplier(userAddr, curOrbMultiplier, newOrbMultiplier);\\n                curOrbMultiplier = newOrbMultiplier;\\n            }\\n\\n            ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n        } else {\\n            uint256 puzzleGameMultiplierNumerator = curOrbMultiplier >> 128;\\n            if (puzzleGameMultiplierNumerator > 0) {\\n                ashGenerated = (ashGenerated * puzzleGameMultiplierNumerator) / _DENOMINATOR;\\n            }\\n        }\\n\\n        uint256 rocMultiplier = uint128(curOrbMultiplier);\\n        if (rocMultiplier > 0) {\\n            ashGenerated *= rocMultiplier;\\n        }\\n\\n        // update the user status\\n        uint256 userTotalAshPerCycle = userAshPerCycle[cycle][userAddr] + ashGenerated;\\n        userAshPerCycle[cycle][userAddr] = userTotalAshPerCycle;\\n        // update the pool status\\n        totalAshPerCycle[cycle] += ashGenerated;\\n\\n        emit GenerateAsh(userAddr, cycle, ids, values, ashGenerated, userTotalAshPerCycle, curOrbMultiplier);\\n\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x60edc8bb16c081acb89ab739f39460a89895ad09b77d648f56122d611012bfd9\",\"license\":\"MIT\"},\"contracts/mocks/burn/OrbsBurnPoolMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {OrbsBurnPool} from \\\"../../burn/OrbsBurnPool.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC1155Burnable} from \\\"@animoca/ethereum-contracts/contracts/token/ERC1155/interfaces/IERC1155Burnable.sol\\\";\\n\\ncontract OrbsBurnPoolMock is OrbsBurnPool {\\n    constructor(\\n        uint256 initialTime,\\n        uint256 cycleDuration,\\n        uint256 maxCycle,\\n        bytes32 merkleRoot,\\n        IERC1155Burnable orbOfPower,\\n        IERC1155Burnable missingOrb,\\n        IForwarderRegistry forwarderRegistry\\n    ) OrbsBurnPool(initialTime, cycleDuration, maxCycle, merkleRoot, orbOfPower, missingOrb, forwarderRegistry) {}\\n\\n    function __msgSender() external view returns (address) {\\n        return _msgSender();\\n    }\\n\\n    /// @notice Internal function to access the current msg.data.\\n    /// @return The current msg.data value.\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x29e7b934f0c24b2bca21f90fa046f77c0a9ee80d5da6b0e90b72f2635faa40b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1054,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"totalAshPerCycle","offset":0,"slot":"0","type":"t_mapping(t_uint256,t_uint256)"},{"astId":1061,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"userAshPerCycle","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_mapping(t_address,t_uint256))"},{"astId":1066,"contract":"contracts/mocks/burn/OrbsBurnPoolMock.sol:OrbsBurnPoolMock","label":"orbMultipliers","offset":0,"slot":"2","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_uint256,t_uint256)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"AlreadySetROCMultiplier(address)":[{"notice":"Error thrown when the wallet already has the ROC multiplier been set."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidCycle(uint256)":[{"notice":"Error thrown when the cycle is invalid."}],"InvalidProof(address,uint256)":[{"notice":"Error thrown when the proof is invalid."}],"InvalidTokenAddress(address)":[{"notice":"Error thrown when the token is not approved."}],"InvalidTokenId(address,uint256)":[{"notice":"Error thrown when the token ID is invalid."}],"InvalidTokenValue(address,uint256,uint256)":[{"notice":"Error thrown when the token amount is invalid."}],"ZeroCycleDuration()":[{"notice":"Error thrown when the cycle duration is invalid."}],"ZeroMaxCycle()":[{"notice":"Error thrown when the cycle is invalid."}]},"events":{"GenerateAsh(address,uint256,uint256[],uint256[],uint256,uint256,uint256)":{"notice":"Event emitted when ASH are generated."},"UpdateOrbMultiplier(address,uint256,uint256)":{"notice":"Event emitted when the multiplier info is updated."}},"kind":"user","methods":{"BURN_WEIGHT_TOKEN_1()":{"notice":"The token weights for calculating Ash."},"CYCLE_DURATION()":{"notice":"The duration of each cycle."},"INITIAL_TIME()":{"notice":"The initial time of the contract."},"MAX_CYCLE()":{"notice":"The maximum cycle."},"MERKLE_ROOT()":{"notice":"The Merkle root for setting the puzzleMultiplier."},"MISSING_ORB()":{"notice":"The IERC1155 erc1155 contract for setting the token multiplier."},"MISSING_ORB_TOKEN_ID()":{"notice":"The token ID of RoC for setting the token multiplier."},"ORB_OF_POWER()":{"notice":"The IERC1155Burnable erc1155 contracts burn to generate ASH."},"ROC_MULTIPLIER()":{"notice":"The Riddle Of Chaos multiplier."},"__msgData()":{"notice":"Internal function to access the current msg.data."},"currentCycle()":{"notice":"Get the current cycle."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)":{"notice":"Burn the tokens and calculate the ash."},"onERC1155Received(address,address,uint256,uint256,bytes)":{"notice":"Set the Orb multiplier by burning the Missing Orb token 1and set the Puzzle Game multiplier through a Merkle proof in the data field."},"orbMultipliers(address)":{"notice":"The orb multipliers for each user, first 128 bits are the puzzleMultiplier numerator, last 128 bits are the roc multiplier."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalAshPerCycle(uint256)":{"notice":"The total amount of ASH generated in each cycle."},"userAshPerCycle(uint256,address)":{"notice":"The total amount of ASH generated by each user in each cycle."}},"version":1}}}}}}