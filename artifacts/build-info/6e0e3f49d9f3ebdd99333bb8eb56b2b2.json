{"id":"6e0e3f49d9f3ebdd99333bb8eb56b2b2","_format":"hh-sol-build-info-1","solcVersion":"0.8.28","solcLongVersion":"0.8.28+commit.7893614a","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the pending contract owner but is required to.\n/// @param account The account that was checked.\nerror NotPendingContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n/// @notice Emitted when a new contract owner is pending.\n/// @param pendingOwner the address of the new contract owner.\nevent OwnershipTransferPending(address indexed pendingOwner);\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"./../../utils/libraries/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (\n            msg.sender == address(_FORWARDER_REGISTRY) ||\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\n        ) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title Meta-Transactions Forwarder Registry.\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @param target The target contract.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {ContractOwnership} from \"./../../access/ContractOwnership.sol\";\nimport {AccessControl} from \"./../../access/AccessControl.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"./../../metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"./../../metatx/ForwarderRegistryContext.sol\";\nimport {AccessControlStorage} from \"./../../access/libraries/AccessControlStorage.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"./../../metatx/interfaces/IForwarderRegistry.sol\";\n\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\n\nabstract contract LinearPool is AccessControl, ReentrancyGuard, ForwarderRegistryContext {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using SafeERC20 for IERC20;\n\n    bytes32 public constant REWARDER_ROLE = \"rewarder\";\n    uint256 public constant SCALING_FACTOR = 1e18;\n\n    uint256 public totalStaked;\n    uint256 public lastUpdated;\n    uint256 public rewardRate;\n    uint256 public rewardPerStakePointStored;\n    uint256 public distributionEnd;\n\n    mapping(address staker => uint256 stakePoints) public staked;\n    mapping(address staker => uint256 reward) public rewards;\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\n\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\n\n    error InvalidStakeAmount();\n    error InvalidWithdrawAmount();\n    error InvalidRewardAmount();\n    error InvalidDuration();\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\n\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\n\n    function _updateReward(address account) internal {\n        rewardPerStakePointStored = rewardPerStakePoint();\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\n            // ensure rewards before the first staker do not get lost\n            lastUpdated = lastTimeRewardApplicable();\n        }\n        if (account != address(0)) {\n            rewards[account] = earned(account);\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\n        }\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint256) {\n        uint256 currentDistributionEnd = distributionEnd;\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\n    }\n\n    function rewardPerStakePoint() public view returns (uint256) {\n        uint256 currentTotalStaked = totalStaked;\n        if (currentTotalStaked == 0) {\n            return rewardPerStakePointStored;\n        }\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\n    }\n\n    function earned(address account) public view returns (uint256) {\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\n    }\n\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\n        _stake(_msgSender(), abi.encode(stakeData));\n    }\n\n    function _stake(address sender, bytes memory stakeData) internal virtual {\n        _updateReward(sender);\n        uint256 stakePoints = _computeStake(sender, stakeData);\n        require(stakePoints != 0, InvalidStakeAmount());\n        totalStaked += stakePoints;\n        staked[sender] += stakePoints;\n        emit Staked(sender, stakeData, stakePoints);\n    }\n\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\n        _withdraw(_msgSender(), withdrawData);\n    }\n\n    function _withdraw(address sender, bytes memory withdrawData) internal virtual {\n        _updateReward(sender);\n        uint256 stakePoints = _computeWithdraw(sender, withdrawData);\n        require(stakePoints != 0, InvalidWithdrawAmount());\n        totalStaked -= stakePoints;\n        staked[sender] -= stakePoints;\n        emit Withdrawn(sender, withdrawData, stakePoints);\n    }\n\n    function claim() public virtual {\n        address sender = _msgSender();\n        _updateReward(sender);\n        uint256 reward = earned(sender);\n        if (reward != 0) {\n            rewards[sender] = 0;\n            bytes memory claimData = _computeClaim(sender, reward);\n            emit Claimed(sender, claimData, reward);\n        }\n    }\n\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\n        address sender = _msgSender();\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, sender);\n\n        require(reward != 0, InvalidRewardAmount());\n        require(duration != 0, InvalidDuration());\n\n        _updateReward(address(0));\n\n        uint256 dust;\n        uint256 currentDistributionEnd = distributionEnd;\n        uint256 newDisributionEnd = block.timestamp + duration;\n\n        if (block.timestamp >= currentDistributionEnd) {\n            // No current distribution\n            uint256 newRewardRate = reward / duration;\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\n            rewardRate = newRewardRate;\n            dust = reward % duration;\n            distributionEnd = newDisributionEnd;\n        } else {\n            if (newDisributionEnd <= currentDistributionEnd) {\n                // New distribution ends before current distribution\n                duration = currentDistributionEnd - block.timestamp;\n                uint256 additionalRewardRate = reward / duration;\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\n                rewardRate += additionalRewardRate;\n                dust = reward % duration;\n            } else {\n                // New distribution ends after current distribution\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\n                uint256 totalReward = remainingReward + reward;\n                rewardRate = totalReward / duration;\n                dust = totalReward % duration;\n                distributionEnd = newDisributionEnd;\n            }\n        }\n        lastUpdated = block.timestamp;\n\n        _computeAddReward(sender, reward, dust);\n\n        emit RewardAdded(sender, reward, duration, dust);\n    }\n\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\n\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\n\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\n\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {LinearPool} from \"./../LinearPool.sol\";\nimport {ERC20Receiver} from \"./../../../token/ERC20/ERC20Receiver.sol\";\nimport {SafeERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"./../../../metatx/interfaces/IForwarderRegistry.sol\";\n\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable STAKING_TOKEN;\n\n    error InvalidToken();\n\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\n        STAKING_TOKEN = stakingToken;\n    }\n\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\n        bool requiresTransfer = false;\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\n        return this.onERC20Received.selector;\n    }\n\n    function stake(bytes calldata stakeData) public payable virtual override {\n        // non-reentrancy check removed\n        bool requiresTransfer = true;\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\n    }\n\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\n        stakePoints = abi.decode(data, (uint256));\n        if (requiresTransfer) {\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\n        }\n    }\n\n    function withdraw(bytes calldata withdrawData) public virtual override {\n        // non-reentrancy check removed\n        _withdraw(_msgSender(), withdrawData);\n    }\n\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\n        stakePoints = abi.decode(withdrawData, (uint256));\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nlibrary Address {\n    /// @notice Checks if the address is a deployed smart contract.\n    /// @param addr The address to check.\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\n    function hasBytecode(address addr) internal view returns (bool) {\n        uint256 size;\n        assembly {\n            size := extcodesize(addr)\n        }\n        return size != 0;\n    }\n}\n"},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     *\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n     * smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     *\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n     * only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n     * set here.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            // bubble errors\n            if iszero(success) {\n                let ptr := mload(0x40)\n                returndatacopy(ptr, 0, returndatasize())\n                revert(ptr, returndatasize())\n            }\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly (\"memory-safe\") {\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0)\n        }\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n * consider using {ReentrancyGuardTransient} instead.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC-1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * TIP: Consider using this library along with {SlotDerivation}.\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct Int256Slot {\n        int256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\n     */\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        assembly (\"memory-safe\") {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/points/interface/IPoints.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.28;\n\ninterface IPoints {\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\n}\n"},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {ERC20StakingPointsRewardsLinearPool} from \"./ERC20StakingPointsRewardsLinearPool.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IPoints} from \"./../points/interface/IPoints.sol\";\n\ncontract ERC20StakingPointsRewardsLimitedLinearPool is ERC20StakingPointsRewardsLinearPool {\n    address public immutable CLAIM_CONTRACT;\n\n    error InvalidTransferOperator(address operator);\n    error OnlyReceiverInterface();\n\n    constructor(\n        address claimContract,\n        IERC20 stakingToken,\n        IPoints pointsContract,\n        bytes32 depositReasonCode,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20StakingPointsRewardsLinearPool(stakingToken, pointsContract, depositReasonCode, forwarderRegistry) {\n        CLAIM_CONTRACT = claimContract;\n    }\n\n    function onERC20Received(address operator, address, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\n        require(operator == CLAIM_CONTRACT, InvalidTransferOperator(operator));\n        address staker = abi.decode(data, (address));\n        _stake(staker, abi.encode(value));\n        return this.onERC20Received.selector;\n    }\n\n    function stake(bytes calldata) public payable virtual override {\n        revert OnlyReceiverInterface();\n    }\n\n    function _computeStake(address, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\n        // The tokens were received via the receiver interface, so we don't need to transfer them.\n        stakePoints = abi.decode(stakeData, (uint256));\n    }\n}\n"},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {LinearPool} from \"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\";\nimport {ERC20StakingLinearPool} from \"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\";\nimport {LinearPool_PointsRewards} from \"./reward/LinearPool_PointsRewards.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IPoints} from \"./../points/interface/IPoints.sol\";\n\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\n    constructor(\n        IERC20 stakingToken,\n        IPoints pointsContract,\n        bytes32 depositReasonCode,\n        IForwarderRegistry forwarderRegistry\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {}\n\n    function _computeClaim(\n        address staker,\n        uint256 reward\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\n    }\n\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\n    }\n}\n"},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.28;\n\nimport {IPoints} from \"./../../points/interface/IPoints.sol\";\n\n// solhint-disable-next-line contract-name-capwords\nabstract contract LinearPool_PointsRewards {\n    IPoints public immutable POINTS_CONTRACT;\n    bytes32 public immutable DEPOSIT_REASON_CODE;\n\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\n        POINTS_CONTRACT = pointsContract;\n        DEPOSIT_REASON_CODE = depositReasonCode;\n    }\n\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\n        claimData = abi.encode(reward);\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\n    }\n\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[11],"AccessControlBase":[168],"ContractOwnership":[44]},"id":12,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":169,"src":"58:63:0","symbolAliases":[{"foreign":{"id":2,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":168,"src":"66:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":12,"sourceUnit":45,"src":"122:58:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"130:17:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":7,"name":"AccessControlBase","nameLocations":["384:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":168,"src":"384:17:0"},"id":8,"nodeType":"InheritanceSpecifier","src":"384:17:0"},{"baseName":{"id":9,"name":"ContractOwnership","nameLocations":["403:17:0"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"403:17:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"403:17:0"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":6,"nodeType":"StructuredDocumentation","src":"182:167:0","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":11,"linearizedBaseContracts":[11,44,881,898,216,168,2842,330,314],"name":"AccessControl","nameLocation":"367:13:0","nodeType":"ContractDefinition","nodes":[],"scope":12,"src":"349:74:0","usedErrors":[225,248,886],"usedEvents":[271,280,289]}],"src":"32:392:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[44],"ContractOwnershipBase":[216],"ContractOwnershipStorage":[851],"InterfaceDetection":[881]},"id":45,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":13,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":15,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":852,"src":"58:82:1","symbolAliases":[{"foreign":{"id":14,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"66:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":17,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":217,"src":"141:71:1","symbolAliases":[{"foreign":{"id":16,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"149:21:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":19,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":45,"sourceUnit":882,"src":"213:77:1","symbolAliases":[{"foreign":{"id":18,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"221:18:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":21,"name":"ContractOwnershipBase","nameLocations":["549:21:1"],"nodeType":"IdentifierPath","referencedDeclaration":216,"src":"549:21:1"},"id":22,"nodeType":"InheritanceSpecifier","src":"549:21:1"},{"baseName":{"id":23,"name":"InterfaceDetection","nameLocations":["572:18:1"],"nodeType":"IdentifierPath","referencedDeclaration":881,"src":"572:18:1"},"id":24,"nodeType":"InheritanceSpecifier","src":"572:18:1"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":20,"nodeType":"StructuredDocumentation","src":"292:218:1","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":44,"linearizedBaseContracts":[44,881,898,216,2842,330],"name":"ContractOwnership","nameLocation":"528:17:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":28,"libraryName":{"id":25,"name":"ContractOwnershipStorage","nameLocations":["603:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":851,"src":"603:24:1"},"nodeType":"UsingForDirective","src":"597:67:1","typeName":{"id":27,"nodeType":"UserDefinedTypeName","pathNode":{"id":26,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:1","657:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"632:31:1"},"referencedDeclaration":624,"src":"632:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":42,"nodeType":"Block","src":"998:80:1","statements":[{"expression":{"arguments":[{"id":39,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":31,"src":"1058:12:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":34,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1008:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$851_$","typeString":"type(library ContractOwnershipStorage)"}},"id":36,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":850,"src":"1008:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":37,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":38,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:1","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":694,"src":"1008:49:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$624_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":40,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":41,"nodeType":"ExpressionStatement","src":"1008:63:1"}]},"documentation":{"id":29,"nodeType":"StructuredDocumentation","src":"670:289:1","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":43,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":32,"nodeType":"ParameterList","parameters":[{"constant":false,"id":31,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:1","nodeType":"VariableDeclaration","scope":43,"src":"976:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":30,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:1"},"returnParameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"998:0:1"},"scope":44,"src":"964:114:1","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":45,"src":"510:570:1","usedErrors":[248,886],"usedEvents":[289]}],"src":"32:1049:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[168],"AccessControlStorage":[593],"Context":[2842],"ContractOwnershipStorage":[851],"IAccessControl":[314]},"id":169,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":46,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":48,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":169,"sourceUnit":315,"src":"58:76:2","symbolAliases":[{"foreign":{"id":47,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"66:14:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":50,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":169,"sourceUnit":594,"src":"135:77:2","symbolAliases":[{"foreign":{"id":49,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"143:20:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":52,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":169,"sourceUnit":852,"src":"213:85:2","symbolAliases":[{"foreign":{"id":51,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"221:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":54,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":169,"sourceUnit":2843,"src":"299:66:2","symbolAliases":[{"foreign":{"id":53,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"307:7:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":56,"name":"IAccessControl","nameLocations":["632:14:2"],"nodeType":"IdentifierPath","referencedDeclaration":314,"src":"632:14:2"},"id":57,"nodeType":"InheritanceSpecifier","src":"632:14:2"},{"baseName":{"id":58,"name":"Context","nameLocations":["648:7:2"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"648:7:2"},"id":59,"nodeType":"InheritanceSpecifier","src":"648:7:2"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"367:226:2","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":168,"linearizedBaseContracts":[168,2842,314],"name":"AccessControlBase","nameLocation":"611:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":63,"libraryName":{"id":60,"name":"AccessControlStorage","nameLocations":["668:20:2"],"nodeType":"IdentifierPath","referencedDeclaration":593,"src":"668:20:2"},"nodeType":"UsingForDirective","src":"662:59:2","typeName":{"id":62,"nodeType":"UserDefinedTypeName","pathNode":{"id":61,"name":"AccessControlStorage.Layout","nameLocations":["693:20:2","714:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"693:27:2"},"referencedDeclaration":358,"src":"693:27:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":67,"libraryName":{"id":64,"name":"ContractOwnershipStorage","nameLocations":["732:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":851,"src":"732:24:2"},"nodeType":"UsingForDirective","src":"726:67:2","typeName":{"id":66,"nodeType":"UserDefinedTypeName","pathNode":{"id":65,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:2","786:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"761:31:2"},"referencedDeclaration":624,"src":"761:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":98,"nodeType":"Block","src":"1175:198:2","statements":[{"assignments":[76],"declarations":[{"constant":false,"id":76,"mutability":"mutable","name":"operator","nameLocation":"1193:8:2","nodeType":"VariableDeclaration","scope":98,"src":"1185:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":75,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":79,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":77,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"1204:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":78,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:2"},{"expression":{"arguments":[{"id":85,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1283:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":80,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1226:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$851_$","typeString":"type(library ContractOwnershipStorage)"}},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":850,"src":"1226:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":83,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":84,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":818,"src":"1226:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$624_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":87,"nodeType":"ExpressionStatement","src":"1226:66:2"},{"expression":{"arguments":[{"id":93,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":70,"src":"1342:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":94,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":72,"src":"1348:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":95,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":76,"src":"1357:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":88,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1302:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$593_$","typeString":"type(library AccessControlStorage)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":592,"src":"1302:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":92,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:2","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":409,"src":"1302:39:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":96,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":97,"nodeType":"ExpressionStatement","src":"1302:64:2"}]},"documentation":{"id":68,"nodeType":"StructuredDocumentation","src":"799:312:2","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":99,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:2","nodeType":"FunctionDefinition","parameters":{"id":73,"nodeType":"ParameterList","parameters":[{"constant":false,"id":70,"mutability":"mutable","name":"role","nameLocation":"1143:4:2","nodeType":"VariableDeclaration","scope":99,"src":"1135:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":69,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":72,"mutability":"mutable","name":"account","nameLocation":"1157:7:2","nodeType":"VariableDeclaration","scope":99,"src":"1149:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":71,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:2"},"returnParameters":{"id":74,"nodeType":"ParameterList","parameters":[],"src":"1175:0:2"},"scope":168,"src":"1116:257:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":130,"nodeType":"Block","src":"1754:199:2","statements":[{"assignments":[108],"declarations":[{"constant":false,"id":108,"mutability":"mutable","name":"operator","nameLocation":"1772:8:2","nodeType":"VariableDeclaration","scope":130,"src":"1764:16:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":111,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":109,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"1783:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":110,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:2"},{"expression":{"arguments":[{"id":117,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1862:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":112,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"1805:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$851_$","typeString":"type(library ContractOwnershipStorage)"}},"id":114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":850,"src":"1805:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":116,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:2","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":818,"src":"1805:56:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$624_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":119,"nodeType":"ExpressionStatement","src":"1805:66:2"},{"expression":{"arguments":[{"id":125,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":102,"src":"1922:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":126,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":104,"src":"1928:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":127,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":108,"src":"1937:8:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":120,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"1881:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$593_$","typeString":"type(library AccessControlStorage)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":592,"src":"1881:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:2","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":446,"src":"1881:40:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":129,"nodeType":"ExpressionStatement","src":"1881:65:2"}]},"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"1379:310:2","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":131,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:2","nodeType":"FunctionDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"mutability":"mutable","name":"role","nameLocation":"1722:4:2","nodeType":"VariableDeclaration","scope":131,"src":"1714:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":101,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":104,"mutability":"mutable","name":"account","nameLocation":"1736:7:2","nodeType":"VariableDeclaration","scope":131,"src":"1728:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":103,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:2"},"returnParameters":{"id":106,"nodeType":"ParameterList","parameters":[],"src":"1754:0:2"},"scope":168,"src":"1694:259:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[303],"body":{"id":147,"nodeType":"Block","src":"2039:79:2","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":142,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"2092:10:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":144,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"2106:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":137,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"2049:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$593_$","typeString":"type(library AccessControlStorage)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":592,"src":"2049:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:2","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":481,"src":"2049:42:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$358_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":145,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":146,"nodeType":"ExpressionStatement","src":"2049:62:2"}]},"documentation":{"id":132,"nodeType":"StructuredDocumentation","src":"1959:30:2","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":148,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:2","nodeType":"FunctionDefinition","parameters":{"id":135,"nodeType":"ParameterList","parameters":[{"constant":false,"id":134,"mutability":"mutable","name":"role","nameLocation":"2024:4:2","nodeType":"VariableDeclaration","scope":148,"src":"2016:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:2"},"returnParameters":{"id":136,"nodeType":"ParameterList","parameters":[],"src":"2039:0:2"},"scope":168,"src":"1994:124:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[313],"body":{"id":166,"nodeType":"Block","src":"2245:76:2","statements":[{"expression":{"arguments":[{"id":162,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":151,"src":"2300:4:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":163,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":153,"src":"2306:7:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":158,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"2262:20:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$593_$","typeString":"type(library AccessControlStorage)"}},"id":159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":592,"src":"2262:27:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":160,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":161,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:2","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":502,"src":"2262:37:2","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":164,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":157,"id":165,"nodeType":"Return","src":"2255:59:2"}]},"documentation":{"id":149,"nodeType":"StructuredDocumentation","src":"2124:30:2","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":167,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:2","nodeType":"FunctionDefinition","parameters":{"id":154,"nodeType":"ParameterList","parameters":[{"constant":false,"id":151,"mutability":"mutable","name":"role","nameLocation":"2184:4:2","nodeType":"VariableDeclaration","scope":167,"src":"2176:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":150,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:2","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":153,"mutability":"mutable","name":"account","nameLocation":"2198:7:2","nodeType":"VariableDeclaration","scope":167,"src":"2190:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":152,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:2"},"returnParameters":{"id":157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":156,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:2","nodeType":"VariableDeclaration","scope":167,"src":"2230:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":155,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:2"},"scope":168,"src":"2159:162:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":169,"src":"593:1730:2","usedErrors":[225,248],"usedEvents":[271,280]}],"src":"32:2292:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[2842],"ContractOwnershipBase":[216],"ContractOwnershipStorage":[851],"IERC173":[330]},"id":217,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":170,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":172,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":217,"sourceUnit":331,"src":"58:52:3","symbolAliases":[{"foreign":{"id":171,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"66:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":174,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":217,"sourceUnit":852,"src":"111:85:3","symbolAliases":[{"foreign":{"id":173,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"119:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":217,"sourceUnit":2843,"src":"197:66:3","symbolAliases":[{"foreign":{"id":175,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"205:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":178,"name":"IERC173","nameLocations":["586:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":330,"src":"586:7:3"},"id":179,"nodeType":"InheritanceSpecifier","src":"586:7:3"},{"baseName":{"id":180,"name":"Context","nameLocations":["595:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"595:7:3"},"id":181,"nodeType":"InheritanceSpecifier","src":"595:7:3"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":177,"nodeType":"StructuredDocumentation","src":"265:278:3","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":216,"linearizedBaseContracts":[216,2842,330],"name":"ContractOwnershipBase","nameLocation":"561:21:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":185,"libraryName":{"id":182,"name":"ContractOwnershipStorage","nameLocations":["615:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":851,"src":"615:24:3"},"nodeType":"UsingForDirective","src":"609:67:3","typeName":{"id":184,"nodeType":"UserDefinedTypeName","pathNode":{"id":183,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:3","669:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"644:31:3"},"referencedDeclaration":624,"src":"644:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[329],"body":{"id":197,"nodeType":"Block","src":"765:65:3","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":191,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"782:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$851_$","typeString":"type(library ContractOwnershipStorage)"}},"id":192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":850,"src":"782:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":194,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:3","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":771,"src":"782:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$624_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":190,"id":196,"nodeType":"Return","src":"775:48:3"}]},"documentation":{"id":186,"nodeType":"StructuredDocumentation","src":"682:23:3","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":198,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:3","nodeType":"FunctionDefinition","parameters":{"id":187,"nodeType":"ParameterList","parameters":[],"src":"724:2:3"},"returnParameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":189,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":198,"src":"756:7:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:3"},"scope":216,"src":"710:120:3","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[323],"body":{"id":214,"nodeType":"Block","src":"924:92:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":209,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2824,"src":"986:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":211,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":201,"src":"1000:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":204,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":851,"src":"934:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$851_$","typeString":"type(library ContractOwnershipStorage)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":850,"src":"934:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":207,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":208,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:3","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":758,"src":"934:51:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$624_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":213,"nodeType":"ExpressionStatement","src":"934:75:3"}]},"documentation":{"id":199,"nodeType":"StructuredDocumentation","src":"836:23:3","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":215,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:3","nodeType":"FunctionDefinition","parameters":{"id":202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":201,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:3","nodeType":"VariableDeclaration","scope":215,"src":"891:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":200,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:3"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[],"src":"924:0:3"},"scope":216,"src":"864:152:3","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":217,"src":"543:475:3","usedErrors":[248],"usedEvents":[289]}],"src":"32:987:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[225],"NotTargetContractRoleHolder":[234]},"id":235,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":218,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:4"},{"documentation":{"id":219,"nodeType":"StructuredDocumentation","src":"58:165:4","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":225,"name":"NotRoleHolder","nameLocation":"229:13:4","nodeType":"ErrorDefinition","parameters":{"id":224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":221,"mutability":"mutable","name":"role","nameLocation":"251:4:4","nodeType":"VariableDeclaration","scope":225,"src":"243:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":220,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":223,"mutability":"mutable","name":"account","nameLocation":"265:7:4","nodeType":"VariableDeclaration","scope":225,"src":"257:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:4"},"src":"223:51:4"},{"documentation":{"id":226,"nodeType":"StructuredDocumentation","src":"276:238:4","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":234,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:4","nodeType":"ErrorDefinition","parameters":{"id":233,"nodeType":"ParameterList","parameters":[{"constant":false,"id":228,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:4","nodeType":"VariableDeclaration","scope":234,"src":"548:22:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":227,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":230,"mutability":"mutable","name":"role","nameLocation":"580:4:4","nodeType":"VariableDeclaration","scope":234,"src":"572:12:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":229,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":232,"mutability":"mutable","name":"account","nameLocation":"594:7:4","nodeType":"VariableDeclaration","scope":234,"src":"586:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":231,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:4"},"src":"514:89:4"}],"src":"32:572:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[241]},"id":242,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":236,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"58:128:5","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":241,"name":"TargetIsNotAContract","nameLocation":"192:20:5","nodeType":"ErrorDefinition","parameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:5","nodeType":"VariableDeclaration","scope":241,"src":"213:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:5"},"src":"186:51:5"}],"src":"32:206:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[248],"NotPendingContractOwner":[253],"NotTargetContractOwner":[260]},"id":261,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":243,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":244,"nodeType":"StructuredDocumentation","src":"58:130:6","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":248,"name":"NotContractOwner","nameLocation":"194:16:6","nodeType":"ErrorDefinition","parameters":{"id":247,"nodeType":"ParameterList","parameters":[{"constant":false,"id":246,"mutability":"mutable","name":"account","nameLocation":"219:7:6","nodeType":"VariableDeclaration","scope":248,"src":"211:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":245,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:6"},"src":"188:40:6"},{"documentation":{"id":249,"nodeType":"StructuredDocumentation","src":"230:138:6","text":"@notice Thrown when an account is not the pending contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"61848752","id":253,"name":"NotPendingContractOwner","nameLocation":"374:23:6","nodeType":"ErrorDefinition","parameters":{"id":252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":251,"mutability":"mutable","name":"account","nameLocation":"406:7:6","nodeType":"VariableDeclaration","scope":253,"src":"398:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":250,"name":"address","nodeType":"ElementaryTypeName","src":"398:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"397:17:6"},"src":"368:47:6"},{"documentation":{"id":254,"nodeType":"StructuredDocumentation","src":"417:194:6","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":260,"name":"NotTargetContractOwner","nameLocation":"617:22:6","nodeType":"ErrorDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":256,"mutability":"mutable","name":"targetContract","nameLocation":"648:14:6","nodeType":"VariableDeclaration","scope":260,"src":"640:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"account","nameLocation":"672:7:6","nodeType":"VariableDeclaration","scope":260,"src":"664:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"664:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:41:6"},"src":"611:70:6"}],"src":"32:650:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","exportedSymbols":{"RoleGranted":[271],"RoleRevoked":[280]},"id":281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":262,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:7"},{"anonymous":false,"documentation":{"id":263,"nodeType":"StructuredDocumentation","src":"58:223:7","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":271,"name":"RoleGranted","nameLocation":"287:11:7","nodeType":"EventDefinition","parameters":{"id":270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":265,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"307:4:7","nodeType":"VariableDeclaration","scope":271,"src":"299:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":264,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":267,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"321:7:7","nodeType":"VariableDeclaration","scope":271,"src":"313:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":266,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":269,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"338:8:7","nodeType":"VariableDeclaration","scope":271,"src":"330:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":268,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"298:49:7"},"src":"281:67:7"},{"anonymous":false,"documentation":{"id":272,"nodeType":"StructuredDocumentation","src":"350:225:7","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":280,"name":"RoleRevoked","nameLocation":"581:11:7","nodeType":"EventDefinition","parameters":{"id":279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":274,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"601:4:7","nodeType":"VariableDeclaration","scope":280,"src":"593:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":273,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":276,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"615:7:7","nodeType":"VariableDeclaration","scope":280,"src":"607:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":275,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":278,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"632:8:7","nodeType":"VariableDeclaration","scope":280,"src":"624:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":277,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:49:7"},"src":"575:67:7"}],"src":"32:611:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferPending":[294],"OwnershipTransferred":[289]},"id":295,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":282,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:8"},{"anonymous":false,"documentation":{"id":283,"nodeType":"StructuredDocumentation","src":"58:155:8","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":289,"name":"OwnershipTransferred","nameLocation":"219:20:8","nodeType":"EventDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":285,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:8","nodeType":"VariableDeclaration","scope":289,"src":"240:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":284,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":287,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:8","nodeType":"VariableDeclaration","scope":289,"src":"271:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":286,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:8"},"src":"213:84:8"},{"anonymous":false,"documentation":{"id":290,"nodeType":"StructuredDocumentation","src":"299:121:8","text":"@notice Emitted when a new contract owner is pending.\n @param pendingOwner the address of the new contract owner."},"eventSelector":"fcf6b9a1f453b7c06ba4f44b1f8c38b02e8b90a7bd35bd0d5c43e2deb547f568","id":294,"name":"OwnershipTransferPending","nameLocation":"426:24:8","nodeType":"EventDefinition","parameters":{"id":293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":292,"indexed":true,"mutability":"mutable","name":"pendingOwner","nameLocation":"467:12:8","nodeType":"VariableDeclaration","scope":294,"src":"451:28:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":291,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"450:30:8"},"src":"420:61:8"}],"src":"32:450:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[314]},"id":315,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":296,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"58:59:9","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":314,"linearizedBaseContracts":[314],"name":"IAccessControl","nameLocation":"127:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"148:182:9","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":303,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"344:12:9","nodeType":"FunctionDefinition","parameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"role","nameLocation":"365:4:9","nodeType":"VariableDeclaration","scope":303,"src":"357:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":299,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:14:9"},"returnParameters":{"id":302,"nodeType":"ParameterList","parameters":[],"src":"379:0:9"},"scope":314,"src":"335:45:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":304,"nodeType":"StructuredDocumentation","src":"386:173:9","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":313,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"573:7:9","nodeType":"FunctionDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":306,"mutability":"mutable","name":"role","nameLocation":"589:4:9","nodeType":"VariableDeclaration","scope":313,"src":"581:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":305,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":308,"mutability":"mutable","name":"account","nameLocation":"603:7:9","nodeType":"VariableDeclaration","scope":313,"src":"595:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":307,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:31:9"},"returnParameters":{"id":312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":311,"mutability":"mutable","name":"hasRole_","nameLocation":"640:8:9","nodeType":"VariableDeclaration","scope":313,"src":"635:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":310,"name":"bool","nodeType":"ElementaryTypeName","src":"635:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"634:15:9"},"scope":314,"src":"564:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":315,"src":"117:535:9","usedErrors":[],"usedEvents":[]}],"src":"32:621:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[330]},"id":331,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":316,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":317,"nodeType":"StructuredDocumentation","src":"58:182:10","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":330,"linearizedBaseContracts":[330],"name":"IERC173","nameLocation":"250:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"264:342:10","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":323,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:10","nodeType":"FunctionDefinition","parameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:10","nodeType":"VariableDeclaration","scope":323,"src":"638:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":319,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:10"},"returnParameters":{"id":322,"nodeType":"ParameterList","parameters":[],"src":"664:0:10"},"scope":330,"src":"611:54:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":324,"nodeType":"StructuredDocumentation","src":"671:116:10","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":329,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:10","nodeType":"FunctionDefinition","parameters":{"id":325,"nodeType":"ParameterList","parameters":[],"src":"806:2:10"},"returnParameters":{"id":328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":327,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:10","nodeType":"VariableDeclaration","scope":329,"src":"832:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":326,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:10"},"scope":330,"src":"792:63:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":331,"src":"240:617:10","usedErrors":[],"usedEvents":[]}],"src":"32:826:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[593],"Address":[2235],"IAccessControl":[314],"NotRoleHolder":[225],"NotTargetContractRoleHolder":[234],"RoleGranted":[271],"RoleRevoked":[280],"TargetIsNotAContract":[241]},"id":594,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":332,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":235,"src":"58:95:11","symbolAliases":[{"foreign":{"id":333,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"66:13:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":334,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"81:27:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":337,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":242,"src":"154:60:11","symbolAliases":[{"foreign":{"id":336,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"162:20:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","file":"./../events/AccessControlEvents.sol","id":340,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":281,"src":"215:77:11","symbolAliases":[{"foreign":{"id":338,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"223:11:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":339,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"236:11:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":315,"src":"293:66:11","symbolAliases":[{"foreign":{"id":341,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"301:14:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":344,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":594,"sourceUnit":2236,"src":"360:60:11","symbolAliases":[{"foreign":{"id":343,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"368:7:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":593,"linearizedBaseContracts":[593],"name":"AccessControlStorage","nameLocation":"430:20:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":347,"libraryName":{"id":345,"name":"Address","nameLocations":["463:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2235,"src":"463:7:11"},"nodeType":"UsingForDirective","src":"457:26:11","typeName":{"id":346,"name":"address","nodeType":"ElementaryTypeName","src":"475:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":351,"libraryName":{"id":348,"name":"AccessControlStorage","nameLocations":["494:20:11"],"nodeType":"IdentifierPath","referencedDeclaration":593,"src":"494:20:11"},"nodeType":"UsingForDirective","src":"488:59:11","typeName":{"id":350,"nodeType":"UserDefinedTypeName","pathNode":{"id":349,"name":"AccessControlStorage.Layout","nameLocations":["519:20:11","540:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"519:27:11"},"referencedDeclaration":358,"src":"519:27:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":358,"members":[{"constant":false,"id":357,"mutability":"mutable","name":"roles","nameLocation":"622:5:11","nodeType":"VariableDeclaration","scope":358,"src":"577:50:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":356,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":352,"name":"bytes32","nodeType":"ElementaryTypeName","src":"585:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"577:44:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":355,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"604:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"596:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":354,"name":"bool","nodeType":"ElementaryTypeName","src":"615:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"560:6:11","nodeType":"StructDefinition","scope":593,"src":"553:81:11","visibility":"public"},{"constant":true,"id":371,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"666:19:11","nodeType":"VariableDeclaration","scope":593,"src":"640:124:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":359,"name":"bytes32","nodeType":"ElementaryTypeName","src":"640:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"714:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":364,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"704:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"704:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":363,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"696:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":362,"name":"uint256","nodeType":"ElementaryTypeName","src":"696:7:11","typeDescriptions":{}}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"696:63:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"762:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"696:67:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":361,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"688:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"688:7:11","typeDescriptions":{}}},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"688:76:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":408,"nodeType":"Block","src":"1240:156:11","statements":[{"condition":{"id":389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1254:25:11","subExpression":{"arguments":[{"id":386,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1265:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":387,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1271:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":384,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1255:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":385,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1257:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":502,"src":"1255:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1255:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":407,"nodeType":"IfStatement","src":"1250:140:11","trueBody":{"id":406,"nodeType":"Block","src":"1281:109:11","statements":[{"expression":{"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":390,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":375,"src":"1295:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":394,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1297:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":357,"src":"1295:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":395,"indexExpression":{"id":392,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1303:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1295:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":396,"indexExpression":{"id":393,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1309:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1295:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1320:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1295:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":399,"nodeType":"ExpressionStatement","src":"1295:29:11"},{"eventCall":{"arguments":[{"id":401,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":377,"src":"1355:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":402,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":379,"src":"1361:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":403,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":381,"src":"1370:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":400,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":271,"src":"1343:11:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1343:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":405,"nodeType":"EmitStatement","src":"1338:41:11"}]}}]},"documentation":{"id":372,"nodeType":"StructuredDocumentation","src":"771:369:11","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":409,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1154:9:11","nodeType":"FunctionDefinition","parameters":{"id":382,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"1179:1:11","nodeType":"VariableDeclaration","scope":409,"src":"1164:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["1164:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"1164:6:11"},"referencedDeclaration":358,"src":"1164:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":377,"mutability":"mutable","name":"role","nameLocation":"1190:4:11","nodeType":"VariableDeclaration","scope":409,"src":"1182:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":376,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1182:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":379,"mutability":"mutable","name":"account","nameLocation":"1204:7:11","nodeType":"VariableDeclaration","scope":409,"src":"1196:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":378,"name":"address","nodeType":"ElementaryTypeName","src":"1196:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":381,"mutability":"mutable","name":"operator","nameLocation":"1221:8:11","nodeType":"VariableDeclaration","scope":409,"src":"1213:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":380,"name":"address","nodeType":"ElementaryTypeName","src":"1213:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1163:67:11"},"returnParameters":{"id":383,"nodeType":"ParameterList","parameters":[],"src":"1240:0:11"},"scope":593,"src":"1145:251:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":445,"nodeType":"Block","src":"1870:156:11","statements":[{"condition":{"arguments":[{"id":424,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"1894:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":425,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"1900:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":422,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1884:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":423,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1886:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":502,"src":"1884:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":426,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1884:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":444,"nodeType":"IfStatement","src":"1880:140:11","trueBody":{"id":443,"nodeType":"Block","src":"1910:110:11","statements":[{"expression":{"id":435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":427,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":413,"src":"1924:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1926:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":357,"src":"1924:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":432,"indexExpression":{"id":429,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"1932:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1924:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":433,"indexExpression":{"id":430,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"1938:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1924:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1949:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1924:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":436,"nodeType":"ExpressionStatement","src":"1924:30:11"},{"eventCall":{"arguments":[{"id":438,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":415,"src":"1985:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":439,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":417,"src":"1991:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":440,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"2000:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":437,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"1973:11:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1973:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":442,"nodeType":"EmitStatement","src":"1968:41:11"}]}}]},"documentation":{"id":410,"nodeType":"StructuredDocumentation","src":"1402:367:11","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":446,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1783:10:11","nodeType":"FunctionDefinition","parameters":{"id":420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":413,"mutability":"mutable","name":"s","nameLocation":"1809:1:11","nodeType":"VariableDeclaration","scope":446,"src":"1794:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":412,"nodeType":"UserDefinedTypeName","pathNode":{"id":411,"name":"Layout","nameLocations":["1794:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"1794:6:11"},"referencedDeclaration":358,"src":"1794:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":415,"mutability":"mutable","name":"role","nameLocation":"1820:4:11","nodeType":"VariableDeclaration","scope":446,"src":"1812:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":414,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1812:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"account","nameLocation":"1834:7:11","nodeType":"VariableDeclaration","scope":446,"src":"1826:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":416,"name":"address","nodeType":"ElementaryTypeName","src":"1826:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":419,"mutability":"mutable","name":"operator","nameLocation":"1851:8:11","nodeType":"VariableDeclaration","scope":446,"src":"1843:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":418,"name":"address","nodeType":"ElementaryTypeName","src":"1843:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1793:67:11"},"returnParameters":{"id":421,"nodeType":"ParameterList","parameters":[],"src":"1870:0:11"},"scope":593,"src":"1774:252:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":480,"nodeType":"Block","src":"2361:134:11","statements":[{"expression":{"arguments":[{"id":460,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"2388:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":461,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"2394:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":457,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"2371:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":459,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2373:14:11","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":556,"src":"2371:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2371:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":463,"nodeType":"ExpressionStatement","src":"2371:30:11"},{"expression":{"id":472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":464,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":450,"src":"2411:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":468,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2413:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":357,"src":"2411:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":469,"indexExpression":{"id":466,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"2419:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2411:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":470,"indexExpression":{"id":467,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"2425:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2411:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2435:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2411:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":473,"nodeType":"ExpressionStatement","src":"2411:29:11"},{"eventCall":{"arguments":[{"id":475,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":454,"src":"2467:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":476,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"2473:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":477,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":452,"src":"2481:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":474,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":280,"src":"2455:11:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2455:33:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":479,"nodeType":"EmitStatement","src":"2450:38:11"}]},"documentation":{"id":447,"nodeType":"StructuredDocumentation","src":"2032:245:11","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":481,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2291:12:11","nodeType":"FunctionDefinition","parameters":{"id":455,"nodeType":"ParameterList","parameters":[{"constant":false,"id":450,"mutability":"mutable","name":"s","nameLocation":"2319:1:11","nodeType":"VariableDeclaration","scope":481,"src":"2304:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":449,"nodeType":"UserDefinedTypeName","pathNode":{"id":448,"name":"Layout","nameLocations":["2304:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"2304:6:11"},"referencedDeclaration":358,"src":"2304:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":452,"mutability":"mutable","name":"sender","nameLocation":"2330:6:11","nodeType":"VariableDeclaration","scope":481,"src":"2322:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":451,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":454,"mutability":"mutable","name":"role","nameLocation":"2346:4:11","nodeType":"VariableDeclaration","scope":481,"src":"2338:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":453,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2338:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2303:48:11"},"returnParameters":{"id":456,"nodeType":"ParameterList","parameters":[],"src":"2361:0:11"},"scope":593,"src":"2282:213:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":501,"nodeType":"Block","src":"2783:46:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":494,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":485,"src":"2800:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":495,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2802:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":357,"src":"2800:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":497,"indexExpression":{"id":496,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":487,"src":"2808:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":499,"indexExpression":{"id":498,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"2814:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2800:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":493,"id":500,"nodeType":"Return","src":"2793:29:11"}]},"documentation":{"id":482,"nodeType":"StructuredDocumentation","src":"2501:173:11","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":502,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2688:7:11","nodeType":"FunctionDefinition","parameters":{"id":490,"nodeType":"ParameterList","parameters":[{"constant":false,"id":485,"mutability":"mutable","name":"s","nameLocation":"2711:1:11","nodeType":"VariableDeclaration","scope":502,"src":"2696:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":484,"nodeType":"UserDefinedTypeName","pathNode":{"id":483,"name":"Layout","nameLocations":["2696:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"2696:6:11"},"referencedDeclaration":358,"src":"2696:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":487,"mutability":"mutable","name":"role","nameLocation":"2722:4:11","nodeType":"VariableDeclaration","scope":502,"src":"2714:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":486,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2714:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":489,"mutability":"mutable","name":"account","nameLocation":"2736:7:11","nodeType":"VariableDeclaration","scope":502,"src":"2728:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":488,"name":"address","nodeType":"ElementaryTypeName","src":"2728:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2695:49:11"},"returnParameters":{"id":493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":492,"mutability":"mutable","name":"hasRole_","nameLocation":"2773:8:11","nodeType":"VariableDeclaration","scope":502,"src":"2768:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":491,"name":"bool","nodeType":"ElementaryTypeName","src":"2768:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2767:15:11"},"scope":593,"src":"2679:150:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":531,"nodeType":"Block","src":"3274:165:11","statements":[{"condition":{"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3288:29:11","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":514,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"3289:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3304:11:11","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":2234,"src":"3289:26:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3289:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":522,"nodeType":"IfStatement","src":"3284:78:11","trueBody":{"errorCall":{"arguments":[{"id":519,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"3347:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":518,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"3326:20:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3326:36:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":521,"nodeType":"RevertStatement","src":"3319:43:11"}},{"expression":{"arguments":[{"id":527,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":507,"src":"3418:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":528,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":509,"src":"3424:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":524,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":505,"src":"3394:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":523,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":314,"src":"3379:14:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$314_$","typeString":"type(contract IAccessControl)"}},"id":525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$314","typeString":"contract IAccessControl"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3410:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":313,"src":"3379:38:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3379:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":513,"id":530,"nodeType":"Return","src":"3372:60:11"}]},"documentation":{"id":503,"nodeType":"StructuredDocumentation","src":"2835:296:11","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":532,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3145:21:11","nodeType":"FunctionDefinition","parameters":{"id":510,"nodeType":"ParameterList","parameters":[{"constant":false,"id":505,"mutability":"mutable","name":"targetContract","nameLocation":"3175:14:11","nodeType":"VariableDeclaration","scope":532,"src":"3167:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":504,"name":"address","nodeType":"ElementaryTypeName","src":"3167:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":507,"mutability":"mutable","name":"role","nameLocation":"3199:4:11","nodeType":"VariableDeclaration","scope":532,"src":"3191:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":506,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3191:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":509,"mutability":"mutable","name":"account","nameLocation":"3213:7:11","nodeType":"VariableDeclaration","scope":532,"src":"3205:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":508,"name":"address","nodeType":"ElementaryTypeName","src":"3205:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3166:55:11"},"returnParameters":{"id":513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":512,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3250:22:11","nodeType":"VariableDeclaration","scope":532,"src":"3245:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":511,"name":"bool","nodeType":"ElementaryTypeName","src":"3245:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3244:29:11"},"scope":593,"src":"3136:303:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":555,"nodeType":"Block","src":"3727:83:11","statements":[{"condition":{"id":548,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3741:25:11","subExpression":{"arguments":[{"id":545,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"3752:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":546,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"3758:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":543,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":536,"src":"3742:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3744:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":502,"src":"3742:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":547,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3742:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":554,"nodeType":"IfStatement","src":"3737:66:11","trueBody":{"errorCall":{"arguments":[{"id":550,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":538,"src":"3789:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":551,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":540,"src":"3795:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":549,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":225,"src":"3775:13:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$_t_error_$","typeString":"function (bytes32,address) pure returns (error)"}},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3775:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":553,"nodeType":"RevertStatement","src":"3768:35:11"}}]},"documentation":{"id":533,"nodeType":"StructuredDocumentation","src":"3445:190:11","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":556,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3649:14:11","nodeType":"FunctionDefinition","parameters":{"id":541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":536,"mutability":"mutable","name":"s","nameLocation":"3679:1:11","nodeType":"VariableDeclaration","scope":556,"src":"3664:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":535,"nodeType":"UserDefinedTypeName","pathNode":{"id":534,"name":"Layout","nameLocations":["3664:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"3664:6:11"},"referencedDeclaration":358,"src":"3664:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":538,"mutability":"mutable","name":"role","nameLocation":"3690:4:11","nodeType":"VariableDeclaration","scope":556,"src":"3682:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":537,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3682:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":540,"mutability":"mutable","name":"account","nameLocation":"3704:7:11","nodeType":"VariableDeclaration","scope":556,"src":"3696:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":539,"name":"address","nodeType":"ElementaryTypeName","src":"3696:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3663:49:11"},"returnParameters":{"id":542,"nodeType":"ParameterList","parameters":[],"src":"3727:0:11"},"scope":593,"src":"3640:170:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":579,"nodeType":"Block","src":"4229:141:11","statements":[{"condition":{"id":571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4243:53:11","subExpression":{"arguments":[{"id":567,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"4266:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":568,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"4282:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":569,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4288:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":566,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"4244:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4244:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":578,"nodeType":"IfStatement","src":"4239:124:11","trueBody":{"errorCall":{"arguments":[{"id":573,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"4333:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":574,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":561,"src":"4349:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":575,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":563,"src":"4355:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":572,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":234,"src":"4305:27:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_error_$","typeString":"function (address,bytes32,address) pure returns (error)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4305:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":577,"nodeType":"RevertStatement","src":"4298:65:11"}}]},"documentation":{"id":557,"nodeType":"StructuredDocumentation","src":"3816:301:11","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":580,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4131:28:11","nodeType":"FunctionDefinition","parameters":{"id":564,"nodeType":"ParameterList","parameters":[{"constant":false,"id":559,"mutability":"mutable","name":"targetContract","nameLocation":"4168:14:11","nodeType":"VariableDeclaration","scope":580,"src":"4160:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":558,"name":"address","nodeType":"ElementaryTypeName","src":"4160:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":561,"mutability":"mutable","name":"role","nameLocation":"4192:4:11","nodeType":"VariableDeclaration","scope":580,"src":"4184:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":560,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4184:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":563,"mutability":"mutable","name":"account","nameLocation":"4206:7:11","nodeType":"VariableDeclaration","scope":580,"src":"4198:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":562,"name":"address","nodeType":"ElementaryTypeName","src":"4198:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4159:55:11"},"returnParameters":{"id":565,"nodeType":"ParameterList","parameters":[],"src":"4229:0:11"},"scope":593,"src":"4122:248:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":591,"nodeType":"Block","src":"4435:115:11","statements":[{"assignments":[587],"declarations":[{"constant":false,"id":587,"mutability":"mutable","name":"position","nameLocation":"4453:8:11","nodeType":"VariableDeclaration","scope":591,"src":"4445:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":586,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4445:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":589,"initialValue":{"id":588,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":371,"src":"4464:19:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4445:38:11"},{"AST":{"nativeSrc":"4502:42:11","nodeType":"YulBlock","src":"4502:42:11","statements":[{"nativeSrc":"4516:18:11","nodeType":"YulAssignment","src":"4516:18:11","value":{"name":"position","nativeSrc":"4526:8:11","nodeType":"YulIdentifier","src":"4526:8:11"},"variableNames":[{"name":"s.slot","nativeSrc":"4516:6:11","nodeType":"YulIdentifier","src":"4516:6:11"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":587,"isOffset":false,"isSlot":false,"src":"4526:8:11","valueSize":1},{"declaration":584,"isOffset":false,"isSlot":true,"src":"4516:6:11","suffix":"slot","valueSize":1}],"id":590,"nodeType":"InlineAssembly","src":"4493:51:11"}]},"id":592,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4385:6:11","nodeType":"FunctionDefinition","parameters":{"id":581,"nodeType":"ParameterList","parameters":[],"src":"4391:2:11"},"returnParameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"mutability":"mutable","name":"s","nameLocation":"4432:1:11","nodeType":"VariableDeclaration","scope":592,"src":"4417:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":583,"nodeType":"UserDefinedTypeName","pathNode":{"id":582,"name":"Layout","nameLocations":["4417:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"4417:6:11"},"referencedDeclaration":358,"src":"4417:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4416:18:11"},"scope":593,"src":"4376:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":594,"src":"422:4130:11","usedErrors":[],"usedEvents":[]}],"src":"32:4521:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[2235],"ContractOwnershipStorage":[851],"IERC173":[330],"InterfaceDetectionStorage":[999],"NotContractOwner":[248],"NotTargetContractOwner":[260],"OwnershipTransferred":[289],"ProxyInitialization":[1289],"TargetIsNotAContract":[241]},"id":852,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":595,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":598,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":261,"src":"58:97:12","symbolAliases":[{"foreign":{"id":596,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"66:16:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":597,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"84:22:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":600,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":242,"src":"156:60:12","symbolAliases":[{"foreign":{"id":599,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"164:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":602,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":295,"src":"217:66:12","symbolAliases":[{"foreign":{"id":601,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"225:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":604,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":331,"src":"284:52:12","symbolAliases":[{"foreign":{"id":603,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"292:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","file":"./../../utils/libraries/Address.sol","id":606,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":2236,"src":"337:60:12","symbolAliases":[{"foreign":{"id":605,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"345:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":608,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":1290,"src":"398:84:12","symbolAliases":[{"foreign":{"id":607,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"406:19:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":610,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":852,"sourceUnit":1000,"src":"483:104:12","symbolAliases":[{"foreign":{"id":609,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"491:25:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":851,"linearizedBaseContracts":[851],"name":"ContractOwnershipStorage","nameLocation":"597:24:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":613,"libraryName":{"id":611,"name":"Address","nameLocations":["634:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":2235,"src":"634:7:12"},"nodeType":"UsingForDirective","src":"628:26:12","typeName":{"id":612,"name":"address","nodeType":"ElementaryTypeName","src":"646:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":617,"libraryName":{"id":614,"name":"ContractOwnershipStorage","nameLocations":["665:24:12"],"nodeType":"IdentifierPath","referencedDeclaration":851,"src":"665:24:12"},"nodeType":"UsingForDirective","src":"659:67:12","typeName":{"id":616,"nodeType":"UserDefinedTypeName","pathNode":{"id":615,"name":"ContractOwnershipStorage.Layout","nameLocations":["694:24:12","719:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"694:31:12"},"referencedDeclaration":624,"src":"694:31:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":621,"libraryName":{"id":618,"name":"InterfaceDetectionStorage","nameLocations":["737:25:12"],"nodeType":"IdentifierPath","referencedDeclaration":999,"src":"737:25:12"},"nodeType":"UsingForDirective","src":"731:69:12","typeName":{"id":620,"nodeType":"UserDefinedTypeName","pathNode":{"id":619,"name":"InterfaceDetectionStorage.Layout","nameLocations":["767:25:12","793:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"767:32:12"},"referencedDeclaration":909,"src":"767:32:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":624,"members":[{"constant":false,"id":623,"mutability":"mutable","name":"contractOwner","nameLocation":"838:13:12","nodeType":"VariableDeclaration","scope":624,"src":"830:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":622,"name":"address","nodeType":"ElementaryTypeName","src":"830:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"813:6:12","nodeType":"StructDefinition","scope":851,"src":"806:52:12","visibility":"public"},{"constant":true,"id":637,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"890:19:12","nodeType":"VariableDeclaration","scope":851,"src":"864:128:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"864:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"938:47:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":630,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"928:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"928:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"920:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":628,"name":"uint256","nodeType":"ElementaryTypeName","src":"920:7:12","typeDescriptions":{}}},"id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"920:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"990:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"920:71:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"912:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:12","typeDescriptions":{}}},"id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"912:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":650,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1024:21:12","nodeType":"VariableDeclaration","scope":851,"src":"998:128:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":638,"name":"bytes32","nodeType":"ElementaryTypeName","src":"998:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":648,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1074:45:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":643,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1064:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1064:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1056:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":641,"name":"uint256","nodeType":"ElementaryTypeName","src":"1056:7:12","typeDescriptions":{}}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1056:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1124:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1056:69:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":640,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1048:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1048:7:12","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1048:78:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":693,"nodeType":"Block","src":"1635:267:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":659,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"1649:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1673:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1665:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"1665:7:12","typeDescriptions":{}}},"id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1665:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1649:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":680,"nodeType":"IfStatement","src":"1645:152:12","trueBody":{"id":679,"nodeType":"Block","src":"1677:120:12","statements":[{"expression":{"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":665,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":654,"src":"1691:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":667,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1693:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":623,"src":"1691:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":668,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"1709:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1691:30:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":670,"nodeType":"ExpressionStatement","src":"1691:30:12"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1769:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1761:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":672,"name":"address","nodeType":"ElementaryTypeName","src":"1761:7:12","typeDescriptions":{}}},"id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1761:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":676,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":656,"src":"1773:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":671,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"1740:20:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1740:46:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":678,"nodeType":"EmitStatement","src":"1735:51:12"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":687,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"1868:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$330_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$330_$","typeString":"type(contract IERC173)"}],"id":686,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1863:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":688,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1863:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$330","typeString":"type(contract IERC173)"}},"id":689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1877:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1863:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1890:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":681,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"1806:25:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$999_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1832:6:12","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":998,"src":"1806:32:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":685,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1841:21:12","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":952,"src":"1806:56:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$909_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":691,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1806:89:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":692,"nodeType":"ExpressionStatement","src":"1806:89:12"}]},"documentation":{"id":651,"nodeType":"StructuredDocumentation","src":"1133:423:12","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":694,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1570:15:12","nodeType":"FunctionDefinition","parameters":{"id":657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":654,"mutability":"mutable","name":"s","nameLocation":"1601:1:12","nodeType":"VariableDeclaration","scope":694,"src":"1586:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":653,"nodeType":"UserDefinedTypeName","pathNode":{"id":652,"name":"Layout","nameLocations":["1586:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"1586:6:12"},"referencedDeclaration":624,"src":"1586:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":656,"mutability":"mutable","name":"initialOwner","nameLocation":"1612:12:12","nodeType":"VariableDeclaration","scope":694,"src":"1604:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":655,"name":"address","nodeType":"ElementaryTypeName","src":"1604:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1585:40:12"},"returnParameters":{"id":658,"nodeType":"ParameterList","parameters":[],"src":"1635:0:12"},"scope":851,"src":"1561:341:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":716,"nodeType":"Block","src":"2567:112:12","statements":[{"expression":{"arguments":[{"id":706,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":650,"src":"2606:21:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2629:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":703,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"2577:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1289_$","typeString":"type(library ProxyInitialization)"}},"id":705,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2597:8:12","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1288,"src":"2577:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":709,"nodeType":"ExpressionStatement","src":"2577:54:12"},{"expression":{"arguments":[{"id":713,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":700,"src":"2659:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":710,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"2641:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2643:15:12","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":694,"src":"2641:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$624_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$624_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2641:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":715,"nodeType":"ExpressionStatement","src":"2641:31:12"}]},"documentation":{"id":695,"nodeType":"StructuredDocumentation","src":"1908:586:12","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":717,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2508:9:12","nodeType":"FunctionDefinition","parameters":{"id":701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":698,"mutability":"mutable","name":"s","nameLocation":"2533:1:12","nodeType":"VariableDeclaration","scope":717,"src":"2518:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":697,"nodeType":"UserDefinedTypeName","pathNode":{"id":696,"name":"Layout","nameLocations":["2518:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"2518:6:12"},"referencedDeclaration":624,"src":"2518:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":700,"mutability":"mutable","name":"initialOwner","nameLocation":"2544:12:12","nodeType":"VariableDeclaration","scope":717,"src":"2536:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":699,"name":"address","nodeType":"ElementaryTypeName","src":"2536:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2517:40:12"},"returnParameters":{"id":702,"nodeType":"ParameterList","parameters":[],"src":"2567:0:12"},"scope":851,"src":"2499:180:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":757,"nodeType":"Block","src":"3142:281:12","statements":[{"assignments":[729],"declarations":[{"constant":false,"id":729,"mutability":"mutable","name":"previousOwner","nameLocation":"3160:13:12","nodeType":"VariableDeclaration","scope":757,"src":"3152:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"3152:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":732,"initialValue":{"expression":{"id":730,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3176:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":731,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3178:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":623,"src":"3176:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3152:39:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":733,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"3205:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":734,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"3215:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3205:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":740,"nodeType":"IfStatement","src":"3201:60:12","trueBody":{"errorCall":{"arguments":[{"id":737,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":723,"src":"3254:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":736,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"3237:16:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3237:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":739,"nodeType":"RevertStatement","src":"3230:31:12"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":741,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"3275:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":742,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"3292:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3275:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":756,"nodeType":"IfStatement","src":"3271:146:12","trueBody":{"id":755,"nodeType":"Block","src":"3302:115:12","statements":[{"expression":{"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":744,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":721,"src":"3316:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":746,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3318:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":623,"src":"3316:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":747,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"3334:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3316:26:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":749,"nodeType":"ExpressionStatement","src":"3316:26:12"},{"eventCall":{"arguments":[{"id":751,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":729,"src":"3382:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":752,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":725,"src":"3397:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":750,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3361:20:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":753,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3361:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":754,"nodeType":"EmitStatement","src":"3356:50:12"}]}}]},"documentation":{"id":718,"nodeType":"StructuredDocumentation","src":"2685:364:12","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":758,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3063:17:12","nodeType":"FunctionDefinition","parameters":{"id":726,"nodeType":"ParameterList","parameters":[{"constant":false,"id":721,"mutability":"mutable","name":"s","nameLocation":"3096:1:12","nodeType":"VariableDeclaration","scope":758,"src":"3081:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":720,"nodeType":"UserDefinedTypeName","pathNode":{"id":719,"name":"Layout","nameLocations":["3081:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"3081:6:12"},"referencedDeclaration":624,"src":"3081:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":723,"mutability":"mutable","name":"sender","nameLocation":"3107:6:12","nodeType":"VariableDeclaration","scope":758,"src":"3099:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":722,"name":"address","nodeType":"ElementaryTypeName","src":"3099:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":725,"mutability":"mutable","name":"newOwner","nameLocation":"3123:8:12","nodeType":"VariableDeclaration","scope":758,"src":"3115:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":724,"name":"address","nodeType":"ElementaryTypeName","src":"3115:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3080:52:12"},"returnParameters":{"id":727,"nodeType":"ParameterList","parameters":[],"src":"3142:0:12"},"scope":851,"src":"3054:369:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":770,"nodeType":"Block","src":"3629:39:12","statements":[{"expression":{"expression":{"id":767,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"3646:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":768,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3648:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":623,"src":"3646:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":766,"id":769,"nodeType":"Return","src":"3639:22:12"}]},"documentation":{"id":759,"nodeType":"StructuredDocumentation","src":"3429:116:12","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":771,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3559:5:12","nodeType":"FunctionDefinition","parameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"s","nameLocation":"3580:1:12","nodeType":"VariableDeclaration","scope":771,"src":"3565:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":761,"nodeType":"UserDefinedTypeName","pathNode":{"id":760,"name":"Layout","nameLocations":["3565:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"3565:6:12"},"referencedDeclaration":624,"src":"3565:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3564:18:12"},"returnParameters":{"id":766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":765,"mutability":"mutable","name":"contractOwner","nameLocation":"3614:13:12","nodeType":"VariableDeclaration","scope":771,"src":"3606:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":764,"name":"address","nodeType":"ElementaryTypeName","src":"3606:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3605:23:12"},"scope":851,"src":"3550:118:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":798,"nodeType":"Block","src":"4064:154:12","statements":[{"condition":{"id":784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4078:29:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":781,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"4079:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4094:11:12","memberName":"hasBytecode","nodeType":"MemberAccess","referencedDeclaration":2234,"src":"4079:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4079:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":789,"nodeType":"IfStatement","src":"4074:78:12","trueBody":{"errorCall":{"arguments":[{"id":786,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"4137:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":785,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"4116:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":787,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4116:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":788,"nodeType":"RevertStatement","src":"4109:43:12"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":791,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"4177:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":790,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":330,"src":"4169:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$330_$","typeString":"type(contract IERC173)"}},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$330","typeString":"contract IERC173"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4193:5:12","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":329,"src":"4169:29:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4169:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":795,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":776,"src":"4204:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4169:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":780,"id":797,"nodeType":"Return","src":"4162:49:12"}]},"documentation":{"id":772,"nodeType":"StructuredDocumentation","src":"3674:261:12","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":799,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3949:21:12","nodeType":"FunctionDefinition","parameters":{"id":777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"targetContract","nameLocation":"3979:14:12","nodeType":"VariableDeclaration","scope":799,"src":"3971:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":773,"name":"address","nodeType":"ElementaryTypeName","src":"3971:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":776,"mutability":"mutable","name":"account","nameLocation":"4003:7:12","nodeType":"VariableDeclaration","scope":799,"src":"3995:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":775,"name":"address","nodeType":"ElementaryTypeName","src":"3995:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3970:41:12"},"returnParameters":{"id":780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":779,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4040:22:12","nodeType":"VariableDeclaration","scope":799,"src":"4035:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":778,"name":"bool","nodeType":"ElementaryTypeName","src":"4035:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4034:29:12"},"scope":851,"src":"3940:278:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":817,"nodeType":"Block","src":"4489:81:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":808,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"4503:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":809,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":803,"src":"4514:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":810,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4516:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":623,"src":"4514:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4503:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":816,"nodeType":"IfStatement","src":"4499:64:12","trueBody":{"errorCall":{"arguments":[{"id":813,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":805,"src":"4555:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":812,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"4538:16:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":814,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4538:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":815,"nodeType":"RevertStatement","src":"4531:32:12"}}]},"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"4224:179:12","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":818,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4417:22:12","nodeType":"FunctionDefinition","parameters":{"id":806,"nodeType":"ParameterList","parameters":[{"constant":false,"id":803,"mutability":"mutable","name":"s","nameLocation":"4455:1:12","nodeType":"VariableDeclaration","scope":818,"src":"4440:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":802,"nodeType":"UserDefinedTypeName","pathNode":{"id":801,"name":"Layout","nameLocations":["4440:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"4440:6:12"},"referencedDeclaration":624,"src":"4440:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":805,"mutability":"mutable","name":"account","nameLocation":"4466:7:12","nodeType":"VariableDeclaration","scope":818,"src":"4458:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":804,"name":"address","nodeType":"ElementaryTypeName","src":"4458:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4439:35:12"},"returnParameters":{"id":807,"nodeType":"ParameterList","parameters":[],"src":"4489:0:12"},"scope":851,"src":"4408:162:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":837,"nodeType":"Block","src":"4930:124:12","statements":[{"condition":{"id":830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4944:47:12","subExpression":{"arguments":[{"id":827,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"4967:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":828,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"4983:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":826,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":799,"src":"4945:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":829,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4945:46:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":836,"nodeType":"IfStatement","src":"4940:107:12","trueBody":{"errorCall":{"arguments":[{"id":832,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":821,"src":"5023:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":833,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"5039:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":831,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":260,"src":"5000:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$","typeString":"function (address,address) pure returns (error)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5000:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":835,"nodeType":"RevertStatement","src":"4993:54:12"}}]},"documentation":{"id":819,"nodeType":"StructuredDocumentation","src":"4576:256:12","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":838,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4846:28:12","nodeType":"FunctionDefinition","parameters":{"id":824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":821,"mutability":"mutable","name":"targetContract","nameLocation":"4883:14:12","nodeType":"VariableDeclaration","scope":838,"src":"4875:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":820,"name":"address","nodeType":"ElementaryTypeName","src":"4875:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":823,"mutability":"mutable","name":"account","nameLocation":"4907:7:12","nodeType":"VariableDeclaration","scope":838,"src":"4899:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":822,"name":"address","nodeType":"ElementaryTypeName","src":"4899:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4874:41:12"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[],"src":"4930:0:12"},"scope":851,"src":"4837:217:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":849,"nodeType":"Block","src":"5119:115:12","statements":[{"assignments":[845],"declarations":[{"constant":false,"id":845,"mutability":"mutable","name":"position","nameLocation":"5137:8:12","nodeType":"VariableDeclaration","scope":849,"src":"5129:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":844,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5129:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":847,"initialValue":{"id":846,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":637,"src":"5148:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5129:38:12"},{"AST":{"nativeSrc":"5186:42:12","nodeType":"YulBlock","src":"5186:42:12","statements":[{"nativeSrc":"5200:18:12","nodeType":"YulAssignment","src":"5200:18:12","value":{"name":"position","nativeSrc":"5210:8:12","nodeType":"YulIdentifier","src":"5210:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"5200:6:12","nodeType":"YulIdentifier","src":"5200:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":845,"isOffset":false,"isSlot":false,"src":"5210:8:12","valueSize":1},{"declaration":842,"isOffset":false,"isSlot":true,"src":"5200:6:12","suffix":"slot","valueSize":1}],"id":848,"nodeType":"InlineAssembly","src":"5177:51:12"}]},"id":850,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5069:6:12","nodeType":"FunctionDefinition","parameters":{"id":839,"nodeType":"ParameterList","parameters":[],"src":"5075:2:12"},"returnParameters":{"id":843,"nodeType":"ParameterList","parameters":[{"constant":false,"id":842,"mutability":"mutable","name":"s","nameLocation":"5116:1:12","nodeType":"VariableDeclaration","scope":850,"src":"5101:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":841,"nodeType":"UserDefinedTypeName","pathNode":{"id":840,"name":"Layout","nameLocations":["5101:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":624,"src":"5101:6:12"},"referencedDeclaration":624,"src":"5101:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$624_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5100:18:12"},"scope":851,"src":"5060:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":852,"src":"589:4647:12","usedErrors":[],"usedEvents":[]}],"src":"32:5205:12"},"id":12},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[898],"InterfaceDetection":[881],"InterfaceDetectionStorage":[999]},"id":882,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":853,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":855,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":882,"sourceUnit":899,"src":"58:49:13","symbolAliases":[{"foreign":{"id":854,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"66:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":857,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":882,"sourceUnit":1000,"src":"108:84:13","symbolAliases":[{"foreign":{"id":856,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"116:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":859,"name":"IERC165","nameLocations":["425:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":898,"src":"425:7:13"},"id":860,"nodeType":"InheritanceSpecifier","src":"425:7:13"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":858,"nodeType":"StructuredDocumentation","src":"194:191:13","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":881,"linearizedBaseContracts":[881,898],"name":"InterfaceDetection","nameLocation":"403:18:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":864,"libraryName":{"id":861,"name":"InterfaceDetectionStorage","nameLocations":["445:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":999,"src":"445:25:13"},"nodeType":"UsingForDirective","src":"439:69:13","typeName":{"id":863,"nodeType":"UserDefinedTypeName","pathNode":{"id":862,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:13","501:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"475:32:13"},"referencedDeclaration":909,"src":"475:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[897],"body":{"id":879,"nodeType":"Block","src":"618:89:13","statements":[{"expression":{"arguments":[{"id":876,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":867,"src":"688:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":872,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"635:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$999_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":998,"src":"635:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":875,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:13","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":986,"src":"635:52:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$909_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":877,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":871,"id":878,"nodeType":"Return","src":"628:72:13"}]},"documentation":{"id":865,"nodeType":"StructuredDocumentation","src":"514:23:13","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":880,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:13","nodeType":"FunctionDefinition","parameters":{"id":868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":867,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:13","nodeType":"VariableDeclaration","scope":880,"src":"569:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":866,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:13"},"returnParameters":{"id":871,"nodeType":"ParameterList","parameters":[{"constant":false,"id":870,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":880,"src":"612:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":869,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:13"},"scope":881,"src":"542:165:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":882,"src":"385:324:13","usedErrors":[],"usedEvents":[]}],"src":"32:678:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[886]},"id":887,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":883,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:14"},{"documentation":{"id":884,"nodeType":"StructuredDocumentation","src":"58:68:14","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":886,"name":"IllegalInterfaceId","nameLocation":"132:18:14","nodeType":"ErrorDefinition","parameters":{"id":885,"nodeType":"ParameterList","parameters":[],"src":"150:2:14"},"src":"126:27:14"}],"src":"32:122:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[898]},"id":899,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":888,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":889,"nodeType":"StructuredDocumentation","src":"58:173:15","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":898,"linearizedBaseContracts":[898],"name":"IERC165","nameLocation":"241:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"255:340:15","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":897,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:15","nodeType":"FunctionDefinition","parameters":{"id":893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":892,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:15","nodeType":"VariableDeclaration","scope":897,"src":"627:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":891,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:15"},"returnParameters":{"id":896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":895,"mutability":"mutable","name":"supported","nameLocation":"675:9:15","nodeType":"VariableDeclaration","scope":897,"src":"670:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":894,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:15"},"scope":898,"src":"600:86:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":899,"src":"231:457:15","usedErrors":[],"usedEvents":[]}],"src":"32:657:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[898],"IllegalInterfaceId":[886],"InterfaceDetectionStorage":[999]},"id":1000,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":900,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":902,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1000,"sourceUnit":887,"src":"58:76:16","symbolAliases":[{"foreign":{"id":901,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"66:18:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":904,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1000,"sourceUnit":899,"src":"135:52:16","symbolAliases":[{"foreign":{"id":903,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"143:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":999,"linearizedBaseContracts":[999],"name":"InterfaceDetectionStorage","nameLocation":"197:25:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":909,"members":[{"constant":false,"id":908,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:16","nodeType":"VariableDeclaration","scope":909,"src":"253:43:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":907,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":905,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":906,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:16","nodeType":"StructDefinition","scope":999,"src":"229:74:16","visibility":"public"},{"constant":true,"id":922,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:16","nodeType":"VariableDeclaration","scope":999,"src":"309:136:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":910,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":920,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":915,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":914,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":913,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:16","typeDescriptions":{}}},"id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":912,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:16","typeDescriptions":{}}},"id":921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":925,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:16","nodeType":"VariableDeclaration","scope":999,"src":"452:58:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":923,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":951,"nodeType":"Block","src":"867:141:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":936,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"881:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":937,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"896:20:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":942,"nodeType":"IfStatement","src":"877:68:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":939,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":886,"src":"925:18:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":940,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":941,"nodeType":"RevertStatement","src":"918:27:16"}},{"expression":{"id":949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":943,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":929,"src":"955:1:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":946,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:16","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":908,"src":"955:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":947,"indexExpression":{"id":945,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":931,"src":"977:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":948,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":933,"src":"992:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":950,"nodeType":"ExpressionStatement","src":"955:46:16"}]},"documentation":{"id":926,"nodeType":"StructuredDocumentation","src":"517:251:16","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":952,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:16","nodeType":"FunctionDefinition","parameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":929,"mutability":"mutable","name":"s","nameLocation":"819:1:16","nodeType":"VariableDeclaration","scope":952,"src":"804:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":928,"nodeType":"UserDefinedTypeName","pathNode":{"id":927,"name":"Layout","nameLocations":["804:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"804:6:16"},"referencedDeclaration":909,"src":"804:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":931,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:16","nodeType":"VariableDeclaration","scope":952,"src":"822:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":930,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":933,"mutability":"mutable","name":"supported","nameLocation":"847:9:16","nodeType":"VariableDeclaration","scope":952,"src":"842:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":932,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:16"},"returnParameters":{"id":935,"nodeType":"ParameterList","parameters":[],"src":"867:0:16"},"scope":999,"src":"773:235:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":985,"nodeType":"Block","src":"1463:236:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":963,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"1477:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":964,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":925,"src":"1492:20:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":969,"nodeType":"IfStatement","src":"1473:78:16","trueBody":{"id":968,"nodeType":"Block","src":"1514:37:16","statements":[{"expression":{"hexValue":"66616c7365","id":966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":962,"id":967,"nodeType":"Return","src":"1528:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":970,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"1564:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":972,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":898,"src":"1584:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$898_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$898_$","typeString":"type(contract IERC165)"}],"id":971,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$898","typeString":"type(contract IERC165)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":979,"nodeType":"IfStatement","src":"1560:82:16","trueBody":{"id":978,"nodeType":"Block","src":"1606:36:16","statements":[{"expression":{"hexValue":"74727565","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":962,"id":977,"nodeType":"Return","src":"1620:11:16"}]}},{"expression":{"baseExpression":{"expression":{"id":980,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"1658:1:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":981,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:16","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":908,"src":"1658:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":983,"indexExpression":{"id":982,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":958,"src":"1680:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":962,"id":984,"nodeType":"Return","src":"1651:41:16"}]},"documentation":{"id":953,"nodeType":"StructuredDocumentation","src":"1014:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":986,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:16","nodeType":"FunctionDefinition","parameters":{"id":959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"s","nameLocation":"1401:1:16","nodeType":"VariableDeclaration","scope":986,"src":"1386:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":955,"nodeType":"UserDefinedTypeName","pathNode":{"id":954,"name":"Layout","nameLocations":["1386:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1386:6:16"},"referencedDeclaration":909,"src":"1386:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":958,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:16","nodeType":"VariableDeclaration","scope":986,"src":"1404:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":957,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:16"},"returnParameters":{"id":962,"nodeType":"ParameterList","parameters":[{"constant":false,"id":961,"mutability":"mutable","name":"supported","nameLocation":"1452:9:16","nodeType":"VariableDeclaration","scope":986,"src":"1447:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":960,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:16"},"scope":999,"src":"1359:340:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":997,"nodeType":"Block","src":"1764:115:16","statements":[{"assignments":[993],"declarations":[{"constant":false,"id":993,"mutability":"mutable","name":"position","nameLocation":"1782:8:16","nodeType":"VariableDeclaration","scope":997,"src":"1774:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":995,"initialValue":{"id":994,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"1793:19:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:16"},{"AST":{"nativeSrc":"1831:42:16","nodeType":"YulBlock","src":"1831:42:16","statements":[{"nativeSrc":"1845:18:16","nodeType":"YulAssignment","src":"1845:18:16","value":{"name":"position","nativeSrc":"1855:8:16","nodeType":"YulIdentifier","src":"1855:8:16"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:16","nodeType":"YulIdentifier","src":"1845:6:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":993,"isOffset":false,"isSlot":false,"src":"1855:8:16","valueSize":1},{"declaration":990,"isOffset":false,"isSlot":true,"src":"1845:6:16","suffix":"slot","valueSize":1}],"id":996,"nodeType":"InlineAssembly","src":"1822:51:16"}]},"id":998,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:16","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[],"src":"1720:2:16"},"returnParameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"s","nameLocation":"1761:1:16","nodeType":"VariableDeclaration","scope":998,"src":"1746:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":989,"nodeType":"UserDefinedTypeName","pathNode":{"id":988,"name":"Layout","nameLocations":["1746:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"1746:6:16"},"referencedDeclaration":909,"src":"1746:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:16"},"scope":999,"src":"1705:174:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1000,"src":"189:1692:16","usedErrors":[],"usedEvents":[]}],"src":"32:1850:16"},"id":16},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[1048],"ForwarderRegistryContextBase":[1176],"IERC2771":[1188],"IForwarderRegistry":[1204]},"id":1049,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1001,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":1003,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1049,"sourceUnit":1205,"src":"58:71:17","symbolAliases":[{"foreign":{"id":1002,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":1005,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1049,"sourceUnit":1189,"src":"130:51:17","symbolAliases":[{"foreign":{"id":1004,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"138:8:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":1007,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1049,"sourceUnit":1177,"src":"182:85:17","symbolAliases":[{"foreign":{"id":1006,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"190:28:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1009,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"575:28:17"},"id":1010,"nodeType":"InheritanceSpecifier","src":"575:28:17"},{"baseName":{"id":1011,"name":"IERC2771","nameLocations":["605:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1188,"src":"605:8:17"},"id":1012,"nodeType":"InheritanceSpecifier","src":"605:8:17"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":1008,"nodeType":"StructuredDocumentation","src":"269:260:17","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1048,"linearizedBaseContracts":[1048,1188,1176],"name":"ForwarderRegistryContext","nameLocation":"547:24:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1021,"nodeType":"Block","src":"720:2:17","statements":[]},"id":1022,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1018,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1015,"src":"700:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"id":1019,"kind":"baseConstructorSpecifier","modifierName":{"id":1017,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"671:28:17"},"nodeType":"ModifierInvocation","src":"671:48:17"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1015,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:17","nodeType":"VariableDeclaration","scope":1022,"src":"632:37:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1014,"nodeType":"UserDefinedTypeName","pathNode":{"id":1013,"name":"IForwarderRegistry","nameLocations":["632:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"632:18:17"},"referencedDeclaration":1204,"src":"632:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:17"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[],"src":"720:0:17"},"scope":1048,"src":"620:102:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1030,"nodeType":"Block","src":"800:43:17","statements":[{"expression":{"id":1028,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"817:19:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":1027,"id":1029,"nodeType":"Return","src":"810:26:17"}]},"functionSelector":"2b4c9f16","id":1031,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:17","nodeType":"FunctionDefinition","parameters":{"id":1023,"nodeType":"ParameterList","parameters":[],"src":"754:2:17"},"returnParameters":{"id":1027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1026,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1031,"src":"780:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1025,"nodeType":"UserDefinedTypeName","pathNode":{"id":1024,"name":"IForwarderRegistry","nameLocations":["780:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"780:18:17"},"referencedDeclaration":1204,"src":"780:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:17"},"scope":1048,"src":"728:115:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1187],"body":{"id":1046,"nodeType":"Block","src":"962:65:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1034,"src":"979:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1042,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"1000:19:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}],"id":1041,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1040,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:17","typeDescriptions":{}}},"id":1043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1038,"id":1045,"nodeType":"Return","src":"972:48:17"}]},"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"849:24:17","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":1047,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:17","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:17","nodeType":"VariableDeclaration","scope":1047,"src":"906:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:17"},"returnParameters":{"id":1038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1047,"src":"956:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1036,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:17"},"scope":1048,"src":"878:149:17","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1049,"src":"529:500:17","usedErrors":[],"usedEvents":[]}],"src":"32:998:17"},"id":17},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[1233],"ForwarderRegistryContextBase":[1176],"IForwarderRegistry":[1204]},"id":1177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1050,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":1052,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1177,"sourceUnit":1205,"src":"58:74:18","symbolAliases":[{"foreign":{"id":1051,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"66:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":1054,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1177,"sourceUnit":1234,"src":"133:67:18","symbolAliases":[{"foreign":{"id":1053,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"141:15:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"202:243:18","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1176,"linearizedBaseContracts":[1176],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1058,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:18","nodeType":"VariableDeclaration","scope":1176,"src":"498:57:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1057,"nodeType":"UserDefinedTypeName","pathNode":{"id":1056,"name":"IForwarderRegistry","nameLocations":["498:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"498:18:18"},"referencedDeclaration":1204,"src":"498:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":1068,"nodeType":"Block","src":"612:56:18","statements":[{"expression":{"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1064,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"622:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1065,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"644:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"src":"622:39:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"id":1067,"nodeType":"ExpressionStatement","src":"622:39:18"}]},"id":1069,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1061,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:18","nodeType":"VariableDeclaration","scope":1069,"src":"574:36:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1060,"nodeType":"UserDefinedTypeName","pathNode":{"id":1059,"name":"IForwarderRegistry","nameLocations":["574:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"574:18:18"},"referencedDeclaration":1204,"src":"574:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:18"},"returnParameters":{"id":1063,"nodeType":"ParameterList","parameters":[],"src":"612:0:18"},"scope":1176,"src":"562:106:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1122,"nodeType":"Block","src":"846:698:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1075,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1077,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:18","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1080,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:18","memberName":"data","nodeType":"MemberAccess","src":"1074:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:18","memberName":"length","nodeType":"MemberAccess","src":"1074:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1090,"nodeType":"IfStatement","src":"1043:95:18","trueBody":{"id":1089,"nodeType":"Block","src":"1096:42:18","statements":[{"expression":{"expression":{"id":1086,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1074,"id":1088,"nodeType":"Return","src":"1110:17:18"}]}},{"assignments":[1092],"declarations":[{"constant":false,"id":1092,"mutability":"mutable","name":"sender","nameLocation":"1156:6:18","nodeType":"VariableDeclaration","scope":1122,"src":"1148:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1096,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1093,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"1165:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1233_$","typeString":"type(library ERC2771Calldata)"}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:18","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1215,"src":"1165:25:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1101,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"1372:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}],"id":1100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1099,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:18","typeDescriptions":{}}},"id":1102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1106,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"1436:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1107,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1111,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1464:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1176","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1176","typeString":"contract ForwarderRegistryContextBase"}],"id":1110,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1456:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1109,"name":"address","nodeType":"ElementaryTypeName","src":"1456:7:18","typeDescriptions":{}}},"id":1112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1456:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1104,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"1396:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"id":1105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:18","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"1396:39:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:74:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:120:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1118,"nodeType":"IfStatement","src":"1346:164:18","trueBody":{"id":1117,"nodeType":"Block","src":"1472:38:18","statements":[{"expression":{"id":1115,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1092,"src":"1493:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1074,"id":1116,"nodeType":"Return","src":"1486:13:18"}]}},{"expression":{"expression":{"id":1119,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1527:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1531:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1527:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1074,"id":1121,"nodeType":"Return","src":"1520:17:18"}]},"documentation":{"id":1070,"nodeType":"StructuredDocumentation","src":"674:105:18","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":1123,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:18","nodeType":"FunctionDefinition","parameters":{"id":1071,"nodeType":"ParameterList","parameters":[],"src":"803:2:18"},"returnParameters":{"id":1074,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1073,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1123,"src":"837:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1072,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:18"},"scope":1176,"src":"784:760:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1174,"nodeType":"Block","src":"1725:717:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1129,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1926:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1930:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1926:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1131,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1940:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1943:6:18","memberName":"origin","nodeType":"MemberAccess","src":"1940:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1926:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1134,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1953:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1957:4:18","memberName":"data","nodeType":"MemberAccess","src":"1953:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1962:6:18","memberName":"length","nodeType":"MemberAccess","src":"1953:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1137,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1971:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1953:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1926:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1144,"nodeType":"IfStatement","src":"1922:93:18","trueBody":{"id":1143,"nodeType":"Block","src":"1975:40:18","statements":[{"expression":{"expression":{"id":1140,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1996:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2000:4:18","memberName":"data","nodeType":"MemberAccess","src":"1996:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1128,"id":1142,"nodeType":"Return","src":"1989:15:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1145,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2189:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2193:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2189:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1149,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"2211:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}],"id":1148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2203:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1147,"name":"address","nodeType":"ElementaryTypeName","src":"2203:7:18","typeDescriptions":{}}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2203:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2189:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1154,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"2287:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1233_$","typeString":"type(library ERC2771Calldata)"}},"id":1155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2303:9:18","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1215,"src":"2287:25:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2287:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1157,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2316:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2320:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2316:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1161,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2336:4:18","typeDescriptions":{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1176","typeString":"contract ForwarderRegistryContextBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ForwarderRegistryContextBase_$1176","typeString":"contract ForwarderRegistryContextBase"}],"id":1160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2328:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:18","typeDescriptions":{}}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2328:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1152,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"2247:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2267:19:18","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1203,"src":"2247:39:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address,address) view external returns (bool)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:95:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2189:153:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1170,"nodeType":"IfStatement","src":"2172:238:18","trueBody":{"id":1169,"nodeType":"Block","src":"2353:57:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1165,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"2374:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1233_$","typeString":"type(library ERC2771Calldata)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2390:7:18","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":1232,"src":"2374:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2374:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1128,"id":1168,"nodeType":"Return","src":"2367:32:18"}]}},{"expression":{"expression":{"id":1171,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2427:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2431:4:18","memberName":"data","nodeType":"MemberAccess","src":"2427:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1128,"id":1173,"nodeType":"Return","src":"2420:15:18"}]},"documentation":{"id":1124,"nodeType":"StructuredDocumentation","src":"1550:103:18","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":1175,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1667:8:18","nodeType":"FunctionDefinition","parameters":{"id":1125,"nodeType":"ParameterList","parameters":[],"src":"1675:2:18"},"returnParameters":{"id":1128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1127,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1175,"src":"1709:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1126,"name":"bytes","nodeType":"ElementaryTypeName","src":"1709:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1708:16:18"},"scope":1176,"src":"1658:784:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1177,"src":"445:1999:18","usedErrors":[],"usedEvents":[]}],"src":"32:2413:18"},"id":18},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[1188]},"id":1189,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1178,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"58:110:19","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":1188,"linearizedBaseContracts":[1188],"name":"IERC2771","nameLocation":"178:8:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"193:171:19","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":1187,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:19","nodeType":"FunctionDefinition","parameters":{"id":1183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1182,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:19","nodeType":"VariableDeclaration","scope":1187,"src":"397:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1181,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:19"},"returnParameters":{"id":1186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1185,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:19","nodeType":"VariableDeclaration","scope":1187,"src":"439:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1184,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:19"},"scope":1188,"src":"369:86:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1189,"src":"168:289:19","usedErrors":[],"usedEvents":[]}],"src":"32:426:19"},"id":19},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[1204]},"id":1205,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1190,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1191,"nodeType":"StructuredDocumentation","src":"58:49:20","text":"@title Meta-Transactions Forwarder Registry."},"fullyImplemented":false,"id":1204,"linearizedBaseContracts":[1204],"name":"IForwarderRegistry","nameLocation":"117:18:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1192,"nodeType":"StructuredDocumentation","src":"142:390:20","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @param target The target contract.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."},"functionSelector":"019a2028","id":1203,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"546:19:20","nodeType":"FunctionDefinition","parameters":{"id":1199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1194,"mutability":"mutable","name":"sender","nameLocation":"574:6:20","nodeType":"VariableDeclaration","scope":1203,"src":"566:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1193,"name":"address","nodeType":"ElementaryTypeName","src":"566:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"forwarder","nameLocation":"590:9:20","nodeType":"VariableDeclaration","scope":1203,"src":"582:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"582:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"target","nameLocation":"609:6:20","nodeType":"VariableDeclaration","scope":1203,"src":"601:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"601:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"565:51:20"},"returnParameters":{"id":1202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1201,"mutability":"mutable","name":"isApproved","nameLocation":"645:10:20","nodeType":"VariableDeclaration","scope":1203,"src":"640:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1200,"name":"bool","nodeType":"ElementaryTypeName","src":"640:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"639:17:20"},"scope":1204,"src":"537:120:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1205,"src":"107:552:20","usedErrors":[],"usedEvents":[]}],"src":"32:628:20"},"id":20},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[1233]},"id":1234,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1206,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":1207,"nodeType":"StructuredDocumentation","src":"58:144:21","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":1233,"linearizedBaseContracts":[1233],"name":"ERC2771Calldata","nameLocation":"210:15:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":1214,"nodeType":"Block","src":"398:105:21","statements":[{"AST":{"nativeSrc":"417:80:21","nodeType":"YulBlock","src":"417:80:21","statements":[{"nativeSrc":"431:56:21","nodeType":"YulAssignment","src":"431:56:21","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:21","nodeType":"YulLiteral","src":"445:2:21","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:21","nodeType":"YulIdentifier","src":"466:12:21"},"nativeSrc":"466:14:21","nodeType":"YulFunctionCall","src":"466:14:21"},{"kind":"number","nativeSrc":"482:2:21","nodeType":"YulLiteral","src":"482:2:21","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:21","nodeType":"YulIdentifier","src":"462:3:21"},"nativeSrc":"462:23:21","nodeType":"YulFunctionCall","src":"462:23:21"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:21","nodeType":"YulIdentifier","src":"449:12:21"},"nativeSrc":"449:37:21","nodeType":"YulFunctionCall","src":"449:37:21"}],"functionName":{"name":"shr","nativeSrc":"441:3:21","nodeType":"YulIdentifier","src":"441:3:21"},"nativeSrc":"441:46:21","nodeType":"YulFunctionCall","src":"441:46:21"},"variableNames":[{"name":"sender","nativeSrc":"431:6:21","nodeType":"YulIdentifier","src":"431:6:21"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1211,"isOffset":false,"isSlot":false,"src":"431:6:21","valueSize":1}],"id":1213,"nodeType":"InlineAssembly","src":"408:89:21"}]},"documentation":{"id":1208,"nodeType":"StructuredDocumentation","src":"232:101:21","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":1215,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:21","nodeType":"FunctionDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[],"src":"356:2:21"},"returnParameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"sender","nameLocation":"390:6:21","nodeType":"VariableDeclaration","scope":1215,"src":"382:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1210,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:21"},"scope":1233,"src":"338:165:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1231,"nodeType":"Block","src":"679:89:21","statements":[{"id":1230,"nodeType":"UncheckedBlock","src":"689:73:21","statements":[{"expression":{"baseExpression":{"expression":{"id":1221,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1222,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:21","memberName":"data","nodeType":"MemberAccess","src":"720:8:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1223,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:21","memberName":"data","nodeType":"MemberAccess","src":"730:8:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:21","memberName":"length","nodeType":"MemberAccess","src":"730:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":1220,"id":1229,"nodeType":"Return","src":"713:38:21"}]}]},"documentation":{"id":1216,"nodeType":"StructuredDocumentation","src":"509:102:21","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":1232,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:21","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[],"src":"632:2:21"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"data","nameLocation":"673:4:21","nodeType":"VariableDeclaration","scope":1232,"src":"658:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1218,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:21"},"scope":1233,"src":"616:152:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1234,"src":"202:568:21","usedErrors":[],"usedEvents":[]}],"src":"32:739:21"},"id":21},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1242]},"id":1243,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1235,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:22"},{"documentation":{"id":1236,"nodeType":"StructuredDocumentation","src":"58:179:22","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1242,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:22","nodeType":"ErrorDefinition","parameters":{"id":1241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1238,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:22","nodeType":"VariableDeclaration","scope":1242,"src":"277:20:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1237,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1240,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:22","nodeType":"VariableDeclaration","scope":1242,"src":"299:16:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1239,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:22"},"src":"237:80:22"}],"src":"32:286:22"},"id":22},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1242],"ProxyInitialization":[1289],"StorageSlot":[3035]},"id":1290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1244,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1246,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1290,"sourceUnit":1243,"src":"58:92:23","symbolAliases":[{"foreign":{"id":1245,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"66:33:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1290,"sourceUnit":3036,"src":"151:74:23","symbolAliases":[{"foreign":{"id":1247,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"159:11:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"227:92:23","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1289,"linearizedBaseContracts":[1289],"name":"ProxyInitialization","nameLocation":"327:19:23","nodeType":"ContractDefinition","nodes":[{"body":{"id":1287,"nodeType":"Block","src":"735:294:23","statements":[{"assignments":[1261],"declarations":[{"constant":false,"id":1261,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:23","nodeType":"VariableDeclaration","scope":1287,"src":"745:46:23","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1260,"nodeType":"UserDefinedTypeName","pathNode":{"id":1259,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:23","757:11:23"],"nodeType":"IdentifierPath","referencedDeclaration":2926,"src":"745:23:23"},"referencedDeclaration":2926,"src":"745:23:23","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1266,"initialValue":{"arguments":[{"id":1264,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1252,"src":"821:11:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1262,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"794:11:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3035_$","typeString":"type(library StorageSlot)"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:23","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":2979,"src":"794:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$2926_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:23"},{"assignments":[1268],"declarations":[{"constant":false,"id":1268,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:23","nodeType":"VariableDeclaration","scope":1287,"src":"843:20:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1267,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1271,"initialValue":{"expression":{"id":1269,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"866:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:23","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2925,"src":"866:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:23"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1272,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"900:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1273,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"916:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1280,"nodeType":"IfStatement","src":"896:88:23","trueBody":{"errorCall":{"arguments":[{"id":1276,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1268,"src":"964:12:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1277,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"978:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1275,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1242,"src":"930:33:23","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":1279,"nodeType":"RevertStatement","src":"923:61:23"}},{"expression":{"id":1285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1281,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1261,"src":"994:14:23","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1283,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:23","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2925,"src":"994:20:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1284,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1254,"src":"1017:5:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1286,"nodeType":"ExpressionStatement","src":"994:28:23"}]},"documentation":{"id":1250,"nodeType":"StructuredDocumentation","src":"353:314:23","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1288,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:23","nodeType":"FunctionDefinition","parameters":{"id":1255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1252,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:23","nodeType":"VariableDeclaration","scope":1288,"src":"690:19:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1251,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1254,"mutability":"mutable","name":"phase","nameLocation":"719:5:23","nodeType":"VariableDeclaration","scope":1288,"src":"711:13:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1253,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:23"},"returnParameters":{"id":1256,"nodeType":"ParameterList","parameters":[],"src":"735:0:23"},"scope":1289,"src":"672:357:23","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1290,"src":"319:712:23","usedErrors":[],"usedEvents":[]}],"src":"32:1000:23"},"id":23},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","exportedSymbols":{"AccessControl":[11],"AccessControlStorage":[593],"Context":[2842],"ContractOwnership":[44],"ForwarderRegistryContext":[1048],"ForwarderRegistryContextBase":[1176],"IERC20":[2403],"IForwarderRegistry":[1204],"LinearPool":[1963],"ReentrancyGuard":[2911],"SafeERC20":[2812]},"id":1964,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1291,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:24"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../../access/ContractOwnership.sol","id":1293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":45,"src":"57:71:24","symbolAliases":[{"foreign":{"id":1292,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44,"src":"65:17:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"./../../access/AccessControl.sol","id":1295,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":12,"src":"129:63:24","symbolAliases":[{"foreign":{"id":1294,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":11,"src":"137:13:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","file":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","id":1297,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":2912,"src":"193:82:24","symbolAliases":[{"foreign":{"id":1296,"name":"ReentrancyGuard","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2911,"src":"201:15:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1299,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":2843,"src":"276:66:24","symbolAliases":[{"foreign":{"id":1298,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2842,"src":"284:7:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./../../metatx/base/ForwarderRegistryContextBase.sol","id":1301,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":1177,"src":"343:98:24","symbolAliases":[{"foreign":{"id":1300,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"351:28:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"./../../metatx/ForwarderRegistryContext.sol","id":1303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":1049,"src":"442:85:24","symbolAliases":[{"foreign":{"id":1302,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1048,"src":"450:24:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../../access/libraries/AccessControlStorage.sol","id":1305,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":594,"src":"528:87:24","symbolAliases":[{"foreign":{"id":1304,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"536:20:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1308,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":2813,"src":"616:90:24","symbolAliases":[{"foreign":{"id":1306,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"624:9:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1307,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"635:6:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../../metatx/interfaces/IForwarderRegistry.sol","id":1310,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1964,"sourceUnit":1205,"src":"707:84:24","symbolAliases":[{"foreign":{"id":1309,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"715:18:24","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1311,"name":"AccessControl","nameLocations":["916:13:24"],"nodeType":"IdentifierPath","referencedDeclaration":11,"src":"916:13:24"},"id":1312,"nodeType":"InheritanceSpecifier","src":"916:13:24"},{"baseName":{"id":1313,"name":"ReentrancyGuard","nameLocations":["931:15:24"],"nodeType":"IdentifierPath","referencedDeclaration":2911,"src":"931:15:24"},"id":1314,"nodeType":"InheritanceSpecifier","src":"931:15:24"},{"baseName":{"id":1315,"name":"ForwarderRegistryContext","nameLocations":["948:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"948:24:24"},"id":1316,"nodeType":"InheritanceSpecifier","src":"948:24:24"}],"canonicalName":"LinearPool","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":1963,"linearizedBaseContracts":[1963,1048,1188,1176,2911,11,44,881,898,216,168,2842,330,314],"name":"LinearPool","nameLocation":"902:10:24","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1320,"libraryName":{"id":1317,"name":"AccessControlStorage","nameLocations":["985:20:24"],"nodeType":"IdentifierPath","referencedDeclaration":593,"src":"985:20:24"},"nodeType":"UsingForDirective","src":"979:59:24","typeName":{"id":1319,"nodeType":"UserDefinedTypeName","pathNode":{"id":1318,"name":"AccessControlStorage.Layout","nameLocations":["1010:20:24","1031:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":358,"src":"1010:27:24"},"referencedDeclaration":358,"src":"1010:27:24","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":1324,"libraryName":{"id":1321,"name":"SafeERC20","nameLocations":["1049:9:24"],"nodeType":"IdentifierPath","referencedDeclaration":2812,"src":"1049:9:24"},"nodeType":"UsingForDirective","src":"1043:27:24","typeName":{"id":1323,"nodeType":"UserDefinedTypeName","pathNode":{"id":1322,"name":"IERC20","nameLocations":["1063:6:24"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"1063:6:24"},"referencedDeclaration":2403,"src":"1063:6:24","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}},{"constant":true,"functionSelector":"8580cf76","id":1327,"mutability":"constant","name":"REWARDER_ROLE","nameLocation":"1100:13:24","nodeType":"VariableDeclaration","scope":1963,"src":"1076:50:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1076:7:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"7265776172646572","id":1326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1116:10:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_09d4f938153b9874445ae24b09d3d71e7e819f700e6d9b5515a8ddfdd0cb3d7f","typeString":"literal_string \"rewarder\""},"value":"rewarder"},"visibility":"public"},{"constant":true,"functionSelector":"ef4cadc5","id":1330,"mutability":"constant","name":"SCALING_FACTOR","nameLocation":"1156:14:24","nodeType":"VariableDeclaration","scope":1963,"src":"1132:45:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1328,"name":"uint256","nodeType":"ElementaryTypeName","src":"1132:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31653138","id":1329,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1173:4:24","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"visibility":"public"},{"constant":false,"functionSelector":"817b1cd2","id":1332,"mutability":"mutable","name":"totalStaked","nameLocation":"1199:11:24","nodeType":"VariableDeclaration","scope":1963,"src":"1184:26:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1331,"name":"uint256","nodeType":"ElementaryTypeName","src":"1184:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"d0b06f5d","id":1334,"mutability":"mutable","name":"lastUpdated","nameLocation":"1231:11:24","nodeType":"VariableDeclaration","scope":1963,"src":"1216:26:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1333,"name":"uint256","nodeType":"ElementaryTypeName","src":"1216:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"7b0a47ee","id":1336,"mutability":"mutable","name":"rewardRate","nameLocation":"1263:10:24","nodeType":"VariableDeclaration","scope":1963,"src":"1248:25:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1335,"name":"uint256","nodeType":"ElementaryTypeName","src":"1248:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"9d696e36","id":1338,"mutability":"mutable","name":"rewardPerStakePointStored","nameLocation":"1294:25:24","nodeType":"VariableDeclaration","scope":1963,"src":"1279:40:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1337,"name":"uint256","nodeType":"ElementaryTypeName","src":"1279:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"efa90b54","id":1340,"mutability":"mutable","name":"distributionEnd","nameLocation":"1340:15:24","nodeType":"VariableDeclaration","scope":1963,"src":"1325:30:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1339,"name":"uint256","nodeType":"ElementaryTypeName","src":"1325:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"98807d84","id":1344,"mutability":"mutable","name":"staked","nameLocation":"1416:6:24","nodeType":"VariableDeclaration","scope":1963,"src":"1362:60:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1343,"keyName":"staker","keyNameLocation":"1378:6:24","keyType":{"id":1341,"name":"address","nodeType":"ElementaryTypeName","src":"1370:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1362:46:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"stakePoints","valueNameLocation":"1396:11:24","valueType":{"id":1342,"name":"uint256","nodeType":"ElementaryTypeName","src":"1388:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"0700037d","id":1348,"mutability":"mutable","name":"rewards","nameLocation":"1477:7:24","nodeType":"VariableDeclaration","scope":1963,"src":"1428:56:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1347,"keyName":"staker","keyNameLocation":"1444:6:24","keyType":{"id":1345,"name":"address","nodeType":"ElementaryTypeName","src":"1436:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1428:41:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"reward","valueNameLocation":"1462:6:24","valueType":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"1454:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":false,"functionSelector":"c5c8f770","id":1352,"mutability":"mutable","name":"rewardPerStakePointPaid","nameLocation":"1537:23:24","nodeType":"VariableDeclaration","scope":1963,"src":"1490:70:24","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1351,"keyName":"staker","keyNameLocation":"1506:6:24","keyType":{"id":1349,"name":"address","nodeType":"ElementaryTypeName","src":"1498:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1490:39:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"paid","valueNameLocation":"1524:4:24","valueType":{"id":1350,"name":"uint256","nodeType":"ElementaryTypeName","src":"1516:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"anonymous":false,"eventSelector":"f4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e","id":1360,"name":"Staked","nameLocation":"1573:6:24","nodeType":"EventDefinition","parameters":{"id":1359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"1596:6:24","nodeType":"VariableDeclaration","scope":1360,"src":"1580:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1356,"indexed":false,"mutability":"mutable","name":"stakeData","nameLocation":"1610:9:24","nodeType":"VariableDeclaration","scope":1360,"src":"1604:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1355,"name":"bytes","nodeType":"ElementaryTypeName","src":"1604:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1358,"indexed":false,"mutability":"mutable","name":"stakePoints","nameLocation":"1629:11:24","nodeType":"VariableDeclaration","scope":1360,"src":"1621:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1357,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1579:62:24"},"src":"1567:75:24"},{"anonymous":false,"eventSelector":"aae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e","id":1368,"name":"Withdrawn","nameLocation":"1653:9:24","nodeType":"EventDefinition","parameters":{"id":1367,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1362,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"1679:6:24","nodeType":"VariableDeclaration","scope":1368,"src":"1663:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1361,"name":"address","nodeType":"ElementaryTypeName","src":"1663:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1364,"indexed":false,"mutability":"mutable","name":"withdrawData","nameLocation":"1693:12:24","nodeType":"VariableDeclaration","scope":1368,"src":"1687:18:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1363,"name":"bytes","nodeType":"ElementaryTypeName","src":"1687:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1366,"indexed":false,"mutability":"mutable","name":"stakePoints","nameLocation":"1715:11:24","nodeType":"VariableDeclaration","scope":1368,"src":"1707:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1365,"name":"uint256","nodeType":"ElementaryTypeName","src":"1707:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1662:65:24"},"src":"1647:81:24"},{"anonymous":false,"eventSelector":"4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd5","id":1376,"name":"Claimed","nameLocation":"1739:7:24","nodeType":"EventDefinition","parameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1370,"indexed":true,"mutability":"mutable","name":"staker","nameLocation":"1763:6:24","nodeType":"VariableDeclaration","scope":1376,"src":"1747:22:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1369,"name":"address","nodeType":"ElementaryTypeName","src":"1747:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1372,"indexed":false,"mutability":"mutable","name":"claimData","nameLocation":"1777:9:24","nodeType":"VariableDeclaration","scope":1376,"src":"1771:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1371,"name":"bytes","nodeType":"ElementaryTypeName","src":"1771:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1374,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"1796:6:24","nodeType":"VariableDeclaration","scope":1376,"src":"1788:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1373,"name":"uint256","nodeType":"ElementaryTypeName","src":"1788:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1746:57:24"},"src":"1733:71:24"},{"anonymous":false,"eventSelector":"0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf8908083","id":1386,"name":"RewardAdded","nameLocation":"1815:11:24","nodeType":"EventDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1378,"indexed":true,"mutability":"mutable","name":"rewarder","nameLocation":"1843:8:24","nodeType":"VariableDeclaration","scope":1386,"src":"1827:24:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1377,"name":"address","nodeType":"ElementaryTypeName","src":"1827:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1380,"indexed":false,"mutability":"mutable","name":"reward","nameLocation":"1861:6:24","nodeType":"VariableDeclaration","scope":1386,"src":"1853:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1379,"name":"uint256","nodeType":"ElementaryTypeName","src":"1853:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1382,"indexed":false,"mutability":"mutable","name":"duration","nameLocation":"1877:8:24","nodeType":"VariableDeclaration","scope":1386,"src":"1869:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1869:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1384,"indexed":false,"mutability":"mutable","name":"dust","nameLocation":"1895:4:24","nodeType":"VariableDeclaration","scope":1386,"src":"1887:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1383,"name":"uint256","nodeType":"ElementaryTypeName","src":"1887:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1826:74:24"},"src":"1809:92:24"},{"errorSelector":"040ef8ec","id":1388,"name":"InvalidStakeAmount","nameLocation":"1913:18:24","nodeType":"ErrorDefinition","parameters":{"id":1387,"nodeType":"ParameterList","parameters":[],"src":"1931:2:24"},"src":"1907:27:24"},{"errorSelector":"db73cdf0","id":1390,"name":"InvalidWithdrawAmount","nameLocation":"1945:21:24","nodeType":"ErrorDefinition","parameters":{"id":1389,"nodeType":"ParameterList","parameters":[],"src":"1966:2:24"},"src":"1939:30:24"},{"errorSelector":"38539865","id":1392,"name":"InvalidRewardAmount","nameLocation":"1980:19:24","nodeType":"ErrorDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[],"src":"1999:2:24"},"src":"1974:28:24"},{"errorSelector":"76166401","id":1394,"name":"InvalidDuration","nameLocation":"2013:15:24","nodeType":"ErrorDefinition","parameters":{"id":1393,"nodeType":"ParameterList","parameters":[],"src":"2028:2:24"},"src":"2007:24:24"},{"errorSelector":"99e66a49","id":1400,"name":"RewardTooSmallForDuration","nameLocation":"2042:25:24","nodeType":"ErrorDefinition","parameters":{"id":1399,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1396,"mutability":"mutable","name":"reward","nameLocation":"2076:6:24","nodeType":"VariableDeclaration","scope":1400,"src":"2068:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1395,"name":"uint256","nodeType":"ElementaryTypeName","src":"2068:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1398,"mutability":"mutable","name":"duration","nameLocation":"2092:8:24","nodeType":"VariableDeclaration","scope":1400,"src":"2084:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1397,"name":"uint256","nodeType":"ElementaryTypeName","src":"2084:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2067:34:24"},"src":"2036:66:24"},{"body":{"id":1413,"nodeType":"Block","src":"2232:2:24","statements":[]},"id":1414,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1406,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2176:3:24","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2180:6:24","memberName":"sender","nodeType":"MemberAccess","src":"2176:10:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1408,"kind":"baseConstructorSpecifier","modifierName":{"id":1405,"name":"ContractOwnership","nameLocations":["2158:17:24"],"nodeType":"IdentifierPath","referencedDeclaration":44,"src":"2158:17:24"},"nodeType":"ModifierInvocation","src":"2158:29:24"},{"arguments":[{"id":1410,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"2213:17:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"id":1411,"kind":"baseConstructorSpecifier","modifierName":{"id":1409,"name":"ForwarderRegistryContext","nameLocations":["2188:24:24"],"nodeType":"IdentifierPath","referencedDeclaration":1048,"src":"2188:24:24"},"nodeType":"ModifierInvocation","src":"2188:43:24"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"2139:17:24","nodeType":"VariableDeclaration","scope":1414,"src":"2120:36:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1402,"nodeType":"UserDefinedTypeName","pathNode":{"id":1401,"name":"IForwarderRegistry","nameLocations":["2120:18:24"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"2120:18:24"},"referencedDeclaration":1204,"src":"2120:18:24","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"2119:38:24"},"returnParameters":{"id":1412,"nodeType":"ParameterList","parameters":[],"src":"2232:0:24"},"scope":1963,"src":"2108:126:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1461,"nodeType":"Block","src":"2289:439:24","statements":[{"expression":{"id":1422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1419,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"2299:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":1420,"name":"rewardPerStakePoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"2327:19:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2327:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2299:49:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1423,"nodeType":"ExpressionStatement","src":"2299:49:24"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1424,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2362:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1425,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2368:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"2362:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1426,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"2381:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2362:34:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1428,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"2400:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2415:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2400:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2362:54:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1438,"nodeType":"IfStatement","src":"2358:195:24","trueBody":{"id":1437,"nodeType":"Block","src":"2418:135:24","statements":[{"expression":{"id":1435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1432,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"2502:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":1433,"name":"lastTimeRewardApplicable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"2516:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2516:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2502:40:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1436,"nodeType":"ExpressionStatement","src":"2502:40:24"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1439,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"2566:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2585:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2577:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1440,"name":"address","nodeType":"ElementaryTypeName","src":"2577:7:24","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2577:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2566:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1460,"nodeType":"IfStatement","src":"2562:160:24","trueBody":{"id":1459,"nodeType":"Block","src":"2589:133:24","statements":[{"expression":{"id":1451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1445,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"2603:7:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1447,"indexExpression":{"id":1446,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"2611:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2603:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1449,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"2629:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1448,"name":"earned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"2622:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2622:15:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2603:34:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1452,"nodeType":"ExpressionStatement","src":"2603:34:24"},{"expression":{"id":1457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1453,"name":"rewardPerStakePointPaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"2651:23:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1455,"indexExpression":{"id":1454,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1416,"src":"2675:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2651:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1456,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"2686:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2651:60:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1458,"nodeType":"ExpressionStatement","src":"2651:60:24"}]}}]},"id":1462,"implemented":true,"kind":"function","modifiers":[],"name":"_updateReward","nameLocation":"2249:13:24","nodeType":"FunctionDefinition","parameters":{"id":1417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"account","nameLocation":"2271:7:24","nodeType":"VariableDeclaration","scope":1462,"src":"2263:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"2263:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2262:17:24"},"returnParameters":{"id":1418,"nodeType":"ParameterList","parameters":[],"src":"2289:0:24"},"scope":1963,"src":"2240:488:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1480,"nodeType":"Block","src":"2800:165:24","statements":[{"assignments":[1468],"declarations":[{"constant":false,"id":1468,"mutability":"mutable","name":"currentDistributionEnd","nameLocation":"2818:22:24","nodeType":"VariableDeclaration","scope":1480,"src":"2810:30:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"2810:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1470,"initialValue":{"id":1469,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"2843:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2810:48:24"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1471,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2875:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1472,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2881:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"2875:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1473,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"2893:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2875:40:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1477,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1468,"src":"2936:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2875:83:24","trueExpression":{"expression":{"id":1475,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2918:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2924:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"2918:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1466,"id":1479,"nodeType":"Return","src":"2868:90:24"}]},"functionSelector":"80faa57d","id":1481,"implemented":true,"kind":"function","modifiers":[],"name":"lastTimeRewardApplicable","nameLocation":"2743:24:24","nodeType":"FunctionDefinition","parameters":{"id":1463,"nodeType":"ParameterList","parameters":[],"src":"2767:2:24"},"returnParameters":{"id":1466,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1465,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1481,"src":"2791:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1464,"name":"uint256","nodeType":"ElementaryTypeName","src":"2791:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2790:9:24"},"scope":1963,"src":"2734:231:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1513,"nodeType":"Block","src":"3032:294:24","statements":[{"assignments":[1487],"declarations":[{"constant":false,"id":1487,"mutability":"mutable","name":"currentTotalStaked","nameLocation":"3050:18:24","nodeType":"VariableDeclaration","scope":1513,"src":"3042:26:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1486,"name":"uint256","nodeType":"ElementaryTypeName","src":"3042:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1489,"initialValue":{"id":1488,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3071:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3042:40:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1490,"name":"currentTotalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"3096:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1491,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3118:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3096:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1496,"nodeType":"IfStatement","src":"3092:86:24","trueBody":{"id":1495,"nodeType":"Block","src":"3121:57:24","statements":[{"expression":{"id":1493,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"3142:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1485,"id":1494,"nodeType":"Return","src":"3135:32:24"}]}},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1497,"name":"rewardPerStakePointStored","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"3194:25:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1509,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1498,"name":"lastTimeRewardApplicable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"3225:24:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1499,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3225:26:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1500,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"3254:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3225:40:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1502,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3224:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1503,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"3269:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3224:55:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1505,"name":"SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"3282:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3224:72:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1507,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3223:74:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1508,"name":"currentTotalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1487,"src":"3300:18:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3223:95:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1510,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3222:97:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3194:125:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1485,"id":1512,"nodeType":"Return","src":"3187:132:24"}]},"functionSelector":"2c9d0b80","id":1514,"implemented":true,"kind":"function","modifiers":[],"name":"rewardPerStakePoint","nameLocation":"2980:19:24","nodeType":"FunctionDefinition","parameters":{"id":1482,"nodeType":"ParameterList","parameters":[],"src":"2999:2:24"},"returnParameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1514,"src":"3023:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1483,"name":"uint256","nodeType":"ElementaryTypeName","src":"3023:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3022:9:24"},"scope":1963,"src":"2971:355:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1540,"nodeType":"Block","src":"3395:138:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1538,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1534,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":1521,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"3413:6:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1523,"indexExpression":{"id":1522,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"3420:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3413:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1524,"name":"rewardPerStakePoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1514,"src":"3432:19:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_uint256_$","typeString":"function () view returns (uint256)"}},"id":1525,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3432:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"baseExpression":{"id":1526,"name":"rewardPerStakePointPaid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1352,"src":"3456:23:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1528,"indexExpression":{"id":1527,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"3480:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3456:32:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3432:56:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1530,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3431:58:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3413:76:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1532,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3412:78:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1533,"name":"SCALING_FACTOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1330,"src":"3493:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3412:95:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"baseExpression":{"id":1535,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"3510:7:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1537,"indexExpression":{"id":1536,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1516,"src":"3518:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3510:16:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3412:114:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1520,"id":1539,"nodeType":"Return","src":"3405:121:24"}]},"functionSelector":"008cc262","id":1541,"implemented":true,"kind":"function","modifiers":[],"name":"earned","nameLocation":"3341:6:24","nodeType":"FunctionDefinition","parameters":{"id":1517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1516,"mutability":"mutable","name":"account","nameLocation":"3356:7:24","nodeType":"VariableDeclaration","scope":1541,"src":"3348:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1515,"name":"address","nodeType":"ElementaryTypeName","src":"3348:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3347:17:24"},"returnParameters":{"id":1520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1541,"src":"3386:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1518,"name":"uint256","nodeType":"ElementaryTypeName","src":"3386:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3385:9:24"},"scope":1963,"src":"3332:201:24","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":1557,"nodeType":"Block","src":"3616:60:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1549,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"3633:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1550,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3633:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":1553,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1543,"src":"3658:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":1551,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3647:3:24","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1552,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3651:6:24","memberName":"encode","nodeType":"MemberAccess","src":"3647:10:24","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3647:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1548,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"3626:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3626:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1556,"nodeType":"ExpressionStatement","src":"3626:43:24"}]},"functionSelector":"2d1e0c02","id":1558,"implemented":true,"kind":"function","modifiers":[{"id":1546,"kind":"modifierInvocation","modifierName":{"id":1545,"name":"nonReentrant","nameLocations":["3603:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":2875,"src":"3603:12:24"},"nodeType":"ModifierInvocation","src":"3603:12:24"}],"name":"stake","nameLocation":"3548:5:24","nodeType":"FunctionDefinition","parameters":{"id":1544,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1543,"mutability":"mutable","name":"stakeData","nameLocation":"3569:9:24","nodeType":"VariableDeclaration","scope":1558,"src":"3554:24:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1542,"name":"bytes","nodeType":"ElementaryTypeName","src":"3554:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3553:26:24"},"returnParameters":{"id":1547,"nodeType":"ParameterList","parameters":[],"src":"3616:0:24"},"scope":1963,"src":"3539:137:24","stateMutability":"payable","virtual":true,"visibility":"public"},{"body":{"id":1600,"nodeType":"Block","src":"3755:287:24","statements":[{"expression":{"arguments":[{"id":1566,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3779:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1565,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"3765:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3765:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1568,"nodeType":"ExpressionStatement","src":"3765:21:24"},{"assignments":[1570],"declarations":[{"constant":false,"id":1570,"mutability":"mutable","name":"stakePoints","nameLocation":"3804:11:24","nodeType":"VariableDeclaration","scope":1600,"src":"3796:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1569,"name":"uint256","nodeType":"ElementaryTypeName","src":"3796:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1575,"initialValue":{"arguments":[{"id":1572,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3832:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1573,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"3840:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1571,"name":"_computeStake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1907,"src":"3818:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,bytes memory) returns (uint256)"}},"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3818:32:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3796:54:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1577,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"3868:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1578,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3883:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"3868:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1580,"name":"InvalidStakeAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"3886:18:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3886:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1576,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"3860:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:47:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1583,"nodeType":"ExpressionStatement","src":"3860:47:24"},{"expression":{"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1584,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"3917:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1585,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"3932:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3917:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1587,"nodeType":"ExpressionStatement","src":"3917:26:24"},{"expression":{"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1588,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"3953:6:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1590,"indexExpression":{"id":1589,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"3960:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3953:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1591,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"3971:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3953:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1593,"nodeType":"ExpressionStatement","src":"3953:29:24"},{"eventCall":{"arguments":[{"id":1595,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"4004:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1596,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"4012:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1597,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4023:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1594,"name":"Staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1360,"src":"3997:6:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3997:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1599,"nodeType":"EmitStatement","src":"3992:43:24"}]},"id":1601,"implemented":true,"kind":"function","modifiers":[],"name":"_stake","nameLocation":"3691:6:24","nodeType":"FunctionDefinition","parameters":{"id":1563,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1560,"mutability":"mutable","name":"sender","nameLocation":"3706:6:24","nodeType":"VariableDeclaration","scope":1601,"src":"3698:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1559,"name":"address","nodeType":"ElementaryTypeName","src":"3698:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1562,"mutability":"mutable","name":"stakeData","nameLocation":"3727:9:24","nodeType":"VariableDeclaration","scope":1601,"src":"3714:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1561,"name":"bytes","nodeType":"ElementaryTypeName","src":"3714:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3697:40:24"},"returnParameters":{"id":1564,"nodeType":"ParameterList","parameters":[],"src":"3755:0:24"},"scope":1963,"src":"3682:360:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1614,"nodeType":"Block","src":"4123:54:24","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1609,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"4143:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1610,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4143:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1611,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1603,"src":"4157:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":1608,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"4133:9:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4133:37:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1613,"nodeType":"ExpressionStatement","src":"4133:37:24"}]},"functionSelector":"0968f264","id":1615,"implemented":true,"kind":"function","modifiers":[{"id":1606,"kind":"modifierInvocation","modifierName":{"id":1605,"name":"nonReentrant","nameLocations":["4110:12:24"],"nodeType":"IdentifierPath","referencedDeclaration":2875,"src":"4110:12:24"},"nodeType":"ModifierInvocation","src":"4110:12:24"}],"name":"withdraw","nameLocation":"4057:8:24","nodeType":"FunctionDefinition","parameters":{"id":1604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1603,"mutability":"mutable","name":"withdrawData","nameLocation":"4081:12:24","nodeType":"VariableDeclaration","scope":1615,"src":"4066:27:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1602,"name":"bytes","nodeType":"ElementaryTypeName","src":"4066:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4065:29:24"},"returnParameters":{"id":1607,"nodeType":"ParameterList","parameters":[],"src":"4123:0:24"},"scope":1963,"src":"4048:129:24","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1657,"nodeType":"Block","src":"4262:302:24","statements":[{"expression":{"arguments":[{"id":1623,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4286:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1622,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"4272:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1624,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1625,"nodeType":"ExpressionStatement","src":"4272:21:24"},{"assignments":[1627],"declarations":[{"constant":false,"id":1627,"mutability":"mutable","name":"stakePoints","nameLocation":"4311:11:24","nodeType":"VariableDeclaration","scope":1657,"src":"4303:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"4303:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1632,"initialValue":{"arguments":[{"id":1629,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4342:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1630,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"4350:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1628,"name":"_computeWithdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"4325:16:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_uint256_$","typeString":"function (address,bytes memory) returns (uint256)"}},"id":1631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4325:38:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4303:60:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1634,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4381:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4381:16:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1637,"name":"InvalidWithdrawAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"4399:21:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4399:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1633,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"4373:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4373:50:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1640,"nodeType":"ExpressionStatement","src":"4373:50:24"},{"expression":{"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1641,"name":"totalStaked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1332,"src":"4433:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1642,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4448:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4433:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1644,"nodeType":"ExpressionStatement","src":"4433:26:24"},{"expression":{"id":1649,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1645,"name":"staked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1344,"src":"4469:6:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1647,"indexExpression":{"id":1646,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4476:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4469:14:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":1648,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4487:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4469:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1650,"nodeType":"ExpressionStatement","src":"4469:29:24"},{"eventCall":{"arguments":[{"id":1652,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"4523:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1653,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"4531:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1654,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"4545:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1651,"name":"Withdrawn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"4513:9:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4513:44:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1656,"nodeType":"EmitStatement","src":"4508:49:24"}]},"id":1658,"implemented":true,"kind":"function","modifiers":[],"name":"_withdraw","nameLocation":"4192:9:24","nodeType":"FunctionDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"sender","nameLocation":"4210:6:24","nodeType":"VariableDeclaration","scope":1658,"src":"4202:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"4202:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"withdrawData","nameLocation":"4231:12:24","nodeType":"VariableDeclaration","scope":1658,"src":"4218:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1618,"name":"bytes","nodeType":"ElementaryTypeName","src":"4218:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4201:43:24"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"4262:0:24"},"scope":1963,"src":"4183:381:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1700,"nodeType":"Block","src":"4602:309:24","statements":[{"assignments":[1662],"declarations":[{"constant":false,"id":1662,"mutability":"mutable","name":"sender","nameLocation":"4620:6:24","nodeType":"VariableDeclaration","scope":1700,"src":"4612:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1661,"name":"address","nodeType":"ElementaryTypeName","src":"4612:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1665,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1663,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"4629:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4629:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4612:29:24"},{"expression":{"arguments":[{"id":1667,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4665:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1666,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"4651:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4651:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1669,"nodeType":"ExpressionStatement","src":"4651:21:24"},{"assignments":[1671],"declarations":[{"constant":false,"id":1671,"mutability":"mutable","name":"reward","nameLocation":"4690:6:24","nodeType":"VariableDeclaration","scope":1700,"src":"4682:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1670,"name":"uint256","nodeType":"ElementaryTypeName","src":"4682:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1675,"initialValue":{"arguments":[{"id":1673,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4706:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1672,"name":"earned","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"4699:6:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view returns (uint256)"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4699:14:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4682:31:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1676,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"4727:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1677,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4737:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4727:11:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1699,"nodeType":"IfStatement","src":"4723:182:24","trueBody":{"id":1698,"nodeType":"Block","src":"4740:165:24","statements":[{"expression":{"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1679,"name":"rewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1348,"src":"4754:7:24","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1681,"indexExpression":{"id":1680,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4762:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4754:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4772:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4754:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1684,"nodeType":"ExpressionStatement","src":"4754:19:24"},{"assignments":[1686],"declarations":[{"constant":false,"id":1686,"mutability":"mutable","name":"claimData","nameLocation":"4800:9:24","nodeType":"VariableDeclaration","scope":1698,"src":"4787:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1685,"name":"bytes","nodeType":"ElementaryTypeName","src":"4787:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1691,"initialValue":{"arguments":[{"id":1688,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4826:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1689,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"4834:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1687,"name":"_computeClaim","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1925,"src":"4812:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256) returns (bytes memory)"}},"id":1690,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4812:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4787:54:24"},{"eventCall":{"arguments":[{"id":1693,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1662,"src":"4868:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1694,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1686,"src":"4876:9:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1695,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1671,"src":"4887:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1692,"name":"Claimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1376,"src":"4860:7:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$__$","typeString":"function (address,bytes memory,uint256)"}},"id":1696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4860:34:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1697,"nodeType":"EmitStatement","src":"4855:39:24"}]}}]},"functionSelector":"4e71d92d","id":1701,"implemented":true,"kind":"function","modifiers":[],"name":"claim","nameLocation":"4579:5:24","nodeType":"FunctionDefinition","parameters":{"id":1659,"nodeType":"ParameterList","parameters":[],"src":"4584:2:24"},"returnParameters":{"id":1660,"nodeType":"ParameterList","parameters":[],"src":"4602:0:24"},"scope":1963,"src":"4570:341:24","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1897,"nodeType":"Block","src":"4993:1920:24","statements":[{"assignments":[1709],"declarations":[{"constant":false,"id":1709,"mutability":"mutable","name":"sender","nameLocation":"5011:6:24","nodeType":"VariableDeclaration","scope":1897,"src":"5003:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1708,"name":"address","nodeType":"ElementaryTypeName","src":"5003:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1712,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1710,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"5020:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1711,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5020:12:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5003:29:24"},{"expression":{"arguments":[{"id":1718,"name":"REWARDER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"5087:13:24","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1719,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"5102:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1713,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"5042:20:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$593_$","typeString":"type(library AccessControlStorage)"}},"id":1715,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5063:6:24","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":592,"src":"5042:27:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:29:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$358_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":1717,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5072:14:24","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":556,"src":"5042:44:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$358_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$358_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":1720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5042:67:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1721,"nodeType":"ExpressionStatement","src":"5042:67:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1723,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5128:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5138:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5128:11:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1726,"name":"InvalidRewardAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1392,"src":"5141:19:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5141:21:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1722,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5120:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1728,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5120:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1729,"nodeType":"ExpressionStatement","src":"5120:43:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1731,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5181:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5193:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5181:13:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1734,"name":"InvalidDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1394,"src":"5196:15:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":1735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5196:17:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1730,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5173:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5173:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1737,"nodeType":"ExpressionStatement","src":"5173:41:24"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1741,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5247:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5239:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1739,"name":"address","nodeType":"ElementaryTypeName","src":"5239:7:24","typeDescriptions":{}}},"id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5239:10:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1738,"name":"_updateReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1462,"src":"5225:13:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5225:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1744,"nodeType":"ExpressionStatement","src":"5225:25:24"},{"assignments":[1746],"declarations":[{"constant":false,"id":1746,"mutability":"mutable","name":"dust","nameLocation":"5269:4:24","nodeType":"VariableDeclaration","scope":1897,"src":"5261:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"5261:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1747,"nodeType":"VariableDeclarationStatement","src":"5261:12:24"},{"assignments":[1749],"declarations":[{"constant":false,"id":1749,"mutability":"mutable","name":"currentDistributionEnd","nameLocation":"5291:22:24","nodeType":"VariableDeclaration","scope":1897,"src":"5283:30:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"5283:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1751,"initialValue":{"id":1750,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"5316:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5283:48:24"},{"assignments":[1753],"declarations":[{"constant":false,"id":1753,"mutability":"mutable","name":"newDisributionEnd","nameLocation":"5349:17:24","nodeType":"VariableDeclaration","scope":1897,"src":"5341:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1752,"name":"uint256","nodeType":"ElementaryTypeName","src":"5341:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1758,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1754,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5369:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5375:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5369:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1756,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5387:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5369:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5341:54:24"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1759,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5410:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5416:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5410:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1761,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5429:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5410:41:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1877,"nodeType":"Block","src":"5777:982:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1794,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"5795:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":1795,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5816:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5795:43:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1875,"nodeType":"Block","src":"6256:493:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1836,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1832,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6350:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1833,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6359:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6350:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1835,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6371:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6350:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":1838,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6400:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1839,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6408:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1837,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"6374:25:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1831,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6342:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6342:76:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1842,"nodeType":"ExpressionStatement","src":"6342:76:24"},{"assignments":[1844],"declarations":[{"constant":false,"id":1844,"mutability":"mutable","name":"remainingReward","nameLocation":"6444:15:24","nodeType":"VariableDeclaration","scope":1875,"src":"6436:23:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1843,"name":"uint256","nodeType":"ElementaryTypeName","src":"6436:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1852,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1851,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1845,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"6462:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1849,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1846,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"6476:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":1847,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6501:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6507:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"6501:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6476:40:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1850,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6475:42:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6462:55:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6436:81:24"},{"assignments":[1854],"declarations":[{"constant":false,"id":1854,"mutability":"mutable","name":"totalReward","nameLocation":"6543:11:24","nodeType":"VariableDeclaration","scope":1875,"src":"6535:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1853,"name":"uint256","nodeType":"ElementaryTypeName","src":"6535:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1858,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1855,"name":"remainingReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"6557:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":1856,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6575:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6557:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6535:46:24"},{"expression":{"id":1863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1859,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"6599:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1860,"name":"totalReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"6612:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1861,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6626:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6612:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6599:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1864,"nodeType":"ExpressionStatement","src":"6599:35:24"},{"expression":{"id":1869,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1865,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6652:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1866,"name":"totalReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"6659:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1867,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6673:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6659:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6652:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1870,"nodeType":"ExpressionStatement","src":"6652:29:24"},{"expression":{"id":1873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1871,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"6699:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1872,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"6717:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6699:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1874,"nodeType":"ExpressionStatement","src":"6699:35:24"}]},"id":1876,"nodeType":"IfStatement","src":"5791:958:24","trueBody":{"id":1830,"nodeType":"Block","src":"5840:410:24","statements":[{"expression":{"id":1802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1797,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5927:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1798,"name":"currentDistributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5938:22:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"expression":{"id":1799,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"5963:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5969:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"5963:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5938:40:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5927:51:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1803,"nodeType":"ExpressionStatement","src":"5927:51:24"},{"assignments":[1805],"declarations":[{"constant":false,"id":1805,"mutability":"mutable","name":"additionalRewardRate","nameLocation":"6004:20:24","nodeType":"VariableDeclaration","scope":1830,"src":"5996:28:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1804,"name":"uint256","nodeType":"ElementaryTypeName","src":"5996:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1809,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1806,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6027:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1807,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6036:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6027:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5996:48:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"additionalRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"6070:20:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6094:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6070:25:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":1815,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6123:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1816,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6131:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1814,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"6097:25:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6097:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1810,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"6062:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6062:79:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1819,"nodeType":"ExpressionStatement","src":"6062:79:24"},{"expression":{"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1820,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"6159:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":1821,"name":"additionalRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1805,"src":"6173:20:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6159:34:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1823,"nodeType":"ExpressionStatement","src":"6159:34:24"},{"expression":{"id":1828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1824,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6211:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1825,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6218:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1826,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6227:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6218:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6211:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1829,"nodeType":"ExpressionStatement","src":"6211:24:24"}]}}]},"id":1878,"nodeType":"IfStatement","src":"5406:1353:24","trueBody":{"id":1793,"nodeType":"Block","src":"5453:318:24","statements":[{"assignments":[1764],"declarations":[{"constant":false,"id":1764,"mutability":"mutable","name":"newRewardRate","nameLocation":"5514:13:24","nodeType":"VariableDeclaration","scope":1793,"src":"5506:21:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1763,"name":"uint256","nodeType":"ElementaryTypeName","src":"5506:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1768,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1765,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5530:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1766,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5539:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5530:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5506:41:24"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1770,"name":"newRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"5569:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":1771,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5586:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5569:18:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":1774,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5615:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1775,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5623:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1773,"name":"RewardTooSmallForDuration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"5589:25:24","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (uint256,uint256) pure returns (error)"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5589:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":1769,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"5561:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5561:72:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1778,"nodeType":"ExpressionStatement","src":"5561:72:24"},{"expression":{"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1779,"name":"rewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"5647:10:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1780,"name":"newRewardRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1764,"src":"5660:13:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5647:26:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1782,"nodeType":"ExpressionStatement","src":"5647:26:24"},{"expression":{"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1783,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"5687:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1784,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"5694:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"%","rightExpression":{"id":1785,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"5703:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5694:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5687:24:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1788,"nodeType":"ExpressionStatement","src":"5687:24:24"},{"expression":{"id":1791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1789,"name":"distributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1340,"src":"5725:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1790,"name":"newDisributionEnd","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1753,"src":"5743:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5725:35:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1792,"nodeType":"ExpressionStatement","src":"5725:35:24"}]}},{"expression":{"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1879,"name":"lastUpdated","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1334,"src":"6768:11:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":1880,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"6782:5:24","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6788:9:24","memberName":"timestamp","nodeType":"MemberAccess","src":"6782:15:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6768:29:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1883,"nodeType":"ExpressionStatement","src":"6768:29:24"},{"expression":{"arguments":[{"id":1885,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"6826:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1886,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6834:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1887,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6842:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1884,"name":"_computeAddReward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1934,"src":"6808:17:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":1888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6808:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1889,"nodeType":"ExpressionStatement","src":"6808:39:24"},{"eventCall":{"arguments":[{"id":1891,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1709,"src":"6875:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1892,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"6883:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1893,"name":"duration","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"6891:8:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1894,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"6901:4:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1890,"name":"RewardAdded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1386,"src":"6863:11:24","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256,uint256)"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6863:43:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1896,"nodeType":"EmitStatement","src":"6858:48:24"}]},"functionSelector":"75c93bb9","id":1898,"implemented":true,"kind":"function","modifiers":[],"name":"addReward","nameLocation":"4926:9:24","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"reward","nameLocation":"4944:6:24","nodeType":"VariableDeclaration","scope":1898,"src":"4936:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1702,"name":"uint256","nodeType":"ElementaryTypeName","src":"4936:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"duration","nameLocation":"4960:8:24","nodeType":"VariableDeclaration","scope":1898,"src":"4952:16:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1704,"name":"uint256","nodeType":"ElementaryTypeName","src":"4952:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4935:34:24"},"returnParameters":{"id":1707,"nodeType":"ParameterList","parameters":[],"src":"4993:0:24"},"scope":1963,"src":"4917:1996:24","stateMutability":"payable","virtual":true,"visibility":"public"},{"id":1907,"implemented":false,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"6928:13:24","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1900,"mutability":"mutable","name":"sender","nameLocation":"6950:6:24","nodeType":"VariableDeclaration","scope":1907,"src":"6942:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1899,"name":"address","nodeType":"ElementaryTypeName","src":"6942:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1902,"mutability":"mutable","name":"stakeData","nameLocation":"6971:9:24","nodeType":"VariableDeclaration","scope":1907,"src":"6958:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1901,"name":"bytes","nodeType":"ElementaryTypeName","src":"6958:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6941:40:24"},"returnParameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1905,"mutability":"mutable","name":"stakePoints","nameLocation":"7016:11:24","nodeType":"VariableDeclaration","scope":1907,"src":"7008:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"7008:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7007:21:24"},"scope":1963,"src":"6919:110:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":1916,"implemented":false,"kind":"function","modifiers":[],"name":"_computeWithdraw","nameLocation":"7044:16:24","nodeType":"FunctionDefinition","parameters":{"id":1912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"sender","nameLocation":"7069:6:24","nodeType":"VariableDeclaration","scope":1916,"src":"7061:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1908,"name":"address","nodeType":"ElementaryTypeName","src":"7061:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1911,"mutability":"mutable","name":"withdrawData","nameLocation":"7090:12:24","nodeType":"VariableDeclaration","scope":1916,"src":"7077:25:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1910,"name":"bytes","nodeType":"ElementaryTypeName","src":"7077:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7060:43:24"},"returnParameters":{"id":1915,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1914,"mutability":"mutable","name":"stakePoints","nameLocation":"7138:11:24","nodeType":"VariableDeclaration","scope":1916,"src":"7130:19:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1913,"name":"uint256","nodeType":"ElementaryTypeName","src":"7130:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7129:21:24"},"scope":1963,"src":"7035:116:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":1925,"implemented":false,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"7166:13:24","nodeType":"FunctionDefinition","parameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1918,"mutability":"mutable","name":"sender","nameLocation":"7188:6:24","nodeType":"VariableDeclaration","scope":1925,"src":"7180:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1917,"name":"address","nodeType":"ElementaryTypeName","src":"7180:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"reward","nameLocation":"7204:6:24","nodeType":"VariableDeclaration","scope":1925,"src":"7196:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"7196:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7179:32:24"},"returnParameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1923,"mutability":"mutable","name":"claimData","nameLocation":"7251:9:24","nodeType":"VariableDeclaration","scope":1925,"src":"7238:22:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1922,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7237:24:24"},"scope":1963,"src":"7157:105:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"id":1934,"implemented":false,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"7277:17:24","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1927,"mutability":"mutable","name":"sender","nameLocation":"7303:6:24","nodeType":"VariableDeclaration","scope":1934,"src":"7295:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1926,"name":"address","nodeType":"ElementaryTypeName","src":"7295:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1929,"mutability":"mutable","name":"reward","nameLocation":"7319:6:24","nodeType":"VariableDeclaration","scope":1934,"src":"7311:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1928,"name":"uint256","nodeType":"ElementaryTypeName","src":"7311:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1931,"mutability":"mutable","name":"dust","nameLocation":"7335:4:24","nodeType":"VariableDeclaration","scope":1934,"src":"7327:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1930,"name":"uint256","nodeType":"ElementaryTypeName","src":"7327:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7294:46:24"},"returnParameters":{"id":1933,"nodeType":"ParameterList","parameters":[],"src":"7357:0:24"},"scope":1963,"src":"7268:90:24","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1123,2824],"body":{"id":1947,"nodeType":"Block","src":"7523:65:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1943,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"7540:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1176_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7569:10:24","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":1123,"src":"7540:39:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7540:41:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1942,"id":1946,"nodeType":"Return","src":"7533:48:24"}]},"documentation":{"id":1935,"nodeType":"StructuredDocumentation","src":"7364:44:24","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1948,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"7422:10:24","nodeType":"FunctionDefinition","overrides":{"id":1939,"nodeType":"OverrideSpecifier","overrides":[{"id":1937,"name":"Context","nameLocations":["7466:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"7466:7:24"},{"id":1938,"name":"ForwarderRegistryContextBase","nameLocations":["7475:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"7475:28:24"}],"src":"7457:47:24"},"parameters":{"id":1936,"nodeType":"ParameterList","parameters":[],"src":"7432:2:24"},"returnParameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1948,"src":"7514:7:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"7514:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7513:9:24"},"scope":1963,"src":"7413:175:24","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1175,2833],"body":{"id":1961,"nodeType":"Block","src":"7758:63:24","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1957,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"7775:28:24","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1176_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":1958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7804:8:24","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"7775:37:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7775:39:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1956,"id":1960,"nodeType":"Return","src":"7768:46:24"}]},"documentation":{"id":1949,"nodeType":"StructuredDocumentation","src":"7594:44:24","text":"@inheritdoc ForwarderRegistryContextBase"},"id":1962,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"7652:8:24","nodeType":"FunctionDefinition","overrides":{"id":1953,"nodeType":"OverrideSpecifier","overrides":[{"id":1951,"name":"Context","nameLocations":["7694:7:24"],"nodeType":"IdentifierPath","referencedDeclaration":2842,"src":"7694:7:24"},{"id":1952,"name":"ForwarderRegistryContextBase","nameLocations":["7703:28:24"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"7703:28:24"}],"src":"7685:47:24"},"parameters":{"id":1950,"nodeType":"ParameterList","parameters":[],"src":"7660:2:24"},"returnParameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1955,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1962,"src":"7742:14:24","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1954,"name":"bytes","nodeType":"ElementaryTypeName","src":"7742:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7741:16:24"},"scope":1963,"src":"7643:178:24","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1964,"src":"884:6939:24","usedErrors":[225,248,886,1388,1390,1392,1394,1400,2856],"usedEvents":[271,280,289,1360,1368,1376,1386]}],"src":"32:7792:24"},"id":24},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","exportedSymbols":{"ERC20Receiver":[2197],"ERC20StakingLinearPool":[2162],"IERC20":[2403],"IForwarderRegistry":[1204],"LinearPool":[1963],"SafeERC20":[2812]},"id":2163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1965,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:25"},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","file":"./../LinearPool.sol","id":1967,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2163,"sourceUnit":1964,"src":"57:47:25","symbolAliases":[{"foreign":{"id":1966,"name":"LinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"65:10:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"./../../../token/ERC20/ERC20Receiver.sol","id":1969,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2163,"sourceUnit":2198,"src":"105:71:25","symbolAliases":[{"foreign":{"id":1968,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"113:13:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1972,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2163,"sourceUnit":2813,"src":"177:90:25","symbolAliases":[{"foreign":{"id":1970,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2812,"src":"185:9:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1971,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"196:6:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../../../metatx/interfaces/IForwarderRegistry.sol","id":1974,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2163,"sourceUnit":1205,"src":"268:87:25","symbolAliases":[{"foreign":{"id":1973,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"276:18:25","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1975,"name":"LinearPool","nameLocations":["401:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"401:10:25"},"id":1976,"nodeType":"InheritanceSpecifier","src":"401:10:25"},{"baseName":{"id":1977,"name":"ERC20Receiver","nameLocations":["413:13:25"],"nodeType":"IdentifierPath","referencedDeclaration":2197,"src":"413:13:25"},"id":1978,"nodeType":"InheritanceSpecifier","src":"413:13:25"}],"canonicalName":"ERC20StakingLinearPool","contractDependencies":[],"contractKind":"contract","fullyImplemented":false,"id":2162,"linearizedBaseContracts":[2162,2197,1963,1048,1188,1176,2911,11,44,881,898,2215,216,168,2842,330,314],"name":"ERC20StakingLinearPool","nameLocation":"375:22:25","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1982,"libraryName":{"id":1979,"name":"SafeERC20","nameLocations":["439:9:25"],"nodeType":"IdentifierPath","referencedDeclaration":2812,"src":"439:9:25"},"nodeType":"UsingForDirective","src":"433:27:25","typeName":{"id":1981,"nodeType":"UserDefinedTypeName","pathNode":{"id":1980,"name":"IERC20","nameLocations":["453:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"453:6:25"},"referencedDeclaration":2403,"src":"453:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"0479d644","id":1985,"mutability":"immutable","name":"STAKING_TOKEN","nameLocation":"490:13:25","nodeType":"VariableDeclaration","scope":2162,"src":"466:37:25","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":1984,"nodeType":"UserDefinedTypeName","pathNode":{"id":1983,"name":"IERC20","nameLocations":["466:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"466:6:25"},"referencedDeclaration":2403,"src":"466:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"public"},{"errorSelector":"c1ab6dc1","id":1987,"name":"InvalidToken","nameLocation":"516:12:25","nodeType":"ErrorDefinition","parameters":{"id":1986,"nodeType":"ParameterList","parameters":[],"src":"528:2:25"},"src":"510:21:25"},{"body":{"id":2003,"nodeType":"Block","src":"638:45:25","statements":[{"expression":{"id":2001,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1999,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"648:13:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2000,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1990,"src":"664:12:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"src":"648:28:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2002,"nodeType":"ExpressionStatement","src":"648:28:25"}]},"id":2004,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1996,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1993,"src":"619:17:25","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"id":1997,"kind":"baseConstructorSpecifier","modifierName":{"id":1995,"name":"LinearPool","nameLocations":["608:10:25"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"608:10:25"},"nodeType":"ModifierInvocation","src":"608:29:25"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1990,"mutability":"mutable","name":"stakingToken","nameLocation":"556:12:25","nodeType":"VariableDeclaration","scope":2004,"src":"549:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":1989,"nodeType":"UserDefinedTypeName","pathNode":{"id":1988,"name":"IERC20","nameLocations":["549:6:25"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"549:6:25"},"referencedDeclaration":2403,"src":"549:6:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1993,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"589:17:25","nodeType":"VariableDeclaration","scope":2004,"src":"570:36:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":1992,"nodeType":"UserDefinedTypeName","pathNode":{"id":1991,"name":"IForwarderRegistry","nameLocations":["570:18:25"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"570:18:25"},"referencedDeclaration":1204,"src":"570:18:25","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"548:59:25"},"returnParameters":{"id":1998,"nodeType":"ParameterList","parameters":[],"src":"638:0:25"},"scope":2162,"src":"537:146:25","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2214],"body":{"id":2049,"nodeType":"Block","src":"811:236:25","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2018,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"825:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"829:6:25","memberName":"sender","nodeType":"MemberAccess","src":"825:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":2022,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"847:13:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}],"id":2021,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"839:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2020,"name":"address","nodeType":"ElementaryTypeName","src":"839:7:25","typeDescriptions":{}}},"id":2023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"839:22:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"825:36:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2028,"nodeType":"IfStatement","src":"821:63:25","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2025,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"870:12:25","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"870:14:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2027,"nodeType":"RevertStatement","src":"863:21:25"}},{"assignments":[2030],"declarations":[{"constant":false,"id":2030,"mutability":"mutable","name":"requiresTransfer","nameLocation":"899:16:25","nodeType":"VariableDeclaration","scope":2049,"src":"894:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2029,"name":"bool","nodeType":"ElementaryTypeName","src":"894:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2032,"initialValue":{"hexValue":"66616c7365","id":2031,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"918:5:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"nodeType":"VariableDeclarationStatement","src":"894:29:25"},{"expression":{"arguments":[{"id":2034,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2008,"src":"940:4:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2037,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2030,"src":"957:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":2040,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2010,"src":"986:5:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2038,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"975:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2039,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"979:6:25","memberName":"encode","nodeType":"MemberAccess","src":"975:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:17:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2035,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"946:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"950:6:25","memberName":"encode","nodeType":"MemberAccess","src":"946:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"946:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2033,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"933:6:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"933:61:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2044,"nodeType":"ExpressionStatement","src":"933:61:25"},{"expression":{"expression":{"expression":{"id":2045,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1011:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$2162","typeString":"contract ERC20StakingLinearPool"}},"id":2046,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1016:15:25","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2050,"src":"1011:20:25","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1032:8:25","memberName":"selector","nodeType":"MemberAccess","src":"1011:29:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":2017,"id":2048,"nodeType":"Return","src":"1004:36:25"}]},"functionSelector":"4fc35859","id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"698:15:25","nodeType":"FunctionDefinition","overrides":{"id":2014,"nodeType":"OverrideSpecifier","overrides":[],"src":"785:8:25"},"parameters":{"id":2013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2006,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2050,"src":"714:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2005,"name":"address","nodeType":"ElementaryTypeName","src":"714:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2008,"mutability":"mutable","name":"from","nameLocation":"731:4:25","nodeType":"VariableDeclaration","scope":2050,"src":"723:12:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2007,"name":"address","nodeType":"ElementaryTypeName","src":"723:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2010,"mutability":"mutable","name":"value","nameLocation":"745:5:25","nodeType":"VariableDeclaration","scope":2050,"src":"737:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2009,"name":"uint256","nodeType":"ElementaryTypeName","src":"737:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2012,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2050,"src":"752:14:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2011,"name":"bytes","nodeType":"ElementaryTypeName","src":"752:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"713:54:25"},"returnParameters":{"id":2017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2016,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2050,"src":"803:6:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2015,"name":"bytes4","nodeType":"ElementaryTypeName","src":"803:6:25","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"802:8:25"},"scope":2162,"src":"689:358:25","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1558],"body":{"id":2070,"nodeType":"Block","src":"1126:156:25","statements":[{"assignments":[2057],"declarations":[{"constant":false,"id":2057,"mutability":"mutable","name":"requiresTransfer","nameLocation":"1181:16:25","nodeType":"VariableDeclaration","scope":2070,"src":"1176:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2056,"name":"bool","nodeType":"ElementaryTypeName","src":"1176:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2059,"initialValue":{"hexValue":"74727565","id":2058,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1200:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"nodeType":"VariableDeclarationStatement","src":"1176:28:25"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2061,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"1221:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1221:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2065,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1246:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2066,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2052,"src":"1264:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":2063,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1235:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1239:6:25","memberName":"encode","nodeType":"MemberAccess","src":"1235:10:25","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1235:39:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2060,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"1214:6:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1214:61:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2069,"nodeType":"ExpressionStatement","src":"1214:61:25"}]},"functionSelector":"2d1e0c02","id":2071,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1062:5:25","nodeType":"FunctionDefinition","overrides":{"id":2054,"nodeType":"OverrideSpecifier","overrides":[],"src":"1117:8:25"},"parameters":{"id":2053,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2052,"mutability":"mutable","name":"stakeData","nameLocation":"1083:9:25","nodeType":"VariableDeclaration","scope":2071,"src":"1068:24:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2051,"name":"bytes","nodeType":"ElementaryTypeName","src":"1068:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1067:26:25"},"returnParameters":{"id":2055,"nodeType":"ParameterList","parameters":[],"src":"1126:0:25"},"scope":2162,"src":"1053:229:25","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[1907],"body":{"id":2119,"nodeType":"Block","src":"1407:271:25","statements":[{"assignments":[2082,2084],"declarations":[{"constant":false,"id":2082,"mutability":"mutable","name":"requiresTransfer","nameLocation":"1423:16:25","nodeType":"VariableDeclaration","scope":2119,"src":"1418:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2081,"name":"bool","nodeType":"ElementaryTypeName","src":"1418:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2084,"mutability":"mutable","name":"data","nameLocation":"1454:4:25","nodeType":"VariableDeclaration","scope":2119,"src":"1441:17:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2083,"name":"bytes","nodeType":"ElementaryTypeName","src":"1441:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2094,"initialValue":{"arguments":[{"id":2087,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"1473:9:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1485:4:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":2088,"name":"bool","nodeType":"ElementaryTypeName","src":"1485:4:25","typeDescriptions":{}}},{"id":2091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1491:5:25","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2090,"name":"bytes","nodeType":"ElementaryTypeName","src":"1491:5:25","typeDescriptions":{}}}],"id":2092,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1484:13:25","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(bytes storage pointer))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_tuple$_t_type$_t_bool_$_$_t_type$_t_bytes_storage_ptr_$_$","typeString":"tuple(type(bool),type(bytes storage pointer))"}],"expression":{"id":2085,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1462:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2086,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1466:6:25","memberName":"decode","nodeType":"MemberAccess","src":"1462:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1462:36:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"1417:81:25"},{"expression":{"id":2103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2095,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"1508:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2098,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2084,"src":"1533:4:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2100,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1540:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2099,"name":"uint256","nodeType":"ElementaryTypeName","src":"1540:7:25","typeDescriptions":{}}}],"id":2101,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1539:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2096,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1522:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2097,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1526:6:25","memberName":"decode","nodeType":"MemberAccess","src":"1522:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1522:27:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1508:41:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2104,"nodeType":"ExpressionStatement","src":"1508:41:25"},{"condition":{"id":2105,"name":"requiresTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2082,"src":"1563:16:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2118,"nodeType":"IfStatement","src":"1559:113:25","trueBody":{"id":2117,"nodeType":"Block","src":"1581:91:25","statements":[{"expression":{"arguments":[{"id":2109,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2073,"src":"1626:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":2112,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1642:4:25","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$2162","typeString":"contract ERC20StakingLinearPool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC20StakingLinearPool_$2162","typeString":"contract ERC20StakingLinearPool"}],"id":2111,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1634:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2110,"name":"address","nodeType":"ElementaryTypeName","src":"1634:7:25","typeDescriptions":{}}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1634:13:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2114,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2079,"src":"1649:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2106,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"1595:13:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1609:16:25","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":2475,"src":"1595:30:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2403_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:66:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2116,"nodeType":"ExpressionStatement","src":"1595:66:25"}]}}]},"id":2120,"implemented":true,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"1297:13:25","nodeType":"FunctionDefinition","overrides":{"id":2077,"nodeType":"OverrideSpecifier","overrides":[],"src":"1368:8:25"},"parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2073,"mutability":"mutable","name":"staker","nameLocation":"1319:6:25","nodeType":"VariableDeclaration","scope":2120,"src":"1311:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2072,"name":"address","nodeType":"ElementaryTypeName","src":"1311:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"stakeData","nameLocation":"1340:9:25","nodeType":"VariableDeclaration","scope":2120,"src":"1327:22:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2074,"name":"bytes","nodeType":"ElementaryTypeName","src":"1327:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1310:40:25"},"returnParameters":{"id":2080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2079,"mutability":"mutable","name":"stakePoints","nameLocation":"1394:11:25","nodeType":"VariableDeclaration","scope":2120,"src":"1386:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2078,"name":"uint256","nodeType":"ElementaryTypeName","src":"1386:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1385:21:25"},"scope":2162,"src":"1288:390:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1615],"body":{"id":2132,"nodeType":"Block","src":"1755:94:25","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":2127,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[1948],"referencedDeclaration":1948,"src":"1815:10:25","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":2128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1815:12:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2129,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2122,"src":"1829:12:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2126,"name":"_withdraw","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1658,"src":"1805:9:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:37:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2131,"nodeType":"ExpressionStatement","src":"1805:37:25"}]},"functionSelector":"0968f264","id":2133,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"1693:8:25","nodeType":"FunctionDefinition","overrides":{"id":2124,"nodeType":"OverrideSpecifier","overrides":[],"src":"1746:8:25"},"parameters":{"id":2123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2122,"mutability":"mutable","name":"withdrawData","nameLocation":"1717:12:25","nodeType":"VariableDeclaration","scope":2133,"src":"1702:27:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2121,"name":"bytes","nodeType":"ElementaryTypeName","src":"1702:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1701:29:25"},"returnParameters":{"id":2125,"nodeType":"ParameterList","parameters":[],"src":"1755:0:25"},"scope":2162,"src":"1684:165:25","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1916],"body":{"id":2160,"nodeType":"Block","src":"1980:123:25","statements":[{"expression":{"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2143,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"1990:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2146,"name":"withdrawData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"2015:12:25","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":2148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2030:7:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2147,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:25","typeDescriptions":{}}}],"id":2149,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2029:9:25","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":2144,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2004:3:25","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2145,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2008:6:25","memberName":"decode","nodeType":"MemberAccess","src":"2004:10:25","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2004:35:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1990:49:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2152,"nodeType":"ExpressionStatement","src":"1990:49:25"},{"expression":{"arguments":[{"id":2156,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2135,"src":"2076:6:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2157,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2141,"src":"2084:11:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2153,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"2049:13:25","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2063:12:25","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":2448,"src":"2049:26:25","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$2403_$","typeString":"function (contract IERC20,address,uint256)"}},"id":2158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:47:25","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2159,"nodeType":"ExpressionStatement","src":"2049:47:25"}]},"id":2161,"implemented":true,"kind":"function","modifiers":[],"name":"_computeWithdraw","nameLocation":"1864:16:25","nodeType":"FunctionDefinition","overrides":{"id":2139,"nodeType":"OverrideSpecifier","overrides":[],"src":"1941:8:25"},"parameters":{"id":2138,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2135,"mutability":"mutable","name":"staker","nameLocation":"1889:6:25","nodeType":"VariableDeclaration","scope":2161,"src":"1881:14:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2134,"name":"address","nodeType":"ElementaryTypeName","src":"1881:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2137,"mutability":"mutable","name":"withdrawData","nameLocation":"1910:12:25","nodeType":"VariableDeclaration","scope":2161,"src":"1897:25:25","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2136,"name":"bytes","nodeType":"ElementaryTypeName","src":"1897:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1880:43:25"},"returnParameters":{"id":2142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2141,"mutability":"mutable","name":"stakePoints","nameLocation":"1967:11:25","nodeType":"VariableDeclaration","scope":2161,"src":"1959:19:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2140,"name":"uint256","nodeType":"ElementaryTypeName","src":"1959:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1958:21:25"},"scope":2162,"src":"1855:248:25","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2163,"src":"357:1748:25","usedErrors":[225,248,886,1388,1390,1392,1394,1400,1987,2415,2856],"usedEvents":[271,280,289,1360,1368,1376,1386]}],"src":"32:2074:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","exportedSymbols":{"ERC20Receiver":[2197],"IERC20Receiver":[2215],"InterfaceDetection":[881],"InterfaceDetectionStorage":[999]},"id":2198,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2164,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./interfaces/IERC20Receiver.sol","id":2166,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2198,"sourceUnit":2216,"src":"58:63:26","symbolAliases":[{"foreign":{"id":2165,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"66:14:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"../../introspection/libraries/InterfaceDetectionStorage.sol","id":2168,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2198,"sourceUnit":1000,"src":"122:102:26","symbolAliases":[{"foreign":{"id":2167,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"130:25:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"../../introspection/InterfaceDetection.sol","id":2170,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2198,"sourceUnit":882,"src":"225:78:26","symbolAliases":[{"foreign":{"id":2169,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":881,"src":"233:18:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2172,"name":"IERC20Receiver","nameLocations":["511:14:26"],"nodeType":"IdentifierPath","referencedDeclaration":2215,"src":"511:14:26"},"id":2173,"nodeType":"InheritanceSpecifier","src":"511:14:26"},{"baseName":{"id":2174,"name":"InterfaceDetection","nameLocations":["527:18:26"],"nodeType":"IdentifierPath","referencedDeclaration":881,"src":"527:18:26"},"id":2175,"nodeType":"InheritanceSpecifier","src":"527:18:26"}],"canonicalName":"ERC20Receiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":2171,"nodeType":"StructuredDocumentation","src":"305:171:26","text":"@title ERC20 Fungible Token Standard, Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":2197,"linearizedBaseContracts":[2197,881,898,2215],"name":"ERC20Receiver","nameLocation":"494:13:26","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2179,"libraryName":{"id":2176,"name":"InterfaceDetectionStorage","nameLocations":["558:25:26"],"nodeType":"IdentifierPath","referencedDeclaration":999,"src":"558:25:26"},"nodeType":"UsingForDirective","src":"552:69:26","typeName":{"id":2178,"nodeType":"UserDefinedTypeName","pathNode":{"id":2177,"name":"InterfaceDetectionStorage.Layout","nameLocations":["588:25:26","614:6:26"],"nodeType":"IdentifierPath","referencedDeclaration":909,"src":"588:32:26"},"referencedDeclaration":909,"src":"588:32:26","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":2195,"nodeType":"Block","src":"726:113:26","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2189,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2215,"src":"798:14:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2215_$","typeString":"type(contract IERC20Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2215_$","typeString":"type(contract IERC20Receiver)"}],"id":2188,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"793:4:26","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:20:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Receiver_$2215","typeString":"type(contract IERC20Receiver)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"814:11:26","memberName":"interfaceId","nodeType":"MemberAccess","src":"793:32:26","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2183,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":999,"src":"736:25:26","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$999_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"762:6:26","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":998,"src":"736:32:26","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:34:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$909_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:21:26","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":952,"src":"736:56:26","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$909_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$909_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:96:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2194,"nodeType":"ExpressionStatement","src":"736:96:26"}]},"documentation":{"id":2180,"nodeType":"StructuredDocumentation","src":"627:80:26","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"id":2196,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2181,"nodeType":"ParameterList","parameters":[],"src":"723:2:26"},"returnParameters":{"id":2182,"nodeType":"ParameterList","parameters":[],"src":"726:0:26"},"scope":2197,"src":"712:127:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2198,"src":"476:365:26","usedErrors":[886],"usedEvents":[]}],"src":"32:810:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[2215]},"id":2216,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2199,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2200,"nodeType":"StructuredDocumentation","src":"58:281:27","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":2215,"linearizedBaseContracts":[2215],"name":"IERC20Receiver","nameLocation":"349:14:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2201,"nodeType":"StructuredDocumentation","src":"370:532:27","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":2214,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"916:15:27","nodeType":"FunctionDefinition","parameters":{"id":2210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2203,"mutability":"mutable","name":"operator","nameLocation":"940:8:27","nodeType":"VariableDeclaration","scope":2214,"src":"932:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2202,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2205,"mutability":"mutable","name":"from","nameLocation":"958:4:27","nodeType":"VariableDeclaration","scope":2214,"src":"950:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2204,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2207,"mutability":"mutable","name":"value","nameLocation":"972:5:27","nodeType":"VariableDeclaration","scope":2214,"src":"964:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2206,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2209,"mutability":"mutable","name":"data","nameLocation":"994:4:27","nodeType":"VariableDeclaration","scope":2214,"src":"979:19:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2208,"name":"bytes","nodeType":"ElementaryTypeName","src":"979:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"931:68:27"},"returnParameters":{"id":2213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2212,"mutability":"mutable","name":"magicValue","nameLocation":"1025:10:27","nodeType":"VariableDeclaration","scope":2214,"src":"1018:17:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2211,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1018:6:27","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1017:19:27"},"scope":2215,"src":"907:130:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2216,"src":"339:700:27","usedErrors":[],"usedEvents":[]}],"src":"32:1008:27"},"id":27},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol","exportedSymbols":{"Address":[2235]},"id":2236,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2217,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"32:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":2235,"linearizedBaseContracts":[2235],"name":"Address","nameLocation":"66:7:28","nodeType":"ContractDefinition","nodes":[{"body":{"id":2233,"nodeType":"Block","src":"344:122:28","statements":[{"assignments":[2226],"declarations":[{"constant":false,"id":2226,"mutability":"mutable","name":"size","nameLocation":"362:4:28","nodeType":"VariableDeclaration","scope":2233,"src":"354:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2225,"name":"uint256","nodeType":"ElementaryTypeName","src":"354:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2227,"nodeType":"VariableDeclarationStatement","src":"354:12:28"},{"AST":{"nativeSrc":"385:49:28","nodeType":"YulBlock","src":"385:49:28","statements":[{"nativeSrc":"399:25:28","nodeType":"YulAssignment","src":"399:25:28","value":{"arguments":[{"name":"addr","nativeSrc":"419:4:28","nodeType":"YulIdentifier","src":"419:4:28"}],"functionName":{"name":"extcodesize","nativeSrc":"407:11:28","nodeType":"YulIdentifier","src":"407:11:28"},"nativeSrc":"407:17:28","nodeType":"YulFunctionCall","src":"407:17:28"},"variableNames":[{"name":"size","nativeSrc":"399:4:28","nodeType":"YulIdentifier","src":"399:4:28"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2220,"isOffset":false,"isSlot":false,"src":"419:4:28","valueSize":1},{"declaration":2226,"isOffset":false,"isSlot":false,"src":"399:4:28","valueSize":1}],"id":2228,"nodeType":"InlineAssembly","src":"376:58:28"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2229,"name":"size","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2226,"src":"450:4:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"458:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"450:9:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2224,"id":2232,"nodeType":"Return","src":"443:16:28"}]},"documentation":{"id":2218,"nodeType":"StructuredDocumentation","src":"80:195:28","text":"@notice Checks if the address is a deployed smart contract.\n @param addr The address to check.\n @return hasBytecode True if `addr` is a deployed smart contract, false otherwise."},"id":2234,"implemented":true,"kind":"function","modifiers":[],"name":"hasBytecode","nameLocation":"289:11:28","nodeType":"FunctionDefinition","parameters":{"id":2221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2220,"mutability":"mutable","name":"addr","nameLocation":"309:4:28","nodeType":"VariableDeclaration","scope":2234,"src":"301:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2219,"name":"address","nodeType":"ElementaryTypeName","src":"301:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"300:14:28"},"returnParameters":{"id":2224,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2234,"src":"338:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2222,"name":"bool","nodeType":"ElementaryTypeName","src":"338:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"337:6:28"},"scope":2235,"src":"280:186:28","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2236,"src":"58:410:28","usedErrors":[],"usedEvents":[]}],"src":"32:437:28"},"id":28},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","exportedSymbols":{"IERC1363":[2317],"IERC165":[3047],"IERC20":[2403]},"id":2318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2237,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"107:24:29"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"./IERC20.sol","id":2239,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":2326,"src":"133:36:29","symbolAliases":[{"foreign":{"id":2238,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"141:6:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":2241,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2318,"sourceUnit":2322,"src":"170:38:29","symbolAliases":[{"foreign":{"id":2240,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"178:7:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2243,"name":"IERC20","nameLocations":["590:6:29"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"590:6:29"},"id":2244,"nodeType":"InheritanceSpecifier","src":"590:6:29"},{"baseName":{"id":2245,"name":"IERC165","nameLocations":["598:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":3047,"src":"598:7:29"},"id":2246,"nodeType":"InheritanceSpecifier","src":"598:7:29"}],"canonicalName":"IERC1363","contractDependencies":[],"contractKind":"interface","documentation":{"id":2242,"nodeType":"StructuredDocumentation","src":"210:357:29","text":" @title IERC1363\n @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction."},"fullyImplemented":false,"id":2317,"linearizedBaseContracts":[2317,3047,2403],"name":"IERC1363","nameLocation":"578:8:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2247,"nodeType":"StructuredDocumentation","src":"1148:370:29","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"1296ee62","id":2256,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"1532:15:29","nodeType":"FunctionDefinition","parameters":{"id":2252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2249,"mutability":"mutable","name":"to","nameLocation":"1556:2:29","nodeType":"VariableDeclaration","scope":2256,"src":"1548:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2248,"name":"address","nodeType":"ElementaryTypeName","src":"1548:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2251,"mutability":"mutable","name":"value","nameLocation":"1568:5:29","nodeType":"VariableDeclaration","scope":2256,"src":"1560:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2250,"name":"uint256","nodeType":"ElementaryTypeName","src":"1560:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1547:27:29"},"returnParameters":{"id":2255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2254,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2256,"src":"1593:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2253,"name":"bool","nodeType":"ElementaryTypeName","src":"1593:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1592:6:29"},"scope":2317,"src":"1523:76:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2257,"nodeType":"StructuredDocumentation","src":"1605:453:29","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"4000aea0","id":2268,"implemented":false,"kind":"function","modifiers":[],"name":"transferAndCall","nameLocation":"2072:15:29","nodeType":"FunctionDefinition","parameters":{"id":2264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2259,"mutability":"mutable","name":"to","nameLocation":"2096:2:29","nodeType":"VariableDeclaration","scope":2268,"src":"2088:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2258,"name":"address","nodeType":"ElementaryTypeName","src":"2088:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2261,"mutability":"mutable","name":"value","nameLocation":"2108:5:29","nodeType":"VariableDeclaration","scope":2268,"src":"2100:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2260,"name":"uint256","nodeType":"ElementaryTypeName","src":"2100:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2263,"mutability":"mutable","name":"data","nameLocation":"2130:4:29","nodeType":"VariableDeclaration","scope":2268,"src":"2115:19:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2262,"name":"bytes","nodeType":"ElementaryTypeName","src":"2115:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2087:48:29"},"returnParameters":{"id":2267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2266,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2268,"src":"2154:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2265,"name":"bool","nodeType":"ElementaryTypeName","src":"2154:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2153:6:29"},"scope":2317,"src":"2063:97:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2269,"nodeType":"StructuredDocumentation","src":"2166:453:29","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"d8fbe994","id":2280,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"2633:19:29","nodeType":"FunctionDefinition","parameters":{"id":2276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2271,"mutability":"mutable","name":"from","nameLocation":"2661:4:29","nodeType":"VariableDeclaration","scope":2280,"src":"2653:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2270,"name":"address","nodeType":"ElementaryTypeName","src":"2653:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2273,"mutability":"mutable","name":"to","nameLocation":"2675:2:29","nodeType":"VariableDeclaration","scope":2280,"src":"2667:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2272,"name":"address","nodeType":"ElementaryTypeName","src":"2667:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2275,"mutability":"mutable","name":"value","nameLocation":"2687:5:29","nodeType":"VariableDeclaration","scope":2280,"src":"2679:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2274,"name":"uint256","nodeType":"ElementaryTypeName","src":"2679:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2652:41:29"},"returnParameters":{"id":2279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2278,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2280,"src":"2712:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2277,"name":"bool","nodeType":"ElementaryTypeName","src":"2712:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2711:6:29"},"scope":2317,"src":"2624:94:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"2724:536:29","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n @param from The address which you want to send tokens from.\n @param to The address which you want to transfer to.\n @param value The amount of tokens to be transferred.\n @param data Additional data with no specified format, sent in call to `to`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"c1d34b89","id":2294,"implemented":false,"kind":"function","modifiers":[],"name":"transferFromAndCall","nameLocation":"3274:19:29","nodeType":"FunctionDefinition","parameters":{"id":2290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2283,"mutability":"mutable","name":"from","nameLocation":"3302:4:29","nodeType":"VariableDeclaration","scope":2294,"src":"3294:12:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2282,"name":"address","nodeType":"ElementaryTypeName","src":"3294:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2285,"mutability":"mutable","name":"to","nameLocation":"3316:2:29","nodeType":"VariableDeclaration","scope":2294,"src":"3308:10:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2284,"name":"address","nodeType":"ElementaryTypeName","src":"3308:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2287,"mutability":"mutable","name":"value","nameLocation":"3328:5:29","nodeType":"VariableDeclaration","scope":2294,"src":"3320:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2286,"name":"uint256","nodeType":"ElementaryTypeName","src":"3320:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2289,"mutability":"mutable","name":"data","nameLocation":"3350:4:29","nodeType":"VariableDeclaration","scope":2294,"src":"3335:19:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2288,"name":"bytes","nodeType":"ElementaryTypeName","src":"3335:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3293:62:29"},"returnParameters":{"id":2293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2294,"src":"3374:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2291,"name":"bool","nodeType":"ElementaryTypeName","src":"3374:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3373:6:29"},"scope":2317,"src":"3265:115:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2295,"nodeType":"StructuredDocumentation","src":"3386:390:29","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"3177029f","id":2304,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"3790:14:29","nodeType":"FunctionDefinition","parameters":{"id":2300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2297,"mutability":"mutable","name":"spender","nameLocation":"3813:7:29","nodeType":"VariableDeclaration","scope":2304,"src":"3805:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2296,"name":"address","nodeType":"ElementaryTypeName","src":"3805:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2299,"mutability":"mutable","name":"value","nameLocation":"3830:5:29","nodeType":"VariableDeclaration","scope":2304,"src":"3822:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2298,"name":"uint256","nodeType":"ElementaryTypeName","src":"3822:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3804:32:29"},"returnParameters":{"id":2303,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2302,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2304,"src":"3855:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2301,"name":"bool","nodeType":"ElementaryTypeName","src":"3855:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3854:6:29"},"scope":2317,"src":"3781:80:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2305,"nodeType":"StructuredDocumentation","src":"3867:478:29","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n @param spender The address which will spend the funds.\n @param value The amount of tokens to be spent.\n @param data Additional data with no specified format, sent in call to `spender`.\n @return A boolean value indicating whether the operation succeeded unless throwing."},"functionSelector":"cae9ca51","id":2316,"implemented":false,"kind":"function","modifiers":[],"name":"approveAndCall","nameLocation":"4359:14:29","nodeType":"FunctionDefinition","parameters":{"id":2312,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2307,"mutability":"mutable","name":"spender","nameLocation":"4382:7:29","nodeType":"VariableDeclaration","scope":2316,"src":"4374:15:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2306,"name":"address","nodeType":"ElementaryTypeName","src":"4374:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2309,"mutability":"mutable","name":"value","nameLocation":"4399:5:29","nodeType":"VariableDeclaration","scope":2316,"src":"4391:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2308,"name":"uint256","nodeType":"ElementaryTypeName","src":"4391:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2311,"mutability":"mutable","name":"data","nameLocation":"4421:4:29","nodeType":"VariableDeclaration","scope":2316,"src":"4406:19:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2310,"name":"bytes","nodeType":"ElementaryTypeName","src":"4406:5:29","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4373:53:29"},"returnParameters":{"id":2315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2314,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2316,"src":"4445:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2313,"name":"bool","nodeType":"ElementaryTypeName","src":"4445:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4444:6:29"},"scope":2317,"src":"4350:101:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2318,"src":"568:3885:29","usedErrors":[],"usedEvents":[2337,2346]}],"src":"107:4347:29"},"id":29},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3047]},"id":2322,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2319,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:30"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":2321,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2322,"sourceUnit":3048,"src":"132:59:30","symbolAliases":[{"foreign":{"id":2320,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3047,"src":"140:7:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"106:86:30"},"id":30},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[2403]},"id":2326,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2323,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"105:24:31"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":2325,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2326,"sourceUnit":2404,"src":"131:49:31","symbolAliases":[{"foreign":{"id":2324,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"139:6:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""}],"src":"105:76:31"},"id":31},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[2403]},"id":2404,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2327,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"106:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":2328,"nodeType":"StructuredDocumentation","src":"132:71:32","text":" @dev Interface of the ERC-20 standard as defined in the ERC."},"fullyImplemented":false,"id":2403,"linearizedBaseContracts":[2403],"name":"IERC20","nameLocation":"214:6:32","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2329,"nodeType":"StructuredDocumentation","src":"227:158:32","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2337,"name":"Transfer","nameLocation":"396:8:32","nodeType":"EventDefinition","parameters":{"id":2336,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2331,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"421:4:32","nodeType":"VariableDeclaration","scope":2337,"src":"405:20:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2330,"name":"address","nodeType":"ElementaryTypeName","src":"405:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2333,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"443:2:32","nodeType":"VariableDeclaration","scope":2337,"src":"427:18:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2332,"name":"address","nodeType":"ElementaryTypeName","src":"427:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2335,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"455:5:32","nodeType":"VariableDeclaration","scope":2337,"src":"447:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2334,"name":"uint256","nodeType":"ElementaryTypeName","src":"447:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"404:57:32"},"src":"390:72:32"},{"anonymous":false,"documentation":{"id":2338,"nodeType":"StructuredDocumentation","src":"468:148:32","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2346,"name":"Approval","nameLocation":"627:8:32","nodeType":"EventDefinition","parameters":{"id":2345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"652:5:32","nodeType":"VariableDeclaration","scope":2346,"src":"636:21:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2339,"name":"address","nodeType":"ElementaryTypeName","src":"636:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2342,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"675:7:32","nodeType":"VariableDeclaration","scope":2346,"src":"659:23:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2341,"name":"address","nodeType":"ElementaryTypeName","src":"659:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2344,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"692:5:32","nodeType":"VariableDeclaration","scope":2346,"src":"684:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2343,"name":"uint256","nodeType":"ElementaryTypeName","src":"684:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"635:63:32"},"src":"621:78:32"},{"documentation":{"id":2347,"nodeType":"StructuredDocumentation","src":"705:65:32","text":" @dev Returns the value of tokens in existence."},"functionSelector":"18160ddd","id":2352,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"784:11:32","nodeType":"FunctionDefinition","parameters":{"id":2348,"nodeType":"ParameterList","parameters":[],"src":"795:2:32"},"returnParameters":{"id":2351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2350,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2352,"src":"821:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2349,"name":"uint256","nodeType":"ElementaryTypeName","src":"821:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"820:9:32"},"scope":2403,"src":"775:55:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"836:71:32","text":" @dev Returns the value of tokens owned by `account`."},"functionSelector":"70a08231","id":2360,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:32","nodeType":"FunctionDefinition","parameters":{"id":2356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"account","nameLocation":"939:7:32","nodeType":"VariableDeclaration","scope":2360,"src":"931:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:32"},"returnParameters":{"id":2359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2358,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2360,"src":"971:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2357,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:32"},"scope":2403,"src":"912:68:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2361,"nodeType":"StructuredDocumentation","src":"986:213:32","text":" @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":2370,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1213:8:32","nodeType":"FunctionDefinition","parameters":{"id":2366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2363,"mutability":"mutable","name":"to","nameLocation":"1230:2:32","nodeType":"VariableDeclaration","scope":2370,"src":"1222:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2362,"name":"address","nodeType":"ElementaryTypeName","src":"1222:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2365,"mutability":"mutable","name":"value","nameLocation":"1242:5:32","nodeType":"VariableDeclaration","scope":2370,"src":"1234:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2364,"name":"uint256","nodeType":"ElementaryTypeName","src":"1234:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1221:27:32"},"returnParameters":{"id":2369,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2368,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2370,"src":"1267:4:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2367,"name":"bool","nodeType":"ElementaryTypeName","src":"1267:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1266:6:32"},"scope":2403,"src":"1204:69:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2371,"nodeType":"StructuredDocumentation","src":"1279:264:32","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":2380,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1557:9:32","nodeType":"FunctionDefinition","parameters":{"id":2376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2373,"mutability":"mutable","name":"owner","nameLocation":"1575:5:32","nodeType":"VariableDeclaration","scope":2380,"src":"1567:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2372,"name":"address","nodeType":"ElementaryTypeName","src":"1567:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2375,"mutability":"mutable","name":"spender","nameLocation":"1590:7:32","nodeType":"VariableDeclaration","scope":2380,"src":"1582:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2374,"name":"address","nodeType":"ElementaryTypeName","src":"1582:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1566:32:32"},"returnParameters":{"id":2379,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2380,"src":"1622:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2377,"name":"uint256","nodeType":"ElementaryTypeName","src":"1622:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1621:9:32"},"scope":2403,"src":"1548:83:32","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2381,"nodeType":"StructuredDocumentation","src":"1637:667:32","text":" @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2390,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2318:7:32","nodeType":"FunctionDefinition","parameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2383,"mutability":"mutable","name":"spender","nameLocation":"2334:7:32","nodeType":"VariableDeclaration","scope":2390,"src":"2326:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2382,"name":"address","nodeType":"ElementaryTypeName","src":"2326:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2385,"mutability":"mutable","name":"value","nameLocation":"2351:5:32","nodeType":"VariableDeclaration","scope":2390,"src":"2343:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"2343:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2325:32:32"},"returnParameters":{"id":2389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2388,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2390,"src":"2376:4:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2387,"name":"bool","nodeType":"ElementaryTypeName","src":"2376:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2375:6:32"},"scope":2403,"src":"2309:73:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2391,"nodeType":"StructuredDocumentation","src":"2388:297:32","text":" @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2402,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2699:12:32","nodeType":"FunctionDefinition","parameters":{"id":2398,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2393,"mutability":"mutable","name":"from","nameLocation":"2720:4:32","nodeType":"VariableDeclaration","scope":2402,"src":"2712:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2392,"name":"address","nodeType":"ElementaryTypeName","src":"2712:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2395,"mutability":"mutable","name":"to","nameLocation":"2734:2:32","nodeType":"VariableDeclaration","scope":2402,"src":"2726:10:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2394,"name":"address","nodeType":"ElementaryTypeName","src":"2726:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2397,"mutability":"mutable","name":"value","nameLocation":"2746:5:32","nodeType":"VariableDeclaration","scope":2402,"src":"2738:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"2738:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2711:41:32"},"returnParameters":{"id":2401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2402,"src":"2771:4:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2399,"name":"bool","nodeType":"ElementaryTypeName","src":"2771:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2770:6:32"},"scope":2403,"src":"2690:87:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2404,"src":"204:2575:32","usedErrors":[],"usedEvents":[2337,2346]}],"src":"106:2674:32"},"id":32},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"IERC1363":[2317],"IERC20":[2403],"SafeERC20":[2812]},"id":2813,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2405,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:33"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":2407,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2813,"sourceUnit":2404,"src":"141:37:33","symbolAliases":[{"foreign":{"id":2406,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"149:6:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1363.sol","file":"../../../interfaces/IERC1363.sol","id":2409,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2813,"sourceUnit":2318,"src":"179:58:33","symbolAliases":[{"foreign":{"id":2408,"name":"IERC1363","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2317,"src":"187:8:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":2410,"nodeType":"StructuredDocumentation","src":"239:458:33","text":" @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":2812,"linearizedBaseContracts":[2812],"name":"SafeERC20","nameLocation":"706:9:33","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2411,"nodeType":"StructuredDocumentation","src":"722:65:33","text":" @dev An operation with an ERC-20 token failed."},"errorSelector":"5274afe7","id":2415,"name":"SafeERC20FailedOperation","nameLocation":"798:24:33","nodeType":"ErrorDefinition","parameters":{"id":2414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2413,"mutability":"mutable","name":"token","nameLocation":"831:5:33","nodeType":"VariableDeclaration","scope":2415,"src":"823:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2412,"name":"address","nodeType":"ElementaryTypeName","src":"823:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"822:15:33"},"src":"792:46:33"},{"documentation":{"id":2416,"nodeType":"StructuredDocumentation","src":"844:71:33","text":" @dev Indicates a failed `decreaseAllowance` request."},"errorSelector":"e570110f","id":2424,"name":"SafeERC20FailedDecreaseAllowance","nameLocation":"926:32:33","nodeType":"ErrorDefinition","parameters":{"id":2423,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"spender","nameLocation":"967:7:33","nodeType":"VariableDeclaration","scope":2424,"src":"959:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2417,"name":"address","nodeType":"ElementaryTypeName","src":"959:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2420,"mutability":"mutable","name":"currentAllowance","nameLocation":"984:16:33","nodeType":"VariableDeclaration","scope":2424,"src":"976:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2419,"name":"uint256","nodeType":"ElementaryTypeName","src":"976:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2422,"mutability":"mutable","name":"requestedDecrease","nameLocation":"1010:17:33","nodeType":"VariableDeclaration","scope":2424,"src":"1002:25:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2421,"name":"uint256","nodeType":"ElementaryTypeName","src":"1002:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"958:70:33"},"src":"920:109:33"},{"body":{"id":2447,"nodeType":"Block","src":"1291:88:33","statements":[{"expression":{"arguments":[{"id":2436,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"1321:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":2439,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2428,"src":"1343:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1349:8:33","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2370,"src":"1343:14:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":2441,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2430,"src":"1360:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2442,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2432,"src":"1364:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2443,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1359:11:33","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":2437,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1328:3:33","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2438,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1332:10:33","memberName":"encodeCall","nodeType":"MemberAccess","src":"1328:14:33","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2444,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1328:43:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2435,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"1301:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1301:71:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2446,"nodeType":"ExpressionStatement","src":"1301:71:33"}]},"documentation":{"id":2425,"nodeType":"StructuredDocumentation","src":"1035:179:33","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":2448,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"1228:12:33","nodeType":"FunctionDefinition","parameters":{"id":2433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2428,"mutability":"mutable","name":"token","nameLocation":"1248:5:33","nodeType":"VariableDeclaration","scope":2448,"src":"1241:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2427,"nodeType":"UserDefinedTypeName","pathNode":{"id":2426,"name":"IERC20","nameLocations":["1241:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"1241:6:33"},"referencedDeclaration":2403,"src":"1241:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2430,"mutability":"mutable","name":"to","nameLocation":"1263:2:33","nodeType":"VariableDeclaration","scope":2448,"src":"1255:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2429,"name":"address","nodeType":"ElementaryTypeName","src":"1255:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2432,"mutability":"mutable","name":"value","nameLocation":"1275:5:33","nodeType":"VariableDeclaration","scope":2448,"src":"1267:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2431,"name":"uint256","nodeType":"ElementaryTypeName","src":"1267:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1240:41:33"},"returnParameters":{"id":2434,"nodeType":"ParameterList","parameters":[],"src":"1291:0:33"},"scope":2812,"src":"1219:160:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2474,"nodeType":"Block","src":"1708:98:33","statements":[{"expression":{"arguments":[{"id":2462,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"1738:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":2465,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2452,"src":"1760:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2466,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1766:12:33","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2402,"src":"1760:18:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},{"components":[{"id":2467,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"1781:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2468,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2456,"src":"1787:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2458,"src":"1791:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2470,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1780:17:33","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_address_$_t_uint256_$","typeString":"tuple(address,address,uint256)"}],"expression":{"id":2463,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1745:3:33","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2464,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1749:10:33","memberName":"encodeCall","nodeType":"MemberAccess","src":"1745:14:33","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1745:53:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2461,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"1718:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2472,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:81:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2473,"nodeType":"ExpressionStatement","src":"1718:81:33"}]},"documentation":{"id":2449,"nodeType":"StructuredDocumentation","src":"1385:228:33","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":2475,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1627:16:33","nodeType":"FunctionDefinition","parameters":{"id":2459,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2452,"mutability":"mutable","name":"token","nameLocation":"1651:5:33","nodeType":"VariableDeclaration","scope":2475,"src":"1644:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2451,"nodeType":"UserDefinedTypeName","pathNode":{"id":2450,"name":"IERC20","nameLocations":["1644:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"1644:6:33"},"referencedDeclaration":2403,"src":"1644:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2454,"mutability":"mutable","name":"from","nameLocation":"1666:4:33","nodeType":"VariableDeclaration","scope":2475,"src":"1658:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2453,"name":"address","nodeType":"ElementaryTypeName","src":"1658:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2456,"mutability":"mutable","name":"to","nameLocation":"1680:2:33","nodeType":"VariableDeclaration","scope":2475,"src":"1672:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2455,"name":"address","nodeType":"ElementaryTypeName","src":"1672:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2458,"mutability":"mutable","name":"value","nameLocation":"1692:5:33","nodeType":"VariableDeclaration","scope":2475,"src":"1684:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1684:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1643:55:33"},"returnParameters":{"id":2460,"nodeType":"ParameterList","parameters":[],"src":"1708:0:33"},"scope":2812,"src":"1618:188:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2505,"nodeType":"Block","src":"2548:139:33","statements":[{"assignments":[2487],"declarations":[{"constant":false,"id":2487,"mutability":"mutable","name":"oldAllowance","nameLocation":"2566:12:33","nodeType":"VariableDeclaration","scope":2505,"src":"2558:20:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2486,"name":"uint256","nodeType":"ElementaryTypeName","src":"2558:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2496,"initialValue":{"arguments":[{"arguments":[{"id":2492,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2605:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2812","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2812","typeString":"library SafeERC20"}],"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2597:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2490,"name":"address","nodeType":"ElementaryTypeName","src":"2597:7:33","typeDescriptions":{}}},"id":2493,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2597:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2494,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"2612:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2488,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"2581:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2587:9:33","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2380,"src":"2581:15:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2581:39:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2558:62:33"},{"expression":{"arguments":[{"id":2498,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2479,"src":"2643:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":2499,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2481,"src":"2650:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2500,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2487,"src":"2659:12:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2501,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"2674:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2659:20:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2497,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"2630:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2630:50:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2504,"nodeType":"ExpressionStatement","src":"2630:50:33"}]},"documentation":{"id":2476,"nodeType":"StructuredDocumentation","src":"1812:645:33","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":2506,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2471:21:33","nodeType":"FunctionDefinition","parameters":{"id":2484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2479,"mutability":"mutable","name":"token","nameLocation":"2500:5:33","nodeType":"VariableDeclaration","scope":2506,"src":"2493:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2478,"nodeType":"UserDefinedTypeName","pathNode":{"id":2477,"name":"IERC20","nameLocations":["2493:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"2493:6:33"},"referencedDeclaration":2403,"src":"2493:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2481,"mutability":"mutable","name":"spender","nameLocation":"2515:7:33","nodeType":"VariableDeclaration","scope":2506,"src":"2507:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2480,"name":"address","nodeType":"ElementaryTypeName","src":"2507:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2483,"mutability":"mutable","name":"value","nameLocation":"2532:5:33","nodeType":"VariableDeclaration","scope":2506,"src":"2524:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"2524:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2492:46:33"},"returnParameters":{"id":2485,"nodeType":"ParameterList","parameters":[],"src":"2548:0:33"},"scope":2812,"src":"2462:225:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2548,"nodeType":"Block","src":"3453:370:33","statements":[{"id":2547,"nodeType":"UncheckedBlock","src":"3463:354:33","statements":[{"assignments":[2518],"declarations":[{"constant":false,"id":2518,"mutability":"mutable","name":"currentAllowance","nameLocation":"3495:16:33","nodeType":"VariableDeclaration","scope":2547,"src":"3487:24:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2517,"name":"uint256","nodeType":"ElementaryTypeName","src":"3487:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2527,"initialValue":{"arguments":[{"arguments":[{"id":2523,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3538:4:33","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$2812","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$2812","typeString":"library SafeERC20"}],"id":2522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3530:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2521,"name":"address","nodeType":"ElementaryTypeName","src":"3530:7:33","typeDescriptions":{}}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3530:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2525,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"3545:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2519,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"3514:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3520:9:33","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":2380,"src":"3514:15:33","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3514:39:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3487:66:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2528,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"3571:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2529,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"3590:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3571:36:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2538,"nodeType":"IfStatement","src":"3567:160:33","trueBody":{"id":2537,"nodeType":"Block","src":"3609:118:33","statements":[{"errorCall":{"arguments":[{"id":2532,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"3667:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2533,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"3676:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2534,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"3694:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2531,"name":"SafeERC20FailedDecreaseAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2424,"src":"3634:32:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$","typeString":"function (address,uint256,uint256) pure returns (error)"}},"id":2535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:78:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2536,"nodeType":"RevertStatement","src":"3627:85:33"}]}},{"expression":{"arguments":[{"id":2540,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"3753:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":2541,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"3760:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"3769:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2543,"name":"requestedDecrease","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2514,"src":"3788:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3769:36:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2539,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"3740:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3740:66:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2546,"nodeType":"ExpressionStatement","src":"3740:66:33"}]}]},"documentation":{"id":2507,"nodeType":"StructuredDocumentation","src":"2693:657:33","text":" @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful.\n IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \"client\"\n smart contract uses ERC-7674 to set temporary allowances, then the \"client\" smart contract should avoid using\n this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\n that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior."},"id":2549,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3364:21:33","nodeType":"FunctionDefinition","parameters":{"id":2515,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2510,"mutability":"mutable","name":"token","nameLocation":"3393:5:33","nodeType":"VariableDeclaration","scope":2549,"src":"3386:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2509,"nodeType":"UserDefinedTypeName","pathNode":{"id":2508,"name":"IERC20","nameLocations":["3386:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"3386:6:33"},"referencedDeclaration":2403,"src":"3386:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"spender","nameLocation":"3408:7:33","nodeType":"VariableDeclaration","scope":2549,"src":"3400:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2511,"name":"address","nodeType":"ElementaryTypeName","src":"3400:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2514,"mutability":"mutable","name":"requestedDecrease","nameLocation":"3425:17:33","nodeType":"VariableDeclaration","scope":2549,"src":"3417:25:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2513,"name":"uint256","nodeType":"ElementaryTypeName","src":"3417:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3385:58:33"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[],"src":"3453:0:33"},"scope":2812,"src":"3355:468:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2595,"nodeType":"Block","src":"4477:303:33","statements":[{"assignments":[2561],"declarations":[{"constant":false,"id":2561,"mutability":"mutable","name":"approvalCall","nameLocation":"4500:12:33","nodeType":"VariableDeclaration","scope":2595,"src":"4487:25:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2560,"name":"bytes","nodeType":"ElementaryTypeName","src":"4487:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2570,"initialValue":{"arguments":[{"expression":{"id":2564,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"4530:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4536:7:33","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"4530:13:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":2566,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"4546:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2567,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2557,"src":"4555:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2568,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4545:16:33","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_uint256_$","typeString":"tuple(address,uint256)"}],"expression":{"id":2562,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4515:3:33","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2563,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4519:10:33","memberName":"encodeCall","nodeType":"MemberAccess","src":"4515:14:33","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4515:47:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4487:75:33"},{"condition":{"id":2575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4577:45:33","subExpression":{"arguments":[{"id":2572,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"4602:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":2573,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"4609:12:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2571,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"4578:23:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:44:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2594,"nodeType":"IfStatement","src":"4573:201:33","trueBody":{"id":2593,"nodeType":"Block","src":"4624:150:33","statements":[{"expression":{"arguments":[{"id":2577,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"4658:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"arguments":[{"expression":{"id":2580,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"4680:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4686:7:33","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":2390,"src":"4680:13:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},{"components":[{"id":2582,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"4696:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":2583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4705:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"id":2584,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4695:12:33","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"},{"typeIdentifier":"t_tuple$_t_address_$_t_rational_0_by_1_$","typeString":"tuple(address,int_const 0)"}],"expression":{"id":2578,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4665:3:33","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4669:10:33","memberName":"encodeCall","nodeType":"MemberAccess","src":"4665:14:33","typeDescriptions":{"typeIdentifier":"t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4665:43:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2576,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"4638:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4638:71:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2587,"nodeType":"ExpressionStatement","src":"4638:71:33"},{"expression":{"arguments":[{"id":2589,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"4743:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":2590,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"4750:12:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2588,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2770,"src":"4723:19:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4723:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2592,"nodeType":"ExpressionStatement","src":"4723:40:33"}]}}]},"documentation":{"id":2550,"nodeType":"StructuredDocumentation","src":"3829:566:33","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT.\n NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\n only sets the \"standard\" allowance. Any temporary allowance will remain active, in addition to the value being\n set here."},"id":2596,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"4409:12:33","nodeType":"FunctionDefinition","parameters":{"id":2558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"token","nameLocation":"4429:5:33","nodeType":"VariableDeclaration","scope":2596,"src":"4422:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2552,"nodeType":"UserDefinedTypeName","pathNode":{"id":2551,"name":"IERC20","nameLocations":["4422:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"4422:6:33"},"referencedDeclaration":2403,"src":"4422:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2555,"mutability":"mutable","name":"spender","nameLocation":"4444:7:33","nodeType":"VariableDeclaration","scope":2596,"src":"4436:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"4436:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2557,"mutability":"mutable","name":"value","nameLocation":"4461:5:33","nodeType":"VariableDeclaration","scope":2596,"src":"4453:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2556,"name":"uint256","nodeType":"ElementaryTypeName","src":"4453:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4421:46:33"},"returnParameters":{"id":2559,"nodeType":"ParameterList","parameters":[],"src":"4477:0:33"},"scope":2812,"src":"4400:380:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2638,"nodeType":"Block","src":"5227:219:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2609,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"5241:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5244:4:33","memberName":"code","nodeType":"MemberAccess","src":"5241:7:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5249:6:33","memberName":"length","nodeType":"MemberAccess","src":"5241:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5259:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5241:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"5327:39:33","subExpression":{"arguments":[{"id":2623,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"5350:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2624,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"5354:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2625,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2606,"src":"5361:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2621,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"5328:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5334:15:33","memberName":"transferAndCall","nodeType":"MemberAccess","referencedDeclaration":2268,"src":"5328:21:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":2626,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5328:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2636,"nodeType":"IfStatement","src":"5323:117:33","trueBody":{"id":2635,"nodeType":"Block","src":"5368:72:33","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2631,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"5422:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}],"id":2630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5414:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2629,"name":"address","nodeType":"ElementaryTypeName","src":"5414:7:33","typeDescriptions":{}}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5414:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2628,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"5389:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":2633,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5389:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2634,"nodeType":"RevertStatement","src":"5382:47:33"}]}},"id":2637,"nodeType":"IfStatement","src":"5237:203:33","trueBody":{"id":2620,"nodeType":"Block","src":"5262:55:33","statements":[{"expression":{"arguments":[{"id":2615,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2600,"src":"5289:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},{"id":2616,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2602,"src":"5296:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2617,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2604,"src":"5300:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2614,"name":"safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2448,"src":"5276:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5276:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2619,"nodeType":"ExpressionStatement","src":"5276:30:33"}]}}]},"documentation":{"id":2597,"nodeType":"StructuredDocumentation","src":"4786:333:33","text":" @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":2639,"implemented":true,"kind":"function","modifiers":[],"name":"transferAndCallRelaxed","nameLocation":"5133:22:33","nodeType":"FunctionDefinition","parameters":{"id":2607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"token","nameLocation":"5165:5:33","nodeType":"VariableDeclaration","scope":2639,"src":"5156:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},"typeName":{"id":2599,"nodeType":"UserDefinedTypeName","pathNode":{"id":2598,"name":"IERC1363","nameLocations":["5156:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":2317,"src":"5156:8:33"},"referencedDeclaration":2317,"src":"5156:8:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2602,"mutability":"mutable","name":"to","nameLocation":"5180:2:33","nodeType":"VariableDeclaration","scope":2639,"src":"5172:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2601,"name":"address","nodeType":"ElementaryTypeName","src":"5172:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2604,"mutability":"mutable","name":"value","nameLocation":"5192:5:33","nodeType":"VariableDeclaration","scope":2639,"src":"5184:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2603,"name":"uint256","nodeType":"ElementaryTypeName","src":"5184:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2606,"mutability":"mutable","name":"data","nameLocation":"5212:4:33","nodeType":"VariableDeclaration","scope":2639,"src":"5199:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2605,"name":"bytes","nodeType":"ElementaryTypeName","src":"5199:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5155:62:33"},"returnParameters":{"id":2608,"nodeType":"ParameterList","parameters":[],"src":"5227:0:33"},"scope":2812,"src":"5124:322:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2685,"nodeType":"Block","src":"5965:239:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2654,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"5979:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5982:4:33","memberName":"code","nodeType":"MemberAccess","src":"5979:7:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5987:6:33","memberName":"length","nodeType":"MemberAccess","src":"5979:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2657,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5997:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5979:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6075:49:33","subExpression":{"arguments":[{"id":2669,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"6102:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2670,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"6108:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2671,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"6112:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2672,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"6119:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2667,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"6076:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"id":2668,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6082:19:33","memberName":"transferFromAndCall","nodeType":"MemberAccess","referencedDeclaration":2294,"src":"6076:25:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) external returns (bool)"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6076:48:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2683,"nodeType":"IfStatement","src":"6071:127:33","trueBody":{"id":2682,"nodeType":"Block","src":"6126:72:33","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2678,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"6180:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}],"id":2677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6172:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2676,"name":"address","nodeType":"ElementaryTypeName","src":"6172:7:33","typeDescriptions":{}}},"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6172:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2675,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"6147:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":2680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6147:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2681,"nodeType":"RevertStatement","src":"6140:47:33"}]}},"id":2684,"nodeType":"IfStatement","src":"5975:223:33","trueBody":{"id":2666,"nodeType":"Block","src":"6000:65:33","statements":[{"expression":{"arguments":[{"id":2660,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2643,"src":"6031:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},{"id":2661,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"6038:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2662,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"6044:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2663,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2649,"src":"6048:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2659,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2475,"src":"6014:16:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6014:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2665,"nodeType":"ExpressionStatement","src":"6014:40:33"}]}}]},"documentation":{"id":2640,"nodeType":"StructuredDocumentation","src":"5452:341:33","text":" @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n Reverts if the returned value is other than `true`."},"id":2686,"implemented":true,"kind":"function","modifiers":[],"name":"transferFromAndCallRelaxed","nameLocation":"5807:26:33","nodeType":"FunctionDefinition","parameters":{"id":2652,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2643,"mutability":"mutable","name":"token","nameLocation":"5852:5:33","nodeType":"VariableDeclaration","scope":2686,"src":"5843:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},"typeName":{"id":2642,"nodeType":"UserDefinedTypeName","pathNode":{"id":2641,"name":"IERC1363","nameLocations":["5843:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":2317,"src":"5843:8:33"},"referencedDeclaration":2317,"src":"5843:8:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2645,"mutability":"mutable","name":"from","nameLocation":"5875:4:33","nodeType":"VariableDeclaration","scope":2686,"src":"5867:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2644,"name":"address","nodeType":"ElementaryTypeName","src":"5867:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2647,"mutability":"mutable","name":"to","nameLocation":"5897:2:33","nodeType":"VariableDeclaration","scope":2686,"src":"5889:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2646,"name":"address","nodeType":"ElementaryTypeName","src":"5889:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2649,"mutability":"mutable","name":"value","nameLocation":"5917:5:33","nodeType":"VariableDeclaration","scope":2686,"src":"5909:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2648,"name":"uint256","nodeType":"ElementaryTypeName","src":"5909:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2651,"mutability":"mutable","name":"data","nameLocation":"5945:4:33","nodeType":"VariableDeclaration","scope":2686,"src":"5932:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2650,"name":"bytes","nodeType":"ElementaryTypeName","src":"5932:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5833:122:33"},"returnParameters":{"id":2653,"nodeType":"ParameterList","parameters":[],"src":"5965:0:33"},"scope":2812,"src":"5798:406:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2728,"nodeType":"Block","src":"6971:218:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2703,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2699,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"6985:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6988:4:33","memberName":"code","nodeType":"MemberAccess","src":"6985:7:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6993:6:33","memberName":"length","nodeType":"MemberAccess","src":"6985:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2702,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7003:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6985:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"id":2717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7071:38:33","subExpression":{"arguments":[{"id":2713,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"7093:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2714,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"7097:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2715,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2696,"src":"7104:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2711,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"7072:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7078:14:33","memberName":"approveAndCall","nodeType":"MemberAccess","referencedDeclaration":2316,"src":"7072:20:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,uint256,bytes memory) external returns (bool)"}},"id":2716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7072:37:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2726,"nodeType":"IfStatement","src":"7067:116:33","trueBody":{"id":2725,"nodeType":"Block","src":"7111:72:33","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2721,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"7165:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}],"id":2720,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7157:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2719,"name":"address","nodeType":"ElementaryTypeName","src":"7157:7:33","typeDescriptions":{}}},"id":2722,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7157:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2718,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"7132:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7132:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2724,"nodeType":"RevertStatement","src":"7125:47:33"}]}},"id":2727,"nodeType":"IfStatement","src":"6981:202:33","trueBody":{"id":2710,"nodeType":"Block","src":"7006:55:33","statements":[{"expression":{"arguments":[{"id":2705,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2690,"src":"7033:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},{"id":2706,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2692,"src":"7040:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2707,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"7044:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2704,"name":"forceApprove","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2596,"src":"7020:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$2403_$_t_address_$_t_uint256_$returns$__$","typeString":"function (contract IERC20,address,uint256)"}},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7020:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2709,"nodeType":"ExpressionStatement","src":"7020:30:33"}]}}]},"documentation":{"id":2687,"nodeType":"StructuredDocumentation","src":"6210:654:33","text":" @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n targeting contracts.\n NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n once without retrying, and relies on the returned value to be true.\n Reverts if the returned value is other than `true`."},"id":2729,"implemented":true,"kind":"function","modifiers":[],"name":"approveAndCallRelaxed","nameLocation":"6878:21:33","nodeType":"FunctionDefinition","parameters":{"id":2697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2690,"mutability":"mutable","name":"token","nameLocation":"6909:5:33","nodeType":"VariableDeclaration","scope":2729,"src":"6900:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"},"typeName":{"id":2689,"nodeType":"UserDefinedTypeName","pathNode":{"id":2688,"name":"IERC1363","nameLocations":["6900:8:33"],"nodeType":"IdentifierPath","referencedDeclaration":2317,"src":"6900:8:33"},"referencedDeclaration":2317,"src":"6900:8:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC1363_$2317","typeString":"contract IERC1363"}},"visibility":"internal"},{"constant":false,"id":2692,"mutability":"mutable","name":"to","nameLocation":"6924:2:33","nodeType":"VariableDeclaration","scope":2729,"src":"6916:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2691,"name":"address","nodeType":"ElementaryTypeName","src":"6916:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2694,"mutability":"mutable","name":"value","nameLocation":"6936:5:33","nodeType":"VariableDeclaration","scope":2729,"src":"6928:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"6928:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2696,"mutability":"mutable","name":"data","nameLocation":"6956:4:33","nodeType":"VariableDeclaration","scope":2729,"src":"6943:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2695,"name":"bytes","nodeType":"ElementaryTypeName","src":"6943:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6899:62:33"},"returnParameters":{"id":2698,"nodeType":"ParameterList","parameters":[],"src":"6971:0:33"},"scope":2812,"src":"6869:320:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2769,"nodeType":"Block","src":"7756:650:33","statements":[{"assignments":[2739],"declarations":[{"constant":false,"id":2739,"mutability":"mutable","name":"returnSize","nameLocation":"7774:10:33","nodeType":"VariableDeclaration","scope":2769,"src":"7766:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2738,"name":"uint256","nodeType":"ElementaryTypeName","src":"7766:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2740,"nodeType":"VariableDeclarationStatement","src":"7766:18:33"},{"assignments":[2742],"declarations":[{"constant":false,"id":2742,"mutability":"mutable","name":"returnValue","nameLocation":"7802:11:33","nodeType":"VariableDeclaration","scope":2769,"src":"7794:19:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"7794:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2743,"nodeType":"VariableDeclarationStatement","src":"7794:19:33"},{"AST":{"nativeSrc":"7848:396:33","nodeType":"YulBlock","src":"7848:396:33","statements":[{"nativeSrc":"7862:75:33","nodeType":"YulVariableDeclaration","src":"7862:75:33","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"7882:3:33","nodeType":"YulIdentifier","src":"7882:3:33"},"nativeSrc":"7882:5:33","nodeType":"YulFunctionCall","src":"7882:5:33"},{"name":"token","nativeSrc":"7889:5:33","nodeType":"YulIdentifier","src":"7889:5:33"},{"kind":"number","nativeSrc":"7896:1:33","nodeType":"YulLiteral","src":"7896:1:33","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"7903:4:33","nodeType":"YulIdentifier","src":"7903:4:33"},{"kind":"number","nativeSrc":"7909:4:33","nodeType":"YulLiteral","src":"7909:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"7899:3:33","nodeType":"YulIdentifier","src":"7899:3:33"},"nativeSrc":"7899:15:33","nodeType":"YulFunctionCall","src":"7899:15:33"},{"arguments":[{"name":"data","nativeSrc":"7922:4:33","nodeType":"YulIdentifier","src":"7922:4:33"}],"functionName":{"name":"mload","nativeSrc":"7916:5:33","nodeType":"YulIdentifier","src":"7916:5:33"},"nativeSrc":"7916:11:33","nodeType":"YulFunctionCall","src":"7916:11:33"},{"kind":"number","nativeSrc":"7929:1:33","nodeType":"YulLiteral","src":"7929:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"7932:4:33","nodeType":"YulLiteral","src":"7932:4:33","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"7877:4:33","nodeType":"YulIdentifier","src":"7877:4:33"},"nativeSrc":"7877:60:33","nodeType":"YulFunctionCall","src":"7877:60:33"},"variables":[{"name":"success","nativeSrc":"7866:7:33","nodeType":"YulTypedName","src":"7866:7:33","type":""}]},{"body":{"nativeSrc":"7998:157:33","nodeType":"YulBlock","src":"7998:157:33","statements":[{"nativeSrc":"8016:22:33","nodeType":"YulVariableDeclaration","src":"8016:22:33","value":{"arguments":[{"kind":"number","nativeSrc":"8033:4:33","nodeType":"YulLiteral","src":"8033:4:33","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"8027:5:33","nodeType":"YulIdentifier","src":"8027:5:33"},"nativeSrc":"8027:11:33","nodeType":"YulFunctionCall","src":"8027:11:33"},"variables":[{"name":"ptr","nativeSrc":"8020:3:33","nodeType":"YulTypedName","src":"8020:3:33","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8070:3:33","nodeType":"YulIdentifier","src":"8070:3:33"},{"kind":"number","nativeSrc":"8075:1:33","nodeType":"YulLiteral","src":"8075:1:33","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8078:14:33","nodeType":"YulIdentifier","src":"8078:14:33"},"nativeSrc":"8078:16:33","nodeType":"YulFunctionCall","src":"8078:16:33"}],"functionName":{"name":"returndatacopy","nativeSrc":"8055:14:33","nodeType":"YulIdentifier","src":"8055:14:33"},"nativeSrc":"8055:40:33","nodeType":"YulFunctionCall","src":"8055:40:33"},"nativeSrc":"8055:40:33","nodeType":"YulExpressionStatement","src":"8055:40:33"},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8119:3:33","nodeType":"YulIdentifier","src":"8119:3:33"},{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8124:14:33","nodeType":"YulIdentifier","src":"8124:14:33"},"nativeSrc":"8124:16:33","nodeType":"YulFunctionCall","src":"8124:16:33"}],"functionName":{"name":"revert","nativeSrc":"8112:6:33","nodeType":"YulIdentifier","src":"8112:6:33"},"nativeSrc":"8112:29:33","nodeType":"YulFunctionCall","src":"8112:29:33"},"nativeSrc":"8112:29:33","nodeType":"YulExpressionStatement","src":"8112:29:33"}]},"condition":{"arguments":[{"name":"success","nativeSrc":"7989:7:33","nodeType":"YulIdentifier","src":"7989:7:33"}],"functionName":{"name":"iszero","nativeSrc":"7982:6:33","nodeType":"YulIdentifier","src":"7982:6:33"},"nativeSrc":"7982:15:33","nodeType":"YulFunctionCall","src":"7982:15:33"},"nativeSrc":"7979:176:33","nodeType":"YulIf","src":"7979:176:33"},{"nativeSrc":"8168:30:33","nodeType":"YulAssignment","src":"8168:30:33","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"8182:14:33","nodeType":"YulIdentifier","src":"8182:14:33"},"nativeSrc":"8182:16:33","nodeType":"YulFunctionCall","src":"8182:16:33"},"variableNames":[{"name":"returnSize","nativeSrc":"8168:10:33","nodeType":"YulIdentifier","src":"8168:10:33"}]},{"nativeSrc":"8211:23:33","nodeType":"YulAssignment","src":"8211:23:33","value":{"arguments":[{"kind":"number","nativeSrc":"8232:1:33","nodeType":"YulLiteral","src":"8232:1:33","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"8226:5:33","nodeType":"YulIdentifier","src":"8226:5:33"},"nativeSrc":"8226:8:33","nodeType":"YulFunctionCall","src":"8226:8:33"},"variableNames":[{"name":"returnValue","nativeSrc":"8211:11:33","nodeType":"YulIdentifier","src":"8211:11:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2735,"isOffset":false,"isSlot":false,"src":"7903:4:33","valueSize":1},{"declaration":2735,"isOffset":false,"isSlot":false,"src":"7922:4:33","valueSize":1},{"declaration":2739,"isOffset":false,"isSlot":false,"src":"8168:10:33","valueSize":1},{"declaration":2742,"isOffset":false,"isSlot":false,"src":"8211:11:33","valueSize":1},{"declaration":2733,"isOffset":false,"isSlot":false,"src":"7889:5:33","valueSize":1}],"flags":["memory-safe"],"id":2744,"nodeType":"InlineAssembly","src":"7823:421:33"},{"condition":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2747,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2745,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2739,"src":"8258:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2746,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8272:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8258:15:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2756,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"8310:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"31","id":2757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8325:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8310:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8258:68:33","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2755,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":2750,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"8284:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}],"id":2749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8276:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2748,"name":"address","nodeType":"ElementaryTypeName","src":"8276:7:33","typeDescriptions":{}}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8276:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2752,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8291:4:33","memberName":"code","nodeType":"MemberAccess","src":"8276:19:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2753,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8296:6:33","memberName":"length","nodeType":"MemberAccess","src":"8276:26:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8306:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8276:31:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2768,"nodeType":"IfStatement","src":"8254:146:33","trueBody":{"id":2767,"nodeType":"Block","src":"8328:72:33","statements":[{"errorCall":{"arguments":[{"arguments":[{"id":2763,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"8382:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}],"id":2762,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8374:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2761,"name":"address","nodeType":"ElementaryTypeName","src":"8374:7:33","typeDescriptions":{}}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8374:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2760,"name":"SafeERC20FailedOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8349:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8349:40:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2766,"nodeType":"RevertStatement","src":"8342:47:33"}]}}]},"documentation":{"id":2730,"nodeType":"StructuredDocumentation","src":"7195:486:33","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements."},"id":2770,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"7695:19:33","nodeType":"FunctionDefinition","parameters":{"id":2736,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2733,"mutability":"mutable","name":"token","nameLocation":"7722:5:33","nodeType":"VariableDeclaration","scope":2770,"src":"7715:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2732,"nodeType":"UserDefinedTypeName","pathNode":{"id":2731,"name":"IERC20","nameLocations":["7715:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"7715:6:33"},"referencedDeclaration":2403,"src":"7715:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2735,"mutability":"mutable","name":"data","nameLocation":"7742:4:33","nodeType":"VariableDeclaration","scope":2770,"src":"7729:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2734,"name":"bytes","nodeType":"ElementaryTypeName","src":"7729:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7714:33:33"},"returnParameters":{"id":2737,"nodeType":"ParameterList","parameters":[],"src":"7756:0:33"},"scope":2812,"src":"7686:720:33","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2810,"nodeType":"Block","src":"8997:391:33","statements":[{"assignments":[2782],"declarations":[{"constant":false,"id":2782,"mutability":"mutable","name":"success","nameLocation":"9012:7:33","nodeType":"VariableDeclaration","scope":2810,"src":"9007:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2781,"name":"bool","nodeType":"ElementaryTypeName","src":"9007:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2783,"nodeType":"VariableDeclarationStatement","src":"9007:12:33"},{"assignments":[2785],"declarations":[{"constant":false,"id":2785,"mutability":"mutable","name":"returnSize","nameLocation":"9037:10:33","nodeType":"VariableDeclaration","scope":2810,"src":"9029:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2784,"name":"uint256","nodeType":"ElementaryTypeName","src":"9029:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2786,"nodeType":"VariableDeclarationStatement","src":"9029:18:33"},{"assignments":[2788],"declarations":[{"constant":false,"id":2788,"mutability":"mutable","name":"returnValue","nameLocation":"9065:11:33","nodeType":"VariableDeclaration","scope":2810,"src":"9057:19:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2787,"name":"uint256","nodeType":"ElementaryTypeName","src":"9057:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2789,"nodeType":"VariableDeclarationStatement","src":"9057:19:33"},{"AST":{"nativeSrc":"9111:174:33","nodeType":"YulBlock","src":"9111:174:33","statements":[{"nativeSrc":"9125:71:33","nodeType":"YulAssignment","src":"9125:71:33","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nativeSrc":"9141:3:33","nodeType":"YulIdentifier","src":"9141:3:33"},"nativeSrc":"9141:5:33","nodeType":"YulFunctionCall","src":"9141:5:33"},{"name":"token","nativeSrc":"9148:5:33","nodeType":"YulIdentifier","src":"9148:5:33"},{"kind":"number","nativeSrc":"9155:1:33","nodeType":"YulLiteral","src":"9155:1:33","type":"","value":"0"},{"arguments":[{"name":"data","nativeSrc":"9162:4:33","nodeType":"YulIdentifier","src":"9162:4:33"},{"kind":"number","nativeSrc":"9168:4:33","nodeType":"YulLiteral","src":"9168:4:33","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"9158:3:33","nodeType":"YulIdentifier","src":"9158:3:33"},"nativeSrc":"9158:15:33","nodeType":"YulFunctionCall","src":"9158:15:33"},{"arguments":[{"name":"data","nativeSrc":"9181:4:33","nodeType":"YulIdentifier","src":"9181:4:33"}],"functionName":{"name":"mload","nativeSrc":"9175:5:33","nodeType":"YulIdentifier","src":"9175:5:33"},"nativeSrc":"9175:11:33","nodeType":"YulFunctionCall","src":"9175:11:33"},{"kind":"number","nativeSrc":"9188:1:33","nodeType":"YulLiteral","src":"9188:1:33","type":"","value":"0"},{"kind":"number","nativeSrc":"9191:4:33","nodeType":"YulLiteral","src":"9191:4:33","type":"","value":"0x20"}],"functionName":{"name":"call","nativeSrc":"9136:4:33","nodeType":"YulIdentifier","src":"9136:4:33"},"nativeSrc":"9136:60:33","nodeType":"YulFunctionCall","src":"9136:60:33"},"variableNames":[{"name":"success","nativeSrc":"9125:7:33","nodeType":"YulIdentifier","src":"9125:7:33"}]},{"nativeSrc":"9209:30:33","nodeType":"YulAssignment","src":"9209:30:33","value":{"arguments":[],"functionName":{"name":"returndatasize","nativeSrc":"9223:14:33","nodeType":"YulIdentifier","src":"9223:14:33"},"nativeSrc":"9223:16:33","nodeType":"YulFunctionCall","src":"9223:16:33"},"variableNames":[{"name":"returnSize","nativeSrc":"9209:10:33","nodeType":"YulIdentifier","src":"9209:10:33"}]},{"nativeSrc":"9252:23:33","nodeType":"YulAssignment","src":"9252:23:33","value":{"arguments":[{"kind":"number","nativeSrc":"9273:1:33","nodeType":"YulLiteral","src":"9273:1:33","type":"","value":"0"}],"functionName":{"name":"mload","nativeSrc":"9267:5:33","nodeType":"YulIdentifier","src":"9267:5:33"},"nativeSrc":"9267:8:33","nodeType":"YulFunctionCall","src":"9267:8:33"},"variableNames":[{"name":"returnValue","nativeSrc":"9252:11:33","nodeType":"YulIdentifier","src":"9252:11:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2776,"isOffset":false,"isSlot":false,"src":"9162:4:33","valueSize":1},{"declaration":2776,"isOffset":false,"isSlot":false,"src":"9181:4:33","valueSize":1},{"declaration":2785,"isOffset":false,"isSlot":false,"src":"9209:10:33","valueSize":1},{"declaration":2788,"isOffset":false,"isSlot":false,"src":"9252:11:33","valueSize":1},{"declaration":2782,"isOffset":false,"isSlot":false,"src":"9125:7:33","valueSize":1},{"declaration":2774,"isOffset":false,"isSlot":false,"src":"9148:5:33","valueSize":1}],"flags":["memory-safe"],"id":2790,"nodeType":"InlineAssembly","src":"9086:199:33"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2791,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2782,"src":"9301:7:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2792,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2785,"src":"9313:10:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9327:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9313:15:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2803,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2788,"src":"9364:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"31","id":2804,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9379:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9364:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9313:67:33","trueExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2802,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"arguments":[{"id":2797,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2774,"src":"9339:5:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}],"id":2796,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9331:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2795,"name":"address","nodeType":"ElementaryTypeName","src":"9331:7:33","typeDescriptions":{}}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9331:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9346:4:33","memberName":"code","nodeType":"MemberAccess","src":"9331:19:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9351:6:33","memberName":"length","nodeType":"MemberAccess","src":"9331:26:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9360:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9331:30:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":2807,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9312:69:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9301:80:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2780,"id":2809,"nodeType":"Return","src":"9294:87:33"}]},"documentation":{"id":2771,"nodeType":"StructuredDocumentation","src":"8412:491:33","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead."},"id":2811,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"8917:23:33","nodeType":"FunctionDefinition","parameters":{"id":2777,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2774,"mutability":"mutable","name":"token","nameLocation":"8948:5:33","nodeType":"VariableDeclaration","scope":2811,"src":"8941:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":2773,"nodeType":"UserDefinedTypeName","pathNode":{"id":2772,"name":"IERC20","nameLocations":["8941:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"8941:6:33"},"referencedDeclaration":2403,"src":"8941:6:33","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":2776,"mutability":"mutable","name":"data","nameLocation":"8968:4:33","nodeType":"VariableDeclaration","scope":2811,"src":"8955:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2775,"name":"bytes","nodeType":"ElementaryTypeName","src":"8955:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8940:33:33"},"returnParameters":{"id":2780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2779,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2811,"src":"8991:4:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2778,"name":"bool","nodeType":"ElementaryTypeName","src":"8991:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8990:6:33"},"scope":2812,"src":"8908:480:33","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":2813,"src":"698:8692:33","usedErrors":[2415,2424],"usedEvents":[]}],"src":"115:9276:33"},"id":33},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2842]},"id":2843,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2814,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"101:24:34"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"127:496:34","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2842,"linearizedBaseContracts":[2842],"name":"Context","nameLocation":"642:7:34","nodeType":"ContractDefinition","nodes":[{"body":{"id":2823,"nodeType":"Block","src":"718:34:34","statements":[{"expression":{"expression":{"id":2820,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"735:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:34","memberName":"sender","nodeType":"MemberAccess","src":"735:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2819,"id":2822,"nodeType":"Return","src":"728:17:34"}]},"id":2824,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"665:10:34","nodeType":"FunctionDefinition","parameters":{"id":2816,"nodeType":"ParameterList","parameters":[],"src":"675:2:34"},"returnParameters":{"id":2819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2818,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2824,"src":"709:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2817,"name":"address","nodeType":"ElementaryTypeName","src":"709:7:34","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"708:9:34"},"scope":2842,"src":"656:96:34","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2832,"nodeType":"Block","src":"825:32:34","statements":[{"expression":{"expression":{"id":2829,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"842:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"846:4:34","memberName":"data","nodeType":"MemberAccess","src":"842:8:34","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2828,"id":2831,"nodeType":"Return","src":"835:15:34"}]},"id":2833,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"767:8:34","nodeType":"FunctionDefinition","parameters":{"id":2825,"nodeType":"ParameterList","parameters":[],"src":"775:2:34"},"returnParameters":{"id":2828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2827,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2833,"src":"809:14:34","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2826,"name":"bytes","nodeType":"ElementaryTypeName","src":"809:5:34","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"808:16:34"},"scope":2842,"src":"758:99:34","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2840,"nodeType":"Block","src":"935:25:34","statements":[{"expression":{"hexValue":"30","id":2838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"952:1:34","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2837,"id":2839,"nodeType":"Return","src":"945:8:34"}]},"id":2841,"implemented":true,"kind":"function","modifiers":[],"name":"_contextSuffixLength","nameLocation":"872:20:34","nodeType":"FunctionDefinition","parameters":{"id":2834,"nodeType":"ParameterList","parameters":[],"src":"892:2:34"},"returnParameters":{"id":2837,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2836,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2841,"src":"926:7:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2835,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"925:9:34"},"scope":2842,"src":"863:97:34","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2843,"src":"624:338:34","usedErrors":[],"usedEvents":[]}],"src":"101:862:34"},"id":34},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/ReentrancyGuard.sol","exportedSymbols":{"ReentrancyGuard":[2911]},"id":2912,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2844,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"109:24:35"},{"abstract":true,"baseContracts":[],"canonicalName":"ReentrancyGuard","contractDependencies":[],"contractKind":"contract","documentation":{"id":2845,"nodeType":"StructuredDocumentation","src":"135:894:35","text":" @dev Contract module that helps prevent reentrant calls to a function.\n Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n available, which can be applied to functions to make sure there are no nested\n (reentrant) calls to them.\n Note that because there is a single `nonReentrant` guard, functions marked as\n `nonReentrant` may not call one another. This can be worked around by making\n those functions `private`, and then adding `external` `nonReentrant` entry\n points to them.\n TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\n consider using {ReentrancyGuardTransient} instead.\n TIP: If you would like to learn more about reentrancy and alternative ways\n to protect against it, check out our blog post\n https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]."},"fullyImplemented":true,"id":2911,"linearizedBaseContracts":[2911],"name":"ReentrancyGuard","nameLocation":"1048:15:35","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2848,"mutability":"constant","name":"NOT_ENTERED","nameLocation":"1843:11:35","nodeType":"VariableDeclaration","scope":2911,"src":"1818:40:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2846,"name":"uint256","nodeType":"ElementaryTypeName","src":"1818:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":2847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1857:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"private"},{"constant":true,"id":2851,"mutability":"constant","name":"ENTERED","nameLocation":"1889:7:35","nodeType":"VariableDeclaration","scope":2911,"src":"1864:36:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2849,"name":"uint256","nodeType":"ElementaryTypeName","src":"1864:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":2850,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1899:1:35","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"private"},{"constant":false,"id":2853,"mutability":"mutable","name":"_status","nameLocation":"1923:7:35","nodeType":"VariableDeclaration","scope":2911,"src":"1907:23:35","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"1907:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"documentation":{"id":2854,"nodeType":"StructuredDocumentation","src":"1937:52:35","text":" @dev Unauthorized reentrant call."},"errorSelector":"3ee5aeb5","id":2856,"name":"ReentrancyGuardReentrantCall","nameLocation":"2000:28:35","nodeType":"ErrorDefinition","parameters":{"id":2855,"nodeType":"ParameterList","parameters":[],"src":"2028:2:35"},"src":"1994:37:35"},{"body":{"id":2863,"nodeType":"Block","src":"2051:38:35","statements":[{"expression":{"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2859,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2061:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2860,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"2071:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2061:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2862,"nodeType":"ExpressionStatement","src":"2061:21:35"}]},"id":2864,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2857,"nodeType":"ParameterList","parameters":[],"src":"2048:2:35"},"returnParameters":{"id":2858,"nodeType":"ParameterList","parameters":[],"src":"2051:0:35"},"scope":2911,"src":"2037:52:35","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2874,"nodeType":"Block","src":"2490:79:35","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2867,"name":"_nonReentrantBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2891,"src":"2500:19:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2500:21:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2869,"nodeType":"ExpressionStatement","src":"2500:21:35"},{"id":2870,"nodeType":"PlaceholderStatement","src":"2531:1:35"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2871,"name":"_nonReentrantAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"2542:18:35","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2872,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2542:20:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2873,"nodeType":"ExpressionStatement","src":"2542:20:35"}]},"documentation":{"id":2865,"nodeType":"StructuredDocumentation","src":"2095:366:35","text":" @dev Prevents a contract from calling itself, directly or indirectly.\n Calling a `nonReentrant` function from another `nonReentrant`\n function is not supported. It is possible to prevent this from happening\n by making the `nonReentrant` function external, and making it call a\n `private` function that does the actual work."},"id":2875,"name":"nonReentrant","nameLocation":"2475:12:35","nodeType":"ModifierDefinition","parameters":{"id":2866,"nodeType":"ParameterList","parameters":[],"src":"2487:2:35"},"src":"2466:103:35","virtual":false,"visibility":"internal"},{"body":{"id":2890,"nodeType":"Block","src":"2614:268:35","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2878,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2702:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2879,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"2713:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2702:18:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2885,"nodeType":"IfStatement","src":"2698:86:35","trueBody":{"id":2884,"nodeType":"Block","src":"2722:62:35","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2881,"name":"ReentrancyGuardReentrantCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"2743:28:35","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2743:30:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":2883,"nodeType":"RevertStatement","src":"2736:37:35"}]}},{"expression":{"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2886,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"2858:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2887,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"2868:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2858:17:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2889,"nodeType":"ExpressionStatement","src":"2858:17:35"}]},"id":2891,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantBefore","nameLocation":"2584:19:35","nodeType":"FunctionDefinition","parameters":{"id":2876,"nodeType":"ParameterList","parameters":[],"src":"2603:2:35"},"returnParameters":{"id":2877,"nodeType":"ParameterList","parameters":[],"src":"2614:0:35"},"scope":2911,"src":"2575:307:35","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2898,"nodeType":"Block","src":"2926:170:35","statements":[{"expression":{"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2894,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"3068:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2895,"name":"NOT_ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2848,"src":"3078:11:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3068:21:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2897,"nodeType":"ExpressionStatement","src":"3068:21:35"}]},"id":2899,"implemented":true,"kind":"function","modifiers":[],"name":"_nonReentrantAfter","nameLocation":"2897:18:35","nodeType":"FunctionDefinition","parameters":{"id":2892,"nodeType":"ParameterList","parameters":[],"src":"2915:2:35"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[],"src":"2926:0:35"},"scope":2911,"src":"2888:208:35","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":2909,"nodeType":"Block","src":"3339:42:35","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2905,"name":"_status","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"3356:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2906,"name":"ENTERED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"3367:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3356:18:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2904,"id":2908,"nodeType":"Return","src":"3349:25:35"}]},"documentation":{"id":2900,"nodeType":"StructuredDocumentation","src":"3102:168:35","text":" @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n `nonReentrant` function in the call stack."},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"_reentrancyGuardEntered","nameLocation":"3284:23:35","nodeType":"FunctionDefinition","parameters":{"id":2901,"nodeType":"ParameterList","parameters":[],"src":"3307:2:35"},"returnParameters":{"id":2904,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2903,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2910,"src":"3333:4:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2902,"name":"bool","nodeType":"ElementaryTypeName","src":"3333:4:35","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3332:6:35"},"scope":2911,"src":"3275:106:35","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":2912,"src":"1030:2353:35","usedErrors":[2856],"usedEvents":[]}],"src":"109:3275:35"},"id":35},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[3035]},"id":3036,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2913,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"193:24:36"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2914,"nodeType":"StructuredDocumentation","src":"219:1187:36","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC-1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n TIP: Consider using this library along with {SlotDerivation}."},"fullyImplemented":true,"id":3035,"linearizedBaseContracts":[3035],"name":"StorageSlot","nameLocation":"1415:11:36","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2917,"members":[{"constant":false,"id":2916,"mutability":"mutable","name":"value","nameLocation":"1470:5:36","nodeType":"VariableDeclaration","scope":2917,"src":"1462:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2915,"name":"address","nodeType":"ElementaryTypeName","src":"1462:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1440:11:36","nodeType":"StructDefinition","scope":3035,"src":"1433:49:36","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2920,"members":[{"constant":false,"id":2919,"mutability":"mutable","name":"value","nameLocation":"1522:5:36","nodeType":"VariableDeclaration","scope":2920,"src":"1517:10:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2918,"name":"bool","nodeType":"ElementaryTypeName","src":"1517:4:36","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1495:11:36","nodeType":"StructDefinition","scope":3035,"src":"1488:46:36","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2923,"members":[{"constant":false,"id":2922,"mutability":"mutable","name":"value","nameLocation":"1577:5:36","nodeType":"VariableDeclaration","scope":2923,"src":"1569:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2921,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1569:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1547:11:36","nodeType":"StructDefinition","scope":3035,"src":"1540:49:36","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2926,"members":[{"constant":false,"id":2925,"mutability":"mutable","name":"value","nameLocation":"1632:5:36","nodeType":"VariableDeclaration","scope":2926,"src":"1624:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2924,"name":"uint256","nodeType":"ElementaryTypeName","src":"1624:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1602:11:36","nodeType":"StructDefinition","scope":3035,"src":"1595:49:36","visibility":"public"},{"canonicalName":"StorageSlot.Int256Slot","id":2929,"members":[{"constant":false,"id":2928,"mutability":"mutable","name":"value","nameLocation":"1685:5:36","nodeType":"VariableDeclaration","scope":2929,"src":"1678:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2927,"name":"int256","nodeType":"ElementaryTypeName","src":"1678:6:36","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"name":"Int256Slot","nameLocation":"1657:10:36","nodeType":"StructDefinition","scope":3035,"src":"1650:47:36","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2932,"members":[{"constant":false,"id":2931,"mutability":"mutable","name":"value","nameLocation":"1738:5:36","nodeType":"VariableDeclaration","scope":2932,"src":"1731:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2930,"name":"string","nodeType":"ElementaryTypeName","src":"1731:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1710:10:36","nodeType":"StructDefinition","scope":3035,"src":"1703:47:36","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2935,"members":[{"constant":false,"id":2934,"mutability":"mutable","name":"value","nameLocation":"1789:5:36","nodeType":"VariableDeclaration","scope":2935,"src":"1783:11:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2933,"name":"bytes","nodeType":"ElementaryTypeName","src":"1783:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1763:9:36","nodeType":"StructDefinition","scope":3035,"src":"1756:45:36","visibility":"public"},{"body":{"id":2945,"nodeType":"Block","src":"1983:79:36","statements":[{"AST":{"nativeSrc":"2018:38:36","nodeType":"YulBlock","src":"2018:38:36","statements":[{"nativeSrc":"2032:14:36","nodeType":"YulAssignment","src":"2032:14:36","value":{"name":"slot","nativeSrc":"2042:4:36","nodeType":"YulIdentifier","src":"2042:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"2032:6:36","nodeType":"YulIdentifier","src":"2032:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2942,"isOffset":false,"isSlot":true,"src":"2032:6:36","suffix":"slot","valueSize":1},{"declaration":2938,"isOffset":false,"isSlot":false,"src":"2042:4:36","valueSize":1}],"flags":["memory-safe"],"id":2944,"nodeType":"InlineAssembly","src":"1993:63:36"}]},"documentation":{"id":2936,"nodeType":"StructuredDocumentation","src":"1807:87:36","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2946,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1908:14:36","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2938,"mutability":"mutable","name":"slot","nameLocation":"1931:4:36","nodeType":"VariableDeclaration","scope":2946,"src":"1923:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2937,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1923:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1922:14:36"},"returnParameters":{"id":2943,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2942,"mutability":"mutable","name":"r","nameLocation":"1980:1:36","nodeType":"VariableDeclaration","scope":2946,"src":"1960:21:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2917_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2941,"nodeType":"UserDefinedTypeName","pathNode":{"id":2940,"name":"AddressSlot","nameLocations":["1960:11:36"],"nodeType":"IdentifierPath","referencedDeclaration":2917,"src":"1960:11:36"},"referencedDeclaration":2917,"src":"1960:11:36","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2917_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1959:23:36"},"scope":3035,"src":"1899:163:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2956,"nodeType":"Block","src":"2243:79:36","statements":[{"AST":{"nativeSrc":"2278:38:36","nodeType":"YulBlock","src":"2278:38:36","statements":[{"nativeSrc":"2292:14:36","nodeType":"YulAssignment","src":"2292:14:36","value":{"name":"slot","nativeSrc":"2302:4:36","nodeType":"YulIdentifier","src":"2302:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"2292:6:36","nodeType":"YulIdentifier","src":"2292:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2953,"isOffset":false,"isSlot":true,"src":"2292:6:36","suffix":"slot","valueSize":1},{"declaration":2949,"isOffset":false,"isSlot":false,"src":"2302:4:36","valueSize":1}],"flags":["memory-safe"],"id":2955,"nodeType":"InlineAssembly","src":"2253:63:36"}]},"documentation":{"id":2947,"nodeType":"StructuredDocumentation","src":"2068:86:36","text":" @dev Returns a `BooleanSlot` with member `value` located at `slot`."},"id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2168:14:36","nodeType":"FunctionDefinition","parameters":{"id":2950,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2949,"mutability":"mutable","name":"slot","nameLocation":"2191:4:36","nodeType":"VariableDeclaration","scope":2957,"src":"2183:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2183:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2182:14:36"},"returnParameters":{"id":2954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2953,"mutability":"mutable","name":"r","nameLocation":"2240:1:36","nodeType":"VariableDeclaration","scope":2957,"src":"2220:21:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2920_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2952,"nodeType":"UserDefinedTypeName","pathNode":{"id":2951,"name":"BooleanSlot","nameLocations":["2220:11:36"],"nodeType":"IdentifierPath","referencedDeclaration":2920,"src":"2220:11:36"},"referencedDeclaration":2920,"src":"2220:11:36","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2920_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2219:23:36"},"scope":3035,"src":"2159:163:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2967,"nodeType":"Block","src":"2503:79:36","statements":[{"AST":{"nativeSrc":"2538:38:36","nodeType":"YulBlock","src":"2538:38:36","statements":[{"nativeSrc":"2552:14:36","nodeType":"YulAssignment","src":"2552:14:36","value":{"name":"slot","nativeSrc":"2562:4:36","nodeType":"YulIdentifier","src":"2562:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"2552:6:36","nodeType":"YulIdentifier","src":"2552:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2964,"isOffset":false,"isSlot":true,"src":"2552:6:36","suffix":"slot","valueSize":1},{"declaration":2960,"isOffset":false,"isSlot":false,"src":"2562:4:36","valueSize":1}],"flags":["memory-safe"],"id":2966,"nodeType":"InlineAssembly","src":"2513:63:36"}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"2328:86:36","text":" @dev Returns a `Bytes32Slot` with member `value` located at `slot`."},"id":2968,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2428:14:36","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"slot","nameLocation":"2451:4:36","nodeType":"VariableDeclaration","scope":2968,"src":"2443:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2959,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2443:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2442:14:36"},"returnParameters":{"id":2965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2964,"mutability":"mutable","name":"r","nameLocation":"2500:1:36","nodeType":"VariableDeclaration","scope":2968,"src":"2480:21:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2923_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2963,"nodeType":"UserDefinedTypeName","pathNode":{"id":2962,"name":"Bytes32Slot","nameLocations":["2480:11:36"],"nodeType":"IdentifierPath","referencedDeclaration":2923,"src":"2480:11:36"},"referencedDeclaration":2923,"src":"2480:11:36","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2923_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2479:23:36"},"scope":3035,"src":"2419:163:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2978,"nodeType":"Block","src":"2763:79:36","statements":[{"AST":{"nativeSrc":"2798:38:36","nodeType":"YulBlock","src":"2798:38:36","statements":[{"nativeSrc":"2812:14:36","nodeType":"YulAssignment","src":"2812:14:36","value":{"name":"slot","nativeSrc":"2822:4:36","nodeType":"YulIdentifier","src":"2822:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"2812:6:36","nodeType":"YulIdentifier","src":"2812:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2975,"isOffset":false,"isSlot":true,"src":"2812:6:36","suffix":"slot","valueSize":1},{"declaration":2971,"isOffset":false,"isSlot":false,"src":"2822:4:36","valueSize":1}],"flags":["memory-safe"],"id":2977,"nodeType":"InlineAssembly","src":"2773:63:36"}]},"documentation":{"id":2969,"nodeType":"StructuredDocumentation","src":"2588:86:36","text":" @dev Returns a `Uint256Slot` with member `value` located at `slot`."},"id":2979,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2688:14:36","nodeType":"FunctionDefinition","parameters":{"id":2972,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2971,"mutability":"mutable","name":"slot","nameLocation":"2711:4:36","nodeType":"VariableDeclaration","scope":2979,"src":"2703:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2970,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2703:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2702:14:36"},"returnParameters":{"id":2976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2975,"mutability":"mutable","name":"r","nameLocation":"2760:1:36","nodeType":"VariableDeclaration","scope":2979,"src":"2740:21:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2974,"nodeType":"UserDefinedTypeName","pathNode":{"id":2973,"name":"Uint256Slot","nameLocations":["2740:11:36"],"nodeType":"IdentifierPath","referencedDeclaration":2926,"src":"2740:11:36"},"referencedDeclaration":2926,"src":"2740:11:36","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2926_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2739:23:36"},"scope":3035,"src":"2679:163:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2989,"nodeType":"Block","src":"3020:79:36","statements":[{"AST":{"nativeSrc":"3055:38:36","nodeType":"YulBlock","src":"3055:38:36","statements":[{"nativeSrc":"3069:14:36","nodeType":"YulAssignment","src":"3069:14:36","value":{"name":"slot","nativeSrc":"3079:4:36","nodeType":"YulIdentifier","src":"3079:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"3069:6:36","nodeType":"YulIdentifier","src":"3069:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2986,"isOffset":false,"isSlot":true,"src":"3069:6:36","suffix":"slot","valueSize":1},{"declaration":2982,"isOffset":false,"isSlot":false,"src":"3079:4:36","valueSize":1}],"flags":["memory-safe"],"id":2988,"nodeType":"InlineAssembly","src":"3030:63:36"}]},"documentation":{"id":2980,"nodeType":"StructuredDocumentation","src":"2848:85:36","text":" @dev Returns a `Int256Slot` with member `value` located at `slot`."},"id":2990,"implemented":true,"kind":"function","modifiers":[],"name":"getInt256Slot","nameLocation":"2947:13:36","nodeType":"FunctionDefinition","parameters":{"id":2983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2982,"mutability":"mutable","name":"slot","nameLocation":"2969:4:36","nodeType":"VariableDeclaration","scope":2990,"src":"2961:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2981,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2961:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2960:14:36"},"returnParameters":{"id":2987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2986,"mutability":"mutable","name":"r","nameLocation":"3017:1:36","nodeType":"VariableDeclaration","scope":2990,"src":"2998:20:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$2929_storage_ptr","typeString":"struct StorageSlot.Int256Slot"},"typeName":{"id":2985,"nodeType":"UserDefinedTypeName","pathNode":{"id":2984,"name":"Int256Slot","nameLocations":["2998:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2929,"src":"2998:10:36"},"referencedDeclaration":2929,"src":"2998:10:36","typeDescriptions":{"typeIdentifier":"t_struct$_Int256Slot_$2929_storage_ptr","typeString":"struct StorageSlot.Int256Slot"}},"visibility":"internal"}],"src":"2997:22:36"},"scope":3035,"src":"2938:161:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3000,"nodeType":"Block","src":"3277:79:36","statements":[{"AST":{"nativeSrc":"3312:38:36","nodeType":"YulBlock","src":"3312:38:36","statements":[{"nativeSrc":"3326:14:36","nodeType":"YulAssignment","src":"3326:14:36","value":{"name":"slot","nativeSrc":"3336:4:36","nodeType":"YulIdentifier","src":"3336:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"3326:6:36","nodeType":"YulIdentifier","src":"3326:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2997,"isOffset":false,"isSlot":true,"src":"3326:6:36","suffix":"slot","valueSize":1},{"declaration":2993,"isOffset":false,"isSlot":false,"src":"3336:4:36","valueSize":1}],"flags":["memory-safe"],"id":2999,"nodeType":"InlineAssembly","src":"3287:63:36"}]},"documentation":{"id":2991,"nodeType":"StructuredDocumentation","src":"3105:85:36","text":" @dev Returns a `StringSlot` with member `value` located at `slot`."},"id":3001,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3204:13:36","nodeType":"FunctionDefinition","parameters":{"id":2994,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2993,"mutability":"mutable","name":"slot","nameLocation":"3226:4:36","nodeType":"VariableDeclaration","scope":3001,"src":"3218:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2992,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3218:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3217:14:36"},"returnParameters":{"id":2998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2997,"mutability":"mutable","name":"r","nameLocation":"3274:1:36","nodeType":"VariableDeclaration","scope":3001,"src":"3255:20:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2932_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2996,"nodeType":"UserDefinedTypeName","pathNode":{"id":2995,"name":"StringSlot","nameLocations":["3255:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2932,"src":"3255:10:36"},"referencedDeclaration":2932,"src":"3255:10:36","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2932_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3254:22:36"},"scope":3035,"src":"3195:161:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3011,"nodeType":"Block","src":"3558:85:36","statements":[{"AST":{"nativeSrc":"3593:44:36","nodeType":"YulBlock","src":"3593:44:36","statements":[{"nativeSrc":"3607:20:36","nodeType":"YulAssignment","src":"3607:20:36","value":{"name":"store.slot","nativeSrc":"3617:10:36","nodeType":"YulIdentifier","src":"3617:10:36"},"variableNames":[{"name":"r.slot","nativeSrc":"3607:6:36","nodeType":"YulIdentifier","src":"3607:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3008,"isOffset":false,"isSlot":true,"src":"3607:6:36","suffix":"slot","valueSize":1},{"declaration":3004,"isOffset":false,"isSlot":true,"src":"3617:10:36","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":3010,"nodeType":"InlineAssembly","src":"3568:69:36"}]},"documentation":{"id":3002,"nodeType":"StructuredDocumentation","src":"3362:101:36","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3012,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3477:13:36","nodeType":"FunctionDefinition","parameters":{"id":3005,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3004,"mutability":"mutable","name":"store","nameLocation":"3506:5:36","nodeType":"VariableDeclaration","scope":3012,"src":"3491:20:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3003,"name":"string","nodeType":"ElementaryTypeName","src":"3491:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3490:22:36"},"returnParameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3008,"mutability":"mutable","name":"r","nameLocation":"3555:1:36","nodeType":"VariableDeclaration","scope":3012,"src":"3536:20:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2932_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3007,"nodeType":"UserDefinedTypeName","pathNode":{"id":3006,"name":"StringSlot","nameLocations":["3536:10:36"],"nodeType":"IdentifierPath","referencedDeclaration":2932,"src":"3536:10:36"},"referencedDeclaration":2932,"src":"3536:10:36","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2932_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3535:22:36"},"scope":3035,"src":"3468:175:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3022,"nodeType":"Block","src":"3818:79:36","statements":[{"AST":{"nativeSrc":"3853:38:36","nodeType":"YulBlock","src":"3853:38:36","statements":[{"nativeSrc":"3867:14:36","nodeType":"YulAssignment","src":"3867:14:36","value":{"name":"slot","nativeSrc":"3877:4:36","nodeType":"YulIdentifier","src":"3877:4:36"},"variableNames":[{"name":"r.slot","nativeSrc":"3867:6:36","nodeType":"YulIdentifier","src":"3867:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3019,"isOffset":false,"isSlot":true,"src":"3867:6:36","suffix":"slot","valueSize":1},{"declaration":3015,"isOffset":false,"isSlot":false,"src":"3877:4:36","valueSize":1}],"flags":["memory-safe"],"id":3021,"nodeType":"InlineAssembly","src":"3828:63:36"}]},"documentation":{"id":3013,"nodeType":"StructuredDocumentation","src":"3649:84:36","text":" @dev Returns a `BytesSlot` with member `value` located at `slot`."},"id":3023,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3747:12:36","nodeType":"FunctionDefinition","parameters":{"id":3016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3015,"mutability":"mutable","name":"slot","nameLocation":"3768:4:36","nodeType":"VariableDeclaration","scope":3023,"src":"3760:12:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3760:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3759:14:36"},"returnParameters":{"id":3020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3019,"mutability":"mutable","name":"r","nameLocation":"3815:1:36","nodeType":"VariableDeclaration","scope":3023,"src":"3797:19:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2935_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3018,"nodeType":"UserDefinedTypeName","pathNode":{"id":3017,"name":"BytesSlot","nameLocations":["3797:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2935,"src":"3797:9:36"},"referencedDeclaration":2935,"src":"3797:9:36","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2935_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3796:21:36"},"scope":3035,"src":"3738:159:36","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"4094:85:36","statements":[{"AST":{"nativeSrc":"4129:44:36","nodeType":"YulBlock","src":"4129:44:36","statements":[{"nativeSrc":"4143:20:36","nodeType":"YulAssignment","src":"4143:20:36","value":{"name":"store.slot","nativeSrc":"4153:10:36","nodeType":"YulIdentifier","src":"4153:10:36"},"variableNames":[{"name":"r.slot","nativeSrc":"4143:6:36","nodeType":"YulIdentifier","src":"4143:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3030,"isOffset":false,"isSlot":true,"src":"4143:6:36","suffix":"slot","valueSize":1},{"declaration":3026,"isOffset":false,"isSlot":true,"src":"4153:10:36","suffix":"slot","valueSize":1}],"flags":["memory-safe"],"id":3032,"nodeType":"InlineAssembly","src":"4104:69:36"}]},"documentation":{"id":3024,"nodeType":"StructuredDocumentation","src":"3903:99:36","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"4016:12:36","nodeType":"FunctionDefinition","parameters":{"id":3027,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3026,"mutability":"mutable","name":"store","nameLocation":"4043:5:36","nodeType":"VariableDeclaration","scope":3034,"src":"4029:19:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3025,"name":"bytes","nodeType":"ElementaryTypeName","src":"4029:5:36","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4028:21:36"},"returnParameters":{"id":3031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3030,"mutability":"mutable","name":"r","nameLocation":"4091:1:36","nodeType":"VariableDeclaration","scope":3034,"src":"4073:19:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2935_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3029,"nodeType":"UserDefinedTypeName","pathNode":{"id":3028,"name":"BytesSlot","nameLocations":["4073:9:36"],"nodeType":"IdentifierPath","referencedDeclaration":2935,"src":"4073:9:36"},"referencedDeclaration":2935,"src":"4073:9:36","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2935_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"4072:21:36"},"scope":3035,"src":"4007:172:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3036,"src":"1407:2774:36","usedErrors":[],"usedEvents":[]}],"src":"193:3989:36"},"id":36},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3047]},"id":3048,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3037,"literals":["solidity","^","0.8",".20"],"nodeType":"PragmaDirective","src":"115:24:37"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3038,"nodeType":"StructuredDocumentation","src":"141:280:37","text":" @dev Interface of the ERC-165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[ERC].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3047,"linearizedBaseContracts":[3047],"name":"IERC165","nameLocation":"432:7:37","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3039,"nodeType":"StructuredDocumentation","src":"446:340:37","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3046,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"800:17:37","nodeType":"FunctionDefinition","parameters":{"id":3042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3041,"mutability":"mutable","name":"interfaceId","nameLocation":"825:11:37","nodeType":"VariableDeclaration","scope":3046,"src":"818:18:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3040,"name":"bytes4","nodeType":"ElementaryTypeName","src":"818:6:37","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"817:20:37"},"returnParameters":{"id":3045,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3044,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3046,"src":"861:4:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3043,"name":"bool","nodeType":"ElementaryTypeName","src":"861:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"860:6:37"},"scope":3047,"src":"791:76:37","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3048,"src":"422:447:37","usedErrors":[],"usedEvents":[]}],"src":"115:755:37"},"id":37},"contracts/points/interface/IPoints.sol":{"ast":{"absolutePath":"contracts/points/interface/IPoints.sol","exportedSymbols":{"IPoints":[3059]},"id":3060,"license":"GPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":3049,"literals":["solidity","^","0.8",".28"],"nodeType":"PragmaDirective","src":"45:24:38"},{"abstract":false,"baseContracts":[],"canonicalName":"IPoints","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3059,"linearizedBaseContracts":[3059],"name":"IPoints","nameLocation":"81:7:38","nodeType":"ContractDefinition","nodes":[{"functionSelector":"26b3293f","id":3058,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"104:7:38","nodeType":"FunctionDefinition","parameters":{"id":3056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3051,"mutability":"mutable","name":"holder","nameLocation":"120:6:38","nodeType":"VariableDeclaration","scope":3058,"src":"112:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3050,"name":"address","nodeType":"ElementaryTypeName","src":"112:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3053,"mutability":"mutable","name":"amount","nameLocation":"136:6:38","nodeType":"VariableDeclaration","scope":3058,"src":"128:14:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3052,"name":"uint256","nodeType":"ElementaryTypeName","src":"128:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3055,"mutability":"mutable","name":"depositReasonCode","nameLocation":"152:17:38","nodeType":"VariableDeclaration","scope":3058,"src":"144:25:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3054,"name":"bytes32","nodeType":"ElementaryTypeName","src":"144:7:38","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"111:59:38"},"returnParameters":{"id":3057,"nodeType":"ParameterList","parameters":[],"src":"179:0:38"},"scope":3059,"src":"95:85:38","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3060,"src":"71:111:38","usedErrors":[],"usedEvents":[]}],"src":"45:138:38"},"id":38},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"ast":{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol","exportedSymbols":{"ERC20StakingPointsRewardsLimitedLinearPool":[3196],"ERC20StakingPointsRewardsLinearPool":[3280],"IERC20":[2403],"IForwarderRegistry":[1204],"IPoints":[3059]},"id":3197,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3061,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:39"},{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol","file":"./ERC20StakingPointsRewardsLinearPool.sol","id":3063,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3197,"sourceUnit":3281,"src":"57:94:39","symbolAliases":[{"foreign":{"id":3062,"name":"ERC20StakingPointsRewardsLinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"65:35:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3065,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3197,"sourceUnit":2813,"src":"152:79:39","symbolAliases":[{"foreign":{"id":3064,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"160:6:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3067,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3197,"sourceUnit":1205,"src":"232:114:39","symbolAliases":[{"foreign":{"id":3066,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"240:18:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../points/interface/IPoints.sol","id":3069,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3197,"sourceUnit":3060,"src":"347:58:39","symbolAliases":[{"foreign":{"id":3068,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"355:7:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3070,"name":"ERC20StakingPointsRewardsLinearPool","nameLocations":["462:35:39"],"nodeType":"IdentifierPath","referencedDeclaration":3280,"src":"462:35:39"},"id":3071,"nodeType":"InheritanceSpecifier","src":"462:35:39"}],"canonicalName":"ERC20StakingPointsRewardsLimitedLinearPool","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3196,"linearizedBaseContracts":[3196,3280,3342,2162,2197,1963,1048,1188,1176,2911,11,44,881,898,2215,216,168,2842,330,314],"name":"ERC20StakingPointsRewardsLimitedLinearPool","nameLocation":"416:42:39","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"62ba9096","id":3073,"mutability":"immutable","name":"CLAIM_CONTRACT","nameLocation":"529:14:39","nodeType":"VariableDeclaration","scope":3196,"src":"504:39:39","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3072,"name":"address","nodeType":"ElementaryTypeName","src":"504:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"errorSelector":"d0411ac5","id":3077,"name":"InvalidTransferOperator","nameLocation":"556:23:39","nodeType":"ErrorDefinition","parameters":{"id":3076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3075,"mutability":"mutable","name":"operator","nameLocation":"588:8:39","nodeType":"VariableDeclaration","scope":3077,"src":"580:16:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3074,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"579:18:39"},"src":"550:48:39"},{"errorSelector":"7a404b19","id":3079,"name":"OnlyReceiverInterface","nameLocation":"609:21:39","nodeType":"ErrorDefinition","parameters":{"id":3078,"nodeType":"ParameterList","parameters":[],"src":"630:2:39"},"src":"603:30:39"},{"body":{"id":3105,"nodeType":"Block","src":"934:47:39","statements":[{"expression":{"id":3103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3101,"name":"CLAIM_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"944:14:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3102,"name":"claimContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3081,"src":"961:13:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"944:30:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3104,"nodeType":"ExpressionStatement","src":"944:30:39"}]},"id":3106,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3095,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"866:12:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":3096,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3087,"src":"880:14:39","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},{"id":3097,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3089,"src":"896:17:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3098,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"915:17:39","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"id":3099,"kind":"baseConstructorSpecifier","modifierName":{"id":3094,"name":"ERC20StakingPointsRewardsLinearPool","nameLocations":["830:35:39"],"nodeType":"IdentifierPath","referencedDeclaration":3280,"src":"830:35:39"},"nodeType":"ModifierInvocation","src":"830:103:39"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3093,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"claimContract","nameLocation":"668:13:39","nodeType":"VariableDeclaration","scope":3106,"src":"660:21:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3080,"name":"address","nodeType":"ElementaryTypeName","src":"660:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"stakingToken","nameLocation":"698:12:39","nodeType":"VariableDeclaration","scope":3106,"src":"691:19:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":3083,"nodeType":"UserDefinedTypeName","pathNode":{"id":3082,"name":"IERC20","nameLocations":["691:6:39"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"691:6:39"},"referencedDeclaration":2403,"src":"691:6:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3087,"mutability":"mutable","name":"pointsContract","nameLocation":"728:14:39","nodeType":"VariableDeclaration","scope":3106,"src":"720:22:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"},"typeName":{"id":3086,"nodeType":"UserDefinedTypeName","pathNode":{"id":3085,"name":"IPoints","nameLocations":["720:7:39"],"nodeType":"IdentifierPath","referencedDeclaration":3059,"src":"720:7:39"},"referencedDeclaration":3059,"src":"720:7:39","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":3089,"mutability":"mutable","name":"depositReasonCode","nameLocation":"760:17:39","nodeType":"VariableDeclaration","scope":3106,"src":"752:25:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3088,"name":"bytes32","nodeType":"ElementaryTypeName","src":"752:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3092,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"806:17:39","nodeType":"VariableDeclaration","scope":3106,"src":"787:36:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":3091,"nodeType":"UserDefinedTypeName","pathNode":{"id":3090,"name":"IForwarderRegistry","nameLocations":["787:18:39"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"787:18:39"},"referencedDeclaration":1204,"src":"787:18:39","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"650:179:39"},"returnParameters":{"id":3100,"nodeType":"ParameterList","parameters":[],"src":"934:0:39"},"scope":3196,"src":"639:342:39","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[2050],"body":{"id":3163,"nodeType":"Block","src":"1118:301:39","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3121,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1136:3:39","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1140:6:39","memberName":"sender","nodeType":"MemberAccess","src":"1136:10:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3125,"name":"STAKING_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1985,"src":"1158:13:39","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}],"id":3124,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1150:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3123,"name":"address","nodeType":"ElementaryTypeName","src":"1150:7:39","typeDescriptions":{}}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1150:22:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1136:36:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[],"expression":{"argumentTypes":[],"id":3128,"name":"InvalidToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1987,"src":"1174:12:39","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1174:14:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":3120,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1128:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1128:61:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3131,"nodeType":"ExpressionStatement","src":"1128:61:39"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3133,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"1207:8:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3134,"name":"CLAIM_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3073,"src":"1219:14:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1207:26:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"arguments":[{"id":3137,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"1259:8:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3136,"name":"InvalidTransferOperator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3077,"src":"1235:23:39","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$_t_error_$","typeString":"function (address) pure returns (error)"}},"id":3138,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1235:33:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_error","typeString":"error"}],"id":3132,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18,-18],"referencedDeclaration":-18,"src":"1199:7:39","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_error_$returns$__$","typeString":"function (bool,error) pure"}},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1199:70:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3140,"nodeType":"ExpressionStatement","src":"1199:70:39"},{"assignments":[3142],"declarations":[{"constant":false,"id":3142,"mutability":"mutable","name":"staker","nameLocation":"1287:6:39","nodeType":"VariableDeclaration","scope":3163,"src":"1279:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3141,"name":"address","nodeType":"ElementaryTypeName","src":"1279:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3150,"initialValue":{"arguments":[{"id":3145,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3114,"src":"1307:4:39","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":3147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1314:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3146,"name":"address","nodeType":"ElementaryTypeName","src":"1314:7:39","typeDescriptions":{}}}],"id":3148,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1313:9:39","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"}],"expression":{"id":3143,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1296:3:39","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1300:6:39","memberName":"decode","nodeType":"MemberAccess","src":"1296:10:39","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1296:27:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"VariableDeclarationStatement","src":"1279:44:39"},{"expression":{"arguments":[{"id":3152,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"1340:6:39","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"id":3155,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3112,"src":"1359:5:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3153,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1348:3:39","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3154,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1352:6:39","memberName":"encode","nodeType":"MemberAccess","src":"1348:10:39","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1348:17:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3151,"name":"_stake","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1601,"src":"1333:6:39","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,bytes memory)"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1333:33:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3158,"nodeType":"ExpressionStatement","src":"1333:33:39"},{"expression":{"expression":{"expression":{"id":3159,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1383:4:39","typeDescriptions":{"typeIdentifier":"t_contract$_ERC20StakingPointsRewardsLimitedLinearPool_$3196","typeString":"contract ERC20StakingPointsRewardsLimitedLinearPool"}},"id":3160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1388:15:39","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":3164,"src":"1383:20:39","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3161,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1404:8:39","memberName":"selector","nodeType":"MemberAccess","src":"1383:29:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":3119,"id":3162,"nodeType":"Return","src":"1376:36:39"}]},"functionSelector":"4fc35859","id":3164,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"996:15:39","nodeType":"FunctionDefinition","overrides":{"id":3116,"nodeType":"OverrideSpecifier","overrides":[],"src":"1092:8:39"},"parameters":{"id":3115,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"operator","nameLocation":"1020:8:39","nodeType":"VariableDeclaration","scope":3164,"src":"1012:16:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3107,"name":"address","nodeType":"ElementaryTypeName","src":"1012:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3110,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3164,"src":"1030:7:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3112,"mutability":"mutable","name":"value","nameLocation":"1047:5:39","nodeType":"VariableDeclaration","scope":3164,"src":"1039:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3111,"name":"uint256","nodeType":"ElementaryTypeName","src":"1039:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3114,"mutability":"mutable","name":"data","nameLocation":"1069:4:39","nodeType":"VariableDeclaration","scope":3164,"src":"1054:19:39","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3113,"name":"bytes","nodeType":"ElementaryTypeName","src":"1054:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1011:63:39"},"returnParameters":{"id":3119,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3118,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3164,"src":"1110:6:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3117,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1110:6:39","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1109:8:39"},"scope":3196,"src":"987:432:39","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[2071],"body":{"id":3173,"nodeType":"Block","src":"1488:47:39","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3170,"name":"OnlyReceiverInterface","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3079,"src":"1505:21:39","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$_t_error_$","typeString":"function () pure returns (error)"}},"id":3171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1505:23:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_error","typeString":"error"}},"id":3172,"nodeType":"RevertStatement","src":"1498:30:39"}]},"functionSelector":"2d1e0c02","id":3174,"implemented":true,"kind":"function","modifiers":[],"name":"stake","nameLocation":"1434:5:39","nodeType":"FunctionDefinition","overrides":{"id":3168,"nodeType":"OverrideSpecifier","overrides":[],"src":"1479:8:39"},"parameters":{"id":3167,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3174,"src":"1440:14:39","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3165,"name":"bytes","nodeType":"ElementaryTypeName","src":"1440:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1439:16:39"},"returnParameters":{"id":3169,"nodeType":"ParameterList","parameters":[],"src":"1488:0:39"},"scope":3196,"src":"1425:110:39","stateMutability":"payable","virtual":true,"visibility":"public"},{"baseFunctions":[2120],"body":{"id":3194,"nodeType":"Block","src":"1653:162:39","statements":[{"expression":{"id":3192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3184,"name":"stakePoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"1762:11:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3187,"name":"stakeData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3178,"src":"1787:9:39","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":3189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1799:7:39","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"1799:7:39","typeDescriptions":{}}}],"id":3190,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1798:9:39","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"expression":{"id":3185,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1776:3:39","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1780:6:39","memberName":"decode","nodeType":"MemberAccess","src":"1776:10:39","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1776:32:39","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1762:46:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3193,"nodeType":"ExpressionStatement","src":"1762:46:39"}]},"id":3195,"implemented":true,"kind":"function","modifiers":[],"name":"_computeStake","nameLocation":"1550:13:39","nodeType":"FunctionDefinition","overrides":{"id":3180,"nodeType":"OverrideSpecifier","overrides":[],"src":"1614:8:39"},"parameters":{"id":3179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3195,"src":"1564:7:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3175,"name":"address","nodeType":"ElementaryTypeName","src":"1564:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3178,"mutability":"mutable","name":"stakeData","nameLocation":"1586:9:39","nodeType":"VariableDeclaration","scope":3195,"src":"1573:22:39","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3177,"name":"bytes","nodeType":"ElementaryTypeName","src":"1573:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1563:33:39"},"returnParameters":{"id":3183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3182,"mutability":"mutable","name":"stakePoints","nameLocation":"1640:11:39","nodeType":"VariableDeclaration","scope":3195,"src":"1632:19:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3181,"name":"uint256","nodeType":"ElementaryTypeName","src":"1632:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1631:21:39"},"scope":3196,"src":"1541:274:39","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3197,"src":"407:1410:39","usedErrors":[225,248,886,1388,1390,1392,1394,1400,1987,2415,2856,3077,3079],"usedEvents":[271,280,289,1360,1368,1376,1386]}],"src":"32:1786:39"},"id":39},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"ast":{"absolutePath":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol","exportedSymbols":{"ERC20Receiver":[2197],"ERC20StakingLinearPool":[2162],"ERC20StakingPointsRewardsLinearPool":[3280],"IERC20":[2403],"IForwarderRegistry":[1204],"IPoints":[3059],"LinearPool":[1963],"LinearPool_PointsRewards":[3342]},"id":3281,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3198,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:40"},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","file":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol","id":3200,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":1964,"src":"57:95:40","symbolAliases":[{"foreign":{"id":3199,"name":"LinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1963,"src":"65:10:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","file":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol","id":3202,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":2163,"src":"153:125:40","symbolAliases":[{"foreign":{"id":3201,"name":"ERC20StakingLinearPool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2162,"src":"161:22:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/staking/reward/LinearPool_PointsRewards.sol","file":"./reward/LinearPool_PointsRewards.sol","id":3204,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":3343,"src":"279:79:40","symbolAliases":[{"foreign":{"id":3203,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"287:24:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","id":3206,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":2198,"src":"359:98:40","symbolAliases":[{"foreign":{"id":3205,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"367:13:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3208,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":2813,"src":"458:79:40","symbolAliases":[{"foreign":{"id":3207,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2403,"src":"466:6:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":3210,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":1205,"src":"538:114:40","symbolAliases":[{"foreign":{"id":3209,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1204,"src":"546:18:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../points/interface/IPoints.sol","id":3212,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3281,"sourceUnit":3060,"src":"653:58:40","symbolAliases":[{"foreign":{"id":3211,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"661:7:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3213,"name":"ERC20StakingLinearPool","nameLocations":["761:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":2162,"src":"761:22:40"},"id":3214,"nodeType":"InheritanceSpecifier","src":"761:22:40"},{"baseName":{"id":3215,"name":"LinearPool_PointsRewards","nameLocations":["785:24:40"],"nodeType":"IdentifierPath","referencedDeclaration":3342,"src":"785:24:40"},"id":3216,"nodeType":"InheritanceSpecifier","src":"785:24:40"}],"canonicalName":"ERC20StakingPointsRewardsLinearPool","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3280,"linearizedBaseContracts":[3280,3342,2162,2197,1963,1048,1188,1176,2911,11,44,881,898,2215,216,168,2842,330,314],"name":"ERC20StakingPointsRewardsLinearPool","nameLocation":"722:35:40","nodeType":"ContractDefinition","nodes":[{"body":{"id":3238,"nodeType":"Block","src":"1092:2:40","statements":[]},"id":3239,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3230,"name":"stakingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"999:12:40","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},{"id":3231,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3227,"src":"1013:17:40","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}}],"id":3232,"kind":"baseConstructorSpecifier","modifierName":{"id":3229,"name":"ERC20StakingLinearPool","nameLocations":["976:22:40"],"nodeType":"IdentifierPath","referencedDeclaration":2162,"src":"976:22:40"},"nodeType":"ModifierInvocation","src":"976:55:40"},{"arguments":[{"id":3234,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3222,"src":"1057:14:40","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},{"id":3235,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3224,"src":"1073:17:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":3236,"kind":"baseConstructorSpecifier","modifierName":{"id":3233,"name":"LinearPool_PointsRewards","nameLocations":["1032:24:40"],"nodeType":"IdentifierPath","referencedDeclaration":3342,"src":"1032:24:40"},"nodeType":"ModifierInvocation","src":"1032:59:40"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3228,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3219,"mutability":"mutable","name":"stakingToken","nameLocation":"844:12:40","nodeType":"VariableDeclaration","scope":3239,"src":"837:19:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"},"typeName":{"id":3218,"nodeType":"UserDefinedTypeName","pathNode":{"id":3217,"name":"IERC20","nameLocations":["837:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":2403,"src":"837:6:40"},"referencedDeclaration":2403,"src":"837:6:40","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$2403","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3222,"mutability":"mutable","name":"pointsContract","nameLocation":"874:14:40","nodeType":"VariableDeclaration","scope":3239,"src":"866:22:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"},"typeName":{"id":3221,"nodeType":"UserDefinedTypeName","pathNode":{"id":3220,"name":"IPoints","nameLocations":["866:7:40"],"nodeType":"IdentifierPath","referencedDeclaration":3059,"src":"866:7:40"},"referencedDeclaration":3059,"src":"866:7:40","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":3224,"mutability":"mutable","name":"depositReasonCode","nameLocation":"906:17:40","nodeType":"VariableDeclaration","scope":3239,"src":"898:25:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3223,"name":"bytes32","nodeType":"ElementaryTypeName","src":"898:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3227,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"952:17:40","nodeType":"VariableDeclaration","scope":3239,"src":"933:36:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"},"typeName":{"id":3226,"nodeType":"UserDefinedTypeName","pathNode":{"id":3225,"name":"IForwarderRegistry","nameLocations":["933:18:40"],"nodeType":"IdentifierPath","referencedDeclaration":1204,"src":"933:18:40"},"referencedDeclaration":1204,"src":"933:18:40","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1204","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"827:148:40"},"returnParameters":{"id":3237,"nodeType":"ParameterList","parameters":[],"src":"1092:0:40"},"scope":3280,"src":"816:278:40","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1925,3331],"body":{"id":3257,"nodeType":"Block","src":"1274:78:40","statements":[{"expression":{"arguments":[{"id":3253,"name":"staker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3241,"src":"1330:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3254,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3243,"src":"1338:6:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3251,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"1291:24:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearPool_PointsRewards_$3342_$","typeString":"type(contract LinearPool_PointsRewards)"}},"id":3252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1316:13:40","memberName":"_computeClaim","nodeType":"MemberAccess","referencedDeclaration":3331,"src":"1291:38:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,uint256) returns (bytes memory)"}},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1291:54:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3250,"id":3256,"nodeType":"Return","src":"1284:61:40"}]},"id":3258,"implemented":true,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"1109:13:40","nodeType":"FunctionDefinition","overrides":{"id":3247,"nodeType":"OverrideSpecifier","overrides":[{"id":3245,"name":"LinearPool","nameLocations":["1203:10:40"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"1203:10:40"},{"id":3246,"name":"LinearPool_PointsRewards","nameLocations":["1215:24:40"],"nodeType":"IdentifierPath","referencedDeclaration":3342,"src":"1215:24:40"}],"src":"1194:46:40"},"parameters":{"id":3244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3241,"mutability":"mutable","name":"staker","nameLocation":"1140:6:40","nodeType":"VariableDeclaration","scope":3258,"src":"1132:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3240,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3243,"mutability":"mutable","name":"reward","nameLocation":"1164:6:40","nodeType":"VariableDeclaration","scope":3258,"src":"1156:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3242,"name":"uint256","nodeType":"ElementaryTypeName","src":"1156:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1122:54:40"},"returnParameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"claimData","nameLocation":"1263:9:40","nodeType":"VariableDeclaration","scope":3258,"src":"1250:22:40","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3248,"name":"bytes","nodeType":"ElementaryTypeName","src":"1250:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1249:24:40"},"scope":3280,"src":"1100:252:40","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1934,3341],"body":{"id":3278,"nodeType":"Block","src":"1497:83:40","statements":[{"expression":{"arguments":[{"id":3273,"name":"rewarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3260,"src":"1550:8:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3274,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3262,"src":"1560:6:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3275,"name":"dust","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3264,"src":"1568:4:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3270,"name":"LinearPool_PointsRewards","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3342,"src":"1507:24:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_LinearPool_PointsRewards_$3342_$","typeString":"type(contract LinearPool_PointsRewards)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1532:17:40","memberName":"_computeAddReward","nodeType":"MemberAccess","referencedDeclaration":3341,"src":"1507:42:40","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256)"}},"id":3276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1507:66:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3277,"nodeType":"ExpressionStatement","src":"1507:66:40"}]},"id":3279,"implemented":true,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"1367:17:40","nodeType":"FunctionDefinition","overrides":{"id":3268,"nodeType":"OverrideSpecifier","overrides":[{"id":3266,"name":"LinearPool","nameLocations":["1459:10:40"],"nodeType":"IdentifierPath","referencedDeclaration":1963,"src":"1459:10:40"},{"id":3267,"name":"LinearPool_PointsRewards","nameLocations":["1471:24:40"],"nodeType":"IdentifierPath","referencedDeclaration":3342,"src":"1471:24:40"}],"src":"1450:46:40"},"parameters":{"id":3265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3260,"mutability":"mutable","name":"rewarder","nameLocation":"1393:8:40","nodeType":"VariableDeclaration","scope":3279,"src":"1385:16:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3259,"name":"address","nodeType":"ElementaryTypeName","src":"1385:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3262,"mutability":"mutable","name":"reward","nameLocation":"1411:6:40","nodeType":"VariableDeclaration","scope":3279,"src":"1403:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3261,"name":"uint256","nodeType":"ElementaryTypeName","src":"1403:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3264,"mutability":"mutable","name":"dust","nameLocation":"1427:4:40","nodeType":"VariableDeclaration","scope":3279,"src":"1419:12:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3263,"name":"uint256","nodeType":"ElementaryTypeName","src":"1419:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1384:48:40"},"returnParameters":{"id":3269,"nodeType":"ParameterList","parameters":[],"src":"1497:0:40"},"scope":3280,"src":"1358:222:40","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3281,"src":"713:869:40","usedErrors":[225,248,886,1388,1390,1392,1394,1400,1987,2415,2856],"usedEvents":[271,280,289,1360,1368,1376,1386]}],"src":"32:1551:40"},"id":40},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"ast":{"absolutePath":"contracts/staking/reward/LinearPool_PointsRewards.sol","exportedSymbols":{"IPoints":[3059],"LinearPool_PointsRewards":[3342]},"id":3343,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3282,"literals":["solidity","0.8",".28"],"nodeType":"PragmaDirective","src":"32:23:41"},{"absolutePath":"contracts/points/interface/IPoints.sol","file":"./../../points/interface/IPoints.sol","id":3284,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3343,"sourceUnit":3060,"src":"57:61:41","symbolAliases":[{"foreign":{"id":3283,"name":"IPoints","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3059,"src":"65:7:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"LinearPool_PointsRewards","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":3342,"linearizedBaseContracts":[3342],"name":"LinearPool_PointsRewards","nameLocation":"190:24:41","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"2d4c2f93","id":3287,"mutability":"immutable","name":"POINTS_CONTRACT","nameLocation":"246:15:41","nodeType":"VariableDeclaration","scope":3342,"src":"221:40:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"},"typeName":{"id":3286,"nodeType":"UserDefinedTypeName","pathNode":{"id":3285,"name":"IPoints","nameLocations":["221:7:41"],"nodeType":"IdentifierPath","referencedDeclaration":3059,"src":"221:7:41"},"referencedDeclaration":3059,"src":"221:7:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"visibility":"public"},{"constant":false,"functionSelector":"2196e445","id":3289,"mutability":"immutable","name":"DEPOSIT_REASON_CODE","nameLocation":"292:19:41","nodeType":"VariableDeclaration","scope":3342,"src":"267:44:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3288,"name":"bytes32","nodeType":"ElementaryTypeName","src":"267:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"body":{"id":3305,"nodeType":"Block","src":"381:98:41","statements":[{"expression":{"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3297,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"391:15:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3298,"name":"pointsContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"409:14:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"src":"391:32:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"id":3300,"nodeType":"ExpressionStatement","src":"391:32:41"},{"expression":{"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3301,"name":"DEPOSIT_REASON_CODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"433:19:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3302,"name":"depositReasonCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3294,"src":"455:17:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"433:39:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":3304,"nodeType":"ExpressionStatement","src":"433:39:41"}]},"id":3306,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3295,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"pointsContract","nameLocation":"338:14:41","nodeType":"VariableDeclaration","scope":3306,"src":"330:22:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"},"typeName":{"id":3291,"nodeType":"UserDefinedTypeName","pathNode":{"id":3290,"name":"IPoints","nameLocations":["330:7:41"],"nodeType":"IdentifierPath","referencedDeclaration":3059,"src":"330:7:41"},"referencedDeclaration":3059,"src":"330:7:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"visibility":"internal"},{"constant":false,"id":3294,"mutability":"mutable","name":"depositReasonCode","nameLocation":"362:17:41","nodeType":"VariableDeclaration","scope":3306,"src":"354:25:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3293,"name":"bytes32","nodeType":"ElementaryTypeName","src":"354:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"329:51:41"},"returnParameters":{"id":3296,"nodeType":"ParameterList","parameters":[],"src":"381:0:41"},"scope":3342,"src":"318:161:41","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3330,"nodeType":"Block","src":"590:117:41","statements":[{"expression":{"id":3320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3315,"name":"claimData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3313,"src":"600:9:41","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3318,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"623:6:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3316,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"612:3:41","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3317,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"616:6:41","memberName":"encode","nodeType":"MemberAccess","src":"612:10:41","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3319,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"612:18:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"600:30:41","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3321,"nodeType":"ExpressionStatement","src":"600:30:41"},{"expression":{"arguments":[{"id":3325,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3308,"src":"664:6:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3326,"name":"reward","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3310,"src":"672:6:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3327,"name":"DEPOSIT_REASON_CODE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"680:19:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3322,"name":"POINTS_CONTRACT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"640:15:41","typeDescriptions":{"typeIdentifier":"t_contract$_IPoints_$3059","typeString":"contract IPoints"}},"id":3324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"656:7:41","memberName":"deposit","nodeType":"MemberAccess","referencedDeclaration":3058,"src":"640:23:41","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_bytes32_$returns$__$","typeString":"function (address,uint256,bytes32) external"}},"id":3328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"640:60:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3329,"nodeType":"ExpressionStatement","src":"640:60:41"}]},"id":3331,"implemented":true,"kind":"function","modifiers":[],"name":"_computeClaim","nameLocation":"494:13:41","nodeType":"FunctionDefinition","parameters":{"id":3311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3308,"mutability":"mutable","name":"sender","nameLocation":"516:6:41","nodeType":"VariableDeclaration","scope":3331,"src":"508:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3307,"name":"address","nodeType":"ElementaryTypeName","src":"508:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3310,"mutability":"mutable","name":"reward","nameLocation":"532:6:41","nodeType":"VariableDeclaration","scope":3331,"src":"524:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3309,"name":"uint256","nodeType":"ElementaryTypeName","src":"524:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"507:32:41"},"returnParameters":{"id":3314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3313,"mutability":"mutable","name":"claimData","nameLocation":"579:9:41","nodeType":"VariableDeclaration","scope":3331,"src":"566:22:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3312,"name":"bytes","nodeType":"ElementaryTypeName","src":"566:5:41","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"565:24:41"},"scope":3342,"src":"485:222:41","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":3340,"nodeType":"Block","src":"803:2:41","statements":[]},"id":3341,"implemented":true,"kind":"function","modifiers":[],"name":"_computeAddReward","nameLocation":"722:17:41","nodeType":"FunctionDefinition","parameters":{"id":3338,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3333,"mutability":"mutable","name":"sender","nameLocation":"748:6:41","nodeType":"VariableDeclaration","scope":3341,"src":"740:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3332,"name":"address","nodeType":"ElementaryTypeName","src":"740:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3335,"mutability":"mutable","name":"reward","nameLocation":"764:6:41","nodeType":"VariableDeclaration","scope":3341,"src":"756:14:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3334,"name":"uint256","nodeType":"ElementaryTypeName","src":"756:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3337,"mutability":"mutable","name":"dust","nameLocation":"780:4:41","nodeType":"VariableDeclaration","scope":3341,"src":"772:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3336,"name":"uint256","nodeType":"ElementaryTypeName","src":"772:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"739:46:41"},"returnParameters":{"id":3339,"nodeType":"ParameterList","parameters":[],"src":"803:0:41"},"scope":3342,"src":"713:92:41","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3343,"src":"172:635:41","usedErrors":[],"usedEvents":[]}],"src":"32:776:41"},"id":41}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff46fe05321bfd9e6e6febeaf6c137e0c60a8c237f684057194663d82e2ad4d64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF46FE05321BFD9E6E6FEBEAF6C137E0C PUSH1 0xA8 0xC2 CALLDATACOPY 0xF6 DUP5 SDIV PUSH18 0x94663D82E2AD4D64736F6C634300081C0033 ","sourceMap":"422:4130:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;422:4130:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212206ff46fe05321bfd9e6e6febeaf6c137e0c60a8c237f684057194663d82e2ad4d64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH16 0xF46FE05321BFD9E6E6FEBEAF6C137E0C PUSH1 0xA8 0xC2 CALLDATACOPY 0xF6 DUP5 SDIV PUSH18 0x94663D82E2AD4D64736F6C634300081C0033 ","sourceMap":"422:4130:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;589:4647:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f0cf86e7a821f3f05cff6cc240e7ea7660e4f5f4b7f0b2522a5fea9bfe5cd22a64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE 0xCF DUP7 0xE7 0xA8 0x21 RETURN CREATE TLOAD SELFDESTRUCT PUSH13 0xC240E7EA7660E4F5F4B7F0B252 0x2A PUSH0 0xEA SWAP12 INVALID TLOAD 0xD2 0x2A PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"589:4647:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204dc52e52e873b8004ad95d1abf880c5a74e19a43056b5bf8aadf2276342ea7e664736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4D 0xC5 0x2E MSTORE 0xE8 PUSH20 0xB8004AD95D1ABF880C5A74E19A43056B5BF8AADF 0x22 PUSH23 0x342EA7E664736F6C634300081C00330000000000000000 ","sourceMap":"189:1692:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"},{"internalType":"address","name":"target","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"isApprovedForwarder(address,address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account.","target":"The target contract."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise."}}},"title":"Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address,address)":"019a2028"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\",\"target\":\"The target contract.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\"}}},\"title\":\"Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122098cc8755c39cf71fbc9ee4dec3ab79f16c85b4b506555014bd103a082b039c0464736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 0xCC DUP8 SSTORE 0xC3 SWAP13 0xF7 0x1F 0xBC SWAP15 0xE4 0xDE 0xC3 0xAB PUSH26 0xF16C85B4B506555014BD103A082B039C0464736F6C634300081C STOP CALLER ","sourceMap":"202:568:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:23:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:23;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122085d0143d426a4174f0ce88c43d240e9aea5ab75a2e5ce6fece2920f40c3590eb64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP6 0xD0 EQ RETURNDATASIZE TIMESTAMP PUSH11 0x4174F0CE88C43D240E9AEA GAS 0xB7 GAS 0x2E TLOAD 0xE6 INVALID 0xCE 0x29 KECCAK256 DELEGATECALL 0xC CALLDATALOAD SWAP1 0xEB PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"319:712:23:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol":{"LinearPool":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":\"LinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\nabstract contract LinearPool is AccessControl, ReentrancyGuard, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), abi.encode(stakeData));\\n    }\\n\\n    function _stake(address sender, bytes memory stakeData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeStake(sender, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[sender] += stakePoints;\\n        emit Staked(sender, stakeData, stakePoints);\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _withdraw(address sender, bytes memory withdrawData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeWithdraw(sender, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        totalStaked -= stakePoints;\\n        staked[sender] -= stakePoints;\\n        emit Withdrawn(sender, withdrawData, stakePoints);\\n    }\\n\\n    function claim() public virtual {\\n        address sender = _msgSender();\\n        _updateReward(sender);\\n        uint256 reward = earned(sender);\\n        if (reward != 0) {\\n            rewards[sender] = 0;\\n            bytes memory claimData = _computeClaim(sender, reward);\\n            emit Claimed(sender, claimData, reward);\\n        }\\n    }\\n\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, sender);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(sender, reward, dust);\\n\\n        emit RewardAdded(sender, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x110fa1853326976c0f86e5eab2e656af7d8625ffaff607f04a47dbaf55557c9b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2853,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1332,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":1334,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":1336,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":1338,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":1340,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":1344,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":1348,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":1352,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol:LinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol":{"ERC20StakingLinearPool":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":\"ERC20StakingLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\nabstract contract LinearPool is AccessControl, ReentrancyGuard, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), abi.encode(stakeData));\\n    }\\n\\n    function _stake(address sender, bytes memory stakeData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeStake(sender, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[sender] += stakePoints;\\n        emit Staked(sender, stakeData, stakePoints);\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _withdraw(address sender, bytes memory withdrawData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeWithdraw(sender, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        totalStaked -= stakePoints;\\n        staked[sender] -= stakePoints;\\n        emit Withdrawn(sender, withdrawData, stakePoints);\\n    }\\n\\n    function claim() public virtual {\\n        address sender = _msgSender();\\n        _updateReward(sender);\\n        uint256 reward = earned(sender);\\n        if (reward != 0) {\\n            rewards[sender] = 0;\\n            bytes memory claimData = _computeClaim(sender, reward);\\n            emit Claimed(sender, claimData, reward);\\n        }\\n    }\\n\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, sender);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(sender, reward, dust);\\n\\n        emit RewardAdded(sender, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x110fa1853326976c0f86e5eab2e656af7d8625ffaff607f04a47dbaf55557c9b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb94ae7a938c0d4bd6b587025c13c1592019a999d5e713c35c875d923a948ad11\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2853,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1332,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":1334,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":1336,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":1338,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":1340,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":1344,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":1348,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":1352,"contract":"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol:ERC20StakingLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ERC20Receiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC20 Fungible Token Standard, Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC20 Fungible Token Standard, Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Receiver.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":\"ERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol":{"Address":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:28:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:410:28;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122075c04524aacf0ba10827e4073e8b5ebba539635566bf6b335f595772ff341a9b64736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xC04524AACF0BA10827E4073E8B5EBBA539635566BF6B CALLER PUSH0 MSIZE JUMPI PUSH19 0xFF341A9B64736F6C634300081C003300000000 ","sourceMap":"58:410:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"hasBytecode(address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC1363.sol":{"IERC1363":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"approveAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFromAndCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"approveAndCall(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"approveAndCall(address,uint256,bytes)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.","params":{"data":"Additional data with no specified format, sent in call to `spender`.","spender":"The address which will spend the funds.","value":"The amount of tokens to be spent."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferAndCall(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferAndCall(address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFromAndCall(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}},"transferFromAndCall(address,address,uint256,bytes)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.","params":{"data":"Additional data with no specified format, sent in call to `to`.","from":"The address which you want to send tokens from.","to":"The address which you want to transfer to.","value":"The amount of tokens to be transferred."},"returns":{"_0":"A boolean value indicating whether the operation succeeded unless throwing."}}},"title":"IERC1363","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","approveAndCall(address,uint256)":"3177029f","approveAndCall(address,uint256,bytes)":"cae9ca51","balanceOf(address)":"70a08231","supportsInterface(bytes4)":"01ffc9a7","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferAndCall(address,uint256)":"1296ee62","transferAndCall(address,uint256,bytes)":"4000aea0","transferFrom(address,address,uint256)":"23b872dd","transferFromAndCall(address,address,uint256)":"d8fbe994","transferFromAndCall(address,address,uint256,bytes)":"c1d34b89"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"approveAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFromAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363]. Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"approveAndCall(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"approveAndCall(address,uint256,bytes)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `spender`.\",\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferAndCall(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferAndCall(address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to` and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFromAndCall(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}},\"transferFromAndCall(address,address,uint256,bytes)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism and then calls {IERC1363Receiver-onTransferReceived} on `to`.\",\"params\":{\"data\":\"Additional data with no specified format, sent in call to `to`.\",\"from\":\"The address which you want to send tokens from.\",\"to\":\"The address which you want to transfer to.\",\"value\":\"The amount of tokens to be transferred.\"},\"returns\":{\"_0\":\"A boolean value indicating whether the operation succeeded unless throwing.\"}}},\"title\":\"IERC1363\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":\"IERC1363\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC-20 standard as defined in the ERC.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the value of tokens owned by `account`."},"totalSupply()":{"details":"Returns the value of tokens in existence."},"transfer(address,uint256)":{"details":"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"currentAllowance","type":"uint256"},{"internalType":"uint256","name":"requestedDecrease","type":"uint256"}],"name":"SafeERC20FailedDecreaseAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"}],"devdoc":{"details":"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","errors":{"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)":[{"details":"Indicates a failed `decreaseAllowance` request."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:33:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;698:8692:33;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220607550b4c6a633bc8d1bcca1ae00bd7e6a16f7cd0cab8030df71f92b25cfe28864736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH1 0x75 POP 0xB4 0xC6 0xA6 CALLER 0xBC DUP14 SHL 0xCC LOG1 0xAE STOP 0xBD PUSH31 0x6A16F7CD0CAB8030DF71F92B25CFE28864736F6C634300081C003300000000 ","sourceMap":"698:8692:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","approveAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite","transferAndCallRelaxed(contract IERC1363,address,uint256,bytes memory)":"infinite","transferFromAndCallRelaxed(contract IERC1363,address,address,uint256,bytes memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/ReentrancyGuard.sol":{"ReentrancyGuard":{"abi":[{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"}],"devdoc":{"details":"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].","errors":{"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}]},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Contract module that helps prevent reentrant calls to a function. Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier available, which can be applied to functions to make sure there are no nested (reentrant) calls to them. Note that because there is a single `nonReentrant` guard, functions marked as `nonReentrant` may not call one another. This can be worked around by making those functions `private`, and then adding `external` `nonReentrant` entry points to them. TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at, consider using {ReentrancyGuardTransient} instead. TIP: If you would like to learn more about reentrancy and alternative ways to protect against it, check out our blog post https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\",\"errors\":{\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":\"ReentrancyGuard\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2853,"contract":"@openzeppelin/contracts/utils/ReentrancyGuard.sol:ReentrancyGuard","label":"_status","offset":0,"slot":"0","type":"t_uint256"}],"types":{"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:36:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1407:2774:36;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207e1a545c86503babd60c23a0c85705fa22cccc683f9eff5f62ce84277e67fb1364736f6c634300081c0033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH31 0x1A545C86503BABD60C23A0C85705FA22CCCC683F9EFF5F62CE84277E67FB13 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"1407:2774:36:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getInt256Slot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC-1967 implementation slot: ```solidity contract ERC1967 {     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` TIP: Consider using this library along with {SlotDerivation}.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[ERC]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/points/interface/IPoints.sol":{"IPoints":{"abi":[{"inputs":[{"internalType":"address","name":"holder","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit(address,uint256,bytes32)":"26b3293f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/points/interface/IPoints.sol\":\"IPoints\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol":{"ERC20StakingPointsRewardsLimitedLinearPool":{"abi":[{"inputs":[{"internalType":"address","name":"claimContract","type":"address"},{"internalType":"contract IERC20","name":"stakingToken","type":"address"},{"internalType":"contract IPoints","name":"pointsContract","type":"address"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"}],"name":"InvalidTransferOperator","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"OnlyReceiverInterface","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"CLAIM_CONTRACT","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1022":{"entryPoint":null,"id":1022,"parameterSlots":1,"returnSlots":0},"@_1069":{"entryPoint":null,"id":1069,"parameterSlots":1,"returnSlots":0},"@_1414":{"entryPoint":null,"id":1414,"parameterSlots":1,"returnSlots":0},"@_2004":{"entryPoint":null,"id":2004,"parameterSlots":2,"returnSlots":0},"@_2196":{"entryPoint":null,"id":2196,"parameterSlots":0,"returnSlots":0},"@_2864":{"entryPoint":null,"id":2864,"parameterSlots":0,"returnSlots":0},"@_3106":{"entryPoint":null,"id":3106,"parameterSlots":5,"returnSlots":0},"@_3239":{"entryPoint":null,"id":3239,"parameterSlots":4,"returnSlots":0},"@_3306":{"entryPoint":null,"id":3306,"parameterSlots":2,"returnSlots":0},"@_43":{"entryPoint":null,"id":43,"parameterSlots":1,"returnSlots":0},"@constructorInit_694":{"entryPoint":228,"id":694,"parameterSlots":2,"returnSlots":0},"@layout_850":{"entryPoint":176,"id":850,"parameterSlots":0,"returnSlots":1},"@layout_998":{"entryPoint":339,"id":998,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_952":{"entryPoint":385,"id":952,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_addresst_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory":{"entryPoint":501,"id":null,"parameterSlots":2,"returnSlots":5},"checked_sub_t_uint256":{"entryPoint":608,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":477,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1156:42","nodeType":"YulBlock","src":"0:1156:42","statements":[{"nativeSrc":"6:3:42","nodeType":"YulBlock","src":"6:3:42","statements":[]},{"body":{"nativeSrc":"59:86:42","nodeType":"YulBlock","src":"59:86:42","statements":[{"body":{"nativeSrc":"123:16:42","nodeType":"YulBlock","src":"123:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"132:1:42","nodeType":"YulLiteral","src":"132:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"135:1:42","nodeType":"YulLiteral","src":"135:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"125:6:42","nodeType":"YulIdentifier","src":"125:6:42"},"nativeSrc":"125:12:42","nodeType":"YulFunctionCall","src":"125:12:42"},"nativeSrc":"125:12:42","nodeType":"YulExpressionStatement","src":"125:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:42","nodeType":"YulIdentifier","src":"82:5:42"},{"arguments":[{"name":"value","nativeSrc":"93:5:42","nodeType":"YulIdentifier","src":"93:5:42"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"108:3:42","nodeType":"YulLiteral","src":"108:3:42","type":"","value":"160"},{"kind":"number","nativeSrc":"113:1:42","nodeType":"YulLiteral","src":"113:1:42","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"104:3:42","nodeType":"YulIdentifier","src":"104:3:42"},"nativeSrc":"104:11:42","nodeType":"YulFunctionCall","src":"104:11:42"},{"kind":"number","nativeSrc":"117:1:42","nodeType":"YulLiteral","src":"117:1:42","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"100:3:42","nodeType":"YulIdentifier","src":"100:3:42"},"nativeSrc":"100:19:42","nodeType":"YulFunctionCall","src":"100:19:42"}],"functionName":{"name":"and","nativeSrc":"89:3:42","nodeType":"YulIdentifier","src":"89:3:42"},"nativeSrc":"89:31:42","nodeType":"YulFunctionCall","src":"89:31:42"}],"functionName":{"name":"eq","nativeSrc":"79:2:42","nodeType":"YulIdentifier","src":"79:2:42"},"nativeSrc":"79:42:42","nodeType":"YulFunctionCall","src":"79:42:42"}],"functionName":{"name":"iszero","nativeSrc":"72:6:42","nodeType":"YulIdentifier","src":"72:6:42"},"nativeSrc":"72:50:42","nodeType":"YulFunctionCall","src":"72:50:42"},"nativeSrc":"69:70:42","nodeType":"YulIf","src":"69:70:42"}]},"name":"validator_revert_address","nativeSrc":"14:131:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:42","nodeType":"YulTypedName","src":"48:5:42","type":""}],"src":"14:131:42"},{"body":{"nativeSrc":"357:567:42","nodeType":"YulBlock","src":"357:567:42","statements":[{"body":{"nativeSrc":"404:16:42","nodeType":"YulBlock","src":"404:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"413:1:42","nodeType":"YulLiteral","src":"413:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"416:1:42","nodeType":"YulLiteral","src":"416:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"406:6:42","nodeType":"YulIdentifier","src":"406:6:42"},"nativeSrc":"406:12:42","nodeType":"YulFunctionCall","src":"406:12:42"},"nativeSrc":"406:12:42","nodeType":"YulExpressionStatement","src":"406:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"378:7:42","nodeType":"YulIdentifier","src":"378:7:42"},{"name":"headStart","nativeSrc":"387:9:42","nodeType":"YulIdentifier","src":"387:9:42"}],"functionName":{"name":"sub","nativeSrc":"374:3:42","nodeType":"YulIdentifier","src":"374:3:42"},"nativeSrc":"374:23:42","nodeType":"YulFunctionCall","src":"374:23:42"},{"kind":"number","nativeSrc":"399:3:42","nodeType":"YulLiteral","src":"399:3:42","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"370:3:42","nodeType":"YulIdentifier","src":"370:3:42"},"nativeSrc":"370:33:42","nodeType":"YulFunctionCall","src":"370:33:42"},"nativeSrc":"367:53:42","nodeType":"YulIf","src":"367:53:42"},{"nativeSrc":"429:29:42","nodeType":"YulVariableDeclaration","src":"429:29:42","value":{"arguments":[{"name":"headStart","nativeSrc":"448:9:42","nodeType":"YulIdentifier","src":"448:9:42"}],"functionName":{"name":"mload","nativeSrc":"442:5:42","nodeType":"YulIdentifier","src":"442:5:42"},"nativeSrc":"442:16:42","nodeType":"YulFunctionCall","src":"442:16:42"},"variables":[{"name":"value","nativeSrc":"433:5:42","nodeType":"YulTypedName","src":"433:5:42","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"492:5:42","nodeType":"YulIdentifier","src":"492:5:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"467:24:42","nodeType":"YulIdentifier","src":"467:24:42"},"nativeSrc":"467:31:42","nodeType":"YulFunctionCall","src":"467:31:42"},"nativeSrc":"467:31:42","nodeType":"YulExpressionStatement","src":"467:31:42"},{"nativeSrc":"507:15:42","nodeType":"YulAssignment","src":"507:15:42","value":{"name":"value","nativeSrc":"517:5:42","nodeType":"YulIdentifier","src":"517:5:42"},"variableNames":[{"name":"value0","nativeSrc":"507:6:42","nodeType":"YulIdentifier","src":"507:6:42"}]},{"nativeSrc":"531:40:42","nodeType":"YulVariableDeclaration","src":"531:40:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"556:9:42","nodeType":"YulIdentifier","src":"556:9:42"},{"kind":"number","nativeSrc":"567:2:42","nodeType":"YulLiteral","src":"567:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"552:3:42","nodeType":"YulIdentifier","src":"552:3:42"},"nativeSrc":"552:18:42","nodeType":"YulFunctionCall","src":"552:18:42"}],"functionName":{"name":"mload","nativeSrc":"546:5:42","nodeType":"YulIdentifier","src":"546:5:42"},"nativeSrc":"546:25:42","nodeType":"YulFunctionCall","src":"546:25:42"},"variables":[{"name":"value_1","nativeSrc":"535:7:42","nodeType":"YulTypedName","src":"535:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"605:7:42","nodeType":"YulIdentifier","src":"605:7:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"580:24:42","nodeType":"YulIdentifier","src":"580:24:42"},"nativeSrc":"580:33:42","nodeType":"YulFunctionCall","src":"580:33:42"},"nativeSrc":"580:33:42","nodeType":"YulExpressionStatement","src":"580:33:42"},{"nativeSrc":"622:17:42","nodeType":"YulAssignment","src":"622:17:42","value":{"name":"value_1","nativeSrc":"632:7:42","nodeType":"YulIdentifier","src":"632:7:42"},"variableNames":[{"name":"value1","nativeSrc":"622:6:42","nodeType":"YulIdentifier","src":"622:6:42"}]},{"nativeSrc":"648:40:42","nodeType":"YulVariableDeclaration","src":"648:40:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"673:9:42","nodeType":"YulIdentifier","src":"673:9:42"},{"kind":"number","nativeSrc":"684:2:42","nodeType":"YulLiteral","src":"684:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"669:3:42","nodeType":"YulIdentifier","src":"669:3:42"},"nativeSrc":"669:18:42","nodeType":"YulFunctionCall","src":"669:18:42"}],"functionName":{"name":"mload","nativeSrc":"663:5:42","nodeType":"YulIdentifier","src":"663:5:42"},"nativeSrc":"663:25:42","nodeType":"YulFunctionCall","src":"663:25:42"},"variables":[{"name":"value_2","nativeSrc":"652:7:42","nodeType":"YulTypedName","src":"652:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"722:7:42","nodeType":"YulIdentifier","src":"722:7:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"697:24:42","nodeType":"YulIdentifier","src":"697:24:42"},"nativeSrc":"697:33:42","nodeType":"YulFunctionCall","src":"697:33:42"},"nativeSrc":"697:33:42","nodeType":"YulExpressionStatement","src":"697:33:42"},{"nativeSrc":"739:17:42","nodeType":"YulAssignment","src":"739:17:42","value":{"name":"value_2","nativeSrc":"749:7:42","nodeType":"YulIdentifier","src":"749:7:42"},"variableNames":[{"name":"value2","nativeSrc":"739:6:42","nodeType":"YulIdentifier","src":"739:6:42"}]},{"nativeSrc":"765:35:42","nodeType":"YulAssignment","src":"765:35:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"785:9:42","nodeType":"YulIdentifier","src":"785:9:42"},{"kind":"number","nativeSrc":"796:2:42","nodeType":"YulLiteral","src":"796:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"781:3:42","nodeType":"YulIdentifier","src":"781:3:42"},"nativeSrc":"781:18:42","nodeType":"YulFunctionCall","src":"781:18:42"}],"functionName":{"name":"mload","nativeSrc":"775:5:42","nodeType":"YulIdentifier","src":"775:5:42"},"nativeSrc":"775:25:42","nodeType":"YulFunctionCall","src":"775:25:42"},"variableNames":[{"name":"value3","nativeSrc":"765:6:42","nodeType":"YulIdentifier","src":"765:6:42"}]},{"nativeSrc":"809:41:42","nodeType":"YulVariableDeclaration","src":"809:41:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"834:9:42","nodeType":"YulIdentifier","src":"834:9:42"},{"kind":"number","nativeSrc":"845:3:42","nodeType":"YulLiteral","src":"845:3:42","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"830:3:42","nodeType":"YulIdentifier","src":"830:3:42"},"nativeSrc":"830:19:42","nodeType":"YulFunctionCall","src":"830:19:42"}],"functionName":{"name":"mload","nativeSrc":"824:5:42","nodeType":"YulIdentifier","src":"824:5:42"},"nativeSrc":"824:26:42","nodeType":"YulFunctionCall","src":"824:26:42"},"variables":[{"name":"value_3","nativeSrc":"813:7:42","nodeType":"YulTypedName","src":"813:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"884:7:42","nodeType":"YulIdentifier","src":"884:7:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"859:24:42","nodeType":"YulIdentifier","src":"859:24:42"},"nativeSrc":"859:33:42","nodeType":"YulFunctionCall","src":"859:33:42"},"nativeSrc":"859:33:42","nodeType":"YulExpressionStatement","src":"859:33:42"},{"nativeSrc":"901:17:42","nodeType":"YulAssignment","src":"901:17:42","value":{"name":"value_3","nativeSrc":"911:7:42","nodeType":"YulIdentifier","src":"911:7:42"},"variableNames":[{"name":"value4","nativeSrc":"901:6:42","nodeType":"YulIdentifier","src":"901:6:42"}]}]},"name":"abi_decode_tuple_t_addresst_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory","nativeSrc":"150:774:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"291:9:42","nodeType":"YulTypedName","src":"291:9:42","type":""},{"name":"dataEnd","nativeSrc":"302:7:42","nodeType":"YulTypedName","src":"302:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"314:6:42","nodeType":"YulTypedName","src":"314:6:42","type":""},{"name":"value1","nativeSrc":"322:6:42","nodeType":"YulTypedName","src":"322:6:42","type":""},{"name":"value2","nativeSrc":"330:6:42","nodeType":"YulTypedName","src":"330:6:42","type":""},{"name":"value3","nativeSrc":"338:6:42","nodeType":"YulTypedName","src":"338:6:42","type":""},{"name":"value4","nativeSrc":"346:6:42","nodeType":"YulTypedName","src":"346:6:42","type":""}],"src":"150:774:42"},{"body":{"nativeSrc":"978:176:42","nodeType":"YulBlock","src":"978:176:42","statements":[{"nativeSrc":"988:17:42","nodeType":"YulAssignment","src":"988:17:42","value":{"arguments":[{"name":"x","nativeSrc":"1000:1:42","nodeType":"YulIdentifier","src":"1000:1:42"},{"name":"y","nativeSrc":"1003:1:42","nodeType":"YulIdentifier","src":"1003:1:42"}],"functionName":{"name":"sub","nativeSrc":"996:3:42","nodeType":"YulIdentifier","src":"996:3:42"},"nativeSrc":"996:9:42","nodeType":"YulFunctionCall","src":"996:9:42"},"variableNames":[{"name":"diff","nativeSrc":"988:4:42","nodeType":"YulIdentifier","src":"988:4:42"}]},{"body":{"nativeSrc":"1037:111:42","nodeType":"YulBlock","src":"1037:111:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1058:1:42","nodeType":"YulLiteral","src":"1058:1:42","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1065:3:42","nodeType":"YulLiteral","src":"1065:3:42","type":"","value":"224"},{"kind":"number","nativeSrc":"1070:10:42","nodeType":"YulLiteral","src":"1070:10:42","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1061:3:42","nodeType":"YulIdentifier","src":"1061:3:42"},"nativeSrc":"1061:20:42","nodeType":"YulFunctionCall","src":"1061:20:42"}],"functionName":{"name":"mstore","nativeSrc":"1051:6:42","nodeType":"YulIdentifier","src":"1051:6:42"},"nativeSrc":"1051:31:42","nodeType":"YulFunctionCall","src":"1051:31:42"},"nativeSrc":"1051:31:42","nodeType":"YulExpressionStatement","src":"1051:31:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1102:1:42","nodeType":"YulLiteral","src":"1102:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"1105:4:42","nodeType":"YulLiteral","src":"1105:4:42","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1095:6:42","nodeType":"YulIdentifier","src":"1095:6:42"},"nativeSrc":"1095:15:42","nodeType":"YulFunctionCall","src":"1095:15:42"},"nativeSrc":"1095:15:42","nodeType":"YulExpressionStatement","src":"1095:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1130:1:42","nodeType":"YulLiteral","src":"1130:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1133:4:42","nodeType":"YulLiteral","src":"1133:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1123:6:42","nodeType":"YulIdentifier","src":"1123:6:42"},"nativeSrc":"1123:15:42","nodeType":"YulFunctionCall","src":"1123:15:42"},"nativeSrc":"1123:15:42","nodeType":"YulExpressionStatement","src":"1123:15:42"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1020:4:42","nodeType":"YulIdentifier","src":"1020:4:42"},{"name":"x","nativeSrc":"1026:1:42","nodeType":"YulIdentifier","src":"1026:1:42"}],"functionName":{"name":"gt","nativeSrc":"1017:2:42","nodeType":"YulIdentifier","src":"1017:2:42"},"nativeSrc":"1017:11:42","nodeType":"YulFunctionCall","src":"1017:11:42"},"nativeSrc":"1014:134:42","nodeType":"YulIf","src":"1014:134:42"}]},"name":"checked_sub_t_uint256","nativeSrc":"929:225:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"960:1:42","nodeType":"YulTypedName","src":"960:1:42","type":""},{"name":"y","nativeSrc":"963:1:42","nodeType":"YulTypedName","src":"963:1:42","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"969:4:42","nodeType":"YulTypedName","src":"969:4:42","type":""}],"src":"929:225:42"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_address(value_2)\n        value2 := value_2\n        value3 := mload(add(headStart, 96))\n        let value_3 := mload(add(headStart, 128))\n        validator_revert_address(value_3)\n        value4 := value_3\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":42,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61012060405234801561001157600080fd5b50604051612110380380612110833981016040819052610030916101f5565b83838383828285838080803361004e816100486100b0565b906100e4565b50600160008190556001600160a01b039091166080526100829250634fc3585960e01b915061007b610153565b9190610181565b506001600160a01b0390811660a05291821660c05260e0529890981661010052506102819650505050505050565b6000806100de60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610260565b92915050565b6001600160a01b0381161561013a5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b61014f6307f5828d60e41b600161007b610153565b5050565b6000806100de60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610260565b600160e01b6001600160e01b03198316016101af576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146101f257600080fd5b50565b600080600080600060a0868803121561020d57600080fd5b8551610218816101dd565b6020870151909550610229816101dd565b604087015190945061023a816101dd565b606087015160808801519194509250610252816101dd565b809150509295509295909350565b818103818111156100de57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e05161010051611e136102fd6000396000818161049c01526109800152600081816102f901526118b501526000818161038801526118de01526000818161025101528181610927015261180101526000818161032a0152818161044d015281816116c501526117530152611e136000f3fe6080604052600436106101d75760003560e01c806375c93bb91161010257806398807d8411610095578063d547741f11610064578063d547741f14610621578063ef4cadc514610641578063efa90b541461065d578063f2fde38b1461067357600080fd5b806398807d841461059b5780639d696e36146105c8578063c5c8f770146105de578063d0b06f5d1461060b57600080fd5b80638580cf76116100d15780638580cf76146105125780638bb9c5bf146105465780638da5cb5b1461056657806391d148541461057b57600080fd5b806375c93bb9146104be5780637b0a47ee146104d157806380faa57d146104e7578063817b1cd2146104fc57600080fd5b80632c9d0b801161017a5780634e71d92d116101495780634e71d92d146103ca5780634fc35859146103df578063572b6c051461043057806362ba90961461048a57600080fd5b80632c9d0b801461034e5780632d1e0c02146103635780632d4c2f93146103765780632f2ff15d146103aa57600080fd5b80630700037d116101b65780630700037d146102985780630968f264146102c55780632196e445146102e75780632b4c9f161461031b57600080fd5b80628cc262146101dc57806301ffc9a71461020f5780630479d6441461023f575b600080fd5b3480156101e857600080fd5b506101fc6101f7366004611aa4565b610693565b6040519081526020015b60405180910390f35b34801561021b57600080fd5b5061022f61022a366004611ac1565b61072a565b6040519015158152602001610206565b34801561024b57600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b3480156102a457600080fd5b506101fc6102b3366004611aa4565b60076020526000908152604090205481565b3480156102d157600080fd5b506102e56102e0366004611b4c565b61073e565b005b3480156102f357600080fd5b506101fc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561032757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610273565b34801561035a57600080fd5b506101fc610789565b6102e5610371366004611b4c565b6107f1565b34801561038257600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b3480156103b657600080fd5b506102e56103c5366004611b8e565b610823565b3480156103d657600080fd5b506102e561085c565b3480156103eb57600080fd5b506103ff6103fa366004611bbe565b61090d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610206565b34801561043c57600080fd5b5061022f61044b366004611aa4565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b34801561049657600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b6102e56104cc366004611c31565b610a8b565b3480156104dd57600080fd5b506101fc60035481565b3480156104f357600080fd5b506101fc610d60565b34801561050857600080fd5b506101fc60015481565b34801561051e57600080fd5b506101fc7f726577617264657200000000000000000000000000000000000000000000000081565b34801561055257600080fd5b506102e5610561366004611c53565b610d7a565b34801561057257600080fd5b50610273610d98565b34801561058757600080fd5b5061022f610596366004611b8e565b610dc4565b3480156105a757600080fd5b506101fc6105b6366004611aa4565b60066020526000908152604090205481565b3480156105d457600080fd5b506101fc60045481565b3480156105ea57600080fd5b506101fc6105f9366004611aa4565b60086020526000908152604090205481565b34801561061757600080fd5b506101fc60025481565b34801561062d57600080fd5b506102e561063c366004611b8e565b610e0f565b34801561064d57600080fd5b506101fc670de0b6b3a764000081565b34801561066957600080fd5b506101fc60055481565b34801561067f57600080fd5b506102e561068e366004611aa4565b610e3d565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a7640000906106d6610789565b6106e09190611c9b565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546107109190611cae565b61071a9190611cf4565b6107249190611d08565b92915050565b600061072482610738610e58565b90610e86565b610785610749610f60565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6a92505050565b5050565b60015460009080820361079e57505060045490565b80670de0b6b3a76400006003546002546107b6610d60565b6107c09190611c9b565b6107ca9190611cae565b6107d49190611cae565b6107de9190611cf4565b6004546107eb9190611d08565b91505090565b6040517f7a404b1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082d610f60565b90506108418161083b611056565b90611084565b61085783838361084f6110ef565b92919061111d565b505050565b6000610866610f60565b9050610871816111f4565b600061087c82610693565b905080156107855773ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081208190556108b68383611282565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd58284604051610900929190611d1b565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461097e576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148690610a23576040517fd0411ac500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b506000610a3283850185611aa4565b9050610a5f8186604051602001610a4b91815260200190565b60405160208183030381529060405261128e565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b6000610a95610f60565b9050610acb7f726577617264657200000000000000000000000000000000000000000000000082610ac46110ef565b919061137a565b82600003610b05576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610b3f576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4960006111f4565b60055460009081610b5a8542611d08565b9050814210610bd2576000610b6f8688611cf4565b9050868682610bb3576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b50506003819055610bc48688611d8e565b60058390559350610cfb9050565b818111610c6157610be34283611c9b565b94506000610bf18688611cf4565b9050868682610c35576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b50508060036000828254610c499190611d08565b90915550610c5990508688611d8e565b935050610cfb565b610c6b8587611cf4565b86908690610cae576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b5060009050610cbd4284611c9b565b600354610cca9190611cae565b90506000610cd88883611d08565b9050610ce48782611cf4565b600355610cf18782611d8e565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610d7357806107eb565b4291505090565b610d95610d85610f60565b82610d8e6110ef565b9190611400565b50565b6000610dbf610da5611056565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000610e088383610dd36110ef565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b6000610e19610f60565b9050610e278161083b611056565b610857838383610e356110ef565b9291906114a4565b610d95610e48610f60565b82610e51611056565b919061156e565b60008061072460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c9b565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610ed657506000610724565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610f2757506001610724565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610dbf611682565b610f73826111f4565b6000610f7f83836117cf565b905080600003610fbb576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610fcd9190611c9b565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290611007908490611c9b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e8383604051610900929190611d1b565b60008061072460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c9b565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610785576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610a1a565b60008061072460017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611c9b565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166111ee5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b6111fc610789565b60045560055442101580611211575060015415155b156112225761121e610d60565b6002555b73ffffffffffffffffffffffffffffffffffffffff811615610d955761124781610693565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b6060610e088383611828565b611297826111f4565b60006112a38383611940565b9050806000036112df576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008282546112f19190611d08565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120805483929061132b908490611d08565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e8383604051610900929190611d1b565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610857576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610a1a565b61140b83828461137a565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156111ee5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016111e5565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146115db576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610a1a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111ee5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6000333214806116925750601836105b1561169c57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806117be57506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be9190611da2565b156117c857919050565b3391505090565b6000818060200190518101906117e59190611dc4565b905061072473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483611956565b60608160405160200161183d91815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b5050505092915050565b600081806020019051810190610e089190611dc4565b6040805173ffffffffffffffffffffffffffffffffffffffff841660248201526044808201849052825180830390910181526064909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781528251610857938793909260009283929183919082885af180611a01576040513d6000823e3d81fd5b50506000513d91508115611a19578060011415611a33565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156111ee576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610a1a565b73ffffffffffffffffffffffffffffffffffffffff81168114610d9557600080fd5b600060208284031215611ab657600080fd5b8135610e0881611a82565b600060208284031215611ad357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e0857600080fd5b60008083601f840112611b1557600080fd5b50813567ffffffffffffffff811115611b2d57600080fd5b602083019150836020828501011115611b4557600080fd5b9250929050565b60008060208385031215611b5f57600080fd5b823567ffffffffffffffff811115611b7657600080fd5b611b8285828601611b03565b90969095509350505050565b60008060408385031215611ba157600080fd5b823591506020830135611bb381611a82565b809150509250929050565b600080600080600060808688031215611bd657600080fd5b8535611be181611a82565b94506020860135611bf181611a82565b935060408601359250606086013567ffffffffffffffff811115611c1457600080fd5b611c2088828901611b03565b969995985093965092949392505050565b60008060408385031215611c4457600080fd5b50508035926020909101359150565b600060208284031215611c6557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561072457610724611c6c565b808202811582820484141761072457610724611c6c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d0357611d03611cc5565b500490565b8082018082111561072457610724611c6c565b604081526000835180604084015260005b81811015611d495760208187018101516060868401015201611d2c565b5060006060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150508260208301529392505050565b600082611d9d57611d9d611cc5565b500690565b600060208284031215611db457600080fd5b81518015158114610e0857600080fd5b600060208284031215611dd657600080fd5b505191905056fea2646970667358221220d17693abdb43543bc7dce3d7f9d9c105650aa8e3d0763e3b5fd85f19c9a6064764736f6c634300081c0033","opcodes":"PUSH2 0x120 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x2110 CODESIZE SUB DUP1 PUSH2 0x2110 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x1F5 JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 DUP3 DUP3 DUP6 DUP4 DUP1 DUP1 DUP1 CALLER PUSH2 0x4E DUP2 PUSH2 0x48 PUSH2 0xB0 JUMP JUMPDEST SWAP1 PUSH2 0xE4 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH2 0x82 SWAP3 POP PUSH4 0x4FC35859 PUSH1 0xE0 SHL SWAP2 POP PUSH2 0x7B PUSH2 0x153 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x181 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE SWAP2 DUP3 AND PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE SWAP9 SWAP1 SWAP9 AND PUSH2 0x100 MSTORE POP PUSH2 0x281 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x260 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x13A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x14F PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x7B PUSH2 0x153 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xDE PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x260 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1AF JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x20D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH2 0x218 DUP2 PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x20 DUP8 ADD MLOAD SWAP1 SWAP6 POP PUSH2 0x229 DUP2 PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x40 DUP8 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x23A DUP2 PUSH2 0x1DD JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD PUSH1 0x80 DUP9 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH2 0x252 DUP2 PUSH2 0x1DD JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xDE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x1E13 PUSH2 0x2FD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x49C ADD MSTORE PUSH2 0x980 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x2F9 ADD MSTORE PUSH2 0x18B5 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x388 ADD MSTORE PUSH2 0x18DE ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x251 ADD MSTORE DUP2 DUP2 PUSH2 0x927 ADD MSTORE PUSH2 0x1801 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x32A ADD MSTORE DUP2 DUP2 PUSH2 0x44D ADD MSTORE DUP2 DUP2 PUSH2 0x16C5 ADD MSTORE PUSH2 0x1753 ADD MSTORE PUSH2 0x1E13 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75C93BB9 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x98807D84 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x621 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x641 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x65D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98807D84 EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x5C8 JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8580CF76 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x700037D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x23F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x1AC1 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4C JUMP JUMPDEST PUSH2 0x73E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x273 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x789 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4C JUMP JUMPDEST PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x85C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1BBE JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C31 JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C53 JUMP JUMPDEST PUSH2 0xD7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0xD98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0xDC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x5B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x5F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x63C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0xE3D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x6D6 PUSH2 0x789 JUMP JUMPDEST PUSH2 0x6E0 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x71A SWAP2 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x724 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x724 DUP3 PUSH2 0x738 PUSH2 0xE58 JUMP JUMPDEST SWAP1 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x785 PUSH2 0x749 PUSH2 0xF60 JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xF6A SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x79E JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x7B6 PUSH2 0xD60 JUMP JUMPDEST PUSH2 0x7C0 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH2 0x7CA SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x7D4 SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x7DE SWAP2 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7EB SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7A404B1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x82D PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0x841 DUP2 PUSH2 0x83B PUSH2 0x1056 JUMP JUMPDEST SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x857 DUP4 DUP4 DUP4 PUSH2 0x84F PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x111D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0x871 DUP2 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87C DUP3 PUSH2 0x693 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x785 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x8B6 DUP4 DUP4 PUSH2 0x1282 JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP7 SWAP1 PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0411AC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0xA32 DUP4 DUP6 ADD DUP6 PUSH2 0x1AA4 JUMP JUMPDEST SWAP1 POP PUSH2 0xA5F DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA4B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x128E JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA95 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0xACB PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xAC4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x137A JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xB05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB49 PUSH1 0x0 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xB5A DUP6 TIMESTAMP PUSH2 0x1D08 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xBD2 JUMPI PUSH1 0x0 PUSH2 0xB6F DUP7 DUP9 PUSH2 0x1CF4 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xBB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xBC4 DUP7 DUP9 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xCFB SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xC61 JUMPI PUSH2 0xBE3 TIMESTAMP DUP4 PUSH2 0x1C9B JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xBF1 DUP7 DUP9 PUSH2 0x1CF4 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC49 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xC59 SWAP1 POP DUP7 DUP9 PUSH2 0x1D8E JUMP JUMPDEST SWAP4 POP POP PUSH2 0xCFB JUMP JUMPDEST PUSH2 0xC6B DUP6 DUP8 PUSH2 0x1CF4 JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xCBD TIMESTAMP DUP5 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xCCA SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD8 DUP9 DUP4 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE4 DUP8 DUP3 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xCF1 DUP8 DUP3 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xD73 JUMPI DUP1 PUSH2 0x7EB JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xD95 PUSH2 0xD85 PUSH2 0xF60 JUMP JUMPDEST DUP3 PUSH2 0xD8E PUSH2 0x10EF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1400 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDBF PUSH2 0xDA5 PUSH2 0x1056 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE08 DUP4 DUP4 PUSH2 0xDD3 PUSH2 0x10EF JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE19 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0xE27 DUP2 PUSH2 0x83B PUSH2 0x1056 JUMP JUMPDEST PUSH2 0x857 DUP4 DUP4 DUP4 PUSH2 0xE35 PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x14A4 JUMP JUMPDEST PUSH2 0xD95 PUSH2 0xE48 PUSH2 0xF60 JUMP JUMPDEST DUP3 PUSH2 0xE51 PUSH2 0x1056 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x156E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xED6 JUMPI POP PUSH1 0x0 PUSH2 0x724 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xF27 JUMPI POP PUSH1 0x1 PUSH2 0x724 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDBF PUSH2 0x1682 JUMP JUMPDEST PUSH2 0xF73 DUP3 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7F DUP4 DUP4 PUSH2 0x17CF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xFBB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xFCD SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1007 SWAP1 DUP5 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C9B JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x785 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11EE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x11FC PUSH2 0x789 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1211 JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1222 JUMPI PUSH2 0x121E PUSH2 0xD60 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xD95 JUMPI PUSH2 0x1247 DUP2 PUSH2 0x693 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE08 DUP4 DUP4 PUSH2 0x1828 JUMP JUMPDEST PUSH2 0x1297 DUP3 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A3 DUP4 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x12DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x132B SWAP1 DUP5 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x857 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH2 0x140B DUP4 DUP3 DUP5 PUSH2 0x137A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11EE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x11E5 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x15DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11EE JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1692 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x169C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x17BE JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x179A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BE SWAP2 SWAP1 PUSH2 0x1DA2 JUMP JUMPDEST ISZERO PUSH2 0x17C8 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17E5 SWAP2 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST SWAP1 POP PUSH2 0x724 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x1956 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x183D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1936 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE08 SWAP2 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE DUP3 MLOAD PUSH2 0x857 SWAP4 DUP8 SWAP4 SWAP1 SWAP3 PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP2 DUP4 SWAP2 SWAP1 DUP3 DUP9 GAS CALL DUP1 PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1A19 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1A33 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE08 DUP2 PUSH2 0x1A82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B82 DUP6 DUP3 DUP7 ADD PUSH2 0x1B03 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1BB3 DUP2 PUSH2 0x1A82 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1BE1 DUP2 PUSH2 0x1A82 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1BF1 DUP2 PUSH2 0x1A82 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C20 DUP9 DUP3 DUP10 ADD PUSH2 0x1B03 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D03 JUMPI PUSH2 0x1D03 PUSH2 0x1CC5 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D49 JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x1D2C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D9D JUMPI PUSH2 0x1D9D PUSH2 0x1CC5 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH23 0x93ABDB43543BC7DCE3D7F9D9C105650AA8E3D0763E3B5F 0xD8 PUSH0 NOT 0xC9 0xA6 MOD SELFBALANCE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"407:1410:39:-:0;;;639:342;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;866:12;880:14;896:17;915;880:14;896:17;866:12;915:17;;;;2176:10:24;1008:63:1;2176:10:24;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;1857:1:35;2061:7;:21;;;-1:-1:-1;;;;;622:39:18;;;;;736:96:26;;-1:-1:-1;;;;793:32:26;-1:-1:-1;736:34:26;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;;648:28:25;;::::1;;::::0;391:32:41;;;;;433:39;;944:30:39;;;::::1;;::::0;-1:-1:-1;407:1410:39;;-1:-1:-1;;;;;;;407:1410:39;5060:174:12;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:12:o;1561:341::-;-1:-1:-1;;;;;1649:26:12;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:12;-1:-1:-1;;;;;1691:30:12;;;;;;;1740:46;;-1:-1:-1;;1740:46:12;;-1:-1:-1;;1740:46:12;1645:152;1806:89;-1:-1:-1;;;1890:4:12;1806:34;:32;:34::i;:89::-;1561:341;;:::o;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:16;;;877:68;;925:20;;-1:-1:-1;;;925:20:16;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:16;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:16;;;;;;;;;;773:235::o;14:131:42:-;-1:-1:-1;;;;;89:31:42;;79:42;;69:70;;135:1;132;125:12;69:70;14:131;:::o;150:774::-;314:6;322;330;338;346;399:3;387:9;378:7;374:23;370:33;367:53;;;416:1;413;406:12;367:53;448:9;442:16;467:31;492:5;467:31;:::i;:::-;567:2;552:18;;546:25;517:5;;-1:-1:-1;580:33:42;546:25;580:33;:::i;:::-;684:2;669:18;;663:25;632:7;;-1:-1:-1;697:33:42;663:25;697:33;:::i;:::-;796:2;781:18;;775:25;845:3;830:19;;824:26;749:7;;-1:-1:-1;775:25:42;-1:-1:-1;859:33:42;824:26;859:33;:::i;:::-;911:7;901:17;;;150:774;;;;;;;;:::o;929:225::-;996:9;;;1017:11;;;1014:134;;;1070:10;1065:3;1061:20;1058:1;1051:31;1105:4;1102:1;1095:15;1133:4;1130:1;1123:15;929:225;407:1410:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@CLAIM_CONTRACT_3073":{"entryPoint":null,"id":3073,"parameterSlots":0,"returnSlots":0},"@DEPOSIT_REASON_CODE_3289":{"entryPoint":null,"id":3289,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_3287":{"entryPoint":null,"id":3287,"parameterSlots":0,"returnSlots":0},"@REWARDER_ROLE_1327":{"entryPoint":null,"id":1327,"parameterSlots":0,"returnSlots":0},"@SCALING_FACTOR_1330":{"entryPoint":null,"id":1330,"parameterSlots":0,"returnSlots":0},"@STAKING_TOKEN_1985":{"entryPoint":null,"id":1985,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_2770":{"entryPoint":null,"id":2770,"parameterSlots":2,"returnSlots":0},"@_computeAddReward_3279":{"entryPoint":null,"id":3279,"parameterSlots":3,"returnSlots":0},"@_computeAddReward_3341":{"entryPoint":null,"id":3341,"parameterSlots":3,"returnSlots":0},"@_computeClaim_3258":{"entryPoint":4738,"id":3258,"parameterSlots":2,"returnSlots":1},"@_computeClaim_3331":{"entryPoint":6184,"id":3331,"parameterSlots":2,"returnSlots":1},"@_computeStake_3195":{"entryPoint":6464,"id":3195,"parameterSlots":2,"returnSlots":1},"@_computeWithdraw_2161":{"entryPoint":6095,"id":2161,"parameterSlots":2,"returnSlots":1},"@_msgSender_1123":{"entryPoint":5762,"id":1123,"parameterSlots":0,"returnSlots":1},"@_msgSender_1948":{"entryPoint":3936,"id":1948,"parameterSlots":0,"returnSlots":1},"@_stake_1601":{"entryPoint":4750,"id":1601,"parameterSlots":2,"returnSlots":0},"@_updateReward_1462":{"entryPoint":4596,"id":1462,"parameterSlots":1,"returnSlots":0},"@_withdraw_1658":{"entryPoint":3946,"id":1658,"parameterSlots":2,"returnSlots":0},"@addReward_1898":{"entryPoint":2699,"id":1898,"parameterSlots":2,"returnSlots":0},"@claim_1701":{"entryPoint":2140,"id":1701,"parameterSlots":0,"returnSlots":0},"@distributionEnd_1340":{"entryPoint":null,"id":1340,"parameterSlots":0,"returnSlots":0},"@earned_1541":{"entryPoint":1683,"id":1541,"parameterSlots":1,"returnSlots":1},"@enforceHasRole_556":{"entryPoint":4986,"id":556,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_818":{"entryPoint":4228,"id":818,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1031":{"entryPoint":null,"id":1031,"parameterSlots":0,"returnSlots":1},"@grantRole_409":{"entryPoint":4381,"id":409,"parameterSlots":4,"returnSlots":0},"@grantRole_99":{"entryPoint":2083,"id":99,"parameterSlots":2,"returnSlots":0},"@hasRole_167":{"entryPoint":3524,"id":167,"parameterSlots":2,"returnSlots":1},"@hasRole_502":{"entryPoint":null,"id":502,"parameterSlots":3,"returnSlots":1},"@isTrustedForwarder_1047":{"entryPoint":null,"id":1047,"parameterSlots":1,"returnSlots":1},"@lastTimeRewardApplicable_1481":{"entryPoint":3424,"id":1481,"parameterSlots":0,"returnSlots":1},"@lastUpdated_1334":{"entryPoint":null,"id":1334,"parameterSlots":0,"returnSlots":0},"@layout_592":{"entryPoint":4335,"id":592,"parameterSlots":0,"returnSlots":1},"@layout_850":{"entryPoint":4182,"id":850,"parameterSlots":0,"returnSlots":1},"@layout_998":{"entryPoint":3672,"id":998,"parameterSlots":0,"returnSlots":1},"@msgSender_1215":{"entryPoint":null,"id":1215,"parameterSlots":0,"returnSlots":1},"@onERC20Received_3164":{"entryPoint":2317,"id":3164,"parameterSlots":5,"returnSlots":1},"@owner_198":{"entryPoint":3480,"id":198,"parameterSlots":0,"returnSlots":1},"@owner_771":{"entryPoint":null,"id":771,"parameterSlots":1,"returnSlots":1},"@renounceRole_148":{"entryPoint":3450,"id":148,"parameterSlots":1,"returnSlots":0},"@renounceRole_481":{"entryPoint":5120,"id":481,"parameterSlots":3,"returnSlots":0},"@revokeRole_131":{"entryPoint":3599,"id":131,"parameterSlots":2,"returnSlots":0},"@revokeRole_446":{"entryPoint":5284,"id":446,"parameterSlots":4,"returnSlots":0},"@rewardPerStakePointPaid_1352":{"entryPoint":null,"id":1352,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePointStored_1338":{"entryPoint":null,"id":1338,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePoint_1514":{"entryPoint":1929,"id":1514,"parameterSlots":0,"returnSlots":1},"@rewardRate_1336":{"entryPoint":null,"id":1336,"parameterSlots":0,"returnSlots":0},"@rewards_1348":{"entryPoint":null,"id":1348,"parameterSlots":0,"returnSlots":0},"@safeTransfer_2448":{"entryPoint":6486,"id":2448,"parameterSlots":3,"returnSlots":0},"@stake_3174":{"entryPoint":2033,"id":3174,"parameterSlots":2,"returnSlots":0},"@staked_1344":{"entryPoint":null,"id":1344,"parameterSlots":0,"returnSlots":0},"@supportsInterface_880":{"entryPoint":1834,"id":880,"parameterSlots":1,"returnSlots":1},"@supportsInterface_986":{"entryPoint":3718,"id":986,"parameterSlots":2,"returnSlots":1},"@totalStaked_1332":{"entryPoint":null,"id":1332,"parameterSlots":0,"returnSlots":0},"@transferOwnership_215":{"entryPoint":3645,"id":215,"parameterSlots":1,"returnSlots":0},"@transferOwnership_758":{"entryPoint":5486,"id":758,"parameterSlots":3,"returnSlots":0},"@withdraw_2133":{"entryPoint":1854,"id":2133,"parameterSlots":2,"returnSlots":0},"abi_decode_bytes_calldata":{"entryPoint":6915,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":6820,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":7102,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7586,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":7251,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7054,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6849,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":6988,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7620,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7217,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":7451,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7432,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7412,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7342,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7323,"id":null,"parameterSlots":2,"returnSlots":1},"mod_t_uint256":{"entryPoint":7566,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":7276,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":7365,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":6786,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:9981:42","nodeType":"YulBlock","src":"0:9981:42","statements":[{"nativeSrc":"6:3:42","nodeType":"YulBlock","src":"6:3:42","statements":[]},{"body":{"nativeSrc":"59:109:42","nodeType":"YulBlock","src":"59:109:42","statements":[{"body":{"nativeSrc":"146:16:42","nodeType":"YulBlock","src":"146:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"155:1:42","nodeType":"YulLiteral","src":"155:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"158:1:42","nodeType":"YulLiteral","src":"158:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"148:6:42","nodeType":"YulIdentifier","src":"148:6:42"},"nativeSrc":"148:12:42","nodeType":"YulFunctionCall","src":"148:12:42"},"nativeSrc":"148:12:42","nodeType":"YulExpressionStatement","src":"148:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"82:5:42","nodeType":"YulIdentifier","src":"82:5:42"},{"arguments":[{"name":"value","nativeSrc":"93:5:42","nodeType":"YulIdentifier","src":"93:5:42"},{"kind":"number","nativeSrc":"100:42:42","nodeType":"YulLiteral","src":"100:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"89:3:42","nodeType":"YulIdentifier","src":"89:3:42"},"nativeSrc":"89:54:42","nodeType":"YulFunctionCall","src":"89:54:42"}],"functionName":{"name":"eq","nativeSrc":"79:2:42","nodeType":"YulIdentifier","src":"79:2:42"},"nativeSrc":"79:65:42","nodeType":"YulFunctionCall","src":"79:65:42"}],"functionName":{"name":"iszero","nativeSrc":"72:6:42","nodeType":"YulIdentifier","src":"72:6:42"},"nativeSrc":"72:73:42","nodeType":"YulFunctionCall","src":"72:73:42"},"nativeSrc":"69:93:42","nodeType":"YulIf","src":"69:93:42"}]},"name":"validator_revert_address","nativeSrc":"14:154:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"48:5:42","nodeType":"YulTypedName","src":"48:5:42","type":""}],"src":"14:154:42"},{"body":{"nativeSrc":"243:177:42","nodeType":"YulBlock","src":"243:177:42","statements":[{"body":{"nativeSrc":"289:16:42","nodeType":"YulBlock","src":"289:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"298:1:42","nodeType":"YulLiteral","src":"298:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"301:1:42","nodeType":"YulLiteral","src":"301:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"291:6:42","nodeType":"YulIdentifier","src":"291:6:42"},"nativeSrc":"291:12:42","nodeType":"YulFunctionCall","src":"291:12:42"},"nativeSrc":"291:12:42","nodeType":"YulExpressionStatement","src":"291:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"264:7:42","nodeType":"YulIdentifier","src":"264:7:42"},{"name":"headStart","nativeSrc":"273:9:42","nodeType":"YulIdentifier","src":"273:9:42"}],"functionName":{"name":"sub","nativeSrc":"260:3:42","nodeType":"YulIdentifier","src":"260:3:42"},"nativeSrc":"260:23:42","nodeType":"YulFunctionCall","src":"260:23:42"},{"kind":"number","nativeSrc":"285:2:42","nodeType":"YulLiteral","src":"285:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"256:3:42","nodeType":"YulIdentifier","src":"256:3:42"},"nativeSrc":"256:32:42","nodeType":"YulFunctionCall","src":"256:32:42"},"nativeSrc":"253:52:42","nodeType":"YulIf","src":"253:52:42"},{"nativeSrc":"314:36:42","nodeType":"YulVariableDeclaration","src":"314:36:42","value":{"arguments":[{"name":"headStart","nativeSrc":"340:9:42","nodeType":"YulIdentifier","src":"340:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"327:12:42","nodeType":"YulIdentifier","src":"327:12:42"},"nativeSrc":"327:23:42","nodeType":"YulFunctionCall","src":"327:23:42"},"variables":[{"name":"value","nativeSrc":"318:5:42","nodeType":"YulTypedName","src":"318:5:42","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"384:5:42","nodeType":"YulIdentifier","src":"384:5:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"359:24:42","nodeType":"YulIdentifier","src":"359:24:42"},"nativeSrc":"359:31:42","nodeType":"YulFunctionCall","src":"359:31:42"},"nativeSrc":"359:31:42","nodeType":"YulExpressionStatement","src":"359:31:42"},{"nativeSrc":"399:15:42","nodeType":"YulAssignment","src":"399:15:42","value":{"name":"value","nativeSrc":"409:5:42","nodeType":"YulIdentifier","src":"409:5:42"},"variableNames":[{"name":"value0","nativeSrc":"399:6:42","nodeType":"YulIdentifier","src":"399:6:42"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"173:247:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"209:9:42","nodeType":"YulTypedName","src":"209:9:42","type":""},{"name":"dataEnd","nativeSrc":"220:7:42","nodeType":"YulTypedName","src":"220:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"232:6:42","nodeType":"YulTypedName","src":"232:6:42","type":""}],"src":"173:247:42"},{"body":{"nativeSrc":"526:76:42","nodeType":"YulBlock","src":"526:76:42","statements":[{"nativeSrc":"536:26:42","nodeType":"YulAssignment","src":"536:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"548:9:42","nodeType":"YulIdentifier","src":"548:9:42"},{"kind":"number","nativeSrc":"559:2:42","nodeType":"YulLiteral","src":"559:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"544:3:42","nodeType":"YulIdentifier","src":"544:3:42"},"nativeSrc":"544:18:42","nodeType":"YulFunctionCall","src":"544:18:42"},"variableNames":[{"name":"tail","nativeSrc":"536:4:42","nodeType":"YulIdentifier","src":"536:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"578:9:42","nodeType":"YulIdentifier","src":"578:9:42"},{"name":"value0","nativeSrc":"589:6:42","nodeType":"YulIdentifier","src":"589:6:42"}],"functionName":{"name":"mstore","nativeSrc":"571:6:42","nodeType":"YulIdentifier","src":"571:6:42"},"nativeSrc":"571:25:42","nodeType":"YulFunctionCall","src":"571:25:42"},"nativeSrc":"571:25:42","nodeType":"YulExpressionStatement","src":"571:25:42"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"425:177:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"495:9:42","nodeType":"YulTypedName","src":"495:9:42","type":""},{"name":"value0","nativeSrc":"506:6:42","nodeType":"YulTypedName","src":"506:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"517:4:42","nodeType":"YulTypedName","src":"517:4:42","type":""}],"src":"425:177:42"},{"body":{"nativeSrc":"676:263:42","nodeType":"YulBlock","src":"676:263:42","statements":[{"body":{"nativeSrc":"722:16:42","nodeType":"YulBlock","src":"722:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"731:1:42","nodeType":"YulLiteral","src":"731:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"734:1:42","nodeType":"YulLiteral","src":"734:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"724:6:42","nodeType":"YulIdentifier","src":"724:6:42"},"nativeSrc":"724:12:42","nodeType":"YulFunctionCall","src":"724:12:42"},"nativeSrc":"724:12:42","nodeType":"YulExpressionStatement","src":"724:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"697:7:42","nodeType":"YulIdentifier","src":"697:7:42"},{"name":"headStart","nativeSrc":"706:9:42","nodeType":"YulIdentifier","src":"706:9:42"}],"functionName":{"name":"sub","nativeSrc":"693:3:42","nodeType":"YulIdentifier","src":"693:3:42"},"nativeSrc":"693:23:42","nodeType":"YulFunctionCall","src":"693:23:42"},{"kind":"number","nativeSrc":"718:2:42","nodeType":"YulLiteral","src":"718:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"689:3:42","nodeType":"YulIdentifier","src":"689:3:42"},"nativeSrc":"689:32:42","nodeType":"YulFunctionCall","src":"689:32:42"},"nativeSrc":"686:52:42","nodeType":"YulIf","src":"686:52:42"},{"nativeSrc":"747:36:42","nodeType":"YulVariableDeclaration","src":"747:36:42","value":{"arguments":[{"name":"headStart","nativeSrc":"773:9:42","nodeType":"YulIdentifier","src":"773:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"760:12:42","nodeType":"YulIdentifier","src":"760:12:42"},"nativeSrc":"760:23:42","nodeType":"YulFunctionCall","src":"760:23:42"},"variables":[{"name":"value","nativeSrc":"751:5:42","nodeType":"YulTypedName","src":"751:5:42","type":""}]},{"body":{"nativeSrc":"893:16:42","nodeType":"YulBlock","src":"893:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"902:1:42","nodeType":"YulLiteral","src":"902:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"905:1:42","nodeType":"YulLiteral","src":"905:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"895:6:42","nodeType":"YulIdentifier","src":"895:6:42"},"nativeSrc":"895:12:42","nodeType":"YulFunctionCall","src":"895:12:42"},"nativeSrc":"895:12:42","nodeType":"YulExpressionStatement","src":"895:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"805:5:42","nodeType":"YulIdentifier","src":"805:5:42"},{"arguments":[{"name":"value","nativeSrc":"816:5:42","nodeType":"YulIdentifier","src":"816:5:42"},{"kind":"number","nativeSrc":"823:66:42","nodeType":"YulLiteral","src":"823:66:42","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"812:3:42","nodeType":"YulIdentifier","src":"812:3:42"},"nativeSrc":"812:78:42","nodeType":"YulFunctionCall","src":"812:78:42"}],"functionName":{"name":"eq","nativeSrc":"802:2:42","nodeType":"YulIdentifier","src":"802:2:42"},"nativeSrc":"802:89:42","nodeType":"YulFunctionCall","src":"802:89:42"}],"functionName":{"name":"iszero","nativeSrc":"795:6:42","nodeType":"YulIdentifier","src":"795:6:42"},"nativeSrc":"795:97:42","nodeType":"YulFunctionCall","src":"795:97:42"},"nativeSrc":"792:117:42","nodeType":"YulIf","src":"792:117:42"},{"nativeSrc":"918:15:42","nodeType":"YulAssignment","src":"918:15:42","value":{"name":"value","nativeSrc":"928:5:42","nodeType":"YulIdentifier","src":"928:5:42"},"variableNames":[{"name":"value0","nativeSrc":"918:6:42","nodeType":"YulIdentifier","src":"918:6:42"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"607:332:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"642:9:42","nodeType":"YulTypedName","src":"642:9:42","type":""},{"name":"dataEnd","nativeSrc":"653:7:42","nodeType":"YulTypedName","src":"653:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"665:6:42","nodeType":"YulTypedName","src":"665:6:42","type":""}],"src":"607:332:42"},{"body":{"nativeSrc":"1039:92:42","nodeType":"YulBlock","src":"1039:92:42","statements":[{"nativeSrc":"1049:26:42","nodeType":"YulAssignment","src":"1049:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1061:9:42","nodeType":"YulIdentifier","src":"1061:9:42"},{"kind":"number","nativeSrc":"1072:2:42","nodeType":"YulLiteral","src":"1072:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1057:3:42","nodeType":"YulIdentifier","src":"1057:3:42"},"nativeSrc":"1057:18:42","nodeType":"YulFunctionCall","src":"1057:18:42"},"variableNames":[{"name":"tail","nativeSrc":"1049:4:42","nodeType":"YulIdentifier","src":"1049:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1091:9:42","nodeType":"YulIdentifier","src":"1091:9:42"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1116:6:42","nodeType":"YulIdentifier","src":"1116:6:42"}],"functionName":{"name":"iszero","nativeSrc":"1109:6:42","nodeType":"YulIdentifier","src":"1109:6:42"},"nativeSrc":"1109:14:42","nodeType":"YulFunctionCall","src":"1109:14:42"}],"functionName":{"name":"iszero","nativeSrc":"1102:6:42","nodeType":"YulIdentifier","src":"1102:6:42"},"nativeSrc":"1102:22:42","nodeType":"YulFunctionCall","src":"1102:22:42"}],"functionName":{"name":"mstore","nativeSrc":"1084:6:42","nodeType":"YulIdentifier","src":"1084:6:42"},"nativeSrc":"1084:41:42","nodeType":"YulFunctionCall","src":"1084:41:42"},"nativeSrc":"1084:41:42","nodeType":"YulExpressionStatement","src":"1084:41:42"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"944:187:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1008:9:42","nodeType":"YulTypedName","src":"1008:9:42","type":""},{"name":"value0","nativeSrc":"1019:6:42","nodeType":"YulTypedName","src":"1019:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1030:4:42","nodeType":"YulTypedName","src":"1030:4:42","type":""}],"src":"944:187:42"},{"body":{"nativeSrc":"1252:125:42","nodeType":"YulBlock","src":"1252:125:42","statements":[{"nativeSrc":"1262:26:42","nodeType":"YulAssignment","src":"1262:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1274:9:42","nodeType":"YulIdentifier","src":"1274:9:42"},{"kind":"number","nativeSrc":"1285:2:42","nodeType":"YulLiteral","src":"1285:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1270:3:42","nodeType":"YulIdentifier","src":"1270:3:42"},"nativeSrc":"1270:18:42","nodeType":"YulFunctionCall","src":"1270:18:42"},"variableNames":[{"name":"tail","nativeSrc":"1262:4:42","nodeType":"YulIdentifier","src":"1262:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1304:9:42","nodeType":"YulIdentifier","src":"1304:9:42"},{"arguments":[{"name":"value0","nativeSrc":"1319:6:42","nodeType":"YulIdentifier","src":"1319:6:42"},{"kind":"number","nativeSrc":"1327:42:42","nodeType":"YulLiteral","src":"1327:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1315:3:42","nodeType":"YulIdentifier","src":"1315:3:42"},"nativeSrc":"1315:55:42","nodeType":"YulFunctionCall","src":"1315:55:42"}],"functionName":{"name":"mstore","nativeSrc":"1297:6:42","nodeType":"YulIdentifier","src":"1297:6:42"},"nativeSrc":"1297:74:42","nodeType":"YulFunctionCall","src":"1297:74:42"},"nativeSrc":"1297:74:42","nodeType":"YulExpressionStatement","src":"1297:74:42"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed","nativeSrc":"1136:241:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1221:9:42","nodeType":"YulTypedName","src":"1221:9:42","type":""},{"name":"value0","nativeSrc":"1232:6:42","nodeType":"YulTypedName","src":"1232:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1243:4:42","nodeType":"YulTypedName","src":"1243:4:42","type":""}],"src":"1136:241:42"},{"body":{"nativeSrc":"1454:275:42","nodeType":"YulBlock","src":"1454:275:42","statements":[{"body":{"nativeSrc":"1503:16:42","nodeType":"YulBlock","src":"1503:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1512:1:42","nodeType":"YulLiteral","src":"1512:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1515:1:42","nodeType":"YulLiteral","src":"1515:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1505:6:42","nodeType":"YulIdentifier","src":"1505:6:42"},"nativeSrc":"1505:12:42","nodeType":"YulFunctionCall","src":"1505:12:42"},"nativeSrc":"1505:12:42","nodeType":"YulExpressionStatement","src":"1505:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1482:6:42","nodeType":"YulIdentifier","src":"1482:6:42"},{"kind":"number","nativeSrc":"1490:4:42","nodeType":"YulLiteral","src":"1490:4:42","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1478:3:42","nodeType":"YulIdentifier","src":"1478:3:42"},"nativeSrc":"1478:17:42","nodeType":"YulFunctionCall","src":"1478:17:42"},{"name":"end","nativeSrc":"1497:3:42","nodeType":"YulIdentifier","src":"1497:3:42"}],"functionName":{"name":"slt","nativeSrc":"1474:3:42","nodeType":"YulIdentifier","src":"1474:3:42"},"nativeSrc":"1474:27:42","nodeType":"YulFunctionCall","src":"1474:27:42"}],"functionName":{"name":"iszero","nativeSrc":"1467:6:42","nodeType":"YulIdentifier","src":"1467:6:42"},"nativeSrc":"1467:35:42","nodeType":"YulFunctionCall","src":"1467:35:42"},"nativeSrc":"1464:55:42","nodeType":"YulIf","src":"1464:55:42"},{"nativeSrc":"1528:30:42","nodeType":"YulAssignment","src":"1528:30:42","value":{"arguments":[{"name":"offset","nativeSrc":"1551:6:42","nodeType":"YulIdentifier","src":"1551:6:42"}],"functionName":{"name":"calldataload","nativeSrc":"1538:12:42","nodeType":"YulIdentifier","src":"1538:12:42"},"nativeSrc":"1538:20:42","nodeType":"YulFunctionCall","src":"1538:20:42"},"variableNames":[{"name":"length","nativeSrc":"1528:6:42","nodeType":"YulIdentifier","src":"1528:6:42"}]},{"body":{"nativeSrc":"1601:16:42","nodeType":"YulBlock","src":"1601:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1610:1:42","nodeType":"YulLiteral","src":"1610:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1613:1:42","nodeType":"YulLiteral","src":"1613:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1603:6:42","nodeType":"YulIdentifier","src":"1603:6:42"},"nativeSrc":"1603:12:42","nodeType":"YulFunctionCall","src":"1603:12:42"},"nativeSrc":"1603:12:42","nodeType":"YulExpressionStatement","src":"1603:12:42"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1573:6:42","nodeType":"YulIdentifier","src":"1573:6:42"},{"kind":"number","nativeSrc":"1581:18:42","nodeType":"YulLiteral","src":"1581:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1570:2:42","nodeType":"YulIdentifier","src":"1570:2:42"},"nativeSrc":"1570:30:42","nodeType":"YulFunctionCall","src":"1570:30:42"},"nativeSrc":"1567:50:42","nodeType":"YulIf","src":"1567:50:42"},{"nativeSrc":"1626:29:42","nodeType":"YulAssignment","src":"1626:29:42","value":{"arguments":[{"name":"offset","nativeSrc":"1642:6:42","nodeType":"YulIdentifier","src":"1642:6:42"},{"kind":"number","nativeSrc":"1650:4:42","nodeType":"YulLiteral","src":"1650:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1638:3:42","nodeType":"YulIdentifier","src":"1638:3:42"},"nativeSrc":"1638:17:42","nodeType":"YulFunctionCall","src":"1638:17:42"},"variableNames":[{"name":"arrayPos","nativeSrc":"1626:8:42","nodeType":"YulIdentifier","src":"1626:8:42"}]},{"body":{"nativeSrc":"1707:16:42","nodeType":"YulBlock","src":"1707:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1716:1:42","nodeType":"YulLiteral","src":"1716:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1719:1:42","nodeType":"YulLiteral","src":"1719:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1709:6:42","nodeType":"YulIdentifier","src":"1709:6:42"},"nativeSrc":"1709:12:42","nodeType":"YulFunctionCall","src":"1709:12:42"},"nativeSrc":"1709:12:42","nodeType":"YulExpressionStatement","src":"1709:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1678:6:42","nodeType":"YulIdentifier","src":"1678:6:42"},{"name":"length","nativeSrc":"1686:6:42","nodeType":"YulIdentifier","src":"1686:6:42"}],"functionName":{"name":"add","nativeSrc":"1674:3:42","nodeType":"YulIdentifier","src":"1674:3:42"},"nativeSrc":"1674:19:42","nodeType":"YulFunctionCall","src":"1674:19:42"},{"kind":"number","nativeSrc":"1695:4:42","nodeType":"YulLiteral","src":"1695:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1670:3:42","nodeType":"YulIdentifier","src":"1670:3:42"},"nativeSrc":"1670:30:42","nodeType":"YulFunctionCall","src":"1670:30:42"},{"name":"end","nativeSrc":"1702:3:42","nodeType":"YulIdentifier","src":"1702:3:42"}],"functionName":{"name":"gt","nativeSrc":"1667:2:42","nodeType":"YulIdentifier","src":"1667:2:42"},"nativeSrc":"1667:39:42","nodeType":"YulFunctionCall","src":"1667:39:42"},"nativeSrc":"1664:59:42","nodeType":"YulIf","src":"1664:59:42"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1382:347:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1417:6:42","nodeType":"YulTypedName","src":"1417:6:42","type":""},{"name":"end","nativeSrc":"1425:3:42","nodeType":"YulTypedName","src":"1425:3:42","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1433:8:42","nodeType":"YulTypedName","src":"1433:8:42","type":""},{"name":"length","nativeSrc":"1443:6:42","nodeType":"YulTypedName","src":"1443:6:42","type":""}],"src":"1382:347:42"},{"body":{"nativeSrc":"1823:320:42","nodeType":"YulBlock","src":"1823:320:42","statements":[{"body":{"nativeSrc":"1869:16:42","nodeType":"YulBlock","src":"1869:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1878:1:42","nodeType":"YulLiteral","src":"1878:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1881:1:42","nodeType":"YulLiteral","src":"1881:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1871:6:42","nodeType":"YulIdentifier","src":"1871:6:42"},"nativeSrc":"1871:12:42","nodeType":"YulFunctionCall","src":"1871:12:42"},"nativeSrc":"1871:12:42","nodeType":"YulExpressionStatement","src":"1871:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1844:7:42","nodeType":"YulIdentifier","src":"1844:7:42"},{"name":"headStart","nativeSrc":"1853:9:42","nodeType":"YulIdentifier","src":"1853:9:42"}],"functionName":{"name":"sub","nativeSrc":"1840:3:42","nodeType":"YulIdentifier","src":"1840:3:42"},"nativeSrc":"1840:23:42","nodeType":"YulFunctionCall","src":"1840:23:42"},{"kind":"number","nativeSrc":"1865:2:42","nodeType":"YulLiteral","src":"1865:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1836:3:42","nodeType":"YulIdentifier","src":"1836:3:42"},"nativeSrc":"1836:32:42","nodeType":"YulFunctionCall","src":"1836:32:42"},"nativeSrc":"1833:52:42","nodeType":"YulIf","src":"1833:52:42"},{"nativeSrc":"1894:37:42","nodeType":"YulVariableDeclaration","src":"1894:37:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1921:9:42","nodeType":"YulIdentifier","src":"1921:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"1908:12:42","nodeType":"YulIdentifier","src":"1908:12:42"},"nativeSrc":"1908:23:42","nodeType":"YulFunctionCall","src":"1908:23:42"},"variables":[{"name":"offset","nativeSrc":"1898:6:42","nodeType":"YulTypedName","src":"1898:6:42","type":""}]},{"body":{"nativeSrc":"1974:16:42","nodeType":"YulBlock","src":"1974:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1983:1:42","nodeType":"YulLiteral","src":"1983:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1986:1:42","nodeType":"YulLiteral","src":"1986:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1976:6:42","nodeType":"YulIdentifier","src":"1976:6:42"},"nativeSrc":"1976:12:42","nodeType":"YulFunctionCall","src":"1976:12:42"},"nativeSrc":"1976:12:42","nodeType":"YulExpressionStatement","src":"1976:12:42"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1946:6:42","nodeType":"YulIdentifier","src":"1946:6:42"},{"kind":"number","nativeSrc":"1954:18:42","nodeType":"YulLiteral","src":"1954:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1943:2:42","nodeType":"YulIdentifier","src":"1943:2:42"},"nativeSrc":"1943:30:42","nodeType":"YulFunctionCall","src":"1943:30:42"},"nativeSrc":"1940:50:42","nodeType":"YulIf","src":"1940:50:42"},{"nativeSrc":"1999:84:42","nodeType":"YulVariableDeclaration","src":"1999:84:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2055:9:42","nodeType":"YulIdentifier","src":"2055:9:42"},{"name":"offset","nativeSrc":"2066:6:42","nodeType":"YulIdentifier","src":"2066:6:42"}],"functionName":{"name":"add","nativeSrc":"2051:3:42","nodeType":"YulIdentifier","src":"2051:3:42"},"nativeSrc":"2051:22:42","nodeType":"YulFunctionCall","src":"2051:22:42"},{"name":"dataEnd","nativeSrc":"2075:7:42","nodeType":"YulIdentifier","src":"2075:7:42"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2025:25:42","nodeType":"YulIdentifier","src":"2025:25:42"},"nativeSrc":"2025:58:42","nodeType":"YulFunctionCall","src":"2025:58:42"},"variables":[{"name":"value0_1","nativeSrc":"2003:8:42","nodeType":"YulTypedName","src":"2003:8:42","type":""},{"name":"value1_1","nativeSrc":"2013:8:42","nodeType":"YulTypedName","src":"2013:8:42","type":""}]},{"nativeSrc":"2092:18:42","nodeType":"YulAssignment","src":"2092:18:42","value":{"name":"value0_1","nativeSrc":"2102:8:42","nodeType":"YulIdentifier","src":"2102:8:42"},"variableNames":[{"name":"value0","nativeSrc":"2092:6:42","nodeType":"YulIdentifier","src":"2092:6:42"}]},{"nativeSrc":"2119:18:42","nodeType":"YulAssignment","src":"2119:18:42","value":{"name":"value1_1","nativeSrc":"2129:8:42","nodeType":"YulIdentifier","src":"2129:8:42"},"variableNames":[{"name":"value1","nativeSrc":"2119:6:42","nodeType":"YulIdentifier","src":"2119:6:42"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nativeSrc":"1734:409:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1781:9:42","nodeType":"YulTypedName","src":"1781:9:42","type":""},{"name":"dataEnd","nativeSrc":"1792:7:42","nodeType":"YulTypedName","src":"1792:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1804:6:42","nodeType":"YulTypedName","src":"1804:6:42","type":""},{"name":"value1","nativeSrc":"1812:6:42","nodeType":"YulTypedName","src":"1812:6:42","type":""}],"src":"1734:409:42"},{"body":{"nativeSrc":"2249:76:42","nodeType":"YulBlock","src":"2249:76:42","statements":[{"nativeSrc":"2259:26:42","nodeType":"YulAssignment","src":"2259:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2271:9:42","nodeType":"YulIdentifier","src":"2271:9:42"},{"kind":"number","nativeSrc":"2282:2:42","nodeType":"YulLiteral","src":"2282:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2267:3:42","nodeType":"YulIdentifier","src":"2267:3:42"},"nativeSrc":"2267:18:42","nodeType":"YulFunctionCall","src":"2267:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2259:4:42","nodeType":"YulIdentifier","src":"2259:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2301:9:42","nodeType":"YulIdentifier","src":"2301:9:42"},{"name":"value0","nativeSrc":"2312:6:42","nodeType":"YulIdentifier","src":"2312:6:42"}],"functionName":{"name":"mstore","nativeSrc":"2294:6:42","nodeType":"YulIdentifier","src":"2294:6:42"},"nativeSrc":"2294:25:42","nodeType":"YulFunctionCall","src":"2294:25:42"},"nativeSrc":"2294:25:42","nodeType":"YulExpressionStatement","src":"2294:25:42"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2148:177:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2218:9:42","nodeType":"YulTypedName","src":"2218:9:42","type":""},{"name":"value0","nativeSrc":"2229:6:42","nodeType":"YulTypedName","src":"2229:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2240:4:42","nodeType":"YulTypedName","src":"2240:4:42","type":""}],"src":"2148:177:42"},{"body":{"nativeSrc":"2458:125:42","nodeType":"YulBlock","src":"2458:125:42","statements":[{"nativeSrc":"2468:26:42","nodeType":"YulAssignment","src":"2468:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2480:9:42","nodeType":"YulIdentifier","src":"2480:9:42"},{"kind":"number","nativeSrc":"2491:2:42","nodeType":"YulLiteral","src":"2491:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2476:3:42","nodeType":"YulIdentifier","src":"2476:3:42"},"nativeSrc":"2476:18:42","nodeType":"YulFunctionCall","src":"2476:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2468:4:42","nodeType":"YulIdentifier","src":"2468:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2510:9:42","nodeType":"YulIdentifier","src":"2510:9:42"},{"arguments":[{"name":"value0","nativeSrc":"2525:6:42","nodeType":"YulIdentifier","src":"2525:6:42"},{"kind":"number","nativeSrc":"2533:42:42","nodeType":"YulLiteral","src":"2533:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2521:3:42","nodeType":"YulIdentifier","src":"2521:3:42"},"nativeSrc":"2521:55:42","nodeType":"YulFunctionCall","src":"2521:55:42"}],"functionName":{"name":"mstore","nativeSrc":"2503:6:42","nodeType":"YulIdentifier","src":"2503:6:42"},"nativeSrc":"2503:74:42","nodeType":"YulFunctionCall","src":"2503:74:42"},"nativeSrc":"2503:74:42","nodeType":"YulExpressionStatement","src":"2503:74:42"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed","nativeSrc":"2330:253:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2427:9:42","nodeType":"YulTypedName","src":"2427:9:42","type":""},{"name":"value0","nativeSrc":"2438:6:42","nodeType":"YulTypedName","src":"2438:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2449:4:42","nodeType":"YulTypedName","src":"2449:4:42","type":""}],"src":"2330:253:42"},{"body":{"nativeSrc":"2705:125:42","nodeType":"YulBlock","src":"2705:125:42","statements":[{"nativeSrc":"2715:26:42","nodeType":"YulAssignment","src":"2715:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2727:9:42","nodeType":"YulIdentifier","src":"2727:9:42"},{"kind":"number","nativeSrc":"2738:2:42","nodeType":"YulLiteral","src":"2738:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2723:3:42","nodeType":"YulIdentifier","src":"2723:3:42"},"nativeSrc":"2723:18:42","nodeType":"YulFunctionCall","src":"2723:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2715:4:42","nodeType":"YulIdentifier","src":"2715:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2757:9:42","nodeType":"YulIdentifier","src":"2757:9:42"},{"arguments":[{"name":"value0","nativeSrc":"2772:6:42","nodeType":"YulIdentifier","src":"2772:6:42"},{"kind":"number","nativeSrc":"2780:42:42","nodeType":"YulLiteral","src":"2780:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2768:3:42","nodeType":"YulIdentifier","src":"2768:3:42"},"nativeSrc":"2768:55:42","nodeType":"YulFunctionCall","src":"2768:55:42"}],"functionName":{"name":"mstore","nativeSrc":"2750:6:42","nodeType":"YulIdentifier","src":"2750:6:42"},"nativeSrc":"2750:74:42","nodeType":"YulFunctionCall","src":"2750:74:42"},"nativeSrc":"2750:74:42","nodeType":"YulExpressionStatement","src":"2750:74:42"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed","nativeSrc":"2588:242:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2674:9:42","nodeType":"YulTypedName","src":"2674:9:42","type":""},{"name":"value0","nativeSrc":"2685:6:42","nodeType":"YulTypedName","src":"2685:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2696:4:42","nodeType":"YulTypedName","src":"2696:4:42","type":""}],"src":"2588:242:42"},{"body":{"nativeSrc":"2922:280:42","nodeType":"YulBlock","src":"2922:280:42","statements":[{"body":{"nativeSrc":"2968:16:42","nodeType":"YulBlock","src":"2968:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2977:1:42","nodeType":"YulLiteral","src":"2977:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"2980:1:42","nodeType":"YulLiteral","src":"2980:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2970:6:42","nodeType":"YulIdentifier","src":"2970:6:42"},"nativeSrc":"2970:12:42","nodeType":"YulFunctionCall","src":"2970:12:42"},"nativeSrc":"2970:12:42","nodeType":"YulExpressionStatement","src":"2970:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2943:7:42","nodeType":"YulIdentifier","src":"2943:7:42"},{"name":"headStart","nativeSrc":"2952:9:42","nodeType":"YulIdentifier","src":"2952:9:42"}],"functionName":{"name":"sub","nativeSrc":"2939:3:42","nodeType":"YulIdentifier","src":"2939:3:42"},"nativeSrc":"2939:23:42","nodeType":"YulFunctionCall","src":"2939:23:42"},{"kind":"number","nativeSrc":"2964:2:42","nodeType":"YulLiteral","src":"2964:2:42","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2935:3:42","nodeType":"YulIdentifier","src":"2935:3:42"},"nativeSrc":"2935:32:42","nodeType":"YulFunctionCall","src":"2935:32:42"},"nativeSrc":"2932:52:42","nodeType":"YulIf","src":"2932:52:42"},{"nativeSrc":"2993:14:42","nodeType":"YulVariableDeclaration","src":"2993:14:42","value":{"kind":"number","nativeSrc":"3006:1:42","nodeType":"YulLiteral","src":"3006:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2997:5:42","nodeType":"YulTypedName","src":"2997:5:42","type":""}]},{"nativeSrc":"3016:32:42","nodeType":"YulAssignment","src":"3016:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"3038:9:42","nodeType":"YulIdentifier","src":"3038:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"3025:12:42","nodeType":"YulIdentifier","src":"3025:12:42"},"nativeSrc":"3025:23:42","nodeType":"YulFunctionCall","src":"3025:23:42"},"variableNames":[{"name":"value","nativeSrc":"3016:5:42","nodeType":"YulIdentifier","src":"3016:5:42"}]},{"nativeSrc":"3057:15:42","nodeType":"YulAssignment","src":"3057:15:42","value":{"name":"value","nativeSrc":"3067:5:42","nodeType":"YulIdentifier","src":"3067:5:42"},"variableNames":[{"name":"value0","nativeSrc":"3057:6:42","nodeType":"YulIdentifier","src":"3057:6:42"}]},{"nativeSrc":"3081:47:42","nodeType":"YulVariableDeclaration","src":"3081:47:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3113:9:42","nodeType":"YulIdentifier","src":"3113:9:42"},{"kind":"number","nativeSrc":"3124:2:42","nodeType":"YulLiteral","src":"3124:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3109:3:42","nodeType":"YulIdentifier","src":"3109:3:42"},"nativeSrc":"3109:18:42","nodeType":"YulFunctionCall","src":"3109:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3096:12:42","nodeType":"YulIdentifier","src":"3096:12:42"},"nativeSrc":"3096:32:42","nodeType":"YulFunctionCall","src":"3096:32:42"},"variables":[{"name":"value_1","nativeSrc":"3085:7:42","nodeType":"YulTypedName","src":"3085:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3162:7:42","nodeType":"YulIdentifier","src":"3162:7:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3137:24:42","nodeType":"YulIdentifier","src":"3137:24:42"},"nativeSrc":"3137:33:42","nodeType":"YulFunctionCall","src":"3137:33:42"},"nativeSrc":"3137:33:42","nodeType":"YulExpressionStatement","src":"3137:33:42"},{"nativeSrc":"3179:17:42","nodeType":"YulAssignment","src":"3179:17:42","value":{"name":"value_1","nativeSrc":"3189:7:42","nodeType":"YulIdentifier","src":"3189:7:42"},"variableNames":[{"name":"value1","nativeSrc":"3179:6:42","nodeType":"YulIdentifier","src":"3179:6:42"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2835:367:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2880:9:42","nodeType":"YulTypedName","src":"2880:9:42","type":""},{"name":"dataEnd","nativeSrc":"2891:7:42","nodeType":"YulTypedName","src":"2891:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2903:6:42","nodeType":"YulTypedName","src":"2903:6:42","type":""},{"name":"value1","nativeSrc":"2911:6:42","nodeType":"YulTypedName","src":"2911:6:42","type":""}],"src":"2835:367:42"},{"body":{"nativeSrc":"3347:666:42","nodeType":"YulBlock","src":"3347:666:42","statements":[{"body":{"nativeSrc":"3394:16:42","nodeType":"YulBlock","src":"3394:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3403:1:42","nodeType":"YulLiteral","src":"3403:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"3406:1:42","nodeType":"YulLiteral","src":"3406:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3396:6:42","nodeType":"YulIdentifier","src":"3396:6:42"},"nativeSrc":"3396:12:42","nodeType":"YulFunctionCall","src":"3396:12:42"},"nativeSrc":"3396:12:42","nodeType":"YulExpressionStatement","src":"3396:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3368:7:42","nodeType":"YulIdentifier","src":"3368:7:42"},{"name":"headStart","nativeSrc":"3377:9:42","nodeType":"YulIdentifier","src":"3377:9:42"}],"functionName":{"name":"sub","nativeSrc":"3364:3:42","nodeType":"YulIdentifier","src":"3364:3:42"},"nativeSrc":"3364:23:42","nodeType":"YulFunctionCall","src":"3364:23:42"},{"kind":"number","nativeSrc":"3389:3:42","nodeType":"YulLiteral","src":"3389:3:42","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3360:3:42","nodeType":"YulIdentifier","src":"3360:3:42"},"nativeSrc":"3360:33:42","nodeType":"YulFunctionCall","src":"3360:33:42"},"nativeSrc":"3357:53:42","nodeType":"YulIf","src":"3357:53:42"},{"nativeSrc":"3419:36:42","nodeType":"YulVariableDeclaration","src":"3419:36:42","value":{"arguments":[{"name":"headStart","nativeSrc":"3445:9:42","nodeType":"YulIdentifier","src":"3445:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"3432:12:42","nodeType":"YulIdentifier","src":"3432:12:42"},"nativeSrc":"3432:23:42","nodeType":"YulFunctionCall","src":"3432:23:42"},"variables":[{"name":"value","nativeSrc":"3423:5:42","nodeType":"YulTypedName","src":"3423:5:42","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3489:5:42","nodeType":"YulIdentifier","src":"3489:5:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3464:24:42","nodeType":"YulIdentifier","src":"3464:24:42"},"nativeSrc":"3464:31:42","nodeType":"YulFunctionCall","src":"3464:31:42"},"nativeSrc":"3464:31:42","nodeType":"YulExpressionStatement","src":"3464:31:42"},{"nativeSrc":"3504:15:42","nodeType":"YulAssignment","src":"3504:15:42","value":{"name":"value","nativeSrc":"3514:5:42","nodeType":"YulIdentifier","src":"3514:5:42"},"variableNames":[{"name":"value0","nativeSrc":"3504:6:42","nodeType":"YulIdentifier","src":"3504:6:42"}]},{"nativeSrc":"3528:47:42","nodeType":"YulVariableDeclaration","src":"3528:47:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3560:9:42","nodeType":"YulIdentifier","src":"3560:9:42"},{"kind":"number","nativeSrc":"3571:2:42","nodeType":"YulLiteral","src":"3571:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3556:3:42","nodeType":"YulIdentifier","src":"3556:3:42"},"nativeSrc":"3556:18:42","nodeType":"YulFunctionCall","src":"3556:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3543:12:42","nodeType":"YulIdentifier","src":"3543:12:42"},"nativeSrc":"3543:32:42","nodeType":"YulFunctionCall","src":"3543:32:42"},"variables":[{"name":"value_1","nativeSrc":"3532:7:42","nodeType":"YulTypedName","src":"3532:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3609:7:42","nodeType":"YulIdentifier","src":"3609:7:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3584:24:42","nodeType":"YulIdentifier","src":"3584:24:42"},"nativeSrc":"3584:33:42","nodeType":"YulFunctionCall","src":"3584:33:42"},"nativeSrc":"3584:33:42","nodeType":"YulExpressionStatement","src":"3584:33:42"},{"nativeSrc":"3626:17:42","nodeType":"YulAssignment","src":"3626:17:42","value":{"name":"value_1","nativeSrc":"3636:7:42","nodeType":"YulIdentifier","src":"3636:7:42"},"variableNames":[{"name":"value1","nativeSrc":"3626:6:42","nodeType":"YulIdentifier","src":"3626:6:42"}]},{"nativeSrc":"3652:16:42","nodeType":"YulVariableDeclaration","src":"3652:16:42","value":{"kind":"number","nativeSrc":"3667:1:42","nodeType":"YulLiteral","src":"3667:1:42","type":"","value":"0"},"variables":[{"name":"value_2","nativeSrc":"3656:7:42","nodeType":"YulTypedName","src":"3656:7:42","type":""}]},{"nativeSrc":"3677:43:42","nodeType":"YulAssignment","src":"3677:43:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3705:9:42","nodeType":"YulIdentifier","src":"3705:9:42"},{"kind":"number","nativeSrc":"3716:2:42","nodeType":"YulLiteral","src":"3716:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3701:3:42","nodeType":"YulIdentifier","src":"3701:3:42"},"nativeSrc":"3701:18:42","nodeType":"YulFunctionCall","src":"3701:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3688:12:42","nodeType":"YulIdentifier","src":"3688:12:42"},"nativeSrc":"3688:32:42","nodeType":"YulFunctionCall","src":"3688:32:42"},"variableNames":[{"name":"value_2","nativeSrc":"3677:7:42","nodeType":"YulIdentifier","src":"3677:7:42"}]},{"nativeSrc":"3729:17:42","nodeType":"YulAssignment","src":"3729:17:42","value":{"name":"value_2","nativeSrc":"3739:7:42","nodeType":"YulIdentifier","src":"3739:7:42"},"variableNames":[{"name":"value2","nativeSrc":"3729:6:42","nodeType":"YulIdentifier","src":"3729:6:42"}]},{"nativeSrc":"3755:46:42","nodeType":"YulVariableDeclaration","src":"3755:46:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3786:9:42","nodeType":"YulIdentifier","src":"3786:9:42"},{"kind":"number","nativeSrc":"3797:2:42","nodeType":"YulLiteral","src":"3797:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3782:3:42","nodeType":"YulIdentifier","src":"3782:3:42"},"nativeSrc":"3782:18:42","nodeType":"YulFunctionCall","src":"3782:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3769:12:42","nodeType":"YulIdentifier","src":"3769:12:42"},"nativeSrc":"3769:32:42","nodeType":"YulFunctionCall","src":"3769:32:42"},"variables":[{"name":"offset","nativeSrc":"3759:6:42","nodeType":"YulTypedName","src":"3759:6:42","type":""}]},{"body":{"nativeSrc":"3844:16:42","nodeType":"YulBlock","src":"3844:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3853:1:42","nodeType":"YulLiteral","src":"3853:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"3856:1:42","nodeType":"YulLiteral","src":"3856:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3846:6:42","nodeType":"YulIdentifier","src":"3846:6:42"},"nativeSrc":"3846:12:42","nodeType":"YulFunctionCall","src":"3846:12:42"},"nativeSrc":"3846:12:42","nodeType":"YulExpressionStatement","src":"3846:12:42"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3816:6:42","nodeType":"YulIdentifier","src":"3816:6:42"},{"kind":"number","nativeSrc":"3824:18:42","nodeType":"YulLiteral","src":"3824:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3813:2:42","nodeType":"YulIdentifier","src":"3813:2:42"},"nativeSrc":"3813:30:42","nodeType":"YulFunctionCall","src":"3813:30:42"},"nativeSrc":"3810:50:42","nodeType":"YulIf","src":"3810:50:42"},{"nativeSrc":"3869:84:42","nodeType":"YulVariableDeclaration","src":"3869:84:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3925:9:42","nodeType":"YulIdentifier","src":"3925:9:42"},{"name":"offset","nativeSrc":"3936:6:42","nodeType":"YulIdentifier","src":"3936:6:42"}],"functionName":{"name":"add","nativeSrc":"3921:3:42","nodeType":"YulIdentifier","src":"3921:3:42"},"nativeSrc":"3921:22:42","nodeType":"YulFunctionCall","src":"3921:22:42"},{"name":"dataEnd","nativeSrc":"3945:7:42","nodeType":"YulIdentifier","src":"3945:7:42"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3895:25:42","nodeType":"YulIdentifier","src":"3895:25:42"},"nativeSrc":"3895:58:42","nodeType":"YulFunctionCall","src":"3895:58:42"},"variables":[{"name":"value3_1","nativeSrc":"3873:8:42","nodeType":"YulTypedName","src":"3873:8:42","type":""},{"name":"value4_1","nativeSrc":"3883:8:42","nodeType":"YulTypedName","src":"3883:8:42","type":""}]},{"nativeSrc":"3962:18:42","nodeType":"YulAssignment","src":"3962:18:42","value":{"name":"value3_1","nativeSrc":"3972:8:42","nodeType":"YulIdentifier","src":"3972:8:42"},"variableNames":[{"name":"value3","nativeSrc":"3962:6:42","nodeType":"YulIdentifier","src":"3962:6:42"}]},{"nativeSrc":"3989:18:42","nodeType":"YulAssignment","src":"3989:18:42","value":{"name":"value4_1","nativeSrc":"3999:8:42","nodeType":"YulIdentifier","src":"3999:8:42"},"variableNames":[{"name":"value4","nativeSrc":"3989:6:42","nodeType":"YulIdentifier","src":"3989:6:42"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3207:806:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3281:9:42","nodeType":"YulTypedName","src":"3281:9:42","type":""},{"name":"dataEnd","nativeSrc":"3292:7:42","nodeType":"YulTypedName","src":"3292:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3304:6:42","nodeType":"YulTypedName","src":"3304:6:42","type":""},{"name":"value1","nativeSrc":"3312:6:42","nodeType":"YulTypedName","src":"3312:6:42","type":""},{"name":"value2","nativeSrc":"3320:6:42","nodeType":"YulTypedName","src":"3320:6:42","type":""},{"name":"value3","nativeSrc":"3328:6:42","nodeType":"YulTypedName","src":"3328:6:42","type":""},{"name":"value4","nativeSrc":"3336:6:42","nodeType":"YulTypedName","src":"3336:6:42","type":""}],"src":"3207:806:42"},{"body":{"nativeSrc":"4117:149:42","nodeType":"YulBlock","src":"4117:149:42","statements":[{"nativeSrc":"4127:26:42","nodeType":"YulAssignment","src":"4127:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4139:9:42","nodeType":"YulIdentifier","src":"4139:9:42"},{"kind":"number","nativeSrc":"4150:2:42","nodeType":"YulLiteral","src":"4150:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4135:3:42","nodeType":"YulIdentifier","src":"4135:3:42"},"nativeSrc":"4135:18:42","nodeType":"YulFunctionCall","src":"4135:18:42"},"variableNames":[{"name":"tail","nativeSrc":"4127:4:42","nodeType":"YulIdentifier","src":"4127:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4169:9:42","nodeType":"YulIdentifier","src":"4169:9:42"},{"arguments":[{"name":"value0","nativeSrc":"4184:6:42","nodeType":"YulIdentifier","src":"4184:6:42"},{"kind":"number","nativeSrc":"4192:66:42","nodeType":"YulLiteral","src":"4192:66:42","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"4180:3:42","nodeType":"YulIdentifier","src":"4180:3:42"},"nativeSrc":"4180:79:42","nodeType":"YulFunctionCall","src":"4180:79:42"}],"functionName":{"name":"mstore","nativeSrc":"4162:6:42","nodeType":"YulIdentifier","src":"4162:6:42"},"nativeSrc":"4162:98:42","nodeType":"YulFunctionCall","src":"4162:98:42"},"nativeSrc":"4162:98:42","nodeType":"YulExpressionStatement","src":"4162:98:42"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"4018:248:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4086:9:42","nodeType":"YulTypedName","src":"4086:9:42","type":""},{"name":"value0","nativeSrc":"4097:6:42","nodeType":"YulTypedName","src":"4097:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4108:4:42","nodeType":"YulTypedName","src":"4108:4:42","type":""}],"src":"4018:248:42"},{"body":{"nativeSrc":"4372:125:42","nodeType":"YulBlock","src":"4372:125:42","statements":[{"nativeSrc":"4382:26:42","nodeType":"YulAssignment","src":"4382:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4394:9:42","nodeType":"YulIdentifier","src":"4394:9:42"},{"kind":"number","nativeSrc":"4405:2:42","nodeType":"YulLiteral","src":"4405:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4390:3:42","nodeType":"YulIdentifier","src":"4390:3:42"},"nativeSrc":"4390:18:42","nodeType":"YulFunctionCall","src":"4390:18:42"},"variableNames":[{"name":"tail","nativeSrc":"4382:4:42","nodeType":"YulIdentifier","src":"4382:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4424:9:42","nodeType":"YulIdentifier","src":"4424:9:42"},{"arguments":[{"name":"value0","nativeSrc":"4439:6:42","nodeType":"YulIdentifier","src":"4439:6:42"},{"kind":"number","nativeSrc":"4447:42:42","nodeType":"YulLiteral","src":"4447:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4435:3:42","nodeType":"YulIdentifier","src":"4435:3:42"},"nativeSrc":"4435:55:42","nodeType":"YulFunctionCall","src":"4435:55:42"}],"functionName":{"name":"mstore","nativeSrc":"4417:6:42","nodeType":"YulIdentifier","src":"4417:6:42"},"nativeSrc":"4417:74:42","nodeType":"YulFunctionCall","src":"4417:74:42"},"nativeSrc":"4417:74:42","nodeType":"YulExpressionStatement","src":"4417:74:42"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4271:226:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4341:9:42","nodeType":"YulTypedName","src":"4341:9:42","type":""},{"name":"value0","nativeSrc":"4352:6:42","nodeType":"YulTypedName","src":"4352:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4363:4:42","nodeType":"YulTypedName","src":"4363:4:42","type":""}],"src":"4271:226:42"},{"body":{"nativeSrc":"4589:259:42","nodeType":"YulBlock","src":"4589:259:42","statements":[{"body":{"nativeSrc":"4635:16:42","nodeType":"YulBlock","src":"4635:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4644:1:42","nodeType":"YulLiteral","src":"4644:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"4647:1:42","nodeType":"YulLiteral","src":"4647:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4637:6:42","nodeType":"YulIdentifier","src":"4637:6:42"},"nativeSrc":"4637:12:42","nodeType":"YulFunctionCall","src":"4637:12:42"},"nativeSrc":"4637:12:42","nodeType":"YulExpressionStatement","src":"4637:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4610:7:42","nodeType":"YulIdentifier","src":"4610:7:42"},{"name":"headStart","nativeSrc":"4619:9:42","nodeType":"YulIdentifier","src":"4619:9:42"}],"functionName":{"name":"sub","nativeSrc":"4606:3:42","nodeType":"YulIdentifier","src":"4606:3:42"},"nativeSrc":"4606:23:42","nodeType":"YulFunctionCall","src":"4606:23:42"},{"kind":"number","nativeSrc":"4631:2:42","nodeType":"YulLiteral","src":"4631:2:42","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4602:3:42","nodeType":"YulIdentifier","src":"4602:3:42"},"nativeSrc":"4602:32:42","nodeType":"YulFunctionCall","src":"4602:32:42"},"nativeSrc":"4599:52:42","nodeType":"YulIf","src":"4599:52:42"},{"nativeSrc":"4660:14:42","nodeType":"YulVariableDeclaration","src":"4660:14:42","value":{"kind":"number","nativeSrc":"4673:1:42","nodeType":"YulLiteral","src":"4673:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4664:5:42","nodeType":"YulTypedName","src":"4664:5:42","type":""}]},{"nativeSrc":"4683:32:42","nodeType":"YulAssignment","src":"4683:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4705:9:42","nodeType":"YulIdentifier","src":"4705:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"4692:12:42","nodeType":"YulIdentifier","src":"4692:12:42"},"nativeSrc":"4692:23:42","nodeType":"YulFunctionCall","src":"4692:23:42"},"variableNames":[{"name":"value","nativeSrc":"4683:5:42","nodeType":"YulIdentifier","src":"4683:5:42"}]},{"nativeSrc":"4724:15:42","nodeType":"YulAssignment","src":"4724:15:42","value":{"name":"value","nativeSrc":"4734:5:42","nodeType":"YulIdentifier","src":"4734:5:42"},"variableNames":[{"name":"value0","nativeSrc":"4724:6:42","nodeType":"YulIdentifier","src":"4724:6:42"}]},{"nativeSrc":"4748:16:42","nodeType":"YulVariableDeclaration","src":"4748:16:42","value":{"kind":"number","nativeSrc":"4763:1:42","nodeType":"YulLiteral","src":"4763:1:42","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"4752:7:42","nodeType":"YulTypedName","src":"4752:7:42","type":""}]},{"nativeSrc":"4773:43:42","nodeType":"YulAssignment","src":"4773:43:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4801:9:42","nodeType":"YulIdentifier","src":"4801:9:42"},{"kind":"number","nativeSrc":"4812:2:42","nodeType":"YulLiteral","src":"4812:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4797:3:42","nodeType":"YulIdentifier","src":"4797:3:42"},"nativeSrc":"4797:18:42","nodeType":"YulFunctionCall","src":"4797:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"4784:12:42","nodeType":"YulIdentifier","src":"4784:12:42"},"nativeSrc":"4784:32:42","nodeType":"YulFunctionCall","src":"4784:32:42"},"variableNames":[{"name":"value_1","nativeSrc":"4773:7:42","nodeType":"YulIdentifier","src":"4773:7:42"}]},{"nativeSrc":"4825:17:42","nodeType":"YulAssignment","src":"4825:17:42","value":{"name":"value_1","nativeSrc":"4835:7:42","nodeType":"YulIdentifier","src":"4835:7:42"},"variableNames":[{"name":"value1","nativeSrc":"4825:6:42","nodeType":"YulIdentifier","src":"4825:6:42"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"4502:346:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4547:9:42","nodeType":"YulTypedName","src":"4547:9:42","type":""},{"name":"dataEnd","nativeSrc":"4558:7:42","nodeType":"YulTypedName","src":"4558:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4570:6:42","nodeType":"YulTypedName","src":"4570:6:42","type":""},{"name":"value1","nativeSrc":"4578:6:42","nodeType":"YulTypedName","src":"4578:6:42","type":""}],"src":"4502:346:42"},{"body":{"nativeSrc":"4923:156:42","nodeType":"YulBlock","src":"4923:156:42","statements":[{"body":{"nativeSrc":"4969:16:42","nodeType":"YulBlock","src":"4969:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4978:1:42","nodeType":"YulLiteral","src":"4978:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"4981:1:42","nodeType":"YulLiteral","src":"4981:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4971:6:42","nodeType":"YulIdentifier","src":"4971:6:42"},"nativeSrc":"4971:12:42","nodeType":"YulFunctionCall","src":"4971:12:42"},"nativeSrc":"4971:12:42","nodeType":"YulExpressionStatement","src":"4971:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4944:7:42","nodeType":"YulIdentifier","src":"4944:7:42"},{"name":"headStart","nativeSrc":"4953:9:42","nodeType":"YulIdentifier","src":"4953:9:42"}],"functionName":{"name":"sub","nativeSrc":"4940:3:42","nodeType":"YulIdentifier","src":"4940:3:42"},"nativeSrc":"4940:23:42","nodeType":"YulFunctionCall","src":"4940:23:42"},{"kind":"number","nativeSrc":"4965:2:42","nodeType":"YulLiteral","src":"4965:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4936:3:42","nodeType":"YulIdentifier","src":"4936:3:42"},"nativeSrc":"4936:32:42","nodeType":"YulFunctionCall","src":"4936:32:42"},"nativeSrc":"4933:52:42","nodeType":"YulIf","src":"4933:52:42"},{"nativeSrc":"4994:14:42","nodeType":"YulVariableDeclaration","src":"4994:14:42","value":{"kind":"number","nativeSrc":"5007:1:42","nodeType":"YulLiteral","src":"5007:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4998:5:42","nodeType":"YulTypedName","src":"4998:5:42","type":""}]},{"nativeSrc":"5017:32:42","nodeType":"YulAssignment","src":"5017:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"5039:9:42","nodeType":"YulIdentifier","src":"5039:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"5026:12:42","nodeType":"YulIdentifier","src":"5026:12:42"},"nativeSrc":"5026:23:42","nodeType":"YulFunctionCall","src":"5026:23:42"},"variableNames":[{"name":"value","nativeSrc":"5017:5:42","nodeType":"YulIdentifier","src":"5017:5:42"}]},{"nativeSrc":"5058:15:42","nodeType":"YulAssignment","src":"5058:15:42","value":{"name":"value","nativeSrc":"5068:5:42","nodeType":"YulIdentifier","src":"5068:5:42"},"variableNames":[{"name":"value0","nativeSrc":"5058:6:42","nodeType":"YulIdentifier","src":"5058:6:42"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"4853:226:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4889:9:42","nodeType":"YulTypedName","src":"4889:9:42","type":""},{"name":"dataEnd","nativeSrc":"4900:7:42","nodeType":"YulTypedName","src":"4900:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4912:6:42","nodeType":"YulTypedName","src":"4912:6:42","type":""}],"src":"4853:226:42"},{"body":{"nativeSrc":"5116:152:42","nodeType":"YulBlock","src":"5116:152:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5133:1:42","nodeType":"YulLiteral","src":"5133:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5136:77:42","nodeType":"YulLiteral","src":"5136:77:42","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5126:6:42","nodeType":"YulIdentifier","src":"5126:6:42"},"nativeSrc":"5126:88:42","nodeType":"YulFunctionCall","src":"5126:88:42"},"nativeSrc":"5126:88:42","nodeType":"YulExpressionStatement","src":"5126:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5230:1:42","nodeType":"YulLiteral","src":"5230:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"5233:4:42","nodeType":"YulLiteral","src":"5233:4:42","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5223:6:42","nodeType":"YulIdentifier","src":"5223:6:42"},"nativeSrc":"5223:15:42","nodeType":"YulFunctionCall","src":"5223:15:42"},"nativeSrc":"5223:15:42","nodeType":"YulExpressionStatement","src":"5223:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5254:1:42","nodeType":"YulLiteral","src":"5254:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5257:4:42","nodeType":"YulLiteral","src":"5257:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5247:6:42","nodeType":"YulIdentifier","src":"5247:6:42"},"nativeSrc":"5247:15:42","nodeType":"YulFunctionCall","src":"5247:15:42"},"nativeSrc":"5247:15:42","nodeType":"YulExpressionStatement","src":"5247:15:42"}]},"name":"panic_error_0x11","nativeSrc":"5084:184:42","nodeType":"YulFunctionDefinition","src":"5084:184:42"},{"body":{"nativeSrc":"5322:79:42","nodeType":"YulBlock","src":"5322:79:42","statements":[{"nativeSrc":"5332:17:42","nodeType":"YulAssignment","src":"5332:17:42","value":{"arguments":[{"name":"x","nativeSrc":"5344:1:42","nodeType":"YulIdentifier","src":"5344:1:42"},{"name":"y","nativeSrc":"5347:1:42","nodeType":"YulIdentifier","src":"5347:1:42"}],"functionName":{"name":"sub","nativeSrc":"5340:3:42","nodeType":"YulIdentifier","src":"5340:3:42"},"nativeSrc":"5340:9:42","nodeType":"YulFunctionCall","src":"5340:9:42"},"variableNames":[{"name":"diff","nativeSrc":"5332:4:42","nodeType":"YulIdentifier","src":"5332:4:42"}]},{"body":{"nativeSrc":"5373:22:42","nodeType":"YulBlock","src":"5373:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5375:16:42","nodeType":"YulIdentifier","src":"5375:16:42"},"nativeSrc":"5375:18:42","nodeType":"YulFunctionCall","src":"5375:18:42"},"nativeSrc":"5375:18:42","nodeType":"YulExpressionStatement","src":"5375:18:42"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5364:4:42","nodeType":"YulIdentifier","src":"5364:4:42"},{"name":"x","nativeSrc":"5370:1:42","nodeType":"YulIdentifier","src":"5370:1:42"}],"functionName":{"name":"gt","nativeSrc":"5361:2:42","nodeType":"YulIdentifier","src":"5361:2:42"},"nativeSrc":"5361:11:42","nodeType":"YulFunctionCall","src":"5361:11:42"},"nativeSrc":"5358:37:42","nodeType":"YulIf","src":"5358:37:42"}]},"name":"checked_sub_t_uint256","nativeSrc":"5273:128:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5304:1:42","nodeType":"YulTypedName","src":"5304:1:42","type":""},{"name":"y","nativeSrc":"5307:1:42","nodeType":"YulTypedName","src":"5307:1:42","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5313:4:42","nodeType":"YulTypedName","src":"5313:4:42","type":""}],"src":"5273:128:42"},{"body":{"nativeSrc":"5458:116:42","nodeType":"YulBlock","src":"5458:116:42","statements":[{"nativeSrc":"5468:20:42","nodeType":"YulAssignment","src":"5468:20:42","value":{"arguments":[{"name":"x","nativeSrc":"5483:1:42","nodeType":"YulIdentifier","src":"5483:1:42"},{"name":"y","nativeSrc":"5486:1:42","nodeType":"YulIdentifier","src":"5486:1:42"}],"functionName":{"name":"mul","nativeSrc":"5479:3:42","nodeType":"YulIdentifier","src":"5479:3:42"},"nativeSrc":"5479:9:42","nodeType":"YulFunctionCall","src":"5479:9:42"},"variableNames":[{"name":"product","nativeSrc":"5468:7:42","nodeType":"YulIdentifier","src":"5468:7:42"}]},{"body":{"nativeSrc":"5546:22:42","nodeType":"YulBlock","src":"5546:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5548:16:42","nodeType":"YulIdentifier","src":"5548:16:42"},"nativeSrc":"5548:18:42","nodeType":"YulFunctionCall","src":"5548:18:42"},"nativeSrc":"5548:18:42","nodeType":"YulExpressionStatement","src":"5548:18:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5517:1:42","nodeType":"YulIdentifier","src":"5517:1:42"}],"functionName":{"name":"iszero","nativeSrc":"5510:6:42","nodeType":"YulIdentifier","src":"5510:6:42"},"nativeSrc":"5510:9:42","nodeType":"YulFunctionCall","src":"5510:9:42"},{"arguments":[{"name":"y","nativeSrc":"5524:1:42","nodeType":"YulIdentifier","src":"5524:1:42"},{"arguments":[{"name":"product","nativeSrc":"5531:7:42","nodeType":"YulIdentifier","src":"5531:7:42"},{"name":"x","nativeSrc":"5540:1:42","nodeType":"YulIdentifier","src":"5540:1:42"}],"functionName":{"name":"div","nativeSrc":"5527:3:42","nodeType":"YulIdentifier","src":"5527:3:42"},"nativeSrc":"5527:15:42","nodeType":"YulFunctionCall","src":"5527:15:42"}],"functionName":{"name":"eq","nativeSrc":"5521:2:42","nodeType":"YulIdentifier","src":"5521:2:42"},"nativeSrc":"5521:22:42","nodeType":"YulFunctionCall","src":"5521:22:42"}],"functionName":{"name":"or","nativeSrc":"5507:2:42","nodeType":"YulIdentifier","src":"5507:2:42"},"nativeSrc":"5507:37:42","nodeType":"YulFunctionCall","src":"5507:37:42"}],"functionName":{"name":"iszero","nativeSrc":"5500:6:42","nodeType":"YulIdentifier","src":"5500:6:42"},"nativeSrc":"5500:45:42","nodeType":"YulFunctionCall","src":"5500:45:42"},"nativeSrc":"5497:71:42","nodeType":"YulIf","src":"5497:71:42"}]},"name":"checked_mul_t_uint256","nativeSrc":"5406:168:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5437:1:42","nodeType":"YulTypedName","src":"5437:1:42","type":""},{"name":"y","nativeSrc":"5440:1:42","nodeType":"YulTypedName","src":"5440:1:42","type":""}],"returnVariables":[{"name":"product","nativeSrc":"5446:7:42","nodeType":"YulTypedName","src":"5446:7:42","type":""}],"src":"5406:168:42"},{"body":{"nativeSrc":"5611:152:42","nodeType":"YulBlock","src":"5611:152:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5628:1:42","nodeType":"YulLiteral","src":"5628:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5631:77:42","nodeType":"YulLiteral","src":"5631:77:42","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5621:6:42","nodeType":"YulIdentifier","src":"5621:6:42"},"nativeSrc":"5621:88:42","nodeType":"YulFunctionCall","src":"5621:88:42"},"nativeSrc":"5621:88:42","nodeType":"YulExpressionStatement","src":"5621:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5725:1:42","nodeType":"YulLiteral","src":"5725:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"5728:4:42","nodeType":"YulLiteral","src":"5728:4:42","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5718:6:42","nodeType":"YulIdentifier","src":"5718:6:42"},"nativeSrc":"5718:15:42","nodeType":"YulFunctionCall","src":"5718:15:42"},"nativeSrc":"5718:15:42","nodeType":"YulExpressionStatement","src":"5718:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5749:1:42","nodeType":"YulLiteral","src":"5749:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5752:4:42","nodeType":"YulLiteral","src":"5752:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5742:6:42","nodeType":"YulIdentifier","src":"5742:6:42"},"nativeSrc":"5742:15:42","nodeType":"YulFunctionCall","src":"5742:15:42"},"nativeSrc":"5742:15:42","nodeType":"YulExpressionStatement","src":"5742:15:42"}]},"name":"panic_error_0x12","nativeSrc":"5579:184:42","nodeType":"YulFunctionDefinition","src":"5579:184:42"},{"body":{"nativeSrc":"5814:74:42","nodeType":"YulBlock","src":"5814:74:42","statements":[{"body":{"nativeSrc":"5837:22:42","nodeType":"YulBlock","src":"5837:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"5839:16:42","nodeType":"YulIdentifier","src":"5839:16:42"},"nativeSrc":"5839:18:42","nodeType":"YulFunctionCall","src":"5839:18:42"},"nativeSrc":"5839:18:42","nodeType":"YulExpressionStatement","src":"5839:18:42"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5834:1:42","nodeType":"YulIdentifier","src":"5834:1:42"}],"functionName":{"name":"iszero","nativeSrc":"5827:6:42","nodeType":"YulIdentifier","src":"5827:6:42"},"nativeSrc":"5827:9:42","nodeType":"YulFunctionCall","src":"5827:9:42"},"nativeSrc":"5824:35:42","nodeType":"YulIf","src":"5824:35:42"},{"nativeSrc":"5868:14:42","nodeType":"YulAssignment","src":"5868:14:42","value":{"arguments":[{"name":"x","nativeSrc":"5877:1:42","nodeType":"YulIdentifier","src":"5877:1:42"},{"name":"y","nativeSrc":"5880:1:42","nodeType":"YulIdentifier","src":"5880:1:42"}],"functionName":{"name":"div","nativeSrc":"5873:3:42","nodeType":"YulIdentifier","src":"5873:3:42"},"nativeSrc":"5873:9:42","nodeType":"YulFunctionCall","src":"5873:9:42"},"variableNames":[{"name":"r","nativeSrc":"5868:1:42","nodeType":"YulIdentifier","src":"5868:1:42"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5768:120:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5799:1:42","nodeType":"YulTypedName","src":"5799:1:42","type":""},{"name":"y","nativeSrc":"5802:1:42","nodeType":"YulTypedName","src":"5802:1:42","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5808:1:42","nodeType":"YulTypedName","src":"5808:1:42","type":""}],"src":"5768:120:42"},{"body":{"nativeSrc":"5941:77:42","nodeType":"YulBlock","src":"5941:77:42","statements":[{"nativeSrc":"5951:16:42","nodeType":"YulAssignment","src":"5951:16:42","value":{"arguments":[{"name":"x","nativeSrc":"5962:1:42","nodeType":"YulIdentifier","src":"5962:1:42"},{"name":"y","nativeSrc":"5965:1:42","nodeType":"YulIdentifier","src":"5965:1:42"}],"functionName":{"name":"add","nativeSrc":"5958:3:42","nodeType":"YulIdentifier","src":"5958:3:42"},"nativeSrc":"5958:9:42","nodeType":"YulFunctionCall","src":"5958:9:42"},"variableNames":[{"name":"sum","nativeSrc":"5951:3:42","nodeType":"YulIdentifier","src":"5951:3:42"}]},{"body":{"nativeSrc":"5990:22:42","nodeType":"YulBlock","src":"5990:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5992:16:42","nodeType":"YulIdentifier","src":"5992:16:42"},"nativeSrc":"5992:18:42","nodeType":"YulFunctionCall","src":"5992:18:42"},"nativeSrc":"5992:18:42","nodeType":"YulExpressionStatement","src":"5992:18:42"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5982:1:42","nodeType":"YulIdentifier","src":"5982:1:42"},{"name":"sum","nativeSrc":"5985:3:42","nodeType":"YulIdentifier","src":"5985:3:42"}],"functionName":{"name":"gt","nativeSrc":"5979:2:42","nodeType":"YulIdentifier","src":"5979:2:42"},"nativeSrc":"5979:10:42","nodeType":"YulFunctionCall","src":"5979:10:42"},"nativeSrc":"5976:36:42","nodeType":"YulIf","src":"5976:36:42"}]},"name":"checked_add_t_uint256","nativeSrc":"5893:125:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5924:1:42","nodeType":"YulTypedName","src":"5924:1:42","type":""},{"name":"y","nativeSrc":"5927:1:42","nodeType":"YulTypedName","src":"5927:1:42","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5933:3:42","nodeType":"YulTypedName","src":"5933:3:42","type":""}],"src":"5893:125:42"},{"body":{"nativeSrc":"6170:514:42","nodeType":"YulBlock","src":"6170:514:42","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6187:9:42","nodeType":"YulIdentifier","src":"6187:9:42"},{"kind":"number","nativeSrc":"6198:2:42","nodeType":"YulLiteral","src":"6198:2:42","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"6180:6:42","nodeType":"YulIdentifier","src":"6180:6:42"},"nativeSrc":"6180:21:42","nodeType":"YulFunctionCall","src":"6180:21:42"},"nativeSrc":"6180:21:42","nodeType":"YulExpressionStatement","src":"6180:21:42"},{"nativeSrc":"6210:27:42","nodeType":"YulVariableDeclaration","src":"6210:27:42","value":{"arguments":[{"name":"value0","nativeSrc":"6230:6:42","nodeType":"YulIdentifier","src":"6230:6:42"}],"functionName":{"name":"mload","nativeSrc":"6224:5:42","nodeType":"YulIdentifier","src":"6224:5:42"},"nativeSrc":"6224:13:42","nodeType":"YulFunctionCall","src":"6224:13:42"},"variables":[{"name":"length","nativeSrc":"6214:6:42","nodeType":"YulTypedName","src":"6214:6:42","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6257:9:42","nodeType":"YulIdentifier","src":"6257:9:42"},{"kind":"number","nativeSrc":"6268:2:42","nodeType":"YulLiteral","src":"6268:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6253:3:42","nodeType":"YulIdentifier","src":"6253:3:42"},"nativeSrc":"6253:18:42","nodeType":"YulFunctionCall","src":"6253:18:42"},{"name":"length","nativeSrc":"6273:6:42","nodeType":"YulIdentifier","src":"6273:6:42"}],"functionName":{"name":"mstore","nativeSrc":"6246:6:42","nodeType":"YulIdentifier","src":"6246:6:42"},"nativeSrc":"6246:34:42","nodeType":"YulFunctionCall","src":"6246:34:42"},"nativeSrc":"6246:34:42","nodeType":"YulExpressionStatement","src":"6246:34:42"},{"nativeSrc":"6289:10:42","nodeType":"YulVariableDeclaration","src":"6289:10:42","value":{"kind":"number","nativeSrc":"6298:1:42","nodeType":"YulLiteral","src":"6298:1:42","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6293:1:42","nodeType":"YulTypedName","src":"6293:1:42","type":""}]},{"body":{"nativeSrc":"6360:92:42","nodeType":"YulBlock","src":"6360:92:42","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6389:9:42","nodeType":"YulIdentifier","src":"6389:9:42"},{"name":"i","nativeSrc":"6400:1:42","nodeType":"YulIdentifier","src":"6400:1:42"}],"functionName":{"name":"add","nativeSrc":"6385:3:42","nodeType":"YulIdentifier","src":"6385:3:42"},"nativeSrc":"6385:17:42","nodeType":"YulFunctionCall","src":"6385:17:42"},{"kind":"number","nativeSrc":"6404:2:42","nodeType":"YulLiteral","src":"6404:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6381:3:42","nodeType":"YulIdentifier","src":"6381:3:42"},"nativeSrc":"6381:26:42","nodeType":"YulFunctionCall","src":"6381:26:42"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"6423:6:42","nodeType":"YulIdentifier","src":"6423:6:42"},{"name":"i","nativeSrc":"6431:1:42","nodeType":"YulIdentifier","src":"6431:1:42"}],"functionName":{"name":"add","nativeSrc":"6419:3:42","nodeType":"YulIdentifier","src":"6419:3:42"},"nativeSrc":"6419:14:42","nodeType":"YulFunctionCall","src":"6419:14:42"},{"kind":"number","nativeSrc":"6435:4:42","nodeType":"YulLiteral","src":"6435:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6415:3:42","nodeType":"YulIdentifier","src":"6415:3:42"},"nativeSrc":"6415:25:42","nodeType":"YulFunctionCall","src":"6415:25:42"}],"functionName":{"name":"mload","nativeSrc":"6409:5:42","nodeType":"YulIdentifier","src":"6409:5:42"},"nativeSrc":"6409:32:42","nodeType":"YulFunctionCall","src":"6409:32:42"}],"functionName":{"name":"mstore","nativeSrc":"6374:6:42","nodeType":"YulIdentifier","src":"6374:6:42"},"nativeSrc":"6374:68:42","nodeType":"YulFunctionCall","src":"6374:68:42"},"nativeSrc":"6374:68:42","nodeType":"YulExpressionStatement","src":"6374:68:42"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6319:1:42","nodeType":"YulIdentifier","src":"6319:1:42"},{"name":"length","nativeSrc":"6322:6:42","nodeType":"YulIdentifier","src":"6322:6:42"}],"functionName":{"name":"lt","nativeSrc":"6316:2:42","nodeType":"YulIdentifier","src":"6316:2:42"},"nativeSrc":"6316:13:42","nodeType":"YulFunctionCall","src":"6316:13:42"},"nativeSrc":"6308:144:42","nodeType":"YulForLoop","post":{"nativeSrc":"6330:21:42","nodeType":"YulBlock","src":"6330:21:42","statements":[{"nativeSrc":"6332:17:42","nodeType":"YulAssignment","src":"6332:17:42","value":{"arguments":[{"name":"i","nativeSrc":"6341:1:42","nodeType":"YulIdentifier","src":"6341:1:42"},{"kind":"number","nativeSrc":"6344:4:42","nodeType":"YulLiteral","src":"6344:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6337:3:42","nodeType":"YulIdentifier","src":"6337:3:42"},"nativeSrc":"6337:12:42","nodeType":"YulFunctionCall","src":"6337:12:42"},"variableNames":[{"name":"i","nativeSrc":"6332:1:42","nodeType":"YulIdentifier","src":"6332:1:42"}]}]},"pre":{"nativeSrc":"6312:3:42","nodeType":"YulBlock","src":"6312:3:42","statements":[]},"src":"6308:144:42"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6476:9:42","nodeType":"YulIdentifier","src":"6476:9:42"},{"name":"length","nativeSrc":"6487:6:42","nodeType":"YulIdentifier","src":"6487:6:42"}],"functionName":{"name":"add","nativeSrc":"6472:3:42","nodeType":"YulIdentifier","src":"6472:3:42"},"nativeSrc":"6472:22:42","nodeType":"YulFunctionCall","src":"6472:22:42"},{"kind":"number","nativeSrc":"6496:2:42","nodeType":"YulLiteral","src":"6496:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6468:3:42","nodeType":"YulIdentifier","src":"6468:3:42"},"nativeSrc":"6468:31:42","nodeType":"YulFunctionCall","src":"6468:31:42"},{"kind":"number","nativeSrc":"6501:1:42","nodeType":"YulLiteral","src":"6501:1:42","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6461:6:42","nodeType":"YulIdentifier","src":"6461:6:42"},"nativeSrc":"6461:42:42","nodeType":"YulFunctionCall","src":"6461:42:42"},"nativeSrc":"6461:42:42","nodeType":"YulExpressionStatement","src":"6461:42:42"},{"nativeSrc":"6512:121:42","nodeType":"YulAssignment","src":"6512:121:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6528:9:42","nodeType":"YulIdentifier","src":"6528:9:42"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"6547:6:42","nodeType":"YulIdentifier","src":"6547:6:42"},{"kind":"number","nativeSrc":"6555:2:42","nodeType":"YulLiteral","src":"6555:2:42","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6543:3:42","nodeType":"YulIdentifier","src":"6543:3:42"},"nativeSrc":"6543:15:42","nodeType":"YulFunctionCall","src":"6543:15:42"},{"kind":"number","nativeSrc":"6560:66:42","nodeType":"YulLiteral","src":"6560:66:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"6539:3:42","nodeType":"YulIdentifier","src":"6539:3:42"},"nativeSrc":"6539:88:42","nodeType":"YulFunctionCall","src":"6539:88:42"}],"functionName":{"name":"add","nativeSrc":"6524:3:42","nodeType":"YulIdentifier","src":"6524:3:42"},"nativeSrc":"6524:104:42","nodeType":"YulFunctionCall","src":"6524:104:42"},{"kind":"number","nativeSrc":"6630:2:42","nodeType":"YulLiteral","src":"6630:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6520:3:42","nodeType":"YulIdentifier","src":"6520:3:42"},"nativeSrc":"6520:113:42","nodeType":"YulFunctionCall","src":"6520:113:42"},"variableNames":[{"name":"tail","nativeSrc":"6512:4:42","nodeType":"YulIdentifier","src":"6512:4:42"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6653:9:42","nodeType":"YulIdentifier","src":"6653:9:42"},{"kind":"number","nativeSrc":"6664:4:42","nodeType":"YulLiteral","src":"6664:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6649:3:42","nodeType":"YulIdentifier","src":"6649:3:42"},"nativeSrc":"6649:20:42","nodeType":"YulFunctionCall","src":"6649:20:42"},{"name":"value1","nativeSrc":"6671:6:42","nodeType":"YulIdentifier","src":"6671:6:42"}],"functionName":{"name":"mstore","nativeSrc":"6642:6:42","nodeType":"YulIdentifier","src":"6642:6:42"},"nativeSrc":"6642:36:42","nodeType":"YulFunctionCall","src":"6642:36:42"},"nativeSrc":"6642:36:42","nodeType":"YulExpressionStatement","src":"6642:36:42"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"6023:661:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6131:9:42","nodeType":"YulTypedName","src":"6131:9:42","type":""},{"name":"value1","nativeSrc":"6142:6:42","nodeType":"YulTypedName","src":"6142:6:42","type":""},{"name":"value0","nativeSrc":"6150:6:42","nodeType":"YulTypedName","src":"6150:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6161:4:42","nodeType":"YulTypedName","src":"6161:4:42","type":""}],"src":"6023:661:42"},{"body":{"nativeSrc":"6767:177:42","nodeType":"YulBlock","src":"6767:177:42","statements":[{"body":{"nativeSrc":"6813:16:42","nodeType":"YulBlock","src":"6813:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6822:1:42","nodeType":"YulLiteral","src":"6822:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"6825:1:42","nodeType":"YulLiteral","src":"6825:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6815:6:42","nodeType":"YulIdentifier","src":"6815:6:42"},"nativeSrc":"6815:12:42","nodeType":"YulFunctionCall","src":"6815:12:42"},"nativeSrc":"6815:12:42","nodeType":"YulExpressionStatement","src":"6815:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6788:7:42","nodeType":"YulIdentifier","src":"6788:7:42"},{"name":"headStart","nativeSrc":"6797:9:42","nodeType":"YulIdentifier","src":"6797:9:42"}],"functionName":{"name":"sub","nativeSrc":"6784:3:42","nodeType":"YulIdentifier","src":"6784:3:42"},"nativeSrc":"6784:23:42","nodeType":"YulFunctionCall","src":"6784:23:42"},{"kind":"number","nativeSrc":"6809:2:42","nodeType":"YulLiteral","src":"6809:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6780:3:42","nodeType":"YulIdentifier","src":"6780:3:42"},"nativeSrc":"6780:32:42","nodeType":"YulFunctionCall","src":"6780:32:42"},"nativeSrc":"6777:52:42","nodeType":"YulIf","src":"6777:52:42"},{"nativeSrc":"6838:36:42","nodeType":"YulVariableDeclaration","src":"6838:36:42","value":{"arguments":[{"name":"headStart","nativeSrc":"6864:9:42","nodeType":"YulIdentifier","src":"6864:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"6851:12:42","nodeType":"YulIdentifier","src":"6851:12:42"},"nativeSrc":"6851:23:42","nodeType":"YulFunctionCall","src":"6851:23:42"},"variables":[{"name":"value","nativeSrc":"6842:5:42","nodeType":"YulTypedName","src":"6842:5:42","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6908:5:42","nodeType":"YulIdentifier","src":"6908:5:42"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6883:24:42","nodeType":"YulIdentifier","src":"6883:24:42"},"nativeSrc":"6883:31:42","nodeType":"YulFunctionCall","src":"6883:31:42"},"nativeSrc":"6883:31:42","nodeType":"YulExpressionStatement","src":"6883:31:42"},{"nativeSrc":"6923:15:42","nodeType":"YulAssignment","src":"6923:15:42","value":{"name":"value","nativeSrc":"6933:5:42","nodeType":"YulIdentifier","src":"6933:5:42"},"variableNames":[{"name":"value0","nativeSrc":"6923:6:42","nodeType":"YulIdentifier","src":"6923:6:42"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"6689:255:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6733:9:42","nodeType":"YulTypedName","src":"6733:9:42","type":""},{"name":"dataEnd","nativeSrc":"6744:7:42","nodeType":"YulTypedName","src":"6744:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6756:6:42","nodeType":"YulTypedName","src":"6756:6:42","type":""}],"src":"6689:255:42"},{"body":{"nativeSrc":"7078:119:42","nodeType":"YulBlock","src":"7078:119:42","statements":[{"nativeSrc":"7088:26:42","nodeType":"YulAssignment","src":"7088:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"7100:9:42","nodeType":"YulIdentifier","src":"7100:9:42"},{"kind":"number","nativeSrc":"7111:2:42","nodeType":"YulLiteral","src":"7111:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7096:3:42","nodeType":"YulIdentifier","src":"7096:3:42"},"nativeSrc":"7096:18:42","nodeType":"YulFunctionCall","src":"7096:18:42"},"variableNames":[{"name":"tail","nativeSrc":"7088:4:42","nodeType":"YulIdentifier","src":"7088:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7130:9:42","nodeType":"YulIdentifier","src":"7130:9:42"},{"name":"value0","nativeSrc":"7141:6:42","nodeType":"YulIdentifier","src":"7141:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7123:6:42","nodeType":"YulIdentifier","src":"7123:6:42"},"nativeSrc":"7123:25:42","nodeType":"YulFunctionCall","src":"7123:25:42"},"nativeSrc":"7123:25:42","nodeType":"YulExpressionStatement","src":"7123:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7168:9:42","nodeType":"YulIdentifier","src":"7168:9:42"},{"kind":"number","nativeSrc":"7179:2:42","nodeType":"YulLiteral","src":"7179:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7164:3:42","nodeType":"YulIdentifier","src":"7164:3:42"},"nativeSrc":"7164:18:42","nodeType":"YulFunctionCall","src":"7164:18:42"},{"name":"value1","nativeSrc":"7184:6:42","nodeType":"YulIdentifier","src":"7184:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7157:6:42","nodeType":"YulIdentifier","src":"7157:6:42"},"nativeSrc":"7157:34:42","nodeType":"YulFunctionCall","src":"7157:34:42"},"nativeSrc":"7157:34:42","nodeType":"YulExpressionStatement","src":"7157:34:42"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"6949:248:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7039:9:42","nodeType":"YulTypedName","src":"7039:9:42","type":""},{"name":"value1","nativeSrc":"7050:6:42","nodeType":"YulTypedName","src":"7050:6:42","type":""},{"name":"value0","nativeSrc":"7058:6:42","nodeType":"YulTypedName","src":"7058:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7069:4:42","nodeType":"YulTypedName","src":"7069:4:42","type":""}],"src":"6949:248:42"},{"body":{"nativeSrc":"7240:74:42","nodeType":"YulBlock","src":"7240:74:42","statements":[{"body":{"nativeSrc":"7263:22:42","nodeType":"YulBlock","src":"7263:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"7265:16:42","nodeType":"YulIdentifier","src":"7265:16:42"},"nativeSrc":"7265:18:42","nodeType":"YulFunctionCall","src":"7265:18:42"},"nativeSrc":"7265:18:42","nodeType":"YulExpressionStatement","src":"7265:18:42"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"7260:1:42","nodeType":"YulIdentifier","src":"7260:1:42"}],"functionName":{"name":"iszero","nativeSrc":"7253:6:42","nodeType":"YulIdentifier","src":"7253:6:42"},"nativeSrc":"7253:9:42","nodeType":"YulFunctionCall","src":"7253:9:42"},"nativeSrc":"7250:35:42","nodeType":"YulIf","src":"7250:35:42"},{"nativeSrc":"7294:14:42","nodeType":"YulAssignment","src":"7294:14:42","value":{"arguments":[{"name":"x","nativeSrc":"7303:1:42","nodeType":"YulIdentifier","src":"7303:1:42"},{"name":"y","nativeSrc":"7306:1:42","nodeType":"YulIdentifier","src":"7306:1:42"}],"functionName":{"name":"mod","nativeSrc":"7299:3:42","nodeType":"YulIdentifier","src":"7299:3:42"},"nativeSrc":"7299:9:42","nodeType":"YulFunctionCall","src":"7299:9:42"},"variableNames":[{"name":"r","nativeSrc":"7294:1:42","nodeType":"YulIdentifier","src":"7294:1:42"}]}]},"name":"mod_t_uint256","nativeSrc":"7202:112:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7225:1:42","nodeType":"YulTypedName","src":"7225:1:42","type":""},{"name":"y","nativeSrc":"7228:1:42","nodeType":"YulTypedName","src":"7228:1:42","type":""}],"returnVariables":[{"name":"r","nativeSrc":"7234:1:42","nodeType":"YulTypedName","src":"7234:1:42","type":""}],"src":"7202:112:42"},{"body":{"nativeSrc":"7476:162:42","nodeType":"YulBlock","src":"7476:162:42","statements":[{"nativeSrc":"7486:26:42","nodeType":"YulAssignment","src":"7486:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"7498:9:42","nodeType":"YulIdentifier","src":"7498:9:42"},{"kind":"number","nativeSrc":"7509:2:42","nodeType":"YulLiteral","src":"7509:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7494:3:42","nodeType":"YulIdentifier","src":"7494:3:42"},"nativeSrc":"7494:18:42","nodeType":"YulFunctionCall","src":"7494:18:42"},"variableNames":[{"name":"tail","nativeSrc":"7486:4:42","nodeType":"YulIdentifier","src":"7486:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7528:9:42","nodeType":"YulIdentifier","src":"7528:9:42"},{"name":"value0","nativeSrc":"7539:6:42","nodeType":"YulIdentifier","src":"7539:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7521:6:42","nodeType":"YulIdentifier","src":"7521:6:42"},"nativeSrc":"7521:25:42","nodeType":"YulFunctionCall","src":"7521:25:42"},"nativeSrc":"7521:25:42","nodeType":"YulExpressionStatement","src":"7521:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7566:9:42","nodeType":"YulIdentifier","src":"7566:9:42"},{"kind":"number","nativeSrc":"7577:2:42","nodeType":"YulLiteral","src":"7577:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7562:3:42","nodeType":"YulIdentifier","src":"7562:3:42"},"nativeSrc":"7562:18:42","nodeType":"YulFunctionCall","src":"7562:18:42"},{"name":"value1","nativeSrc":"7582:6:42","nodeType":"YulIdentifier","src":"7582:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7555:6:42","nodeType":"YulIdentifier","src":"7555:6:42"},"nativeSrc":"7555:34:42","nodeType":"YulFunctionCall","src":"7555:34:42"},"nativeSrc":"7555:34:42","nodeType":"YulExpressionStatement","src":"7555:34:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7609:9:42","nodeType":"YulIdentifier","src":"7609:9:42"},{"kind":"number","nativeSrc":"7620:2:42","nodeType":"YulLiteral","src":"7620:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7605:3:42","nodeType":"YulIdentifier","src":"7605:3:42"},"nativeSrc":"7605:18:42","nodeType":"YulFunctionCall","src":"7605:18:42"},{"name":"value2","nativeSrc":"7625:6:42","nodeType":"YulIdentifier","src":"7625:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7598:6:42","nodeType":"YulIdentifier","src":"7598:6:42"},"nativeSrc":"7598:34:42","nodeType":"YulFunctionCall","src":"7598:34:42"},"nativeSrc":"7598:34:42","nodeType":"YulExpressionStatement","src":"7598:34:42"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7319:319:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7429:9:42","nodeType":"YulTypedName","src":"7429:9:42","type":""},{"name":"value2","nativeSrc":"7440:6:42","nodeType":"YulTypedName","src":"7440:6:42","type":""},{"name":"value1","nativeSrc":"7448:6:42","nodeType":"YulTypedName","src":"7448:6:42","type":""},{"name":"value0","nativeSrc":"7456:6:42","nodeType":"YulTypedName","src":"7456:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7467:4:42","nodeType":"YulTypedName","src":"7467:4:42","type":""}],"src":"7319:319:42"},{"body":{"nativeSrc":"7800:260:42","nodeType":"YulBlock","src":"7800:260:42","statements":[{"nativeSrc":"7810:26:42","nodeType":"YulAssignment","src":"7810:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"7822:9:42","nodeType":"YulIdentifier","src":"7822:9:42"},{"kind":"number","nativeSrc":"7833:2:42","nodeType":"YulLiteral","src":"7833:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7818:3:42","nodeType":"YulIdentifier","src":"7818:3:42"},"nativeSrc":"7818:18:42","nodeType":"YulFunctionCall","src":"7818:18:42"},"variableNames":[{"name":"tail","nativeSrc":"7810:4:42","nodeType":"YulIdentifier","src":"7810:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7852:9:42","nodeType":"YulIdentifier","src":"7852:9:42"},{"name":"value0","nativeSrc":"7863:6:42","nodeType":"YulIdentifier","src":"7863:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7845:6:42","nodeType":"YulIdentifier","src":"7845:6:42"},"nativeSrc":"7845:25:42","nodeType":"YulFunctionCall","src":"7845:25:42"},"nativeSrc":"7845:25:42","nodeType":"YulExpressionStatement","src":"7845:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7890:9:42","nodeType":"YulIdentifier","src":"7890:9:42"},{"kind":"number","nativeSrc":"7901:2:42","nodeType":"YulLiteral","src":"7901:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7886:3:42","nodeType":"YulIdentifier","src":"7886:3:42"},"nativeSrc":"7886:18:42","nodeType":"YulFunctionCall","src":"7886:18:42"},{"arguments":[{"name":"value1","nativeSrc":"7910:6:42","nodeType":"YulIdentifier","src":"7910:6:42"},{"kind":"number","nativeSrc":"7918:42:42","nodeType":"YulLiteral","src":"7918:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7906:3:42","nodeType":"YulIdentifier","src":"7906:3:42"},"nativeSrc":"7906:55:42","nodeType":"YulFunctionCall","src":"7906:55:42"}],"functionName":{"name":"mstore","nativeSrc":"7879:6:42","nodeType":"YulIdentifier","src":"7879:6:42"},"nativeSrc":"7879:83:42","nodeType":"YulFunctionCall","src":"7879:83:42"},"nativeSrc":"7879:83:42","nodeType":"YulExpressionStatement","src":"7879:83:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7982:9:42","nodeType":"YulIdentifier","src":"7982:9:42"},{"kind":"number","nativeSrc":"7993:2:42","nodeType":"YulLiteral","src":"7993:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7978:3:42","nodeType":"YulIdentifier","src":"7978:3:42"},"nativeSrc":"7978:18:42","nodeType":"YulFunctionCall","src":"7978:18:42"},{"arguments":[{"name":"value2","nativeSrc":"8002:6:42","nodeType":"YulIdentifier","src":"8002:6:42"},{"kind":"number","nativeSrc":"8010:42:42","nodeType":"YulLiteral","src":"8010:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7998:3:42","nodeType":"YulIdentifier","src":"7998:3:42"},"nativeSrc":"7998:55:42","nodeType":"YulFunctionCall","src":"7998:55:42"}],"functionName":{"name":"mstore","nativeSrc":"7971:6:42","nodeType":"YulIdentifier","src":"7971:6:42"},"nativeSrc":"7971:83:42","nodeType":"YulFunctionCall","src":"7971:83:42"},"nativeSrc":"7971:83:42","nodeType":"YulExpressionStatement","src":"7971:83:42"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"7643:417:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7753:9:42","nodeType":"YulTypedName","src":"7753:9:42","type":""},{"name":"value2","nativeSrc":"7764:6:42","nodeType":"YulTypedName","src":"7764:6:42","type":""},{"name":"value1","nativeSrc":"7772:6:42","nodeType":"YulTypedName","src":"7772:6:42","type":""},{"name":"value0","nativeSrc":"7780:6:42","nodeType":"YulTypedName","src":"7780:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7791:4:42","nodeType":"YulTypedName","src":"7791:4:42","type":""}],"src":"7643:417:42"},{"body":{"nativeSrc":"8194:168:42","nodeType":"YulBlock","src":"8194:168:42","statements":[{"nativeSrc":"8204:26:42","nodeType":"YulAssignment","src":"8204:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"8216:9:42","nodeType":"YulIdentifier","src":"8216:9:42"},{"kind":"number","nativeSrc":"8227:2:42","nodeType":"YulLiteral","src":"8227:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8212:3:42","nodeType":"YulIdentifier","src":"8212:3:42"},"nativeSrc":"8212:18:42","nodeType":"YulFunctionCall","src":"8212:18:42"},"variableNames":[{"name":"tail","nativeSrc":"8204:4:42","nodeType":"YulIdentifier","src":"8204:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8246:9:42","nodeType":"YulIdentifier","src":"8246:9:42"},{"name":"value0","nativeSrc":"8257:6:42","nodeType":"YulIdentifier","src":"8257:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8239:6:42","nodeType":"YulIdentifier","src":"8239:6:42"},"nativeSrc":"8239:25:42","nodeType":"YulFunctionCall","src":"8239:25:42"},"nativeSrc":"8239:25:42","nodeType":"YulExpressionStatement","src":"8239:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8284:9:42","nodeType":"YulIdentifier","src":"8284:9:42"},{"kind":"number","nativeSrc":"8295:2:42","nodeType":"YulLiteral","src":"8295:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8280:3:42","nodeType":"YulIdentifier","src":"8280:3:42"},"nativeSrc":"8280:18:42","nodeType":"YulFunctionCall","src":"8280:18:42"},{"arguments":[{"name":"value1","nativeSrc":"8304:6:42","nodeType":"YulIdentifier","src":"8304:6:42"},{"kind":"number","nativeSrc":"8312:42:42","nodeType":"YulLiteral","src":"8312:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8300:3:42","nodeType":"YulIdentifier","src":"8300:3:42"},"nativeSrc":"8300:55:42","nodeType":"YulFunctionCall","src":"8300:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8273:6:42","nodeType":"YulIdentifier","src":"8273:6:42"},"nativeSrc":"8273:83:42","nodeType":"YulFunctionCall","src":"8273:83:42"},"nativeSrc":"8273:83:42","nodeType":"YulExpressionStatement","src":"8273:83:42"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"8065:297:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8155:9:42","nodeType":"YulTypedName","src":"8155:9:42","type":""},{"name":"value1","nativeSrc":"8166:6:42","nodeType":"YulTypedName","src":"8166:6:42","type":""},{"name":"value0","nativeSrc":"8174:6:42","nodeType":"YulTypedName","src":"8174:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8185:4:42","nodeType":"YulTypedName","src":"8185:4:42","type":""}],"src":"8065:297:42"},{"body":{"nativeSrc":"8524:309:42","nodeType":"YulBlock","src":"8524:309:42","statements":[{"nativeSrc":"8534:26:42","nodeType":"YulAssignment","src":"8534:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"8546:9:42","nodeType":"YulIdentifier","src":"8546:9:42"},{"kind":"number","nativeSrc":"8557:2:42","nodeType":"YulLiteral","src":"8557:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8542:3:42","nodeType":"YulIdentifier","src":"8542:3:42"},"nativeSrc":"8542:18:42","nodeType":"YulFunctionCall","src":"8542:18:42"},"variableNames":[{"name":"tail","nativeSrc":"8534:4:42","nodeType":"YulIdentifier","src":"8534:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8576:9:42","nodeType":"YulIdentifier","src":"8576:9:42"},{"arguments":[{"name":"value0","nativeSrc":"8591:6:42","nodeType":"YulIdentifier","src":"8591:6:42"},{"kind":"number","nativeSrc":"8599:42:42","nodeType":"YulLiteral","src":"8599:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8587:3:42","nodeType":"YulIdentifier","src":"8587:3:42"},"nativeSrc":"8587:55:42","nodeType":"YulFunctionCall","src":"8587:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8569:6:42","nodeType":"YulIdentifier","src":"8569:6:42"},"nativeSrc":"8569:74:42","nodeType":"YulFunctionCall","src":"8569:74:42"},"nativeSrc":"8569:74:42","nodeType":"YulExpressionStatement","src":"8569:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8663:9:42","nodeType":"YulIdentifier","src":"8663:9:42"},{"kind":"number","nativeSrc":"8674:2:42","nodeType":"YulLiteral","src":"8674:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8659:3:42","nodeType":"YulIdentifier","src":"8659:3:42"},"nativeSrc":"8659:18:42","nodeType":"YulFunctionCall","src":"8659:18:42"},{"arguments":[{"name":"value1","nativeSrc":"8683:6:42","nodeType":"YulIdentifier","src":"8683:6:42"},{"kind":"number","nativeSrc":"8691:42:42","nodeType":"YulLiteral","src":"8691:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8679:3:42","nodeType":"YulIdentifier","src":"8679:3:42"},"nativeSrc":"8679:55:42","nodeType":"YulFunctionCall","src":"8679:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8652:6:42","nodeType":"YulIdentifier","src":"8652:6:42"},"nativeSrc":"8652:83:42","nodeType":"YulFunctionCall","src":"8652:83:42"},"nativeSrc":"8652:83:42","nodeType":"YulExpressionStatement","src":"8652:83:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8755:9:42","nodeType":"YulIdentifier","src":"8755:9:42"},{"kind":"number","nativeSrc":"8766:2:42","nodeType":"YulLiteral","src":"8766:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8751:3:42","nodeType":"YulIdentifier","src":"8751:3:42"},"nativeSrc":"8751:18:42","nodeType":"YulFunctionCall","src":"8751:18:42"},{"arguments":[{"name":"value2","nativeSrc":"8775:6:42","nodeType":"YulIdentifier","src":"8775:6:42"},{"kind":"number","nativeSrc":"8783:42:42","nodeType":"YulLiteral","src":"8783:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8771:3:42","nodeType":"YulIdentifier","src":"8771:3:42"},"nativeSrc":"8771:55:42","nodeType":"YulFunctionCall","src":"8771:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8744:6:42","nodeType":"YulIdentifier","src":"8744:6:42"},"nativeSrc":"8744:83:42","nodeType":"YulFunctionCall","src":"8744:83:42"},"nativeSrc":"8744:83:42","nodeType":"YulExpressionStatement","src":"8744:83:42"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"8367:466:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8477:9:42","nodeType":"YulTypedName","src":"8477:9:42","type":""},{"name":"value2","nativeSrc":"8488:6:42","nodeType":"YulTypedName","src":"8488:6:42","type":""},{"name":"value1","nativeSrc":"8496:6:42","nodeType":"YulTypedName","src":"8496:6:42","type":""},{"name":"value0","nativeSrc":"8504:6:42","nodeType":"YulTypedName","src":"8504:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8515:4:42","nodeType":"YulTypedName","src":"8515:4:42","type":""}],"src":"8367:466:42"},{"body":{"nativeSrc":"8916:199:42","nodeType":"YulBlock","src":"8916:199:42","statements":[{"body":{"nativeSrc":"8962:16:42","nodeType":"YulBlock","src":"8962:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8971:1:42","nodeType":"YulLiteral","src":"8971:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"8974:1:42","nodeType":"YulLiteral","src":"8974:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8964:6:42","nodeType":"YulIdentifier","src":"8964:6:42"},"nativeSrc":"8964:12:42","nodeType":"YulFunctionCall","src":"8964:12:42"},"nativeSrc":"8964:12:42","nodeType":"YulExpressionStatement","src":"8964:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8937:7:42","nodeType":"YulIdentifier","src":"8937:7:42"},{"name":"headStart","nativeSrc":"8946:9:42","nodeType":"YulIdentifier","src":"8946:9:42"}],"functionName":{"name":"sub","nativeSrc":"8933:3:42","nodeType":"YulIdentifier","src":"8933:3:42"},"nativeSrc":"8933:23:42","nodeType":"YulFunctionCall","src":"8933:23:42"},{"kind":"number","nativeSrc":"8958:2:42","nodeType":"YulLiteral","src":"8958:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8929:3:42","nodeType":"YulIdentifier","src":"8929:3:42"},"nativeSrc":"8929:32:42","nodeType":"YulFunctionCall","src":"8929:32:42"},"nativeSrc":"8926:52:42","nodeType":"YulIf","src":"8926:52:42"},{"nativeSrc":"8987:29:42","nodeType":"YulVariableDeclaration","src":"8987:29:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9006:9:42","nodeType":"YulIdentifier","src":"9006:9:42"}],"functionName":{"name":"mload","nativeSrc":"9000:5:42","nodeType":"YulIdentifier","src":"9000:5:42"},"nativeSrc":"9000:16:42","nodeType":"YulFunctionCall","src":"9000:16:42"},"variables":[{"name":"value","nativeSrc":"8991:5:42","nodeType":"YulTypedName","src":"8991:5:42","type":""}]},{"body":{"nativeSrc":"9069:16:42","nodeType":"YulBlock","src":"9069:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9078:1:42","nodeType":"YulLiteral","src":"9078:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"9081:1:42","nodeType":"YulLiteral","src":"9081:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9071:6:42","nodeType":"YulIdentifier","src":"9071:6:42"},"nativeSrc":"9071:12:42","nodeType":"YulFunctionCall","src":"9071:12:42"},"nativeSrc":"9071:12:42","nodeType":"YulExpressionStatement","src":"9071:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9038:5:42","nodeType":"YulIdentifier","src":"9038:5:42"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9059:5:42","nodeType":"YulIdentifier","src":"9059:5:42"}],"functionName":{"name":"iszero","nativeSrc":"9052:6:42","nodeType":"YulIdentifier","src":"9052:6:42"},"nativeSrc":"9052:13:42","nodeType":"YulFunctionCall","src":"9052:13:42"}],"functionName":{"name":"iszero","nativeSrc":"9045:6:42","nodeType":"YulIdentifier","src":"9045:6:42"},"nativeSrc":"9045:21:42","nodeType":"YulFunctionCall","src":"9045:21:42"}],"functionName":{"name":"eq","nativeSrc":"9035:2:42","nodeType":"YulIdentifier","src":"9035:2:42"},"nativeSrc":"9035:32:42","nodeType":"YulFunctionCall","src":"9035:32:42"}],"functionName":{"name":"iszero","nativeSrc":"9028:6:42","nodeType":"YulIdentifier","src":"9028:6:42"},"nativeSrc":"9028:40:42","nodeType":"YulFunctionCall","src":"9028:40:42"},"nativeSrc":"9025:60:42","nodeType":"YulIf","src":"9025:60:42"},{"nativeSrc":"9094:15:42","nodeType":"YulAssignment","src":"9094:15:42","value":{"name":"value","nativeSrc":"9104:5:42","nodeType":"YulIdentifier","src":"9104:5:42"},"variableNames":[{"name":"value0","nativeSrc":"9094:6:42","nodeType":"YulIdentifier","src":"9094:6:42"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"8838:277:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8882:9:42","nodeType":"YulTypedName","src":"8882:9:42","type":""},{"name":"dataEnd","nativeSrc":"8893:7:42","nodeType":"YulTypedName","src":"8893:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8905:6:42","nodeType":"YulTypedName","src":"8905:6:42","type":""}],"src":"8838:277:42"},{"body":{"nativeSrc":"9201:103:42","nodeType":"YulBlock","src":"9201:103:42","statements":[{"body":{"nativeSrc":"9247:16:42","nodeType":"YulBlock","src":"9247:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9256:1:42","nodeType":"YulLiteral","src":"9256:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"9259:1:42","nodeType":"YulLiteral","src":"9259:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9249:6:42","nodeType":"YulIdentifier","src":"9249:6:42"},"nativeSrc":"9249:12:42","nodeType":"YulFunctionCall","src":"9249:12:42"},"nativeSrc":"9249:12:42","nodeType":"YulExpressionStatement","src":"9249:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9222:7:42","nodeType":"YulIdentifier","src":"9222:7:42"},{"name":"headStart","nativeSrc":"9231:9:42","nodeType":"YulIdentifier","src":"9231:9:42"}],"functionName":{"name":"sub","nativeSrc":"9218:3:42","nodeType":"YulIdentifier","src":"9218:3:42"},"nativeSrc":"9218:23:42","nodeType":"YulFunctionCall","src":"9218:23:42"},{"kind":"number","nativeSrc":"9243:2:42","nodeType":"YulLiteral","src":"9243:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9214:3:42","nodeType":"YulIdentifier","src":"9214:3:42"},"nativeSrc":"9214:32:42","nodeType":"YulFunctionCall","src":"9214:32:42"},"nativeSrc":"9211:52:42","nodeType":"YulIf","src":"9211:52:42"},{"nativeSrc":"9272:26:42","nodeType":"YulAssignment","src":"9272:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9288:9:42","nodeType":"YulIdentifier","src":"9288:9:42"}],"functionName":{"name":"mload","nativeSrc":"9282:5:42","nodeType":"YulIdentifier","src":"9282:5:42"},"nativeSrc":"9282:16:42","nodeType":"YulFunctionCall","src":"9282:16:42"},"variableNames":[{"name":"value0","nativeSrc":"9272:6:42","nodeType":"YulIdentifier","src":"9272:6:42"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"9120:184:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9167:9:42","nodeType":"YulTypedName","src":"9167:9:42","type":""},{"name":"dataEnd","nativeSrc":"9178:7:42","nodeType":"YulTypedName","src":"9178:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9190:6:42","nodeType":"YulTypedName","src":"9190:6:42","type":""}],"src":"9120:184:42"},{"body":{"nativeSrc":"9466:211:42","nodeType":"YulBlock","src":"9466:211:42","statements":[{"nativeSrc":"9476:26:42","nodeType":"YulAssignment","src":"9476:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9488:9:42","nodeType":"YulIdentifier","src":"9488:9:42"},{"kind":"number","nativeSrc":"9499:2:42","nodeType":"YulLiteral","src":"9499:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9484:3:42","nodeType":"YulIdentifier","src":"9484:3:42"},"nativeSrc":"9484:18:42","nodeType":"YulFunctionCall","src":"9484:18:42"},"variableNames":[{"name":"tail","nativeSrc":"9476:4:42","nodeType":"YulIdentifier","src":"9476:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9518:9:42","nodeType":"YulIdentifier","src":"9518:9:42"},{"arguments":[{"name":"value0","nativeSrc":"9533:6:42","nodeType":"YulIdentifier","src":"9533:6:42"},{"kind":"number","nativeSrc":"9541:42:42","nodeType":"YulLiteral","src":"9541:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9529:3:42","nodeType":"YulIdentifier","src":"9529:3:42"},"nativeSrc":"9529:55:42","nodeType":"YulFunctionCall","src":"9529:55:42"}],"functionName":{"name":"mstore","nativeSrc":"9511:6:42","nodeType":"YulIdentifier","src":"9511:6:42"},"nativeSrc":"9511:74:42","nodeType":"YulFunctionCall","src":"9511:74:42"},"nativeSrc":"9511:74:42","nodeType":"YulExpressionStatement","src":"9511:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9605:9:42","nodeType":"YulIdentifier","src":"9605:9:42"},{"kind":"number","nativeSrc":"9616:2:42","nodeType":"YulLiteral","src":"9616:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9601:3:42","nodeType":"YulIdentifier","src":"9601:3:42"},"nativeSrc":"9601:18:42","nodeType":"YulFunctionCall","src":"9601:18:42"},{"name":"value1","nativeSrc":"9621:6:42","nodeType":"YulIdentifier","src":"9621:6:42"}],"functionName":{"name":"mstore","nativeSrc":"9594:6:42","nodeType":"YulIdentifier","src":"9594:6:42"},"nativeSrc":"9594:34:42","nodeType":"YulFunctionCall","src":"9594:34:42"},"nativeSrc":"9594:34:42","nodeType":"YulExpressionStatement","src":"9594:34:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9648:9:42","nodeType":"YulIdentifier","src":"9648:9:42"},{"kind":"number","nativeSrc":"9659:2:42","nodeType":"YulLiteral","src":"9659:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9644:3:42","nodeType":"YulIdentifier","src":"9644:3:42"},"nativeSrc":"9644:18:42","nodeType":"YulFunctionCall","src":"9644:18:42"},{"name":"value2","nativeSrc":"9664:6:42","nodeType":"YulIdentifier","src":"9664:6:42"}],"functionName":{"name":"mstore","nativeSrc":"9637:6:42","nodeType":"YulIdentifier","src":"9637:6:42"},"nativeSrc":"9637:34:42","nodeType":"YulFunctionCall","src":"9637:34:42"},"nativeSrc":"9637:34:42","nodeType":"YulExpressionStatement","src":"9637:34:42"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"9309:368:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9419:9:42","nodeType":"YulTypedName","src":"9419:9:42","type":""},{"name":"value2","nativeSrc":"9430:6:42","nodeType":"YulTypedName","src":"9430:6:42","type":""},{"name":"value1","nativeSrc":"9438:6:42","nodeType":"YulTypedName","src":"9438:6:42","type":""},{"name":"value0","nativeSrc":"9446:6:42","nodeType":"YulTypedName","src":"9446:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9457:4:42","nodeType":"YulTypedName","src":"9457:4:42","type":""}],"src":"9309:368:42"},{"body":{"nativeSrc":"9811:168:42","nodeType":"YulBlock","src":"9811:168:42","statements":[{"nativeSrc":"9821:26:42","nodeType":"YulAssignment","src":"9821:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9833:9:42","nodeType":"YulIdentifier","src":"9833:9:42"},{"kind":"number","nativeSrc":"9844:2:42","nodeType":"YulLiteral","src":"9844:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9829:3:42","nodeType":"YulIdentifier","src":"9829:3:42"},"nativeSrc":"9829:18:42","nodeType":"YulFunctionCall","src":"9829:18:42"},"variableNames":[{"name":"tail","nativeSrc":"9821:4:42","nodeType":"YulIdentifier","src":"9821:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9863:9:42","nodeType":"YulIdentifier","src":"9863:9:42"},{"arguments":[{"name":"value0","nativeSrc":"9878:6:42","nodeType":"YulIdentifier","src":"9878:6:42"},{"kind":"number","nativeSrc":"9886:42:42","nodeType":"YulLiteral","src":"9886:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9874:3:42","nodeType":"YulIdentifier","src":"9874:3:42"},"nativeSrc":"9874:55:42","nodeType":"YulFunctionCall","src":"9874:55:42"}],"functionName":{"name":"mstore","nativeSrc":"9856:6:42","nodeType":"YulIdentifier","src":"9856:6:42"},"nativeSrc":"9856:74:42","nodeType":"YulFunctionCall","src":"9856:74:42"},"nativeSrc":"9856:74:42","nodeType":"YulExpressionStatement","src":"9856:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9950:9:42","nodeType":"YulIdentifier","src":"9950:9:42"},{"kind":"number","nativeSrc":"9961:2:42","nodeType":"YulLiteral","src":"9961:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9946:3:42","nodeType":"YulIdentifier","src":"9946:3:42"},"nativeSrc":"9946:18:42","nodeType":"YulFunctionCall","src":"9946:18:42"},{"name":"value1","nativeSrc":"9966:6:42","nodeType":"YulIdentifier","src":"9966:6:42"}],"functionName":{"name":"mstore","nativeSrc":"9939:6:42","nodeType":"YulIdentifier","src":"9939:6:42"},"nativeSrc":"9939:34:42","nodeType":"YulFunctionCall","src":"9939:34:42"},"nativeSrc":"9939:34:42","nodeType":"YulExpressionStatement","src":"9939:34:42"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"9682:297:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9772:9:42","nodeType":"YulTypedName","src":"9772:9:42","type":""},{"name":"value1","nativeSrc":"9783:6:42","nodeType":"YulTypedName","src":"9783:6:42","type":""},{"name":"value0","nativeSrc":"9791:6:42","nodeType":"YulTypedName","src":"9791:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9802:4:42","nodeType":"YulTypedName","src":"9802:4:42","type":""}],"src":"9682:297:42"}]},"contents":"{\n    { }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        let value_2 := 0\n        value_2 := calldataload(add(headStart, 64))\n        value2 := value_2\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let length := mload(value0)\n        mstore(add(headStart, 64), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(add(headStart, i), 96), mload(add(add(value0, i), 0x20)))\n        }\n        mstore(add(add(headStart, length), 96), 0)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n        mstore(add(headStart, 0x20), value1)\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n}","id":42,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1058":[{"length":32,"start":810},{"length":32,"start":1101},{"length":32,"start":5829},{"length":32,"start":5971}],"1985":[{"length":32,"start":593},{"length":32,"start":2343},{"length":32,"start":6145}],"3073":[{"length":32,"start":1180},{"length":32,"start":2432}],"3287":[{"length":32,"start":904},{"length":32,"start":6366}],"3289":[{"length":32,"start":761},{"length":32,"start":6325}]},"linkReferences":{},"object":"6080604052600436106101d75760003560e01c806375c93bb91161010257806398807d8411610095578063d547741f11610064578063d547741f14610621578063ef4cadc514610641578063efa90b541461065d578063f2fde38b1461067357600080fd5b806398807d841461059b5780639d696e36146105c8578063c5c8f770146105de578063d0b06f5d1461060b57600080fd5b80638580cf76116100d15780638580cf76146105125780638bb9c5bf146105465780638da5cb5b1461056657806391d148541461057b57600080fd5b806375c93bb9146104be5780637b0a47ee146104d157806380faa57d146104e7578063817b1cd2146104fc57600080fd5b80632c9d0b801161017a5780634e71d92d116101495780634e71d92d146103ca5780634fc35859146103df578063572b6c051461043057806362ba90961461048a57600080fd5b80632c9d0b801461034e5780632d1e0c02146103635780632d4c2f93146103765780632f2ff15d146103aa57600080fd5b80630700037d116101b65780630700037d146102985780630968f264146102c55780632196e445146102e75780632b4c9f161461031b57600080fd5b80628cc262146101dc57806301ffc9a71461020f5780630479d6441461023f575b600080fd5b3480156101e857600080fd5b506101fc6101f7366004611aa4565b610693565b6040519081526020015b60405180910390f35b34801561021b57600080fd5b5061022f61022a366004611ac1565b61072a565b6040519015158152602001610206565b34801561024b57600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b3480156102a457600080fd5b506101fc6102b3366004611aa4565b60076020526000908152604090205481565b3480156102d157600080fd5b506102e56102e0366004611b4c565b61073e565b005b3480156102f357600080fd5b506101fc7f000000000000000000000000000000000000000000000000000000000000000081565b34801561032757600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610273565b34801561035a57600080fd5b506101fc610789565b6102e5610371366004611b4c565b6107f1565b34801561038257600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b3480156103b657600080fd5b506102e56103c5366004611b8e565b610823565b3480156103d657600080fd5b506102e561085c565b3480156103eb57600080fd5b506103ff6103fa366004611bbe565b61090d565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610206565b34801561043c57600080fd5b5061022f61044b366004611aa4565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b34801561049657600080fd5b506102737f000000000000000000000000000000000000000000000000000000000000000081565b6102e56104cc366004611c31565b610a8b565b3480156104dd57600080fd5b506101fc60035481565b3480156104f357600080fd5b506101fc610d60565b34801561050857600080fd5b506101fc60015481565b34801561051e57600080fd5b506101fc7f726577617264657200000000000000000000000000000000000000000000000081565b34801561055257600080fd5b506102e5610561366004611c53565b610d7a565b34801561057257600080fd5b50610273610d98565b34801561058757600080fd5b5061022f610596366004611b8e565b610dc4565b3480156105a757600080fd5b506101fc6105b6366004611aa4565b60066020526000908152604090205481565b3480156105d457600080fd5b506101fc60045481565b3480156105ea57600080fd5b506101fc6105f9366004611aa4565b60086020526000908152604090205481565b34801561061757600080fd5b506101fc60025481565b34801561062d57600080fd5b506102e561063c366004611b8e565b610e0f565b34801561064d57600080fd5b506101fc670de0b6b3a764000081565b34801561066957600080fd5b506101fc60055481565b34801561067f57600080fd5b506102e561068e366004611aa4565b610e3d565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a7640000906106d6610789565b6106e09190611c9b565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546107109190611cae565b61071a9190611cf4565b6107249190611d08565b92915050565b600061072482610738610e58565b90610e86565b610785610749610f60565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f6a92505050565b5050565b60015460009080820361079e57505060045490565b80670de0b6b3a76400006003546002546107b6610d60565b6107c09190611c9b565b6107ca9190611cae565b6107d49190611cae565b6107de9190611cf4565b6004546107eb9190611d08565b91505090565b6040517f7a404b1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061082d610f60565b90506108418161083b611056565b90611084565b61085783838361084f6110ef565b92919061111d565b505050565b6000610866610f60565b9050610871816111f4565b600061087c82610693565b905080156107855773ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081208190556108b68383611282565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd58284604051610900929190611d1b565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461097e576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16148690610a23576040517fd0411ac500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911660048201526024015b60405180910390fd5b506000610a3283850185611aa4565b9050610a5f8186604051602001610a4b91815260200190565b60405160208183030381529060405261128e565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b6000610a95610f60565b9050610acb7f726577617264657200000000000000000000000000000000000000000000000082610ac46110ef565b919061137a565b82600003610b05576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610b3f576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b4960006111f4565b60055460009081610b5a8542611d08565b9050814210610bd2576000610b6f8688611cf4565b9050868682610bb3576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b50506003819055610bc48688611d8e565b60058390559350610cfb9050565b818111610c6157610be34283611c9b565b94506000610bf18688611cf4565b9050868682610c35576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b50508060036000828254610c499190611d08565b90915550610c5990508688611d8e565b935050610cfb565b610c6b8587611cf4565b86908690610cae576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610a1a565b5060009050610cbd4284611c9b565b600354610cca9190611cae565b90506000610cd88883611d08565b9050610ce48782611cf4565b600355610cf18782611d8e565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610d7357806107eb565b4291505090565b610d95610d85610f60565b82610d8e6110ef565b9190611400565b50565b6000610dbf610da5611056565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000610e088383610dd36110ef565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b6000610e19610f60565b9050610e278161083b611056565b610857838383610e356110ef565b9291906114a4565b610d95610e48610f60565b82610e51611056565b919061156e565b60008061072460017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c9b565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610ed657506000610724565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610f2757506001610724565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610dbf611682565b610f73826111f4565b6000610f7f83836117cf565b905080600003610fbb576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610fcd9190611c9b565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290611007908490611c9b565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e8383604051610900929190611d1b565b60008061072460017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c9b565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610785576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610a1a565b60008061072460017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611c9b565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166111ee5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b6111fc610789565b60045560055442101580611211575060015415155b156112225761121e610d60565b6002555b73ffffffffffffffffffffffffffffffffffffffff811615610d955761124781610693565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b6060610e088383611828565b611297826111f4565b60006112a38383611940565b9050806000036112df576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160008282546112f19190611d08565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260408120805483929061132b908490611d08565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e8383604051610900929190611d1b565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff16610857576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610a1a565b61140b83828461137a565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156111ee5760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016111e5565b825473ffffffffffffffffffffffffffffffffffffffff90811690831681146115db576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610a1a565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146111ee5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6000333214806116925750601836105b1561169c57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806117be57506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa15801561179a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117be9190611da2565b156117c857919050565b3391505090565b6000818060200190518101906117e59190611dc4565b905061072473ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483611956565b60608160405160200161183d91815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b15801561192257600080fd5b505af1158015611936573d6000803e3d6000fd5b5050505092915050565b600081806020019051810190610e089190611dc4565b6040805173ffffffffffffffffffffffffffffffffffffffff841660248201526044808201849052825180830390910181526064909101909152602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001781528251610857938793909260009283929183919082885af180611a01576040513d6000823e3d81fd5b50506000513d91508115611a19578060011415611a33565b73ffffffffffffffffffffffffffffffffffffffff84163b155b156111ee576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610a1a565b73ffffffffffffffffffffffffffffffffffffffff81168114610d9557600080fd5b600060208284031215611ab657600080fd5b8135610e0881611a82565b600060208284031215611ad357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610e0857600080fd5b60008083601f840112611b1557600080fd5b50813567ffffffffffffffff811115611b2d57600080fd5b602083019150836020828501011115611b4557600080fd5b9250929050565b60008060208385031215611b5f57600080fd5b823567ffffffffffffffff811115611b7657600080fd5b611b8285828601611b03565b90969095509350505050565b60008060408385031215611ba157600080fd5b823591506020830135611bb381611a82565b809150509250929050565b600080600080600060808688031215611bd657600080fd5b8535611be181611a82565b94506020860135611bf181611a82565b935060408601359250606086013567ffffffffffffffff811115611c1457600080fd5b611c2088828901611b03565b969995985093965092949392505050565b60008060408385031215611c4457600080fd5b50508035926020909101359150565b600060208284031215611c6557600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561072457610724611c6c565b808202811582820484141761072457610724611c6c565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611d0357611d03611cc5565b500490565b8082018082111561072457610724611c6c565b604081526000835180604084015260005b81811015611d495760208187018101516060868401015201611d2c565b5060006060828501015260607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168401019150508260208301529392505050565b600082611d9d57611d9d611cc5565b500690565b600060208284031215611db457600080fd5b81518015158114610e0857600080fd5b600060208284031215611dd657600080fd5b505191905056fea2646970667358221220d17693abdb43543bc7dce3d7f9d9c105650aa8e3d0763e3b5fd85f19c9a6064764736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D7 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x75C93BB9 GT PUSH2 0x102 JUMPI DUP1 PUSH4 0x98807D84 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x621 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x641 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x65D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x673 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98807D84 EQ PUSH2 0x59B JUMPI DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x5C8 JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x5DE JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x60B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8580CF76 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x512 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x546 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x566 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x57B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x4BE JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x4D1 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x4E7 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x4FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 GT PUSH2 0x17A JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x149 JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x3CA JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x430 JUMPI DUP1 PUSH4 0x62BA9096 EQ PUSH2 0x48A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x34E JUMPI DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x363 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x700037D GT PUSH2 0x1B6 JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x298 JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x2C5 JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x2E7 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x31B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x20F JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x23F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x1F7 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x21B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x22A CALLDATASIZE PUSH1 0x4 PUSH2 0x1AC1 JUMP JUMPDEST PUSH2 0x72A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x2B3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2D1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x2E0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4C JUMP JUMPDEST PUSH2 0x73E JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x327 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x273 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x789 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x371 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B4C JUMP JUMPDEST PUSH2 0x7F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x382 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x3C5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0x823 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x85C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3FF PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x1BBE JUMP JUMPDEST PUSH2 0x90D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x206 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x43C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x44B CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x496 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2E5 PUSH2 0x4CC CALLDATASIZE PUSH1 0x4 PUSH2 0x1C31 JUMP JUMPDEST PUSH2 0xA8B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0xD60 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x508 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x552 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x561 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C53 JUMP JUMPDEST PUSH2 0xD7A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x572 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x273 PUSH2 0xD98 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x587 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x22F PUSH2 0x596 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0xDC4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x5B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH2 0x5F9 CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x617 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x63C CALLDATASIZE PUSH1 0x4 PUSH2 0x1B8E JUMP JUMPDEST PUSH2 0xE0F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x64D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x669 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1FC PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2E5 PUSH2 0x68E CALLDATASIZE PUSH1 0x4 PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0xE3D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x6D6 PUSH2 0x789 JUMP JUMPDEST PUSH2 0x6E0 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x710 SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x71A SWAP2 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH2 0x724 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x724 DUP3 PUSH2 0x738 PUSH2 0xE58 JUMP JUMPDEST SWAP1 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x785 PUSH2 0x749 PUSH2 0xF60 JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xF6A SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x79E JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x7B6 PUSH2 0xD60 JUMP JUMPDEST PUSH2 0x7C0 SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST PUSH2 0x7CA SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x7D4 SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST PUSH2 0x7DE SWAP2 SWAP1 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7EB SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x7A404B1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x82D PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0x841 DUP2 PUSH2 0x83B PUSH2 0x1056 JUMP JUMPDEST SWAP1 PUSH2 0x1084 JUMP JUMPDEST PUSH2 0x857 DUP4 DUP4 DUP4 PUSH2 0x84F PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x111D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x866 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0x871 DUP2 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x87C DUP3 PUSH2 0x693 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x785 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x8B6 DUP4 DUP4 PUSH2 0x1282 JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x97E JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP7 SWAP1 PUSH2 0xA23 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD0411AC500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 0x0 PUSH2 0xA32 DUP4 DUP6 ADD DUP6 PUSH2 0x1AA4 JUMP JUMPDEST SWAP1 POP PUSH2 0xA5F DUP2 DUP7 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0xA4B SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0x128E JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA95 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0xACB PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xAC4 PUSH2 0x10EF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x137A JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xB05 JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xB49 PUSH1 0x0 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xB5A DUP6 TIMESTAMP PUSH2 0x1D08 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xBD2 JUMPI PUSH1 0x0 PUSH2 0xB6F DUP7 DUP9 PUSH2 0x1CF4 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xBB3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xBC4 DUP7 DUP9 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xCFB SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xC61 JUMPI PUSH2 0xBE3 TIMESTAMP DUP4 PUSH2 0x1C9B JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xBF1 DUP7 DUP9 PUSH2 0x1CF4 JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xC35 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC49 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xC59 SWAP1 POP DUP7 DUP9 PUSH2 0x1D8E JUMP JUMPDEST SWAP4 POP POP PUSH2 0xCFB JUMP JUMPDEST PUSH2 0xC6B DUP6 DUP8 PUSH2 0x1CF4 JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xCAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xCBD TIMESTAMP DUP5 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xCCA SWAP2 SWAP1 PUSH2 0x1CAE JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xCD8 DUP9 DUP4 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 POP PUSH2 0xCE4 DUP8 DUP3 PUSH2 0x1CF4 JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xCF1 DUP8 DUP3 PUSH2 0x1D8E JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xD73 JUMPI DUP1 PUSH2 0x7EB JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xD95 PUSH2 0xD85 PUSH2 0xF60 JUMP JUMPDEST DUP3 PUSH2 0xD8E PUSH2 0x10EF JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1400 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDBF PUSH2 0xDA5 PUSH2 0x1056 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE08 DUP4 DUP4 PUSH2 0xDD3 PUSH2 0x10EF JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xE19 PUSH2 0xF60 JUMP JUMPDEST SWAP1 POP PUSH2 0xE27 DUP2 PUSH2 0x83B PUSH2 0x1056 JUMP JUMPDEST PUSH2 0x857 DUP4 DUP4 DUP4 PUSH2 0xE35 PUSH2 0x10EF JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x14A4 JUMP JUMPDEST PUSH2 0xD95 PUSH2 0xE48 PUSH2 0xF60 JUMP JUMPDEST DUP3 PUSH2 0xE51 PUSH2 0x1056 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x156E JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xED6 JUMPI POP PUSH1 0x0 PUSH2 0x724 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xF27 JUMPI POP PUSH1 0x1 PUSH2 0x724 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xDBF PUSH2 0x1682 JUMP JUMPDEST PUSH2 0xF73 DUP3 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF7F DUP4 DUP4 PUSH2 0x17CF JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xFBB JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xFCD SWAP2 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1007 SWAP1 DUP5 SWAP1 PUSH2 0x1C9B JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C9B JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x785 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x724 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1C9B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x11EE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x11FC PUSH2 0x789 JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x1211 JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x1222 JUMPI PUSH2 0x121E PUSH2 0xD60 JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xD95 JUMPI PUSH2 0x1247 DUP2 PUSH2 0x693 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xE08 DUP4 DUP4 PUSH2 0x1828 JUMP JUMPDEST PUSH2 0x1297 DUP3 PUSH2 0x11F4 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x12A3 DUP4 DUP4 PUSH2 0x1940 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0x12DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x12F1 SWAP2 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x132B SWAP1 DUP5 SWAP1 PUSH2 0x1D08 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x900 SWAP3 SWAP2 SWAP1 PUSH2 0x1D1B JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x857 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH2 0x140B DUP4 DUP3 DUP5 PUSH2 0x137A JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x11EE JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x11E5 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x15DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x11EE JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x1692 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x169C JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x17BE JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x179A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x17BE SWAP2 SWAP1 PUSH2 0x1DA2 JUMP JUMPDEST ISZERO PUSH2 0x17C8 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x17E5 SWAP2 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST SWAP1 POP PUSH2 0x724 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x1956 JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x183D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1936 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xE08 SWAP2 SWAP1 PUSH2 0x1DC4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP1 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR DUP2 MSTORE DUP3 MLOAD PUSH2 0x857 SWAP4 DUP8 SWAP4 SWAP1 SWAP3 PUSH1 0x0 SWAP3 DUP4 SWAP3 SWAP2 DUP4 SWAP2 SWAP1 DUP3 DUP9 GAS CALL DUP1 PUSH2 0x1A01 JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1A19 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1A33 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x11EE JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xA1A JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xD95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AB6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xE08 DUP2 PUSH2 0x1A82 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B15 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B2D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B5F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B82 DUP6 DUP3 DUP7 ADD PUSH2 0x1B03 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1BA1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1BB3 DUP2 PUSH2 0x1A82 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1BE1 DUP2 PUSH2 0x1A82 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1BF1 DUP2 PUSH2 0x1A82 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1C14 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C20 DUP9 DUP3 DUP10 ADD PUSH2 0x1B03 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C44 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C65 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D03 JUMPI PUSH2 0x1D03 PUSH2 0x1CC5 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x724 JUMPI PUSH2 0x724 PUSH2 0x1C6C JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x1D49 JUMPI PUSH1 0x20 DUP2 DUP8 ADD DUP2 ADD MLOAD PUSH1 0x60 DUP7 DUP5 ADD ADD MSTORE ADD PUSH2 0x1D2C JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x60 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x60 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1D9D JUMPI PUSH2 0x1D9D PUSH2 0x1CC5 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DB4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 PUSH23 0x93ABDB43543BC7DCE3D7F9D9C105650AA8E3D0763E3B5F 0xD8 PUSH0 NOT 0xC9 0xA6 MOD SELFBALANCE PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ","sourceMap":"407:1410:39:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3332:201:24;;;;;;;;;;-1:-1:-1;3332:201:24;;;;;:::i;:::-;;:::i;:::-;;;571:25:42;;;559:2;544:18;3332:201:24;;;;;;;;542:165:13;;;;;;;;;;-1:-1:-1;542:165:13;;;;;:::i;:::-;;:::i;:::-;;;1109:14:42;;1102:22;1084:41;;1072:2;1057:18;542:165:13;944:187:42;466:37:25;;;;;;;;;;;;;;;;;;1327:42:42;1315:55;;;1297:74;;1285:2;1270:18;466:37:25;1136:241:42;1428:56:24;;;;;;;;;;-1:-1:-1;1428:56:24;;;;;:::i;:::-;;;;;;;;;;;;;;1684:165:25;;;;;;;;;;-1:-1:-1;1684:165:25;;;;;:::i;:::-;;:::i;:::-;;267:44:41;;;;;;;;;;;;;;;728:115:17;;;;;;;;;;-1:-1:-1;817:19:17;728:115;;2971:355:24;;;;;;;;;;;;;:::i;1425:110:39:-;;;;;;:::i;:::-;;:::i;221:40:41:-;;;;;;;;;;;;;;;1116:257:2;;;;;;;;;;-1:-1:-1;1116:257:2;;;;;:::i;:::-;;:::i;4570:341:24:-;;;;;;;;;;;;;:::i;987:432:39:-;;;;;;;;;;-1:-1:-1;987:432:39;;;;;:::i;:::-;;:::i;:::-;;;4192:66:42;4180:79;;;4162:98;;4150:2;4135:18;987:432:39;4018:248:42;878:149:17;;;;;;;;;;-1:-1:-1;878:149:17;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;504:39:39;;;;;;;;;;;;;;;4917:1996:24;;;;;;:::i;:::-;;:::i;1248:25::-;;;;;;;;;;;;;;;;2734:231;;;;;;;;;;;;;:::i;1184:26::-;;;;;;;;;;;;;;;;1076:50;;;;;;;;;;;;;;;1994:124:2;;;;;;;;;;-1:-1:-1;1994:124:2;;;;;:::i;:::-;;:::i;710:120:3:-;;;;;;;;;;;;;:::i;2159:162:2:-;;;;;;;;;;-1:-1:-1;2159:162:2;;;;;:::i;:::-;;:::i;1362:60:24:-;;;;;;;;;;-1:-1:-1;1362:60:24;;;;;:::i;:::-;;;;;;;;;;;;;;1279:40;;;;;;;;;;;;;;;;1490:70;;;;;;;;;;-1:-1:-1;1490:70:24;;;;;:::i;:::-;;;;;;;;;;;;;;1216:26;;;;;;;;;;;;;;;;1694:259:2;;;;;;;;;;-1:-1:-1;1694:259:2;;;;;:::i;:::-;;:::i;1132:45:24:-;;;;;;;;;;;;1173:4;1132:45;;1325:30;;;;;;;;;;;;;;;;864:152:3;;;;;;;;;;-1:-1:-1;864:152:3;;;;;:::i;:::-;;:::i;3332:201:24:-;3510:16;;;3386:7;3510:16;;;:7;:16;;;;;;;;;3456:23;:32;;;;;;1173:4;;3432:21;:19;:21::i;:::-;:56;;;;:::i;:::-;3413:15;;;;;;;:6;:15;;;;;;:76;;;;:::i;:::-;3412:95;;;;:::i;:::-;:114;;;;:::i;:::-;3405:121;3332:201;-1:-1:-1;;3332:201:24:o;542:165:13:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;1684:165:25:-;1805:37;1815:12;:10;:12::i;:::-;1829;;1805:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1805:9:25;;-1:-1:-1;;;1805:37:25:i;:::-;1684:165;;:::o;2971:355:24:-;3071:11;;3023:7;;3096:23;;;3092:86;;-1:-1:-1;;3142:25:24;;;2971:355::o;3092:86::-;3300:18;1173:4;3269:10;;3254:11;;3225:26;:24;:26::i;:::-;:40;;;;:::i;:::-;3224:55;;;;:::i;:::-;:72;;;;:::i;:::-;3223:95;;;;:::i;:::-;3194:25;;:125;;;;:::i;:::-;3187:132;;;2971:355;:::o;1425:110:39:-;1505:23;;;;;;;;;;;;;;1116:257:2;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;4570:341:24:-;4612:14;4629:12;:10;:12::i;:::-;4612:29;;4651:21;4665:6;4651:13;:21::i;:::-;4682:14;4699;4706:6;4699;:14::i;:::-;4682:31;-1:-1:-1;4727:11:24;;4723:182;;4754:15;;;4772:1;4754:15;;;:7;:15;;;;;:19;;;4812:29;4762:6;4834;4812:13;:29::i;:::-;4787:54;;4868:6;4860:34;;;4876:9;4887:6;4860:34;;;;;;;:::i;:::-;;;;;;;;4740:165;4602:309;;4570:341::o;987:432:39:-;1110:6;1136:10;:36;1158:13;1136:36;;1128:61;;;;;;;;;;;;;;;;;1219:14;1207:26;;:8;:26;;;1259:8;1199:70;;;;;;;;1327:42:42;1315:55;;;1199:70:39;;;1297:74:42;1270:18;;1199:70:39;;;;;;;;;-1:-1:-1;1279:14:39;1296:27;;;;1307:4;1296:27;:::i;:::-;1279:44;;1333:33;1340:6;1359:5;1348:17;;;;;;571:25:42;;559:2;544:18;;425:177;1348:17:39;;;;;;;;;;;;;1333:6;:33::i;:::-;-1:-1:-1;1383:29:39;;987:432;-1:-1:-1;;;;;;987:432:39:o;4917:1996:24:-;5003:14;5020:12;:10;:12::i;:::-;5003:29;;5042:67;5087:13;5102:6;5042:29;:27;:29::i;:::-;:44;:67;:44;:67::i;:::-;5128:6;5138:1;5128:11;5120:43;;;;;;;;;;;;;;;;;5181:8;5193:1;5181:13;5173:41;;;;;;;;;;;;;;;;;5225:25;5247:1;5225:13;:25::i;:::-;5316:15;;5261:12;;;5369:26;5387:8;5369:15;:26;:::i;:::-;5341:54;;5429:22;5410:15;:41;5406:1353;;5506:21;5530:17;5539:8;5530:6;:17;:::i;:::-;5506:41;-1:-1:-1;5615:6:24;5623:8;5569:18;5561:72;;;;;;;;;;7123:25:42;;;;7164:18;;;7157:34;7096:18;;5561:72:24;6949:248:42;5561:72:24;-1:-1:-1;;5647:10:24;:26;;;5694:17;5703:8;5694:6;:17;:::i;:::-;5725:15;:35;;;5687:24;-1:-1:-1;5406:1353:24;;-1:-1:-1;5406:1353:24;;5816:22;5795:17;:43;5791:958;;5938:40;5963:15;5938:22;:40;:::i;:::-;5927:51;-1:-1:-1;5996:28:24;6027:17;5927:51;6027:6;:17;:::i;:::-;5996:48;-1:-1:-1;6123:6:24;6131:8;6070:25;6062:79;;;;;;;;;;7123:25:42;;;;7164:18;;;7157:34;7096:18;;6062:79:24;6949:248:42;6062:79:24;;;6173:20;6159:10;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;6218:17:24;;-1:-1:-1;6227:8:24;6218:6;:17;:::i;:::-;6211:24;;5840:410;5791:958;;;6350:17;6359:8;6350:6;:17;:::i;:::-;6400:6;;6408:8;;6342:76;;;;;;;;;;7123:25:42;;;;7164:18;;;7157:34;7096:18;;6342:76:24;6949:248:42;6342:76:24;-1:-1:-1;6436:23:24;;-1:-1:-1;6476:40:24;6501:15;6476:22;:40;:::i;:::-;6462:10;;:55;;;;:::i;:::-;6436:81;-1:-1:-1;6535:19:24;6557:24;6575:6;6436:81;6557:24;:::i;:::-;6535:46;-1:-1:-1;6612:22:24;6626:8;6535:46;6612:22;:::i;:::-;6599:10;:35;6659:22;6673:8;6659:11;:22;:::i;:::-;6699:15;:35;;;6652:29;-1:-1:-1;;;5791:958:24;6782:15;6768:11;:29;6863:43;;;7521:25:42;;;7577:2;7562:18;;7555:34;;;7605:18;;;7598:34;;;6863:43:24;;;;;;7509:2:42;7494:18;6863:43:24;;;;;;;4993:1920;;;;4917:1996;;:::o;2734:231::-;2843:15;;2791:7;;2875:15;:40;-1:-1:-1;2875:83:24;;2936:22;2875:83;;;2918:15;2868:90;;;2734:231;:::o;1994:124:2:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:3:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:12;;;;3550:118;782:41:3;775:48;;710:120;:::o;2159:162:2:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2768:13:11;2800;;;;;;;;;;;:22;;;;;;;;;;;;;;;2679:150;2262:52:2;2255:59;2159:162;-1:-1:-1;;;2159:162:2:o;1694:259::-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:3:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:16;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:16;1620:11;;1560:82;-1:-1:-1;1658:34:16;;:21;:34;;;;;;;;;;;;;;;1359:340::o;7413:175:24:-;7514:7;7540:41;:39;:41::i;4183:381::-;4272:21;4286:6;4272:13;:21::i;:::-;4303:19;4325:38;4342:6;4350:12;4325:16;:38::i;:::-;4303:60;;4381:11;4396:1;4381:16;4373:50;;;;;;;;;;;;;;;;;4448:11;4433;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;4469:14:24;;;;;;;:6;:14;;;;;:29;;4487:11;;4469:14;:29;;4487:11;;4469:29;:::i;:::-;;;;;;;;4523:6;4513:44;;;4531:12;4545:11;4513:44;;;;;;;:::i;5060:174:12:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1327:42:42;1315:55;;4538:25:12;;;1297:74:42;1270:18;;4538:25:12;1136:241:42;4376:174:11;4417:16;;696:67;762:1;704:54;696:67;:::i;1145:251::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1250:140;;1295:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1320:4;1295:29;;;1343:36;;7845:25:42;;;7886:18;;;7879:83;7998:55;;;7978:18;;;7971:83;;;;1343:36:11;;7833:2:42;7818:18;1343:36:11;;;;;;;;1250:140;1145:251;;;;:::o;2240:488:24:-;2327:21;:19;:21::i;:::-;2299:25;:49;2381:15;;2362;:34;;;:54;;-1:-1:-1;2400:11:24;;:16;;2362:54;2358:195;;;2516:26;:24;:26::i;:::-;2502:11;:40;2358:195;2566:21;;;;2562:160;;2622:15;2629:7;2622:6;:15::i;:::-;2603:16;;;;;;;:7;:16;;;;;;;;:34;;;;2686:25;;2651:23;:32;;;;;;:60;2240:488;:::o;1100:252:40:-;1250:22;1291:54;1330:6;1338;1291:38;:54::i;3682:360:24:-;3765:21;3779:6;3765:13;:21::i;:::-;3796:19;3818:32;3832:6;3840:9;3818:13;:32::i;:::-;3796:54;;3868:11;3883:1;3868:16;3860:47;;;;;;;;;;;;;;;;;3932:11;3917;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;3953:14:24;;;;;;;:6;:14;;;;;:29;;3971:11;;3953:14;:29;;3971:11;;3953:29;:::i;:::-;;;;;;;;4004:6;3997:38;;;4012:9;4023:11;3997:38;;;;;;;:::i;3640:170:11:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;3737:66;;3775:28;;;;;;;;8239:25:42;;;8312:42;8300:55;;8280:18;;;8273:83;8212:18;;3775:28:11;8065:297:42;2282:213:11;2371:30;:1;2388:4;2394:6;2371:16;:30::i;:::-;2435:5;2411:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2455:33;;7845:25:42;;;7886:18;;;7879:83;;;7978:18;;7971:83;;;;2455:33:11;;7833:2:42;7818:18;2455:33:11;;;;;;;2282:213;;;:::o;1774:252::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1880:140;;;1949:5;1924:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1973:36;;7845:25:42;;;7886:18;;;7879:83;7998:55;;;7978:18;;;7971:83;;;;1973:36:11;;7833:2:42;7818:18;1973:36:11;7643:417:42;3054:369:12;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1327:42:42;1315:55;;3237:24:12;;;1297:74:42;1270:18;;3237:24:12;1136:241:42;3201:60:12;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:12;3142:281;3054:369;;;:::o;784:760:18:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:18;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:18;;784:760::o;1043:95::-;462:23:21;466:14;462:23;449:37;445:2;441:46;1372:19:18;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:18;;;;;:39;8587:55:42;;;1396:74:18;;;8569::42;1444:10:18;8659:18:42;;;8652:83;1464:4:18;8751:18:42;;;8744:83;1396:19:18;:39;;;;8542:18:42;;1396:74:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:18:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;1855:248:25:-;1959:19;2015:12;2004:35;;;;;;;;;;;;:::i;:::-;1990:49;-1:-1:-1;2049:47:25;:26;:13;:26;2076:6;1990:49;2049:26;:47::i;485:222:41:-;566:22;623:6;612:18;;;;;;571:25:42;;559:2;544:18;;425:177;612:18:41;;;;;;;;;;;;;;;640:60;;;:23;9529:55:42;;;640:60:41;;;9511:74:42;9601:18;;;9594:34;;;680:19:41;9644:18:42;;;9637:34;612:18:41;;-1:-1:-1;640:15:41;:23;;;;9484:18:42;;640:60:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485:222;;;;:::o;1541:274:39:-;1632:19;1787:9;1776:32;;;;;;;;;;;;:::i;1219:160:33:-;1328:43;;;1343:14;9874:55:42;;1328:43:33;;;9856:74:42;9946:18;;;;9939:34;;;1328:43:33;;;;;;;;;;9829:18:42;;;;1328:43:33;;;;;;;;;;;;;;;7916:11;;1301:71;;1321:5;;1328:43;;-1:-1:-1;;;;1328:43:33;-1:-1:-1;;7916:11:33;-1:-1:-1;1321:5:33;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:33;8226:8;8182:16;;-1:-1:-1;8258:15:33;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;1327:42:42;1315:55;;8349:40:33;;;1297:74:42;1270:18;;8349:40:33;1136:241:42;14:154;100:42;93:5;89:54;82:5;79:65;69:93;;158:1;155;148:12;173:247;232:6;285:2;273:9;264:7;260:23;256:32;253:52;;;301:1;298;291:12;253:52;340:9;327:23;359:31;384:5;359:31;:::i;607:332::-;665:6;718:2;706:9;697:7;693:23;689:32;686:52;;;734:1;731;724:12;686:52;773:9;760:23;823:66;816:5;812:78;805:5;802:89;792:117;;905:1;902;895:12;1382:347;1433:8;1443:6;1497:3;1490:4;1482:6;1478:17;1474:27;1464:55;;1515:1;1512;1505:12;1464:55;-1:-1:-1;1538:20:42;;1581:18;1570:30;;1567:50;;;1613:1;1610;1603:12;1567:50;1650:4;1642:6;1638:17;1626:29;;1702:3;1695:4;1686:6;1678;1674:19;1670:30;1667:39;1664:59;;;1719:1;1716;1709:12;1664:59;1382:347;;;;;:::o;1734:409::-;1804:6;1812;1865:2;1853:9;1844:7;1840:23;1836:32;1833:52;;;1881:1;1878;1871:12;1833:52;1921:9;1908:23;1954:18;1946:6;1943:30;1940:50;;;1986:1;1983;1976:12;1940:50;2025:58;2075:7;2066:6;2055:9;2051:22;2025:58;:::i;:::-;2102:8;;1999:84;;-1:-1:-1;1734:409:42;-1:-1:-1;;;;1734:409:42:o;2835:367::-;2903:6;2911;2964:2;2952:9;2943:7;2939:23;2935:32;2932:52;;;2980:1;2977;2970:12;2932:52;3025:23;;;-1:-1:-1;3124:2:42;3109:18;;3096:32;3137:33;3096:32;3137:33;:::i;:::-;3189:7;3179:17;;;2835:367;;;;;:::o;3207:806::-;3304:6;3312;3320;3328;3336;3389:3;3377:9;3368:7;3364:23;3360:33;3357:53;;;3406:1;3403;3396:12;3357:53;3445:9;3432:23;3464:31;3489:5;3464:31;:::i;:::-;3514:5;-1:-1:-1;3571:2:42;3556:18;;3543:32;3584:33;3543:32;3584:33;:::i;:::-;3636:7;-1:-1:-1;3716:2:42;3701:18;;3688:32;;-1:-1:-1;3797:2:42;3782:18;;3769:32;3824:18;3813:30;;3810:50;;;3856:1;3853;3846:12;3810:50;3895:58;3945:7;3936:6;3925:9;3921:22;3895:58;:::i;:::-;3207:806;;;;-1:-1:-1;3207:806:42;;-1:-1:-1;3972:8:42;;3869:84;3207:806;-1:-1:-1;;;3207:806:42:o;4502:346::-;4570:6;4578;4631:2;4619:9;4610:7;4606:23;4602:32;4599:52;;;4647:1;4644;4637:12;4599:52;-1:-1:-1;;4692:23:42;;;4812:2;4797:18;;;4784:32;;-1:-1:-1;4502:346:42:o;4853:226::-;4912:6;4965:2;4953:9;4944:7;4940:23;4936:32;4933:52;;;4981:1;4978;4971:12;4933:52;-1:-1:-1;5026:23:42;;4853:226;-1:-1:-1;4853:226:42:o;5084:184::-;5136:77;5133:1;5126:88;5233:4;5230:1;5223:15;5257:4;5254:1;5247:15;5273:128;5340:9;;;5361:11;;;5358:37;;;5375:18;;:::i;5406:168::-;5479:9;;;5510;;5527:15;;;5521:22;;5507:37;5497:71;;5548:18;;:::i;5579:184::-;5631:77;5628:1;5621:88;5728:4;5725:1;5718:15;5752:4;5749:1;5742:15;5768:120;5808:1;5834;5824:35;;5839:18;;:::i;:::-;-1:-1:-1;5873:9:42;;5768:120::o;5893:125::-;5958:9;;;5979:10;;;5976:36;;;5992:18;;:::i;6023:661::-;6198:2;6187:9;6180:21;6161:4;6230:6;6224:13;6273:6;6268:2;6257:9;6253:18;6246:34;6298:1;6308:144;6322:6;6319:1;6316:13;6308:144;;;6435:4;6419:14;;;6415:25;;6409:32;6404:2;6385:17;;;6381:26;6374:68;6337:12;6308:144;;;6312:3;6501:1;6496:2;6487:6;6476:9;6472:22;6468:31;6461:42;6630:2;6560:66;6555:2;6547:6;6543:15;6539:88;6528:9;6524:104;6520:113;6512:121;;;6671:6;6664:4;6653:9;6649:20;6642:36;6023:661;;;;;:::o;7202:112::-;7234:1;7260;7250:35;;7265:18;;:::i;:::-;-1:-1:-1;7299:9:42;;7202:112::o;8838:277::-;8905:6;8958:2;8946:9;8937:7;8933:23;8929:32;8926:52;;;8974:1;8971;8964:12;8926:52;9006:9;9000:16;9059:5;9052:13;9045:21;9038:5;9035:32;9025:60;;9081:1;9078;9071:12;9120:184;9190:6;9243:2;9231:9;9222:7;9218:23;9214:32;9211:52;;;9259:1;9256;9249:12;9211:52;-1:-1:-1;9282:16:42;;9120:184;-1:-1:-1;9120:184:42:o"},"gasEstimates":{"creation":{"codeDepositCost":"1539800","executionCost":"infinite","totalCost":"infinite"},"external":{"CLAIM_CONTRACT()":"infinite","DEPOSIT_REASON_CODE()":"infinite","POINTS_CONTRACT()":"infinite","REWARDER_ROLE()":"229","SCALING_FACTOR()":"250","STAKING_TOKEN()":"infinite","addReward(uint256,uint256)":"infinite","claim()":"infinite","distributionEnd()":"2372","earned(address)":"infinite","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","lastTimeRewardApplicable()":"2435","lastUpdated()":"2395","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","rewardPerStakePoint()":"infinite","rewardPerStakePointPaid(address)":"2579","rewardPerStakePointStored()":"2351","rewardRate()":"2352","rewards(address)":"2536","stake(bytes)":"518","staked(address)":"2535","supportsInterface(bytes4)":"infinite","totalStaked()":"2396","transferOwnership(address)":"infinite","withdraw(bytes)":"infinite"},"internal":{"_computeStake(address,bytes memory)":"infinite"}},"methodIdentifiers":{"CLAIM_CONTRACT()":"62ba9096","DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93","REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"claimContract\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPoints\",\"name\":\"pointsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"InvalidTransferOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyReceiverInterface\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLAIM_CONTRACT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol\":\"ERC20StakingPointsRewardsLimitedLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\nabstract contract LinearPool is AccessControl, ReentrancyGuard, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), abi.encode(stakeData));\\n    }\\n\\n    function _stake(address sender, bytes memory stakeData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeStake(sender, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[sender] += stakePoints;\\n        emit Staked(sender, stakeData, stakePoints);\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _withdraw(address sender, bytes memory withdrawData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeWithdraw(sender, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        totalStaked -= stakePoints;\\n        staked[sender] -= stakePoints;\\n        emit Withdrawn(sender, withdrawData, stakePoints);\\n    }\\n\\n    function claim() public virtual {\\n        address sender = _msgSender();\\n        _updateReward(sender);\\n        uint256 reward = earned(sender);\\n        if (reward != 0) {\\n            rewards[sender] = 0;\\n            bytes memory claimData = _computeClaim(sender, reward);\\n            emit Claimed(sender, claimData, reward);\\n        }\\n    }\\n\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, sender);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(sender, reward, dust);\\n\\n        emit RewardAdded(sender, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x110fa1853326976c0f86e5eab2e656af7d8625ffaff607f04a47dbaf55557c9b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb94ae7a938c0d4bd6b587025c13c1592019a999d5e713c35c875d923a948ad11\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ERC20StakingPointsRewardsLinearPool} from \\\"./ERC20StakingPointsRewardsLinearPool.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\ncontract ERC20StakingPointsRewardsLimitedLinearPool is ERC20StakingPointsRewardsLinearPool {\\n    address public immutable CLAIM_CONTRACT;\\n\\n    error InvalidTransferOperator(address operator);\\n    error OnlyReceiverInterface();\\n\\n    constructor(\\n        address claimContract,\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingPointsRewardsLinearPool(stakingToken, pointsContract, depositReasonCode, forwarderRegistry) {\\n        CLAIM_CONTRACT = claimContract;\\n    }\\n\\n    function onERC20Received(address operator, address, uint256 value, bytes calldata data) external virtual override returns (bytes4) {\\n        require(msg.sender == address(STAKING_TOKEN), InvalidToken());\\n        require(operator == CLAIM_CONTRACT, InvalidTransferOperator(operator));\\n        address staker = abi.decode(data, (address));\\n        _stake(staker, abi.encode(value));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function stake(bytes calldata) public payable virtual override {\\n        revert OnlyReceiverInterface();\\n    }\\n\\n    function _computeStake(address, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        // The tokens were received via the receiver interface, so we don't need to transfer them.\\n        stakePoints = abi.decode(stakeData, (uint256));\\n    }\\n}\\n\",\"keccak256\":\"0x35d74373a3763cda34834b000f05ba4ec0eb68aaca2e408f9ff5b8608fb738cb\",\"license\":\"MIT\"},\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\\\";\\nimport {ERC20StakingLinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\\\";\\nimport {LinearPool_PointsRewards} from \\\"./reward/LinearPool_PointsRewards.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\\n    constructor(\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {}\\n\\n    function _computeClaim(\\n        address staker,\\n        uint256 reward\\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\\n    }\\n\\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4bd20690f6a255f99e0b9aa59ad7ebf07d12e0ef78e9d3a0dbf060b330d6f\",\"license\":\"MIT\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x10fc21c24586c2d78e2f1b81ce64fffb8391f2c4ca2f50cfb47dcd8004b26e3a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2853,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1332,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":1334,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":1336,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":1338,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":1340,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":1344,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":1348,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":1352,"contract":"contracts/staking/ERC20StakingPointsRewardsLimitedLinearPool.sol:ERC20StakingPointsRewardsLimitedLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol":{"ERC20StakingPointsRewardsLinearPool":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"stakingToken","type":"address"},{"internalType":"contract IPoints","name":"pointsContract","type":"address"},{"internalType":"bytes32","name":"depositReasonCode","type":"bytes32"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidDuration","type":"error"},{"inputs":[],"name":"InvalidRewardAmount","type":"error"},{"inputs":[],"name":"InvalidStakeAmount","type":"error"},{"inputs":[],"name":"InvalidToken","type":"error"},{"inputs":[],"name":"InvalidWithdrawAmount","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"RewardTooSmallForDuration","type":"error"},{"inputs":[{"internalType":"address","name":"token","type":"address"}],"name":"SafeERC20FailedOperation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"claimData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"}],"name":"Claimed","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"rewarder","type":"address"},{"indexed":false,"internalType":"uint256","name":"reward","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"duration","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"dust","type":"uint256"}],"name":"RewardAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"stakeData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Staked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"staker","type":"address"},{"indexed":false,"internalType":"bytes","name":"withdrawData","type":"bytes"},{"indexed":false,"internalType":"uint256","name":"stakePoints","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"REWARDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SCALING_FACTOR","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"STAKING_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"reward","type":"uint256"},{"internalType":"uint256","name":"duration","type":"uint256"}],"name":"addReward","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"claim","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"distributionEnd","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"earned","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastTimeRewardApplicable","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lastUpdated","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"rewardPerStakePoint","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewardPerStakePointPaid","outputs":[{"internalType":"uint256","name":"paid","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardPerStakePointStored","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"rewardRate","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"rewards","outputs":[{"internalType":"uint256","name":"reward","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"stakeData","type":"bytes"}],"name":"stake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"staker","type":"address"}],"name":"staked","outputs":[{"internalType":"uint256","name":"stakePoints","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"withdrawData","type":"bytes"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"ReentrancyGuardReentrantCall()":[{"details":"Unauthorized reentrant call."}],"SafeERC20FailedOperation(address)":[{"details":"An operation with an ERC-20 token failed."}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1022":{"entryPoint":null,"id":1022,"parameterSlots":1,"returnSlots":0},"@_1069":{"entryPoint":null,"id":1069,"parameterSlots":1,"returnSlots":0},"@_1414":{"entryPoint":null,"id":1414,"parameterSlots":1,"returnSlots":0},"@_2004":{"entryPoint":null,"id":2004,"parameterSlots":2,"returnSlots":0},"@_2196":{"entryPoint":null,"id":2196,"parameterSlots":0,"returnSlots":0},"@_2864":{"entryPoint":null,"id":2864,"parameterSlots":0,"returnSlots":0},"@_3239":{"entryPoint":null,"id":3239,"parameterSlots":4,"returnSlots":0},"@_3306":{"entryPoint":null,"id":3306,"parameterSlots":2,"returnSlots":0},"@_43":{"entryPoint":null,"id":43,"parameterSlots":1,"returnSlots":0},"@constructorInit_694":{"entryPoint":213,"id":694,"parameterSlots":2,"returnSlots":0},"@layout_850":{"entryPoint":161,"id":850,"parameterSlots":0,"returnSlots":1},"@layout_998":{"entryPoint":324,"id":998,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_952":{"entryPoint":370,"id":952,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory":{"entryPoint":486,"id":null,"parameterSlots":2,"returnSlots":4},"checked_sub_t_uint256":{"entryPoint":571,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":462,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1053:42","nodeType":"YulBlock","src":"0:1053:42","statements":[{"nativeSrc":"6:3:42","nodeType":"YulBlock","src":"6:3:42","statements":[]},{"body":{"nativeSrc":"67:86:42","nodeType":"YulBlock","src":"67:86:42","statements":[{"body":{"nativeSrc":"131:16:42","nodeType":"YulBlock","src":"131:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:42","nodeType":"YulLiteral","src":"140:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:42","nodeType":"YulLiteral","src":"143:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:42","nodeType":"YulIdentifier","src":"133:6:42"},"nativeSrc":"133:12:42","nodeType":"YulFunctionCall","src":"133:12:42"},"nativeSrc":"133:12:42","nodeType":"YulExpressionStatement","src":"133:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:42","nodeType":"YulIdentifier","src":"90:5:42"},{"arguments":[{"name":"value","nativeSrc":"101:5:42","nodeType":"YulIdentifier","src":"101:5:42"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:42","nodeType":"YulLiteral","src":"116:3:42","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:42","nodeType":"YulLiteral","src":"121:1:42","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:42","nodeType":"YulIdentifier","src":"112:3:42"},"nativeSrc":"112:11:42","nodeType":"YulFunctionCall","src":"112:11:42"},{"kind":"number","nativeSrc":"125:1:42","nodeType":"YulLiteral","src":"125:1:42","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:42","nodeType":"YulIdentifier","src":"108:3:42"},"nativeSrc":"108:19:42","nodeType":"YulFunctionCall","src":"108:19:42"}],"functionName":{"name":"and","nativeSrc":"97:3:42","nodeType":"YulIdentifier","src":"97:3:42"},"nativeSrc":"97:31:42","nodeType":"YulFunctionCall","src":"97:31:42"}],"functionName":{"name":"eq","nativeSrc":"87:2:42","nodeType":"YulIdentifier","src":"87:2:42"},"nativeSrc":"87:42:42","nodeType":"YulFunctionCall","src":"87:42:42"}],"functionName":{"name":"iszero","nativeSrc":"80:6:42","nodeType":"YulIdentifier","src":"80:6:42"},"nativeSrc":"80:50:42","nodeType":"YulFunctionCall","src":"80:50:42"},"nativeSrc":"77:70:42","nodeType":"YulIf","src":"77:70:42"}]},"name":"validator_revert_contract_IERC20","nativeSrc":"14:139:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:42","nodeType":"YulTypedName","src":"56:5:42","type":""}],"src":"14:139:42"},{"body":{"nativeSrc":"348:473:42","nodeType":"YulBlock","src":"348:473:42","statements":[{"body":{"nativeSrc":"395:16:42","nodeType":"YulBlock","src":"395:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"404:1:42","nodeType":"YulLiteral","src":"404:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"407:1:42","nodeType":"YulLiteral","src":"407:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"397:6:42","nodeType":"YulIdentifier","src":"397:6:42"},"nativeSrc":"397:12:42","nodeType":"YulFunctionCall","src":"397:12:42"},"nativeSrc":"397:12:42","nodeType":"YulExpressionStatement","src":"397:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"369:7:42","nodeType":"YulIdentifier","src":"369:7:42"},{"name":"headStart","nativeSrc":"378:9:42","nodeType":"YulIdentifier","src":"378:9:42"}],"functionName":{"name":"sub","nativeSrc":"365:3:42","nodeType":"YulIdentifier","src":"365:3:42"},"nativeSrc":"365:23:42","nodeType":"YulFunctionCall","src":"365:23:42"},{"kind":"number","nativeSrc":"390:3:42","nodeType":"YulLiteral","src":"390:3:42","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"361:3:42","nodeType":"YulIdentifier","src":"361:3:42"},"nativeSrc":"361:33:42","nodeType":"YulFunctionCall","src":"361:33:42"},"nativeSrc":"358:53:42","nodeType":"YulIf","src":"358:53:42"},{"nativeSrc":"420:29:42","nodeType":"YulVariableDeclaration","src":"420:29:42","value":{"arguments":[{"name":"headStart","nativeSrc":"439:9:42","nodeType":"YulIdentifier","src":"439:9:42"}],"functionName":{"name":"mload","nativeSrc":"433:5:42","nodeType":"YulIdentifier","src":"433:5:42"},"nativeSrc":"433:16:42","nodeType":"YulFunctionCall","src":"433:16:42"},"variables":[{"name":"value","nativeSrc":"424:5:42","nodeType":"YulTypedName","src":"424:5:42","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"491:5:42","nodeType":"YulIdentifier","src":"491:5:42"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"458:32:42","nodeType":"YulIdentifier","src":"458:32:42"},"nativeSrc":"458:39:42","nodeType":"YulFunctionCall","src":"458:39:42"},"nativeSrc":"458:39:42","nodeType":"YulExpressionStatement","src":"458:39:42"},{"nativeSrc":"506:15:42","nodeType":"YulAssignment","src":"506:15:42","value":{"name":"value","nativeSrc":"516:5:42","nodeType":"YulIdentifier","src":"516:5:42"},"variableNames":[{"name":"value0","nativeSrc":"506:6:42","nodeType":"YulIdentifier","src":"506:6:42"}]},{"nativeSrc":"530:40:42","nodeType":"YulVariableDeclaration","src":"530:40:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"555:9:42","nodeType":"YulIdentifier","src":"555:9:42"},{"kind":"number","nativeSrc":"566:2:42","nodeType":"YulLiteral","src":"566:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"551:3:42","nodeType":"YulIdentifier","src":"551:3:42"},"nativeSrc":"551:18:42","nodeType":"YulFunctionCall","src":"551:18:42"}],"functionName":{"name":"mload","nativeSrc":"545:5:42","nodeType":"YulIdentifier","src":"545:5:42"},"nativeSrc":"545:25:42","nodeType":"YulFunctionCall","src":"545:25:42"},"variables":[{"name":"value_1","nativeSrc":"534:7:42","nodeType":"YulTypedName","src":"534:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"612:7:42","nodeType":"YulIdentifier","src":"612:7:42"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"579:32:42","nodeType":"YulIdentifier","src":"579:32:42"},"nativeSrc":"579:41:42","nodeType":"YulFunctionCall","src":"579:41:42"},"nativeSrc":"579:41:42","nodeType":"YulExpressionStatement","src":"579:41:42"},{"nativeSrc":"629:17:42","nodeType":"YulAssignment","src":"629:17:42","value":{"name":"value_1","nativeSrc":"639:7:42","nodeType":"YulIdentifier","src":"639:7:42"},"variableNames":[{"name":"value1","nativeSrc":"629:6:42","nodeType":"YulIdentifier","src":"629:6:42"}]},{"nativeSrc":"655:35:42","nodeType":"YulAssignment","src":"655:35:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"675:9:42","nodeType":"YulIdentifier","src":"675:9:42"},{"kind":"number","nativeSrc":"686:2:42","nodeType":"YulLiteral","src":"686:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"671:3:42","nodeType":"YulIdentifier","src":"671:3:42"},"nativeSrc":"671:18:42","nodeType":"YulFunctionCall","src":"671:18:42"}],"functionName":{"name":"mload","nativeSrc":"665:5:42","nodeType":"YulIdentifier","src":"665:5:42"},"nativeSrc":"665:25:42","nodeType":"YulFunctionCall","src":"665:25:42"},"variableNames":[{"name":"value2","nativeSrc":"655:6:42","nodeType":"YulIdentifier","src":"655:6:42"}]},{"nativeSrc":"699:40:42","nodeType":"YulVariableDeclaration","src":"699:40:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"724:9:42","nodeType":"YulIdentifier","src":"724:9:42"},{"kind":"number","nativeSrc":"735:2:42","nodeType":"YulLiteral","src":"735:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"720:3:42","nodeType":"YulIdentifier","src":"720:3:42"},"nativeSrc":"720:18:42","nodeType":"YulFunctionCall","src":"720:18:42"}],"functionName":{"name":"mload","nativeSrc":"714:5:42","nodeType":"YulIdentifier","src":"714:5:42"},"nativeSrc":"714:25:42","nodeType":"YulFunctionCall","src":"714:25:42"},"variables":[{"name":"value_2","nativeSrc":"703:7:42","nodeType":"YulTypedName","src":"703:7:42","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"781:7:42","nodeType":"YulIdentifier","src":"781:7:42"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"748:32:42","nodeType":"YulIdentifier","src":"748:32:42"},"nativeSrc":"748:41:42","nodeType":"YulFunctionCall","src":"748:41:42"},"nativeSrc":"748:41:42","nodeType":"YulExpressionStatement","src":"748:41:42"},{"nativeSrc":"798:17:42","nodeType":"YulAssignment","src":"798:17:42","value":{"name":"value_2","nativeSrc":"808:7:42","nodeType":"YulIdentifier","src":"808:7:42"},"variableNames":[{"name":"value3","nativeSrc":"798:6:42","nodeType":"YulIdentifier","src":"798:6:42"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory","nativeSrc":"158:663:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"290:9:42","nodeType":"YulTypedName","src":"290:9:42","type":""},{"name":"dataEnd","nativeSrc":"301:7:42","nodeType":"YulTypedName","src":"301:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"313:6:42","nodeType":"YulTypedName","src":"313:6:42","type":""},{"name":"value1","nativeSrc":"321:6:42","nodeType":"YulTypedName","src":"321:6:42","type":""},{"name":"value2","nativeSrc":"329:6:42","nodeType":"YulTypedName","src":"329:6:42","type":""},{"name":"value3","nativeSrc":"337:6:42","nodeType":"YulTypedName","src":"337:6:42","type":""}],"src":"158:663:42"},{"body":{"nativeSrc":"875:176:42","nodeType":"YulBlock","src":"875:176:42","statements":[{"nativeSrc":"885:17:42","nodeType":"YulAssignment","src":"885:17:42","value":{"arguments":[{"name":"x","nativeSrc":"897:1:42","nodeType":"YulIdentifier","src":"897:1:42"},{"name":"y","nativeSrc":"900:1:42","nodeType":"YulIdentifier","src":"900:1:42"}],"functionName":{"name":"sub","nativeSrc":"893:3:42","nodeType":"YulIdentifier","src":"893:3:42"},"nativeSrc":"893:9:42","nodeType":"YulFunctionCall","src":"893:9:42"},"variableNames":[{"name":"diff","nativeSrc":"885:4:42","nodeType":"YulIdentifier","src":"885:4:42"}]},{"body":{"nativeSrc":"934:111:42","nodeType":"YulBlock","src":"934:111:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"955:1:42","nodeType":"YulLiteral","src":"955:1:42","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"962:3:42","nodeType":"YulLiteral","src":"962:3:42","type":"","value":"224"},{"kind":"number","nativeSrc":"967:10:42","nodeType":"YulLiteral","src":"967:10:42","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"958:3:42","nodeType":"YulIdentifier","src":"958:3:42"},"nativeSrc":"958:20:42","nodeType":"YulFunctionCall","src":"958:20:42"}],"functionName":{"name":"mstore","nativeSrc":"948:6:42","nodeType":"YulIdentifier","src":"948:6:42"},"nativeSrc":"948:31:42","nodeType":"YulFunctionCall","src":"948:31:42"},"nativeSrc":"948:31:42","nodeType":"YulExpressionStatement","src":"948:31:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"999:1:42","nodeType":"YulLiteral","src":"999:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"1002:4:42","nodeType":"YulLiteral","src":"1002:4:42","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"992:6:42","nodeType":"YulIdentifier","src":"992:6:42"},"nativeSrc":"992:15:42","nodeType":"YulFunctionCall","src":"992:15:42"},"nativeSrc":"992:15:42","nodeType":"YulExpressionStatement","src":"992:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1027:1:42","nodeType":"YulLiteral","src":"1027:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1030:4:42","nodeType":"YulLiteral","src":"1030:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1020:6:42","nodeType":"YulIdentifier","src":"1020:6:42"},"nativeSrc":"1020:15:42","nodeType":"YulFunctionCall","src":"1020:15:42"},"nativeSrc":"1020:15:42","nodeType":"YulExpressionStatement","src":"1020:15:42"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"917:4:42","nodeType":"YulIdentifier","src":"917:4:42"},{"name":"x","nativeSrc":"923:1:42","nodeType":"YulIdentifier","src":"923:1:42"}],"functionName":{"name":"gt","nativeSrc":"914:2:42","nodeType":"YulIdentifier","src":"914:2:42"},"nativeSrc":"914:11:42","nodeType":"YulFunctionCall","src":"914:11:42"},"nativeSrc":"911:134:42","nodeType":"YulIf","src":"911:134:42"}]},"name":"checked_sub_t_uint256","nativeSrc":"826:225:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"857:1:42","nodeType":"YulTypedName","src":"857:1:42","type":""},{"name":"y","nativeSrc":"860:1:42","nodeType":"YulTypedName","src":"860:1:42","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"866:4:42","nodeType":"YulTypedName","src":"866:4:42","type":""}],"src":"826:225:42"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$2403t_contract$_IPoints_$3059t_bytes32t_contract$_IForwarderRegistry_$1204_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        value2 := mload(add(headStart, 64))\n        let value_2 := mload(add(headStart, 96))\n        validator_revert_contract_IERC20(value_2)\n        value3 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":42,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"61010060405234801561001157600080fd5b5060405161229b38038061229b833981016040819052610030916101e6565b828285838080803361004a816100446100a1565b906100d5565b50600160008190556001600160a01b0390911660805261007e9250634fc3585960e01b9150610077610144565b9190610172565b506001600160a01b0390811660a0529190911660c05260e0525061025c92505050565b6000806100cf60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61023b565b92915050565b6001600160a01b0381161561012b5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6101406307f5828d60e41b6001610077610144565b5050565b6000806100cf60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61023b565b600160e01b6001600160e01b03198316016101a0576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811681146101e357600080fd5b50565b600080600080608085870312156101fc57600080fd5b8451610207816101ce565b6020860151909450610218816101ce565b604086015160608701519194509250610230816101ce565b939692955090935050565b818103818111156100cf57634e487b7160e01b600052601160045260246000fd5b60805160a05160c05160e051611fce6102cd600039600081816102ee015261187701526000818161037d01526118a0015260008181610246015281816108ec0152818161174001526117ba01526000818161031f015281816104420152818161160401526116920152611fce6000f3fe6080604052600436106101cc5760003560e01c80637b0a47ee116100f757806398807d8411610095578063d547741f11610064578063d547741f146105e2578063ef4cadc514610602578063efa90b541461061e578063f2fde38b1461063457600080fd5b806398807d841461055c5780639d696e3614610589578063c5c8f7701461059f578063d0b06f5d146105cc57600080fd5b80638580cf76116100d15780638580cf76146104d35780638bb9c5bf146105075780638da5cb5b1461052757806391d148541461053c57600080fd5b80637b0a47ee1461049257806380faa57d146104a8578063817b1cd2146104bd57600080fd5b80632c9d0b801161016f5780634e71d92d1161013e5780634e71d92d146103bf5780634fc35859146103d4578063572b6c051461042557806375c93bb91461047f57600080fd5b80632c9d0b80146103435780632d1e0c02146103585780632d4c2f931461036b5780632f2ff15d1461039f57600080fd5b80630700037d116101ab5780630700037d1461028d5780630968f264146102ba5780632196e445146102dc5780632b4c9f161461031057600080fd5b80628cc262146101d157806301ffc9a7146102045780630479d64414610234575b600080fd5b3480156101dd57600080fd5b506101f16101ec366004611a96565b610654565b6040519081526020015b60405180910390f35b34801561021057600080fd5b5061022461021f366004611ab1565b6106eb565b60405190151581526020016101fb565b34801561024057600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fb565b34801561029957600080fd5b506101f16102a8366004611a96565b60076020526000908152604090205481565b3480156102c657600080fd5b506102da6102d5366004611b3c565b6106ff565b005b3480156102e857600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b34801561031c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610268565b34801561034f57600080fd5b506101f161074a565b6102da610366366004611b3c565b6107b2565b34801561037757600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ab57600080fd5b506102da6103ba366004611b7e565b6107ed565b3480156103cb57600080fd5b506102da610821565b3480156103e057600080fd5b506103f46103ef366004611baa565b6108d2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101fb565b34801561043157600080fd5b50610224610440366004611a96565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102da61048d366004611c19565b6109c5565b34801561049e57600080fd5b506101f160035481565b3480156104b457600080fd5b506101f1610c9f565b3480156104c957600080fd5b506101f160015481565b3480156104df57600080fd5b506101f17f726577617264657200000000000000000000000000000000000000000000000081565b34801561051357600080fd5b506102da610522366004611c3b565b610cb9565b34801561053357600080fd5b50610268610cd7565b34801561054857600080fd5b50610224610557366004611b7e565b610d03565b34801561056857600080fd5b506101f1610577366004611a96565b60066020526000908152604090205481565b34801561059557600080fd5b506101f160045481565b3480156105ab57600080fd5b506101f16105ba366004611a96565b60086020526000908152604090205481565b3480156105d857600080fd5b506101f160025481565b3480156105ee57600080fd5b506102da6105fd366004611b7e565b610d4e565b34801561060e57600080fd5b506101f1670de0b6b3a764000081565b34801561062a57600080fd5b506101f160055481565b34801561064057600080fd5b506102da61064f366004611a96565b610d7c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a76400009061069761074a565b6106a19190611c83565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546106d19190611c96565b6106db9190611cdc565b6106e59190611cf0565b92915050565b60006106e5826106f9610d97565b90610dc5565b61074661070a610e9f565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea992505050565b5050565b60015460009080820361075f57505060045490565b80670de0b6b3a7640000600354600254610777610c9f565b6107819190611c83565b61078b9190611c96565b6107959190611c96565b61079f9190611cdc565b6004546107ac9190611cf0565b91505090565b60016107e86107bf610e9f565b8285856040516020016107d493929190611d03565b604051602081830303815290604052610f95565b505050565b60006107f7610e9f565b905061080b81610805611081565b906110af565b6107e883838361081961111a565b929190611148565b600061082b610e9f565b90506108368161121f565b600061084182610654565b905080156107465773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812081905561087b83836112ad565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd582846040516108c5929190611dc7565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610943576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061099986828760405160200161095d91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526107d49291602001611de9565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b60006109cf610e9f565b9050610a057f7265776172646572000000000000000000000000000000000000000000000000826109fe61111a565b91906112b9565b82600003610a3f576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610a79576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a83600061121f565b60055460009081610a948542611cf0565b9050814210610b11576000610aa98688611cdc565b9050868682610af2576040517f99e66a49000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044015b60405180910390fd5b50506003819055610b038688611e0c565b60058390559350610c3a9050565b818111610ba057610b224283611c83565b94506000610b308688611cdc565b9050868682610b74576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ae9565b50508060036000828254610b889190611cf0565b90915550610b9890508688611e0c565b935050610c3a565b610baa8587611cdc565b86908690610bed576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ae9565b5060009050610bfc4284611c83565b600354610c099190611c96565b90506000610c178883611cf0565b9050610c238782611cdc565b600355610c308782611e0c565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610cb257806107ac565b4291505090565b610cd4610cc4610e9f565b82610ccd61111a565b919061133f565b50565b6000610cfe610ce4611081565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000610d478383610d1261111a565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b6000610d58610e9f565b9050610d6681610805611081565b6107e8838383610d7461111a565b9291906113e3565b610cd4610d87610e9f565b82610d90611081565b91906114ad565b6000806106e560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c83565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e15575060006106e5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e66575060016106e5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610cfe6115c1565b610eb28261121f565b6000610ebe838361170e565b905080600003610efa576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610f0c9190611c83565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290610f46908490611c83565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e83836040516108c5929190611dc7565b610f9e8261121f565b6000610faa8383611767565b905080600003610fe6576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610ff89190611cf0565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290611032908490611cf0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e83836040516108c5929190611dc7565b6000806106e560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c83565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610746576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610ae9565b6000806106e560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611c83565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166112195760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b61122761074a565b6004556005544210158061123c575060015415155b1561124d57611249610c9f565b6002555b73ffffffffffffffffffffffffffffffffffffffff811615610cd45761127281610654565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b6060610d4783836117ea565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166107e8576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610ae9565b61134a8382846112b9565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156112195760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611210565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461151a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610ae9565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112195783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6000333214806115d15750601836105b156115db57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806116fd57506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa1580156116d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fd9190611e30565b1561170757919050565b3391505090565b6000818060200190518101906117249190611e4b565b90506106e573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483611902565b6000806000838060200190518101906117809190611e93565b91509150808060200190518101906117989190611e4b565b925081156117e2576117e273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016863086611983565b505092915050565b6060816040516020016117ff91815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b1580156118e457600080fd5b505af11580156118f8573d6000803e3d6000fd5b5050505092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390526107e891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c9565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526112199186918216906323b872dd9060840161193c565b600080602060008451602086016000885af1806119ec576040513d6000823e3d81fd5b50506000513d91508115611a04578060011415611a1e565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611219576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610ae9565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a9157600080fd5b919050565b600060208284031215611aa857600080fd5b610d4782611a6d565b600060208284031215611ac357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4757600080fd5b60008083601f840112611b0557600080fd5b50813567ffffffffffffffff811115611b1d57600080fd5b602083019150836020828501011115611b3557600080fd5b9250929050565b60008060208385031215611b4f57600080fd5b823567ffffffffffffffff811115611b6657600080fd5b611b7285828601611af3565b90969095509350505050565b60008060408385031215611b9157600080fd5b82359150611ba160208401611a6d565b90509250929050565b600080600080600060808688031215611bc257600080fd5b611bcb86611a6d565b9450611bd960208701611a6d565b935060408601359250606086013567ffffffffffffffff811115611bfc57600080fd5b611c0888828901611af3565b969995985093965092949392505050565b60008060408385031215611c2c57600080fd5b50508035926020909101359150565b600060208284031215611c4d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156106e5576106e5611c54565b80820281158282048414176106e5576106e5611c54565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611ceb57611ceb611cad565b500490565b808201808211156106e5576106e5611c54565b831515815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60005b83811015611d74578181015183820152602001611d5c565b50506000910152565b60008151808452611d95816020860160208601611d59565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000611dda6040830185611d7d565b90508260208301529392505050565b8215158152604060208201526000611e046040830184611d7d565b949350505050565b600082611e1b57611e1b611cad565b500690565b80518015158114611a9157600080fd5b600060208284031215611e4257600080fd5b610d4782611e20565b600060208284031215611e5d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215611ea657600080fd5b611eaf83611e20565b9150602083015167ffffffffffffffff811115611ecb57600080fd5b8301601f81018513611edc57600080fd5b805167ffffffffffffffff811115611ef657611ef6611e64565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715611f6257611f62611e64565b604052818152828201602001871015611f7a57600080fd5b611f8b826020830160208601611d59565b809350505050925092905056fea26469706673582212208df611c883551c6a1cff0792d02ce7e88c6a7c3b8fa0ccfdb0cef41e4984126a64736f6c634300081c0033","opcodes":"PUSH2 0x100 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x229B CODESIZE SUB DUP1 PUSH2 0x229B DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x30 SWAP2 PUSH2 0x1E6 JUMP JUMPDEST DUP3 DUP3 DUP6 DUP4 DUP1 DUP1 DUP1 CALLER PUSH2 0x4A DUP2 PUSH2 0x44 PUSH2 0xA1 JUMP JUMPDEST SWAP1 PUSH2 0xD5 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SWAP1 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND PUSH1 0x80 MSTORE PUSH2 0x7E SWAP3 POP PUSH4 0x4FC35859 PUSH1 0xE0 SHL SWAP2 POP PUSH2 0x77 PUSH2 0x144 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x172 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0xA0 MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 0xC0 MSTORE PUSH1 0xE0 MSTORE POP PUSH2 0x25C SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x23B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x12B JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH2 0x140 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH2 0x77 PUSH2 0x144 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xCF PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x23B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH2 0x1A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH2 0x207 DUP2 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH2 0x218 DUP2 PUSH2 0x1CE JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD PUSH1 0x60 DUP8 ADD MLOAD SWAP2 SWAP5 POP SWAP3 POP PUSH2 0x230 DUP2 PUSH2 0x1CE JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0xCF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x1FCE PUSH2 0x2CD PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x2EE ADD MSTORE PUSH2 0x1877 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x37D ADD MSTORE PUSH2 0x18A0 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x246 ADD MSTORE DUP2 DUP2 PUSH2 0x8EC ADD MSTORE DUP2 DUP2 PUSH2 0x1740 ADD MSTORE PUSH2 0x17BA ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x31F ADD MSTORE DUP2 DUP2 PUSH2 0x442 ADD MSTORE DUP2 DUP2 PUSH2 0x1604 ADD MSTORE PUSH2 0x1692 ADD MSTORE PUSH2 0x1FCE PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x98807D84 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x602 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x61E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98807D84 EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x589 JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8580CF76 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x4D3 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x3BF JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x700037D GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH2 0x654 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB1 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x6FF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x268 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x74A JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x7B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x821 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F4 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAA JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x48D CALLDATASIZE PUSH1 0x4 PUSH2 0x1C19 JUMP JUMPDEST PUSH2 0x9C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0xC9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0xCB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0xCD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x557 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x577 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x5FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xD4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x64F CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH2 0xD7C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x697 PUSH2 0x74A JUMP JUMPDEST PUSH2 0x6A1 SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6D1 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x6DB SWAP2 SWAP1 PUSH2 0x1CDC JUMP JUMPDEST PUSH2 0x6E5 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E5 DUP3 PUSH2 0x6F9 PUSH2 0xD97 JUMP JUMPDEST SWAP1 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x746 PUSH2 0x70A PUSH2 0xE9F JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xEA9 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x75F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x777 PUSH2 0xC9F JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST PUSH2 0x78B SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x79F SWAP2 SWAP1 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7AC SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x7E8 PUSH2 0x7BF PUSH2 0xE9F JUMP JUMPDEST DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF95 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F7 PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0x80B DUP2 PUSH2 0x805 PUSH2 0x1081 JUMP JUMPDEST SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x819 PUSH2 0x111A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82B PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0x836 DUP2 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x841 DUP3 PUSH2 0x654 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x746 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x87B DUP4 DUP4 PUSH2 0x12AD JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x943 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x999 DUP7 DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x95D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x7D4 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH2 0x1DE9 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0xA05 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x9FE PUSH2 0x111A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12B9 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xA3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA83 PUSH1 0x0 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xA94 DUP6 TIMESTAMP PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xB11 JUMPI PUSH1 0x0 PUSH2 0xAA9 DUP7 DUP9 PUSH2 0x1CDC JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xAF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xB03 DUP7 DUP9 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xC3A SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xBA0 JUMPI PUSH2 0xB22 TIMESTAMP DUP4 PUSH2 0x1C83 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xB30 DUP7 DUP9 PUSH2 0x1CDC JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB88 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB98 SWAP1 POP DUP7 DUP9 PUSH2 0x1E0C JUMP JUMPDEST SWAP4 POP POP PUSH2 0xC3A JUMP JUMPDEST PUSH2 0xBAA DUP6 DUP8 PUSH2 0x1CDC JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xBFC TIMESTAMP DUP5 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC17 DUP9 DUP4 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC23 DUP8 DUP3 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xC30 DUP8 DUP3 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xCB2 JUMPI DUP1 PUSH2 0x7AC JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xCD4 PUSH2 0xCC4 PUSH2 0xE9F JUMP JUMPDEST DUP3 PUSH2 0xCCD PUSH2 0x111A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x133F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCFE PUSH2 0xCE4 PUSH2 0x1081 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP4 DUP4 PUSH2 0xD12 PUSH2 0x111A JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD58 PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0xD66 DUP2 PUSH2 0x805 PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0xD74 PUSH2 0x111A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x13E3 JUMP JUMPDEST PUSH2 0xCD4 PUSH2 0xD87 PUSH2 0xE9F JUMP JUMPDEST DUP3 PUSH2 0xD90 PUSH2 0x1081 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE15 JUMPI POP PUSH1 0x0 PUSH2 0x6E5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE66 JUMPI POP PUSH1 0x1 PUSH2 0x6E5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCFE PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0xEB2 DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBE DUP4 DUP4 PUSH2 0x170E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xEFA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF0C SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xF46 SWAP1 DUP5 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAA DUP4 DUP4 PUSH2 0x1767 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xFE6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xFF8 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1032 SWAP1 DUP5 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C83 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x746 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1219 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1227 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x123C JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x124D JUMPI PUSH2 0x1249 PUSH2 0xC9F JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xCD4 JUMPI PUSH2 0x1272 DUP2 PUSH2 0x654 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD47 DUP4 DUP4 PUSH2 0x17EA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x134A DUP4 DUP3 DUP5 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1210 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x151A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1219 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x15D1 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x15DB JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x16FD JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16FD SWAP2 SWAP1 PUSH2 0x1E30 JUMP JUMPDEST ISZERO PUSH2 0x1707 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x1E4B JUMP JUMPDEST SWAP1 POP PUSH2 0x6E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x1902 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1780 SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1798 SWAP2 SWAP1 PUSH2 0x1E4B JUMP JUMPDEST SWAP3 POP DUP2 ISZERO PUSH2 0x17E2 JUMPI PUSH2 0x17E2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 ADDRESS DUP7 PUSH2 0x1983 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17FF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x7E8 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1219 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x193C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x19EC JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1A04 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1A1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1219 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD47 DUP3 PUSH2 0x1A6D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B72 DUP6 DUP3 DUP7 ADD PUSH2 0x1AF3 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1BA1 PUSH1 0x20 DUP5 ADD PUSH2 0x1A6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCB DUP7 PUSH2 0x1A6D JUMP JUMPDEST SWAP5 POP PUSH2 0x1BD9 PUSH1 0x20 DUP8 ADD PUSH2 0x1A6D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C08 DUP9 DUP3 DUP10 ADD PUSH2 0x1AF3 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CEB JUMPI PUSH2 0x1CEB PUSH2 0x1CAD JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D74 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D5C JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D95 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D59 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DDA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1D7D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1E04 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E1B JUMPI PUSH2 0x1E1B PUSH2 0x1CAD JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1A91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD47 DUP3 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EAF DUP4 PUSH2 0x1E20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EF6 JUMPI PUSH2 0x1EF6 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F62 JUMPI PUSH2 0x1F62 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x1F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F8B DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D59 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xF6 GT 0xC8 DUP4 SSTORE SHR PUSH11 0x1CFF0792D02CE7E88C6A7C EXTCODESIZE DUP16 LOG0 0xCC REVERT 0xB0 0xCE DELEGATECALL 0x1E BLOBHASH DUP5 SLT PUSH11 0x64736F6C634300081C0033 ","sourceMap":"713:869:40:-:0;;;816:278;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1057:14;1073:17;999:12;1013:17;;;;2176:10:24;1008:63:1;2176:10:24;1008:33:1;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;1857:1:35;2061:7;:21;;;-1:-1:-1;;;;;622:39:18;;;;;736:96:26;;-1:-1:-1;;;;793:32:26;-1:-1:-1;736:34:26;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;;648:28:25;;::::1;;::::0;391:32:41;;;;;;433:39;;-1:-1:-1;713:869:40;;-1:-1:-1;;;713:869:40;5060:174:12;5101:16;;920:71;990:1;928:58;920:71;:::i;:::-;912:80;5060:174;-1:-1:-1;;5060:174:12:o;1561:341::-;-1:-1:-1;;;;;1649:26:12;;;1645:152;;1691:30;;-1:-1:-1;;;;;;1691:30:12;-1:-1:-1;;;;;1691:30:12;;;;;;;1740:46;;-1:-1:-1;;1740:46:12;;-1:-1:-1;;1740:46:12;1645:152;1806:89;-1:-1:-1;;;1890:4:12;1806:34;:32;:34::i;:89::-;1561:341;;:::o;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:16;;;877:68;;925:20;;-1:-1:-1;;;925:20:16;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:16;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:16;;;;;;;;;;773:235::o;14:139:42:-;-1:-1:-1;;;;;97:31:42;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:663::-;313:6;321;329;337;390:3;378:9;369:7;365:23;361:33;358:53;;;407:1;404;397:12;358:53;439:9;433:16;458:39;491:5;458:39;:::i;:::-;566:2;551:18;;545:25;516:5;;-1:-1:-1;579:41:42;545:25;579:41;:::i;:::-;686:2;671:18;;665:25;735:2;720:18;;714:25;639:7;;-1:-1:-1;665:25:42;-1:-1:-1;748:41:42;714:25;748:41;:::i;:::-;158:663;;;;-1:-1:-1;158:663:42;;-1:-1:-1;;158:663:42:o;826:225::-;893:9;;;914:11;;;911:134;;;967:10;962:3;958:20;955:1;948:31;1002:4;999:1;992:15;1030:4;1027:1;1020:15;826:225;713:869:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEPOSIT_REASON_CODE_3289":{"entryPoint":null,"id":3289,"parameterSlots":0,"returnSlots":0},"@POINTS_CONTRACT_3287":{"entryPoint":null,"id":3287,"parameterSlots":0,"returnSlots":0},"@REWARDER_ROLE_1327":{"entryPoint":null,"id":1327,"parameterSlots":0,"returnSlots":0},"@SCALING_FACTOR_1330":{"entryPoint":null,"id":1330,"parameterSlots":0,"returnSlots":0},"@STAKING_TOKEN_1985":{"entryPoint":null,"id":1985,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_2770":{"entryPoint":6601,"id":2770,"parameterSlots":2,"returnSlots":0},"@_computeAddReward_3279":{"entryPoint":null,"id":3279,"parameterSlots":3,"returnSlots":0},"@_computeAddReward_3341":{"entryPoint":null,"id":3341,"parameterSlots":3,"returnSlots":0},"@_computeClaim_3258":{"entryPoint":4781,"id":3258,"parameterSlots":2,"returnSlots":1},"@_computeClaim_3331":{"entryPoint":6122,"id":3331,"parameterSlots":2,"returnSlots":1},"@_computeStake_2120":{"entryPoint":5991,"id":2120,"parameterSlots":2,"returnSlots":1},"@_computeWithdraw_2161":{"entryPoint":5902,"id":2161,"parameterSlots":2,"returnSlots":1},"@_msgSender_1123":{"entryPoint":5569,"id":1123,"parameterSlots":0,"returnSlots":1},"@_msgSender_1948":{"entryPoint":3743,"id":1948,"parameterSlots":0,"returnSlots":1},"@_stake_1601":{"entryPoint":3989,"id":1601,"parameterSlots":2,"returnSlots":0},"@_updateReward_1462":{"entryPoint":4639,"id":1462,"parameterSlots":1,"returnSlots":0},"@_withdraw_1658":{"entryPoint":3753,"id":1658,"parameterSlots":2,"returnSlots":0},"@addReward_1898":{"entryPoint":2501,"id":1898,"parameterSlots":2,"returnSlots":0},"@claim_1701":{"entryPoint":2081,"id":1701,"parameterSlots":0,"returnSlots":0},"@distributionEnd_1340":{"entryPoint":null,"id":1340,"parameterSlots":0,"returnSlots":0},"@earned_1541":{"entryPoint":1620,"id":1541,"parameterSlots":1,"returnSlots":1},"@enforceHasRole_556":{"entryPoint":4793,"id":556,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_818":{"entryPoint":4271,"id":818,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1031":{"entryPoint":null,"id":1031,"parameterSlots":0,"returnSlots":1},"@grantRole_409":{"entryPoint":4424,"id":409,"parameterSlots":4,"returnSlots":0},"@grantRole_99":{"entryPoint":2029,"id":99,"parameterSlots":2,"returnSlots":0},"@hasRole_167":{"entryPoint":3331,"id":167,"parameterSlots":2,"returnSlots":1},"@hasRole_502":{"entryPoint":null,"id":502,"parameterSlots":3,"returnSlots":1},"@isTrustedForwarder_1047":{"entryPoint":null,"id":1047,"parameterSlots":1,"returnSlots":1},"@lastTimeRewardApplicable_1481":{"entryPoint":3231,"id":1481,"parameterSlots":0,"returnSlots":1},"@lastUpdated_1334":{"entryPoint":null,"id":1334,"parameterSlots":0,"returnSlots":0},"@layout_592":{"entryPoint":4378,"id":592,"parameterSlots":0,"returnSlots":1},"@layout_850":{"entryPoint":4225,"id":850,"parameterSlots":0,"returnSlots":1},"@layout_998":{"entryPoint":3479,"id":998,"parameterSlots":0,"returnSlots":1},"@msgSender_1215":{"entryPoint":null,"id":1215,"parameterSlots":0,"returnSlots":1},"@onERC20Received_2050":{"entryPoint":2258,"id":2050,"parameterSlots":5,"returnSlots":1},"@owner_198":{"entryPoint":3287,"id":198,"parameterSlots":0,"returnSlots":1},"@owner_771":{"entryPoint":null,"id":771,"parameterSlots":1,"returnSlots":1},"@renounceRole_148":{"entryPoint":3257,"id":148,"parameterSlots":1,"returnSlots":0},"@renounceRole_481":{"entryPoint":4927,"id":481,"parameterSlots":3,"returnSlots":0},"@revokeRole_131":{"entryPoint":3406,"id":131,"parameterSlots":2,"returnSlots":0},"@revokeRole_446":{"entryPoint":5091,"id":446,"parameterSlots":4,"returnSlots":0},"@rewardPerStakePointPaid_1352":{"entryPoint":null,"id":1352,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePointStored_1338":{"entryPoint":null,"id":1338,"parameterSlots":0,"returnSlots":0},"@rewardPerStakePoint_1514":{"entryPoint":1866,"id":1514,"parameterSlots":0,"returnSlots":1},"@rewardRate_1336":{"entryPoint":null,"id":1336,"parameterSlots":0,"returnSlots":0},"@rewards_1348":{"entryPoint":null,"id":1348,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_2475":{"entryPoint":6531,"id":2475,"parameterSlots":4,"returnSlots":0},"@safeTransfer_2448":{"entryPoint":6402,"id":2448,"parameterSlots":3,"returnSlots":0},"@stake_2071":{"entryPoint":1970,"id":2071,"parameterSlots":2,"returnSlots":0},"@staked_1344":{"entryPoint":null,"id":1344,"parameterSlots":0,"returnSlots":0},"@supportsInterface_880":{"entryPoint":1771,"id":880,"parameterSlots":1,"returnSlots":1},"@supportsInterface_986":{"entryPoint":3525,"id":986,"parameterSlots":2,"returnSlots":1},"@totalStaked_1332":{"entryPoint":null,"id":1332,"parameterSlots":0,"returnSlots":0},"@transferOwnership_215":{"entryPoint":3452,"id":215,"parameterSlots":1,"returnSlots":0},"@transferOwnership_758":{"entryPoint":5293,"id":758,"parameterSlots":3,"returnSlots":0},"@withdraw_2133":{"entryPoint":1791,"id":2133,"parameterSlots":2,"returnSlots":0},"abi_decode_address":{"entryPoint":6765,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bool_fromMemory":{"entryPoint":7712,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_bytes_calldata":{"entryPoint":6899,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":6806,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":7082,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":7728,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory":{"entryPoint":7827,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32":{"entryPoint":7227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":7038,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6833,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":6972,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":7755,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256t_uint256":{"entryPoint":7193,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_bytes":{"entryPoint":7549,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7427,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":7657,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":7623,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":7408,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":7388,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":7318,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":7299,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":7513,"id":null,"parameterSlots":3,"returnSlots":0},"mod_t_uint256":{"entryPoint":7692,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x11":{"entryPoint":7252,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x12":{"entryPoint":7341,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7780,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:12375:42","nodeType":"YulBlock","src":"0:12375:42","statements":[{"nativeSrc":"6:3:42","nodeType":"YulBlock","src":"6:3:42","statements":[]},{"body":{"nativeSrc":"63:147:42","nodeType":"YulBlock","src":"63:147:42","statements":[{"nativeSrc":"73:29:42","nodeType":"YulAssignment","src":"73:29:42","value":{"arguments":[{"name":"offset","nativeSrc":"95:6:42","nodeType":"YulIdentifier","src":"95:6:42"}],"functionName":{"name":"calldataload","nativeSrc":"82:12:42","nodeType":"YulIdentifier","src":"82:12:42"},"nativeSrc":"82:20:42","nodeType":"YulFunctionCall","src":"82:20:42"},"variableNames":[{"name":"value","nativeSrc":"73:5:42","nodeType":"YulIdentifier","src":"73:5:42"}]},{"body":{"nativeSrc":"188:16:42","nodeType":"YulBlock","src":"188:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"197:1:42","nodeType":"YulLiteral","src":"197:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"200:1:42","nodeType":"YulLiteral","src":"200:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"190:6:42","nodeType":"YulIdentifier","src":"190:6:42"},"nativeSrc":"190:12:42","nodeType":"YulFunctionCall","src":"190:12:42"},"nativeSrc":"190:12:42","nodeType":"YulExpressionStatement","src":"190:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"124:5:42","nodeType":"YulIdentifier","src":"124:5:42"},{"arguments":[{"name":"value","nativeSrc":"135:5:42","nodeType":"YulIdentifier","src":"135:5:42"},{"kind":"number","nativeSrc":"142:42:42","nodeType":"YulLiteral","src":"142:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"131:3:42","nodeType":"YulIdentifier","src":"131:3:42"},"nativeSrc":"131:54:42","nodeType":"YulFunctionCall","src":"131:54:42"}],"functionName":{"name":"eq","nativeSrc":"121:2:42","nodeType":"YulIdentifier","src":"121:2:42"},"nativeSrc":"121:65:42","nodeType":"YulFunctionCall","src":"121:65:42"}],"functionName":{"name":"iszero","nativeSrc":"114:6:42","nodeType":"YulIdentifier","src":"114:6:42"},"nativeSrc":"114:73:42","nodeType":"YulFunctionCall","src":"114:73:42"},"nativeSrc":"111:93:42","nodeType":"YulIf","src":"111:93:42"}]},"name":"abi_decode_address","nativeSrc":"14:196:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"42:6:42","nodeType":"YulTypedName","src":"42:6:42","type":""}],"returnVariables":[{"name":"value","nativeSrc":"53:5:42","nodeType":"YulTypedName","src":"53:5:42","type":""}],"src":"14:196:42"},{"body":{"nativeSrc":"285:116:42","nodeType":"YulBlock","src":"285:116:42","statements":[{"body":{"nativeSrc":"331:16:42","nodeType":"YulBlock","src":"331:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"340:1:42","nodeType":"YulLiteral","src":"340:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"343:1:42","nodeType":"YulLiteral","src":"343:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"333:6:42","nodeType":"YulIdentifier","src":"333:6:42"},"nativeSrc":"333:12:42","nodeType":"YulFunctionCall","src":"333:12:42"},"nativeSrc":"333:12:42","nodeType":"YulExpressionStatement","src":"333:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"306:7:42","nodeType":"YulIdentifier","src":"306:7:42"},{"name":"headStart","nativeSrc":"315:9:42","nodeType":"YulIdentifier","src":"315:9:42"}],"functionName":{"name":"sub","nativeSrc":"302:3:42","nodeType":"YulIdentifier","src":"302:3:42"},"nativeSrc":"302:23:42","nodeType":"YulFunctionCall","src":"302:23:42"},{"kind":"number","nativeSrc":"327:2:42","nodeType":"YulLiteral","src":"327:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"298:3:42","nodeType":"YulIdentifier","src":"298:3:42"},"nativeSrc":"298:32:42","nodeType":"YulFunctionCall","src":"298:32:42"},"nativeSrc":"295:52:42","nodeType":"YulIf","src":"295:52:42"},{"nativeSrc":"356:39:42","nodeType":"YulAssignment","src":"356:39:42","value":{"arguments":[{"name":"headStart","nativeSrc":"385:9:42","nodeType":"YulIdentifier","src":"385:9:42"}],"functionName":{"name":"abi_decode_address","nativeSrc":"366:18:42","nodeType":"YulIdentifier","src":"366:18:42"},"nativeSrc":"366:29:42","nodeType":"YulFunctionCall","src":"366:29:42"},"variableNames":[{"name":"value0","nativeSrc":"356:6:42","nodeType":"YulIdentifier","src":"356:6:42"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"215:186:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"251:9:42","nodeType":"YulTypedName","src":"251:9:42","type":""},{"name":"dataEnd","nativeSrc":"262:7:42","nodeType":"YulTypedName","src":"262:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"274:6:42","nodeType":"YulTypedName","src":"274:6:42","type":""}],"src":"215:186:42"},{"body":{"nativeSrc":"507:76:42","nodeType":"YulBlock","src":"507:76:42","statements":[{"nativeSrc":"517:26:42","nodeType":"YulAssignment","src":"517:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"529:9:42","nodeType":"YulIdentifier","src":"529:9:42"},{"kind":"number","nativeSrc":"540:2:42","nodeType":"YulLiteral","src":"540:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"525:3:42","nodeType":"YulIdentifier","src":"525:3:42"},"nativeSrc":"525:18:42","nodeType":"YulFunctionCall","src":"525:18:42"},"variableNames":[{"name":"tail","nativeSrc":"517:4:42","nodeType":"YulIdentifier","src":"517:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"559:9:42","nodeType":"YulIdentifier","src":"559:9:42"},{"name":"value0","nativeSrc":"570:6:42","nodeType":"YulIdentifier","src":"570:6:42"}],"functionName":{"name":"mstore","nativeSrc":"552:6:42","nodeType":"YulIdentifier","src":"552:6:42"},"nativeSrc":"552:25:42","nodeType":"YulFunctionCall","src":"552:25:42"},"nativeSrc":"552:25:42","nodeType":"YulExpressionStatement","src":"552:25:42"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"406:177:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"476:9:42","nodeType":"YulTypedName","src":"476:9:42","type":""},{"name":"value0","nativeSrc":"487:6:42","nodeType":"YulTypedName","src":"487:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"498:4:42","nodeType":"YulTypedName","src":"498:4:42","type":""}],"src":"406:177:42"},{"body":{"nativeSrc":"657:263:42","nodeType":"YulBlock","src":"657:263:42","statements":[{"body":{"nativeSrc":"703:16:42","nodeType":"YulBlock","src":"703:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"712:1:42","nodeType":"YulLiteral","src":"712:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"715:1:42","nodeType":"YulLiteral","src":"715:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"705:6:42","nodeType":"YulIdentifier","src":"705:6:42"},"nativeSrc":"705:12:42","nodeType":"YulFunctionCall","src":"705:12:42"},"nativeSrc":"705:12:42","nodeType":"YulExpressionStatement","src":"705:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"678:7:42","nodeType":"YulIdentifier","src":"678:7:42"},{"name":"headStart","nativeSrc":"687:9:42","nodeType":"YulIdentifier","src":"687:9:42"}],"functionName":{"name":"sub","nativeSrc":"674:3:42","nodeType":"YulIdentifier","src":"674:3:42"},"nativeSrc":"674:23:42","nodeType":"YulFunctionCall","src":"674:23:42"},{"kind":"number","nativeSrc":"699:2:42","nodeType":"YulLiteral","src":"699:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"670:3:42","nodeType":"YulIdentifier","src":"670:3:42"},"nativeSrc":"670:32:42","nodeType":"YulFunctionCall","src":"670:32:42"},"nativeSrc":"667:52:42","nodeType":"YulIf","src":"667:52:42"},{"nativeSrc":"728:36:42","nodeType":"YulVariableDeclaration","src":"728:36:42","value":{"arguments":[{"name":"headStart","nativeSrc":"754:9:42","nodeType":"YulIdentifier","src":"754:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"741:12:42","nodeType":"YulIdentifier","src":"741:12:42"},"nativeSrc":"741:23:42","nodeType":"YulFunctionCall","src":"741:23:42"},"variables":[{"name":"value","nativeSrc":"732:5:42","nodeType":"YulTypedName","src":"732:5:42","type":""}]},{"body":{"nativeSrc":"874:16:42","nodeType":"YulBlock","src":"874:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"883:1:42","nodeType":"YulLiteral","src":"883:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"886:1:42","nodeType":"YulLiteral","src":"886:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"876:6:42","nodeType":"YulIdentifier","src":"876:6:42"},"nativeSrc":"876:12:42","nodeType":"YulFunctionCall","src":"876:12:42"},"nativeSrc":"876:12:42","nodeType":"YulExpressionStatement","src":"876:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"786:5:42","nodeType":"YulIdentifier","src":"786:5:42"},{"arguments":[{"name":"value","nativeSrc":"797:5:42","nodeType":"YulIdentifier","src":"797:5:42"},{"kind":"number","nativeSrc":"804:66:42","nodeType":"YulLiteral","src":"804:66:42","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"793:3:42","nodeType":"YulIdentifier","src":"793:3:42"},"nativeSrc":"793:78:42","nodeType":"YulFunctionCall","src":"793:78:42"}],"functionName":{"name":"eq","nativeSrc":"783:2:42","nodeType":"YulIdentifier","src":"783:2:42"},"nativeSrc":"783:89:42","nodeType":"YulFunctionCall","src":"783:89:42"}],"functionName":{"name":"iszero","nativeSrc":"776:6:42","nodeType":"YulIdentifier","src":"776:6:42"},"nativeSrc":"776:97:42","nodeType":"YulFunctionCall","src":"776:97:42"},"nativeSrc":"773:117:42","nodeType":"YulIf","src":"773:117:42"},{"nativeSrc":"899:15:42","nodeType":"YulAssignment","src":"899:15:42","value":{"name":"value","nativeSrc":"909:5:42","nodeType":"YulIdentifier","src":"909:5:42"},"variableNames":[{"name":"value0","nativeSrc":"899:6:42","nodeType":"YulIdentifier","src":"899:6:42"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"588:332:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"623:9:42","nodeType":"YulTypedName","src":"623:9:42","type":""},{"name":"dataEnd","nativeSrc":"634:7:42","nodeType":"YulTypedName","src":"634:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"646:6:42","nodeType":"YulTypedName","src":"646:6:42","type":""}],"src":"588:332:42"},{"body":{"nativeSrc":"1020:92:42","nodeType":"YulBlock","src":"1020:92:42","statements":[{"nativeSrc":"1030:26:42","nodeType":"YulAssignment","src":"1030:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1042:9:42","nodeType":"YulIdentifier","src":"1042:9:42"},{"kind":"number","nativeSrc":"1053:2:42","nodeType":"YulLiteral","src":"1053:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1038:3:42","nodeType":"YulIdentifier","src":"1038:3:42"},"nativeSrc":"1038:18:42","nodeType":"YulFunctionCall","src":"1038:18:42"},"variableNames":[{"name":"tail","nativeSrc":"1030:4:42","nodeType":"YulIdentifier","src":"1030:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1072:9:42","nodeType":"YulIdentifier","src":"1072:9:42"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"1097:6:42","nodeType":"YulIdentifier","src":"1097:6:42"}],"functionName":{"name":"iszero","nativeSrc":"1090:6:42","nodeType":"YulIdentifier","src":"1090:6:42"},"nativeSrc":"1090:14:42","nodeType":"YulFunctionCall","src":"1090:14:42"}],"functionName":{"name":"iszero","nativeSrc":"1083:6:42","nodeType":"YulIdentifier","src":"1083:6:42"},"nativeSrc":"1083:22:42","nodeType":"YulFunctionCall","src":"1083:22:42"}],"functionName":{"name":"mstore","nativeSrc":"1065:6:42","nodeType":"YulIdentifier","src":"1065:6:42"},"nativeSrc":"1065:41:42","nodeType":"YulFunctionCall","src":"1065:41:42"},"nativeSrc":"1065:41:42","nodeType":"YulExpressionStatement","src":"1065:41:42"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"925:187:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"989:9:42","nodeType":"YulTypedName","src":"989:9:42","type":""},{"name":"value0","nativeSrc":"1000:6:42","nodeType":"YulTypedName","src":"1000:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1011:4:42","nodeType":"YulTypedName","src":"1011:4:42","type":""}],"src":"925:187:42"},{"body":{"nativeSrc":"1233:125:42","nodeType":"YulBlock","src":"1233:125:42","statements":[{"nativeSrc":"1243:26:42","nodeType":"YulAssignment","src":"1243:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1255:9:42","nodeType":"YulIdentifier","src":"1255:9:42"},{"kind":"number","nativeSrc":"1266:2:42","nodeType":"YulLiteral","src":"1266:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1251:3:42","nodeType":"YulIdentifier","src":"1251:3:42"},"nativeSrc":"1251:18:42","nodeType":"YulFunctionCall","src":"1251:18:42"},"variableNames":[{"name":"tail","nativeSrc":"1243:4:42","nodeType":"YulIdentifier","src":"1243:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1285:9:42","nodeType":"YulIdentifier","src":"1285:9:42"},{"arguments":[{"name":"value0","nativeSrc":"1300:6:42","nodeType":"YulIdentifier","src":"1300:6:42"},{"kind":"number","nativeSrc":"1308:42:42","nodeType":"YulLiteral","src":"1308:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1296:3:42","nodeType":"YulIdentifier","src":"1296:3:42"},"nativeSrc":"1296:55:42","nodeType":"YulFunctionCall","src":"1296:55:42"}],"functionName":{"name":"mstore","nativeSrc":"1278:6:42","nodeType":"YulIdentifier","src":"1278:6:42"},"nativeSrc":"1278:74:42","nodeType":"YulFunctionCall","src":"1278:74:42"},"nativeSrc":"1278:74:42","nodeType":"YulExpressionStatement","src":"1278:74:42"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed","nativeSrc":"1117:241:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1202:9:42","nodeType":"YulTypedName","src":"1202:9:42","type":""},{"name":"value0","nativeSrc":"1213:6:42","nodeType":"YulTypedName","src":"1213:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1224:4:42","nodeType":"YulTypedName","src":"1224:4:42","type":""}],"src":"1117:241:42"},{"body":{"nativeSrc":"1435:275:42","nodeType":"YulBlock","src":"1435:275:42","statements":[{"body":{"nativeSrc":"1484:16:42","nodeType":"YulBlock","src":"1484:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1493:1:42","nodeType":"YulLiteral","src":"1493:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1496:1:42","nodeType":"YulLiteral","src":"1496:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1486:6:42","nodeType":"YulIdentifier","src":"1486:6:42"},"nativeSrc":"1486:12:42","nodeType":"YulFunctionCall","src":"1486:12:42"},"nativeSrc":"1486:12:42","nodeType":"YulExpressionStatement","src":"1486:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1463:6:42","nodeType":"YulIdentifier","src":"1463:6:42"},{"kind":"number","nativeSrc":"1471:4:42","nodeType":"YulLiteral","src":"1471:4:42","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1459:3:42","nodeType":"YulIdentifier","src":"1459:3:42"},"nativeSrc":"1459:17:42","nodeType":"YulFunctionCall","src":"1459:17:42"},{"name":"end","nativeSrc":"1478:3:42","nodeType":"YulIdentifier","src":"1478:3:42"}],"functionName":{"name":"slt","nativeSrc":"1455:3:42","nodeType":"YulIdentifier","src":"1455:3:42"},"nativeSrc":"1455:27:42","nodeType":"YulFunctionCall","src":"1455:27:42"}],"functionName":{"name":"iszero","nativeSrc":"1448:6:42","nodeType":"YulIdentifier","src":"1448:6:42"},"nativeSrc":"1448:35:42","nodeType":"YulFunctionCall","src":"1448:35:42"},"nativeSrc":"1445:55:42","nodeType":"YulIf","src":"1445:55:42"},{"nativeSrc":"1509:30:42","nodeType":"YulAssignment","src":"1509:30:42","value":{"arguments":[{"name":"offset","nativeSrc":"1532:6:42","nodeType":"YulIdentifier","src":"1532:6:42"}],"functionName":{"name":"calldataload","nativeSrc":"1519:12:42","nodeType":"YulIdentifier","src":"1519:12:42"},"nativeSrc":"1519:20:42","nodeType":"YulFunctionCall","src":"1519:20:42"},"variableNames":[{"name":"length","nativeSrc":"1509:6:42","nodeType":"YulIdentifier","src":"1509:6:42"}]},{"body":{"nativeSrc":"1582:16:42","nodeType":"YulBlock","src":"1582:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1591:1:42","nodeType":"YulLiteral","src":"1591:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1594:1:42","nodeType":"YulLiteral","src":"1594:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1584:6:42","nodeType":"YulIdentifier","src":"1584:6:42"},"nativeSrc":"1584:12:42","nodeType":"YulFunctionCall","src":"1584:12:42"},"nativeSrc":"1584:12:42","nodeType":"YulExpressionStatement","src":"1584:12:42"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1554:6:42","nodeType":"YulIdentifier","src":"1554:6:42"},{"kind":"number","nativeSrc":"1562:18:42","nodeType":"YulLiteral","src":"1562:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1551:2:42","nodeType":"YulIdentifier","src":"1551:2:42"},"nativeSrc":"1551:30:42","nodeType":"YulFunctionCall","src":"1551:30:42"},"nativeSrc":"1548:50:42","nodeType":"YulIf","src":"1548:50:42"},{"nativeSrc":"1607:29:42","nodeType":"YulAssignment","src":"1607:29:42","value":{"arguments":[{"name":"offset","nativeSrc":"1623:6:42","nodeType":"YulIdentifier","src":"1623:6:42"},{"kind":"number","nativeSrc":"1631:4:42","nodeType":"YulLiteral","src":"1631:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1619:3:42","nodeType":"YulIdentifier","src":"1619:3:42"},"nativeSrc":"1619:17:42","nodeType":"YulFunctionCall","src":"1619:17:42"},"variableNames":[{"name":"arrayPos","nativeSrc":"1607:8:42","nodeType":"YulIdentifier","src":"1607:8:42"}]},{"body":{"nativeSrc":"1688:16:42","nodeType":"YulBlock","src":"1688:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1697:1:42","nodeType":"YulLiteral","src":"1697:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1700:1:42","nodeType":"YulLiteral","src":"1700:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1690:6:42","nodeType":"YulIdentifier","src":"1690:6:42"},"nativeSrc":"1690:12:42","nodeType":"YulFunctionCall","src":"1690:12:42"},"nativeSrc":"1690:12:42","nodeType":"YulExpressionStatement","src":"1690:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1659:6:42","nodeType":"YulIdentifier","src":"1659:6:42"},{"name":"length","nativeSrc":"1667:6:42","nodeType":"YulIdentifier","src":"1667:6:42"}],"functionName":{"name":"add","nativeSrc":"1655:3:42","nodeType":"YulIdentifier","src":"1655:3:42"},"nativeSrc":"1655:19:42","nodeType":"YulFunctionCall","src":"1655:19:42"},{"kind":"number","nativeSrc":"1676:4:42","nodeType":"YulLiteral","src":"1676:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1651:3:42","nodeType":"YulIdentifier","src":"1651:3:42"},"nativeSrc":"1651:30:42","nodeType":"YulFunctionCall","src":"1651:30:42"},{"name":"end","nativeSrc":"1683:3:42","nodeType":"YulIdentifier","src":"1683:3:42"}],"functionName":{"name":"gt","nativeSrc":"1648:2:42","nodeType":"YulIdentifier","src":"1648:2:42"},"nativeSrc":"1648:39:42","nodeType":"YulFunctionCall","src":"1648:39:42"},"nativeSrc":"1645:59:42","nodeType":"YulIf","src":"1645:59:42"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"1363:347:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"1398:6:42","nodeType":"YulTypedName","src":"1398:6:42","type":""},{"name":"end","nativeSrc":"1406:3:42","nodeType":"YulTypedName","src":"1406:3:42","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1414:8:42","nodeType":"YulTypedName","src":"1414:8:42","type":""},{"name":"length","nativeSrc":"1424:6:42","nodeType":"YulTypedName","src":"1424:6:42","type":""}],"src":"1363:347:42"},{"body":{"nativeSrc":"1804:320:42","nodeType":"YulBlock","src":"1804:320:42","statements":[{"body":{"nativeSrc":"1850:16:42","nodeType":"YulBlock","src":"1850:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1859:1:42","nodeType":"YulLiteral","src":"1859:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1862:1:42","nodeType":"YulLiteral","src":"1862:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1852:6:42","nodeType":"YulIdentifier","src":"1852:6:42"},"nativeSrc":"1852:12:42","nodeType":"YulFunctionCall","src":"1852:12:42"},"nativeSrc":"1852:12:42","nodeType":"YulExpressionStatement","src":"1852:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1825:7:42","nodeType":"YulIdentifier","src":"1825:7:42"},{"name":"headStart","nativeSrc":"1834:9:42","nodeType":"YulIdentifier","src":"1834:9:42"}],"functionName":{"name":"sub","nativeSrc":"1821:3:42","nodeType":"YulIdentifier","src":"1821:3:42"},"nativeSrc":"1821:23:42","nodeType":"YulFunctionCall","src":"1821:23:42"},{"kind":"number","nativeSrc":"1846:2:42","nodeType":"YulLiteral","src":"1846:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1817:3:42","nodeType":"YulIdentifier","src":"1817:3:42"},"nativeSrc":"1817:32:42","nodeType":"YulFunctionCall","src":"1817:32:42"},"nativeSrc":"1814:52:42","nodeType":"YulIf","src":"1814:52:42"},{"nativeSrc":"1875:37:42","nodeType":"YulVariableDeclaration","src":"1875:37:42","value":{"arguments":[{"name":"headStart","nativeSrc":"1902:9:42","nodeType":"YulIdentifier","src":"1902:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"1889:12:42","nodeType":"YulIdentifier","src":"1889:12:42"},"nativeSrc":"1889:23:42","nodeType":"YulFunctionCall","src":"1889:23:42"},"variables":[{"name":"offset","nativeSrc":"1879:6:42","nodeType":"YulTypedName","src":"1879:6:42","type":""}]},{"body":{"nativeSrc":"1955:16:42","nodeType":"YulBlock","src":"1955:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1964:1:42","nodeType":"YulLiteral","src":"1964:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"1967:1:42","nodeType":"YulLiteral","src":"1967:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1957:6:42","nodeType":"YulIdentifier","src":"1957:6:42"},"nativeSrc":"1957:12:42","nodeType":"YulFunctionCall","src":"1957:12:42"},"nativeSrc":"1957:12:42","nodeType":"YulExpressionStatement","src":"1957:12:42"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1927:6:42","nodeType":"YulIdentifier","src":"1927:6:42"},{"kind":"number","nativeSrc":"1935:18:42","nodeType":"YulLiteral","src":"1935:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1924:2:42","nodeType":"YulIdentifier","src":"1924:2:42"},"nativeSrc":"1924:30:42","nodeType":"YulFunctionCall","src":"1924:30:42"},"nativeSrc":"1921:50:42","nodeType":"YulIf","src":"1921:50:42"},{"nativeSrc":"1980:84:42","nodeType":"YulVariableDeclaration","src":"1980:84:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2036:9:42","nodeType":"YulIdentifier","src":"2036:9:42"},{"name":"offset","nativeSrc":"2047:6:42","nodeType":"YulIdentifier","src":"2047:6:42"}],"functionName":{"name":"add","nativeSrc":"2032:3:42","nodeType":"YulIdentifier","src":"2032:3:42"},"nativeSrc":"2032:22:42","nodeType":"YulFunctionCall","src":"2032:22:42"},{"name":"dataEnd","nativeSrc":"2056:7:42","nodeType":"YulIdentifier","src":"2056:7:42"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2006:25:42","nodeType":"YulIdentifier","src":"2006:25:42"},"nativeSrc":"2006:58:42","nodeType":"YulFunctionCall","src":"2006:58:42"},"variables":[{"name":"value0_1","nativeSrc":"1984:8:42","nodeType":"YulTypedName","src":"1984:8:42","type":""},{"name":"value1_1","nativeSrc":"1994:8:42","nodeType":"YulTypedName","src":"1994:8:42","type":""}]},{"nativeSrc":"2073:18:42","nodeType":"YulAssignment","src":"2073:18:42","value":{"name":"value0_1","nativeSrc":"2083:8:42","nodeType":"YulIdentifier","src":"2083:8:42"},"variableNames":[{"name":"value0","nativeSrc":"2073:6:42","nodeType":"YulIdentifier","src":"2073:6:42"}]},{"nativeSrc":"2100:18:42","nodeType":"YulAssignment","src":"2100:18:42","value":{"name":"value1_1","nativeSrc":"2110:8:42","nodeType":"YulIdentifier","src":"2110:8:42"},"variableNames":[{"name":"value1","nativeSrc":"2100:6:42","nodeType":"YulIdentifier","src":"2100:6:42"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nativeSrc":"1715:409:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1762:9:42","nodeType":"YulTypedName","src":"1762:9:42","type":""},{"name":"dataEnd","nativeSrc":"1773:7:42","nodeType":"YulTypedName","src":"1773:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1785:6:42","nodeType":"YulTypedName","src":"1785:6:42","type":""},{"name":"value1","nativeSrc":"1793:6:42","nodeType":"YulTypedName","src":"1793:6:42","type":""}],"src":"1715:409:42"},{"body":{"nativeSrc":"2230:76:42","nodeType":"YulBlock","src":"2230:76:42","statements":[{"nativeSrc":"2240:26:42","nodeType":"YulAssignment","src":"2240:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2252:9:42","nodeType":"YulIdentifier","src":"2252:9:42"},{"kind":"number","nativeSrc":"2263:2:42","nodeType":"YulLiteral","src":"2263:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2248:3:42","nodeType":"YulIdentifier","src":"2248:3:42"},"nativeSrc":"2248:18:42","nodeType":"YulFunctionCall","src":"2248:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2240:4:42","nodeType":"YulIdentifier","src":"2240:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2282:9:42","nodeType":"YulIdentifier","src":"2282:9:42"},{"name":"value0","nativeSrc":"2293:6:42","nodeType":"YulIdentifier","src":"2293:6:42"}],"functionName":{"name":"mstore","nativeSrc":"2275:6:42","nodeType":"YulIdentifier","src":"2275:6:42"},"nativeSrc":"2275:25:42","nodeType":"YulFunctionCall","src":"2275:25:42"},"nativeSrc":"2275:25:42","nodeType":"YulExpressionStatement","src":"2275:25:42"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"2129:177:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2199:9:42","nodeType":"YulTypedName","src":"2199:9:42","type":""},{"name":"value0","nativeSrc":"2210:6:42","nodeType":"YulTypedName","src":"2210:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2221:4:42","nodeType":"YulTypedName","src":"2221:4:42","type":""}],"src":"2129:177:42"},{"body":{"nativeSrc":"2439:125:42","nodeType":"YulBlock","src":"2439:125:42","statements":[{"nativeSrc":"2449:26:42","nodeType":"YulAssignment","src":"2449:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2461:9:42","nodeType":"YulIdentifier","src":"2461:9:42"},{"kind":"number","nativeSrc":"2472:2:42","nodeType":"YulLiteral","src":"2472:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2457:3:42","nodeType":"YulIdentifier","src":"2457:3:42"},"nativeSrc":"2457:18:42","nodeType":"YulFunctionCall","src":"2457:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2449:4:42","nodeType":"YulIdentifier","src":"2449:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2491:9:42","nodeType":"YulIdentifier","src":"2491:9:42"},{"arguments":[{"name":"value0","nativeSrc":"2506:6:42","nodeType":"YulIdentifier","src":"2506:6:42"},{"kind":"number","nativeSrc":"2514:42:42","nodeType":"YulLiteral","src":"2514:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2502:3:42","nodeType":"YulIdentifier","src":"2502:3:42"},"nativeSrc":"2502:55:42","nodeType":"YulFunctionCall","src":"2502:55:42"}],"functionName":{"name":"mstore","nativeSrc":"2484:6:42","nodeType":"YulIdentifier","src":"2484:6:42"},"nativeSrc":"2484:74:42","nodeType":"YulFunctionCall","src":"2484:74:42"},"nativeSrc":"2484:74:42","nodeType":"YulExpressionStatement","src":"2484:74:42"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed","nativeSrc":"2311:253:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2408:9:42","nodeType":"YulTypedName","src":"2408:9:42","type":""},{"name":"value0","nativeSrc":"2419:6:42","nodeType":"YulTypedName","src":"2419:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2430:4:42","nodeType":"YulTypedName","src":"2430:4:42","type":""}],"src":"2311:253:42"},{"body":{"nativeSrc":"2686:125:42","nodeType":"YulBlock","src":"2686:125:42","statements":[{"nativeSrc":"2696:26:42","nodeType":"YulAssignment","src":"2696:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"2708:9:42","nodeType":"YulIdentifier","src":"2708:9:42"},{"kind":"number","nativeSrc":"2719:2:42","nodeType":"YulLiteral","src":"2719:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2704:3:42","nodeType":"YulIdentifier","src":"2704:3:42"},"nativeSrc":"2704:18:42","nodeType":"YulFunctionCall","src":"2704:18:42"},"variableNames":[{"name":"tail","nativeSrc":"2696:4:42","nodeType":"YulIdentifier","src":"2696:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2738:9:42","nodeType":"YulIdentifier","src":"2738:9:42"},{"arguments":[{"name":"value0","nativeSrc":"2753:6:42","nodeType":"YulIdentifier","src":"2753:6:42"},{"kind":"number","nativeSrc":"2761:42:42","nodeType":"YulLiteral","src":"2761:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2749:3:42","nodeType":"YulIdentifier","src":"2749:3:42"},"nativeSrc":"2749:55:42","nodeType":"YulFunctionCall","src":"2749:55:42"}],"functionName":{"name":"mstore","nativeSrc":"2731:6:42","nodeType":"YulIdentifier","src":"2731:6:42"},"nativeSrc":"2731:74:42","nodeType":"YulFunctionCall","src":"2731:74:42"},"nativeSrc":"2731:74:42","nodeType":"YulExpressionStatement","src":"2731:74:42"}]},"name":"abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed","nativeSrc":"2569:242:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2655:9:42","nodeType":"YulTypedName","src":"2655:9:42","type":""},{"name":"value0","nativeSrc":"2666:6:42","nodeType":"YulTypedName","src":"2666:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2677:4:42","nodeType":"YulTypedName","src":"2677:4:42","type":""}],"src":"2569:242:42"},{"body":{"nativeSrc":"2903:213:42","nodeType":"YulBlock","src":"2903:213:42","statements":[{"body":{"nativeSrc":"2949:16:42","nodeType":"YulBlock","src":"2949:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2958:1:42","nodeType":"YulLiteral","src":"2958:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"2961:1:42","nodeType":"YulLiteral","src":"2961:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2951:6:42","nodeType":"YulIdentifier","src":"2951:6:42"},"nativeSrc":"2951:12:42","nodeType":"YulFunctionCall","src":"2951:12:42"},"nativeSrc":"2951:12:42","nodeType":"YulExpressionStatement","src":"2951:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2924:7:42","nodeType":"YulIdentifier","src":"2924:7:42"},{"name":"headStart","nativeSrc":"2933:9:42","nodeType":"YulIdentifier","src":"2933:9:42"}],"functionName":{"name":"sub","nativeSrc":"2920:3:42","nodeType":"YulIdentifier","src":"2920:3:42"},"nativeSrc":"2920:23:42","nodeType":"YulFunctionCall","src":"2920:23:42"},{"kind":"number","nativeSrc":"2945:2:42","nodeType":"YulLiteral","src":"2945:2:42","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2916:3:42","nodeType":"YulIdentifier","src":"2916:3:42"},"nativeSrc":"2916:32:42","nodeType":"YulFunctionCall","src":"2916:32:42"},"nativeSrc":"2913:52:42","nodeType":"YulIf","src":"2913:52:42"},{"nativeSrc":"2974:14:42","nodeType":"YulVariableDeclaration","src":"2974:14:42","value":{"kind":"number","nativeSrc":"2987:1:42","nodeType":"YulLiteral","src":"2987:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"2978:5:42","nodeType":"YulTypedName","src":"2978:5:42","type":""}]},{"nativeSrc":"2997:32:42","nodeType":"YulAssignment","src":"2997:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"3019:9:42","nodeType":"YulIdentifier","src":"3019:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"3006:12:42","nodeType":"YulIdentifier","src":"3006:12:42"},"nativeSrc":"3006:23:42","nodeType":"YulFunctionCall","src":"3006:23:42"},"variableNames":[{"name":"value","nativeSrc":"2997:5:42","nodeType":"YulIdentifier","src":"2997:5:42"}]},{"nativeSrc":"3038:15:42","nodeType":"YulAssignment","src":"3038:15:42","value":{"name":"value","nativeSrc":"3048:5:42","nodeType":"YulIdentifier","src":"3048:5:42"},"variableNames":[{"name":"value0","nativeSrc":"3038:6:42","nodeType":"YulIdentifier","src":"3038:6:42"}]},{"nativeSrc":"3062:48:42","nodeType":"YulAssignment","src":"3062:48:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3095:9:42","nodeType":"YulIdentifier","src":"3095:9:42"},{"kind":"number","nativeSrc":"3106:2:42","nodeType":"YulLiteral","src":"3106:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3091:3:42","nodeType":"YulIdentifier","src":"3091:3:42"},"nativeSrc":"3091:18:42","nodeType":"YulFunctionCall","src":"3091:18:42"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3072:18:42","nodeType":"YulIdentifier","src":"3072:18:42"},"nativeSrc":"3072:38:42","nodeType":"YulFunctionCall","src":"3072:38:42"},"variableNames":[{"name":"value1","nativeSrc":"3062:6:42","nodeType":"YulIdentifier","src":"3062:6:42"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2816:300:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2861:9:42","nodeType":"YulTypedName","src":"2861:9:42","type":""},{"name":"dataEnd","nativeSrc":"2872:7:42","nodeType":"YulTypedName","src":"2872:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2884:6:42","nodeType":"YulTypedName","src":"2884:6:42","type":""},{"name":"value1","nativeSrc":"2892:6:42","nodeType":"YulTypedName","src":"2892:6:42","type":""}],"src":"2816:300:42"},{"body":{"nativeSrc":"3261:532:42","nodeType":"YulBlock","src":"3261:532:42","statements":[{"body":{"nativeSrc":"3308:16:42","nodeType":"YulBlock","src":"3308:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3317:1:42","nodeType":"YulLiteral","src":"3317:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"3320:1:42","nodeType":"YulLiteral","src":"3320:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3310:6:42","nodeType":"YulIdentifier","src":"3310:6:42"},"nativeSrc":"3310:12:42","nodeType":"YulFunctionCall","src":"3310:12:42"},"nativeSrc":"3310:12:42","nodeType":"YulExpressionStatement","src":"3310:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3282:7:42","nodeType":"YulIdentifier","src":"3282:7:42"},{"name":"headStart","nativeSrc":"3291:9:42","nodeType":"YulIdentifier","src":"3291:9:42"}],"functionName":{"name":"sub","nativeSrc":"3278:3:42","nodeType":"YulIdentifier","src":"3278:3:42"},"nativeSrc":"3278:23:42","nodeType":"YulFunctionCall","src":"3278:23:42"},{"kind":"number","nativeSrc":"3303:3:42","nodeType":"YulLiteral","src":"3303:3:42","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"3274:3:42","nodeType":"YulIdentifier","src":"3274:3:42"},"nativeSrc":"3274:33:42","nodeType":"YulFunctionCall","src":"3274:33:42"},"nativeSrc":"3271:53:42","nodeType":"YulIf","src":"3271:53:42"},{"nativeSrc":"3333:39:42","nodeType":"YulAssignment","src":"3333:39:42","value":{"arguments":[{"name":"headStart","nativeSrc":"3362:9:42","nodeType":"YulIdentifier","src":"3362:9:42"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3343:18:42","nodeType":"YulIdentifier","src":"3343:18:42"},"nativeSrc":"3343:29:42","nodeType":"YulFunctionCall","src":"3343:29:42"},"variableNames":[{"name":"value0","nativeSrc":"3333:6:42","nodeType":"YulIdentifier","src":"3333:6:42"}]},{"nativeSrc":"3381:48:42","nodeType":"YulAssignment","src":"3381:48:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3414:9:42","nodeType":"YulIdentifier","src":"3414:9:42"},{"kind":"number","nativeSrc":"3425:2:42","nodeType":"YulLiteral","src":"3425:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3410:3:42","nodeType":"YulIdentifier","src":"3410:3:42"},"nativeSrc":"3410:18:42","nodeType":"YulFunctionCall","src":"3410:18:42"}],"functionName":{"name":"abi_decode_address","nativeSrc":"3391:18:42","nodeType":"YulIdentifier","src":"3391:18:42"},"nativeSrc":"3391:38:42","nodeType":"YulFunctionCall","src":"3391:38:42"},"variableNames":[{"name":"value1","nativeSrc":"3381:6:42","nodeType":"YulIdentifier","src":"3381:6:42"}]},{"nativeSrc":"3438:14:42","nodeType":"YulVariableDeclaration","src":"3438:14:42","value":{"kind":"number","nativeSrc":"3451:1:42","nodeType":"YulLiteral","src":"3451:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"3442:5:42","nodeType":"YulTypedName","src":"3442:5:42","type":""}]},{"nativeSrc":"3461:41:42","nodeType":"YulAssignment","src":"3461:41:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3487:9:42","nodeType":"YulIdentifier","src":"3487:9:42"},{"kind":"number","nativeSrc":"3498:2:42","nodeType":"YulLiteral","src":"3498:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3483:3:42","nodeType":"YulIdentifier","src":"3483:3:42"},"nativeSrc":"3483:18:42","nodeType":"YulFunctionCall","src":"3483:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3470:12:42","nodeType":"YulIdentifier","src":"3470:12:42"},"nativeSrc":"3470:32:42","nodeType":"YulFunctionCall","src":"3470:32:42"},"variableNames":[{"name":"value","nativeSrc":"3461:5:42","nodeType":"YulIdentifier","src":"3461:5:42"}]},{"nativeSrc":"3511:15:42","nodeType":"YulAssignment","src":"3511:15:42","value":{"name":"value","nativeSrc":"3521:5:42","nodeType":"YulIdentifier","src":"3521:5:42"},"variableNames":[{"name":"value2","nativeSrc":"3511:6:42","nodeType":"YulIdentifier","src":"3511:6:42"}]},{"nativeSrc":"3535:46:42","nodeType":"YulVariableDeclaration","src":"3535:46:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3566:9:42","nodeType":"YulIdentifier","src":"3566:9:42"},{"kind":"number","nativeSrc":"3577:2:42","nodeType":"YulLiteral","src":"3577:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3562:3:42","nodeType":"YulIdentifier","src":"3562:3:42"},"nativeSrc":"3562:18:42","nodeType":"YulFunctionCall","src":"3562:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"3549:12:42","nodeType":"YulIdentifier","src":"3549:12:42"},"nativeSrc":"3549:32:42","nodeType":"YulFunctionCall","src":"3549:32:42"},"variables":[{"name":"offset","nativeSrc":"3539:6:42","nodeType":"YulTypedName","src":"3539:6:42","type":""}]},{"body":{"nativeSrc":"3624:16:42","nodeType":"YulBlock","src":"3624:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3633:1:42","nodeType":"YulLiteral","src":"3633:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"3636:1:42","nodeType":"YulLiteral","src":"3636:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3626:6:42","nodeType":"YulIdentifier","src":"3626:6:42"},"nativeSrc":"3626:12:42","nodeType":"YulFunctionCall","src":"3626:12:42"},"nativeSrc":"3626:12:42","nodeType":"YulExpressionStatement","src":"3626:12:42"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3596:6:42","nodeType":"YulIdentifier","src":"3596:6:42"},{"kind":"number","nativeSrc":"3604:18:42","nodeType":"YulLiteral","src":"3604:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3593:2:42","nodeType":"YulIdentifier","src":"3593:2:42"},"nativeSrc":"3593:30:42","nodeType":"YulFunctionCall","src":"3593:30:42"},"nativeSrc":"3590:50:42","nodeType":"YulIf","src":"3590:50:42"},{"nativeSrc":"3649:84:42","nodeType":"YulVariableDeclaration","src":"3649:84:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3705:9:42","nodeType":"YulIdentifier","src":"3705:9:42"},{"name":"offset","nativeSrc":"3716:6:42","nodeType":"YulIdentifier","src":"3716:6:42"}],"functionName":{"name":"add","nativeSrc":"3701:3:42","nodeType":"YulIdentifier","src":"3701:3:42"},"nativeSrc":"3701:22:42","nodeType":"YulFunctionCall","src":"3701:22:42"},{"name":"dataEnd","nativeSrc":"3725:7:42","nodeType":"YulIdentifier","src":"3725:7:42"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"3675:25:42","nodeType":"YulIdentifier","src":"3675:25:42"},"nativeSrc":"3675:58:42","nodeType":"YulFunctionCall","src":"3675:58:42"},"variables":[{"name":"value3_1","nativeSrc":"3653:8:42","nodeType":"YulTypedName","src":"3653:8:42","type":""},{"name":"value4_1","nativeSrc":"3663:8:42","nodeType":"YulTypedName","src":"3663:8:42","type":""}]},{"nativeSrc":"3742:18:42","nodeType":"YulAssignment","src":"3742:18:42","value":{"name":"value3_1","nativeSrc":"3752:8:42","nodeType":"YulIdentifier","src":"3752:8:42"},"variableNames":[{"name":"value3","nativeSrc":"3742:6:42","nodeType":"YulIdentifier","src":"3742:6:42"}]},{"nativeSrc":"3769:18:42","nodeType":"YulAssignment","src":"3769:18:42","value":{"name":"value4_1","nativeSrc":"3779:8:42","nodeType":"YulIdentifier","src":"3779:8:42"},"variableNames":[{"name":"value4","nativeSrc":"3769:6:42","nodeType":"YulIdentifier","src":"3769:6:42"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"3121:672:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3195:9:42","nodeType":"YulTypedName","src":"3195:9:42","type":""},{"name":"dataEnd","nativeSrc":"3206:7:42","nodeType":"YulTypedName","src":"3206:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3218:6:42","nodeType":"YulTypedName","src":"3218:6:42","type":""},{"name":"value1","nativeSrc":"3226:6:42","nodeType":"YulTypedName","src":"3226:6:42","type":""},{"name":"value2","nativeSrc":"3234:6:42","nodeType":"YulTypedName","src":"3234:6:42","type":""},{"name":"value3","nativeSrc":"3242:6:42","nodeType":"YulTypedName","src":"3242:6:42","type":""},{"name":"value4","nativeSrc":"3250:6:42","nodeType":"YulTypedName","src":"3250:6:42","type":""}],"src":"3121:672:42"},{"body":{"nativeSrc":"3897:149:42","nodeType":"YulBlock","src":"3897:149:42","statements":[{"nativeSrc":"3907:26:42","nodeType":"YulAssignment","src":"3907:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"3919:9:42","nodeType":"YulIdentifier","src":"3919:9:42"},{"kind":"number","nativeSrc":"3930:2:42","nodeType":"YulLiteral","src":"3930:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3915:3:42","nodeType":"YulIdentifier","src":"3915:3:42"},"nativeSrc":"3915:18:42","nodeType":"YulFunctionCall","src":"3915:18:42"},"variableNames":[{"name":"tail","nativeSrc":"3907:4:42","nodeType":"YulIdentifier","src":"3907:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3949:9:42","nodeType":"YulIdentifier","src":"3949:9:42"},{"arguments":[{"name":"value0","nativeSrc":"3964:6:42","nodeType":"YulIdentifier","src":"3964:6:42"},{"kind":"number","nativeSrc":"3972:66:42","nodeType":"YulLiteral","src":"3972:66:42","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3960:3:42","nodeType":"YulIdentifier","src":"3960:3:42"},"nativeSrc":"3960:79:42","nodeType":"YulFunctionCall","src":"3960:79:42"}],"functionName":{"name":"mstore","nativeSrc":"3942:6:42","nodeType":"YulIdentifier","src":"3942:6:42"},"nativeSrc":"3942:98:42","nodeType":"YulFunctionCall","src":"3942:98:42"},"nativeSrc":"3942:98:42","nodeType":"YulExpressionStatement","src":"3942:98:42"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3798:248:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3866:9:42","nodeType":"YulTypedName","src":"3866:9:42","type":""},{"name":"value0","nativeSrc":"3877:6:42","nodeType":"YulTypedName","src":"3877:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3888:4:42","nodeType":"YulTypedName","src":"3888:4:42","type":""}],"src":"3798:248:42"},{"body":{"nativeSrc":"4138:259:42","nodeType":"YulBlock","src":"4138:259:42","statements":[{"body":{"nativeSrc":"4184:16:42","nodeType":"YulBlock","src":"4184:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4193:1:42","nodeType":"YulLiteral","src":"4193:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"4196:1:42","nodeType":"YulLiteral","src":"4196:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4186:6:42","nodeType":"YulIdentifier","src":"4186:6:42"},"nativeSrc":"4186:12:42","nodeType":"YulFunctionCall","src":"4186:12:42"},"nativeSrc":"4186:12:42","nodeType":"YulExpressionStatement","src":"4186:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4159:7:42","nodeType":"YulIdentifier","src":"4159:7:42"},{"name":"headStart","nativeSrc":"4168:9:42","nodeType":"YulIdentifier","src":"4168:9:42"}],"functionName":{"name":"sub","nativeSrc":"4155:3:42","nodeType":"YulIdentifier","src":"4155:3:42"},"nativeSrc":"4155:23:42","nodeType":"YulFunctionCall","src":"4155:23:42"},{"kind":"number","nativeSrc":"4180:2:42","nodeType":"YulLiteral","src":"4180:2:42","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"4151:3:42","nodeType":"YulIdentifier","src":"4151:3:42"},"nativeSrc":"4151:32:42","nodeType":"YulFunctionCall","src":"4151:32:42"},"nativeSrc":"4148:52:42","nodeType":"YulIf","src":"4148:52:42"},{"nativeSrc":"4209:14:42","nodeType":"YulVariableDeclaration","src":"4209:14:42","value":{"kind":"number","nativeSrc":"4222:1:42","nodeType":"YulLiteral","src":"4222:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4213:5:42","nodeType":"YulTypedName","src":"4213:5:42","type":""}]},{"nativeSrc":"4232:32:42","nodeType":"YulAssignment","src":"4232:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4254:9:42","nodeType":"YulIdentifier","src":"4254:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"4241:12:42","nodeType":"YulIdentifier","src":"4241:12:42"},"nativeSrc":"4241:23:42","nodeType":"YulFunctionCall","src":"4241:23:42"},"variableNames":[{"name":"value","nativeSrc":"4232:5:42","nodeType":"YulIdentifier","src":"4232:5:42"}]},{"nativeSrc":"4273:15:42","nodeType":"YulAssignment","src":"4273:15:42","value":{"name":"value","nativeSrc":"4283:5:42","nodeType":"YulIdentifier","src":"4283:5:42"},"variableNames":[{"name":"value0","nativeSrc":"4273:6:42","nodeType":"YulIdentifier","src":"4273:6:42"}]},{"nativeSrc":"4297:16:42","nodeType":"YulVariableDeclaration","src":"4297:16:42","value":{"kind":"number","nativeSrc":"4312:1:42","nodeType":"YulLiteral","src":"4312:1:42","type":"","value":"0"},"variables":[{"name":"value_1","nativeSrc":"4301:7:42","nodeType":"YulTypedName","src":"4301:7:42","type":""}]},{"nativeSrc":"4322:43:42","nodeType":"YulAssignment","src":"4322:43:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4350:9:42","nodeType":"YulIdentifier","src":"4350:9:42"},{"kind":"number","nativeSrc":"4361:2:42","nodeType":"YulLiteral","src":"4361:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4346:3:42","nodeType":"YulIdentifier","src":"4346:3:42"},"nativeSrc":"4346:18:42","nodeType":"YulFunctionCall","src":"4346:18:42"}],"functionName":{"name":"calldataload","nativeSrc":"4333:12:42","nodeType":"YulIdentifier","src":"4333:12:42"},"nativeSrc":"4333:32:42","nodeType":"YulFunctionCall","src":"4333:32:42"},"variableNames":[{"name":"value_1","nativeSrc":"4322:7:42","nodeType":"YulIdentifier","src":"4322:7:42"}]},{"nativeSrc":"4374:17:42","nodeType":"YulAssignment","src":"4374:17:42","value":{"name":"value_1","nativeSrc":"4384:7:42","nodeType":"YulIdentifier","src":"4384:7:42"},"variableNames":[{"name":"value1","nativeSrc":"4374:6:42","nodeType":"YulIdentifier","src":"4374:6:42"}]}]},"name":"abi_decode_tuple_t_uint256t_uint256","nativeSrc":"4051:346:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4096:9:42","nodeType":"YulTypedName","src":"4096:9:42","type":""},{"name":"dataEnd","nativeSrc":"4107:7:42","nodeType":"YulTypedName","src":"4107:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4119:6:42","nodeType":"YulTypedName","src":"4119:6:42","type":""},{"name":"value1","nativeSrc":"4127:6:42","nodeType":"YulTypedName","src":"4127:6:42","type":""}],"src":"4051:346:42"},{"body":{"nativeSrc":"4472:156:42","nodeType":"YulBlock","src":"4472:156:42","statements":[{"body":{"nativeSrc":"4518:16:42","nodeType":"YulBlock","src":"4518:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4527:1:42","nodeType":"YulLiteral","src":"4527:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"4530:1:42","nodeType":"YulLiteral","src":"4530:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4520:6:42","nodeType":"YulIdentifier","src":"4520:6:42"},"nativeSrc":"4520:12:42","nodeType":"YulFunctionCall","src":"4520:12:42"},"nativeSrc":"4520:12:42","nodeType":"YulExpressionStatement","src":"4520:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4493:7:42","nodeType":"YulIdentifier","src":"4493:7:42"},{"name":"headStart","nativeSrc":"4502:9:42","nodeType":"YulIdentifier","src":"4502:9:42"}],"functionName":{"name":"sub","nativeSrc":"4489:3:42","nodeType":"YulIdentifier","src":"4489:3:42"},"nativeSrc":"4489:23:42","nodeType":"YulFunctionCall","src":"4489:23:42"},{"kind":"number","nativeSrc":"4514:2:42","nodeType":"YulLiteral","src":"4514:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4485:3:42","nodeType":"YulIdentifier","src":"4485:3:42"},"nativeSrc":"4485:32:42","nodeType":"YulFunctionCall","src":"4485:32:42"},"nativeSrc":"4482:52:42","nodeType":"YulIf","src":"4482:52:42"},{"nativeSrc":"4543:14:42","nodeType":"YulVariableDeclaration","src":"4543:14:42","value":{"kind":"number","nativeSrc":"4556:1:42","nodeType":"YulLiteral","src":"4556:1:42","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4547:5:42","nodeType":"YulTypedName","src":"4547:5:42","type":""}]},{"nativeSrc":"4566:32:42","nodeType":"YulAssignment","src":"4566:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4588:9:42","nodeType":"YulIdentifier","src":"4588:9:42"}],"functionName":{"name":"calldataload","nativeSrc":"4575:12:42","nodeType":"YulIdentifier","src":"4575:12:42"},"nativeSrc":"4575:23:42","nodeType":"YulFunctionCall","src":"4575:23:42"},"variableNames":[{"name":"value","nativeSrc":"4566:5:42","nodeType":"YulIdentifier","src":"4566:5:42"}]},{"nativeSrc":"4607:15:42","nodeType":"YulAssignment","src":"4607:15:42","value":{"name":"value","nativeSrc":"4617:5:42","nodeType":"YulIdentifier","src":"4617:5:42"},"variableNames":[{"name":"value0","nativeSrc":"4607:6:42","nodeType":"YulIdentifier","src":"4607:6:42"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"4402:226:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4438:9:42","nodeType":"YulTypedName","src":"4438:9:42","type":""},{"name":"dataEnd","nativeSrc":"4449:7:42","nodeType":"YulTypedName","src":"4449:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4461:6:42","nodeType":"YulTypedName","src":"4461:6:42","type":""}],"src":"4402:226:42"},{"body":{"nativeSrc":"4734:125:42","nodeType":"YulBlock","src":"4734:125:42","statements":[{"nativeSrc":"4744:26:42","nodeType":"YulAssignment","src":"4744:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"4756:9:42","nodeType":"YulIdentifier","src":"4756:9:42"},{"kind":"number","nativeSrc":"4767:2:42","nodeType":"YulLiteral","src":"4767:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4752:3:42","nodeType":"YulIdentifier","src":"4752:3:42"},"nativeSrc":"4752:18:42","nodeType":"YulFunctionCall","src":"4752:18:42"},"variableNames":[{"name":"tail","nativeSrc":"4744:4:42","nodeType":"YulIdentifier","src":"4744:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4786:9:42","nodeType":"YulIdentifier","src":"4786:9:42"},{"arguments":[{"name":"value0","nativeSrc":"4801:6:42","nodeType":"YulIdentifier","src":"4801:6:42"},{"kind":"number","nativeSrc":"4809:42:42","nodeType":"YulLiteral","src":"4809:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4797:3:42","nodeType":"YulIdentifier","src":"4797:3:42"},"nativeSrc":"4797:55:42","nodeType":"YulFunctionCall","src":"4797:55:42"}],"functionName":{"name":"mstore","nativeSrc":"4779:6:42","nodeType":"YulIdentifier","src":"4779:6:42"},"nativeSrc":"4779:74:42","nodeType":"YulFunctionCall","src":"4779:74:42"},"nativeSrc":"4779:74:42","nodeType":"YulExpressionStatement","src":"4779:74:42"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"4633:226:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4703:9:42","nodeType":"YulTypedName","src":"4703:9:42","type":""},{"name":"value0","nativeSrc":"4714:6:42","nodeType":"YulTypedName","src":"4714:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4725:4:42","nodeType":"YulTypedName","src":"4725:4:42","type":""}],"src":"4633:226:42"},{"body":{"nativeSrc":"4896:152:42","nodeType":"YulBlock","src":"4896:152:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4913:1:42","nodeType":"YulLiteral","src":"4913:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"4916:77:42","nodeType":"YulLiteral","src":"4916:77:42","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4906:6:42","nodeType":"YulIdentifier","src":"4906:6:42"},"nativeSrc":"4906:88:42","nodeType":"YulFunctionCall","src":"4906:88:42"},"nativeSrc":"4906:88:42","nodeType":"YulExpressionStatement","src":"4906:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5010:1:42","nodeType":"YulLiteral","src":"5010:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"5013:4:42","nodeType":"YulLiteral","src":"5013:4:42","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5003:6:42","nodeType":"YulIdentifier","src":"5003:6:42"},"nativeSrc":"5003:15:42","nodeType":"YulFunctionCall","src":"5003:15:42"},"nativeSrc":"5003:15:42","nodeType":"YulExpressionStatement","src":"5003:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5034:1:42","nodeType":"YulLiteral","src":"5034:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5037:4:42","nodeType":"YulLiteral","src":"5037:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5027:6:42","nodeType":"YulIdentifier","src":"5027:6:42"},"nativeSrc":"5027:15:42","nodeType":"YulFunctionCall","src":"5027:15:42"},"nativeSrc":"5027:15:42","nodeType":"YulExpressionStatement","src":"5027:15:42"}]},"name":"panic_error_0x11","nativeSrc":"4864:184:42","nodeType":"YulFunctionDefinition","src":"4864:184:42"},{"body":{"nativeSrc":"5102:79:42","nodeType":"YulBlock","src":"5102:79:42","statements":[{"nativeSrc":"5112:17:42","nodeType":"YulAssignment","src":"5112:17:42","value":{"arguments":[{"name":"x","nativeSrc":"5124:1:42","nodeType":"YulIdentifier","src":"5124:1:42"},{"name":"y","nativeSrc":"5127:1:42","nodeType":"YulIdentifier","src":"5127:1:42"}],"functionName":{"name":"sub","nativeSrc":"5120:3:42","nodeType":"YulIdentifier","src":"5120:3:42"},"nativeSrc":"5120:9:42","nodeType":"YulFunctionCall","src":"5120:9:42"},"variableNames":[{"name":"diff","nativeSrc":"5112:4:42","nodeType":"YulIdentifier","src":"5112:4:42"}]},{"body":{"nativeSrc":"5153:22:42","nodeType":"YulBlock","src":"5153:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5155:16:42","nodeType":"YulIdentifier","src":"5155:16:42"},"nativeSrc":"5155:18:42","nodeType":"YulFunctionCall","src":"5155:18:42"},"nativeSrc":"5155:18:42","nodeType":"YulExpressionStatement","src":"5155:18:42"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5144:4:42","nodeType":"YulIdentifier","src":"5144:4:42"},{"name":"x","nativeSrc":"5150:1:42","nodeType":"YulIdentifier","src":"5150:1:42"}],"functionName":{"name":"gt","nativeSrc":"5141:2:42","nodeType":"YulIdentifier","src":"5141:2:42"},"nativeSrc":"5141:11:42","nodeType":"YulFunctionCall","src":"5141:11:42"},"nativeSrc":"5138:37:42","nodeType":"YulIf","src":"5138:37:42"}]},"name":"checked_sub_t_uint256","nativeSrc":"5053:128:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5084:1:42","nodeType":"YulTypedName","src":"5084:1:42","type":""},{"name":"y","nativeSrc":"5087:1:42","nodeType":"YulTypedName","src":"5087:1:42","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5093:4:42","nodeType":"YulTypedName","src":"5093:4:42","type":""}],"src":"5053:128:42"},{"body":{"nativeSrc":"5238:116:42","nodeType":"YulBlock","src":"5238:116:42","statements":[{"nativeSrc":"5248:20:42","nodeType":"YulAssignment","src":"5248:20:42","value":{"arguments":[{"name":"x","nativeSrc":"5263:1:42","nodeType":"YulIdentifier","src":"5263:1:42"},{"name":"y","nativeSrc":"5266:1:42","nodeType":"YulIdentifier","src":"5266:1:42"}],"functionName":{"name":"mul","nativeSrc":"5259:3:42","nodeType":"YulIdentifier","src":"5259:3:42"},"nativeSrc":"5259:9:42","nodeType":"YulFunctionCall","src":"5259:9:42"},"variableNames":[{"name":"product","nativeSrc":"5248:7:42","nodeType":"YulIdentifier","src":"5248:7:42"}]},{"body":{"nativeSrc":"5326:22:42","nodeType":"YulBlock","src":"5326:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5328:16:42","nodeType":"YulIdentifier","src":"5328:16:42"},"nativeSrc":"5328:18:42","nodeType":"YulFunctionCall","src":"5328:18:42"},"nativeSrc":"5328:18:42","nodeType":"YulExpressionStatement","src":"5328:18:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nativeSrc":"5297:1:42","nodeType":"YulIdentifier","src":"5297:1:42"}],"functionName":{"name":"iszero","nativeSrc":"5290:6:42","nodeType":"YulIdentifier","src":"5290:6:42"},"nativeSrc":"5290:9:42","nodeType":"YulFunctionCall","src":"5290:9:42"},{"arguments":[{"name":"y","nativeSrc":"5304:1:42","nodeType":"YulIdentifier","src":"5304:1:42"},{"arguments":[{"name":"product","nativeSrc":"5311:7:42","nodeType":"YulIdentifier","src":"5311:7:42"},{"name":"x","nativeSrc":"5320:1:42","nodeType":"YulIdentifier","src":"5320:1:42"}],"functionName":{"name":"div","nativeSrc":"5307:3:42","nodeType":"YulIdentifier","src":"5307:3:42"},"nativeSrc":"5307:15:42","nodeType":"YulFunctionCall","src":"5307:15:42"}],"functionName":{"name":"eq","nativeSrc":"5301:2:42","nodeType":"YulIdentifier","src":"5301:2:42"},"nativeSrc":"5301:22:42","nodeType":"YulFunctionCall","src":"5301:22:42"}],"functionName":{"name":"or","nativeSrc":"5287:2:42","nodeType":"YulIdentifier","src":"5287:2:42"},"nativeSrc":"5287:37:42","nodeType":"YulFunctionCall","src":"5287:37:42"}],"functionName":{"name":"iszero","nativeSrc":"5280:6:42","nodeType":"YulIdentifier","src":"5280:6:42"},"nativeSrc":"5280:45:42","nodeType":"YulFunctionCall","src":"5280:45:42"},"nativeSrc":"5277:71:42","nodeType":"YulIf","src":"5277:71:42"}]},"name":"checked_mul_t_uint256","nativeSrc":"5186:168:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5217:1:42","nodeType":"YulTypedName","src":"5217:1:42","type":""},{"name":"y","nativeSrc":"5220:1:42","nodeType":"YulTypedName","src":"5220:1:42","type":""}],"returnVariables":[{"name":"product","nativeSrc":"5226:7:42","nodeType":"YulTypedName","src":"5226:7:42","type":""}],"src":"5186:168:42"},{"body":{"nativeSrc":"5391:152:42","nodeType":"YulBlock","src":"5391:152:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5408:1:42","nodeType":"YulLiteral","src":"5408:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5411:77:42","nodeType":"YulLiteral","src":"5411:77:42","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5401:6:42","nodeType":"YulIdentifier","src":"5401:6:42"},"nativeSrc":"5401:88:42","nodeType":"YulFunctionCall","src":"5401:88:42"},"nativeSrc":"5401:88:42","nodeType":"YulExpressionStatement","src":"5401:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5505:1:42","nodeType":"YulLiteral","src":"5505:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"5508:4:42","nodeType":"YulLiteral","src":"5508:4:42","type":"","value":"0x12"}],"functionName":{"name":"mstore","nativeSrc":"5498:6:42","nodeType":"YulIdentifier","src":"5498:6:42"},"nativeSrc":"5498:15:42","nodeType":"YulFunctionCall","src":"5498:15:42"},"nativeSrc":"5498:15:42","nodeType":"YulExpressionStatement","src":"5498:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5529:1:42","nodeType":"YulLiteral","src":"5529:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"5532:4:42","nodeType":"YulLiteral","src":"5532:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5522:6:42","nodeType":"YulIdentifier","src":"5522:6:42"},"nativeSrc":"5522:15:42","nodeType":"YulFunctionCall","src":"5522:15:42"},"nativeSrc":"5522:15:42","nodeType":"YulExpressionStatement","src":"5522:15:42"}]},"name":"panic_error_0x12","nativeSrc":"5359:184:42","nodeType":"YulFunctionDefinition","src":"5359:184:42"},{"body":{"nativeSrc":"5594:74:42","nodeType":"YulBlock","src":"5594:74:42","statements":[{"body":{"nativeSrc":"5617:22:42","nodeType":"YulBlock","src":"5617:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"5619:16:42","nodeType":"YulIdentifier","src":"5619:16:42"},"nativeSrc":"5619:18:42","nodeType":"YulFunctionCall","src":"5619:18:42"},"nativeSrc":"5619:18:42","nodeType":"YulExpressionStatement","src":"5619:18:42"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"5614:1:42","nodeType":"YulIdentifier","src":"5614:1:42"}],"functionName":{"name":"iszero","nativeSrc":"5607:6:42","nodeType":"YulIdentifier","src":"5607:6:42"},"nativeSrc":"5607:9:42","nodeType":"YulFunctionCall","src":"5607:9:42"},"nativeSrc":"5604:35:42","nodeType":"YulIf","src":"5604:35:42"},{"nativeSrc":"5648:14:42","nodeType":"YulAssignment","src":"5648:14:42","value":{"arguments":[{"name":"x","nativeSrc":"5657:1:42","nodeType":"YulIdentifier","src":"5657:1:42"},{"name":"y","nativeSrc":"5660:1:42","nodeType":"YulIdentifier","src":"5660:1:42"}],"functionName":{"name":"div","nativeSrc":"5653:3:42","nodeType":"YulIdentifier","src":"5653:3:42"},"nativeSrc":"5653:9:42","nodeType":"YulFunctionCall","src":"5653:9:42"},"variableNames":[{"name":"r","nativeSrc":"5648:1:42","nodeType":"YulIdentifier","src":"5648:1:42"}]}]},"name":"checked_div_t_uint256","nativeSrc":"5548:120:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5579:1:42","nodeType":"YulTypedName","src":"5579:1:42","type":""},{"name":"y","nativeSrc":"5582:1:42","nodeType":"YulTypedName","src":"5582:1:42","type":""}],"returnVariables":[{"name":"r","nativeSrc":"5588:1:42","nodeType":"YulTypedName","src":"5588:1:42","type":""}],"src":"5548:120:42"},{"body":{"nativeSrc":"5721:77:42","nodeType":"YulBlock","src":"5721:77:42","statements":[{"nativeSrc":"5731:16:42","nodeType":"YulAssignment","src":"5731:16:42","value":{"arguments":[{"name":"x","nativeSrc":"5742:1:42","nodeType":"YulIdentifier","src":"5742:1:42"},{"name":"y","nativeSrc":"5745:1:42","nodeType":"YulIdentifier","src":"5745:1:42"}],"functionName":{"name":"add","nativeSrc":"5738:3:42","nodeType":"YulIdentifier","src":"5738:3:42"},"nativeSrc":"5738:9:42","nodeType":"YulFunctionCall","src":"5738:9:42"},"variableNames":[{"name":"sum","nativeSrc":"5731:3:42","nodeType":"YulIdentifier","src":"5731:3:42"}]},{"body":{"nativeSrc":"5770:22:42","nodeType":"YulBlock","src":"5770:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5772:16:42","nodeType":"YulIdentifier","src":"5772:16:42"},"nativeSrc":"5772:18:42","nodeType":"YulFunctionCall","src":"5772:18:42"},"nativeSrc":"5772:18:42","nodeType":"YulExpressionStatement","src":"5772:18:42"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"5762:1:42","nodeType":"YulIdentifier","src":"5762:1:42"},{"name":"sum","nativeSrc":"5765:3:42","nodeType":"YulIdentifier","src":"5765:3:42"}],"functionName":{"name":"gt","nativeSrc":"5759:2:42","nodeType":"YulIdentifier","src":"5759:2:42"},"nativeSrc":"5759:10:42","nodeType":"YulFunctionCall","src":"5759:10:42"},"nativeSrc":"5756:36:42","nodeType":"YulIf","src":"5756:36:42"}]},"name":"checked_add_t_uint256","nativeSrc":"5673:125:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5704:1:42","nodeType":"YulTypedName","src":"5704:1:42","type":""},{"name":"y","nativeSrc":"5707:1:42","nodeType":"YulTypedName","src":"5707:1:42","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"5713:3:42","nodeType":"YulTypedName","src":"5713:3:42","type":""}],"src":"5673:125:42"},{"body":{"nativeSrc":"5954:377:42","nodeType":"YulBlock","src":"5954:377:42","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5971:9:42","nodeType":"YulIdentifier","src":"5971:9:42"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"5996:6:42","nodeType":"YulIdentifier","src":"5996:6:42"}],"functionName":{"name":"iszero","nativeSrc":"5989:6:42","nodeType":"YulIdentifier","src":"5989:6:42"},"nativeSrc":"5989:14:42","nodeType":"YulFunctionCall","src":"5989:14:42"}],"functionName":{"name":"iszero","nativeSrc":"5982:6:42","nodeType":"YulIdentifier","src":"5982:6:42"},"nativeSrc":"5982:22:42","nodeType":"YulFunctionCall","src":"5982:22:42"}],"functionName":{"name":"mstore","nativeSrc":"5964:6:42","nodeType":"YulIdentifier","src":"5964:6:42"},"nativeSrc":"5964:41:42","nodeType":"YulFunctionCall","src":"5964:41:42"},"nativeSrc":"5964:41:42","nodeType":"YulExpressionStatement","src":"5964:41:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6025:9:42","nodeType":"YulIdentifier","src":"6025:9:42"},{"kind":"number","nativeSrc":"6036:2:42","nodeType":"YulLiteral","src":"6036:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6021:3:42","nodeType":"YulIdentifier","src":"6021:3:42"},"nativeSrc":"6021:18:42","nodeType":"YulFunctionCall","src":"6021:18:42"},{"kind":"number","nativeSrc":"6041:2:42","nodeType":"YulLiteral","src":"6041:2:42","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"6014:6:42","nodeType":"YulIdentifier","src":"6014:6:42"},"nativeSrc":"6014:30:42","nodeType":"YulFunctionCall","src":"6014:30:42"},"nativeSrc":"6014:30:42","nodeType":"YulExpressionStatement","src":"6014:30:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6064:9:42","nodeType":"YulIdentifier","src":"6064:9:42"},{"kind":"number","nativeSrc":"6075:2:42","nodeType":"YulLiteral","src":"6075:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6060:3:42","nodeType":"YulIdentifier","src":"6060:3:42"},"nativeSrc":"6060:18:42","nodeType":"YulFunctionCall","src":"6060:18:42"},{"name":"value2","nativeSrc":"6080:6:42","nodeType":"YulIdentifier","src":"6080:6:42"}],"functionName":{"name":"mstore","nativeSrc":"6053:6:42","nodeType":"YulIdentifier","src":"6053:6:42"},"nativeSrc":"6053:34:42","nodeType":"YulFunctionCall","src":"6053:34:42"},"nativeSrc":"6053:34:42","nodeType":"YulExpressionStatement","src":"6053:34:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6113:9:42","nodeType":"YulIdentifier","src":"6113:9:42"},{"kind":"number","nativeSrc":"6124:2:42","nodeType":"YulLiteral","src":"6124:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6109:3:42","nodeType":"YulIdentifier","src":"6109:3:42"},"nativeSrc":"6109:18:42","nodeType":"YulFunctionCall","src":"6109:18:42"},{"name":"value1","nativeSrc":"6129:6:42","nodeType":"YulIdentifier","src":"6129:6:42"},{"name":"value2","nativeSrc":"6137:6:42","nodeType":"YulIdentifier","src":"6137:6:42"}],"functionName":{"name":"calldatacopy","nativeSrc":"6096:12:42","nodeType":"YulIdentifier","src":"6096:12:42"},"nativeSrc":"6096:48:42","nodeType":"YulFunctionCall","src":"6096:48:42"},"nativeSrc":"6096:48:42","nodeType":"YulExpressionStatement","src":"6096:48:42"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6168:9:42","nodeType":"YulIdentifier","src":"6168:9:42"},{"name":"value2","nativeSrc":"6179:6:42","nodeType":"YulIdentifier","src":"6179:6:42"}],"functionName":{"name":"add","nativeSrc":"6164:3:42","nodeType":"YulIdentifier","src":"6164:3:42"},"nativeSrc":"6164:22:42","nodeType":"YulFunctionCall","src":"6164:22:42"},{"kind":"number","nativeSrc":"6188:2:42","nodeType":"YulLiteral","src":"6188:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6160:3:42","nodeType":"YulIdentifier","src":"6160:3:42"},"nativeSrc":"6160:31:42","nodeType":"YulFunctionCall","src":"6160:31:42"},{"kind":"number","nativeSrc":"6193:1:42","nodeType":"YulLiteral","src":"6193:1:42","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6153:6:42","nodeType":"YulIdentifier","src":"6153:6:42"},"nativeSrc":"6153:42:42","nodeType":"YulFunctionCall","src":"6153:42:42"},"nativeSrc":"6153:42:42","nodeType":"YulExpressionStatement","src":"6153:42:42"},{"nativeSrc":"6204:121:42","nodeType":"YulAssignment","src":"6204:121:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6220:9:42","nodeType":"YulIdentifier","src":"6220:9:42"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"6239:6:42","nodeType":"YulIdentifier","src":"6239:6:42"},{"kind":"number","nativeSrc":"6247:2:42","nodeType":"YulLiteral","src":"6247:2:42","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6235:3:42","nodeType":"YulIdentifier","src":"6235:3:42"},"nativeSrc":"6235:15:42","nodeType":"YulFunctionCall","src":"6235:15:42"},{"kind":"number","nativeSrc":"6252:66:42","nodeType":"YulLiteral","src":"6252:66:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"6231:3:42","nodeType":"YulIdentifier","src":"6231:3:42"},"nativeSrc":"6231:88:42","nodeType":"YulFunctionCall","src":"6231:88:42"}],"functionName":{"name":"add","nativeSrc":"6216:3:42","nodeType":"YulIdentifier","src":"6216:3:42"},"nativeSrc":"6216:104:42","nodeType":"YulFunctionCall","src":"6216:104:42"},{"kind":"number","nativeSrc":"6322:2:42","nodeType":"YulLiteral","src":"6322:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6212:3:42","nodeType":"YulIdentifier","src":"6212:3:42"},"nativeSrc":"6212:113:42","nodeType":"YulFunctionCall","src":"6212:113:42"},"variableNames":[{"name":"tail","nativeSrc":"6204:4:42","nodeType":"YulIdentifier","src":"6204:4:42"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"5803:528:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5907:9:42","nodeType":"YulTypedName","src":"5907:9:42","type":""},{"name":"value2","nativeSrc":"5918:6:42","nodeType":"YulTypedName","src":"5918:6:42","type":""},{"name":"value1","nativeSrc":"5926:6:42","nodeType":"YulTypedName","src":"5926:6:42","type":""},{"name":"value0","nativeSrc":"5934:6:42","nodeType":"YulTypedName","src":"5934:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5945:4:42","nodeType":"YulTypedName","src":"5945:4:42","type":""}],"src":"5803:528:42"},{"body":{"nativeSrc":"6402:184:42","nodeType":"YulBlock","src":"6402:184:42","statements":[{"nativeSrc":"6412:10:42","nodeType":"YulVariableDeclaration","src":"6412:10:42","value":{"kind":"number","nativeSrc":"6421:1:42","nodeType":"YulLiteral","src":"6421:1:42","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"6416:1:42","nodeType":"YulTypedName","src":"6416:1:42","type":""}]},{"body":{"nativeSrc":"6481:63:42","nodeType":"YulBlock","src":"6481:63:42","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"6506:3:42","nodeType":"YulIdentifier","src":"6506:3:42"},{"name":"i","nativeSrc":"6511:1:42","nodeType":"YulIdentifier","src":"6511:1:42"}],"functionName":{"name":"add","nativeSrc":"6502:3:42","nodeType":"YulIdentifier","src":"6502:3:42"},"nativeSrc":"6502:11:42","nodeType":"YulFunctionCall","src":"6502:11:42"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"6525:3:42","nodeType":"YulIdentifier","src":"6525:3:42"},{"name":"i","nativeSrc":"6530:1:42","nodeType":"YulIdentifier","src":"6530:1:42"}],"functionName":{"name":"add","nativeSrc":"6521:3:42","nodeType":"YulIdentifier","src":"6521:3:42"},"nativeSrc":"6521:11:42","nodeType":"YulFunctionCall","src":"6521:11:42"}],"functionName":{"name":"mload","nativeSrc":"6515:5:42","nodeType":"YulIdentifier","src":"6515:5:42"},"nativeSrc":"6515:18:42","nodeType":"YulFunctionCall","src":"6515:18:42"}],"functionName":{"name":"mstore","nativeSrc":"6495:6:42","nodeType":"YulIdentifier","src":"6495:6:42"},"nativeSrc":"6495:39:42","nodeType":"YulFunctionCall","src":"6495:39:42"},"nativeSrc":"6495:39:42","nodeType":"YulExpressionStatement","src":"6495:39:42"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"6442:1:42","nodeType":"YulIdentifier","src":"6442:1:42"},{"name":"length","nativeSrc":"6445:6:42","nodeType":"YulIdentifier","src":"6445:6:42"}],"functionName":{"name":"lt","nativeSrc":"6439:2:42","nodeType":"YulIdentifier","src":"6439:2:42"},"nativeSrc":"6439:13:42","nodeType":"YulFunctionCall","src":"6439:13:42"},"nativeSrc":"6431:113:42","nodeType":"YulForLoop","post":{"nativeSrc":"6453:19:42","nodeType":"YulBlock","src":"6453:19:42","statements":[{"nativeSrc":"6455:15:42","nodeType":"YulAssignment","src":"6455:15:42","value":{"arguments":[{"name":"i","nativeSrc":"6464:1:42","nodeType":"YulIdentifier","src":"6464:1:42"},{"kind":"number","nativeSrc":"6467:2:42","nodeType":"YulLiteral","src":"6467:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6460:3:42","nodeType":"YulIdentifier","src":"6460:3:42"},"nativeSrc":"6460:10:42","nodeType":"YulFunctionCall","src":"6460:10:42"},"variableNames":[{"name":"i","nativeSrc":"6455:1:42","nodeType":"YulIdentifier","src":"6455:1:42"}]}]},"pre":{"nativeSrc":"6435:3:42","nodeType":"YulBlock","src":"6435:3:42","statements":[]},"src":"6431:113:42"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"6564:3:42","nodeType":"YulIdentifier","src":"6564:3:42"},{"name":"length","nativeSrc":"6569:6:42","nodeType":"YulIdentifier","src":"6569:6:42"}],"functionName":{"name":"add","nativeSrc":"6560:3:42","nodeType":"YulIdentifier","src":"6560:3:42"},"nativeSrc":"6560:16:42","nodeType":"YulFunctionCall","src":"6560:16:42"},{"kind":"number","nativeSrc":"6578:1:42","nodeType":"YulLiteral","src":"6578:1:42","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"6553:6:42","nodeType":"YulIdentifier","src":"6553:6:42"},"nativeSrc":"6553:27:42","nodeType":"YulFunctionCall","src":"6553:27:42"},"nativeSrc":"6553:27:42","nodeType":"YulExpressionStatement","src":"6553:27:42"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"6336:250:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"6380:3:42","nodeType":"YulTypedName","src":"6380:3:42","type":""},{"name":"dst","nativeSrc":"6385:3:42","nodeType":"YulTypedName","src":"6385:3:42","type":""},{"name":"length","nativeSrc":"6390:6:42","nodeType":"YulTypedName","src":"6390:6:42","type":""}],"src":"6336:250:42"},{"body":{"nativeSrc":"6640:280:42","nodeType":"YulBlock","src":"6640:280:42","statements":[{"nativeSrc":"6650:26:42","nodeType":"YulVariableDeclaration","src":"6650:26:42","value":{"arguments":[{"name":"value","nativeSrc":"6670:5:42","nodeType":"YulIdentifier","src":"6670:5:42"}],"functionName":{"name":"mload","nativeSrc":"6664:5:42","nodeType":"YulIdentifier","src":"6664:5:42"},"nativeSrc":"6664:12:42","nodeType":"YulFunctionCall","src":"6664:12:42"},"variables":[{"name":"length","nativeSrc":"6654:6:42","nodeType":"YulTypedName","src":"6654:6:42","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"6692:3:42","nodeType":"YulIdentifier","src":"6692:3:42"},{"name":"length","nativeSrc":"6697:6:42","nodeType":"YulIdentifier","src":"6697:6:42"}],"functionName":{"name":"mstore","nativeSrc":"6685:6:42","nodeType":"YulIdentifier","src":"6685:6:42"},"nativeSrc":"6685:19:42","nodeType":"YulFunctionCall","src":"6685:19:42"},"nativeSrc":"6685:19:42","nodeType":"YulExpressionStatement","src":"6685:19:42"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"6752:5:42","nodeType":"YulIdentifier","src":"6752:5:42"},{"kind":"number","nativeSrc":"6759:4:42","nodeType":"YulLiteral","src":"6759:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6748:3:42","nodeType":"YulIdentifier","src":"6748:3:42"},"nativeSrc":"6748:16:42","nodeType":"YulFunctionCall","src":"6748:16:42"},{"arguments":[{"name":"pos","nativeSrc":"6770:3:42","nodeType":"YulIdentifier","src":"6770:3:42"},{"kind":"number","nativeSrc":"6775:4:42","nodeType":"YulLiteral","src":"6775:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6766:3:42","nodeType":"YulIdentifier","src":"6766:3:42"},"nativeSrc":"6766:14:42","nodeType":"YulFunctionCall","src":"6766:14:42"},{"name":"length","nativeSrc":"6782:6:42","nodeType":"YulIdentifier","src":"6782:6:42"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"6713:34:42","nodeType":"YulIdentifier","src":"6713:34:42"},"nativeSrc":"6713:76:42","nodeType":"YulFunctionCall","src":"6713:76:42"},"nativeSrc":"6713:76:42","nodeType":"YulExpressionStatement","src":"6713:76:42"},{"nativeSrc":"6798:116:42","nodeType":"YulAssignment","src":"6798:116:42","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"6813:3:42","nodeType":"YulIdentifier","src":"6813:3:42"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"6826:6:42","nodeType":"YulIdentifier","src":"6826:6:42"},{"kind":"number","nativeSrc":"6834:2:42","nodeType":"YulLiteral","src":"6834:2:42","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"6822:3:42","nodeType":"YulIdentifier","src":"6822:3:42"},"nativeSrc":"6822:15:42","nodeType":"YulFunctionCall","src":"6822:15:42"},{"kind":"number","nativeSrc":"6839:66:42","nodeType":"YulLiteral","src":"6839:66:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"6818:3:42","nodeType":"YulIdentifier","src":"6818:3:42"},"nativeSrc":"6818:88:42","nodeType":"YulFunctionCall","src":"6818:88:42"}],"functionName":{"name":"add","nativeSrc":"6809:3:42","nodeType":"YulIdentifier","src":"6809:3:42"},"nativeSrc":"6809:98:42","nodeType":"YulFunctionCall","src":"6809:98:42"},{"kind":"number","nativeSrc":"6909:4:42","nodeType":"YulLiteral","src":"6909:4:42","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6805:3:42","nodeType":"YulIdentifier","src":"6805:3:42"},"nativeSrc":"6805:109:42","nodeType":"YulFunctionCall","src":"6805:109:42"},"variableNames":[{"name":"end","nativeSrc":"6798:3:42","nodeType":"YulIdentifier","src":"6798:3:42"}]}]},"name":"abi_encode_bytes","nativeSrc":"6591:329:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"6617:5:42","nodeType":"YulTypedName","src":"6617:5:42","type":""},{"name":"pos","nativeSrc":"6624:3:42","nodeType":"YulTypedName","src":"6624:3:42","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6632:3:42","nodeType":"YulTypedName","src":"6632:3:42","type":""}],"src":"6591:329:42"},{"body":{"nativeSrc":"7072:141:42","nodeType":"YulBlock","src":"7072:141:42","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7089:9:42","nodeType":"YulIdentifier","src":"7089:9:42"},{"kind":"number","nativeSrc":"7100:2:42","nodeType":"YulLiteral","src":"7100:2:42","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"7082:6:42","nodeType":"YulIdentifier","src":"7082:6:42"},"nativeSrc":"7082:21:42","nodeType":"YulFunctionCall","src":"7082:21:42"},"nativeSrc":"7082:21:42","nodeType":"YulExpressionStatement","src":"7082:21:42"},{"nativeSrc":"7112:52:42","nodeType":"YulAssignment","src":"7112:52:42","value":{"arguments":[{"name":"value0","nativeSrc":"7137:6:42","nodeType":"YulIdentifier","src":"7137:6:42"},{"arguments":[{"name":"headStart","nativeSrc":"7149:9:42","nodeType":"YulIdentifier","src":"7149:9:42"},{"kind":"number","nativeSrc":"7160:2:42","nodeType":"YulLiteral","src":"7160:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7145:3:42","nodeType":"YulIdentifier","src":"7145:3:42"},"nativeSrc":"7145:18:42","nodeType":"YulFunctionCall","src":"7145:18:42"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"7120:16:42","nodeType":"YulIdentifier","src":"7120:16:42"},"nativeSrc":"7120:44:42","nodeType":"YulFunctionCall","src":"7120:44:42"},"variableNames":[{"name":"tail","nativeSrc":"7112:4:42","nodeType":"YulIdentifier","src":"7112:4:42"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7184:9:42","nodeType":"YulIdentifier","src":"7184:9:42"},{"kind":"number","nativeSrc":"7195:2:42","nodeType":"YulLiteral","src":"7195:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7180:3:42","nodeType":"YulIdentifier","src":"7180:3:42"},"nativeSrc":"7180:18:42","nodeType":"YulFunctionCall","src":"7180:18:42"},{"name":"value1","nativeSrc":"7200:6:42","nodeType":"YulIdentifier","src":"7200:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7173:6:42","nodeType":"YulIdentifier","src":"7173:6:42"},"nativeSrc":"7173:34:42","nodeType":"YulFunctionCall","src":"7173:34:42"},"nativeSrc":"7173:34:42","nodeType":"YulExpressionStatement","src":"7173:34:42"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"6925:288:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7033:9:42","nodeType":"YulTypedName","src":"7033:9:42","type":""},{"name":"value1","nativeSrc":"7044:6:42","nodeType":"YulTypedName","src":"7044:6:42","type":""},{"name":"value0","nativeSrc":"7052:6:42","nodeType":"YulTypedName","src":"7052:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7063:4:42","nodeType":"YulTypedName","src":"7063:4:42","type":""}],"src":"6925:288:42"},{"body":{"nativeSrc":"7359:157:42","nodeType":"YulBlock","src":"7359:157:42","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7376:9:42","nodeType":"YulIdentifier","src":"7376:9:42"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"7401:6:42","nodeType":"YulIdentifier","src":"7401:6:42"}],"functionName":{"name":"iszero","nativeSrc":"7394:6:42","nodeType":"YulIdentifier","src":"7394:6:42"},"nativeSrc":"7394:14:42","nodeType":"YulFunctionCall","src":"7394:14:42"}],"functionName":{"name":"iszero","nativeSrc":"7387:6:42","nodeType":"YulIdentifier","src":"7387:6:42"},"nativeSrc":"7387:22:42","nodeType":"YulFunctionCall","src":"7387:22:42"}],"functionName":{"name":"mstore","nativeSrc":"7369:6:42","nodeType":"YulIdentifier","src":"7369:6:42"},"nativeSrc":"7369:41:42","nodeType":"YulFunctionCall","src":"7369:41:42"},"nativeSrc":"7369:41:42","nodeType":"YulExpressionStatement","src":"7369:41:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7430:9:42","nodeType":"YulIdentifier","src":"7430:9:42"},{"kind":"number","nativeSrc":"7441:2:42","nodeType":"YulLiteral","src":"7441:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7426:3:42","nodeType":"YulIdentifier","src":"7426:3:42"},"nativeSrc":"7426:18:42","nodeType":"YulFunctionCall","src":"7426:18:42"},{"kind":"number","nativeSrc":"7446:2:42","nodeType":"YulLiteral","src":"7446:2:42","type":"","value":"64"}],"functionName":{"name":"mstore","nativeSrc":"7419:6:42","nodeType":"YulIdentifier","src":"7419:6:42"},"nativeSrc":"7419:30:42","nodeType":"YulFunctionCall","src":"7419:30:42"},"nativeSrc":"7419:30:42","nodeType":"YulExpressionStatement","src":"7419:30:42"},{"nativeSrc":"7458:52:42","nodeType":"YulAssignment","src":"7458:52:42","value":{"arguments":[{"name":"value1","nativeSrc":"7483:6:42","nodeType":"YulIdentifier","src":"7483:6:42"},{"arguments":[{"name":"headStart","nativeSrc":"7495:9:42","nodeType":"YulIdentifier","src":"7495:9:42"},{"kind":"number","nativeSrc":"7506:2:42","nodeType":"YulLiteral","src":"7506:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7491:3:42","nodeType":"YulIdentifier","src":"7491:3:42"},"nativeSrc":"7491:18:42","nodeType":"YulFunctionCall","src":"7491:18:42"}],"functionName":{"name":"abi_encode_bytes","nativeSrc":"7466:16:42","nodeType":"YulIdentifier","src":"7466:16:42"},"nativeSrc":"7466:44:42","nodeType":"YulFunctionCall","src":"7466:44:42"},"variableNames":[{"name":"tail","nativeSrc":"7458:4:42","nodeType":"YulIdentifier","src":"7458:4:42"}]}]},"name":"abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"7218:298:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7320:9:42","nodeType":"YulTypedName","src":"7320:9:42","type":""},{"name":"value1","nativeSrc":"7331:6:42","nodeType":"YulTypedName","src":"7331:6:42","type":""},{"name":"value0","nativeSrc":"7339:6:42","nodeType":"YulTypedName","src":"7339:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7350:4:42","nodeType":"YulTypedName","src":"7350:4:42","type":""}],"src":"7218:298:42"},{"body":{"nativeSrc":"7650:119:42","nodeType":"YulBlock","src":"7650:119:42","statements":[{"nativeSrc":"7660:26:42","nodeType":"YulAssignment","src":"7660:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"7672:9:42","nodeType":"YulIdentifier","src":"7672:9:42"},{"kind":"number","nativeSrc":"7683:2:42","nodeType":"YulLiteral","src":"7683:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7668:3:42","nodeType":"YulIdentifier","src":"7668:3:42"},"nativeSrc":"7668:18:42","nodeType":"YulFunctionCall","src":"7668:18:42"},"variableNames":[{"name":"tail","nativeSrc":"7660:4:42","nodeType":"YulIdentifier","src":"7660:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7702:9:42","nodeType":"YulIdentifier","src":"7702:9:42"},{"name":"value0","nativeSrc":"7713:6:42","nodeType":"YulIdentifier","src":"7713:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7695:6:42","nodeType":"YulIdentifier","src":"7695:6:42"},"nativeSrc":"7695:25:42","nodeType":"YulFunctionCall","src":"7695:25:42"},"nativeSrc":"7695:25:42","nodeType":"YulExpressionStatement","src":"7695:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7740:9:42","nodeType":"YulIdentifier","src":"7740:9:42"},{"kind":"number","nativeSrc":"7751:2:42","nodeType":"YulLiteral","src":"7751:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7736:3:42","nodeType":"YulIdentifier","src":"7736:3:42"},"nativeSrc":"7736:18:42","nodeType":"YulFunctionCall","src":"7736:18:42"},{"name":"value1","nativeSrc":"7756:6:42","nodeType":"YulIdentifier","src":"7756:6:42"}],"functionName":{"name":"mstore","nativeSrc":"7729:6:42","nodeType":"YulIdentifier","src":"7729:6:42"},"nativeSrc":"7729:34:42","nodeType":"YulFunctionCall","src":"7729:34:42"},"nativeSrc":"7729:34:42","nodeType":"YulExpressionStatement","src":"7729:34:42"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7521:248:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7611:9:42","nodeType":"YulTypedName","src":"7611:9:42","type":""},{"name":"value1","nativeSrc":"7622:6:42","nodeType":"YulTypedName","src":"7622:6:42","type":""},{"name":"value0","nativeSrc":"7630:6:42","nodeType":"YulTypedName","src":"7630:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7641:4:42","nodeType":"YulTypedName","src":"7641:4:42","type":""}],"src":"7521:248:42"},{"body":{"nativeSrc":"7812:74:42","nodeType":"YulBlock","src":"7812:74:42","statements":[{"body":{"nativeSrc":"7835:22:42","nodeType":"YulBlock","src":"7835:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x12","nativeSrc":"7837:16:42","nodeType":"YulIdentifier","src":"7837:16:42"},"nativeSrc":"7837:18:42","nodeType":"YulFunctionCall","src":"7837:18:42"},"nativeSrc":"7837:18:42","nodeType":"YulExpressionStatement","src":"7837:18:42"}]},"condition":{"arguments":[{"name":"y","nativeSrc":"7832:1:42","nodeType":"YulIdentifier","src":"7832:1:42"}],"functionName":{"name":"iszero","nativeSrc":"7825:6:42","nodeType":"YulIdentifier","src":"7825:6:42"},"nativeSrc":"7825:9:42","nodeType":"YulFunctionCall","src":"7825:9:42"},"nativeSrc":"7822:35:42","nodeType":"YulIf","src":"7822:35:42"},{"nativeSrc":"7866:14:42","nodeType":"YulAssignment","src":"7866:14:42","value":{"arguments":[{"name":"x","nativeSrc":"7875:1:42","nodeType":"YulIdentifier","src":"7875:1:42"},{"name":"y","nativeSrc":"7878:1:42","nodeType":"YulIdentifier","src":"7878:1:42"}],"functionName":{"name":"mod","nativeSrc":"7871:3:42","nodeType":"YulIdentifier","src":"7871:3:42"},"nativeSrc":"7871:9:42","nodeType":"YulFunctionCall","src":"7871:9:42"},"variableNames":[{"name":"r","nativeSrc":"7866:1:42","nodeType":"YulIdentifier","src":"7866:1:42"}]}]},"name":"mod_t_uint256","nativeSrc":"7774:112:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7797:1:42","nodeType":"YulTypedName","src":"7797:1:42","type":""},{"name":"y","nativeSrc":"7800:1:42","nodeType":"YulTypedName","src":"7800:1:42","type":""}],"returnVariables":[{"name":"r","nativeSrc":"7806:1:42","nodeType":"YulTypedName","src":"7806:1:42","type":""}],"src":"7774:112:42"},{"body":{"nativeSrc":"8048:162:42","nodeType":"YulBlock","src":"8048:162:42","statements":[{"nativeSrc":"8058:26:42","nodeType":"YulAssignment","src":"8058:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"8070:9:42","nodeType":"YulIdentifier","src":"8070:9:42"},{"kind":"number","nativeSrc":"8081:2:42","nodeType":"YulLiteral","src":"8081:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8066:3:42","nodeType":"YulIdentifier","src":"8066:3:42"},"nativeSrc":"8066:18:42","nodeType":"YulFunctionCall","src":"8066:18:42"},"variableNames":[{"name":"tail","nativeSrc":"8058:4:42","nodeType":"YulIdentifier","src":"8058:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8100:9:42","nodeType":"YulIdentifier","src":"8100:9:42"},{"name":"value0","nativeSrc":"8111:6:42","nodeType":"YulIdentifier","src":"8111:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8093:6:42","nodeType":"YulIdentifier","src":"8093:6:42"},"nativeSrc":"8093:25:42","nodeType":"YulFunctionCall","src":"8093:25:42"},"nativeSrc":"8093:25:42","nodeType":"YulExpressionStatement","src":"8093:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8138:9:42","nodeType":"YulIdentifier","src":"8138:9:42"},{"kind":"number","nativeSrc":"8149:2:42","nodeType":"YulLiteral","src":"8149:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8134:3:42","nodeType":"YulIdentifier","src":"8134:3:42"},"nativeSrc":"8134:18:42","nodeType":"YulFunctionCall","src":"8134:18:42"},{"name":"value1","nativeSrc":"8154:6:42","nodeType":"YulIdentifier","src":"8154:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8127:6:42","nodeType":"YulIdentifier","src":"8127:6:42"},"nativeSrc":"8127:34:42","nodeType":"YulFunctionCall","src":"8127:34:42"},"nativeSrc":"8127:34:42","nodeType":"YulExpressionStatement","src":"8127:34:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8181:9:42","nodeType":"YulIdentifier","src":"8181:9:42"},{"kind":"number","nativeSrc":"8192:2:42","nodeType":"YulLiteral","src":"8192:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8177:3:42","nodeType":"YulIdentifier","src":"8177:3:42"},"nativeSrc":"8177:18:42","nodeType":"YulFunctionCall","src":"8177:18:42"},{"name":"value2","nativeSrc":"8197:6:42","nodeType":"YulIdentifier","src":"8197:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8170:6:42","nodeType":"YulIdentifier","src":"8170:6:42"},"nativeSrc":"8170:34:42","nodeType":"YulFunctionCall","src":"8170:34:42"},"nativeSrc":"8170:34:42","nodeType":"YulExpressionStatement","src":"8170:34:42"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"7891:319:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8001:9:42","nodeType":"YulTypedName","src":"8001:9:42","type":""},{"name":"value2","nativeSrc":"8012:6:42","nodeType":"YulTypedName","src":"8012:6:42","type":""},{"name":"value1","nativeSrc":"8020:6:42","nodeType":"YulTypedName","src":"8020:6:42","type":""},{"name":"value0","nativeSrc":"8028:6:42","nodeType":"YulTypedName","src":"8028:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8039:4:42","nodeType":"YulTypedName","src":"8039:4:42","type":""}],"src":"7891:319:42"},{"body":{"nativeSrc":"8372:260:42","nodeType":"YulBlock","src":"8372:260:42","statements":[{"nativeSrc":"8382:26:42","nodeType":"YulAssignment","src":"8382:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"8394:9:42","nodeType":"YulIdentifier","src":"8394:9:42"},{"kind":"number","nativeSrc":"8405:2:42","nodeType":"YulLiteral","src":"8405:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8390:3:42","nodeType":"YulIdentifier","src":"8390:3:42"},"nativeSrc":"8390:18:42","nodeType":"YulFunctionCall","src":"8390:18:42"},"variableNames":[{"name":"tail","nativeSrc":"8382:4:42","nodeType":"YulIdentifier","src":"8382:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8424:9:42","nodeType":"YulIdentifier","src":"8424:9:42"},{"name":"value0","nativeSrc":"8435:6:42","nodeType":"YulIdentifier","src":"8435:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8417:6:42","nodeType":"YulIdentifier","src":"8417:6:42"},"nativeSrc":"8417:25:42","nodeType":"YulFunctionCall","src":"8417:25:42"},"nativeSrc":"8417:25:42","nodeType":"YulExpressionStatement","src":"8417:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8462:9:42","nodeType":"YulIdentifier","src":"8462:9:42"},{"kind":"number","nativeSrc":"8473:2:42","nodeType":"YulLiteral","src":"8473:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8458:3:42","nodeType":"YulIdentifier","src":"8458:3:42"},"nativeSrc":"8458:18:42","nodeType":"YulFunctionCall","src":"8458:18:42"},{"arguments":[{"name":"value1","nativeSrc":"8482:6:42","nodeType":"YulIdentifier","src":"8482:6:42"},{"kind":"number","nativeSrc":"8490:42:42","nodeType":"YulLiteral","src":"8490:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8478:3:42","nodeType":"YulIdentifier","src":"8478:3:42"},"nativeSrc":"8478:55:42","nodeType":"YulFunctionCall","src":"8478:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8451:6:42","nodeType":"YulIdentifier","src":"8451:6:42"},"nativeSrc":"8451:83:42","nodeType":"YulFunctionCall","src":"8451:83:42"},"nativeSrc":"8451:83:42","nodeType":"YulExpressionStatement","src":"8451:83:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8554:9:42","nodeType":"YulIdentifier","src":"8554:9:42"},{"kind":"number","nativeSrc":"8565:2:42","nodeType":"YulLiteral","src":"8565:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8550:3:42","nodeType":"YulIdentifier","src":"8550:3:42"},"nativeSrc":"8550:18:42","nodeType":"YulFunctionCall","src":"8550:18:42"},{"arguments":[{"name":"value2","nativeSrc":"8574:6:42","nodeType":"YulIdentifier","src":"8574:6:42"},{"kind":"number","nativeSrc":"8582:42:42","nodeType":"YulLiteral","src":"8582:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8570:3:42","nodeType":"YulIdentifier","src":"8570:3:42"},"nativeSrc":"8570:55:42","nodeType":"YulFunctionCall","src":"8570:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8543:6:42","nodeType":"YulIdentifier","src":"8543:6:42"},"nativeSrc":"8543:83:42","nodeType":"YulFunctionCall","src":"8543:83:42"},"nativeSrc":"8543:83:42","nodeType":"YulExpressionStatement","src":"8543:83:42"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"8215:417:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8325:9:42","nodeType":"YulTypedName","src":"8325:9:42","type":""},{"name":"value2","nativeSrc":"8336:6:42","nodeType":"YulTypedName","src":"8336:6:42","type":""},{"name":"value1","nativeSrc":"8344:6:42","nodeType":"YulTypedName","src":"8344:6:42","type":""},{"name":"value0","nativeSrc":"8352:6:42","nodeType":"YulTypedName","src":"8352:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8363:4:42","nodeType":"YulTypedName","src":"8363:4:42","type":""}],"src":"8215:417:42"},{"body":{"nativeSrc":"8766:168:42","nodeType":"YulBlock","src":"8766:168:42","statements":[{"nativeSrc":"8776:26:42","nodeType":"YulAssignment","src":"8776:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"8788:9:42","nodeType":"YulIdentifier","src":"8788:9:42"},{"kind":"number","nativeSrc":"8799:2:42","nodeType":"YulLiteral","src":"8799:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8784:3:42","nodeType":"YulIdentifier","src":"8784:3:42"},"nativeSrc":"8784:18:42","nodeType":"YulFunctionCall","src":"8784:18:42"},"variableNames":[{"name":"tail","nativeSrc":"8776:4:42","nodeType":"YulIdentifier","src":"8776:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8818:9:42","nodeType":"YulIdentifier","src":"8818:9:42"},{"name":"value0","nativeSrc":"8829:6:42","nodeType":"YulIdentifier","src":"8829:6:42"}],"functionName":{"name":"mstore","nativeSrc":"8811:6:42","nodeType":"YulIdentifier","src":"8811:6:42"},"nativeSrc":"8811:25:42","nodeType":"YulFunctionCall","src":"8811:25:42"},"nativeSrc":"8811:25:42","nodeType":"YulExpressionStatement","src":"8811:25:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8856:9:42","nodeType":"YulIdentifier","src":"8856:9:42"},{"kind":"number","nativeSrc":"8867:2:42","nodeType":"YulLiteral","src":"8867:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8852:3:42","nodeType":"YulIdentifier","src":"8852:3:42"},"nativeSrc":"8852:18:42","nodeType":"YulFunctionCall","src":"8852:18:42"},{"arguments":[{"name":"value1","nativeSrc":"8876:6:42","nodeType":"YulIdentifier","src":"8876:6:42"},{"kind":"number","nativeSrc":"8884:42:42","nodeType":"YulLiteral","src":"8884:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"8872:3:42","nodeType":"YulIdentifier","src":"8872:3:42"},"nativeSrc":"8872:55:42","nodeType":"YulFunctionCall","src":"8872:55:42"}],"functionName":{"name":"mstore","nativeSrc":"8845:6:42","nodeType":"YulIdentifier","src":"8845:6:42"},"nativeSrc":"8845:83:42","nodeType":"YulFunctionCall","src":"8845:83:42"},"nativeSrc":"8845:83:42","nodeType":"YulExpressionStatement","src":"8845:83:42"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"8637:297:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8727:9:42","nodeType":"YulTypedName","src":"8727:9:42","type":""},{"name":"value1","nativeSrc":"8738:6:42","nodeType":"YulTypedName","src":"8738:6:42","type":""},{"name":"value0","nativeSrc":"8746:6:42","nodeType":"YulTypedName","src":"8746:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8757:4:42","nodeType":"YulTypedName","src":"8757:4:42","type":""}],"src":"8637:297:42"},{"body":{"nativeSrc":"9096:309:42","nodeType":"YulBlock","src":"9096:309:42","statements":[{"nativeSrc":"9106:26:42","nodeType":"YulAssignment","src":"9106:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9118:9:42","nodeType":"YulIdentifier","src":"9118:9:42"},{"kind":"number","nativeSrc":"9129:2:42","nodeType":"YulLiteral","src":"9129:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"9114:3:42","nodeType":"YulIdentifier","src":"9114:3:42"},"nativeSrc":"9114:18:42","nodeType":"YulFunctionCall","src":"9114:18:42"},"variableNames":[{"name":"tail","nativeSrc":"9106:4:42","nodeType":"YulIdentifier","src":"9106:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9148:9:42","nodeType":"YulIdentifier","src":"9148:9:42"},{"arguments":[{"name":"value0","nativeSrc":"9163:6:42","nodeType":"YulIdentifier","src":"9163:6:42"},{"kind":"number","nativeSrc":"9171:42:42","nodeType":"YulLiteral","src":"9171:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9159:3:42","nodeType":"YulIdentifier","src":"9159:3:42"},"nativeSrc":"9159:55:42","nodeType":"YulFunctionCall","src":"9159:55:42"}],"functionName":{"name":"mstore","nativeSrc":"9141:6:42","nodeType":"YulIdentifier","src":"9141:6:42"},"nativeSrc":"9141:74:42","nodeType":"YulFunctionCall","src":"9141:74:42"},"nativeSrc":"9141:74:42","nodeType":"YulExpressionStatement","src":"9141:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9235:9:42","nodeType":"YulIdentifier","src":"9235:9:42"},{"kind":"number","nativeSrc":"9246:2:42","nodeType":"YulLiteral","src":"9246:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9231:3:42","nodeType":"YulIdentifier","src":"9231:3:42"},"nativeSrc":"9231:18:42","nodeType":"YulFunctionCall","src":"9231:18:42"},{"arguments":[{"name":"value1","nativeSrc":"9255:6:42","nodeType":"YulIdentifier","src":"9255:6:42"},{"kind":"number","nativeSrc":"9263:42:42","nodeType":"YulLiteral","src":"9263:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9251:3:42","nodeType":"YulIdentifier","src":"9251:3:42"},"nativeSrc":"9251:55:42","nodeType":"YulFunctionCall","src":"9251:55:42"}],"functionName":{"name":"mstore","nativeSrc":"9224:6:42","nodeType":"YulIdentifier","src":"9224:6:42"},"nativeSrc":"9224:83:42","nodeType":"YulFunctionCall","src":"9224:83:42"},"nativeSrc":"9224:83:42","nodeType":"YulExpressionStatement","src":"9224:83:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9327:9:42","nodeType":"YulIdentifier","src":"9327:9:42"},{"kind":"number","nativeSrc":"9338:2:42","nodeType":"YulLiteral","src":"9338:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9323:3:42","nodeType":"YulIdentifier","src":"9323:3:42"},"nativeSrc":"9323:18:42","nodeType":"YulFunctionCall","src":"9323:18:42"},{"arguments":[{"name":"value2","nativeSrc":"9347:6:42","nodeType":"YulIdentifier","src":"9347:6:42"},{"kind":"number","nativeSrc":"9355:42:42","nodeType":"YulLiteral","src":"9355:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9343:3:42","nodeType":"YulIdentifier","src":"9343:3:42"},"nativeSrc":"9343:55:42","nodeType":"YulFunctionCall","src":"9343:55:42"}],"functionName":{"name":"mstore","nativeSrc":"9316:6:42","nodeType":"YulIdentifier","src":"9316:6:42"},"nativeSrc":"9316:83:42","nodeType":"YulFunctionCall","src":"9316:83:42"},"nativeSrc":"9316:83:42","nodeType":"YulExpressionStatement","src":"9316:83:42"}]},"name":"abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed","nativeSrc":"8939:466:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9049:9:42","nodeType":"YulTypedName","src":"9049:9:42","type":""},{"name":"value2","nativeSrc":"9060:6:42","nodeType":"YulTypedName","src":"9060:6:42","type":""},{"name":"value1","nativeSrc":"9068:6:42","nodeType":"YulTypedName","src":"9068:6:42","type":""},{"name":"value0","nativeSrc":"9076:6:42","nodeType":"YulTypedName","src":"9076:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9087:4:42","nodeType":"YulTypedName","src":"9087:4:42","type":""}],"src":"8939:466:42"},{"body":{"nativeSrc":"9467:107:42","nodeType":"YulBlock","src":"9467:107:42","statements":[{"nativeSrc":"9477:22:42","nodeType":"YulAssignment","src":"9477:22:42","value":{"arguments":[{"name":"offset","nativeSrc":"9492:6:42","nodeType":"YulIdentifier","src":"9492:6:42"}],"functionName":{"name":"mload","nativeSrc":"9486:5:42","nodeType":"YulIdentifier","src":"9486:5:42"},"nativeSrc":"9486:13:42","nodeType":"YulFunctionCall","src":"9486:13:42"},"variableNames":[{"name":"value","nativeSrc":"9477:5:42","nodeType":"YulIdentifier","src":"9477:5:42"}]},{"body":{"nativeSrc":"9552:16:42","nodeType":"YulBlock","src":"9552:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9561:1:42","nodeType":"YulLiteral","src":"9561:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"9564:1:42","nodeType":"YulLiteral","src":"9564:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9554:6:42","nodeType":"YulIdentifier","src":"9554:6:42"},"nativeSrc":"9554:12:42","nodeType":"YulFunctionCall","src":"9554:12:42"},"nativeSrc":"9554:12:42","nodeType":"YulExpressionStatement","src":"9554:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9521:5:42","nodeType":"YulIdentifier","src":"9521:5:42"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"9542:5:42","nodeType":"YulIdentifier","src":"9542:5:42"}],"functionName":{"name":"iszero","nativeSrc":"9535:6:42","nodeType":"YulIdentifier","src":"9535:6:42"},"nativeSrc":"9535:13:42","nodeType":"YulFunctionCall","src":"9535:13:42"}],"functionName":{"name":"iszero","nativeSrc":"9528:6:42","nodeType":"YulIdentifier","src":"9528:6:42"},"nativeSrc":"9528:21:42","nodeType":"YulFunctionCall","src":"9528:21:42"}],"functionName":{"name":"eq","nativeSrc":"9518:2:42","nodeType":"YulIdentifier","src":"9518:2:42"},"nativeSrc":"9518:32:42","nodeType":"YulFunctionCall","src":"9518:32:42"}],"functionName":{"name":"iszero","nativeSrc":"9511:6:42","nodeType":"YulIdentifier","src":"9511:6:42"},"nativeSrc":"9511:40:42","nodeType":"YulFunctionCall","src":"9511:40:42"},"nativeSrc":"9508:60:42","nodeType":"YulIf","src":"9508:60:42"}]},"name":"abi_decode_bool_fromMemory","nativeSrc":"9410:164:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"9446:6:42","nodeType":"YulTypedName","src":"9446:6:42","type":""}],"returnVariables":[{"name":"value","nativeSrc":"9457:5:42","nodeType":"YulTypedName","src":"9457:5:42","type":""}],"src":"9410:164:42"},{"body":{"nativeSrc":"9657:124:42","nodeType":"YulBlock","src":"9657:124:42","statements":[{"body":{"nativeSrc":"9703:16:42","nodeType":"YulBlock","src":"9703:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9712:1:42","nodeType":"YulLiteral","src":"9712:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"9715:1:42","nodeType":"YulLiteral","src":"9715:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9705:6:42","nodeType":"YulIdentifier","src":"9705:6:42"},"nativeSrc":"9705:12:42","nodeType":"YulFunctionCall","src":"9705:12:42"},"nativeSrc":"9705:12:42","nodeType":"YulExpressionStatement","src":"9705:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9678:7:42","nodeType":"YulIdentifier","src":"9678:7:42"},{"name":"headStart","nativeSrc":"9687:9:42","nodeType":"YulIdentifier","src":"9687:9:42"}],"functionName":{"name":"sub","nativeSrc":"9674:3:42","nodeType":"YulIdentifier","src":"9674:3:42"},"nativeSrc":"9674:23:42","nodeType":"YulFunctionCall","src":"9674:23:42"},{"kind":"number","nativeSrc":"9699:2:42","nodeType":"YulLiteral","src":"9699:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9670:3:42","nodeType":"YulIdentifier","src":"9670:3:42"},"nativeSrc":"9670:32:42","nodeType":"YulFunctionCall","src":"9670:32:42"},"nativeSrc":"9667:52:42","nodeType":"YulIf","src":"9667:52:42"},{"nativeSrc":"9728:47:42","nodeType":"YulAssignment","src":"9728:47:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9765:9:42","nodeType":"YulIdentifier","src":"9765:9:42"}],"functionName":{"name":"abi_decode_bool_fromMemory","nativeSrc":"9738:26:42","nodeType":"YulIdentifier","src":"9738:26:42"},"nativeSrc":"9738:37:42","nodeType":"YulFunctionCall","src":"9738:37:42"},"variableNames":[{"name":"value0","nativeSrc":"9728:6:42","nodeType":"YulIdentifier","src":"9728:6:42"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"9579:202:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9623:9:42","nodeType":"YulTypedName","src":"9623:9:42","type":""},{"name":"dataEnd","nativeSrc":"9634:7:42","nodeType":"YulTypedName","src":"9634:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9646:6:42","nodeType":"YulTypedName","src":"9646:6:42","type":""}],"src":"9579:202:42"},{"body":{"nativeSrc":"9867:103:42","nodeType":"YulBlock","src":"9867:103:42","statements":[{"body":{"nativeSrc":"9913:16:42","nodeType":"YulBlock","src":"9913:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9922:1:42","nodeType":"YulLiteral","src":"9922:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"9925:1:42","nodeType":"YulLiteral","src":"9925:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9915:6:42","nodeType":"YulIdentifier","src":"9915:6:42"},"nativeSrc":"9915:12:42","nodeType":"YulFunctionCall","src":"9915:12:42"},"nativeSrc":"9915:12:42","nodeType":"YulExpressionStatement","src":"9915:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9888:7:42","nodeType":"YulIdentifier","src":"9888:7:42"},{"name":"headStart","nativeSrc":"9897:9:42","nodeType":"YulIdentifier","src":"9897:9:42"}],"functionName":{"name":"sub","nativeSrc":"9884:3:42","nodeType":"YulIdentifier","src":"9884:3:42"},"nativeSrc":"9884:23:42","nodeType":"YulFunctionCall","src":"9884:23:42"},{"kind":"number","nativeSrc":"9909:2:42","nodeType":"YulLiteral","src":"9909:2:42","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9880:3:42","nodeType":"YulIdentifier","src":"9880:3:42"},"nativeSrc":"9880:32:42","nodeType":"YulFunctionCall","src":"9880:32:42"},"nativeSrc":"9877:52:42","nodeType":"YulIf","src":"9877:52:42"},{"nativeSrc":"9938:26:42","nodeType":"YulAssignment","src":"9938:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"9954:9:42","nodeType":"YulIdentifier","src":"9954:9:42"}],"functionName":{"name":"mload","nativeSrc":"9948:5:42","nodeType":"YulIdentifier","src":"9948:5:42"},"nativeSrc":"9948:16:42","nodeType":"YulFunctionCall","src":"9948:16:42"},"variableNames":[{"name":"value0","nativeSrc":"9938:6:42","nodeType":"YulIdentifier","src":"9938:6:42"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"9786:184:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9833:9:42","nodeType":"YulTypedName","src":"9833:9:42","type":""},{"name":"dataEnd","nativeSrc":"9844:7:42","nodeType":"YulTypedName","src":"9844:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9856:6:42","nodeType":"YulTypedName","src":"9856:6:42","type":""}],"src":"9786:184:42"},{"body":{"nativeSrc":"10007:152:42","nodeType":"YulBlock","src":"10007:152:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10024:1:42","nodeType":"YulLiteral","src":"10024:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"10027:77:42","nodeType":"YulLiteral","src":"10027:77:42","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"10017:6:42","nodeType":"YulIdentifier","src":"10017:6:42"},"nativeSrc":"10017:88:42","nodeType":"YulFunctionCall","src":"10017:88:42"},"nativeSrc":"10017:88:42","nodeType":"YulExpressionStatement","src":"10017:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10121:1:42","nodeType":"YulLiteral","src":"10121:1:42","type":"","value":"4"},{"kind":"number","nativeSrc":"10124:4:42","nodeType":"YulLiteral","src":"10124:4:42","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"10114:6:42","nodeType":"YulIdentifier","src":"10114:6:42"},"nativeSrc":"10114:15:42","nodeType":"YulFunctionCall","src":"10114:15:42"},"nativeSrc":"10114:15:42","nodeType":"YulExpressionStatement","src":"10114:15:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"10145:1:42","nodeType":"YulLiteral","src":"10145:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"10148:4:42","nodeType":"YulLiteral","src":"10148:4:42","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"10138:6:42","nodeType":"YulIdentifier","src":"10138:6:42"},"nativeSrc":"10138:15:42","nodeType":"YulFunctionCall","src":"10138:15:42"},"nativeSrc":"10138:15:42","nodeType":"YulExpressionStatement","src":"10138:15:42"}]},"name":"panic_error_0x41","nativeSrc":"9975:184:42","nodeType":"YulFunctionDefinition","src":"9975:184:42"},{"body":{"nativeSrc":"10268:1008:42","nodeType":"YulBlock","src":"10268:1008:42","statements":[{"body":{"nativeSrc":"10314:16:42","nodeType":"YulBlock","src":"10314:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10323:1:42","nodeType":"YulLiteral","src":"10323:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"10326:1:42","nodeType":"YulLiteral","src":"10326:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10316:6:42","nodeType":"YulIdentifier","src":"10316:6:42"},"nativeSrc":"10316:12:42","nodeType":"YulFunctionCall","src":"10316:12:42"},"nativeSrc":"10316:12:42","nodeType":"YulExpressionStatement","src":"10316:12:42"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10289:7:42","nodeType":"YulIdentifier","src":"10289:7:42"},{"name":"headStart","nativeSrc":"10298:9:42","nodeType":"YulIdentifier","src":"10298:9:42"}],"functionName":{"name":"sub","nativeSrc":"10285:3:42","nodeType":"YulIdentifier","src":"10285:3:42"},"nativeSrc":"10285:23:42","nodeType":"YulFunctionCall","src":"10285:23:42"},{"kind":"number","nativeSrc":"10310:2:42","nodeType":"YulLiteral","src":"10310:2:42","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"10281:3:42","nodeType":"YulIdentifier","src":"10281:3:42"},"nativeSrc":"10281:32:42","nodeType":"YulFunctionCall","src":"10281:32:42"},"nativeSrc":"10278:52:42","nodeType":"YulIf","src":"10278:52:42"},{"nativeSrc":"10339:47:42","nodeType":"YulAssignment","src":"10339:47:42","value":{"arguments":[{"name":"headStart","nativeSrc":"10376:9:42","nodeType":"YulIdentifier","src":"10376:9:42"}],"functionName":{"name":"abi_decode_bool_fromMemory","nativeSrc":"10349:26:42","nodeType":"YulIdentifier","src":"10349:26:42"},"nativeSrc":"10349:37:42","nodeType":"YulFunctionCall","src":"10349:37:42"},"variableNames":[{"name":"value0","nativeSrc":"10339:6:42","nodeType":"YulIdentifier","src":"10339:6:42"}]},{"nativeSrc":"10395:39:42","nodeType":"YulVariableDeclaration","src":"10395:39:42","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10419:9:42","nodeType":"YulIdentifier","src":"10419:9:42"},{"kind":"number","nativeSrc":"10430:2:42","nodeType":"YulLiteral","src":"10430:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10415:3:42","nodeType":"YulIdentifier","src":"10415:3:42"},"nativeSrc":"10415:18:42","nodeType":"YulFunctionCall","src":"10415:18:42"}],"functionName":{"name":"mload","nativeSrc":"10409:5:42","nodeType":"YulIdentifier","src":"10409:5:42"},"nativeSrc":"10409:25:42","nodeType":"YulFunctionCall","src":"10409:25:42"},"variables":[{"name":"offset","nativeSrc":"10399:6:42","nodeType":"YulTypedName","src":"10399:6:42","type":""}]},{"body":{"nativeSrc":"10477:16:42","nodeType":"YulBlock","src":"10477:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10486:1:42","nodeType":"YulLiteral","src":"10486:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"10489:1:42","nodeType":"YulLiteral","src":"10489:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10479:6:42","nodeType":"YulIdentifier","src":"10479:6:42"},"nativeSrc":"10479:12:42","nodeType":"YulFunctionCall","src":"10479:12:42"},"nativeSrc":"10479:12:42","nodeType":"YulExpressionStatement","src":"10479:12:42"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"10449:6:42","nodeType":"YulIdentifier","src":"10449:6:42"},{"kind":"number","nativeSrc":"10457:18:42","nodeType":"YulLiteral","src":"10457:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10446:2:42","nodeType":"YulIdentifier","src":"10446:2:42"},"nativeSrc":"10446:30:42","nodeType":"YulFunctionCall","src":"10446:30:42"},"nativeSrc":"10443:50:42","nodeType":"YulIf","src":"10443:50:42"},{"nativeSrc":"10502:32:42","nodeType":"YulVariableDeclaration","src":"10502:32:42","value":{"arguments":[{"name":"headStart","nativeSrc":"10516:9:42","nodeType":"YulIdentifier","src":"10516:9:42"},{"name":"offset","nativeSrc":"10527:6:42","nodeType":"YulIdentifier","src":"10527:6:42"}],"functionName":{"name":"add","nativeSrc":"10512:3:42","nodeType":"YulIdentifier","src":"10512:3:42"},"nativeSrc":"10512:22:42","nodeType":"YulFunctionCall","src":"10512:22:42"},"variables":[{"name":"_1","nativeSrc":"10506:2:42","nodeType":"YulTypedName","src":"10506:2:42","type":""}]},{"body":{"nativeSrc":"10582:16:42","nodeType":"YulBlock","src":"10582:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10591:1:42","nodeType":"YulLiteral","src":"10591:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"10594:1:42","nodeType":"YulLiteral","src":"10594:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10584:6:42","nodeType":"YulIdentifier","src":"10584:6:42"},"nativeSrc":"10584:12:42","nodeType":"YulFunctionCall","src":"10584:12:42"},"nativeSrc":"10584:12:42","nodeType":"YulExpressionStatement","src":"10584:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"10561:2:42","nodeType":"YulIdentifier","src":"10561:2:42"},{"kind":"number","nativeSrc":"10565:4:42","nodeType":"YulLiteral","src":"10565:4:42","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"10557:3:42","nodeType":"YulIdentifier","src":"10557:3:42"},"nativeSrc":"10557:13:42","nodeType":"YulFunctionCall","src":"10557:13:42"},{"name":"dataEnd","nativeSrc":"10572:7:42","nodeType":"YulIdentifier","src":"10572:7:42"}],"functionName":{"name":"slt","nativeSrc":"10553:3:42","nodeType":"YulIdentifier","src":"10553:3:42"},"nativeSrc":"10553:27:42","nodeType":"YulFunctionCall","src":"10553:27:42"}],"functionName":{"name":"iszero","nativeSrc":"10546:6:42","nodeType":"YulIdentifier","src":"10546:6:42"},"nativeSrc":"10546:35:42","nodeType":"YulFunctionCall","src":"10546:35:42"},"nativeSrc":"10543:55:42","nodeType":"YulIf","src":"10543:55:42"},{"nativeSrc":"10607:23:42","nodeType":"YulVariableDeclaration","src":"10607:23:42","value":{"arguments":[{"name":"_1","nativeSrc":"10627:2:42","nodeType":"YulIdentifier","src":"10627:2:42"}],"functionName":{"name":"mload","nativeSrc":"10621:5:42","nodeType":"YulIdentifier","src":"10621:5:42"},"nativeSrc":"10621:9:42","nodeType":"YulFunctionCall","src":"10621:9:42"},"variables":[{"name":"length","nativeSrc":"10611:6:42","nodeType":"YulTypedName","src":"10611:6:42","type":""}]},{"body":{"nativeSrc":"10673:22:42","nodeType":"YulBlock","src":"10673:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"10675:16:42","nodeType":"YulIdentifier","src":"10675:16:42"},"nativeSrc":"10675:18:42","nodeType":"YulFunctionCall","src":"10675:18:42"},"nativeSrc":"10675:18:42","nodeType":"YulExpressionStatement","src":"10675:18:42"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"10645:6:42","nodeType":"YulIdentifier","src":"10645:6:42"},{"kind":"number","nativeSrc":"10653:18:42","nodeType":"YulLiteral","src":"10653:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10642:2:42","nodeType":"YulIdentifier","src":"10642:2:42"},"nativeSrc":"10642:30:42","nodeType":"YulFunctionCall","src":"10642:30:42"},"nativeSrc":"10639:56:42","nodeType":"YulIf","src":"10639:56:42"},{"nativeSrc":"10704:23:42","nodeType":"YulVariableDeclaration","src":"10704:23:42","value":{"arguments":[{"kind":"number","nativeSrc":"10724:2:42","nodeType":"YulLiteral","src":"10724:2:42","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"10718:5:42","nodeType":"YulIdentifier","src":"10718:5:42"},"nativeSrc":"10718:9:42","nodeType":"YulFunctionCall","src":"10718:9:42"},"variables":[{"name":"memPtr","nativeSrc":"10708:6:42","nodeType":"YulTypedName","src":"10708:6:42","type":""}]},{"nativeSrc":"10736:203:42","nodeType":"YulVariableDeclaration","src":"10736:203:42","value":{"arguments":[{"name":"memPtr","nativeSrc":"10758:6:42","nodeType":"YulIdentifier","src":"10758:6:42"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"length","nativeSrc":"10782:6:42","nodeType":"YulIdentifier","src":"10782:6:42"},{"kind":"number","nativeSrc":"10790:4:42","nodeType":"YulLiteral","src":"10790:4:42","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"10778:3:42","nodeType":"YulIdentifier","src":"10778:3:42"},"nativeSrc":"10778:17:42","nodeType":"YulFunctionCall","src":"10778:17:42"},{"kind":"number","nativeSrc":"10797:66:42","nodeType":"YulLiteral","src":"10797:66:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10774:3:42","nodeType":"YulIdentifier","src":"10774:3:42"},"nativeSrc":"10774:90:42","nodeType":"YulFunctionCall","src":"10774:90:42"},{"kind":"number","nativeSrc":"10866:2:42","nodeType":"YulLiteral","src":"10866:2:42","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"10770:3:42","nodeType":"YulIdentifier","src":"10770:3:42"},"nativeSrc":"10770:99:42","nodeType":"YulFunctionCall","src":"10770:99:42"},{"kind":"number","nativeSrc":"10871:66:42","nodeType":"YulLiteral","src":"10871:66:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"10766:3:42","nodeType":"YulIdentifier","src":"10766:3:42"},"nativeSrc":"10766:172:42","nodeType":"YulFunctionCall","src":"10766:172:42"}],"functionName":{"name":"add","nativeSrc":"10754:3:42","nodeType":"YulIdentifier","src":"10754:3:42"},"nativeSrc":"10754:185:42","nodeType":"YulFunctionCall","src":"10754:185:42"},"variables":[{"name":"newFreePtr","nativeSrc":"10740:10:42","nodeType":"YulTypedName","src":"10740:10:42","type":""}]},{"body":{"nativeSrc":"11014:22:42","nodeType":"YulBlock","src":"11014:22:42","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"11016:16:42","nodeType":"YulIdentifier","src":"11016:16:42"},"nativeSrc":"11016:18:42","nodeType":"YulFunctionCall","src":"11016:18:42"},"nativeSrc":"11016:18:42","nodeType":"YulExpressionStatement","src":"11016:18:42"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"10957:10:42","nodeType":"YulIdentifier","src":"10957:10:42"},{"kind":"number","nativeSrc":"10969:18:42","nodeType":"YulLiteral","src":"10969:18:42","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"10954:2:42","nodeType":"YulIdentifier","src":"10954:2:42"},"nativeSrc":"10954:34:42","nodeType":"YulFunctionCall","src":"10954:34:42"},{"arguments":[{"name":"newFreePtr","nativeSrc":"10993:10:42","nodeType":"YulIdentifier","src":"10993:10:42"},{"name":"memPtr","nativeSrc":"11005:6:42","nodeType":"YulIdentifier","src":"11005:6:42"}],"functionName":{"name":"lt","nativeSrc":"10990:2:42","nodeType":"YulIdentifier","src":"10990:2:42"},"nativeSrc":"10990:22:42","nodeType":"YulFunctionCall","src":"10990:22:42"}],"functionName":{"name":"or","nativeSrc":"10951:2:42","nodeType":"YulIdentifier","src":"10951:2:42"},"nativeSrc":"10951:62:42","nodeType":"YulFunctionCall","src":"10951:62:42"},"nativeSrc":"10948:88:42","nodeType":"YulIf","src":"10948:88:42"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11052:2:42","nodeType":"YulLiteral","src":"11052:2:42","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"11056:10:42","nodeType":"YulIdentifier","src":"11056:10:42"}],"functionName":{"name":"mstore","nativeSrc":"11045:6:42","nodeType":"YulIdentifier","src":"11045:6:42"},"nativeSrc":"11045:22:42","nodeType":"YulFunctionCall","src":"11045:22:42"},"nativeSrc":"11045:22:42","nodeType":"YulExpressionStatement","src":"11045:22:42"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"11083:6:42","nodeType":"YulIdentifier","src":"11083:6:42"},{"name":"length","nativeSrc":"11091:6:42","nodeType":"YulIdentifier","src":"11091:6:42"}],"functionName":{"name":"mstore","nativeSrc":"11076:6:42","nodeType":"YulIdentifier","src":"11076:6:42"},"nativeSrc":"11076:22:42","nodeType":"YulFunctionCall","src":"11076:22:42"},"nativeSrc":"11076:22:42","nodeType":"YulExpressionStatement","src":"11076:22:42"},{"body":{"nativeSrc":"11148:16:42","nodeType":"YulBlock","src":"11148:16:42","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11157:1:42","nodeType":"YulLiteral","src":"11157:1:42","type":"","value":"0"},{"kind":"number","nativeSrc":"11160:1:42","nodeType":"YulLiteral","src":"11160:1:42","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11150:6:42","nodeType":"YulIdentifier","src":"11150:6:42"},"nativeSrc":"11150:12:42","nodeType":"YulFunctionCall","src":"11150:12:42"},"nativeSrc":"11150:12:42","nodeType":"YulExpressionStatement","src":"11150:12:42"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"11121:2:42","nodeType":"YulIdentifier","src":"11121:2:42"},{"name":"length","nativeSrc":"11125:6:42","nodeType":"YulIdentifier","src":"11125:6:42"}],"functionName":{"name":"add","nativeSrc":"11117:3:42","nodeType":"YulIdentifier","src":"11117:3:42"},"nativeSrc":"11117:15:42","nodeType":"YulFunctionCall","src":"11117:15:42"},{"kind":"number","nativeSrc":"11134:2:42","nodeType":"YulLiteral","src":"11134:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11113:3:42","nodeType":"YulIdentifier","src":"11113:3:42"},"nativeSrc":"11113:24:42","nodeType":"YulFunctionCall","src":"11113:24:42"},{"name":"dataEnd","nativeSrc":"11139:7:42","nodeType":"YulIdentifier","src":"11139:7:42"}],"functionName":{"name":"gt","nativeSrc":"11110:2:42","nodeType":"YulIdentifier","src":"11110:2:42"},"nativeSrc":"11110:37:42","nodeType":"YulFunctionCall","src":"11110:37:42"},"nativeSrc":"11107:57:42","nodeType":"YulIf","src":"11107:57:42"},{"expression":{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"11212:2:42","nodeType":"YulIdentifier","src":"11212:2:42"},{"kind":"number","nativeSrc":"11216:2:42","nodeType":"YulLiteral","src":"11216:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11208:3:42","nodeType":"YulIdentifier","src":"11208:3:42"},"nativeSrc":"11208:11:42","nodeType":"YulFunctionCall","src":"11208:11:42"},{"arguments":[{"name":"memPtr","nativeSrc":"11225:6:42","nodeType":"YulIdentifier","src":"11225:6:42"},{"kind":"number","nativeSrc":"11233:2:42","nodeType":"YulLiteral","src":"11233:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11221:3:42","nodeType":"YulIdentifier","src":"11221:3:42"},"nativeSrc":"11221:15:42","nodeType":"YulFunctionCall","src":"11221:15:42"},{"name":"length","nativeSrc":"11238:6:42","nodeType":"YulIdentifier","src":"11238:6:42"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"11173:34:42","nodeType":"YulIdentifier","src":"11173:34:42"},"nativeSrc":"11173:72:42","nodeType":"YulFunctionCall","src":"11173:72:42"},"nativeSrc":"11173:72:42","nodeType":"YulExpressionStatement","src":"11173:72:42"},{"nativeSrc":"11254:16:42","nodeType":"YulAssignment","src":"11254:16:42","value":{"name":"memPtr","nativeSrc":"11264:6:42","nodeType":"YulIdentifier","src":"11264:6:42"},"variableNames":[{"name":"value1","nativeSrc":"11254:6:42","nodeType":"YulIdentifier","src":"11254:6:42"}]}]},"name":"abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory","nativeSrc":"10164:1112:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10226:9:42","nodeType":"YulTypedName","src":"10226:9:42","type":""},{"name":"dataEnd","nativeSrc":"10237:7:42","nodeType":"YulTypedName","src":"10237:7:42","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10249:6:42","nodeType":"YulTypedName","src":"10249:6:42","type":""},{"name":"value1","nativeSrc":"10257:6:42","nodeType":"YulTypedName","src":"10257:6:42","type":""}],"src":"10164:1112:42"},{"body":{"nativeSrc":"11438:211:42","nodeType":"YulBlock","src":"11438:211:42","statements":[{"nativeSrc":"11448:26:42","nodeType":"YulAssignment","src":"11448:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"11460:9:42","nodeType":"YulIdentifier","src":"11460:9:42"},{"kind":"number","nativeSrc":"11471:2:42","nodeType":"YulLiteral","src":"11471:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"11456:3:42","nodeType":"YulIdentifier","src":"11456:3:42"},"nativeSrc":"11456:18:42","nodeType":"YulFunctionCall","src":"11456:18:42"},"variableNames":[{"name":"tail","nativeSrc":"11448:4:42","nodeType":"YulIdentifier","src":"11448:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11490:9:42","nodeType":"YulIdentifier","src":"11490:9:42"},{"arguments":[{"name":"value0","nativeSrc":"11505:6:42","nodeType":"YulIdentifier","src":"11505:6:42"},{"kind":"number","nativeSrc":"11513:42:42","nodeType":"YulLiteral","src":"11513:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11501:3:42","nodeType":"YulIdentifier","src":"11501:3:42"},"nativeSrc":"11501:55:42","nodeType":"YulFunctionCall","src":"11501:55:42"}],"functionName":{"name":"mstore","nativeSrc":"11483:6:42","nodeType":"YulIdentifier","src":"11483:6:42"},"nativeSrc":"11483:74:42","nodeType":"YulFunctionCall","src":"11483:74:42"},"nativeSrc":"11483:74:42","nodeType":"YulExpressionStatement","src":"11483:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11577:9:42","nodeType":"YulIdentifier","src":"11577:9:42"},{"kind":"number","nativeSrc":"11588:2:42","nodeType":"YulLiteral","src":"11588:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11573:3:42","nodeType":"YulIdentifier","src":"11573:3:42"},"nativeSrc":"11573:18:42","nodeType":"YulFunctionCall","src":"11573:18:42"},{"name":"value1","nativeSrc":"11593:6:42","nodeType":"YulIdentifier","src":"11593:6:42"}],"functionName":{"name":"mstore","nativeSrc":"11566:6:42","nodeType":"YulIdentifier","src":"11566:6:42"},"nativeSrc":"11566:34:42","nodeType":"YulFunctionCall","src":"11566:34:42"},"nativeSrc":"11566:34:42","nodeType":"YulExpressionStatement","src":"11566:34:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11620:9:42","nodeType":"YulIdentifier","src":"11620:9:42"},{"kind":"number","nativeSrc":"11631:2:42","nodeType":"YulLiteral","src":"11631:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11616:3:42","nodeType":"YulIdentifier","src":"11616:3:42"},"nativeSrc":"11616:18:42","nodeType":"YulFunctionCall","src":"11616:18:42"},{"name":"value2","nativeSrc":"11636:6:42","nodeType":"YulIdentifier","src":"11636:6:42"}],"functionName":{"name":"mstore","nativeSrc":"11609:6:42","nodeType":"YulIdentifier","src":"11609:6:42"},"nativeSrc":"11609:34:42","nodeType":"YulFunctionCall","src":"11609:34:42"},"nativeSrc":"11609:34:42","nodeType":"YulExpressionStatement","src":"11609:34:42"}]},"name":"abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed","nativeSrc":"11281:368:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11391:9:42","nodeType":"YulTypedName","src":"11391:9:42","type":""},{"name":"value2","nativeSrc":"11402:6:42","nodeType":"YulTypedName","src":"11402:6:42","type":""},{"name":"value1","nativeSrc":"11410:6:42","nodeType":"YulTypedName","src":"11410:6:42","type":""},{"name":"value0","nativeSrc":"11418:6:42","nodeType":"YulTypedName","src":"11418:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11429:4:42","nodeType":"YulTypedName","src":"11429:4:42","type":""}],"src":"11281:368:42"},{"body":{"nativeSrc":"11783:168:42","nodeType":"YulBlock","src":"11783:168:42","statements":[{"nativeSrc":"11793:26:42","nodeType":"YulAssignment","src":"11793:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"11805:9:42","nodeType":"YulIdentifier","src":"11805:9:42"},{"kind":"number","nativeSrc":"11816:2:42","nodeType":"YulLiteral","src":"11816:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11801:3:42","nodeType":"YulIdentifier","src":"11801:3:42"},"nativeSrc":"11801:18:42","nodeType":"YulFunctionCall","src":"11801:18:42"},"variableNames":[{"name":"tail","nativeSrc":"11793:4:42","nodeType":"YulIdentifier","src":"11793:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11835:9:42","nodeType":"YulIdentifier","src":"11835:9:42"},{"arguments":[{"name":"value0","nativeSrc":"11850:6:42","nodeType":"YulIdentifier","src":"11850:6:42"},{"kind":"number","nativeSrc":"11858:42:42","nodeType":"YulLiteral","src":"11858:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11846:3:42","nodeType":"YulIdentifier","src":"11846:3:42"},"nativeSrc":"11846:55:42","nodeType":"YulFunctionCall","src":"11846:55:42"}],"functionName":{"name":"mstore","nativeSrc":"11828:6:42","nodeType":"YulIdentifier","src":"11828:6:42"},"nativeSrc":"11828:74:42","nodeType":"YulFunctionCall","src":"11828:74:42"},"nativeSrc":"11828:74:42","nodeType":"YulExpressionStatement","src":"11828:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11922:9:42","nodeType":"YulIdentifier","src":"11922:9:42"},{"kind":"number","nativeSrc":"11933:2:42","nodeType":"YulLiteral","src":"11933:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11918:3:42","nodeType":"YulIdentifier","src":"11918:3:42"},"nativeSrc":"11918:18:42","nodeType":"YulFunctionCall","src":"11918:18:42"},{"name":"value1","nativeSrc":"11938:6:42","nodeType":"YulIdentifier","src":"11938:6:42"}],"functionName":{"name":"mstore","nativeSrc":"11911:6:42","nodeType":"YulIdentifier","src":"11911:6:42"},"nativeSrc":"11911:34:42","nodeType":"YulFunctionCall","src":"11911:34:42"},"nativeSrc":"11911:34:42","nodeType":"YulExpressionStatement","src":"11911:34:42"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"11654:297:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11744:9:42","nodeType":"YulTypedName","src":"11744:9:42","type":""},{"name":"value1","nativeSrc":"11755:6:42","nodeType":"YulTypedName","src":"11755:6:42","type":""},{"name":"value0","nativeSrc":"11763:6:42","nodeType":"YulTypedName","src":"11763:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11774:4:42","nodeType":"YulTypedName","src":"11774:4:42","type":""}],"src":"11654:297:42"},{"body":{"nativeSrc":"12113:260:42","nodeType":"YulBlock","src":"12113:260:42","statements":[{"nativeSrc":"12123:26:42","nodeType":"YulAssignment","src":"12123:26:42","value":{"arguments":[{"name":"headStart","nativeSrc":"12135:9:42","nodeType":"YulIdentifier","src":"12135:9:42"},{"kind":"number","nativeSrc":"12146:2:42","nodeType":"YulLiteral","src":"12146:2:42","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"12131:3:42","nodeType":"YulIdentifier","src":"12131:3:42"},"nativeSrc":"12131:18:42","nodeType":"YulFunctionCall","src":"12131:18:42"},"variableNames":[{"name":"tail","nativeSrc":"12123:4:42","nodeType":"YulIdentifier","src":"12123:4:42"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"12165:9:42","nodeType":"YulIdentifier","src":"12165:9:42"},{"arguments":[{"name":"value0","nativeSrc":"12180:6:42","nodeType":"YulIdentifier","src":"12180:6:42"},{"kind":"number","nativeSrc":"12188:42:42","nodeType":"YulLiteral","src":"12188:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12176:3:42","nodeType":"YulIdentifier","src":"12176:3:42"},"nativeSrc":"12176:55:42","nodeType":"YulFunctionCall","src":"12176:55:42"}],"functionName":{"name":"mstore","nativeSrc":"12158:6:42","nodeType":"YulIdentifier","src":"12158:6:42"},"nativeSrc":"12158:74:42","nodeType":"YulFunctionCall","src":"12158:74:42"},"nativeSrc":"12158:74:42","nodeType":"YulExpressionStatement","src":"12158:74:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12252:9:42","nodeType":"YulIdentifier","src":"12252:9:42"},{"kind":"number","nativeSrc":"12263:2:42","nodeType":"YulLiteral","src":"12263:2:42","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12248:3:42","nodeType":"YulIdentifier","src":"12248:3:42"},"nativeSrc":"12248:18:42","nodeType":"YulFunctionCall","src":"12248:18:42"},{"arguments":[{"name":"value1","nativeSrc":"12272:6:42","nodeType":"YulIdentifier","src":"12272:6:42"},{"kind":"number","nativeSrc":"12280:42:42","nodeType":"YulLiteral","src":"12280:42:42","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12268:3:42","nodeType":"YulIdentifier","src":"12268:3:42"},"nativeSrc":"12268:55:42","nodeType":"YulFunctionCall","src":"12268:55:42"}],"functionName":{"name":"mstore","nativeSrc":"12241:6:42","nodeType":"YulIdentifier","src":"12241:6:42"},"nativeSrc":"12241:83:42","nodeType":"YulFunctionCall","src":"12241:83:42"},"nativeSrc":"12241:83:42","nodeType":"YulExpressionStatement","src":"12241:83:42"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12344:9:42","nodeType":"YulIdentifier","src":"12344:9:42"},{"kind":"number","nativeSrc":"12355:2:42","nodeType":"YulLiteral","src":"12355:2:42","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"12340:3:42","nodeType":"YulIdentifier","src":"12340:3:42"},"nativeSrc":"12340:18:42","nodeType":"YulFunctionCall","src":"12340:18:42"},{"name":"value2","nativeSrc":"12360:6:42","nodeType":"YulIdentifier","src":"12360:6:42"}],"functionName":{"name":"mstore","nativeSrc":"12333:6:42","nodeType":"YulIdentifier","src":"12333:6:42"},"nativeSrc":"12333:34:42","nodeType":"YulFunctionCall","src":"12333:34:42"},"nativeSrc":"12333:34:42","nodeType":"YulExpressionStatement","src":"12333:34:42"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"11956:417:42","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12066:9:42","nodeType":"YulTypedName","src":"12066:9:42","type":""},{"name":"value2","nativeSrc":"12077:6:42","nodeType":"YulTypedName","src":"12077:6:42","type":""},{"name":"value1","nativeSrc":"12085:6:42","nodeType":"YulTypedName","src":"12085:6:42","type":""},{"name":"value0","nativeSrc":"12093:6:42","nodeType":"YulTypedName","src":"12093:6:42","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"12104:4:42","nodeType":"YulTypedName","src":"12104:4:42","type":""}],"src":"11956:417:42"}]},"contents":"{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$2403__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1204__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IPoints_$3059__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 32))\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bool_t_bytes_calldata_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), value2)\n        calldatacopy(add(headStart, 96), value1, value2)\n        mstore(add(add(headStart, value2), 96), 0)\n        tail := add(add(headStart, and(add(value2, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 96)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool_t_bytes_memory_ptr__to_t_bool_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, iszero(iszero(value0)))\n        mstore(add(headStart, 32), 64)\n        tail := abi_encode_bytes(value1, add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_address__to_t_address_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bool_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_boolt_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_bool_fromMemory(headStart)\n        let offset := mload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if iszero(slt(add(_1, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := mload(_1)\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(length, 0x1f), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0), 63), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0))\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, length)\n        if gt(add(add(_1, length), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_1, 32), add(memPtr, 32), length)\n        value1 := memPtr\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_bytes32__to_t_address_t_uint256_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 64), value2)\n    }\n}","id":42,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1058":[{"length":32,"start":799},{"length":32,"start":1090},{"length":32,"start":5636},{"length":32,"start":5778}],"1985":[{"length":32,"start":582},{"length":32,"start":2284},{"length":32,"start":5952},{"length":32,"start":6074}],"3287":[{"length":32,"start":893},{"length":32,"start":6304}],"3289":[{"length":32,"start":750},{"length":32,"start":6263}]},"linkReferences":{},"object":"6080604052600436106101cc5760003560e01c80637b0a47ee116100f757806398807d8411610095578063d547741f11610064578063d547741f146105e2578063ef4cadc514610602578063efa90b541461061e578063f2fde38b1461063457600080fd5b806398807d841461055c5780639d696e3614610589578063c5c8f7701461059f578063d0b06f5d146105cc57600080fd5b80638580cf76116100d15780638580cf76146104d35780638bb9c5bf146105075780638da5cb5b1461052757806391d148541461053c57600080fd5b80637b0a47ee1461049257806380faa57d146104a8578063817b1cd2146104bd57600080fd5b80632c9d0b801161016f5780634e71d92d1161013e5780634e71d92d146103bf5780634fc35859146103d4578063572b6c051461042557806375c93bb91461047f57600080fd5b80632c9d0b80146103435780632d1e0c02146103585780632d4c2f931461036b5780632f2ff15d1461039f57600080fd5b80630700037d116101ab5780630700037d1461028d5780630968f264146102ba5780632196e445146102dc5780632b4c9f161461031057600080fd5b80628cc262146101d157806301ffc9a7146102045780630479d64414610234575b600080fd5b3480156101dd57600080fd5b506101f16101ec366004611a96565b610654565b6040519081526020015b60405180910390f35b34801561021057600080fd5b5061022461021f366004611ab1565b6106eb565b60405190151581526020016101fb565b34801561024057600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101fb565b34801561029957600080fd5b506101f16102a8366004611a96565b60076020526000908152604090205481565b3480156102c657600080fd5b506102da6102d5366004611b3c565b6106ff565b005b3480156102e857600080fd5b506101f17f000000000000000000000000000000000000000000000000000000000000000081565b34801561031c57600080fd5b507f0000000000000000000000000000000000000000000000000000000000000000610268565b34801561034f57600080fd5b506101f161074a565b6102da610366366004611b3c565b6107b2565b34801561037757600080fd5b506102687f000000000000000000000000000000000000000000000000000000000000000081565b3480156103ab57600080fd5b506102da6103ba366004611b7e565b6107ed565b3480156103cb57600080fd5b506102da610821565b3480156103e057600080fd5b506103f46103ef366004611baa565b6108d2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101fb565b34801561043157600080fd5b50610224610440366004611a96565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102da61048d366004611c19565b6109c5565b34801561049e57600080fd5b506101f160035481565b3480156104b457600080fd5b506101f1610c9f565b3480156104c957600080fd5b506101f160015481565b3480156104df57600080fd5b506101f17f726577617264657200000000000000000000000000000000000000000000000081565b34801561051357600080fd5b506102da610522366004611c3b565b610cb9565b34801561053357600080fd5b50610268610cd7565b34801561054857600080fd5b50610224610557366004611b7e565b610d03565b34801561056857600080fd5b506101f1610577366004611a96565b60066020526000908152604090205481565b34801561059557600080fd5b506101f160045481565b3480156105ab57600080fd5b506101f16105ba366004611a96565b60086020526000908152604090205481565b3480156105d857600080fd5b506101f160025481565b3480156105ee57600080fd5b506102da6105fd366004611b7e565b610d4e565b34801561060e57600080fd5b506101f1670de0b6b3a764000081565b34801561062a57600080fd5b506101f160055481565b34801561064057600080fd5b506102da61064f366004611a96565b610d7c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600760209081526040808320546008909252822054670de0b6b3a76400009061069761074a565b6106a19190611c83565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600660205260409020546106d19190611c96565b6106db9190611cdc565b6106e59190611cf0565b92915050565b60006106e5826106f9610d97565b90610dc5565b61074661070a610e9f565b83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ea992505050565b5050565b60015460009080820361075f57505060045490565b80670de0b6b3a7640000600354600254610777610c9f565b6107819190611c83565b61078b9190611c96565b6107959190611c96565b61079f9190611cdc565b6004546107ac9190611cf0565b91505090565b60016107e86107bf610e9f565b8285856040516020016107d493929190611d03565b604051602081830303815290604052610f95565b505050565b60006107f7610e9f565b905061080b81610805611081565b906110af565b6107e883838361081961111a565b929190611148565b600061082b610e9f565b90506108368161121f565b600061084182610654565b905080156107465773ffffffffffffffffffffffffffffffffffffffff8216600090815260076020526040812081905561087b83836112ad565b90508273ffffffffffffffffffffffffffffffffffffffff167f4196decb55b5644a278b6ded1c42a27acb5182aa099b1fd48974bcc0cf263fd582846040516108c5929190611dc7565b60405180910390a2505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610943576040517fc1ab6dc100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061099986828760405160200161095d91815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290526107d49291602001611de9565b507f4fc35859000000000000000000000000000000000000000000000000000000009695505050505050565b60006109cf610e9f565b9050610a057f7265776172646572000000000000000000000000000000000000000000000000826109fe61111a565b91906112b9565b82600003610a3f576040517f3853986500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600003610a79576040517f7616640100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a83600061121f565b60055460009081610a948542611cf0565b9050814210610b11576000610aa98688611cdc565b9050868682610af2576040517f99e66a49000000000000000000000000000000000000000000000000000000008152600481019290925260248201526044015b60405180910390fd5b50506003819055610b038688611e0c565b60058390559350610c3a9050565b818111610ba057610b224283611c83565b94506000610b308688611cdc565b9050868682610b74576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ae9565b50508060036000828254610b889190611cf0565b90915550610b9890508688611e0c565b935050610c3a565b610baa8587611cdc565b86908690610bed576040517f99e66a4900000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610ae9565b5060009050610bfc4284611c83565b600354610c099190611c96565b90506000610c178883611cf0565b9050610c238782611cdc565b600355610c308782611e0c565b6005849055945050505b42600255604080518781526020810187905290810184905273ffffffffffffffffffffffffffffffffffffffff8516907f0727302becd070529b3293f4ec8f553d9f6ae1773f638598db1205fbf89080839060600160405180910390a2505050505050565b600554600090428111610cb257806107ac565b4291505090565b610cd4610cc4610e9f565b82610ccd61111a565b919061133f565b50565b6000610cfe610ce4611081565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000610d478383610d1261111a565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b6000610d58610e9f565b9050610d6681610805611081565b6107e8838383610d7461111a565b9291906113e3565b610cd4610d87610e9f565b82610d90611081565b91906114ad565b6000806106e560017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611c83565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e15575060006106e5565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610e66575060016106e5565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b6000610cfe6115c1565b610eb28261121f565b6000610ebe838361170e565b905080600003610efa576040517fdb73cdf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610f0c9190611c83565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290610f46908490611c83565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167faae638dec0d864ccb08558c28981bcfaee41330f57c4911cbe2d8432d0fb729e83836040516108c5929190611dc7565b610f9e8261121f565b6000610faa8383611767565b905080600003610fe6576040517f040ef8ec00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060016000828254610ff89190611cf0565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604081208054839290611032908490611cf0565b925050819055508273ffffffffffffffffffffffffffffffffffffffff167ff4679d394f1f97f1a3df1d73e193866ec5a813168ad5fa6958f9be21b10a594e83836040516108c5929190611dc7565b6000806106e560017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611c83565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610746576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610ae9565b6000806106e560017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611c83565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166112195760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b61122761074a565b6004556005544210158061123c575060015415155b1561124d57611249610c9f565b6002555b73ffffffffffffffffffffffffffffffffffffffff811615610cd45761127281610654565b73ffffffffffffffffffffffffffffffffffffffff821660009081526007602090815260408083209390935560045460089091529190205550565b6060610d4783836117ea565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166107e8576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610ae9565b61134a8382846112b9565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156112195760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611210565b825473ffffffffffffffffffffffffffffffffffffffff908116908316811461151a576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610ae9565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112195783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6000333214806115d15750601836105b156115db57503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163314806116fd57506040517f019a202800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063019a202890606401602060405180830381865afa1580156116d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fd9190611e30565b1561170757919050565b3391505090565b6000818060200190518101906117249190611e4b565b90506106e573ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168483611902565b6000806000838060200190518101906117809190611e93565b91509150808060200190518101906117989190611e4b565b925081156117e2576117e273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016863086611983565b505092915050565b6060816040516020016117ff91815260200190565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152908290527f26b3293f00000000000000000000000000000000000000000000000000000000825273ffffffffffffffffffffffffffffffffffffffff8581166004840152602483018590527f000000000000000000000000000000000000000000000000000000000000000060448401529092507f000000000000000000000000000000000000000000000000000000000000000016906326b3293f90606401600060405180830381600087803b1580156118e457600080fd5b505af11580156118f8573d6000803e3d6000fd5b5050505092915050565b60405173ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018390526107e891859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506119c9565b60405173ffffffffffffffffffffffffffffffffffffffff84811660248301528381166044830152606482018390526112199186918216906323b872dd9060840161193c565b600080602060008451602086016000885af1806119ec576040513d6000823e3d81fd5b50506000513d91508115611a04578060011415611a1e565b73ffffffffffffffffffffffffffffffffffffffff84163b155b15611219576040517f5274afe700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602401610ae9565b803573ffffffffffffffffffffffffffffffffffffffff81168114611a9157600080fd5b919050565b600060208284031215611aa857600080fd5b610d4782611a6d565b600060208284031215611ac357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4757600080fd5b60008083601f840112611b0557600080fd5b50813567ffffffffffffffff811115611b1d57600080fd5b602083019150836020828501011115611b3557600080fd5b9250929050565b60008060208385031215611b4f57600080fd5b823567ffffffffffffffff811115611b6657600080fd5b611b7285828601611af3565b90969095509350505050565b60008060408385031215611b9157600080fd5b82359150611ba160208401611a6d565b90509250929050565b600080600080600060808688031215611bc257600080fd5b611bcb86611a6d565b9450611bd960208701611a6d565b935060408601359250606086013567ffffffffffffffff811115611bfc57600080fd5b611c0888828901611af3565b969995985093965092949392505050565b60008060408385031215611c2c57600080fd5b50508035926020909101359150565b600060208284031215611c4d57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156106e5576106e5611c54565b80820281158282048414176106e5576106e5611c54565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082611ceb57611ceb611cad565b500490565b808201808211156106e5576106e5611c54565b831515815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016010192915050565b60005b83811015611d74578181015183820152602001611d5c565b50506000910152565b60008151808452611d95816020860160208601611d59565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b604081526000611dda6040830185611d7d565b90508260208301529392505050565b8215158152604060208201526000611e046040830184611d7d565b949350505050565b600082611e1b57611e1b611cad565b500690565b80518015158114611a9157600080fd5b600060208284031215611e4257600080fd5b610d4782611e20565b600060208284031215611e5d57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215611ea657600080fd5b611eaf83611e20565b9150602083015167ffffffffffffffff811115611ecb57600080fd5b8301601f81018513611edc57600080fd5b805167ffffffffffffffff811115611ef657611ef6611e64565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8501160116810181811067ffffffffffffffff82111715611f6257611f62611e64565b604052818152828201602001871015611f7a57600080fd5b611f8b826020830160208601611d59565b809350505050925092905056fea26469706673582212208df611c883551c6a1cff0792d02ce7e88c6a7c3b8fa0ccfdb0cef41e4984126a64736f6c634300081c0033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CC JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x7B0A47EE GT PUSH2 0xF7 JUMPI DUP1 PUSH4 0x98807D84 GT PUSH2 0x95 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x64 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x5E2 JUMPI DUP1 PUSH4 0xEF4CADC5 EQ PUSH2 0x602 JUMPI DUP1 PUSH4 0xEFA90B54 EQ PUSH2 0x61E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x634 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x98807D84 EQ PUSH2 0x55C JUMPI DUP1 PUSH4 0x9D696E36 EQ PUSH2 0x589 JUMPI DUP1 PUSH4 0xC5C8F770 EQ PUSH2 0x59F JUMPI DUP1 PUSH4 0xD0B06F5D EQ PUSH2 0x5CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8580CF76 GT PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8580CF76 EQ PUSH2 0x4D3 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x507 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x527 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x53C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x492 JUMPI DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x4A8 JUMPI DUP1 PUSH4 0x817B1CD2 EQ PUSH2 0x4BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 GT PUSH2 0x16F JUMPI DUP1 PUSH4 0x4E71D92D GT PUSH2 0x13E JUMPI DUP1 PUSH4 0x4E71D92D EQ PUSH2 0x3BF JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x3D4 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x425 JUMPI DUP1 PUSH4 0x75C93BB9 EQ PUSH2 0x47F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x2C9D0B80 EQ PUSH2 0x343 JUMPI DUP1 PUSH4 0x2D1E0C02 EQ PUSH2 0x358 JUMPI DUP1 PUSH4 0x2D4C2F93 EQ PUSH2 0x36B JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x39F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x700037D GT PUSH2 0x1AB JUMPI DUP1 PUSH4 0x700037D EQ PUSH2 0x28D JUMPI DUP1 PUSH4 0x968F264 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0x2196E445 EQ PUSH2 0x2DC JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x310 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH3 0x8CC262 EQ PUSH2 0x1D1 JUMPI DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x204 JUMPI DUP1 PUSH4 0x479D644 EQ PUSH2 0x234 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x1EC CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH2 0x654 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x210 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1AB1 JUMP JUMPDEST PUSH2 0x6EB JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x240 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x299 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x2A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x6FF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH32 0x0 PUSH2 0x268 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x34F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x74A JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x366 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B3C JUMP JUMPDEST PUSH2 0x7B2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x377 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x3BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0x7ED JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x821 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x3F4 PUSH2 0x3EF CALLDATASIZE PUSH1 0x4 PUSH2 0x1BAA JUMP JUMPDEST PUSH2 0x8D2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x431 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x440 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x48D CALLDATASIZE PUSH1 0x4 PUSH2 0x1C19 JUMP JUMPDEST PUSH2 0x9C5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x49E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0xC9F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x522 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C3B JUMP JUMPDEST PUSH2 0xCB9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x533 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x268 PUSH2 0xCD7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x224 PUSH2 0x557 CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xD03 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x577 CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x595 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH2 0x5BA CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x5FD CALLDATASIZE PUSH1 0x4 PUSH2 0x1B7E JUMP JUMPDEST PUSH2 0xD4E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x60E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH8 0xDE0B6B3A7640000 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x62A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F1 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x640 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2DA PUSH2 0x64F CALLDATASIZE PUSH1 0x4 PUSH2 0x1A96 JUMP JUMPDEST PUSH2 0xD7C JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0x8 SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0x697 PUSH2 0x74A JUMP JUMPDEST PUSH2 0x6A1 SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x6D1 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x6DB SWAP2 SWAP1 PUSH2 0x1CDC JUMP JUMPDEST PUSH2 0x6E5 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6E5 DUP3 PUSH2 0x6F9 PUSH2 0xD97 JUMP JUMPDEST SWAP1 PUSH2 0xDC5 JUMP JUMPDEST PUSH2 0x746 PUSH2 0x70A PUSH2 0xE9F JUMP JUMPDEST DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xEA9 SWAP3 POP POP POP JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x0 SWAP1 DUP1 DUP3 SUB PUSH2 0x75F JUMPI POP POP PUSH1 0x4 SLOAD SWAP1 JUMP JUMPDEST DUP1 PUSH8 0xDE0B6B3A7640000 PUSH1 0x3 SLOAD PUSH1 0x2 SLOAD PUSH2 0x777 PUSH2 0xC9F JUMP JUMPDEST PUSH2 0x781 SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST PUSH2 0x78B SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST PUSH2 0x79F SWAP2 SWAP1 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7AC SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH2 0x7E8 PUSH2 0x7BF PUSH2 0xE9F JUMP JUMPDEST DUP3 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x7D4 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D03 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH2 0xF95 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7F7 PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0x80B DUP2 PUSH2 0x805 PUSH2 0x1081 JUMP JUMPDEST SWAP1 PUSH2 0x10AF JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0x819 PUSH2 0x111A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1148 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x82B PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0x836 DUP2 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0x841 DUP3 PUSH2 0x654 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 0x746 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP2 SWAP1 SSTORE PUSH2 0x87B DUP4 DUP4 PUSH2 0x12AD JUMP JUMPDEST SWAP1 POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x4196DECB55B5644A278B6DED1C42A27ACB5182AA099B1FD48974BCC0CF263FD5 DUP3 DUP5 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ PUSH2 0x943 JUMPI PUSH1 0x40 MLOAD PUSH32 0xC1AB6DC100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x999 DUP7 DUP3 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x95D SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH2 0x7D4 SWAP3 SWAP2 PUSH1 0x20 ADD PUSH2 0x1DE9 JUMP JUMPDEST POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x9CF PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0xA05 PUSH32 0x7265776172646572000000000000000000000000000000000000000000000000 DUP3 PUSH2 0x9FE PUSH2 0x111A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x12B9 JUMP JUMPDEST DUP3 PUSH1 0x0 SUB PUSH2 0xA3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x3853986500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 0x0 SUB PUSH2 0xA79 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7616640100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xA83 PUSH1 0x0 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 DUP2 PUSH2 0xA94 DUP6 TIMESTAMP PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP DUP2 TIMESTAMP LT PUSH2 0xB11 JUMPI PUSH1 0x0 PUSH2 0xAA9 DUP7 DUP9 PUSH2 0x1CDC JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xAF2 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP PUSH1 0x3 DUP2 SWAP1 SSTORE PUSH2 0xB03 DUP7 DUP9 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x5 DUP4 SWAP1 SSTORE SWAP4 POP PUSH2 0xC3A SWAP1 POP JUMP JUMPDEST DUP2 DUP2 GT PUSH2 0xBA0 JUMPI PUSH2 0xB22 TIMESTAMP DUP4 PUSH2 0x1C83 JUMP JUMPDEST SWAP5 POP PUSH1 0x0 PUSH2 0xB30 DUP7 DUP9 PUSH2 0x1CDC JUMP JUMPDEST SWAP1 POP DUP7 DUP7 DUP3 PUSH2 0xB74 JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST POP POP DUP1 PUSH1 0x3 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xB88 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xB98 SWAP1 POP DUP7 DUP9 PUSH2 0x1E0C JUMP JUMPDEST SWAP4 POP POP PUSH2 0xC3A JUMP JUMPDEST PUSH2 0xBAA DUP6 DUP8 PUSH2 0x1CDC JUMP JUMPDEST DUP7 SWAP1 DUP7 SWAP1 PUSH2 0xBED JUMPI PUSH1 0x40 MLOAD PUSH32 0x99E66A4900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH2 0xBFC TIMESTAMP DUP5 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0xC09 SWAP2 SWAP1 PUSH2 0x1C96 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xC17 DUP9 DUP4 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 POP PUSH2 0xC23 DUP8 DUP3 PUSH2 0x1CDC JUMP JUMPDEST PUSH1 0x3 SSTORE PUSH2 0xC30 DUP8 DUP3 PUSH2 0x1E0C JUMP JUMPDEST PUSH1 0x5 DUP5 SWAP1 SSTORE SWAP5 POP POP POP JUMPDEST TIMESTAMP PUSH1 0x2 SSTORE PUSH1 0x40 DUP1 MLOAD DUP8 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 PUSH32 0x727302BECD070529B3293F4EC8F553D9F6AE1773F638598DB1205FBF8908083 SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 TIMESTAMP DUP2 GT PUSH2 0xCB2 JUMPI DUP1 PUSH2 0x7AC JUMP JUMPDEST TIMESTAMP SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH2 0xCD4 PUSH2 0xCC4 PUSH2 0xE9F JUMP JUMPDEST DUP3 PUSH2 0xCCD PUSH2 0x111A JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x133F JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCFE PUSH2 0xCE4 PUSH2 0x1081 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD47 DUP4 DUP4 PUSH2 0xD12 PUSH2 0x111A JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD58 PUSH2 0xE9F JUMP JUMPDEST SWAP1 POP PUSH2 0xD66 DUP2 PUSH2 0x805 PUSH2 0x1081 JUMP JUMPDEST PUSH2 0x7E8 DUP4 DUP4 DUP4 PUSH2 0xD74 PUSH2 0x111A JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x13E3 JUMP JUMPDEST PUSH2 0xCD4 PUSH2 0xD87 PUSH2 0xE9F JUMP JUMPDEST DUP3 PUSH2 0xD90 PUSH2 0x1081 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x14AD JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE15 JUMPI POP PUSH1 0x0 PUSH2 0x6E5 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xE66 JUMPI POP PUSH1 0x1 PUSH2 0x6E5 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCFE PUSH2 0x15C1 JUMP JUMPDEST PUSH2 0xEB2 DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xEBE DUP4 DUP4 PUSH2 0x170E JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xEFA JUMPI PUSH1 0x40 MLOAD PUSH32 0xDB73CDF000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xF0C SWAP2 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0xF46 SWAP1 DUP5 SWAP1 PUSH2 0x1C83 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xAAE638DEC0D864CCB08558C28981BCFAEE41330F57C4911CBE2D8432D0FB729E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH2 0xF9E DUP3 PUSH2 0x121F JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFAA DUP4 DUP4 PUSH2 0x1767 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 0x0 SUB PUSH2 0xFE6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40EF8EC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xFF8 SWAP2 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 0x1032 SWAP1 DUP5 SWAP1 PUSH2 0x1CF0 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xF4679D394F1F97F1A3DF1D73E193866EC5A813168AD5FA6958F9BE21B10A594E DUP4 DUP4 PUSH1 0x40 MLOAD PUSH2 0x8C5 SWAP3 SWAP2 SWAP1 PUSH2 0x1DC7 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1C83 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x746 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x6E5 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1C83 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1219 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x1227 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x4 SSTORE PUSH1 0x5 SLOAD TIMESTAMP LT ISZERO DUP1 PUSH2 0x123C JUMPI POP PUSH1 0x1 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 0x124D JUMPI PUSH2 0x1249 PUSH2 0xC9F JUMP JUMPDEST PUSH1 0x2 SSTORE JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO PUSH2 0xCD4 JUMPI PUSH2 0x1272 DUP2 PUSH2 0x654 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x4 SLOAD PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xD47 DUP4 DUP4 PUSH2 0x17EA JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x7E8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0xAE9 JUMP JUMPDEST PUSH2 0x134A DUP4 DUP3 DUP5 PUSH2 0x12B9 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1219 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1210 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x151A JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1219 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER ORIGIN EQ DUP1 PUSH2 0x15D1 JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x15DB JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x16FD JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x19A202800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE ADDRESS PUSH1 0x44 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x19A2028 SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x16D9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x16FD SWAP2 SWAP1 PUSH2 0x1E30 JUMP JUMPDEST ISZERO PUSH2 0x1707 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1724 SWAP2 SWAP1 PUSH2 0x1E4B JUMP JUMPDEST SWAP1 POP PUSH2 0x6E5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP5 DUP4 PUSH2 0x1902 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP4 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1780 SWAP2 SWAP1 PUSH2 0x1E93 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1798 SWAP2 SWAP1 PUSH2 0x1E4B JUMP JUMPDEST SWAP3 POP DUP2 ISZERO PUSH2 0x17E2 JUMPI PUSH2 0x17E2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND DUP7 ADDRESS DUP7 PUSH2 0x1983 JUMP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x17FF SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE PUSH32 0x26B3293F00000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP5 ADD MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE PUSH32 0x0 PUSH1 0x44 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0x26B3293F SWAP1 PUSH1 0x64 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x18E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x18F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x7E8 SWAP2 DUP6 SWAP2 DUP3 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP2 POP PUSH1 0xE0 SHL PUSH1 0x20 DUP3 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 0x19C9 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 DUP2 AND PUSH1 0x44 DUP4 ADD MSTORE PUSH1 0x64 DUP3 ADD DUP4 SWAP1 MSTORE PUSH2 0x1219 SWAP2 DUP7 SWAP2 DUP3 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x84 ADD PUSH2 0x193C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 PUSH1 0x0 DUP5 MLOAD PUSH1 0x20 DUP7 ADD PUSH1 0x0 DUP9 GAS CALL DUP1 PUSH2 0x19EC JUMPI PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY RETURNDATASIZE DUP2 REVERT JUMPDEST POP POP PUSH1 0x0 MLOAD RETURNDATASIZE SWAP2 POP DUP2 ISZERO PUSH2 0x1A04 JUMPI DUP1 PUSH1 0x1 EQ ISZERO PUSH2 0x1A1E JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x1219 JUMPI PUSH1 0x40 MLOAD PUSH32 0x5274AFE700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xAE9 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1A91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD47 DUP3 PUSH2 0x1A6D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1AC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xD47 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x1B05 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x1B35 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1B66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1B72 DUP6 DUP3 DUP7 ADD PUSH2 0x1AF3 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH2 0x1BA1 PUSH1 0x20 DUP5 ADD PUSH2 0x1A6D JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x1BC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BCB DUP7 PUSH2 0x1A6D JUMP JUMPDEST SWAP5 POP PUSH2 0x1BD9 PUSH1 0x20 DUP8 ADD PUSH2 0x1A6D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1BFC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1C08 DUP9 DUP3 DUP10 ADD PUSH2 0x1AF3 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C2C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1C4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1CEB JUMPI PUSH2 0x1CEB PUSH2 0x1CAD JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x6E5 JUMPI PUSH2 0x6E5 PUSH2 0x1C54 JUMP JUMPDEST DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE DUP2 PUSH1 0x40 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x60 DUP4 ADD CALLDATACOPY PUSH1 0x0 DUP2 DUP4 ADD PUSH1 0x60 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1D74 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1D5C JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1D95 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D59 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x1DDA PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1D7D JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 0x40 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0x1E04 PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x1D7D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1E1B JUMPI PUSH2 0x1E1B PUSH2 0x1CAD JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST DUP1 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1A91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E42 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD47 DUP3 PUSH2 0x1E20 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E5D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1EA6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1EAF DUP4 PUSH2 0x1E20 JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1ECB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x1F DUP2 ADD DUP6 SGT PUSH2 0x1EDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1EF6 JUMPI PUSH2 0x1EF6 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x3F PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND ADD AND DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1F62 JUMPI PUSH2 0x1F62 PUSH2 0x1E64 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP2 DUP2 MSTORE DUP3 DUP3 ADD PUSH1 0x20 ADD DUP8 LT ISZERO PUSH2 0x1F7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F8B DUP3 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1D59 JUMP JUMPDEST DUP1 SWAP4 POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP14 0xF6 GT 0xC8 DUP4 SSTORE SHR PUSH11 0x1CFF0792D02CE7E88C6A7C EXTCODESIZE DUP16 LOG0 0xCC REVERT 0xB0 0xCE DELEGATECALL 0x1E BLOBHASH DUP5 SLT PUSH11 0x64736F6C634300081C0033 ","sourceMap":"713:869:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3332:201:24;;;;;;;;;;-1:-1:-1;3332:201:24;;;;;:::i;:::-;;:::i;:::-;;;552:25:42;;;540:2;525:18;3332:201:24;;;;;;;;542:165:13;;;;;;;;;;-1:-1:-1;542:165:13;;;;;:::i;:::-;;:::i;:::-;;;1090:14:42;;1083:22;1065:41;;1053:2;1038:18;542:165:13;925:187:42;466:37:25;;;;;;;;;;;;;;;;;;1308:42:42;1296:55;;;1278:74;;1266:2;1251:18;466:37:25;1117:241:42;1428:56:24;;;;;;;;;;-1:-1:-1;1428:56:24;;;;;:::i;:::-;;;;;;;;;;;;;;1684:165:25;;;;;;;;;;-1:-1:-1;1684:165:25;;;;;:::i;:::-;;:::i;:::-;;267:44:41;;;;;;;;;;;;;;;728:115:17;;;;;;;;;;-1:-1:-1;817:19:17;728:115;;2971:355:24;;;;;;;;;;;;;:::i;1053:229:25:-;;;;;;:::i;:::-;;:::i;221:40:41:-;;;;;;;;;;;;;;;1116:257:2;;;;;;;;;;-1:-1:-1;1116:257:2;;;;;:::i;:::-;;:::i;4570:341:24:-;;;;;;;;;;;;;:::i;689:358:25:-;;;;;;;;;;-1:-1:-1;689:358:25;;;;;:::i;:::-;;:::i;:::-;;;3972:66:42;3960:79;;;3942:98;;3930:2;3915:18;689:358:25;3798:248:42;878:149:17;;;;;;;;;;-1:-1:-1;878:149:17;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;4917:1996:24;;;;;;:::i;:::-;;:::i;1248:25::-;;;;;;;;;;;;;;;;2734:231;;;;;;;;;;;;;:::i;1184:26::-;;;;;;;;;;;;;;;;1076:50;;;;;;;;;;;;;;;1994:124:2;;;;;;;;;;-1:-1:-1;1994:124:2;;;;;:::i;:::-;;:::i;710:120:3:-;;;;;;;;;;;;;:::i;2159:162:2:-;;;;;;;;;;-1:-1:-1;2159:162:2;;;;;:::i;:::-;;:::i;1362:60:24:-;;;;;;;;;;-1:-1:-1;1362:60:24;;;;;:::i;:::-;;;;;;;;;;;;;;1279:40;;;;;;;;;;;;;;;;1490:70;;;;;;;;;;-1:-1:-1;1490:70:24;;;;;:::i;:::-;;;;;;;;;;;;;;1216:26;;;;;;;;;;;;;;;;1694:259:2;;;;;;;;;;-1:-1:-1;1694:259:2;;;;;:::i;:::-;;:::i;1132:45:24:-;;;;;;;;;;;;1173:4;1132:45;;1325:30;;;;;;;;;;;;;;;;864:152:3;;;;;;;;;;-1:-1:-1;864:152:3;;;;;:::i;:::-;;:::i;3332:201:24:-;3510:16;;;3386:7;3510:16;;;:7;:16;;;;;;;;;3456:23;:32;;;;;;1173:4;;3432:21;:19;:21::i;:::-;:56;;;;:::i;:::-;3413:15;;;;;;;:6;:15;;;;;;:76;;;;:::i;:::-;3412:95;;;;:::i;:::-;:114;;;;:::i;:::-;3405:121;3332:201;-1:-1:-1;;3332:201:24:o;542:165:13:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;1684:165:25:-;1805:37;1815:12;:10;:12::i;:::-;1829;;1805:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1805:9:25;;-1:-1:-1;;;1805:37:25:i;:::-;1684:165;;:::o;2971:355:24:-;3071:11;;3023:7;;3096:23;;;3092:86;;-1:-1:-1;;3142:25:24;;;2971:355::o;3092:86::-;3300:18;1173:4;3269:10;;3254:11;;3225:26;:24;:26::i;:::-;:40;;;;:::i;:::-;3224:55;;;;:::i;:::-;:72;;;;:::i;:::-;3223:95;;;;:::i;:::-;3194:25;;:125;;;;:::i;:::-;3187:132;;;2971:355;:::o;1053:229:25:-;1200:4;1214:61;1221:12;:10;:12::i;:::-;1246:16;1264:9;;1235:39;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1214:6;:61::i;:::-;1126:156;1053:229;;:::o;1116:257:2:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;4570:341:24:-;4612:14;4629:12;:10;:12::i;:::-;4612:29;;4651:21;4665:6;4651:13;:21::i;:::-;4682:14;4699;4706:6;4699;:14::i;:::-;4682:31;-1:-1:-1;4727:11:24;;4723:182;;4754:15;;;4772:1;4754:15;;;:7;:15;;;;;:19;;;4812:29;4762:6;4834;4812:13;:29::i;:::-;4787:54;;4868:6;4860:34;;;4876:9;4887:6;4860:34;;;;;;;:::i;:::-;;;;;;;;4740:165;4602:309;;4570:341::o;689:358:25:-;803:6;825:10;:36;847:13;825:36;;821:63;;870:14;;;;;;;;;;;;;;821:63;894:21;933:61;940:4;957:16;986:5;975:17;;;;;;552:25:42;;540:2;525:18;;406:177;975:17:25;;;;;;;;;;;;;;;946:47;;;975:17;946:47;;:::i;933:61::-;-1:-1:-1;1011:29:25;;689:358;-1:-1:-1;;;;;;689:358:25:o;4917:1996:24:-;5003:14;5020:12;:10;:12::i;:::-;5003:29;;5042:67;5087:13;5102:6;5042:29;:27;:29::i;:::-;:44;:67;:44;:67::i;:::-;5128:6;5138:1;5128:11;5120:43;;;;;;;;;;;;;;;;;5181:8;5193:1;5181:13;5173:41;;;;;;;;;;;;;;;;;5225:25;5247:1;5225:13;:25::i;:::-;5316:15;;5261:12;;;5369:26;5387:8;5369:15;:26;:::i;:::-;5341:54;;5429:22;5410:15;:41;5406:1353;;5506:21;5530:17;5539:8;5530:6;:17;:::i;:::-;5506:41;-1:-1:-1;5615:6:24;5623:8;5569:18;5561:72;;;;;;;;;;7695:25:42;;;;7736:18;;;7729:34;7668:18;;5561:72:24;;;;;;;;;-1:-1:-1;;5647:10:24;:26;;;5694:17;5703:8;5694:6;:17;:::i;:::-;5725:15;:35;;;5687:24;-1:-1:-1;5406:1353:24;;-1:-1:-1;5406:1353:24;;5816:22;5795:17;:43;5791:958;;5938:40;5963:15;5938:22;:40;:::i;:::-;5927:51;-1:-1:-1;5996:28:24;6027:17;5927:51;6027:6;:17;:::i;:::-;5996:48;-1:-1:-1;6123:6:24;6131:8;6070:25;6062:79;;;;;;;;;;7695:25:42;;;;7736:18;;;7729:34;7668:18;;6062:79:24;7521:248:42;6062:79:24;;;6173:20;6159:10;;:34;;;;;;;:::i;:::-;;;;-1:-1:-1;6218:17:24;;-1:-1:-1;6227:8:24;6218:6;:17;:::i;:::-;6211:24;;5840:410;5791:958;;;6350:17;6359:8;6350:6;:17;:::i;:::-;6400:6;;6408:8;;6342:76;;;;;;;;;;7695:25:42;;;;7736:18;;;7729:34;7668:18;;6342:76:24;7521:248:42;6342:76:24;-1:-1:-1;6436:23:24;;-1:-1:-1;6476:40:24;6501:15;6476:22;:40;:::i;:::-;6462:10;;:55;;;;:::i;:::-;6436:81;-1:-1:-1;6535:19:24;6557:24;6575:6;6436:81;6557:24;:::i;:::-;6535:46;-1:-1:-1;6612:22:24;6626:8;6535:46;6612:22;:::i;:::-;6599:10;:35;6659:22;6673:8;6659:11;:22;:::i;:::-;6699:15;:35;;;6652:29;-1:-1:-1;;;5791:958:24;6782:15;6768:11;:29;6863:43;;;8093:25:42;;;8149:2;8134:18;;8127:34;;;8177:18;;;8170:34;;;6863:43:24;;;;;;8081:2:42;8066:18;6863:43:24;;;;;;;4993:1920;;;;4917:1996;;:::o;2734:231::-;2843:15;;2791:7;;2875:15;:40;-1:-1:-1;2875:83:24;;2936:22;2875:83;;;2918:15;2868:90;;;2734:231;:::o;1994:124:2:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:3:-;756:7;782:41;:33;:31;:33::i;:::-;3646:15:12;;;;3550:118;782:41:3;775:48;;710:120;:::o;2159:162:2:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2768:13:11;2800;;;;;;;;;;;:22;;;;;;;;;;;;;;;2679:150;2262:52:2;2255:59;2159:162;-1:-1:-1;;;2159:162:2:o;1694:259::-;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:3:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:16;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:16;1620:11;;1560:82;-1:-1:-1;1658:34:16;;:21;:34;;;;;;;;;;;;;;;1359:340::o;7413:175:24:-;7514:7;7540:41;:39;:41::i;4183:381::-;4272:21;4286:6;4272:13;:21::i;:::-;4303:19;4325:38;4342:6;4350:12;4325:16;:38::i;:::-;4303:60;;4381:11;4396:1;4381:16;4373:50;;;;;;;;;;;;;;;;;4448:11;4433;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;4469:14:24;;;;;;;:6;:14;;;;;:29;;4487:11;;4469:14;:29;;4487:11;;4469:29;:::i;:::-;;;;;;;;4523:6;4513:44;;;4531:12;4545:11;4513:44;;;;;;;:::i;3682:360::-;3765:21;3779:6;3765:13;:21::i;:::-;3796:19;3818:32;3832:6;3840:9;3818:13;:32::i;:::-;3796:54;;3868:11;3883:1;3868:16;3860:47;;;;;;;;;;;;;;;;;3932:11;3917;;:26;;;;;;;:::i;:::-;;;;-1:-1:-1;;3953:14:24;;;;;;;:6;:14;;;;;:29;;3971:11;;3953:14;:29;;3971:11;;3953:29;:::i;:::-;;;;;;;;4004:6;3997:38;;;4012:9;4023:11;3997:38;;;;;;;:::i;5060:174:12:-;5101:16;;920:71;990:1;928:58;920:71;:::i;4408:162::-;4514:15;;;4503:26;;;4514:15;;4503:26;4499:64;;4538:25;;;;;1308:42:42;1296:55;;4538:25:12;;;1278:74:42;1251:18;;4538:25:12;1117:241:42;4376:174:11;4417:16;;696:67;762:1;704:54;696:67;:::i;1145:251::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1250:140;;1295:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1320:4;1295:29;;;1343:36;;8417:25:42;;;8458:18;;;8451:83;8570:55;;;8550:18;;;8543:83;;;;1343:36:11;;8405:2:42;8390:18;1343:36:11;;;;;;;;1250:140;1145:251;;;;:::o;2240:488:24:-;2327:21;:19;:21::i;:::-;2299:25;:49;2381:15;;2362;:34;;;:54;;-1:-1:-1;2400:11:24;;:16;;2362:54;2358:195;;;2516:26;:24;:26::i;:::-;2502:11;:40;2358:195;2566:21;;;;2562:160;;2622:15;2629:7;2622:6;:15::i;:::-;2603:16;;;;;;;:7;:16;;;;;;;;:34;;;;2686:25;;2651:23;:32;;;;;;:60;2240:488;:::o;1100:252:40:-;1250:22;1291:54;1330:6;1338;1291:38;:54::i;3640:170:11:-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;3737:66;;3775:28;;;;;;;;8811:25:42;;;8884:42;8872:55;;8852:18;;;8845:83;8784:18;;3775:28:11;8637:297:42;2282:213:11;2371:30;:1;2388:4;2394:6;2371:16;:30::i;:::-;2435:5;2411:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2455:33;;8417:25:42;;;8458:18;;;8451:83;;;8550:18;;8543:83;;;;2455:33:11;;8405:2:42;8390:18;2455:33:11;;;;;;;2282:213;;;:::o;1774:252::-;2768:13;2800;;;;;;;;;;;:22;;;;;;;;;;;;;1880:140;;;1949:5;1924:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1973:36;;8417:25:42;;;8458:18;;;8451:83;8570:55;;;8550:18;;;8543:83;;;;1973:36:11;;8405:2:42;8390:18;1973:36:11;8215:417:42;3054:369:12;3176:15;;;;;;;3205:23;;;;3201:60;;3237:24;;;;;1308:42:42;1296:55;;3237:24:12;;;1278:74:42;1251:18;;3237:24:12;1117:241:42;3201:60:12;3292:8;3275:25;;:13;:25;;;3271:146;;3316:26;;;;;;;;;;;;;3361:45;;;;;;;;-1:-1:-1;;3361:45:12;3142:281;3054:369;;;:::o;784:760:18:-;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:18;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:18;;784:760::o;1043:95::-;462:23:21;466:14;462:23;449:37;445:2;441:46;1372:19:18;1350:42;;:10;:42;;:120;;-1:-1:-1;1396:74:18;;;;;:39;9159:55:42;;;1396:74:18;;;9141::42;1444:10:18;9231:18:42;;;9224:83;1464:4:18;9323:18:42;;;9316:83;1396:19:18;:39;;;;9114:18:42;;1396:74:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:164;;;1493:6;784:760;-1:-1:-1;784:760:18:o;1346:164::-;1527:10;1520:17;;;784:760;:::o;1855:248:25:-;1959:19;2015:12;2004:35;;;;;;;;;;;;:::i;:::-;1990:49;-1:-1:-1;2049:47:25;:26;:13;:26;2076:6;1990:49;2049:26;:47::i;1288:390::-;1386:19;1418:21;1441:17;1473:9;1462:36;;;;;;;;;;;;:::i;:::-;1417:81;;;;1533:4;1522:27;;;;;;;;;;;;:::i;:::-;1508:41;;1563:16;1559:113;;;1595:66;:30;:13;:30;1626:6;1642:4;1649:11;1595:30;:66::i;:::-;1407:271;;1288:390;;;;:::o;485:222:41:-;566:22;623:6;612:18;;;;;;552:25:42;;540:2;525:18;;406:177;612:18:41;;;;;;;;;;;;;;;640:60;;;:23;11501:55:42;;;640:60:41;;;11483:74:42;11573:18;;;11566:34;;;680:19:41;11616:18:42;;;11609:34;612:18:41;;-1:-1:-1;640:15:41;:23;;;;11456:18:42;;640:60:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;485:222;;;;:::o;1219:160:33:-;1328:43;;1343:14;11846:55:42;;;1328:43:33;;;11828:74:42;11918:18;;;11911:34;;;1301:71:33;;1321:5;;1343:14;;;;;11801:18:42;;1328:43:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1301:19;:71::i;1618:188::-;1745:53;;1760:18;12176:55:42;;;1745:53:33;;;12158:74:42;12268:55;;;12248:18;;;12241:83;12340:18;;;12333:34;;;1718:81:33;;1738:5;;1760:18;;;;;12131::42;;1745:53:33;11956:417:42;7686:720:33;7766:18;7794:19;7932:4;7929:1;7922:4;7916:11;7909:4;7903;7899:15;7896:1;7889:5;7882;7877:60;7989:7;7979:176;;8033:4;8027:11;8078:16;8075:1;8070:3;8055:40;8124:16;8119:3;8112:29;7979:176;-1:-1:-1;;8232:1:33;8226:8;8182:16;;-1:-1:-1;8258:15:33;;:68;;8310:11;8325:1;8310:16;;8258:68;;;8276:26;;;;:31;8258:68;8254:146;;;8349:40;;;;;1308:42:42;1296:55;;8349:40:33;;;1278:74:42;1251:18;;8349:40:33;1117:241:42;14:196;82:20;;142:42;131:54;;121:65;;111:93;;200:1;197;190:12;111:93;14:196;;;:::o;215:186::-;274:6;327:2;315:9;306:7;302:23;298:32;295:52;;;343:1;340;333:12;295:52;366:29;385:9;366:29;:::i;588:332::-;646:6;699:2;687:9;678:7;674:23;670:32;667:52;;;715:1;712;705:12;667:52;754:9;741:23;804:66;797:5;793:78;786:5;783:89;773:117;;886:1;883;876:12;1363:347;1414:8;1424:6;1478:3;1471:4;1463:6;1459:17;1455:27;1445:55;;1496:1;1493;1486:12;1445:55;-1:-1:-1;1519:20:42;;1562:18;1551:30;;1548:50;;;1594:1;1591;1584:12;1548:50;1631:4;1623:6;1619:17;1607:29;;1683:3;1676:4;1667:6;1659;1655:19;1651:30;1648:39;1645:59;;;1700:1;1697;1690:12;1645:59;1363:347;;;;;:::o;1715:409::-;1785:6;1793;1846:2;1834:9;1825:7;1821:23;1817:32;1814:52;;;1862:1;1859;1852:12;1814:52;1902:9;1889:23;1935:18;1927:6;1924:30;1921:50;;;1967:1;1964;1957:12;1921:50;2006:58;2056:7;2047:6;2036:9;2032:22;2006:58;:::i;:::-;2083:8;;1980:84;;-1:-1:-1;1715:409:42;-1:-1:-1;;;;1715:409:42:o;2816:300::-;2884:6;2892;2945:2;2933:9;2924:7;2920:23;2916:32;2913:52;;;2961:1;2958;2951:12;2913:52;3006:23;;;-1:-1:-1;3072:38:42;3106:2;3091:18;;3072:38;:::i;:::-;3062:48;;2816:300;;;;;:::o;3121:672::-;3218:6;3226;3234;3242;3250;3303:3;3291:9;3282:7;3278:23;3274:33;3271:53;;;3320:1;3317;3310:12;3271:53;3343:29;3362:9;3343:29;:::i;:::-;3333:39;;3391:38;3425:2;3414:9;3410:18;3391:38;:::i;:::-;3381:48;-1:-1:-1;3498:2:42;3483:18;;3470:32;;-1:-1:-1;3577:2:42;3562:18;;3549:32;3604:18;3593:30;;3590:50;;;3636:1;3633;3626:12;3590:50;3675:58;3725:7;3716:6;3705:9;3701:22;3675:58;:::i;:::-;3121:672;;;;-1:-1:-1;3121:672:42;;-1:-1:-1;3752:8:42;;3649:84;3121:672;-1:-1:-1;;;3121:672:42:o;4051:346::-;4119:6;4127;4180:2;4168:9;4159:7;4155:23;4151:32;4148:52;;;4196:1;4193;4186:12;4148:52;-1:-1:-1;;4241:23:42;;;4361:2;4346:18;;;4333:32;;-1:-1:-1;4051:346:42:o;4402:226::-;4461:6;4514:2;4502:9;4493:7;4489:23;4485:32;4482:52;;;4530:1;4527;4520:12;4482:52;-1:-1:-1;4575:23:42;;4402:226;-1:-1:-1;4402:226:42:o;4864:184::-;4916:77;4913:1;4906:88;5013:4;5010:1;5003:15;5037:4;5034:1;5027:15;5053:128;5120:9;;;5141:11;;;5138:37;;;5155:18;;:::i;5186:168::-;5259:9;;;5290;;5307:15;;;5301:22;;5287:37;5277:71;;5328:18;;:::i;5359:184::-;5411:77;5408:1;5401:88;5508:4;5505:1;5498:15;5532:4;5529:1;5522:15;5548:120;5588:1;5614;5604:35;;5619:18;;:::i;:::-;-1:-1:-1;5653:9:42;;5548:120::o;5673:125::-;5738:9;;;5759:10;;;5756:36;;;5772:18;;:::i;5803:528::-;5996:6;5989:14;5982:22;5971:9;5964:41;6041:2;6036;6025:9;6021:18;6014:30;6080:6;6075:2;6064:9;6060:18;6053:34;6137:6;6129;6124:2;6113:9;6109:18;6096:48;6193:1;6164:22;;;6188:2;6160:31;;;6153:42;;;;6247:2;6235:15;;;6252:66;6231:88;6216:104;6212:113;;5803:528;-1:-1:-1;;5803:528:42:o;6336:250::-;6421:1;6431:113;6445:6;6442:1;6439:13;6431:113;;;6521:11;;;6515:18;6502:11;;;6495:39;6467:2;6460:10;6431:113;;;-1:-1:-1;;6578:1:42;6560:16;;6553:27;6336:250::o;6591:329::-;6632:3;6670:5;6664:12;6697:6;6692:3;6685:19;6713:76;6782:6;6775:4;6770:3;6766:14;6759:4;6752:5;6748:16;6713:76;:::i;:::-;6834:2;6822:15;6839:66;6818:88;6809:98;;;;6909:4;6805:109;;6591:329;-1:-1:-1;;6591:329:42:o;6925:288::-;7100:2;7089:9;7082:21;7063:4;7120:44;7160:2;7149:9;7145:18;7137:6;7120:44;:::i;:::-;7112:52;;7200:6;7195:2;7184:9;7180:18;7173:34;6925:288;;;;;:::o;7218:298::-;7401:6;7394:14;7387:22;7376:9;7369:41;7446:2;7441;7430:9;7426:18;7419:30;7350:4;7466:44;7506:2;7495:9;7491:18;7483:6;7466:44;:::i;:::-;7458:52;7218:298;-1:-1:-1;;;;7218:298:42:o;7774:112::-;7806:1;7832;7822:35;;7837:18;;:::i;:::-;-1:-1:-1;7871:9:42;;7774:112::o;9410:164::-;9486:13;;9535;;9528:21;9518:32;;9508:60;;9564:1;9561;9554:12;9579:202;9646:6;9699:2;9687:9;9678:7;9674:23;9670:32;9667:52;;;9715:1;9712;9705:12;9667:52;9738:37;9765:9;9738:37;:::i;9786:184::-;9856:6;9909:2;9897:9;9888:7;9884:23;9880:32;9877:52;;;9925:1;9922;9915:12;9877:52;-1:-1:-1;9948:16:42;;9786:184;-1:-1:-1;9786:184:42:o;9975:::-;10027:77;10024:1;10017:88;10124:4;10121:1;10114:15;10148:4;10145:1;10138:15;10164:1112;10249:6;10257;10310:2;10298:9;10289:7;10285:23;10281:32;10278:52;;;10326:1;10323;10316:12;10278:52;10349:37;10376:9;10349:37;:::i;:::-;10339:47;;10430:2;10419:9;10415:18;10409:25;10457:18;10449:6;10446:30;10443:50;;;10489:1;10486;10479:12;10443:50;10512:22;;10565:4;10557:13;;10553:27;-1:-1:-1;10543:55:42;;10594:1;10591;10584:12;10543:55;10627:2;10621:9;10653:18;10645:6;10642:30;10639:56;;;10675:18;;:::i;:::-;10724:2;10718:9;10871:66;10866:2;10797:66;10790:4;10782:6;10778:17;10774:90;10770:99;10766:172;10758:6;10754:185;11005:6;10993:10;10990:22;10969:18;10957:10;10954:34;10951:62;10948:88;;;11016:18;;:::i;:::-;11052:2;11045:22;11076;;;11117:15;;;11134:2;11113:24;11110:37;-1:-1:-1;11107:57:42;;;11160:1;11157;11150:12;11107:57;11173:72;11238:6;11233:2;11225:6;11221:15;11216:2;11212;11208:11;11173:72;:::i;:::-;11264:6;11254:16;;;;;10164:1112;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1628400","executionCost":"infinite","totalCost":"infinite"},"external":{"DEPOSIT_REASON_CODE()":"infinite","POINTS_CONTRACT()":"infinite","REWARDER_ROLE()":"229","SCALING_FACTOR()":"250","STAKING_TOKEN()":"infinite","addReward(uint256,uint256)":"infinite","claim()":"infinite","distributionEnd()":"2372","earned(address)":"infinite","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","lastTimeRewardApplicable()":"2413","lastUpdated()":"2395","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","rewardPerStakePoint()":"infinite","rewardPerStakePointPaid(address)":"2585","rewardPerStakePointStored()":"2351","rewardRate()":"2330","rewards(address)":"2542","stake(bytes)":"infinite","staked(address)":"2541","supportsInterface(bytes4)":"infinite","totalStaked()":"2374","transferOwnership(address)":"infinite","withdraw(bytes)":"infinite"},"internal":{"_computeAddReward(address,uint256,uint256)":"infinite","_computeClaim(address,uint256)":"infinite"}},"methodIdentifiers":{"DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93","REWARDER_ROLE()":"8580cf76","SCALING_FACTOR()":"ef4cadc5","STAKING_TOKEN()":"0479d644","addReward(uint256,uint256)":"75c93bb9","claim()":"4e71d92d","distributionEnd()":"efa90b54","earned(address)":"008cc262","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","lastTimeRewardApplicable()":"80faa57d","lastUpdated()":"d0b06f5d","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","rewardPerStakePoint()":"2c9d0b80","rewardPerStakePointPaid(address)":"c5c8f770","rewardPerStakePointStored()":"9d696e36","rewardRate()":"7b0a47ee","rewards(address)":"0700037d","stake(bytes)":"2d1e0c02","staked(address)":"98807d84","supportsInterface(bytes4)":"01ffc9a7","totalStaked()":"817b1cd2","transferOwnership(address)":"f2fde38b","withdraw(bytes)":"0968f264"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"contract IPoints\",\"name\":\"pointsContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"depositReasonCode\",\"type\":\"bytes32\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDuration\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStakeAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"RewardTooSmallForDuration\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"claimData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"dust\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SCALING_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewardPerStakePointPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerStakePointStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"stakeData\",\"type\":\"bytes\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakePoints\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"withdrawData\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":\"ERC20StakingPointsRewardsLinearPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {}\\n\",\"keccak256\":\"0x22b1604bf30b4dc858fc7e4c95a28fcca3e0f8b27ec59efb9234edb33baa8388\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x35be13820ea0bbc5d30563521177bf6d4db616e7b0b89ef86d0994a476a244bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x61abfb760e7f895005615e400c0ce427cbc8630dae03507c20bdb4e976525254\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x98d7876c176d64278e3cf49e38b8b91a55bf105bc67ab8c5dde5369489afce5c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x1e8ef0df72a9832998cd1cdf6a6d902c42c41480425dd0db02c22dc94f22fa15\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0xffd6dcc88e984aeb996af0dedf3e3648e9e09c92efbb707377db195767ff42c5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the pending contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotPendingContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0xcef24dac52eb52fe1241579b4d30accbee201134dbd6ef04b5b72da0c5c33e8b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x3362bafa0766fe7254baad2f901e8c36c39004daeb9e58477048d3b7758edcb7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n/// @notice Emitted when a new contract owner is pending.\\n/// @param pendingOwner the address of the new contract owner.\\nevent OwnershipTransferPending(address indexed pendingOwner);\\n\",\"keccak256\":\"0xacc404adb81d8e3b68c5a8a8ce59720d100f9e04bb828be6638689d1ffaf014a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x3a5b8f8d04c1ad412d651ecb26ca76a18ad7cfe154ad4542cf2706ccc98f56e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x0dcfd1dbbfd75a6e2d564d51b9f18f1c36dcde9e0a09fa37309f89ea9b983e6a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79f9d5ff8238f802faf407106a08bde5665438023b52c51d6d919dfb6df923f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"./../../utils/libraries/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.hasBytecode()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeb170039cf4e40fbdf199c1272eb87ba6117e85f4df5eee0d19708b93665225a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xfde204c6431ffdc7173ca7a26c7ed1a0729c837418d6f3682f3adac216e93ac8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x0fd7df6f16ddbcaf3f5b8f603a12c0516e1dc5ee08eb770da52691adf070e0bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x34f460e915aaaec82d62c228f4813ca758b487034eaa43b65c128389539194d9\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeaf559662562be7885b75193ff6994e52cf8109c898ffced02c2b26785d94ee2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0x85b8b0ab978dd10c82846ab1201ecff64ac70700968b2c71e4b222b01905c5a4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender, address(this))) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (\\n            msg.sender == address(_FORWARDER_REGISTRY) ||\\n            _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender, address(this))\\n        ) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x9a024b7aa6527471d6a097c62dfa94e85a1427ec63776153aff9e5d7ba229040\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xba965c7284aabdb77c9b0bd7b20d72e04d9e38d28f8a00c635ad84ab346e9f12\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title Meta-Transactions Forwarder Registry.\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account to a target contract.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @param target The target contract.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender` to `target`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder, address target) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0xdfb17430660876a9214c0cc4c37eb688c565b3c8211151b3413d88d5b4e4c4cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8de5057207aa02ba450c95d802f3f77736cafeb1c4e516d6989c27ff5fa1315d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x85ee7912d0020d0f032e2dacacbec057114235fbdab703753fdcde5c78275543\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xdc2cca29702fe573cb5af8c3320eafe7a490aef99bcaafe1e6575159bb0007d7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ContractOwnership} from \\\"./../../access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"./../../access/AccessControl.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./../../metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"./../../metatx/ForwarderRegistryContext.sol\\\";\\nimport {AccessControlStorage} from \\\"./../../access/libraries/AccessControlStorage.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\n// design inspired from https://github.com/k06a/Unipool/blob/master/contracts/Unipool.sol\\n\\nabstract contract LinearPool is AccessControl, ReentrancyGuard, ForwarderRegistryContext {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using SafeERC20 for IERC20;\\n\\n    bytes32 public constant REWARDER_ROLE = \\\"rewarder\\\";\\n    uint256 public constant SCALING_FACTOR = 1e18;\\n\\n    uint256 public totalStaked;\\n    uint256 public lastUpdated;\\n    uint256 public rewardRate;\\n    uint256 public rewardPerStakePointStored;\\n    uint256 public distributionEnd;\\n\\n    mapping(address staker => uint256 stakePoints) public staked;\\n    mapping(address staker => uint256 reward) public rewards;\\n    mapping(address staker => uint256 paid) public rewardPerStakePointPaid;\\n\\n    event Staked(address indexed staker, bytes stakeData, uint256 stakePoints);\\n    event Withdrawn(address indexed staker, bytes withdrawData, uint256 stakePoints);\\n    event Claimed(address indexed staker, bytes claimData, uint256 reward);\\n    event RewardAdded(address indexed rewarder, uint256 reward, uint256 duration, uint256 dust);\\n\\n    error InvalidStakeAmount();\\n    error InvalidWithdrawAmount();\\n    error InvalidRewardAmount();\\n    error InvalidDuration();\\n    error RewardTooSmallForDuration(uint256 reward, uint256 duration);\\n\\n    constructor(IForwarderRegistry forwarderRegistry) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {}\\n\\n    function _updateReward(address account) internal {\\n        rewardPerStakePointStored = rewardPerStakePoint();\\n        if (block.timestamp >= distributionEnd || totalStaked != 0) {\\n            // ensure rewards before the first staker do not get lost\\n            lastUpdated = lastTimeRewardApplicable();\\n        }\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            rewardPerStakePointPaid[account] = rewardPerStakePointStored;\\n        }\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        uint256 currentDistributionEnd = distributionEnd;\\n        return block.timestamp < currentDistributionEnd ? block.timestamp : currentDistributionEnd;\\n    }\\n\\n    function rewardPerStakePoint() public view returns (uint256) {\\n        uint256 currentTotalStaked = totalStaked;\\n        if (currentTotalStaked == 0) {\\n            return rewardPerStakePointStored;\\n        }\\n        return rewardPerStakePointStored + (((lastTimeRewardApplicable() - lastUpdated) * rewardRate * SCALING_FACTOR) / currentTotalStaked);\\n    }\\n\\n    function earned(address account) public view returns (uint256) {\\n        return (staked[account] * (rewardPerStakePoint() - rewardPerStakePointPaid[account])) / SCALING_FACTOR + rewards[account];\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual nonReentrant {\\n        _stake(_msgSender(), abi.encode(stakeData));\\n    }\\n\\n    function _stake(address sender, bytes memory stakeData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeStake(sender, stakeData);\\n        require(stakePoints != 0, InvalidStakeAmount());\\n        totalStaked += stakePoints;\\n        staked[sender] += stakePoints;\\n        emit Staked(sender, stakeData, stakePoints);\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual nonReentrant {\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _withdraw(address sender, bytes memory withdrawData) internal virtual {\\n        _updateReward(sender);\\n        uint256 stakePoints = _computeWithdraw(sender, withdrawData);\\n        require(stakePoints != 0, InvalidWithdrawAmount());\\n        totalStaked -= stakePoints;\\n        staked[sender] -= stakePoints;\\n        emit Withdrawn(sender, withdrawData, stakePoints);\\n    }\\n\\n    function claim() public virtual {\\n        address sender = _msgSender();\\n        _updateReward(sender);\\n        uint256 reward = earned(sender);\\n        if (reward != 0) {\\n            rewards[sender] = 0;\\n            bytes memory claimData = _computeClaim(sender, reward);\\n            emit Claimed(sender, claimData, reward);\\n        }\\n    }\\n\\n    function addReward(uint256 reward, uint256 duration) public payable virtual {\\n        address sender = _msgSender();\\n        AccessControlStorage.layout().enforceHasRole(REWARDER_ROLE, sender);\\n\\n        require(reward != 0, InvalidRewardAmount());\\n        require(duration != 0, InvalidDuration());\\n\\n        _updateReward(address(0));\\n\\n        uint256 dust;\\n        uint256 currentDistributionEnd = distributionEnd;\\n        uint256 newDisributionEnd = block.timestamp + duration;\\n\\n        if (block.timestamp >= currentDistributionEnd) {\\n            // No current distribution\\n            uint256 newRewardRate = reward / duration;\\n            require(newRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n            rewardRate = newRewardRate;\\n            dust = reward % duration;\\n            distributionEnd = newDisributionEnd;\\n        } else {\\n            if (newDisributionEnd <= currentDistributionEnd) {\\n                // New distribution ends before current distribution\\n                duration = currentDistributionEnd - block.timestamp;\\n                uint256 additionalRewardRate = reward / duration;\\n                require(additionalRewardRate != 0, RewardTooSmallForDuration(reward, duration));\\n                rewardRate += additionalRewardRate;\\n                dust = reward % duration;\\n            } else {\\n                // New distribution ends after current distribution\\n                require(reward / duration != 0, RewardTooSmallForDuration(reward, duration));\\n                uint256 remainingReward = rewardRate * (currentDistributionEnd - block.timestamp);\\n                uint256 totalReward = remainingReward + reward;\\n                rewardRate = totalReward / duration;\\n                dust = totalReward % duration;\\n                distributionEnd = newDisributionEnd;\\n            }\\n        }\\n        lastUpdated = block.timestamp;\\n\\n        _computeAddReward(sender, reward, dust);\\n\\n        emit RewardAdded(sender, reward, duration, dust);\\n    }\\n\\n    function _computeStake(address sender, bytes memory stakeData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeWithdraw(address sender, bytes memory withdrawData) internal virtual returns (uint256 stakePoints);\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData);\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual;\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0x110fa1853326976c0f86e5eab2e656af7d8625ffaff607f04a47dbaf55557c9b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"./../LinearPool.sol\\\";\\nimport {ERC20Receiver} from \\\"./../../../token/ERC20/ERC20Receiver.sol\\\";\\nimport {SafeERC20, IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"./../../../metatx/interfaces/IForwarderRegistry.sol\\\";\\n\\nabstract contract ERC20StakingLinearPool is LinearPool, ERC20Receiver {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable STAKING_TOKEN;\\n\\n    error InvalidToken();\\n\\n    constructor(IERC20 stakingToken, IForwarderRegistry forwarderRegistry) LinearPool(forwarderRegistry) {\\n        STAKING_TOKEN = stakingToken;\\n    }\\n\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external virtual override returns (bytes4) {\\n        if (msg.sender != address(STAKING_TOKEN)) revert InvalidToken();\\n        bool requiresTransfer = false;\\n        _stake(from, abi.encode(requiresTransfer, abi.encode(value)));\\n        return this.onERC20Received.selector;\\n    }\\n\\n    function stake(bytes calldata stakeData) public payable virtual override {\\n        // non-reentrancy check removed\\n        bool requiresTransfer = true;\\n        _stake(_msgSender(), abi.encode(requiresTransfer, stakeData));\\n    }\\n\\n    function _computeStake(address staker, bytes memory stakeData) internal virtual override returns (uint256 stakePoints) {\\n        (bool requiresTransfer, bytes memory data) = abi.decode(stakeData, (bool, bytes));\\n        stakePoints = abi.decode(data, (uint256));\\n        if (requiresTransfer) {\\n            STAKING_TOKEN.safeTransferFrom(staker, address(this), stakePoints);\\n        }\\n    }\\n\\n    function withdraw(bytes calldata withdrawData) public virtual override {\\n        // non-reentrancy check removed\\n        _withdraw(_msgSender(), withdrawData);\\n    }\\n\\n    function _computeWithdraw(address staker, bytes memory withdrawData) internal virtual override returns (uint256 stakePoints) {\\n        stakePoints = abi.decode(withdrawData, (uint256));\\n        STAKING_TOKEN.safeTransfer(staker, stakePoints);\\n    }\\n}\\n\",\"keccak256\":\"0xb94ae7a938c0d4bd6b587025c13c1592019a999d5e713c35c875d923a948ad11\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0xfb90dee99558b194064ec453d0980afb2a0c30ca93e41c0bc6e11f50ece11f88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0b9737d6b61c427a5215ee1186926f0ac7a1406f7e9b4e860e04bb751d637733\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.28;\\n\\nlibrary Address {\\n    /// @notice Checks if the address is a deployed smart contract.\\n    /// @param addr The address to check.\\n    /// @return hasBytecode True if `addr` is a deployed smart contract, false otherwise.\\n    function hasBytecode(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size != 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf3119a6298c6da4e7da69344ae8ab51a6a64dc08c68f826a560e72d46cf0ad9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1363.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC1363.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @title IERC1363\\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\\n *\\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\\n */\\ninterface IERC1363 is IERC20, IERC165 {\\n    /*\\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\\n     * 0xb0202a11 ===\\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\\n     */\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\\n     * @param from The address which you want to send tokens from.\\n     * @param to The address which you want to transfer to.\\n     * @param value The amount of tokens to be transferred.\\n     * @param data Additional data with no specified format, sent in call to `to`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\\n     * @param spender The address which will spend the funds.\\n     * @param value The amount of tokens to be spent.\\n     * @param data Additional data with no specified format, sent in call to `spender`.\\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\\n     */\\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9b6b3e7803bc5f2f8cd7ad57db8ac1def61a9930a5a3107df4882e028a9605d7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0xce41876e78d1badc0512229b4d14e4daf83bc1003d7f83978d18e0e56f965b9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 standard as defined in the ERC.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC1363} from \\\"../../../interfaces/IERC1363.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    /**\\n     * @dev An operation with an ERC-20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     *\\n     * IMPORTANT: If the token implements ERC-7674 (ERC-20 with temporary allowance), and if the \\\"client\\\"\\n     * smart contract uses ERC-7674 to set temporary allowances, then the \\\"client\\\" smart contract should avoid using\\n     * this function. Performing a {safeIncreaseAllowance} or {safeDecreaseAllowance} operation on a token contract\\n     * that has a non-zero temporary allowance (for that particular owner-spender) will result in unexpected behavior.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     *\\n     * NOTE: If the token implements ERC-7674, this function will not modify any temporary allowance. This function\\n     * only sets the \\\"standard\\\" allowance. Any temporary allowance will remain active, in addition to the value being\\n     * set here.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            safeTransfer(token, to, value);\\n        } else if (!token.transferAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function transferFromAndCallRelaxed(\\n        IERC1363 token,\\n        address from,\\n        address to,\\n        uint256 value,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length == 0) {\\n            safeTransferFrom(token, from, to, value);\\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\\n     * targeting contracts.\\n     *\\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\\n     * once without retrying, and relies on the returned value to be true.\\n     *\\n     * Reverts if the returned value is other than `true`.\\n     */\\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\\n        if (to.code.length == 0) {\\n            forceApprove(token, to, value);\\n        } else if (!token.approveAndCall(to, value, data)) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturnBool} that reverts if call fails to meet the requirements.\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            let success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            // bubble errors\\n            if iszero(success) {\\n                let ptr := mload(0x40)\\n                returndatacopy(ptr, 0, returndatasize())\\n                revert(ptr, returndatasize())\\n            }\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n\\n        if (returnSize == 0 ? address(token).code.length == 0 : returnValue != 1) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silently catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly (\\\"memory-safe\\\") {\\n            success := call(gas(), token, 0, add(data, 0x20), mload(data), 0, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0)\\n        }\\n        return success && (returnSize == 0 ? address(token).code.length > 0 : returnValue == 1);\\n    }\\n}\\n\",\"keccak256\":\"0x4ea01544758fd2c7045961904686bfe232d2220a04ecaa2d6b08dac17827febf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If EIP-1153 (transient storage) is available on the chain you're deploying at,\\n * consider using {ReentrancyGuardTransient} instead.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x11a5a79827df29e915a12740caf62fe21ebe27c08c9ae3e09abe9ee3ba3866d3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct Int256Slot {\\n        int256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n     */\\n    function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        assembly (\\\"memory-safe\\\") {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {LinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/LinearPool.sol\\\";\\nimport {ERC20StakingLinearPool} from \\\"@animoca/ethereum-contracts/contracts/staking/linear/stake/ERC20StakingLinearPool.sol\\\";\\nimport {LinearPool_PointsRewards} from \\\"./reward/LinearPool_PointsRewards.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IPoints} from \\\"./../points/interface/IPoints.sol\\\";\\n\\ncontract ERC20StakingPointsRewardsLinearPool is ERC20StakingLinearPool, LinearPool_PointsRewards {\\n    constructor(\\n        IERC20 stakingToken,\\n        IPoints pointsContract,\\n        bytes32 depositReasonCode,\\n        IForwarderRegistry forwarderRegistry\\n    ) ERC20StakingLinearPool(stakingToken, forwarderRegistry) LinearPool_PointsRewards(pointsContract, depositReasonCode) {}\\n\\n    function _computeClaim(\\n        address staker,\\n        uint256 reward\\n    ) internal virtual override(LinearPool, LinearPool_PointsRewards) returns (bytes memory claimData) {\\n        return LinearPool_PointsRewards._computeClaim(staker, reward);\\n    }\\n\\n    function _computeAddReward(address rewarder, uint256 reward, uint256 dust) internal virtual override(LinearPool, LinearPool_PointsRewards) {\\n        LinearPool_PointsRewards._computeAddReward(rewarder, reward, dust);\\n    }\\n}\\n\",\"keccak256\":\"0xe1f4bd20690f6a255f99e0b9aa59ad7ebf07d12e0ef78e9d3a0dbf060b330d6f\",\"license\":\"MIT\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x10fc21c24586c2d78e2f1b81ce64fffb8391f2c4ca2f50cfb47dcd8004b26e3a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2853,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"_status","offset":0,"slot":"0","type":"t_uint256"},{"astId":1332,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"totalStaked","offset":0,"slot":"1","type":"t_uint256"},{"astId":1334,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"lastUpdated","offset":0,"slot":"2","type":"t_uint256"},{"astId":1336,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardRate","offset":0,"slot":"3","type":"t_uint256"},{"astId":1338,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardPerStakePointStored","offset":0,"slot":"4","type":"t_uint256"},{"astId":1340,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"distributionEnd","offset":0,"slot":"5","type":"t_uint256"},{"astId":1344,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"staked","offset":0,"slot":"6","type":"t_mapping(t_address,t_uint256)"},{"astId":1348,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewards","offset":0,"slot":"7","type":"t_mapping(t_address,t_uint256)"},{"astId":1352,"contract":"contracts/staking/ERC20StakingPointsRewardsLinearPool.sol:ERC20StakingPointsRewardsLinearPool","label":"rewardPerStakePointPaid","offset":0,"slot":"8","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/staking/reward/LinearPool_PointsRewards.sol":{"LinearPool_PointsRewards":{"abi":[{"inputs":[],"name":"DEPOSIT_REASON_CODE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POINTS_CONTRACT","outputs":[{"internalType":"contract IPoints","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DEPOSIT_REASON_CODE()":"2196e445","POINTS_CONTRACT()":"2d4c2f93"}},"metadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DEPOSIT_REASON_CODE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POINTS_CONTRACT\",\"outputs\":[{\"internalType\":\"contract IPoints\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/staking/reward/LinearPool_PointsRewards.sol\":\"LinearPool_PointsRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/points/interface/IPoints.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.28;\\n\\ninterface IPoints {\\n    function deposit(address holder, uint256 amount, bytes32 depositReasonCode) external;\\n}\\n\",\"keccak256\":\"0xc9053cae4c7260d2ad090a30acc2cf3b64618a2341bd3edf0b0a06655bd77f89\",\"license\":\"GPL-3.0-or-later\"},\"contracts/staking/reward/LinearPool_PointsRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {IPoints} from \\\"./../../points/interface/IPoints.sol\\\";\\n\\n// solhint-disable-next-line contract-name-capwords\\nabstract contract LinearPool_PointsRewards {\\n    IPoints public immutable POINTS_CONTRACT;\\n    bytes32 public immutable DEPOSIT_REASON_CODE;\\n\\n    constructor(IPoints pointsContract, bytes32 depositReasonCode) {\\n        POINTS_CONTRACT = pointsContract;\\n        DEPOSIT_REASON_CODE = depositReasonCode;\\n    }\\n\\n    function _computeClaim(address sender, uint256 reward) internal virtual returns (bytes memory claimData) {\\n        claimData = abi.encode(reward);\\n        POINTS_CONTRACT.deposit(sender, reward, DEPOSIT_REASON_CODE);\\n    }\\n\\n    function _computeAddReward(address sender, uint256 reward, uint256 dust) internal virtual {}\\n}\\n\",\"keccak256\":\"0x10fc21c24586c2d78e2f1b81ce64fffb8391f2c4ca2f50cfb47dcd8004b26e3a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}